
Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  08008570  08008570  00018570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cbc  08008cbc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008cbc  08008cbc  00018cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cc4  08008cc4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cc4  08008cc4  00018cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cc8  08008cc8  00018cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          0000008c  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000278  20000278  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008422  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018df  00000000  00000000  0002863e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  00029f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007e8  00000000  00000000  0002a7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa8c  00000000  00000000  0002afc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000abab  00000000  00000000  0004aa4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba391  00000000  00000000  000555f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010f988  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000392c  00000000  00000000  0010f9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008554 	.word	0x08008554

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08008554 	.word	0x08008554

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_GPIO_Init+0x9c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_GPIO_Init+0x9c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a11      	ldr	r2, [pc, #68]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <MX_GPIO_Init+0xa0>)
 800106a:	f001 f939 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800106e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_GPIO_Init+0xa0>)
 8001088:	f000 ff8e 	bl	8001fa8 <HAL_GPIO_Init>

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020800 	.word	0x40020800

0800109c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_I2C1_Init+0x50>)
 80010a2:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <MX_I2C1_Init+0x54>)
 80010a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_I2C1_Init+0x50>)
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <MX_I2C1_Init+0x58>)
 80010aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_I2C1_Init+0x50>)
 80010da:	f001 f91b 	bl	8002314 <HAL_I2C_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e4:	f000 fa58 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000208 	.word	0x20000208
 80010f0:	40005400 	.word	0x40005400
 80010f4:	00061a80 	.word	0x00061a80

080010f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a19      	ldr	r2, [pc, #100]	; (800117c <HAL_I2C_MspInit+0x84>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d12c      	bne.n	8001174 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_I2C_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001136:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113c:	2312      	movs	r3, #18
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001148:	2304      	movs	r3, #4
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	480c      	ldr	r0, [pc, #48]	; (8001184 <HAL_I2C_MspInit+0x8c>)
 8001154:	f000 ff28 	bl	8001fa8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_I2C_MspInit+0x88>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001162:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001166:	6413      	str	r3, [r2, #64]	; 0x40
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_I2C_MspInit+0x88>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40005400 	.word	0x40005400
 8001180:	40023800 	.word	0x40023800
 8001184:	40020400 	.word	0x40020400

08001188 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <bno055_assignI2C+0x1c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	2000025c 	.word	0x2000025c

080011a8 <bno055_delay>:

void bno055_delay(int time) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fdee 	bl	8001d94 <HAL_Delay>
#endif
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	733b      	strb	r3, [r7, #12]
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80011d8:	4b5a      	ldr	r3, [pc, #360]	; (8001344 <bno055_writeData+0x184>)
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	f107 020c 	add.w	r2, r7, #12
 80011e0:	230a      	movs	r3, #10
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2302      	movs	r3, #2
 80011e6:	2150      	movs	r1, #80	; 0x50
 80011e8:	f001 f9d8 	bl	800259c <HAL_I2C_Master_Transmit>
 80011ec:	4603      	mov	r3, r0
 80011ee:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80a0 	beq.w	8001338 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d103      	bne.n	8001206 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80011fe:	4852      	ldr	r0, [pc, #328]	; (8001348 <bno055_writeData+0x188>)
 8001200:	f003 fbbc 	bl	800497c <puts>
 8001204:	e012      	b.n	800122c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	2b03      	cmp	r3, #3
 800120a:	d103      	bne.n	8001214 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800120c:	484f      	ldr	r0, [pc, #316]	; (800134c <bno055_writeData+0x18c>)
 800120e:	f003 fbb5 	bl	800497c <puts>
 8001212:	e00b      	b.n	800122c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001214:	7dfb      	ldrb	r3, [r7, #23]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d103      	bne.n	8001222 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800121a:	484d      	ldr	r0, [pc, #308]	; (8001350 <bno055_writeData+0x190>)
 800121c:	f003 fbae 	bl	800497c <puts>
 8001220:	e004      	b.n	800122c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	4619      	mov	r1, r3
 8001226:	484b      	ldr	r0, [pc, #300]	; (8001354 <bno055_writeData+0x194>)
 8001228:	f003 fb22 	bl	8004870 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800122c:	4b45      	ldr	r3, [pc, #276]	; (8001344 <bno055_writeData+0x184>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f001 fce5 	bl	8002c00 <HAL_I2C_GetError>
 8001236:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d07e      	beq.n	800133c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d103      	bne.n	800124c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001244:	4844      	ldr	r0, [pc, #272]	; (8001358 <bno055_writeData+0x198>)
 8001246:	f003 fb99 	bl	800497c <puts>
 800124a:	e021      	b.n	8001290 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d103      	bne.n	800125a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001252:	4842      	ldr	r0, [pc, #264]	; (800135c <bno055_writeData+0x19c>)
 8001254:	f003 fb92 	bl	800497c <puts>
 8001258:	e01a      	b.n	8001290 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	2b04      	cmp	r3, #4
 800125e:	d103      	bne.n	8001268 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001260:	483f      	ldr	r0, [pc, #252]	; (8001360 <bno055_writeData+0x1a0>)
 8001262:	f003 fb8b 	bl	800497c <puts>
 8001266:	e013      	b.n	8001290 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b08      	cmp	r3, #8
 800126c:	d103      	bne.n	8001276 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800126e:	483d      	ldr	r0, [pc, #244]	; (8001364 <bno055_writeData+0x1a4>)
 8001270:	f003 fb84 	bl	800497c <puts>
 8001274:	e00c      	b.n	8001290 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b10      	cmp	r3, #16
 800127a:	d103      	bne.n	8001284 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800127c:	483a      	ldr	r0, [pc, #232]	; (8001368 <bno055_writeData+0x1a8>)
 800127e:	f003 fb7d 	bl	800497c <puts>
 8001282:	e005      	b.n	8001290 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b20      	cmp	r3, #32
 8001288:	d102      	bne.n	8001290 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800128a:	4838      	ldr	r0, [pc, #224]	; (800136c <bno055_writeData+0x1ac>)
 800128c:	f003 fb76 	bl	800497c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001290:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <bno055_writeData+0x184>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f001 fca5 	bl	8002be4 <HAL_I2C_GetState>
 800129a:	4603      	mov	r3, r0
 800129c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d103      	bne.n	80012ac <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80012a4:	4832      	ldr	r0, [pc, #200]	; (8001370 <bno055_writeData+0x1b0>)
 80012a6:	f003 fb69 	bl	800497c <puts>
 80012aa:	e048      	b.n	800133e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b20      	cmp	r3, #32
 80012b0:	d103      	bne.n	80012ba <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80012b2:	482f      	ldr	r0, [pc, #188]	; (8001370 <bno055_writeData+0x1b0>)
 80012b4:	f003 fb62 	bl	800497c <puts>
 80012b8:	e041      	b.n	800133e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b24      	cmp	r3, #36	; 0x24
 80012be:	d103      	bne.n	80012c8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80012c0:	482c      	ldr	r0, [pc, #176]	; (8001374 <bno055_writeData+0x1b4>)
 80012c2:	f003 fb5b 	bl	800497c <puts>
 80012c6:	e03a      	b.n	800133e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	2b21      	cmp	r3, #33	; 0x21
 80012cc:	d103      	bne.n	80012d6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80012ce:	482a      	ldr	r0, [pc, #168]	; (8001378 <bno055_writeData+0x1b8>)
 80012d0:	f003 fb54 	bl	800497c <puts>
 80012d4:	e033      	b.n	800133e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	2b22      	cmp	r3, #34	; 0x22
 80012da:	d103      	bne.n	80012e4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80012dc:	4827      	ldr	r0, [pc, #156]	; (800137c <bno055_writeData+0x1bc>)
 80012de:	f003 fb4d 	bl	800497c <puts>
 80012e2:	e02c      	b.n	800133e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	2b28      	cmp	r3, #40	; 0x28
 80012e8:	d103      	bne.n	80012f2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80012ea:	4825      	ldr	r0, [pc, #148]	; (8001380 <bno055_writeData+0x1c0>)
 80012ec:	f003 fb46 	bl	800497c <puts>
 80012f0:	e025      	b.n	800133e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b29      	cmp	r3, #41	; 0x29
 80012f6:	d103      	bne.n	8001300 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80012f8:	4822      	ldr	r0, [pc, #136]	; (8001384 <bno055_writeData+0x1c4>)
 80012fa:	f003 fb3f 	bl	800497c <puts>
 80012fe:	e01e      	b.n	800133e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	2b2a      	cmp	r3, #42	; 0x2a
 8001304:	d103      	bne.n	800130e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001306:	4820      	ldr	r0, [pc, #128]	; (8001388 <bno055_writeData+0x1c8>)
 8001308:	f003 fb38 	bl	800497c <puts>
 800130c:	e017      	b.n	800133e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2b60      	cmp	r3, #96	; 0x60
 8001312:	d103      	bne.n	800131c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001314:	481d      	ldr	r0, [pc, #116]	; (800138c <bno055_writeData+0x1cc>)
 8001316:	f003 fb31 	bl	800497c <puts>
 800131a:	e010      	b.n	800133e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	2ba0      	cmp	r3, #160	; 0xa0
 8001320:	d103      	bne.n	800132a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001322:	481b      	ldr	r0, [pc, #108]	; (8001390 <bno055_writeData+0x1d0>)
 8001324:	f003 fb2a 	bl	800497c <puts>
 8001328:	e009      	b.n	800133e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2be0      	cmp	r3, #224	; 0xe0
 800132e:	d106      	bne.n	800133e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001330:	4818      	ldr	r0, [pc, #96]	; (8001394 <bno055_writeData+0x1d4>)
 8001332:	f003 fb23 	bl	800497c <puts>
 8001336:	e002      	b.n	800133e <bno055_writeData+0x17e>
    return;
 8001338:	bf00      	nop
 800133a:	e000      	b.n	800133e <bno055_writeData+0x17e>
    return;
 800133c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000025c 	.word	0x2000025c
 8001348:	08008570 	.word	0x08008570
 800134c:	08008594 	.word	0x08008594
 8001350:	080085bc 	.word	0x080085bc
 8001354:	080085e0 	.word	0x080085e0
 8001358:	080085f8 	.word	0x080085f8
 800135c:	0800860c 	.word	0x0800860c
 8001360:	08008620 	.word	0x08008620
 8001364:	08008634 	.word	0x08008634
 8001368:	08008648 	.word	0x08008648
 800136c:	0800865c 	.word	0x0800865c
 8001370:	08008674 	.word	0x08008674
 8001374:	0800868c 	.word	0x0800868c
 8001378:	080086a0 	.word	0x080086a0
 800137c:	080086b8 	.word	0x080086b8
 8001380:	080086d0 	.word	0x080086d0
 8001384:	080086e8 	.word	0x080086e8
 8001388:	08008708 	.word	0x08008708
 800138c:	08008728 	.word	0x08008728
 8001390:	08008740 	.word	0x08008740
 8001394:	08008758 	.word	0x08008758

08001398 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af02      	add	r7, sp, #8
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	4613      	mov	r3, r2
 80013a6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <bno055_readData+0x40>)
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	1dfa      	adds	r2, r7, #7
 80013ae:	2364      	movs	r3, #100	; 0x64
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	2150      	movs	r1, #80	; 0x50
 80013b6:	f001 f8f1 	bl	800259c <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <bno055_readData+0x40>)
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	2264      	movs	r2, #100	; 0x64
 80013c4:	9200      	str	r2, [sp, #0]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	2150      	movs	r1, #80	; 0x50
 80013ca:	f001 f9e5 	bl	8002798 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000025c 	.word	0x2000025c

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013e0:	b08e      	sub	sp, #56	; 0x38
 80013e2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f000 fc64 	bl	8001cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e8:	f000 f86c 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ec:	f7ff fe04 	bl	8000ff8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013f0:	f7ff fe54 	bl	800109c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
    bno055_assignI2C(&hi2c1);
 80013f4:	4830      	ldr	r0, [pc, #192]	; (80014b8 <main+0xdc>)
 80013f6:	f7ff fec7 	bl	8001188 <bno055_assignI2C>
    bno055_setup();
 80013fa:	f000 fa67 	bl	80018cc <bno055_setup>
    bno055_setOperationModeNDOF();
 80013fe:	f000 fa51 	bl	80018a4 <bno055_setOperationModeNDOF>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  bno055_vector_t v = bno055_getVectorEuler();
 8001402:	f000 fbcf 	bl	8001ba4 <bno055_getVectorEuler>
 8001406:	eeb0 4a40 	vmov.f32	s8, s0
 800140a:	eef0 4a60 	vmov.f32	s9, s1
 800140e:	eeb0 5a41 	vmov.f32	s10, s2
 8001412:	eef0 5a61 	vmov.f32	s11, s3
 8001416:	eeb0 6a42 	vmov.f32	s12, s4
 800141a:	eef0 6a62 	vmov.f32	s13, s5
 800141e:	eeb0 7a43 	vmov.f32	s14, s6
 8001422:	eef0 7a63 	vmov.f32	s15, s7
 8001426:	ed87 4b00 	vstr	d4, [r7]
 800142a:	ed87 5b02 	vstr	d5, [r7, #8]
 800142e:	ed87 6b04 	vstr	d6, [r7, #16]
 8001432:	ed87 7b06 	vstr	d7, [r7, #24]
	  printf("Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);
 8001436:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800143a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800143e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001446:	e9cd 2300 	strd	r2, r3, [sp]
 800144a:	4622      	mov	r2, r4
 800144c:	462b      	mov	r3, r5
 800144e:	481b      	ldr	r0, [pc, #108]	; (80014bc <main+0xe0>)
 8001450:	f003 fa0e 	bl	8004870 <iprintf>
	  v = bno055_getVectorQuaternion();
 8001454:	f000 fbe9 	bl	8001c2a <bno055_getVectorQuaternion>
 8001458:	eeb0 4a40 	vmov.f32	s8, s0
 800145c:	eef0 4a60 	vmov.f32	s9, s1
 8001460:	eeb0 5a41 	vmov.f32	s10, s2
 8001464:	eef0 5a61 	vmov.f32	s11, s3
 8001468:	eeb0 6a42 	vmov.f32	s12, s4
 800146c:	eef0 6a62 	vmov.f32	s13, s5
 8001470:	eeb0 7a43 	vmov.f32	s14, s6
 8001474:	eef0 7a63 	vmov.f32	s15, s7
 8001478:	ed87 4b00 	vstr	d4, [r7]
 800147c:	ed87 5b02 	vstr	d5, [r7, #8]
 8001480:	ed87 6b04 	vstr	d6, [r7, #16]
 8001484:	ed87 7b06 	vstr	d7, [r7, #24]
	  printf("W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
 8001488:	e9d7 8900 	ldrd	r8, r9, [r7]
 800148c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001490:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001494:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001498:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800149c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80014a0:	e9cd 2300 	strd	r2, r3, [sp]
 80014a4:	4642      	mov	r2, r8
 80014a6:	464b      	mov	r3, r9
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <main+0xe4>)
 80014aa:	f003 f9e1 	bl	8004870 <iprintf>
	  HAL_Delay(1000);
 80014ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b2:	f000 fc6f 	bl	8001d94 <HAL_Delay>
  {
 80014b6:	e7a4      	b.n	8001402 <main+0x26>
 80014b8:	20000208 	.word	0x20000208
 80014bc:	08008770 	.word	0x08008770
 80014c0:	08008798 	.word	0x08008798

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	; 0x50
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2230      	movs	r2, #48	; 0x30
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 fb4a 	bl	8003b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <SystemClock_Config+0xcc>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a27      	ldr	r2, [pc, #156]	; (8001590 <SystemClock_Config+0xcc>)
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <SystemClock_Config+0xcc>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <SystemClock_Config+0xd0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a21      	ldr	r2, [pc, #132]	; (8001594 <SystemClock_Config+0xd0>)
 800150e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <SystemClock_Config+0xd0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	2301      	movs	r3, #1
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001528:	2310      	movs	r3, #16
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152c:	2302      	movs	r3, #2
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001530:	2300      	movs	r3, #0
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001534:	2308      	movs	r3, #8
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001538:	23a8      	movs	r3, #168	; 0xa8
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153c:	2302      	movs	r3, #2
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001540:	2304      	movs	r3, #4
 8001542:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fe93 	bl	8003274 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001554:	f000 f820 	bl	8001598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	230f      	movs	r3, #15
 800155a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2302      	movs	r3, #2
 800155e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001564:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2105      	movs	r1, #5
 8001576:	4618      	mov	r0, r3
 8001578:	f002 f8f4 	bl	8003764 <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001582:	f000 f809 	bl	8001598 <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	3750      	adds	r7, #80	; 0x50
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40007000 	.word	0x40007000

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
}
 800159e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <Error_Handler+0x8>
	...

080015a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_MspInit+0x4c>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <HAL_MspInit+0x4c>)
 80015b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_MspInit+0x4c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_MspInit+0x4c>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_MspInit+0x4c>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_MspInit+0x4c>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001640:	f000 fb88 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_kill>:

int _kill(int pid, int sig)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001662:	f002 fa4b 	bl	8003afc <__errno>
 8001666:	4603      	mov	r3, r0
 8001668:	2216      	movs	r2, #22
 800166a:	601a      	str	r2, [r3, #0]
	return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffe7 	bl	8001658 <_kill>
	while (1) {}		/* Make sure we hang here */
 800168a:	e7fe      	b.n	800168a <_exit+0x12>

0800168c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e00a      	b.n	80016b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800169e:	f3af 8000 	nop.w
 80016a2:	4601      	mov	r1, r0
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	60ba      	str	r2, [r7, #8]
 80016aa:	b2ca      	uxtb	r2, r1
 80016ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbf0      	blt.n	800169e <_read+0x12>
	}

return len;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e009      	b.n	80016ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbf1      	blt.n	80016d8 <_write+0x12>
	}
	return len;
 80016f4:	687b      	ldr	r3, [r7, #4]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_close>:

int _close(int file)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	return -1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001726:	605a      	str	r2, [r3, #4]
	return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_isatty>:

int _isatty(int file)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
	return 1;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
	return 0;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f002 f9b0 	bl	8003afc <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20020000 	.word	0x20020000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	20000260 	.word	0x20000260
 80017d0:	20000278 	.word	0x20000278

080017d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001830 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fe:	490e      	ldr	r1, [pc, #56]	; (8001838 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001800:	4a0e      	ldr	r2, [pc, #56]	; (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001814:	4c0b      	ldr	r4, [pc, #44]	; (8001844 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001822:	f7ff ffd7 	bl	80017d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001826:	f002 f96f 	bl	8003b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7ff fdd7 	bl	80013dc <main>
  bx  lr    
 800182e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800183c:	08008ccc 	.word	0x08008ccc
  ldr r2, =_sbss
 8001840:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001844:	20000278 	.word	0x20000278

08001848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC_IRQHandler>

0800184a <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	4619      	mov	r1, r3
 8001858:	2007      	movs	r0, #7
 800185a:	f7ff fcb1 	bl	80011c0 <bno055_writeData>
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4619      	mov	r1, r3
 8001874:	203d      	movs	r0, #61	; 0x3d
 8001876:	f7ff fca3 	bl	80011c0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d103      	bne.n	8001888 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001880:	2013      	movs	r0, #19
 8001882:	f7ff fc91 	bl	80011a8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001886:	e002      	b.n	800188e <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001888:	2007      	movs	r0, #7
 800188a:	f7ff fc8d 	bl	80011a8 <bno055_delay>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001896:	b580      	push	{r7, lr}
 8001898:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 800189a:	2000      	movs	r0, #0
 800189c:	f7ff ffe3 	bl	8001866 <bno055_setOperationMode>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80018a8:	200c      	movs	r0, #12
 80018aa:	f7ff ffdc 	bl	8001866 <bno055_setOperationMode>
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80018b6:	2120      	movs	r1, #32
 80018b8:	203f      	movs	r0, #63	; 0x3f
 80018ba:	f7ff fc81 	bl	80011c0 <bno055_writeData>
  bno055_delay(700);
 80018be:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80018c2:	f7ff fc71 	bl	80011a8 <bno055_delay>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
  bno055_reset();
 80018d2:	f7ff ffee 	bl	80018b2 <bno055_reset>

  uint8_t id = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80018da:	1dfb      	adds	r3, r7, #7
 80018dc:	2201      	movs	r2, #1
 80018de:	4619      	mov	r1, r3
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fd59 	bl	8001398 <bno055_readData>
  if (id != BNO055_ID) {
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2ba0      	cmp	r3, #160	; 0xa0
 80018ea:	d004      	beq.n	80018f6 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <bno055_setup+0x4c>)
 80018f2:	f002 ffbd 	bl	8004870 <iprintf>
  }
  bno055_setPage(0);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7ff ffa7 	bl	800184a <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80018fc:	2100      	movs	r1, #0
 80018fe:	203f      	movs	r0, #63	; 0x3f
 8001900:	f7ff fc5e 	bl	80011c0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001904:	f7ff ffc7 	bl	8001896 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001908:	200a      	movs	r0, #10
 800190a:	f7ff fc4d 	bl	80011a8 <bno055_delay>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	080087bc 	.word	0x080087bc

0800191c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 800191c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001920:	b09e      	sub	sp, #120	; 0x78
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff ff8d 	bl	800184a <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001934:	2b20      	cmp	r3, #32
 8001936:	d108      	bne.n	800194a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001938:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800193c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001940:	2208      	movs	r2, #8
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fd28 	bl	8001398 <bno055_readData>
 8001948:	e007      	b.n	800195a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800194a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800194e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001952:	2206      	movs	r2, #6
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fd1f 	bl	8001398 <bno055_readData>

  double scale = 1;
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b8b      	ldr	r3, [pc, #556]	; (8001b8c <bno055_getVector+0x270>)
 8001960:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001968:	2b0e      	cmp	r3, #14
 800196a:	d109      	bne.n	8001980 <bno055_getVector+0x64>
    scale = magScale;
 800196c:	4b88      	ldr	r3, [pc, #544]	; (8001b90 <bno055_getVector+0x274>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fdc7 	bl	8000504 <__aeabi_ui2d>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800197e:	e03e      	b.n	80019fe <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001984:	2b08      	cmp	r3, #8
 8001986:	d007      	beq.n	8001998 <bno055_getVector+0x7c>
 8001988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800198c:	2b28      	cmp	r3, #40	; 0x28
 800198e:	d003      	beq.n	8001998 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001994:	2b2e      	cmp	r3, #46	; 0x2e
 8001996:	d109      	bne.n	80019ac <bno055_getVector+0x90>
    scale = accelScale;
 8001998:	4b7e      	ldr	r3, [pc, #504]	; (8001b94 <bno055_getVector+0x278>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdb1 	bl	8000504 <__aeabi_ui2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80019aa:	e028      	b.n	80019fe <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80019ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019b0:	2b14      	cmp	r3, #20
 80019b2:	d109      	bne.n	80019c8 <bno055_getVector+0xac>
    scale = angularRateScale;
 80019b4:	4b78      	ldr	r3, [pc, #480]	; (8001b98 <bno055_getVector+0x27c>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fda3 	bl	8000504 <__aeabi_ui2d>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80019c6:	e01a      	b.n	80019fe <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80019c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019cc:	2b1a      	cmp	r3, #26
 80019ce:	d109      	bne.n	80019e4 <bno055_getVector+0xc8>
    scale = eulerScale;
 80019d0:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <bno055_getVector+0x280>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fd95 	bl	8000504 <__aeabi_ui2d>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80019e2:	e00c      	b.n	80019fe <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80019e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d108      	bne.n	80019fe <bno055_getVector+0xe2>
    scale = quaScale;
 80019ec:	4b6c      	ldr	r3, [pc, #432]	; (8001ba0 <bno055_getVector+0x284>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fd87 	bl	8000504 <__aeabi_ui2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80019fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a02:	2220      	movs	r2, #32
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 f8b0 	bl	8003b6c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a10:	2b20      	cmp	r3, #32
 8001a12:	d150      	bne.n	8001ab6 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001a14:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	b21a      	sxth	r2, r3
 8001a1c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	4313      	orrs	r3, r2
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd7c 	bl	8000524 <__aeabi_i2d>
 8001a2c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a30:	f7fe ff0c 	bl	800084c <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001a3c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd68 	bl	8000524 <__aeabi_i2d>
 8001a54:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a58:	f7fe fef8 	bl	800084c <__aeabi_ddiv>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001a64:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fd54 	bl	8000524 <__aeabi_i2d>
 8001a7c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a80:	f7fe fee4 	bl	800084c <__aeabi_ddiv>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001a8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fd40 	bl	8000524 <__aeabi_i2d>
 8001aa4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001aa8:	f7fe fed0 	bl	800084c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001ab4:	e03b      	b.n	8001b2e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001ab6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd2b 	bl	8000524 <__aeabi_i2d>
 8001ace:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001ad2:	f7fe febb 	bl	800084c <__aeabi_ddiv>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001ade:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	b21a      	sxth	r2, r3
 8001ae6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd17 	bl	8000524 <__aeabi_i2d>
 8001af6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001afa:	f7fe fea7 	bl	800084c <__aeabi_ddiv>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001b06:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd03 	bl	8000524 <__aeabi_i2d>
 8001b1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b22:	f7fe fe93 	bl	800084c <__aeabi_ddiv>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001b2e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001b32:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b42:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b46:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001b4a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001b4e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b52:	ec49 8b14 	vmov	d4, r8, r9
 8001b56:	ec45 4b15 	vmov	d5, r4, r5
 8001b5a:	ec41 0b16 	vmov	d6, r0, r1
 8001b5e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b62:	eeb0 0a44 	vmov.f32	s0, s8
 8001b66:	eef0 0a64 	vmov.f32	s1, s9
 8001b6a:	eeb0 1a45 	vmov.f32	s2, s10
 8001b6e:	eef0 1a65 	vmov.f32	s3, s11
 8001b72:	eeb0 2a46 	vmov.f32	s4, s12
 8001b76:	eef0 2a66 	vmov.f32	s5, s13
 8001b7a:	eeb0 3a47 	vmov.f32	s6, s14
 8001b7e:	eef0 3a67 	vmov.f32	s7, s15
 8001b82:	3778      	adds	r7, #120	; 0x78
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b8a:	bf00      	nop
 8001b8c:	3ff00000 	.word	0x3ff00000
 8001b90:	2000000a 	.word	0x2000000a
 8001b94:	20000004 	.word	0x20000004
 8001b98:	20000006 	.word	0x20000006
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	2000000c 	.word	0x2000000c

08001ba4 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8001ba4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ba8:	b090      	sub	sp, #64	; 0x40
 8001baa:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001bac:	201a      	movs	r0, #26
 8001bae:	f7ff feb5 	bl	800191c <bno055_getVector>
 8001bb2:	eeb0 4a40 	vmov.f32	s8, s0
 8001bb6:	eef0 4a60 	vmov.f32	s9, s1
 8001bba:	eeb0 5a41 	vmov.f32	s10, s2
 8001bbe:	eef0 5a61 	vmov.f32	s11, s3
 8001bc2:	eeb0 6a42 	vmov.f32	s12, s4
 8001bc6:	eef0 6a62 	vmov.f32	s13, s5
 8001bca:	eeb0 7a43 	vmov.f32	s14, s6
 8001bce:	eef0 7a63 	vmov.f32	s15, s7
 8001bd2:	ed87 4b08 	vstr	d4, [r7, #32]
 8001bd6:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001bda:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001bde:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001be2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001be6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001bea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001bee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bf2:	ec49 8b14 	vmov	d4, r8, r9
 8001bf6:	ec45 4b15 	vmov	d5, r4, r5
 8001bfa:	ec41 0b16 	vmov	d6, r0, r1
 8001bfe:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c02:	eeb0 0a44 	vmov.f32	s0, s8
 8001c06:	eef0 0a64 	vmov.f32	s1, s9
 8001c0a:	eeb0 1a45 	vmov.f32	s2, s10
 8001c0e:	eef0 1a65 	vmov.f32	s3, s11
 8001c12:	eeb0 2a46 	vmov.f32	s4, s12
 8001c16:	eef0 2a66 	vmov.f32	s5, s13
 8001c1a:	eeb0 3a47 	vmov.f32	s6, s14
 8001c1e:	eef0 3a67 	vmov.f32	s7, s15
 8001c22:	3740      	adds	r7, #64	; 0x40
 8001c24:	46bd      	mov	sp, r7
 8001c26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001c2a <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001c2a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c2e:	b090      	sub	sp, #64	; 0x40
 8001c30:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8001c32:	2020      	movs	r0, #32
 8001c34:	f7ff fe72 	bl	800191c <bno055_getVector>
 8001c38:	eeb0 4a40 	vmov.f32	s8, s0
 8001c3c:	eef0 4a60 	vmov.f32	s9, s1
 8001c40:	eeb0 5a41 	vmov.f32	s10, s2
 8001c44:	eef0 5a61 	vmov.f32	s11, s3
 8001c48:	eeb0 6a42 	vmov.f32	s12, s4
 8001c4c:	eef0 6a62 	vmov.f32	s13, s5
 8001c50:	eeb0 7a43 	vmov.f32	s14, s6
 8001c54:	eef0 7a63 	vmov.f32	s15, s7
 8001c58:	ed87 4b08 	vstr	d4, [r7, #32]
 8001c5c:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001c60:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001c64:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001c68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c6c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001c70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c78:	ec49 8b14 	vmov	d4, r8, r9
 8001c7c:	ec45 4b15 	vmov	d5, r4, r5
 8001c80:	ec41 0b16 	vmov	d6, r0, r1
 8001c84:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c88:	eeb0 0a44 	vmov.f32	s0, s8
 8001c8c:	eef0 0a64 	vmov.f32	s1, s9
 8001c90:	eeb0 1a45 	vmov.f32	s2, s10
 8001c94:	eef0 1a65 	vmov.f32	s3, s11
 8001c98:	eeb0 2a46 	vmov.f32	s4, s12
 8001c9c:	eef0 2a66 	vmov.f32	s5, s13
 8001ca0:	eeb0 3a47 	vmov.f32	s6, s14
 8001ca4:	eef0 3a67 	vmov.f32	s7, s15
 8001ca8:	3740      	adds	r7, #64	; 0x40
 8001caa:	46bd      	mov	sp, r7
 8001cac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <HAL_Init+0x40>)
 8001cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <HAL_Init+0x40>)
 8001cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_Init+0x40>)
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 f931 	bl	8001f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cde:	200f      	movs	r0, #15
 8001ce0:	f000 f808 	bl	8001cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce4:	f7ff fc5e 	bl	80015a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023c00 	.word	0x40023c00

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x54>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_InitTick+0x58>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f93b 	bl	8001f8e <HAL_SYSTICK_Config>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00e      	b.n	8001d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d80a      	bhi.n	8001d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f000 f911 	bl	8001f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <HAL_InitTick+0x5c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e000      	b.n	8001d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000014 	.word	0x20000014
 8001d50:	20000010 	.word	0x20000010

08001d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_IncTick+0x20>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_IncTick+0x24>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_IncTick+0x24>)
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000014 	.word	0x20000014
 8001d78:	20000264 	.word	0x20000264

08001d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_GetTick+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000264 	.word	0x20000264

08001d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d9c:	f7ff ffee 	bl	8001d7c <HAL_GetTick>
 8001da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dac:	d005      	beq.n	8001dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_Delay+0x44>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dba:	bf00      	nop
 8001dbc:	f7ff ffde 	bl	8001d7c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d8f7      	bhi.n	8001dbc <HAL_Delay+0x28>
  {
  }
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000014 	.word	0x20000014

08001ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0e:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60d3      	str	r3, [r2, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	; (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	; (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f0c:	d301      	bcc.n	8001f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <SysTick_Config+0x40>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f7ff ff8e 	bl	8001e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <SysTick_Config+0x40>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <SysTick_Config+0x40>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff47 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f68:	f7ff ff5c 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	6978      	ldr	r0, [r7, #20]
 8001f74:	f7ff ff8e 	bl	8001e94 <NVIC_EncodePriority>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff5d 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ffb0 	bl	8001efc <SysTick_Config>
 8001f9c:	4603      	mov	r3, r0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	e16b      	b.n	800229c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	f040 815a 	bne.w	8002296 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d005      	beq.n	8001ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d130      	bne.n	800205c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	2203      	movs	r2, #3
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002030:	2201      	movs	r2, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 0201 	and.w	r2, r3, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b03      	cmp	r3, #3
 8002066:	d017      	beq.n	8002098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d123      	bne.n	80020ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	08da      	lsrs	r2, r3, #3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3208      	adds	r2, #8
 80020ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	220f      	movs	r2, #15
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	08da      	lsrs	r2, r3, #3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3208      	adds	r2, #8
 80020e6:	69b9      	ldr	r1, [r7, #24]
 80020e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0203 	and.w	r2, r3, #3
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80b4 	beq.w	8002296 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b60      	ldr	r3, [pc, #384]	; (80022b4 <HAL_GPIO_Init+0x30c>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a5f      	ldr	r2, [pc, #380]	; (80022b4 <HAL_GPIO_Init+0x30c>)
 8002138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b5d      	ldr	r3, [pc, #372]	; (80022b4 <HAL_GPIO_Init+0x30c>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800214a:	4a5b      	ldr	r2, [pc, #364]	; (80022b8 <HAL_GPIO_Init+0x310>)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3302      	adds	r3, #2
 8002152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	220f      	movs	r2, #15
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a52      	ldr	r2, [pc, #328]	; (80022bc <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d02b      	beq.n	80021ce <HAL_GPIO_Init+0x226>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a51      	ldr	r2, [pc, #324]	; (80022c0 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d025      	beq.n	80021ca <HAL_GPIO_Init+0x222>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a50      	ldr	r2, [pc, #320]	; (80022c4 <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d01f      	beq.n	80021c6 <HAL_GPIO_Init+0x21e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4f      	ldr	r2, [pc, #316]	; (80022c8 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d019      	beq.n	80021c2 <HAL_GPIO_Init+0x21a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4e      	ldr	r2, [pc, #312]	; (80022cc <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <HAL_GPIO_Init+0x216>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4d      	ldr	r2, [pc, #308]	; (80022d0 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00d      	beq.n	80021ba <HAL_GPIO_Init+0x212>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4c      	ldr	r2, [pc, #304]	; (80022d4 <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d007      	beq.n	80021b6 <HAL_GPIO_Init+0x20e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4b      	ldr	r2, [pc, #300]	; (80022d8 <HAL_GPIO_Init+0x330>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <HAL_GPIO_Init+0x20a>
 80021ae:	2307      	movs	r3, #7
 80021b0:	e00e      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021b2:	2308      	movs	r3, #8
 80021b4:	e00c      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021b6:	2306      	movs	r3, #6
 80021b8:	e00a      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021ba:	2305      	movs	r3, #5
 80021bc:	e008      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021be:	2304      	movs	r3, #4
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021c2:	2303      	movs	r3, #3
 80021c4:	e004      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e002      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021ce:	2300      	movs	r3, #0
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	f002 0203 	and.w	r2, r2, #3
 80021d6:	0092      	lsls	r2, r2, #2
 80021d8:	4093      	lsls	r3, r2
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e0:	4935      	ldr	r1, [pc, #212]	; (80022b8 <HAL_GPIO_Init+0x310>)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	089b      	lsrs	r3, r3, #2
 80021e6:	3302      	adds	r3, #2
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ee:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <HAL_GPIO_Init+0x334>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002212:	4a32      	ldr	r2, [pc, #200]	; (80022dc <HAL_GPIO_Init+0x334>)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002218:	4b30      	ldr	r3, [pc, #192]	; (80022dc <HAL_GPIO_Init+0x334>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800223c:	4a27      	ldr	r2, [pc, #156]	; (80022dc <HAL_GPIO_Init+0x334>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_GPIO_Init+0x334>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002266:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_GPIO_Init+0x334>)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_GPIO_Init+0x334>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002290:	4a12      	ldr	r2, [pc, #72]	; (80022dc <HAL_GPIO_Init+0x334>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3301      	adds	r3, #1
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b0f      	cmp	r3, #15
 80022a0:	f67f ae90 	bls.w	8001fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40013800 	.word	0x40013800
 80022bc:	40020000 	.word	0x40020000
 80022c0:	40020400 	.word	0x40020400
 80022c4:	40020800 	.word	0x40020800
 80022c8:	40020c00 	.word	0x40020c00
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40021400 	.word	0x40021400
 80022d4:	40021800 	.word	0x40021800
 80022d8:	40021c00 	.word	0x40021c00
 80022dc:	40013c00 	.word	0x40013c00

080022e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
 80022ec:	4613      	mov	r3, r2
 80022ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f0:	787b      	ldrb	r3, [r7, #1]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022fc:	e003      	b.n	8002306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022fe:	887b      	ldrh	r3, [r7, #2]
 8002300:	041a      	lsls	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	619a      	str	r2, [r3, #24]
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e12b      	b.n	800257e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe fedc 	bl	80010f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2224      	movs	r2, #36	; 0x24
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002366:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002376:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002378:	f001 fbac 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 800237c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4a81      	ldr	r2, [pc, #516]	; (8002588 <HAL_I2C_Init+0x274>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d807      	bhi.n	8002398 <HAL_I2C_Init+0x84>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4a80      	ldr	r2, [pc, #512]	; (800258c <HAL_I2C_Init+0x278>)
 800238c:	4293      	cmp	r3, r2
 800238e:	bf94      	ite	ls
 8002390:	2301      	movls	r3, #1
 8002392:	2300      	movhi	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	e006      	b.n	80023a6 <HAL_I2C_Init+0x92>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a7d      	ldr	r2, [pc, #500]	; (8002590 <HAL_I2C_Init+0x27c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	bf94      	ite	ls
 80023a0:	2301      	movls	r3, #1
 80023a2:	2300      	movhi	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e0e7      	b.n	800257e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4a78      	ldr	r2, [pc, #480]	; (8002594 <HAL_I2C_Init+0x280>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	0c9b      	lsrs	r3, r3, #18
 80023b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a6a      	ldr	r2, [pc, #424]	; (8002588 <HAL_I2C_Init+0x274>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d802      	bhi.n	80023e8 <HAL_I2C_Init+0xd4>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	3301      	adds	r3, #1
 80023e6:	e009      	b.n	80023fc <HAL_I2C_Init+0xe8>
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	4a69      	ldr	r2, [pc, #420]	; (8002598 <HAL_I2C_Init+0x284>)
 80023f4:	fba2 2303 	umull	r2, r3, r2, r3
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	3301      	adds	r3, #1
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	430b      	orrs	r3, r1
 8002402:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800240e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	495c      	ldr	r1, [pc, #368]	; (8002588 <HAL_I2C_Init+0x274>)
 8002418:	428b      	cmp	r3, r1
 800241a:	d819      	bhi.n	8002450 <HAL_I2C_Init+0x13c>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1e59      	subs	r1, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	fbb1 f3f3 	udiv	r3, r1, r3
 800242a:	1c59      	adds	r1, r3, #1
 800242c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002430:	400b      	ands	r3, r1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <HAL_I2C_Init+0x138>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1e59      	subs	r1, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fbb1 f3f3 	udiv	r3, r1, r3
 8002444:	3301      	adds	r3, #1
 8002446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244a:	e051      	b.n	80024f0 <HAL_I2C_Init+0x1dc>
 800244c:	2304      	movs	r3, #4
 800244e:	e04f      	b.n	80024f0 <HAL_I2C_Init+0x1dc>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d111      	bne.n	800247c <HAL_I2C_Init+0x168>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1e58      	subs	r0, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	440b      	add	r3, r1
 8002466:	fbb0 f3f3 	udiv	r3, r0, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	e012      	b.n	80024a2 <HAL_I2C_Init+0x18e>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1e58      	subs	r0, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	0099      	lsls	r1, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002492:	3301      	adds	r3, #1
 8002494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_I2C_Init+0x196>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e022      	b.n	80024f0 <HAL_I2C_Init+0x1dc>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10e      	bne.n	80024d0 <HAL_I2C_Init+0x1bc>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1e58      	subs	r0, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6859      	ldr	r1, [r3, #4]
 80024ba:	460b      	mov	r3, r1
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	440b      	add	r3, r1
 80024c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ce:	e00f      	b.n	80024f0 <HAL_I2C_Init+0x1dc>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1e58      	subs	r0, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	0099      	lsls	r1, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e6:	3301      	adds	r3, #1
 80024e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	6809      	ldr	r1, [r1, #0]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69da      	ldr	r2, [r3, #28]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800251e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6911      	ldr	r1, [r2, #16]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68d2      	ldr	r2, [r2, #12]
 800252a:	4311      	orrs	r1, r2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	430b      	orrs	r3, r1
 8002532:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	000186a0 	.word	0x000186a0
 800258c:	001e847f 	.word	0x001e847f
 8002590:	003d08ff 	.word	0x003d08ff
 8002594:	431bde83 	.word	0x431bde83
 8002598:	10624dd3 	.word	0x10624dd3

0800259c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	461a      	mov	r2, r3
 80025a8:	460b      	mov	r3, r1
 80025aa:	817b      	strh	r3, [r7, #10]
 80025ac:	4613      	mov	r3, r2
 80025ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025b0:	f7ff fbe4 	bl	8001d7c <HAL_GetTick>
 80025b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b20      	cmp	r3, #32
 80025c0:	f040 80e0 	bne.w	8002784 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2319      	movs	r3, #25
 80025ca:	2201      	movs	r2, #1
 80025cc:	4970      	ldr	r1, [pc, #448]	; (8002790 <HAL_I2C_Master_Transmit+0x1f4>)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fc72 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025da:	2302      	movs	r3, #2
 80025dc:	e0d3      	b.n	8002786 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_I2C_Master_Transmit+0x50>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e0cc      	b.n	8002786 <HAL_I2C_Master_Transmit+0x1ea>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d007      	beq.n	8002612 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002620:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2221      	movs	r2, #33	; 0x21
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2210      	movs	r2, #16
 800262e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	893a      	ldrh	r2, [r7, #8]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a50      	ldr	r2, [pc, #320]	; (8002794 <HAL_I2C_Master_Transmit+0x1f8>)
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002654:	8979      	ldrh	r1, [r7, #10]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	6a3a      	ldr	r2, [r7, #32]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fadc 	bl	8002c18 <I2C_MasterRequestWrite>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e08d      	b.n	8002786 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002680:	e066      	b.n	8002750 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	6a39      	ldr	r1, [r7, #32]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fcec 	bl	8003064 <I2C_WaitOnTXEFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00d      	beq.n	80026ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	2b04      	cmp	r3, #4
 8002698:	d107      	bne.n	80026aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e06b      	b.n	8002786 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	781a      	ldrb	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d11b      	bne.n	8002724 <HAL_I2C_Master_Transmit+0x188>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d017      	beq.n	8002724 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	6a39      	ldr	r1, [r7, #32]
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fcdc 	bl	80030e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00d      	beq.n	8002750 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	2b04      	cmp	r3, #4
 800273a:	d107      	bne.n	800274c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800274a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e01a      	b.n	8002786 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d194      	bne.n	8002682 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	e000      	b.n	8002786 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002784:	2302      	movs	r3, #2
  }
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	00100002 	.word	0x00100002
 8002794:	ffff0000 	.word	0xffff0000

08002798 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	; 0x30
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	461a      	mov	r2, r3
 80027a4:	460b      	mov	r3, r1
 80027a6:	817b      	strh	r3, [r7, #10]
 80027a8:	4613      	mov	r3, r2
 80027aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff fae6 	bl	8001d7c <HAL_GetTick>
 80027b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	f040 820b 	bne.w	8002bd6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2319      	movs	r3, #25
 80027c6:	2201      	movs	r2, #1
 80027c8:	497c      	ldr	r1, [pc, #496]	; (80029bc <HAL_I2C_Master_Receive+0x224>)
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fb74 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
 80027d8:	e1fe      	b.n	8002bd8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_I2C_Master_Receive+0x50>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e1f7      	b.n	8002bd8 <HAL_I2C_Master_Receive+0x440>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d007      	beq.n	800280e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0201 	orr.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800281c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2222      	movs	r2, #34	; 0x22
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2210      	movs	r2, #16
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	893a      	ldrh	r2, [r7, #8]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a5c      	ldr	r2, [pc, #368]	; (80029c0 <HAL_I2C_Master_Receive+0x228>)
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002850:	8979      	ldrh	r1, [r7, #10]
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fa60 	bl	8002d1c <I2C_MasterRequestRead>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e1b8      	b.n	8002bd8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286a:	2b00      	cmp	r3, #0
 800286c:	d113      	bne.n	8002896 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286e:	2300      	movs	r3, #0
 8002870:	623b      	str	r3, [r7, #32]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	623b      	str	r3, [r7, #32]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	623b      	str	r3, [r7, #32]
 8002882:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e18c      	b.n	8002bb0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	2b01      	cmp	r3, #1
 800289c:	d11b      	bne.n	80028d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e16c      	b.n	8002bb0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d11b      	bne.n	8002916 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	e14c      	b.n	8002bb0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800293c:	e138      	b.n	8002bb0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	2b03      	cmp	r3, #3
 8002944:	f200 80f1 	bhi.w	8002b2a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	2b01      	cmp	r3, #1
 800294e:	d123      	bne.n	8002998 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002952:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fc07 	bl	8003168 <I2C_WaitOnRXNEFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e139      	b.n	8002bd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002996:	e10b      	b.n	8002bb0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	2b02      	cmp	r3, #2
 800299e:	d14e      	bne.n	8002a3e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	2200      	movs	r2, #0
 80029a8:	4906      	ldr	r1, [pc, #24]	; (80029c4 <HAL_I2C_Master_Receive+0x22c>)
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fa84 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e10e      	b.n	8002bd8 <HAL_I2C_Master_Receive+0x440>
 80029ba:	bf00      	nop
 80029bc:	00100002 	.word	0x00100002
 80029c0:	ffff0000 	.word	0xffff0000
 80029c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a3c:	e0b8      	b.n	8002bb0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	2200      	movs	r2, #0
 8002a46:	4966      	ldr	r1, [pc, #408]	; (8002be0 <HAL_I2C_Master_Receive+0x448>)
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fa35 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0bf      	b.n	8002bd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	494f      	ldr	r1, [pc, #316]	; (8002be0 <HAL_I2C_Master_Receive+0x448>)
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fa07 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e091      	b.n	8002bd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b28:	e042      	b.n	8002bb0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fb1a 	bl	8003168 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e04c      	b.n	8002bd8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d118      	bne.n	8002bb0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f47f aec2 	bne.w	800293e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
  }
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3728      	adds	r7, #40	; 0x28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	00010004 	.word	0x00010004

08002be4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf2:	b2db      	uxtb	r3, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	460b      	mov	r3, r1
 8002c26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d006      	beq.n	8002c42 <I2C_MasterRequestWrite+0x2a>
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d003      	beq.n	8002c42 <I2C_MasterRequestWrite+0x2a>
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c40:	d108      	bne.n	8002c54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e00b      	b.n	8002c6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	2b12      	cmp	r3, #18
 8002c5a:	d107      	bne.n	8002c6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f91d 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00d      	beq.n	8002ca0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c92:	d103      	bne.n	8002c9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e035      	b.n	8002d0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ca8:	d108      	bne.n	8002cbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002caa:	897b      	ldrh	r3, [r7, #10]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cb8:	611a      	str	r2, [r3, #16]
 8002cba:	e01b      	b.n	8002cf4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cbc:	897b      	ldrh	r3, [r7, #10]
 8002cbe:	11db      	asrs	r3, r3, #7
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 0306 	and.w	r3, r3, #6
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f063 030f 	orn	r3, r3, #15
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	490e      	ldr	r1, [pc, #56]	; (8002d14 <I2C_MasterRequestWrite+0xfc>)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f943 	bl	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e010      	b.n	8002d0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cea:	897b      	ldrh	r3, [r7, #10]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4907      	ldr	r1, [pc, #28]	; (8002d18 <I2C_MasterRequestWrite+0x100>)
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f933 	bl	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	00010008 	.word	0x00010008
 8002d18:	00010002 	.word	0x00010002

08002d1c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d40:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d006      	beq.n	8002d56 <I2C_MasterRequestRead+0x3a>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d003      	beq.n	8002d56 <I2C_MasterRequestRead+0x3a>
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d54:	d108      	bne.n	8002d68 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e00b      	b.n	8002d80 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	2b11      	cmp	r3, #17
 8002d6e:	d107      	bne.n	8002d80 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f893 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00d      	beq.n	8002db4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da6:	d103      	bne.n	8002db0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e079      	b.n	8002ea8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dbc:	d108      	bne.n	8002dd0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dbe:	897b      	ldrh	r3, [r7, #10]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	611a      	str	r2, [r3, #16]
 8002dce:	e05f      	b.n	8002e90 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dd0:	897b      	ldrh	r3, [r7, #10]
 8002dd2:	11db      	asrs	r3, r3, #7
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f003 0306 	and.w	r3, r3, #6
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f063 030f 	orn	r3, r3, #15
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4930      	ldr	r1, [pc, #192]	; (8002eb0 <I2C_MasterRequestRead+0x194>)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f8b9 	bl	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e054      	b.n	8002ea8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4929      	ldr	r1, [pc, #164]	; (8002eb4 <I2C_MasterRequestRead+0x198>)
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f8a9 	bl	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e044      	b.n	8002ea8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e42:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f831 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00d      	beq.n	8002e78 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6a:	d103      	bne.n	8002e74 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e017      	b.n	8002ea8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e78:	897b      	ldrh	r3, [r7, #10]
 8002e7a:	11db      	asrs	r3, r3, #7
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f003 0306 	and.w	r3, r3, #6
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f063 030e 	orn	r3, r3, #14
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4907      	ldr	r1, [pc, #28]	; (8002eb4 <I2C_MasterRequestRead+0x198>)
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f865 	bl	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	00010008 	.word	0x00010008
 8002eb4:	00010002 	.word	0x00010002

08002eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec8:	e025      	b.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d021      	beq.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7fe ff53 	bl	8001d7c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d116      	bne.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f043 0220 	orr.w	r2, r3, #32
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e023      	b.n	8002f5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d10d      	bne.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	bf0c      	ite	eq
 8002f32:	2301      	moveq	r3, #1
 8002f34:	2300      	movne	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	e00c      	b.n	8002f56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4013      	ands	r3, r2
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	bf0c      	ite	eq
 8002f4e:	2301      	moveq	r3, #1
 8002f50:	2300      	movne	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d0b6      	beq.n	8002eca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f74:	e051      	b.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f84:	d123      	bne.n	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f043 0204 	orr.w	r2, r3, #4
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e046      	b.n	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d021      	beq.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7fe fed1 	bl	8001d7c <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d116      	bne.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e020      	b.n	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10c      	bne.n	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	e00b      	b.n	8003056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	43da      	mvns	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4013      	ands	r3, r2
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf14      	ite	ne
 8003050:	2301      	movne	r3, #1
 8003052:	2300      	moveq	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d18d      	bne.n	8002f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003070:	e02d      	b.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f8ce 	bl	8003214 <I2C_IsAcknowledgeFailed>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e02d      	b.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d021      	beq.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308a:	f7fe fe77 	bl	8001d7c <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d116      	bne.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f043 0220 	orr.w	r2, r3, #32
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e007      	b.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b80      	cmp	r3, #128	; 0x80
 80030da:	d1ca      	bne.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030f2:	e02d      	b.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f88d 	bl	8003214 <I2C_IsAcknowledgeFailed>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e02d      	b.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d021      	beq.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310c:	f7fe fe36 	bl	8001d7c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d116      	bne.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e007      	b.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b04      	cmp	r3, #4
 800315c:	d1ca      	bne.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003174:	e042      	b.n	80031fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b10      	cmp	r3, #16
 8003182:	d119      	bne.n	80031b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0210 	mvn.w	r2, #16
 800318c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e029      	b.n	800320c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b8:	f7fe fde0 	bl	8001d7c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d302      	bcc.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d116      	bne.n	80031fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e007      	b.n	800320c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d1b5      	bne.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322a:	d11b      	bne.n	8003264 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003234:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f043 0204 	orr.w	r2, r3, #4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e267      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d075      	beq.n	800337e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003292:	4b88      	ldr	r3, [pc, #544]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b04      	cmp	r3, #4
 800329c:	d00c      	beq.n	80032b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800329e:	4b85      	ldr	r3, [pc, #532]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d112      	bne.n	80032d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032aa:	4b82      	ldr	r3, [pc, #520]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b6:	d10b      	bne.n	80032d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b8:	4b7e      	ldr	r3, [pc, #504]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d05b      	beq.n	800337c <HAL_RCC_OscConfig+0x108>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d157      	bne.n	800337c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e242      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d106      	bne.n	80032e8 <HAL_RCC_OscConfig+0x74>
 80032da:	4b76      	ldr	r3, [pc, #472]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a75      	ldr	r2, [pc, #468]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e01d      	b.n	8003324 <HAL_RCC_OscConfig+0xb0>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x98>
 80032f2:	4b70      	ldr	r3, [pc, #448]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a6f      	ldr	r2, [pc, #444]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 80032f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b6d      	ldr	r3, [pc, #436]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a6c      	ldr	r2, [pc, #432]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0xb0>
 800330c:	4b69      	ldr	r3, [pc, #420]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a68      	ldr	r2, [pc, #416]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 8003312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b66      	ldr	r3, [pc, #408]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a65      	ldr	r2, [pc, #404]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 800331e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d013      	beq.n	8003354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe fd26 	bl	8001d7c <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003334:	f7fe fd22 	bl	8001d7c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	; 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e207      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	4b5b      	ldr	r3, [pc, #364]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0xc0>
 8003352:	e014      	b.n	800337e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe fd12 	bl	8001d7c <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe fd0e 	bl	8001d7c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e1f3      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336e:	4b51      	ldr	r3, [pc, #324]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0xe8>
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d063      	beq.n	8003452 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800338a:	4b4a      	ldr	r3, [pc, #296]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00b      	beq.n	80033ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003396:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d11c      	bne.n	80033dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033a2:	4b44      	ldr	r3, [pc, #272]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d116      	bne.n	80033dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ae:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_RCC_OscConfig+0x152>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e1c7      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c6:	4b3b      	ldr	r3, [pc, #236]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4937      	ldr	r1, [pc, #220]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	e03a      	b.n	8003452 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d020      	beq.n	8003426 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e4:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <HAL_RCC_OscConfig+0x244>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fe fcc7 	bl	8001d7c <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f2:	f7fe fcc3 	bl	8001d7c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e1a8      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003404:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4925      	ldr	r1, [pc, #148]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]
 8003424:	e015      	b.n	8003452 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003426:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_RCC_OscConfig+0x244>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe fca6 	bl	8001d7c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003434:	f7fe fca2 	bl	8001d7c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e187      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003446:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d036      	beq.n	80034cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d016      	beq.n	8003494 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003466:	4b15      	ldr	r3, [pc, #84]	; (80034bc <HAL_RCC_OscConfig+0x248>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fe fc86 	bl	8001d7c <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003474:	f7fe fc82 	bl	8001d7c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e167      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_OscConfig+0x240>)
 8003488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x200>
 8003492:	e01b      	b.n	80034cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_OscConfig+0x248>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349a:	f7fe fc6f 	bl	8001d7c <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a0:	e00e      	b.n	80034c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a2:	f7fe fc6b 	bl	8001d7c <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d907      	bls.n	80034c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e150      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
 80034b4:	40023800 	.word	0x40023800
 80034b8:	42470000 	.word	0x42470000
 80034bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c0:	4b88      	ldr	r3, [pc, #544]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ea      	bne.n	80034a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 8097 	beq.w	8003608 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034da:	2300      	movs	r3, #0
 80034dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034de:	4b81      	ldr	r3, [pc, #516]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10f      	bne.n	800350a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	4b7d      	ldr	r3, [pc, #500]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	4a7c      	ldr	r2, [pc, #496]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 80034f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f8:	6413      	str	r3, [r2, #64]	; 0x40
 80034fa:	4b7a      	ldr	r3, [pc, #488]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350a:	4b77      	ldr	r3, [pc, #476]	; (80036e8 <HAL_RCC_OscConfig+0x474>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d118      	bne.n	8003548 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003516:	4b74      	ldr	r3, [pc, #464]	; (80036e8 <HAL_RCC_OscConfig+0x474>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a73      	ldr	r2, [pc, #460]	; (80036e8 <HAL_RCC_OscConfig+0x474>)
 800351c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003522:	f7fe fc2b 	bl	8001d7c <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352a:	f7fe fc27 	bl	8001d7c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e10c      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	4b6a      	ldr	r3, [pc, #424]	; (80036e8 <HAL_RCC_OscConfig+0x474>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x2ea>
 8003550:	4b64      	ldr	r3, [pc, #400]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	4a63      	ldr	r2, [pc, #396]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6713      	str	r3, [r2, #112]	; 0x70
 800355c:	e01c      	b.n	8003598 <HAL_RCC_OscConfig+0x324>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b05      	cmp	r3, #5
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x30c>
 8003566:	4b5f      	ldr	r3, [pc, #380]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	4a5e      	ldr	r2, [pc, #376]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	6713      	str	r3, [r2, #112]	; 0x70
 8003572:	4b5c      	ldr	r3, [pc, #368]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	4a5b      	ldr	r2, [pc, #364]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6713      	str	r3, [r2, #112]	; 0x70
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0x324>
 8003580:	4b58      	ldr	r3, [pc, #352]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	4a57      	ldr	r2, [pc, #348]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	6713      	str	r3, [r2, #112]	; 0x70
 800358c:	4b55      	ldr	r3, [pc, #340]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	4a54      	ldr	r2, [pc, #336]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 8003592:	f023 0304 	bic.w	r3, r3, #4
 8003596:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d015      	beq.n	80035cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fe fbec 	bl	8001d7c <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a6:	e00a      	b.n	80035be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7fe fbe8 	bl	8001d7c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e0cb      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035be:	4b49      	ldr	r3, [pc, #292]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0ee      	beq.n	80035a8 <HAL_RCC_OscConfig+0x334>
 80035ca:	e014      	b.n	80035f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035cc:	f7fe fbd6 	bl	8001d7c <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fe fbd2 	bl	8001d7c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e0b5      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ea:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1ee      	bne.n	80035d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d105      	bne.n	8003608 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fc:	4b39      	ldr	r3, [pc, #228]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	4a38      	ldr	r2, [pc, #224]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 8003602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003606:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80a1 	beq.w	8003754 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003612:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b08      	cmp	r3, #8
 800361c:	d05c      	beq.n	80036d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d141      	bne.n	80036aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	4b31      	ldr	r3, [pc, #196]	; (80036ec <HAL_RCC_OscConfig+0x478>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe fba6 	bl	8001d7c <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003634:	f7fe fba2 	bl	8001d7c <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e087      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	019b      	lsls	r3, r3, #6
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	3b01      	subs	r3, #1
 800366c:	041b      	lsls	r3, r3, #16
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	061b      	lsls	r3, r3, #24
 8003676:	491b      	ldr	r1, [pc, #108]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800367c:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <HAL_RCC_OscConfig+0x478>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7fe fb7b 	bl	8001d7c <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800368a:	f7fe fb77 	bl	8001d7c <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e05c      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x416>
 80036a8:	e054      	b.n	8003754 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036aa:	4b10      	ldr	r3, [pc, #64]	; (80036ec <HAL_RCC_OscConfig+0x478>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fe fb64 	bl	8001d7c <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe fb60 	bl	8001d7c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e045      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_RCC_OscConfig+0x470>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x444>
 80036d6:	e03d      	b.n	8003754 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e038      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40007000 	.word	0x40007000
 80036ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036f0:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <HAL_RCC_OscConfig+0x4ec>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d028      	beq.n	8003750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003708:	429a      	cmp	r2, r3
 800370a:	d121      	bne.n	8003750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d11a      	bne.n	8003750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003720:	4013      	ands	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003726:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003728:	4293      	cmp	r3, r2
 800372a:	d111      	bne.n	8003750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	085b      	lsrs	r3, r3, #1
 8003738:	3b01      	subs	r3, #1
 800373a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d107      	bne.n	8003750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023800 	.word	0x40023800

08003764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0cc      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003778:	4b68      	ldr	r3, [pc, #416]	; (800391c <HAL_RCC_ClockConfig+0x1b8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d90c      	bls.n	80037a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b65      	ldr	r3, [pc, #404]	; (800391c <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b63      	ldr	r3, [pc, #396]	; (800391c <HAL_RCC_ClockConfig+0x1b8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0b8      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d020      	beq.n	80037ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037b8:	4b59      	ldr	r3, [pc, #356]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4a58      	ldr	r2, [pc, #352]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d0:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a52      	ldr	r2, [pc, #328]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037dc:	4b50      	ldr	r3, [pc, #320]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	494d      	ldr	r1, [pc, #308]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d044      	beq.n	8003884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d107      	bne.n	8003812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d119      	bne.n	8003842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e07f      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d003      	beq.n	8003822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800381e:	2b03      	cmp	r3, #3
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003822:	4b3f      	ldr	r3, [pc, #252]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e06f      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003832:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e067      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003842:	4b37      	ldr	r3, [pc, #220]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f023 0203 	bic.w	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4934      	ldr	r1, [pc, #208]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	4313      	orrs	r3, r2
 8003852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003854:	f7fe fa92 	bl	8001d7c <HAL_GetTick>
 8003858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	e00a      	b.n	8003872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385c:	f7fe fa8e 	bl	8001d7c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e04f      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	4b2b      	ldr	r3, [pc, #172]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 020c 	and.w	r2, r3, #12
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	429a      	cmp	r2, r3
 8003882:	d1eb      	bne.n	800385c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003884:	4b25      	ldr	r3, [pc, #148]	; (800391c <HAL_RCC_ClockConfig+0x1b8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d20c      	bcs.n	80038ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b22      	ldr	r3, [pc, #136]	; (800391c <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <HAL_RCC_ClockConfig+0x1b8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e032      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b8:	4b19      	ldr	r3, [pc, #100]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4916      	ldr	r1, [pc, #88]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	490e      	ldr	r1, [pc, #56]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ea:	f000 f821 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 80038ee:	4602      	mov	r2, r0
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	490a      	ldr	r1, [pc, #40]	; (8003924 <HAL_RCC_ClockConfig+0x1c0>)
 80038fc:	5ccb      	ldrb	r3, [r1, r3]
 80038fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003902:	4a09      	ldr	r2, [pc, #36]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe f9f2 	bl	8001cf4 <HAL_InitTick>

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40023c00 	.word	0x40023c00
 8003920:	40023800 	.word	0x40023800
 8003924:	080087f8 	.word	0x080087f8
 8003928:	20000000 	.word	0x20000000
 800392c:	20000010 	.word	0x20000010

08003930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003934:	b090      	sub	sp, #64	; 0x40
 8003936:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	637b      	str	r3, [r7, #52]	; 0x34
 800393c:	2300      	movs	r3, #0
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003940:	2300      	movs	r3, #0
 8003942:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003948:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b08      	cmp	r3, #8
 8003952:	d00d      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x40>
 8003954:	2b08      	cmp	r3, #8
 8003956:	f200 80a1 	bhi.w	8003a9c <HAL_RCC_GetSysClockFreq+0x16c>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x34>
 800395e:	2b04      	cmp	r3, #4
 8003960:	d003      	beq.n	800396a <HAL_RCC_GetSysClockFreq+0x3a>
 8003962:	e09b      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b53      	ldr	r3, [pc, #332]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003966:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003968:	e09b      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800396a:	4b53      	ldr	r3, [pc, #332]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 800396c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800396e:	e098      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003970:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003978:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800397a:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d028      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003986:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	2200      	movs	r2, #0
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	627a      	str	r2, [r7, #36]	; 0x24
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003998:	2100      	movs	r1, #0
 800399a:	4b47      	ldr	r3, [pc, #284]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 800399c:	fb03 f201 	mul.w	r2, r3, r1
 80039a0:	2300      	movs	r3, #0
 80039a2:	fb00 f303 	mul.w	r3, r0, r3
 80039a6:	4413      	add	r3, r2
 80039a8:	4a43      	ldr	r2, [pc, #268]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039aa:	fba0 1202 	umull	r1, r2, r0, r2
 80039ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039b0:	460a      	mov	r2, r1
 80039b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80039b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b6:	4413      	add	r3, r2
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039bc:	2200      	movs	r2, #0
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	61fa      	str	r2, [r7, #28]
 80039c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039ca:	f7fd f95d 	bl	8000c88 <__aeabi_uldivmod>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4613      	mov	r3, r2
 80039d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d6:	e053      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d8:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	099b      	lsrs	r3, r3, #6
 80039de:	2200      	movs	r2, #0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	617a      	str	r2, [r7, #20]
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039ea:	f04f 0b00 	mov.w	fp, #0
 80039ee:	4652      	mov	r2, sl
 80039f0:	465b      	mov	r3, fp
 80039f2:	f04f 0000 	mov.w	r0, #0
 80039f6:	f04f 0100 	mov.w	r1, #0
 80039fa:	0159      	lsls	r1, r3, #5
 80039fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a00:	0150      	lsls	r0, r2, #5
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	ebb2 080a 	subs.w	r8, r2, sl
 8003a0a:	eb63 090b 	sbc.w	r9, r3, fp
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a22:	ebb2 0408 	subs.w	r4, r2, r8
 8003a26:	eb63 0509 	sbc.w	r5, r3, r9
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	00eb      	lsls	r3, r5, #3
 8003a34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a38:	00e2      	lsls	r2, r4, #3
 8003a3a:	4614      	mov	r4, r2
 8003a3c:	461d      	mov	r5, r3
 8003a3e:	eb14 030a 	adds.w	r3, r4, sl
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	eb45 030b 	adc.w	r3, r5, fp
 8003a48:	607b      	str	r3, [r7, #4]
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a56:	4629      	mov	r1, r5
 8003a58:	028b      	lsls	r3, r1, #10
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a60:	4621      	mov	r1, r4
 8003a62:	028a      	lsls	r2, r1, #10
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	60fa      	str	r2, [r7, #12]
 8003a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a74:	f7fd f908 	bl	8000c88 <__aeabi_uldivmod>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a9a:	e002      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3740      	adds	r7, #64	; 0x40
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	00f42400 	.word	0x00f42400
 8003ab8:	017d7840 	.word	0x017d7840

08003abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000000 	.word	0x20000000

08003ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ad8:	f7ff fff0 	bl	8003abc <HAL_RCC_GetHCLKFreq>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	0a9b      	lsrs	r3, r3, #10
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	4903      	ldr	r1, [pc, #12]	; (8003af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aea:	5ccb      	ldrb	r3, [r1, r3]
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40023800 	.word	0x40023800
 8003af8:	08008808 	.word	0x08008808

08003afc <__errno>:
 8003afc:	4b01      	ldr	r3, [pc, #4]	; (8003b04 <__errno+0x8>)
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000018 	.word	0x20000018

08003b08 <__libc_init_array>:
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	4d0d      	ldr	r5, [pc, #52]	; (8003b40 <__libc_init_array+0x38>)
 8003b0c:	4c0d      	ldr	r4, [pc, #52]	; (8003b44 <__libc_init_array+0x3c>)
 8003b0e:	1b64      	subs	r4, r4, r5
 8003b10:	10a4      	asrs	r4, r4, #2
 8003b12:	2600      	movs	r6, #0
 8003b14:	42a6      	cmp	r6, r4
 8003b16:	d109      	bne.n	8003b2c <__libc_init_array+0x24>
 8003b18:	4d0b      	ldr	r5, [pc, #44]	; (8003b48 <__libc_init_array+0x40>)
 8003b1a:	4c0c      	ldr	r4, [pc, #48]	; (8003b4c <__libc_init_array+0x44>)
 8003b1c:	f004 fd1a 	bl	8008554 <_init>
 8003b20:	1b64      	subs	r4, r4, r5
 8003b22:	10a4      	asrs	r4, r4, #2
 8003b24:	2600      	movs	r6, #0
 8003b26:	42a6      	cmp	r6, r4
 8003b28:	d105      	bne.n	8003b36 <__libc_init_array+0x2e>
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
 8003b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b30:	4798      	blx	r3
 8003b32:	3601      	adds	r6, #1
 8003b34:	e7ee      	b.n	8003b14 <__libc_init_array+0xc>
 8003b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3a:	4798      	blx	r3
 8003b3c:	3601      	adds	r6, #1
 8003b3e:	e7f2      	b.n	8003b26 <__libc_init_array+0x1e>
 8003b40:	08008cc4 	.word	0x08008cc4
 8003b44:	08008cc4 	.word	0x08008cc4
 8003b48:	08008cc4 	.word	0x08008cc4
 8003b4c:	08008cc8 	.word	0x08008cc8

08003b50 <memcpy>:
 8003b50:	440a      	add	r2, r1
 8003b52:	4291      	cmp	r1, r2
 8003b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b58:	d100      	bne.n	8003b5c <memcpy+0xc>
 8003b5a:	4770      	bx	lr
 8003b5c:	b510      	push	{r4, lr}
 8003b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b66:	4291      	cmp	r1, r2
 8003b68:	d1f9      	bne.n	8003b5e <memcpy+0xe>
 8003b6a:	bd10      	pop	{r4, pc}

08003b6c <memset>:
 8003b6c:	4402      	add	r2, r0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d100      	bne.n	8003b76 <memset+0xa>
 8003b74:	4770      	bx	lr
 8003b76:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7a:	e7f9      	b.n	8003b70 <memset+0x4>

08003b7c <__cvt>:
 8003b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	ec55 4b10 	vmov	r4, r5, d0
 8003b84:	2d00      	cmp	r5, #0
 8003b86:	460e      	mov	r6, r1
 8003b88:	4619      	mov	r1, r3
 8003b8a:	462b      	mov	r3, r5
 8003b8c:	bfbb      	ittet	lt
 8003b8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b92:	461d      	movlt	r5, r3
 8003b94:	2300      	movge	r3, #0
 8003b96:	232d      	movlt	r3, #45	; 0x2d
 8003b98:	700b      	strb	r3, [r1, #0]
 8003b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003ba0:	4691      	mov	r9, r2
 8003ba2:	f023 0820 	bic.w	r8, r3, #32
 8003ba6:	bfbc      	itt	lt
 8003ba8:	4622      	movlt	r2, r4
 8003baa:	4614      	movlt	r4, r2
 8003bac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003bb0:	d005      	beq.n	8003bbe <__cvt+0x42>
 8003bb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003bb6:	d100      	bne.n	8003bba <__cvt+0x3e>
 8003bb8:	3601      	adds	r6, #1
 8003bba:	2102      	movs	r1, #2
 8003bbc:	e000      	b.n	8003bc0 <__cvt+0x44>
 8003bbe:	2103      	movs	r1, #3
 8003bc0:	ab03      	add	r3, sp, #12
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	ab02      	add	r3, sp, #8
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	ec45 4b10 	vmov	d0, r4, r5
 8003bcc:	4653      	mov	r3, sl
 8003bce:	4632      	mov	r2, r6
 8003bd0:	f001 fefa 	bl	80059c8 <_dtoa_r>
 8003bd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003bd8:	4607      	mov	r7, r0
 8003bda:	d102      	bne.n	8003be2 <__cvt+0x66>
 8003bdc:	f019 0f01 	tst.w	r9, #1
 8003be0:	d022      	beq.n	8003c28 <__cvt+0xac>
 8003be2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003be6:	eb07 0906 	add.w	r9, r7, r6
 8003bea:	d110      	bne.n	8003c0e <__cvt+0x92>
 8003bec:	783b      	ldrb	r3, [r7, #0]
 8003bee:	2b30      	cmp	r3, #48	; 0x30
 8003bf0:	d10a      	bne.n	8003c08 <__cvt+0x8c>
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	f7fc ff65 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bfe:	b918      	cbnz	r0, 8003c08 <__cvt+0x8c>
 8003c00:	f1c6 0601 	rsb	r6, r6, #1
 8003c04:	f8ca 6000 	str.w	r6, [sl]
 8003c08:	f8da 3000 	ldr.w	r3, [sl]
 8003c0c:	4499      	add	r9, r3
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2300      	movs	r3, #0
 8003c12:	4620      	mov	r0, r4
 8003c14:	4629      	mov	r1, r5
 8003c16:	f7fc ff57 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c1a:	b108      	cbz	r0, 8003c20 <__cvt+0xa4>
 8003c1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c20:	2230      	movs	r2, #48	; 0x30
 8003c22:	9b03      	ldr	r3, [sp, #12]
 8003c24:	454b      	cmp	r3, r9
 8003c26:	d307      	bcc.n	8003c38 <__cvt+0xbc>
 8003c28:	9b03      	ldr	r3, [sp, #12]
 8003c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c2c:	1bdb      	subs	r3, r3, r7
 8003c2e:	4638      	mov	r0, r7
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	b004      	add	sp, #16
 8003c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c38:	1c59      	adds	r1, r3, #1
 8003c3a:	9103      	str	r1, [sp, #12]
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	e7f0      	b.n	8003c22 <__cvt+0xa6>

08003c40 <__exponent>:
 8003c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c42:	4603      	mov	r3, r0
 8003c44:	2900      	cmp	r1, #0
 8003c46:	bfb8      	it	lt
 8003c48:	4249      	neglt	r1, r1
 8003c4a:	f803 2b02 	strb.w	r2, [r3], #2
 8003c4e:	bfb4      	ite	lt
 8003c50:	222d      	movlt	r2, #45	; 0x2d
 8003c52:	222b      	movge	r2, #43	; 0x2b
 8003c54:	2909      	cmp	r1, #9
 8003c56:	7042      	strb	r2, [r0, #1]
 8003c58:	dd2a      	ble.n	8003cb0 <__exponent+0x70>
 8003c5a:	f10d 0407 	add.w	r4, sp, #7
 8003c5e:	46a4      	mov	ip, r4
 8003c60:	270a      	movs	r7, #10
 8003c62:	46a6      	mov	lr, r4
 8003c64:	460a      	mov	r2, r1
 8003c66:	fb91 f6f7 	sdiv	r6, r1, r7
 8003c6a:	fb07 1516 	mls	r5, r7, r6, r1
 8003c6e:	3530      	adds	r5, #48	; 0x30
 8003c70:	2a63      	cmp	r2, #99	; 0x63
 8003c72:	f104 34ff 	add.w	r4, r4, #4294967295
 8003c76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003c7a:	4631      	mov	r1, r6
 8003c7c:	dcf1      	bgt.n	8003c62 <__exponent+0x22>
 8003c7e:	3130      	adds	r1, #48	; 0x30
 8003c80:	f1ae 0502 	sub.w	r5, lr, #2
 8003c84:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003c88:	1c44      	adds	r4, r0, #1
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	4561      	cmp	r1, ip
 8003c8e:	d30a      	bcc.n	8003ca6 <__exponent+0x66>
 8003c90:	f10d 0209 	add.w	r2, sp, #9
 8003c94:	eba2 020e 	sub.w	r2, r2, lr
 8003c98:	4565      	cmp	r5, ip
 8003c9a:	bf88      	it	hi
 8003c9c:	2200      	movhi	r2, #0
 8003c9e:	4413      	add	r3, r2
 8003ca0:	1a18      	subs	r0, r3, r0
 8003ca2:	b003      	add	sp, #12
 8003ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003caa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003cae:	e7ed      	b.n	8003c8c <__exponent+0x4c>
 8003cb0:	2330      	movs	r3, #48	; 0x30
 8003cb2:	3130      	adds	r1, #48	; 0x30
 8003cb4:	7083      	strb	r3, [r0, #2]
 8003cb6:	70c1      	strb	r1, [r0, #3]
 8003cb8:	1d03      	adds	r3, r0, #4
 8003cba:	e7f1      	b.n	8003ca0 <__exponent+0x60>

08003cbc <_printf_float>:
 8003cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc0:	ed2d 8b02 	vpush	{d8}
 8003cc4:	b08d      	sub	sp, #52	; 0x34
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003ccc:	4616      	mov	r6, r2
 8003cce:	461f      	mov	r7, r3
 8003cd0:	4605      	mov	r5, r0
 8003cd2:	f003 f98d 	bl	8006ff0 <_localeconv_r>
 8003cd6:	f8d0 a000 	ldr.w	sl, [r0]
 8003cda:	4650      	mov	r0, sl
 8003cdc:	f7fc fa78 	bl	80001d0 <strlen>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	9305      	str	r3, [sp, #20]
 8003ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8003cec:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003cf0:	3307      	adds	r3, #7
 8003cf2:	f023 0307 	bic.w	r3, r3, #7
 8003cf6:	f103 0208 	add.w	r2, r3, #8
 8003cfa:	f8c8 2000 	str.w	r2, [r8]
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003d06:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003d0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003d0e:	9307      	str	r3, [sp, #28]
 8003d10:	f8cd 8018 	str.w	r8, [sp, #24]
 8003d14:	ee08 0a10 	vmov	s16, r0
 8003d18:	4b9f      	ldr	r3, [pc, #636]	; (8003f98 <_printf_float+0x2dc>)
 8003d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d22:	f7fc ff03 	bl	8000b2c <__aeabi_dcmpun>
 8003d26:	bb88      	cbnz	r0, 8003d8c <_printf_float+0xd0>
 8003d28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d2c:	4b9a      	ldr	r3, [pc, #616]	; (8003f98 <_printf_float+0x2dc>)
 8003d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d32:	f7fc fedd 	bl	8000af0 <__aeabi_dcmple>
 8003d36:	bb48      	cbnz	r0, 8003d8c <_printf_float+0xd0>
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	4649      	mov	r1, r9
 8003d40:	f7fc fecc 	bl	8000adc <__aeabi_dcmplt>
 8003d44:	b110      	cbz	r0, 8003d4c <_printf_float+0x90>
 8003d46:	232d      	movs	r3, #45	; 0x2d
 8003d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d4c:	4b93      	ldr	r3, [pc, #588]	; (8003f9c <_printf_float+0x2e0>)
 8003d4e:	4894      	ldr	r0, [pc, #592]	; (8003fa0 <_printf_float+0x2e4>)
 8003d50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003d54:	bf94      	ite	ls
 8003d56:	4698      	movls	r8, r3
 8003d58:	4680      	movhi	r8, r0
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	6123      	str	r3, [r4, #16]
 8003d5e:	9b05      	ldr	r3, [sp, #20]
 8003d60:	f023 0204 	bic.w	r2, r3, #4
 8003d64:	6022      	str	r2, [r4, #0]
 8003d66:	f04f 0900 	mov.w	r9, #0
 8003d6a:	9700      	str	r7, [sp, #0]
 8003d6c:	4633      	mov	r3, r6
 8003d6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d70:	4621      	mov	r1, r4
 8003d72:	4628      	mov	r0, r5
 8003d74:	f000 f9d8 	bl	8004128 <_printf_common>
 8003d78:	3001      	adds	r0, #1
 8003d7a:	f040 8090 	bne.w	8003e9e <_printf_float+0x1e2>
 8003d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d82:	b00d      	add	sp, #52	; 0x34
 8003d84:	ecbd 8b02 	vpop	{d8}
 8003d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	464b      	mov	r3, r9
 8003d90:	4640      	mov	r0, r8
 8003d92:	4649      	mov	r1, r9
 8003d94:	f7fc feca 	bl	8000b2c <__aeabi_dcmpun>
 8003d98:	b140      	cbz	r0, 8003dac <_printf_float+0xf0>
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bfbc      	itt	lt
 8003da0:	232d      	movlt	r3, #45	; 0x2d
 8003da2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003da6:	487f      	ldr	r0, [pc, #508]	; (8003fa4 <_printf_float+0x2e8>)
 8003da8:	4b7f      	ldr	r3, [pc, #508]	; (8003fa8 <_printf_float+0x2ec>)
 8003daa:	e7d1      	b.n	8003d50 <_printf_float+0x94>
 8003dac:	6863      	ldr	r3, [r4, #4]
 8003dae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003db2:	9206      	str	r2, [sp, #24]
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	d13f      	bne.n	8003e38 <_printf_float+0x17c>
 8003db8:	2306      	movs	r3, #6
 8003dba:	6063      	str	r3, [r4, #4]
 8003dbc:	9b05      	ldr	r3, [sp, #20]
 8003dbe:	6861      	ldr	r1, [r4, #4]
 8003dc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	9303      	str	r3, [sp, #12]
 8003dc8:	ab0a      	add	r3, sp, #40	; 0x28
 8003dca:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003dce:	ab09      	add	r3, sp, #36	; 0x24
 8003dd0:	ec49 8b10 	vmov	d0, r8, r9
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	6022      	str	r2, [r4, #0]
 8003dd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f7ff fecd 	bl	8003b7c <__cvt>
 8003de2:	9b06      	ldr	r3, [sp, #24]
 8003de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003de6:	2b47      	cmp	r3, #71	; 0x47
 8003de8:	4680      	mov	r8, r0
 8003dea:	d108      	bne.n	8003dfe <_printf_float+0x142>
 8003dec:	1cc8      	adds	r0, r1, #3
 8003dee:	db02      	blt.n	8003df6 <_printf_float+0x13a>
 8003df0:	6863      	ldr	r3, [r4, #4]
 8003df2:	4299      	cmp	r1, r3
 8003df4:	dd41      	ble.n	8003e7a <_printf_float+0x1be>
 8003df6:	f1ab 0b02 	sub.w	fp, fp, #2
 8003dfa:	fa5f fb8b 	uxtb.w	fp, fp
 8003dfe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e02:	d820      	bhi.n	8003e46 <_printf_float+0x18a>
 8003e04:	3901      	subs	r1, #1
 8003e06:	465a      	mov	r2, fp
 8003e08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003e0c:	9109      	str	r1, [sp, #36]	; 0x24
 8003e0e:	f7ff ff17 	bl	8003c40 <__exponent>
 8003e12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e14:	1813      	adds	r3, r2, r0
 8003e16:	2a01      	cmp	r2, #1
 8003e18:	4681      	mov	r9, r0
 8003e1a:	6123      	str	r3, [r4, #16]
 8003e1c:	dc02      	bgt.n	8003e24 <_printf_float+0x168>
 8003e1e:	6822      	ldr	r2, [r4, #0]
 8003e20:	07d2      	lsls	r2, r2, #31
 8003e22:	d501      	bpl.n	8003e28 <_printf_float+0x16c>
 8003e24:	3301      	adds	r3, #1
 8003e26:	6123      	str	r3, [r4, #16]
 8003e28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d09c      	beq.n	8003d6a <_printf_float+0xae>
 8003e30:	232d      	movs	r3, #45	; 0x2d
 8003e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e36:	e798      	b.n	8003d6a <_printf_float+0xae>
 8003e38:	9a06      	ldr	r2, [sp, #24]
 8003e3a:	2a47      	cmp	r2, #71	; 0x47
 8003e3c:	d1be      	bne.n	8003dbc <_printf_float+0x100>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1bc      	bne.n	8003dbc <_printf_float+0x100>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e7b9      	b.n	8003dba <_printf_float+0xfe>
 8003e46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003e4a:	d118      	bne.n	8003e7e <_printf_float+0x1c2>
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	6863      	ldr	r3, [r4, #4]
 8003e50:	dd0b      	ble.n	8003e6a <_printf_float+0x1ae>
 8003e52:	6121      	str	r1, [r4, #16]
 8003e54:	b913      	cbnz	r3, 8003e5c <_printf_float+0x1a0>
 8003e56:	6822      	ldr	r2, [r4, #0]
 8003e58:	07d0      	lsls	r0, r2, #31
 8003e5a:	d502      	bpl.n	8003e62 <_printf_float+0x1a6>
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	440b      	add	r3, r1
 8003e60:	6123      	str	r3, [r4, #16]
 8003e62:	65a1      	str	r1, [r4, #88]	; 0x58
 8003e64:	f04f 0900 	mov.w	r9, #0
 8003e68:	e7de      	b.n	8003e28 <_printf_float+0x16c>
 8003e6a:	b913      	cbnz	r3, 8003e72 <_printf_float+0x1b6>
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	07d2      	lsls	r2, r2, #31
 8003e70:	d501      	bpl.n	8003e76 <_printf_float+0x1ba>
 8003e72:	3302      	adds	r3, #2
 8003e74:	e7f4      	b.n	8003e60 <_printf_float+0x1a4>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e7f2      	b.n	8003e60 <_printf_float+0x1a4>
 8003e7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e80:	4299      	cmp	r1, r3
 8003e82:	db05      	blt.n	8003e90 <_printf_float+0x1d4>
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	6121      	str	r1, [r4, #16]
 8003e88:	07d8      	lsls	r0, r3, #31
 8003e8a:	d5ea      	bpl.n	8003e62 <_printf_float+0x1a6>
 8003e8c:	1c4b      	adds	r3, r1, #1
 8003e8e:	e7e7      	b.n	8003e60 <_printf_float+0x1a4>
 8003e90:	2900      	cmp	r1, #0
 8003e92:	bfd4      	ite	le
 8003e94:	f1c1 0202 	rsble	r2, r1, #2
 8003e98:	2201      	movgt	r2, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	e7e0      	b.n	8003e60 <_printf_float+0x1a4>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	055a      	lsls	r2, r3, #21
 8003ea2:	d407      	bmi.n	8003eb4 <_printf_float+0x1f8>
 8003ea4:	6923      	ldr	r3, [r4, #16]
 8003ea6:	4642      	mov	r2, r8
 8003ea8:	4631      	mov	r1, r6
 8003eaa:	4628      	mov	r0, r5
 8003eac:	47b8      	blx	r7
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d12c      	bne.n	8003f0c <_printf_float+0x250>
 8003eb2:	e764      	b.n	8003d7e <_printf_float+0xc2>
 8003eb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003eb8:	f240 80e0 	bls.w	800407c <_printf_float+0x3c0>
 8003ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f7fc fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d034      	beq.n	8003f36 <_printf_float+0x27a>
 8003ecc:	4a37      	ldr	r2, [pc, #220]	; (8003fac <_printf_float+0x2f0>)
 8003ece:	2301      	movs	r3, #1
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	47b8      	blx	r7
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	f43f af51 	beq.w	8003d7e <_printf_float+0xc2>
 8003edc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	db02      	blt.n	8003eea <_printf_float+0x22e>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	07d8      	lsls	r0, r3, #31
 8003ee8:	d510      	bpl.n	8003f0c <_printf_float+0x250>
 8003eea:	ee18 3a10 	vmov	r3, s16
 8003eee:	4652      	mov	r2, sl
 8003ef0:	4631      	mov	r1, r6
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	47b8      	blx	r7
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	f43f af41 	beq.w	8003d7e <_printf_float+0xc2>
 8003efc:	f04f 0800 	mov.w	r8, #0
 8003f00:	f104 091a 	add.w	r9, r4, #26
 8003f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f06:	3b01      	subs	r3, #1
 8003f08:	4543      	cmp	r3, r8
 8003f0a:	dc09      	bgt.n	8003f20 <_printf_float+0x264>
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	079b      	lsls	r3, r3, #30
 8003f10:	f100 8105 	bmi.w	800411e <_printf_float+0x462>
 8003f14:	68e0      	ldr	r0, [r4, #12]
 8003f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f18:	4298      	cmp	r0, r3
 8003f1a:	bfb8      	it	lt
 8003f1c:	4618      	movlt	r0, r3
 8003f1e:	e730      	b.n	8003d82 <_printf_float+0xc6>
 8003f20:	2301      	movs	r3, #1
 8003f22:	464a      	mov	r2, r9
 8003f24:	4631      	mov	r1, r6
 8003f26:	4628      	mov	r0, r5
 8003f28:	47b8      	blx	r7
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	f43f af27 	beq.w	8003d7e <_printf_float+0xc2>
 8003f30:	f108 0801 	add.w	r8, r8, #1
 8003f34:	e7e6      	b.n	8003f04 <_printf_float+0x248>
 8003f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	dc39      	bgt.n	8003fb0 <_printf_float+0x2f4>
 8003f3c:	4a1b      	ldr	r2, [pc, #108]	; (8003fac <_printf_float+0x2f0>)
 8003f3e:	2301      	movs	r3, #1
 8003f40:	4631      	mov	r1, r6
 8003f42:	4628      	mov	r0, r5
 8003f44:	47b8      	blx	r7
 8003f46:	3001      	adds	r0, #1
 8003f48:	f43f af19 	beq.w	8003d7e <_printf_float+0xc2>
 8003f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f50:	4313      	orrs	r3, r2
 8003f52:	d102      	bne.n	8003f5a <_printf_float+0x29e>
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	07d9      	lsls	r1, r3, #31
 8003f58:	d5d8      	bpl.n	8003f0c <_printf_float+0x250>
 8003f5a:	ee18 3a10 	vmov	r3, s16
 8003f5e:	4652      	mov	r2, sl
 8003f60:	4631      	mov	r1, r6
 8003f62:	4628      	mov	r0, r5
 8003f64:	47b8      	blx	r7
 8003f66:	3001      	adds	r0, #1
 8003f68:	f43f af09 	beq.w	8003d7e <_printf_float+0xc2>
 8003f6c:	f04f 0900 	mov.w	r9, #0
 8003f70:	f104 0a1a 	add.w	sl, r4, #26
 8003f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f76:	425b      	negs	r3, r3
 8003f78:	454b      	cmp	r3, r9
 8003f7a:	dc01      	bgt.n	8003f80 <_printf_float+0x2c4>
 8003f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f7e:	e792      	b.n	8003ea6 <_printf_float+0x1ea>
 8003f80:	2301      	movs	r3, #1
 8003f82:	4652      	mov	r2, sl
 8003f84:	4631      	mov	r1, r6
 8003f86:	4628      	mov	r0, r5
 8003f88:	47b8      	blx	r7
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	f43f aef7 	beq.w	8003d7e <_printf_float+0xc2>
 8003f90:	f109 0901 	add.w	r9, r9, #1
 8003f94:	e7ee      	b.n	8003f74 <_printf_float+0x2b8>
 8003f96:	bf00      	nop
 8003f98:	7fefffff 	.word	0x7fefffff
 8003f9c:	08008814 	.word	0x08008814
 8003fa0:	08008818 	.word	0x08008818
 8003fa4:	08008820 	.word	0x08008820
 8003fa8:	0800881c 	.word	0x0800881c
 8003fac:	08008824 	.word	0x08008824
 8003fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	bfa8      	it	ge
 8003fb8:	461a      	movge	r2, r3
 8003fba:	2a00      	cmp	r2, #0
 8003fbc:	4691      	mov	r9, r2
 8003fbe:	dc37      	bgt.n	8004030 <_printf_float+0x374>
 8003fc0:	f04f 0b00 	mov.w	fp, #0
 8003fc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fc8:	f104 021a 	add.w	r2, r4, #26
 8003fcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fce:	9305      	str	r3, [sp, #20]
 8003fd0:	eba3 0309 	sub.w	r3, r3, r9
 8003fd4:	455b      	cmp	r3, fp
 8003fd6:	dc33      	bgt.n	8004040 <_printf_float+0x384>
 8003fd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	db3b      	blt.n	8004058 <_printf_float+0x39c>
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	07da      	lsls	r2, r3, #31
 8003fe4:	d438      	bmi.n	8004058 <_printf_float+0x39c>
 8003fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fe8:	9a05      	ldr	r2, [sp, #20]
 8003fea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fec:	1a9a      	subs	r2, r3, r2
 8003fee:	eba3 0901 	sub.w	r9, r3, r1
 8003ff2:	4591      	cmp	r9, r2
 8003ff4:	bfa8      	it	ge
 8003ff6:	4691      	movge	r9, r2
 8003ff8:	f1b9 0f00 	cmp.w	r9, #0
 8003ffc:	dc35      	bgt.n	800406a <_printf_float+0x3ae>
 8003ffe:	f04f 0800 	mov.w	r8, #0
 8004002:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004006:	f104 0a1a 	add.w	sl, r4, #26
 800400a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	eba3 0309 	sub.w	r3, r3, r9
 8004014:	4543      	cmp	r3, r8
 8004016:	f77f af79 	ble.w	8003f0c <_printf_float+0x250>
 800401a:	2301      	movs	r3, #1
 800401c:	4652      	mov	r2, sl
 800401e:	4631      	mov	r1, r6
 8004020:	4628      	mov	r0, r5
 8004022:	47b8      	blx	r7
 8004024:	3001      	adds	r0, #1
 8004026:	f43f aeaa 	beq.w	8003d7e <_printf_float+0xc2>
 800402a:	f108 0801 	add.w	r8, r8, #1
 800402e:	e7ec      	b.n	800400a <_printf_float+0x34e>
 8004030:	4613      	mov	r3, r2
 8004032:	4631      	mov	r1, r6
 8004034:	4642      	mov	r2, r8
 8004036:	4628      	mov	r0, r5
 8004038:	47b8      	blx	r7
 800403a:	3001      	adds	r0, #1
 800403c:	d1c0      	bne.n	8003fc0 <_printf_float+0x304>
 800403e:	e69e      	b.n	8003d7e <_printf_float+0xc2>
 8004040:	2301      	movs	r3, #1
 8004042:	4631      	mov	r1, r6
 8004044:	4628      	mov	r0, r5
 8004046:	9205      	str	r2, [sp, #20]
 8004048:	47b8      	blx	r7
 800404a:	3001      	adds	r0, #1
 800404c:	f43f ae97 	beq.w	8003d7e <_printf_float+0xc2>
 8004050:	9a05      	ldr	r2, [sp, #20]
 8004052:	f10b 0b01 	add.w	fp, fp, #1
 8004056:	e7b9      	b.n	8003fcc <_printf_float+0x310>
 8004058:	ee18 3a10 	vmov	r3, s16
 800405c:	4652      	mov	r2, sl
 800405e:	4631      	mov	r1, r6
 8004060:	4628      	mov	r0, r5
 8004062:	47b8      	blx	r7
 8004064:	3001      	adds	r0, #1
 8004066:	d1be      	bne.n	8003fe6 <_printf_float+0x32a>
 8004068:	e689      	b.n	8003d7e <_printf_float+0xc2>
 800406a:	9a05      	ldr	r2, [sp, #20]
 800406c:	464b      	mov	r3, r9
 800406e:	4442      	add	r2, r8
 8004070:	4631      	mov	r1, r6
 8004072:	4628      	mov	r0, r5
 8004074:	47b8      	blx	r7
 8004076:	3001      	adds	r0, #1
 8004078:	d1c1      	bne.n	8003ffe <_printf_float+0x342>
 800407a:	e680      	b.n	8003d7e <_printf_float+0xc2>
 800407c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800407e:	2a01      	cmp	r2, #1
 8004080:	dc01      	bgt.n	8004086 <_printf_float+0x3ca>
 8004082:	07db      	lsls	r3, r3, #31
 8004084:	d538      	bpl.n	80040f8 <_printf_float+0x43c>
 8004086:	2301      	movs	r3, #1
 8004088:	4642      	mov	r2, r8
 800408a:	4631      	mov	r1, r6
 800408c:	4628      	mov	r0, r5
 800408e:	47b8      	blx	r7
 8004090:	3001      	adds	r0, #1
 8004092:	f43f ae74 	beq.w	8003d7e <_printf_float+0xc2>
 8004096:	ee18 3a10 	vmov	r3, s16
 800409a:	4652      	mov	r2, sl
 800409c:	4631      	mov	r1, r6
 800409e:	4628      	mov	r0, r5
 80040a0:	47b8      	blx	r7
 80040a2:	3001      	adds	r0, #1
 80040a4:	f43f ae6b 	beq.w	8003d7e <_printf_float+0xc2>
 80040a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040ac:	2200      	movs	r2, #0
 80040ae:	2300      	movs	r3, #0
 80040b0:	f7fc fd0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80040b4:	b9d8      	cbnz	r0, 80040ee <_printf_float+0x432>
 80040b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040b8:	f108 0201 	add.w	r2, r8, #1
 80040bc:	3b01      	subs	r3, #1
 80040be:	4631      	mov	r1, r6
 80040c0:	4628      	mov	r0, r5
 80040c2:	47b8      	blx	r7
 80040c4:	3001      	adds	r0, #1
 80040c6:	d10e      	bne.n	80040e6 <_printf_float+0x42a>
 80040c8:	e659      	b.n	8003d7e <_printf_float+0xc2>
 80040ca:	2301      	movs	r3, #1
 80040cc:	4652      	mov	r2, sl
 80040ce:	4631      	mov	r1, r6
 80040d0:	4628      	mov	r0, r5
 80040d2:	47b8      	blx	r7
 80040d4:	3001      	adds	r0, #1
 80040d6:	f43f ae52 	beq.w	8003d7e <_printf_float+0xc2>
 80040da:	f108 0801 	add.w	r8, r8, #1
 80040de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040e0:	3b01      	subs	r3, #1
 80040e2:	4543      	cmp	r3, r8
 80040e4:	dcf1      	bgt.n	80040ca <_printf_float+0x40e>
 80040e6:	464b      	mov	r3, r9
 80040e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040ec:	e6dc      	b.n	8003ea8 <_printf_float+0x1ec>
 80040ee:	f04f 0800 	mov.w	r8, #0
 80040f2:	f104 0a1a 	add.w	sl, r4, #26
 80040f6:	e7f2      	b.n	80040de <_printf_float+0x422>
 80040f8:	2301      	movs	r3, #1
 80040fa:	4642      	mov	r2, r8
 80040fc:	e7df      	b.n	80040be <_printf_float+0x402>
 80040fe:	2301      	movs	r3, #1
 8004100:	464a      	mov	r2, r9
 8004102:	4631      	mov	r1, r6
 8004104:	4628      	mov	r0, r5
 8004106:	47b8      	blx	r7
 8004108:	3001      	adds	r0, #1
 800410a:	f43f ae38 	beq.w	8003d7e <_printf_float+0xc2>
 800410e:	f108 0801 	add.w	r8, r8, #1
 8004112:	68e3      	ldr	r3, [r4, #12]
 8004114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004116:	1a5b      	subs	r3, r3, r1
 8004118:	4543      	cmp	r3, r8
 800411a:	dcf0      	bgt.n	80040fe <_printf_float+0x442>
 800411c:	e6fa      	b.n	8003f14 <_printf_float+0x258>
 800411e:	f04f 0800 	mov.w	r8, #0
 8004122:	f104 0919 	add.w	r9, r4, #25
 8004126:	e7f4      	b.n	8004112 <_printf_float+0x456>

08004128 <_printf_common>:
 8004128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800412c:	4616      	mov	r6, r2
 800412e:	4699      	mov	r9, r3
 8004130:	688a      	ldr	r2, [r1, #8]
 8004132:	690b      	ldr	r3, [r1, #16]
 8004134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004138:	4293      	cmp	r3, r2
 800413a:	bfb8      	it	lt
 800413c:	4613      	movlt	r3, r2
 800413e:	6033      	str	r3, [r6, #0]
 8004140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004144:	4607      	mov	r7, r0
 8004146:	460c      	mov	r4, r1
 8004148:	b10a      	cbz	r2, 800414e <_printf_common+0x26>
 800414a:	3301      	adds	r3, #1
 800414c:	6033      	str	r3, [r6, #0]
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	0699      	lsls	r1, r3, #26
 8004152:	bf42      	ittt	mi
 8004154:	6833      	ldrmi	r3, [r6, #0]
 8004156:	3302      	addmi	r3, #2
 8004158:	6033      	strmi	r3, [r6, #0]
 800415a:	6825      	ldr	r5, [r4, #0]
 800415c:	f015 0506 	ands.w	r5, r5, #6
 8004160:	d106      	bne.n	8004170 <_printf_common+0x48>
 8004162:	f104 0a19 	add.w	sl, r4, #25
 8004166:	68e3      	ldr	r3, [r4, #12]
 8004168:	6832      	ldr	r2, [r6, #0]
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	42ab      	cmp	r3, r5
 800416e:	dc26      	bgt.n	80041be <_printf_common+0x96>
 8004170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004174:	1e13      	subs	r3, r2, #0
 8004176:	6822      	ldr	r2, [r4, #0]
 8004178:	bf18      	it	ne
 800417a:	2301      	movne	r3, #1
 800417c:	0692      	lsls	r2, r2, #26
 800417e:	d42b      	bmi.n	80041d8 <_printf_common+0xb0>
 8004180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004184:	4649      	mov	r1, r9
 8004186:	4638      	mov	r0, r7
 8004188:	47c0      	blx	r8
 800418a:	3001      	adds	r0, #1
 800418c:	d01e      	beq.n	80041cc <_printf_common+0xa4>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	68e5      	ldr	r5, [r4, #12]
 8004192:	6832      	ldr	r2, [r6, #0]
 8004194:	f003 0306 	and.w	r3, r3, #6
 8004198:	2b04      	cmp	r3, #4
 800419a:	bf08      	it	eq
 800419c:	1aad      	subeq	r5, r5, r2
 800419e:	68a3      	ldr	r3, [r4, #8]
 80041a0:	6922      	ldr	r2, [r4, #16]
 80041a2:	bf0c      	ite	eq
 80041a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041a8:	2500      	movne	r5, #0
 80041aa:	4293      	cmp	r3, r2
 80041ac:	bfc4      	itt	gt
 80041ae:	1a9b      	subgt	r3, r3, r2
 80041b0:	18ed      	addgt	r5, r5, r3
 80041b2:	2600      	movs	r6, #0
 80041b4:	341a      	adds	r4, #26
 80041b6:	42b5      	cmp	r5, r6
 80041b8:	d11a      	bne.n	80041f0 <_printf_common+0xc8>
 80041ba:	2000      	movs	r0, #0
 80041bc:	e008      	b.n	80041d0 <_printf_common+0xa8>
 80041be:	2301      	movs	r3, #1
 80041c0:	4652      	mov	r2, sl
 80041c2:	4649      	mov	r1, r9
 80041c4:	4638      	mov	r0, r7
 80041c6:	47c0      	blx	r8
 80041c8:	3001      	adds	r0, #1
 80041ca:	d103      	bne.n	80041d4 <_printf_common+0xac>
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295
 80041d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d4:	3501      	adds	r5, #1
 80041d6:	e7c6      	b.n	8004166 <_printf_common+0x3e>
 80041d8:	18e1      	adds	r1, r4, r3
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	2030      	movs	r0, #48	; 0x30
 80041de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041e2:	4422      	add	r2, r4
 80041e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041ec:	3302      	adds	r3, #2
 80041ee:	e7c7      	b.n	8004180 <_printf_common+0x58>
 80041f0:	2301      	movs	r3, #1
 80041f2:	4622      	mov	r2, r4
 80041f4:	4649      	mov	r1, r9
 80041f6:	4638      	mov	r0, r7
 80041f8:	47c0      	blx	r8
 80041fa:	3001      	adds	r0, #1
 80041fc:	d0e6      	beq.n	80041cc <_printf_common+0xa4>
 80041fe:	3601      	adds	r6, #1
 8004200:	e7d9      	b.n	80041b6 <_printf_common+0x8e>
	...

08004204 <_printf_i>:
 8004204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004208:	7e0f      	ldrb	r7, [r1, #24]
 800420a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800420c:	2f78      	cmp	r7, #120	; 0x78
 800420e:	4691      	mov	r9, r2
 8004210:	4680      	mov	r8, r0
 8004212:	460c      	mov	r4, r1
 8004214:	469a      	mov	sl, r3
 8004216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800421a:	d807      	bhi.n	800422c <_printf_i+0x28>
 800421c:	2f62      	cmp	r7, #98	; 0x62
 800421e:	d80a      	bhi.n	8004236 <_printf_i+0x32>
 8004220:	2f00      	cmp	r7, #0
 8004222:	f000 80d8 	beq.w	80043d6 <_printf_i+0x1d2>
 8004226:	2f58      	cmp	r7, #88	; 0x58
 8004228:	f000 80a3 	beq.w	8004372 <_printf_i+0x16e>
 800422c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004234:	e03a      	b.n	80042ac <_printf_i+0xa8>
 8004236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800423a:	2b15      	cmp	r3, #21
 800423c:	d8f6      	bhi.n	800422c <_printf_i+0x28>
 800423e:	a101      	add	r1, pc, #4	; (adr r1, 8004244 <_printf_i+0x40>)
 8004240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004244:	0800429d 	.word	0x0800429d
 8004248:	080042b1 	.word	0x080042b1
 800424c:	0800422d 	.word	0x0800422d
 8004250:	0800422d 	.word	0x0800422d
 8004254:	0800422d 	.word	0x0800422d
 8004258:	0800422d 	.word	0x0800422d
 800425c:	080042b1 	.word	0x080042b1
 8004260:	0800422d 	.word	0x0800422d
 8004264:	0800422d 	.word	0x0800422d
 8004268:	0800422d 	.word	0x0800422d
 800426c:	0800422d 	.word	0x0800422d
 8004270:	080043bd 	.word	0x080043bd
 8004274:	080042e1 	.word	0x080042e1
 8004278:	0800439f 	.word	0x0800439f
 800427c:	0800422d 	.word	0x0800422d
 8004280:	0800422d 	.word	0x0800422d
 8004284:	080043df 	.word	0x080043df
 8004288:	0800422d 	.word	0x0800422d
 800428c:	080042e1 	.word	0x080042e1
 8004290:	0800422d 	.word	0x0800422d
 8004294:	0800422d 	.word	0x0800422d
 8004298:	080043a7 	.word	0x080043a7
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	1d1a      	adds	r2, r3, #4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	602a      	str	r2, [r5, #0]
 80042a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0a3      	b.n	80043f8 <_printf_i+0x1f4>
 80042b0:	6820      	ldr	r0, [r4, #0]
 80042b2:	6829      	ldr	r1, [r5, #0]
 80042b4:	0606      	lsls	r6, r0, #24
 80042b6:	f101 0304 	add.w	r3, r1, #4
 80042ba:	d50a      	bpl.n	80042d2 <_printf_i+0xce>
 80042bc:	680e      	ldr	r6, [r1, #0]
 80042be:	602b      	str	r3, [r5, #0]
 80042c0:	2e00      	cmp	r6, #0
 80042c2:	da03      	bge.n	80042cc <_printf_i+0xc8>
 80042c4:	232d      	movs	r3, #45	; 0x2d
 80042c6:	4276      	negs	r6, r6
 80042c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042cc:	485e      	ldr	r0, [pc, #376]	; (8004448 <_printf_i+0x244>)
 80042ce:	230a      	movs	r3, #10
 80042d0:	e019      	b.n	8004306 <_printf_i+0x102>
 80042d2:	680e      	ldr	r6, [r1, #0]
 80042d4:	602b      	str	r3, [r5, #0]
 80042d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042da:	bf18      	it	ne
 80042dc:	b236      	sxthne	r6, r6
 80042de:	e7ef      	b.n	80042c0 <_printf_i+0xbc>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	6820      	ldr	r0, [r4, #0]
 80042e4:	1d19      	adds	r1, r3, #4
 80042e6:	6029      	str	r1, [r5, #0]
 80042e8:	0601      	lsls	r1, r0, #24
 80042ea:	d501      	bpl.n	80042f0 <_printf_i+0xec>
 80042ec:	681e      	ldr	r6, [r3, #0]
 80042ee:	e002      	b.n	80042f6 <_printf_i+0xf2>
 80042f0:	0646      	lsls	r6, r0, #25
 80042f2:	d5fb      	bpl.n	80042ec <_printf_i+0xe8>
 80042f4:	881e      	ldrh	r6, [r3, #0]
 80042f6:	4854      	ldr	r0, [pc, #336]	; (8004448 <_printf_i+0x244>)
 80042f8:	2f6f      	cmp	r7, #111	; 0x6f
 80042fa:	bf0c      	ite	eq
 80042fc:	2308      	moveq	r3, #8
 80042fe:	230a      	movne	r3, #10
 8004300:	2100      	movs	r1, #0
 8004302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004306:	6865      	ldr	r5, [r4, #4]
 8004308:	60a5      	str	r5, [r4, #8]
 800430a:	2d00      	cmp	r5, #0
 800430c:	bfa2      	ittt	ge
 800430e:	6821      	ldrge	r1, [r4, #0]
 8004310:	f021 0104 	bicge.w	r1, r1, #4
 8004314:	6021      	strge	r1, [r4, #0]
 8004316:	b90e      	cbnz	r6, 800431c <_printf_i+0x118>
 8004318:	2d00      	cmp	r5, #0
 800431a:	d04d      	beq.n	80043b8 <_printf_i+0x1b4>
 800431c:	4615      	mov	r5, r2
 800431e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004322:	fb03 6711 	mls	r7, r3, r1, r6
 8004326:	5dc7      	ldrb	r7, [r0, r7]
 8004328:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800432c:	4637      	mov	r7, r6
 800432e:	42bb      	cmp	r3, r7
 8004330:	460e      	mov	r6, r1
 8004332:	d9f4      	bls.n	800431e <_printf_i+0x11a>
 8004334:	2b08      	cmp	r3, #8
 8004336:	d10b      	bne.n	8004350 <_printf_i+0x14c>
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	07de      	lsls	r6, r3, #31
 800433c:	d508      	bpl.n	8004350 <_printf_i+0x14c>
 800433e:	6923      	ldr	r3, [r4, #16]
 8004340:	6861      	ldr	r1, [r4, #4]
 8004342:	4299      	cmp	r1, r3
 8004344:	bfde      	ittt	le
 8004346:	2330      	movle	r3, #48	; 0x30
 8004348:	f805 3c01 	strble.w	r3, [r5, #-1]
 800434c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004350:	1b52      	subs	r2, r2, r5
 8004352:	6122      	str	r2, [r4, #16]
 8004354:	f8cd a000 	str.w	sl, [sp]
 8004358:	464b      	mov	r3, r9
 800435a:	aa03      	add	r2, sp, #12
 800435c:	4621      	mov	r1, r4
 800435e:	4640      	mov	r0, r8
 8004360:	f7ff fee2 	bl	8004128 <_printf_common>
 8004364:	3001      	adds	r0, #1
 8004366:	d14c      	bne.n	8004402 <_printf_i+0x1fe>
 8004368:	f04f 30ff 	mov.w	r0, #4294967295
 800436c:	b004      	add	sp, #16
 800436e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004372:	4835      	ldr	r0, [pc, #212]	; (8004448 <_printf_i+0x244>)
 8004374:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004378:	6829      	ldr	r1, [r5, #0]
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004380:	6029      	str	r1, [r5, #0]
 8004382:	061d      	lsls	r5, r3, #24
 8004384:	d514      	bpl.n	80043b0 <_printf_i+0x1ac>
 8004386:	07df      	lsls	r7, r3, #31
 8004388:	bf44      	itt	mi
 800438a:	f043 0320 	orrmi.w	r3, r3, #32
 800438e:	6023      	strmi	r3, [r4, #0]
 8004390:	b91e      	cbnz	r6, 800439a <_printf_i+0x196>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	f023 0320 	bic.w	r3, r3, #32
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	2310      	movs	r3, #16
 800439c:	e7b0      	b.n	8004300 <_printf_i+0xfc>
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	f043 0320 	orr.w	r3, r3, #32
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	2378      	movs	r3, #120	; 0x78
 80043a8:	4828      	ldr	r0, [pc, #160]	; (800444c <_printf_i+0x248>)
 80043aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043ae:	e7e3      	b.n	8004378 <_printf_i+0x174>
 80043b0:	0659      	lsls	r1, r3, #25
 80043b2:	bf48      	it	mi
 80043b4:	b2b6      	uxthmi	r6, r6
 80043b6:	e7e6      	b.n	8004386 <_printf_i+0x182>
 80043b8:	4615      	mov	r5, r2
 80043ba:	e7bb      	b.n	8004334 <_printf_i+0x130>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	6826      	ldr	r6, [r4, #0]
 80043c0:	6961      	ldr	r1, [r4, #20]
 80043c2:	1d18      	adds	r0, r3, #4
 80043c4:	6028      	str	r0, [r5, #0]
 80043c6:	0635      	lsls	r5, r6, #24
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	d501      	bpl.n	80043d0 <_printf_i+0x1cc>
 80043cc:	6019      	str	r1, [r3, #0]
 80043ce:	e002      	b.n	80043d6 <_printf_i+0x1d2>
 80043d0:	0670      	lsls	r0, r6, #25
 80043d2:	d5fb      	bpl.n	80043cc <_printf_i+0x1c8>
 80043d4:	8019      	strh	r1, [r3, #0]
 80043d6:	2300      	movs	r3, #0
 80043d8:	6123      	str	r3, [r4, #16]
 80043da:	4615      	mov	r5, r2
 80043dc:	e7ba      	b.n	8004354 <_printf_i+0x150>
 80043de:	682b      	ldr	r3, [r5, #0]
 80043e0:	1d1a      	adds	r2, r3, #4
 80043e2:	602a      	str	r2, [r5, #0]
 80043e4:	681d      	ldr	r5, [r3, #0]
 80043e6:	6862      	ldr	r2, [r4, #4]
 80043e8:	2100      	movs	r1, #0
 80043ea:	4628      	mov	r0, r5
 80043ec:	f7fb fef8 	bl	80001e0 <memchr>
 80043f0:	b108      	cbz	r0, 80043f6 <_printf_i+0x1f2>
 80043f2:	1b40      	subs	r0, r0, r5
 80043f4:	6060      	str	r0, [r4, #4]
 80043f6:	6863      	ldr	r3, [r4, #4]
 80043f8:	6123      	str	r3, [r4, #16]
 80043fa:	2300      	movs	r3, #0
 80043fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004400:	e7a8      	b.n	8004354 <_printf_i+0x150>
 8004402:	6923      	ldr	r3, [r4, #16]
 8004404:	462a      	mov	r2, r5
 8004406:	4649      	mov	r1, r9
 8004408:	4640      	mov	r0, r8
 800440a:	47d0      	blx	sl
 800440c:	3001      	adds	r0, #1
 800440e:	d0ab      	beq.n	8004368 <_printf_i+0x164>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	079b      	lsls	r3, r3, #30
 8004414:	d413      	bmi.n	800443e <_printf_i+0x23a>
 8004416:	68e0      	ldr	r0, [r4, #12]
 8004418:	9b03      	ldr	r3, [sp, #12]
 800441a:	4298      	cmp	r0, r3
 800441c:	bfb8      	it	lt
 800441e:	4618      	movlt	r0, r3
 8004420:	e7a4      	b.n	800436c <_printf_i+0x168>
 8004422:	2301      	movs	r3, #1
 8004424:	4632      	mov	r2, r6
 8004426:	4649      	mov	r1, r9
 8004428:	4640      	mov	r0, r8
 800442a:	47d0      	blx	sl
 800442c:	3001      	adds	r0, #1
 800442e:	d09b      	beq.n	8004368 <_printf_i+0x164>
 8004430:	3501      	adds	r5, #1
 8004432:	68e3      	ldr	r3, [r4, #12]
 8004434:	9903      	ldr	r1, [sp, #12]
 8004436:	1a5b      	subs	r3, r3, r1
 8004438:	42ab      	cmp	r3, r5
 800443a:	dcf2      	bgt.n	8004422 <_printf_i+0x21e>
 800443c:	e7eb      	b.n	8004416 <_printf_i+0x212>
 800443e:	2500      	movs	r5, #0
 8004440:	f104 0619 	add.w	r6, r4, #25
 8004444:	e7f5      	b.n	8004432 <_printf_i+0x22e>
 8004446:	bf00      	nop
 8004448:	08008826 	.word	0x08008826
 800444c:	08008837 	.word	0x08008837

08004450 <_scanf_float>:
 8004450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004454:	b087      	sub	sp, #28
 8004456:	4617      	mov	r7, r2
 8004458:	9303      	str	r3, [sp, #12]
 800445a:	688b      	ldr	r3, [r1, #8]
 800445c:	1e5a      	subs	r2, r3, #1
 800445e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004462:	bf83      	ittte	hi
 8004464:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004468:	195b      	addhi	r3, r3, r5
 800446a:	9302      	strhi	r3, [sp, #8]
 800446c:	2300      	movls	r3, #0
 800446e:	bf86      	itte	hi
 8004470:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004474:	608b      	strhi	r3, [r1, #8]
 8004476:	9302      	strls	r3, [sp, #8]
 8004478:	680b      	ldr	r3, [r1, #0]
 800447a:	468b      	mov	fp, r1
 800447c:	2500      	movs	r5, #0
 800447e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004482:	f84b 3b1c 	str.w	r3, [fp], #28
 8004486:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800448a:	4680      	mov	r8, r0
 800448c:	460c      	mov	r4, r1
 800448e:	465e      	mov	r6, fp
 8004490:	46aa      	mov	sl, r5
 8004492:	46a9      	mov	r9, r5
 8004494:	9501      	str	r5, [sp, #4]
 8004496:	68a2      	ldr	r2, [r4, #8]
 8004498:	b152      	cbz	r2, 80044b0 <_scanf_float+0x60>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b4e      	cmp	r3, #78	; 0x4e
 80044a0:	d864      	bhi.n	800456c <_scanf_float+0x11c>
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d83c      	bhi.n	8004520 <_scanf_float+0xd0>
 80044a6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80044aa:	b2c8      	uxtb	r0, r1
 80044ac:	280e      	cmp	r0, #14
 80044ae:	d93a      	bls.n	8004526 <_scanf_float+0xd6>
 80044b0:	f1b9 0f00 	cmp.w	r9, #0
 80044b4:	d003      	beq.n	80044be <_scanf_float+0x6e>
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044c2:	f1ba 0f01 	cmp.w	sl, #1
 80044c6:	f200 8113 	bhi.w	80046f0 <_scanf_float+0x2a0>
 80044ca:	455e      	cmp	r6, fp
 80044cc:	f200 8105 	bhi.w	80046da <_scanf_float+0x28a>
 80044d0:	2501      	movs	r5, #1
 80044d2:	4628      	mov	r0, r5
 80044d4:	b007      	add	sp, #28
 80044d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044da:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80044de:	2a0d      	cmp	r2, #13
 80044e0:	d8e6      	bhi.n	80044b0 <_scanf_float+0x60>
 80044e2:	a101      	add	r1, pc, #4	; (adr r1, 80044e8 <_scanf_float+0x98>)
 80044e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80044e8:	08004627 	.word	0x08004627
 80044ec:	080044b1 	.word	0x080044b1
 80044f0:	080044b1 	.word	0x080044b1
 80044f4:	080044b1 	.word	0x080044b1
 80044f8:	08004687 	.word	0x08004687
 80044fc:	0800465f 	.word	0x0800465f
 8004500:	080044b1 	.word	0x080044b1
 8004504:	080044b1 	.word	0x080044b1
 8004508:	08004635 	.word	0x08004635
 800450c:	080044b1 	.word	0x080044b1
 8004510:	080044b1 	.word	0x080044b1
 8004514:	080044b1 	.word	0x080044b1
 8004518:	080044b1 	.word	0x080044b1
 800451c:	080045ed 	.word	0x080045ed
 8004520:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004524:	e7db      	b.n	80044de <_scanf_float+0x8e>
 8004526:	290e      	cmp	r1, #14
 8004528:	d8c2      	bhi.n	80044b0 <_scanf_float+0x60>
 800452a:	a001      	add	r0, pc, #4	; (adr r0, 8004530 <_scanf_float+0xe0>)
 800452c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004530:	080045df 	.word	0x080045df
 8004534:	080044b1 	.word	0x080044b1
 8004538:	080045df 	.word	0x080045df
 800453c:	08004673 	.word	0x08004673
 8004540:	080044b1 	.word	0x080044b1
 8004544:	0800458d 	.word	0x0800458d
 8004548:	080045c9 	.word	0x080045c9
 800454c:	080045c9 	.word	0x080045c9
 8004550:	080045c9 	.word	0x080045c9
 8004554:	080045c9 	.word	0x080045c9
 8004558:	080045c9 	.word	0x080045c9
 800455c:	080045c9 	.word	0x080045c9
 8004560:	080045c9 	.word	0x080045c9
 8004564:	080045c9 	.word	0x080045c9
 8004568:	080045c9 	.word	0x080045c9
 800456c:	2b6e      	cmp	r3, #110	; 0x6e
 800456e:	d809      	bhi.n	8004584 <_scanf_float+0x134>
 8004570:	2b60      	cmp	r3, #96	; 0x60
 8004572:	d8b2      	bhi.n	80044da <_scanf_float+0x8a>
 8004574:	2b54      	cmp	r3, #84	; 0x54
 8004576:	d077      	beq.n	8004668 <_scanf_float+0x218>
 8004578:	2b59      	cmp	r3, #89	; 0x59
 800457a:	d199      	bne.n	80044b0 <_scanf_float+0x60>
 800457c:	2d07      	cmp	r5, #7
 800457e:	d197      	bne.n	80044b0 <_scanf_float+0x60>
 8004580:	2508      	movs	r5, #8
 8004582:	e029      	b.n	80045d8 <_scanf_float+0x188>
 8004584:	2b74      	cmp	r3, #116	; 0x74
 8004586:	d06f      	beq.n	8004668 <_scanf_float+0x218>
 8004588:	2b79      	cmp	r3, #121	; 0x79
 800458a:	e7f6      	b.n	800457a <_scanf_float+0x12a>
 800458c:	6821      	ldr	r1, [r4, #0]
 800458e:	05c8      	lsls	r0, r1, #23
 8004590:	d51a      	bpl.n	80045c8 <_scanf_float+0x178>
 8004592:	9b02      	ldr	r3, [sp, #8]
 8004594:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004598:	6021      	str	r1, [r4, #0]
 800459a:	f109 0901 	add.w	r9, r9, #1
 800459e:	b11b      	cbz	r3, 80045a8 <_scanf_float+0x158>
 80045a0:	3b01      	subs	r3, #1
 80045a2:	3201      	adds	r2, #1
 80045a4:	9302      	str	r3, [sp, #8]
 80045a6:	60a2      	str	r2, [r4, #8]
 80045a8:	68a3      	ldr	r3, [r4, #8]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	60a3      	str	r3, [r4, #8]
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	3301      	adds	r3, #1
 80045b2:	6123      	str	r3, [r4, #16]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	607b      	str	r3, [r7, #4]
 80045bc:	f340 8084 	ble.w	80046c8 <_scanf_float+0x278>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	3301      	adds	r3, #1
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	e766      	b.n	8004496 <_scanf_float+0x46>
 80045c8:	eb1a 0f05 	cmn.w	sl, r5
 80045cc:	f47f af70 	bne.w	80044b0 <_scanf_float+0x60>
 80045d0:	6822      	ldr	r2, [r4, #0]
 80045d2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80045d6:	6022      	str	r2, [r4, #0]
 80045d8:	f806 3b01 	strb.w	r3, [r6], #1
 80045dc:	e7e4      	b.n	80045a8 <_scanf_float+0x158>
 80045de:	6822      	ldr	r2, [r4, #0]
 80045e0:	0610      	lsls	r0, r2, #24
 80045e2:	f57f af65 	bpl.w	80044b0 <_scanf_float+0x60>
 80045e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ea:	e7f4      	b.n	80045d6 <_scanf_float+0x186>
 80045ec:	f1ba 0f00 	cmp.w	sl, #0
 80045f0:	d10e      	bne.n	8004610 <_scanf_float+0x1c0>
 80045f2:	f1b9 0f00 	cmp.w	r9, #0
 80045f6:	d10e      	bne.n	8004616 <_scanf_float+0x1c6>
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80045fe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004602:	d108      	bne.n	8004616 <_scanf_float+0x1c6>
 8004604:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004608:	6022      	str	r2, [r4, #0]
 800460a:	f04f 0a01 	mov.w	sl, #1
 800460e:	e7e3      	b.n	80045d8 <_scanf_float+0x188>
 8004610:	f1ba 0f02 	cmp.w	sl, #2
 8004614:	d055      	beq.n	80046c2 <_scanf_float+0x272>
 8004616:	2d01      	cmp	r5, #1
 8004618:	d002      	beq.n	8004620 <_scanf_float+0x1d0>
 800461a:	2d04      	cmp	r5, #4
 800461c:	f47f af48 	bne.w	80044b0 <_scanf_float+0x60>
 8004620:	3501      	adds	r5, #1
 8004622:	b2ed      	uxtb	r5, r5
 8004624:	e7d8      	b.n	80045d8 <_scanf_float+0x188>
 8004626:	f1ba 0f01 	cmp.w	sl, #1
 800462a:	f47f af41 	bne.w	80044b0 <_scanf_float+0x60>
 800462e:	f04f 0a02 	mov.w	sl, #2
 8004632:	e7d1      	b.n	80045d8 <_scanf_float+0x188>
 8004634:	b97d      	cbnz	r5, 8004656 <_scanf_float+0x206>
 8004636:	f1b9 0f00 	cmp.w	r9, #0
 800463a:	f47f af3c 	bne.w	80044b6 <_scanf_float+0x66>
 800463e:	6822      	ldr	r2, [r4, #0]
 8004640:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004644:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004648:	f47f af39 	bne.w	80044be <_scanf_float+0x6e>
 800464c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004650:	6022      	str	r2, [r4, #0]
 8004652:	2501      	movs	r5, #1
 8004654:	e7c0      	b.n	80045d8 <_scanf_float+0x188>
 8004656:	2d03      	cmp	r5, #3
 8004658:	d0e2      	beq.n	8004620 <_scanf_float+0x1d0>
 800465a:	2d05      	cmp	r5, #5
 800465c:	e7de      	b.n	800461c <_scanf_float+0x1cc>
 800465e:	2d02      	cmp	r5, #2
 8004660:	f47f af26 	bne.w	80044b0 <_scanf_float+0x60>
 8004664:	2503      	movs	r5, #3
 8004666:	e7b7      	b.n	80045d8 <_scanf_float+0x188>
 8004668:	2d06      	cmp	r5, #6
 800466a:	f47f af21 	bne.w	80044b0 <_scanf_float+0x60>
 800466e:	2507      	movs	r5, #7
 8004670:	e7b2      	b.n	80045d8 <_scanf_float+0x188>
 8004672:	6822      	ldr	r2, [r4, #0]
 8004674:	0591      	lsls	r1, r2, #22
 8004676:	f57f af1b 	bpl.w	80044b0 <_scanf_float+0x60>
 800467a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800467e:	6022      	str	r2, [r4, #0]
 8004680:	f8cd 9004 	str.w	r9, [sp, #4]
 8004684:	e7a8      	b.n	80045d8 <_scanf_float+0x188>
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800468c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004690:	d006      	beq.n	80046a0 <_scanf_float+0x250>
 8004692:	0550      	lsls	r0, r2, #21
 8004694:	f57f af0c 	bpl.w	80044b0 <_scanf_float+0x60>
 8004698:	f1b9 0f00 	cmp.w	r9, #0
 800469c:	f43f af0f 	beq.w	80044be <_scanf_float+0x6e>
 80046a0:	0591      	lsls	r1, r2, #22
 80046a2:	bf58      	it	pl
 80046a4:	9901      	ldrpl	r1, [sp, #4]
 80046a6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80046aa:	bf58      	it	pl
 80046ac:	eba9 0101 	subpl.w	r1, r9, r1
 80046b0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80046b4:	bf58      	it	pl
 80046b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80046ba:	6022      	str	r2, [r4, #0]
 80046bc:	f04f 0900 	mov.w	r9, #0
 80046c0:	e78a      	b.n	80045d8 <_scanf_float+0x188>
 80046c2:	f04f 0a03 	mov.w	sl, #3
 80046c6:	e787      	b.n	80045d8 <_scanf_float+0x188>
 80046c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80046cc:	4639      	mov	r1, r7
 80046ce:	4640      	mov	r0, r8
 80046d0:	4798      	blx	r3
 80046d2:	2800      	cmp	r0, #0
 80046d4:	f43f aedf 	beq.w	8004496 <_scanf_float+0x46>
 80046d8:	e6ea      	b.n	80044b0 <_scanf_float+0x60>
 80046da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046e2:	463a      	mov	r2, r7
 80046e4:	4640      	mov	r0, r8
 80046e6:	4798      	blx	r3
 80046e8:	6923      	ldr	r3, [r4, #16]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	6123      	str	r3, [r4, #16]
 80046ee:	e6ec      	b.n	80044ca <_scanf_float+0x7a>
 80046f0:	1e6b      	subs	r3, r5, #1
 80046f2:	2b06      	cmp	r3, #6
 80046f4:	d825      	bhi.n	8004742 <_scanf_float+0x2f2>
 80046f6:	2d02      	cmp	r5, #2
 80046f8:	d836      	bhi.n	8004768 <_scanf_float+0x318>
 80046fa:	455e      	cmp	r6, fp
 80046fc:	f67f aee8 	bls.w	80044d0 <_scanf_float+0x80>
 8004700:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004704:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004708:	463a      	mov	r2, r7
 800470a:	4640      	mov	r0, r8
 800470c:	4798      	blx	r3
 800470e:	6923      	ldr	r3, [r4, #16]
 8004710:	3b01      	subs	r3, #1
 8004712:	6123      	str	r3, [r4, #16]
 8004714:	e7f1      	b.n	80046fa <_scanf_float+0x2aa>
 8004716:	9802      	ldr	r0, [sp, #8]
 8004718:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800471c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004720:	9002      	str	r0, [sp, #8]
 8004722:	463a      	mov	r2, r7
 8004724:	4640      	mov	r0, r8
 8004726:	4798      	blx	r3
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	3b01      	subs	r3, #1
 800472c:	6123      	str	r3, [r4, #16]
 800472e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004732:	fa5f fa8a 	uxtb.w	sl, sl
 8004736:	f1ba 0f02 	cmp.w	sl, #2
 800473a:	d1ec      	bne.n	8004716 <_scanf_float+0x2c6>
 800473c:	3d03      	subs	r5, #3
 800473e:	b2ed      	uxtb	r5, r5
 8004740:	1b76      	subs	r6, r6, r5
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	05da      	lsls	r2, r3, #23
 8004746:	d52f      	bpl.n	80047a8 <_scanf_float+0x358>
 8004748:	055b      	lsls	r3, r3, #21
 800474a:	d510      	bpl.n	800476e <_scanf_float+0x31e>
 800474c:	455e      	cmp	r6, fp
 800474e:	f67f aebf 	bls.w	80044d0 <_scanf_float+0x80>
 8004752:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004756:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800475a:	463a      	mov	r2, r7
 800475c:	4640      	mov	r0, r8
 800475e:	4798      	blx	r3
 8004760:	6923      	ldr	r3, [r4, #16]
 8004762:	3b01      	subs	r3, #1
 8004764:	6123      	str	r3, [r4, #16]
 8004766:	e7f1      	b.n	800474c <_scanf_float+0x2fc>
 8004768:	46aa      	mov	sl, r5
 800476a:	9602      	str	r6, [sp, #8]
 800476c:	e7df      	b.n	800472e <_scanf_float+0x2de>
 800476e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004772:	6923      	ldr	r3, [r4, #16]
 8004774:	2965      	cmp	r1, #101	; 0x65
 8004776:	f103 33ff 	add.w	r3, r3, #4294967295
 800477a:	f106 35ff 	add.w	r5, r6, #4294967295
 800477e:	6123      	str	r3, [r4, #16]
 8004780:	d00c      	beq.n	800479c <_scanf_float+0x34c>
 8004782:	2945      	cmp	r1, #69	; 0x45
 8004784:	d00a      	beq.n	800479c <_scanf_float+0x34c>
 8004786:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800478a:	463a      	mov	r2, r7
 800478c:	4640      	mov	r0, r8
 800478e:	4798      	blx	r3
 8004790:	6923      	ldr	r3, [r4, #16]
 8004792:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004796:	3b01      	subs	r3, #1
 8004798:	1eb5      	subs	r5, r6, #2
 800479a:	6123      	str	r3, [r4, #16]
 800479c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047a0:	463a      	mov	r2, r7
 80047a2:	4640      	mov	r0, r8
 80047a4:	4798      	blx	r3
 80047a6:	462e      	mov	r6, r5
 80047a8:	6825      	ldr	r5, [r4, #0]
 80047aa:	f015 0510 	ands.w	r5, r5, #16
 80047ae:	d159      	bne.n	8004864 <_scanf_float+0x414>
 80047b0:	7035      	strb	r5, [r6, #0]
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047bc:	d11b      	bne.n	80047f6 <_scanf_float+0x3a6>
 80047be:	9b01      	ldr	r3, [sp, #4]
 80047c0:	454b      	cmp	r3, r9
 80047c2:	eba3 0209 	sub.w	r2, r3, r9
 80047c6:	d123      	bne.n	8004810 <_scanf_float+0x3c0>
 80047c8:	2200      	movs	r2, #0
 80047ca:	4659      	mov	r1, fp
 80047cc:	4640      	mov	r0, r8
 80047ce:	f000 ff25 	bl	800561c <_strtod_r>
 80047d2:	6822      	ldr	r2, [r4, #0]
 80047d4:	9b03      	ldr	r3, [sp, #12]
 80047d6:	f012 0f02 	tst.w	r2, #2
 80047da:	ec57 6b10 	vmov	r6, r7, d0
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	d021      	beq.n	8004826 <_scanf_float+0x3d6>
 80047e2:	9903      	ldr	r1, [sp, #12]
 80047e4:	1d1a      	adds	r2, r3, #4
 80047e6:	600a      	str	r2, [r1, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	e9c3 6700 	strd	r6, r7, [r3]
 80047ee:	68e3      	ldr	r3, [r4, #12]
 80047f0:	3301      	adds	r3, #1
 80047f2:	60e3      	str	r3, [r4, #12]
 80047f4:	e66d      	b.n	80044d2 <_scanf_float+0x82>
 80047f6:	9b04      	ldr	r3, [sp, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0e5      	beq.n	80047c8 <_scanf_float+0x378>
 80047fc:	9905      	ldr	r1, [sp, #20]
 80047fe:	230a      	movs	r3, #10
 8004800:	462a      	mov	r2, r5
 8004802:	3101      	adds	r1, #1
 8004804:	4640      	mov	r0, r8
 8004806:	f000 ff91 	bl	800572c <_strtol_r>
 800480a:	9b04      	ldr	r3, [sp, #16]
 800480c:	9e05      	ldr	r6, [sp, #20]
 800480e:	1ac2      	subs	r2, r0, r3
 8004810:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004814:	429e      	cmp	r6, r3
 8004816:	bf28      	it	cs
 8004818:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800481c:	4912      	ldr	r1, [pc, #72]	; (8004868 <_scanf_float+0x418>)
 800481e:	4630      	mov	r0, r6
 8004820:	f000 f8ba 	bl	8004998 <siprintf>
 8004824:	e7d0      	b.n	80047c8 <_scanf_float+0x378>
 8004826:	9903      	ldr	r1, [sp, #12]
 8004828:	f012 0f04 	tst.w	r2, #4
 800482c:	f103 0204 	add.w	r2, r3, #4
 8004830:	600a      	str	r2, [r1, #0]
 8004832:	d1d9      	bne.n	80047e8 <_scanf_float+0x398>
 8004834:	f8d3 8000 	ldr.w	r8, [r3]
 8004838:	ee10 2a10 	vmov	r2, s0
 800483c:	ee10 0a10 	vmov	r0, s0
 8004840:	463b      	mov	r3, r7
 8004842:	4639      	mov	r1, r7
 8004844:	f7fc f972 	bl	8000b2c <__aeabi_dcmpun>
 8004848:	b128      	cbz	r0, 8004856 <_scanf_float+0x406>
 800484a:	4808      	ldr	r0, [pc, #32]	; (800486c <_scanf_float+0x41c>)
 800484c:	f000 f89e 	bl	800498c <nanf>
 8004850:	ed88 0a00 	vstr	s0, [r8]
 8004854:	e7cb      	b.n	80047ee <_scanf_float+0x39e>
 8004856:	4630      	mov	r0, r6
 8004858:	4639      	mov	r1, r7
 800485a:	f7fc f9c5 	bl	8000be8 <__aeabi_d2f>
 800485e:	f8c8 0000 	str.w	r0, [r8]
 8004862:	e7c4      	b.n	80047ee <_scanf_float+0x39e>
 8004864:	2500      	movs	r5, #0
 8004866:	e634      	b.n	80044d2 <_scanf_float+0x82>
 8004868:	08008848 	.word	0x08008848
 800486c:	08008cb8 	.word	0x08008cb8

08004870 <iprintf>:
 8004870:	b40f      	push	{r0, r1, r2, r3}
 8004872:	4b0a      	ldr	r3, [pc, #40]	; (800489c <iprintf+0x2c>)
 8004874:	b513      	push	{r0, r1, r4, lr}
 8004876:	681c      	ldr	r4, [r3, #0]
 8004878:	b124      	cbz	r4, 8004884 <iprintf+0x14>
 800487a:	69a3      	ldr	r3, [r4, #24]
 800487c:	b913      	cbnz	r3, 8004884 <iprintf+0x14>
 800487e:	4620      	mov	r0, r4
 8004880:	f001 ffaa 	bl	80067d8 <__sinit>
 8004884:	ab05      	add	r3, sp, #20
 8004886:	9a04      	ldr	r2, [sp, #16]
 8004888:	68a1      	ldr	r1, [r4, #8]
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	4620      	mov	r0, r4
 800488e:	f003 fb73 	bl	8007f78 <_vfiprintf_r>
 8004892:	b002      	add	sp, #8
 8004894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004898:	b004      	add	sp, #16
 800489a:	4770      	bx	lr
 800489c:	20000018 	.word	0x20000018

080048a0 <_puts_r>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	460e      	mov	r6, r1
 80048a4:	4605      	mov	r5, r0
 80048a6:	b118      	cbz	r0, 80048b0 <_puts_r+0x10>
 80048a8:	6983      	ldr	r3, [r0, #24]
 80048aa:	b90b      	cbnz	r3, 80048b0 <_puts_r+0x10>
 80048ac:	f001 ff94 	bl	80067d8 <__sinit>
 80048b0:	69ab      	ldr	r3, [r5, #24]
 80048b2:	68ac      	ldr	r4, [r5, #8]
 80048b4:	b913      	cbnz	r3, 80048bc <_puts_r+0x1c>
 80048b6:	4628      	mov	r0, r5
 80048b8:	f001 ff8e 	bl	80067d8 <__sinit>
 80048bc:	4b2c      	ldr	r3, [pc, #176]	; (8004970 <_puts_r+0xd0>)
 80048be:	429c      	cmp	r4, r3
 80048c0:	d120      	bne.n	8004904 <_puts_r+0x64>
 80048c2:	686c      	ldr	r4, [r5, #4]
 80048c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048c6:	07db      	lsls	r3, r3, #31
 80048c8:	d405      	bmi.n	80048d6 <_puts_r+0x36>
 80048ca:	89a3      	ldrh	r3, [r4, #12]
 80048cc:	0598      	lsls	r0, r3, #22
 80048ce:	d402      	bmi.n	80048d6 <_puts_r+0x36>
 80048d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048d2:	f002 fb92 	bl	8006ffa <__retarget_lock_acquire_recursive>
 80048d6:	89a3      	ldrh	r3, [r4, #12]
 80048d8:	0719      	lsls	r1, r3, #28
 80048da:	d51d      	bpl.n	8004918 <_puts_r+0x78>
 80048dc:	6923      	ldr	r3, [r4, #16]
 80048de:	b1db      	cbz	r3, 8004918 <_puts_r+0x78>
 80048e0:	3e01      	subs	r6, #1
 80048e2:	68a3      	ldr	r3, [r4, #8]
 80048e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048e8:	3b01      	subs	r3, #1
 80048ea:	60a3      	str	r3, [r4, #8]
 80048ec:	bb39      	cbnz	r1, 800493e <_puts_r+0x9e>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	da38      	bge.n	8004964 <_puts_r+0xc4>
 80048f2:	4622      	mov	r2, r4
 80048f4:	210a      	movs	r1, #10
 80048f6:	4628      	mov	r0, r5
 80048f8:	f000 ff1a 	bl	8005730 <__swbuf_r>
 80048fc:	3001      	adds	r0, #1
 80048fe:	d011      	beq.n	8004924 <_puts_r+0x84>
 8004900:	250a      	movs	r5, #10
 8004902:	e011      	b.n	8004928 <_puts_r+0x88>
 8004904:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <_puts_r+0xd4>)
 8004906:	429c      	cmp	r4, r3
 8004908:	d101      	bne.n	800490e <_puts_r+0x6e>
 800490a:	68ac      	ldr	r4, [r5, #8]
 800490c:	e7da      	b.n	80048c4 <_puts_r+0x24>
 800490e:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <_puts_r+0xd8>)
 8004910:	429c      	cmp	r4, r3
 8004912:	bf08      	it	eq
 8004914:	68ec      	ldreq	r4, [r5, #12]
 8004916:	e7d5      	b.n	80048c4 <_puts_r+0x24>
 8004918:	4621      	mov	r1, r4
 800491a:	4628      	mov	r0, r5
 800491c:	f000 ff5a 	bl	80057d4 <__swsetup_r>
 8004920:	2800      	cmp	r0, #0
 8004922:	d0dd      	beq.n	80048e0 <_puts_r+0x40>
 8004924:	f04f 35ff 	mov.w	r5, #4294967295
 8004928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800492a:	07da      	lsls	r2, r3, #31
 800492c:	d405      	bmi.n	800493a <_puts_r+0x9a>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	059b      	lsls	r3, r3, #22
 8004932:	d402      	bmi.n	800493a <_puts_r+0x9a>
 8004934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004936:	f002 fb61 	bl	8006ffc <__retarget_lock_release_recursive>
 800493a:	4628      	mov	r0, r5
 800493c:	bd70      	pop	{r4, r5, r6, pc}
 800493e:	2b00      	cmp	r3, #0
 8004940:	da04      	bge.n	800494c <_puts_r+0xac>
 8004942:	69a2      	ldr	r2, [r4, #24]
 8004944:	429a      	cmp	r2, r3
 8004946:	dc06      	bgt.n	8004956 <_puts_r+0xb6>
 8004948:	290a      	cmp	r1, #10
 800494a:	d004      	beq.n	8004956 <_puts_r+0xb6>
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	6022      	str	r2, [r4, #0]
 8004952:	7019      	strb	r1, [r3, #0]
 8004954:	e7c5      	b.n	80048e2 <_puts_r+0x42>
 8004956:	4622      	mov	r2, r4
 8004958:	4628      	mov	r0, r5
 800495a:	f000 fee9 	bl	8005730 <__swbuf_r>
 800495e:	3001      	adds	r0, #1
 8004960:	d1bf      	bne.n	80048e2 <_puts_r+0x42>
 8004962:	e7df      	b.n	8004924 <_puts_r+0x84>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	250a      	movs	r5, #10
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	6022      	str	r2, [r4, #0]
 800496c:	701d      	strb	r5, [r3, #0]
 800496e:	e7db      	b.n	8004928 <_puts_r+0x88>
 8004970:	08008a54 	.word	0x08008a54
 8004974:	08008a74 	.word	0x08008a74
 8004978:	08008a34 	.word	0x08008a34

0800497c <puts>:
 800497c:	4b02      	ldr	r3, [pc, #8]	; (8004988 <puts+0xc>)
 800497e:	4601      	mov	r1, r0
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	f7ff bf8d 	b.w	80048a0 <_puts_r>
 8004986:	bf00      	nop
 8004988:	20000018 	.word	0x20000018

0800498c <nanf>:
 800498c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004994 <nanf+0x8>
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	7fc00000 	.word	0x7fc00000

08004998 <siprintf>:
 8004998:	b40e      	push	{r1, r2, r3}
 800499a:	b500      	push	{lr}
 800499c:	b09c      	sub	sp, #112	; 0x70
 800499e:	ab1d      	add	r3, sp, #116	; 0x74
 80049a0:	9002      	str	r0, [sp, #8]
 80049a2:	9006      	str	r0, [sp, #24]
 80049a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049a8:	4809      	ldr	r0, [pc, #36]	; (80049d0 <siprintf+0x38>)
 80049aa:	9107      	str	r1, [sp, #28]
 80049ac:	9104      	str	r1, [sp, #16]
 80049ae:	4909      	ldr	r1, [pc, #36]	; (80049d4 <siprintf+0x3c>)
 80049b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80049b4:	9105      	str	r1, [sp, #20]
 80049b6:	6800      	ldr	r0, [r0, #0]
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	a902      	add	r1, sp, #8
 80049bc:	f003 f9b2 	bl	8007d24 <_svfiprintf_r>
 80049c0:	9b02      	ldr	r3, [sp, #8]
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	b01c      	add	sp, #112	; 0x70
 80049c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80049cc:	b003      	add	sp, #12
 80049ce:	4770      	bx	lr
 80049d0:	20000018 	.word	0x20000018
 80049d4:	ffff0208 	.word	0xffff0208

080049d8 <sulp>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	4604      	mov	r4, r0
 80049dc:	460d      	mov	r5, r1
 80049de:	ec45 4b10 	vmov	d0, r4, r5
 80049e2:	4616      	mov	r6, r2
 80049e4:	f002 fefc 	bl	80077e0 <__ulp>
 80049e8:	ec51 0b10 	vmov	r0, r1, d0
 80049ec:	b17e      	cbz	r6, 8004a0e <sulp+0x36>
 80049ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80049f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	dd09      	ble.n	8004a0e <sulp+0x36>
 80049fa:	051b      	lsls	r3, r3, #20
 80049fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004a00:	2400      	movs	r4, #0
 8004a02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004a06:	4622      	mov	r2, r4
 8004a08:	462b      	mov	r3, r5
 8004a0a:	f7fb fdf5 	bl	80005f8 <__aeabi_dmul>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}

08004a10 <_strtod_l>:
 8004a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a14:	ed2d 8b02 	vpush	{d8}
 8004a18:	b09d      	sub	sp, #116	; 0x74
 8004a1a:	461f      	mov	r7, r3
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	9318      	str	r3, [sp, #96]	; 0x60
 8004a20:	4ba2      	ldr	r3, [pc, #648]	; (8004cac <_strtod_l+0x29c>)
 8004a22:	9213      	str	r2, [sp, #76]	; 0x4c
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	4604      	mov	r4, r0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	4688      	mov	r8, r1
 8004a2e:	f7fb fbcf 	bl	80001d0 <strlen>
 8004a32:	f04f 0a00 	mov.w	sl, #0
 8004a36:	4605      	mov	r5, r0
 8004a38:	f04f 0b00 	mov.w	fp, #0
 8004a3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004a40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a42:	781a      	ldrb	r2, [r3, #0]
 8004a44:	2a2b      	cmp	r2, #43	; 0x2b
 8004a46:	d04e      	beq.n	8004ae6 <_strtod_l+0xd6>
 8004a48:	d83b      	bhi.n	8004ac2 <_strtod_l+0xb2>
 8004a4a:	2a0d      	cmp	r2, #13
 8004a4c:	d834      	bhi.n	8004ab8 <_strtod_l+0xa8>
 8004a4e:	2a08      	cmp	r2, #8
 8004a50:	d834      	bhi.n	8004abc <_strtod_l+0xac>
 8004a52:	2a00      	cmp	r2, #0
 8004a54:	d03e      	beq.n	8004ad4 <_strtod_l+0xc4>
 8004a56:	2300      	movs	r3, #0
 8004a58:	930a      	str	r3, [sp, #40]	; 0x28
 8004a5a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004a5c:	7833      	ldrb	r3, [r6, #0]
 8004a5e:	2b30      	cmp	r3, #48	; 0x30
 8004a60:	f040 80b0 	bne.w	8004bc4 <_strtod_l+0x1b4>
 8004a64:	7873      	ldrb	r3, [r6, #1]
 8004a66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004a6a:	2b58      	cmp	r3, #88	; 0x58
 8004a6c:	d168      	bne.n	8004b40 <_strtod_l+0x130>
 8004a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	ab18      	add	r3, sp, #96	; 0x60
 8004a74:	9702      	str	r7, [sp, #8]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	4a8d      	ldr	r2, [pc, #564]	; (8004cb0 <_strtod_l+0x2a0>)
 8004a7a:	ab19      	add	r3, sp, #100	; 0x64
 8004a7c:	a917      	add	r1, sp, #92	; 0x5c
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f001 ffae 	bl	80069e0 <__gethex>
 8004a84:	f010 0707 	ands.w	r7, r0, #7
 8004a88:	4605      	mov	r5, r0
 8004a8a:	d005      	beq.n	8004a98 <_strtod_l+0x88>
 8004a8c:	2f06      	cmp	r7, #6
 8004a8e:	d12c      	bne.n	8004aea <_strtod_l+0xda>
 8004a90:	3601      	adds	r6, #1
 8004a92:	2300      	movs	r3, #0
 8004a94:	9617      	str	r6, [sp, #92]	; 0x5c
 8004a96:	930a      	str	r3, [sp, #40]	; 0x28
 8004a98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f040 8590 	bne.w	80055c0 <_strtod_l+0xbb0>
 8004aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa2:	b1eb      	cbz	r3, 8004ae0 <_strtod_l+0xd0>
 8004aa4:	4652      	mov	r2, sl
 8004aa6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004aaa:	ec43 2b10 	vmov	d0, r2, r3
 8004aae:	b01d      	add	sp, #116	; 0x74
 8004ab0:	ecbd 8b02 	vpop	{d8}
 8004ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab8:	2a20      	cmp	r2, #32
 8004aba:	d1cc      	bne.n	8004a56 <_strtod_l+0x46>
 8004abc:	3301      	adds	r3, #1
 8004abe:	9317      	str	r3, [sp, #92]	; 0x5c
 8004ac0:	e7be      	b.n	8004a40 <_strtod_l+0x30>
 8004ac2:	2a2d      	cmp	r2, #45	; 0x2d
 8004ac4:	d1c7      	bne.n	8004a56 <_strtod_l+0x46>
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	920a      	str	r2, [sp, #40]	; 0x28
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1c2      	bne.n	8004a5a <_strtod_l+0x4a>
 8004ad4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ad6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f040 856e 	bne.w	80055bc <_strtod_l+0xbac>
 8004ae0:	4652      	mov	r2, sl
 8004ae2:	465b      	mov	r3, fp
 8004ae4:	e7e1      	b.n	8004aaa <_strtod_l+0x9a>
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	e7ee      	b.n	8004ac8 <_strtod_l+0xb8>
 8004aea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004aec:	b13a      	cbz	r2, 8004afe <_strtod_l+0xee>
 8004aee:	2135      	movs	r1, #53	; 0x35
 8004af0:	a81a      	add	r0, sp, #104	; 0x68
 8004af2:	f002 ff80 	bl	80079f6 <__copybits>
 8004af6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004af8:	4620      	mov	r0, r4
 8004afa:	f002 fb3f 	bl	800717c <_Bfree>
 8004afe:	3f01      	subs	r7, #1
 8004b00:	2f04      	cmp	r7, #4
 8004b02:	d806      	bhi.n	8004b12 <_strtod_l+0x102>
 8004b04:	e8df f007 	tbb	[pc, r7]
 8004b08:	1714030a 	.word	0x1714030a
 8004b0c:	0a          	.byte	0x0a
 8004b0d:	00          	.byte	0x00
 8004b0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004b12:	0728      	lsls	r0, r5, #28
 8004b14:	d5c0      	bpl.n	8004a98 <_strtod_l+0x88>
 8004b16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004b1a:	e7bd      	b.n	8004a98 <_strtod_l+0x88>
 8004b1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004b20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004b22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004b2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004b2e:	e7f0      	b.n	8004b12 <_strtod_l+0x102>
 8004b30:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004cb4 <_strtod_l+0x2a4>
 8004b34:	e7ed      	b.n	8004b12 <_strtod_l+0x102>
 8004b36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004b3a:	f04f 3aff 	mov.w	sl, #4294967295
 8004b3e:	e7e8      	b.n	8004b12 <_strtod_l+0x102>
 8004b40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b46:	785b      	ldrb	r3, [r3, #1]
 8004b48:	2b30      	cmp	r3, #48	; 0x30
 8004b4a:	d0f9      	beq.n	8004b40 <_strtod_l+0x130>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0a3      	beq.n	8004a98 <_strtod_l+0x88>
 8004b50:	2301      	movs	r3, #1
 8004b52:	f04f 0900 	mov.w	r9, #0
 8004b56:	9304      	str	r3, [sp, #16]
 8004b58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b5a:	9308      	str	r3, [sp, #32]
 8004b5c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b60:	464f      	mov	r7, r9
 8004b62:	220a      	movs	r2, #10
 8004b64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004b66:	7806      	ldrb	r6, [r0, #0]
 8004b68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004b6c:	b2d9      	uxtb	r1, r3
 8004b6e:	2909      	cmp	r1, #9
 8004b70:	d92a      	bls.n	8004bc8 <_strtod_l+0x1b8>
 8004b72:	9905      	ldr	r1, [sp, #20]
 8004b74:	462a      	mov	r2, r5
 8004b76:	f003 fb8a 	bl	800828e <strncmp>
 8004b7a:	b398      	cbz	r0, 8004be4 <_strtod_l+0x1d4>
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	4632      	mov	r2, r6
 8004b80:	463d      	mov	r5, r7
 8004b82:	9005      	str	r0, [sp, #20]
 8004b84:	4603      	mov	r3, r0
 8004b86:	2a65      	cmp	r2, #101	; 0x65
 8004b88:	d001      	beq.n	8004b8e <_strtod_l+0x17e>
 8004b8a:	2a45      	cmp	r2, #69	; 0x45
 8004b8c:	d118      	bne.n	8004bc0 <_strtod_l+0x1b0>
 8004b8e:	b91d      	cbnz	r5, 8004b98 <_strtod_l+0x188>
 8004b90:	9a04      	ldr	r2, [sp, #16]
 8004b92:	4302      	orrs	r2, r0
 8004b94:	d09e      	beq.n	8004ad4 <_strtod_l+0xc4>
 8004b96:	2500      	movs	r5, #0
 8004b98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004b9c:	f108 0201 	add.w	r2, r8, #1
 8004ba0:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ba2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004ba6:	2a2b      	cmp	r2, #43	; 0x2b
 8004ba8:	d075      	beq.n	8004c96 <_strtod_l+0x286>
 8004baa:	2a2d      	cmp	r2, #45	; 0x2d
 8004bac:	d07b      	beq.n	8004ca6 <_strtod_l+0x296>
 8004bae:	f04f 0c00 	mov.w	ip, #0
 8004bb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004bb6:	2909      	cmp	r1, #9
 8004bb8:	f240 8082 	bls.w	8004cc0 <_strtod_l+0x2b0>
 8004bbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004bc0:	2600      	movs	r6, #0
 8004bc2:	e09d      	b.n	8004d00 <_strtod_l+0x2f0>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e7c4      	b.n	8004b52 <_strtod_l+0x142>
 8004bc8:	2f08      	cmp	r7, #8
 8004bca:	bfd8      	it	le
 8004bcc:	9907      	ldrle	r1, [sp, #28]
 8004bce:	f100 0001 	add.w	r0, r0, #1
 8004bd2:	bfda      	itte	le
 8004bd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8004bd8:	9307      	strle	r3, [sp, #28]
 8004bda:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004bde:	3701      	adds	r7, #1
 8004be0:	9017      	str	r0, [sp, #92]	; 0x5c
 8004be2:	e7bf      	b.n	8004b64 <_strtod_l+0x154>
 8004be4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004be6:	195a      	adds	r2, r3, r5
 8004be8:	9217      	str	r2, [sp, #92]	; 0x5c
 8004bea:	5d5a      	ldrb	r2, [r3, r5]
 8004bec:	2f00      	cmp	r7, #0
 8004bee:	d037      	beq.n	8004c60 <_strtod_l+0x250>
 8004bf0:	9005      	str	r0, [sp, #20]
 8004bf2:	463d      	mov	r5, r7
 8004bf4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004bf8:	2b09      	cmp	r3, #9
 8004bfa:	d912      	bls.n	8004c22 <_strtod_l+0x212>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e7c2      	b.n	8004b86 <_strtod_l+0x176>
 8004c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	9217      	str	r2, [sp, #92]	; 0x5c
 8004c06:	785a      	ldrb	r2, [r3, #1]
 8004c08:	3001      	adds	r0, #1
 8004c0a:	2a30      	cmp	r2, #48	; 0x30
 8004c0c:	d0f8      	beq.n	8004c00 <_strtod_l+0x1f0>
 8004c0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	f200 84d9 	bhi.w	80055ca <_strtod_l+0xbba>
 8004c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c1a:	9005      	str	r0, [sp, #20]
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	9308      	str	r3, [sp, #32]
 8004c20:	4605      	mov	r5, r0
 8004c22:	3a30      	subs	r2, #48	; 0x30
 8004c24:	f100 0301 	add.w	r3, r0, #1
 8004c28:	d014      	beq.n	8004c54 <_strtod_l+0x244>
 8004c2a:	9905      	ldr	r1, [sp, #20]
 8004c2c:	4419      	add	r1, r3
 8004c2e:	9105      	str	r1, [sp, #20]
 8004c30:	462b      	mov	r3, r5
 8004c32:	eb00 0e05 	add.w	lr, r0, r5
 8004c36:	210a      	movs	r1, #10
 8004c38:	4573      	cmp	r3, lr
 8004c3a:	d113      	bne.n	8004c64 <_strtod_l+0x254>
 8004c3c:	182b      	adds	r3, r5, r0
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	f105 0501 	add.w	r5, r5, #1
 8004c44:	4405      	add	r5, r0
 8004c46:	dc1c      	bgt.n	8004c82 <_strtod_l+0x272>
 8004c48:	9907      	ldr	r1, [sp, #28]
 8004c4a:	230a      	movs	r3, #10
 8004c4c:	fb03 2301 	mla	r3, r3, r1, r2
 8004c50:	9307      	str	r3, [sp, #28]
 8004c52:	2300      	movs	r3, #0
 8004c54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004c56:	1c51      	adds	r1, r2, #1
 8004c58:	9117      	str	r1, [sp, #92]	; 0x5c
 8004c5a:	7852      	ldrb	r2, [r2, #1]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	e7c9      	b.n	8004bf4 <_strtod_l+0x1e4>
 8004c60:	4638      	mov	r0, r7
 8004c62:	e7d2      	b.n	8004c0a <_strtod_l+0x1fa>
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	dc04      	bgt.n	8004c72 <_strtod_l+0x262>
 8004c68:	9e07      	ldr	r6, [sp, #28]
 8004c6a:	434e      	muls	r6, r1
 8004c6c:	9607      	str	r6, [sp, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	e7e2      	b.n	8004c38 <_strtod_l+0x228>
 8004c72:	f103 0c01 	add.w	ip, r3, #1
 8004c76:	f1bc 0f10 	cmp.w	ip, #16
 8004c7a:	bfd8      	it	le
 8004c7c:	fb01 f909 	mulle.w	r9, r1, r9
 8004c80:	e7f5      	b.n	8004c6e <_strtod_l+0x25e>
 8004c82:	2d10      	cmp	r5, #16
 8004c84:	bfdc      	itt	le
 8004c86:	230a      	movle	r3, #10
 8004c88:	fb03 2909 	mlale	r9, r3, r9, r2
 8004c8c:	e7e1      	b.n	8004c52 <_strtod_l+0x242>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9305      	str	r3, [sp, #20]
 8004c92:	2301      	movs	r3, #1
 8004c94:	e77c      	b.n	8004b90 <_strtod_l+0x180>
 8004c96:	f04f 0c00 	mov.w	ip, #0
 8004c9a:	f108 0202 	add.w	r2, r8, #2
 8004c9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ca0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004ca4:	e785      	b.n	8004bb2 <_strtod_l+0x1a2>
 8004ca6:	f04f 0c01 	mov.w	ip, #1
 8004caa:	e7f6      	b.n	8004c9a <_strtod_l+0x28a>
 8004cac:	08008afc 	.word	0x08008afc
 8004cb0:	08008850 	.word	0x08008850
 8004cb4:	7ff00000 	.word	0x7ff00000
 8004cb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004cba:	1c51      	adds	r1, r2, #1
 8004cbc:	9117      	str	r1, [sp, #92]	; 0x5c
 8004cbe:	7852      	ldrb	r2, [r2, #1]
 8004cc0:	2a30      	cmp	r2, #48	; 0x30
 8004cc2:	d0f9      	beq.n	8004cb8 <_strtod_l+0x2a8>
 8004cc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004cc8:	2908      	cmp	r1, #8
 8004cca:	f63f af79 	bhi.w	8004bc0 <_strtod_l+0x1b0>
 8004cce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004cd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004cd4:	9206      	str	r2, [sp, #24]
 8004cd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004cd8:	1c51      	adds	r1, r2, #1
 8004cda:	9117      	str	r1, [sp, #92]	; 0x5c
 8004cdc:	7852      	ldrb	r2, [r2, #1]
 8004cde:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004ce2:	2e09      	cmp	r6, #9
 8004ce4:	d937      	bls.n	8004d56 <_strtod_l+0x346>
 8004ce6:	9e06      	ldr	r6, [sp, #24]
 8004ce8:	1b89      	subs	r1, r1, r6
 8004cea:	2908      	cmp	r1, #8
 8004cec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004cf0:	dc02      	bgt.n	8004cf8 <_strtod_l+0x2e8>
 8004cf2:	4576      	cmp	r6, lr
 8004cf4:	bfa8      	it	ge
 8004cf6:	4676      	movge	r6, lr
 8004cf8:	f1bc 0f00 	cmp.w	ip, #0
 8004cfc:	d000      	beq.n	8004d00 <_strtod_l+0x2f0>
 8004cfe:	4276      	negs	r6, r6
 8004d00:	2d00      	cmp	r5, #0
 8004d02:	d14d      	bne.n	8004da0 <_strtod_l+0x390>
 8004d04:	9904      	ldr	r1, [sp, #16]
 8004d06:	4301      	orrs	r1, r0
 8004d08:	f47f aec6 	bne.w	8004a98 <_strtod_l+0x88>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f47f aee1 	bne.w	8004ad4 <_strtod_l+0xc4>
 8004d12:	2a69      	cmp	r2, #105	; 0x69
 8004d14:	d027      	beq.n	8004d66 <_strtod_l+0x356>
 8004d16:	dc24      	bgt.n	8004d62 <_strtod_l+0x352>
 8004d18:	2a49      	cmp	r2, #73	; 0x49
 8004d1a:	d024      	beq.n	8004d66 <_strtod_l+0x356>
 8004d1c:	2a4e      	cmp	r2, #78	; 0x4e
 8004d1e:	f47f aed9 	bne.w	8004ad4 <_strtod_l+0xc4>
 8004d22:	499f      	ldr	r1, [pc, #636]	; (8004fa0 <_strtod_l+0x590>)
 8004d24:	a817      	add	r0, sp, #92	; 0x5c
 8004d26:	f002 f8b3 	bl	8006e90 <__match>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	f43f aed2 	beq.w	8004ad4 <_strtod_l+0xc4>
 8004d30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b28      	cmp	r3, #40	; 0x28
 8004d36:	d12d      	bne.n	8004d94 <_strtod_l+0x384>
 8004d38:	499a      	ldr	r1, [pc, #616]	; (8004fa4 <_strtod_l+0x594>)
 8004d3a:	aa1a      	add	r2, sp, #104	; 0x68
 8004d3c:	a817      	add	r0, sp, #92	; 0x5c
 8004d3e:	f002 f8bb 	bl	8006eb8 <__hexnan>
 8004d42:	2805      	cmp	r0, #5
 8004d44:	d126      	bne.n	8004d94 <_strtod_l+0x384>
 8004d46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004d4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004d50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004d54:	e6a0      	b.n	8004a98 <_strtod_l+0x88>
 8004d56:	210a      	movs	r1, #10
 8004d58:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004d5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004d60:	e7b9      	b.n	8004cd6 <_strtod_l+0x2c6>
 8004d62:	2a6e      	cmp	r2, #110	; 0x6e
 8004d64:	e7db      	b.n	8004d1e <_strtod_l+0x30e>
 8004d66:	4990      	ldr	r1, [pc, #576]	; (8004fa8 <_strtod_l+0x598>)
 8004d68:	a817      	add	r0, sp, #92	; 0x5c
 8004d6a:	f002 f891 	bl	8006e90 <__match>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	f43f aeb0 	beq.w	8004ad4 <_strtod_l+0xc4>
 8004d74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d76:	498d      	ldr	r1, [pc, #564]	; (8004fac <_strtod_l+0x59c>)
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	a817      	add	r0, sp, #92	; 0x5c
 8004d7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8004d7e:	f002 f887 	bl	8006e90 <__match>
 8004d82:	b910      	cbnz	r0, 8004d8a <_strtod_l+0x37a>
 8004d84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d86:	3301      	adds	r3, #1
 8004d88:	9317      	str	r3, [sp, #92]	; 0x5c
 8004d8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8004fbc <_strtod_l+0x5ac>
 8004d8e:	f04f 0a00 	mov.w	sl, #0
 8004d92:	e681      	b.n	8004a98 <_strtod_l+0x88>
 8004d94:	4886      	ldr	r0, [pc, #536]	; (8004fb0 <_strtod_l+0x5a0>)
 8004d96:	f003 fa1f 	bl	80081d8 <nan>
 8004d9a:	ec5b ab10 	vmov	sl, fp, d0
 8004d9e:	e67b      	b.n	8004a98 <_strtod_l+0x88>
 8004da0:	9b05      	ldr	r3, [sp, #20]
 8004da2:	9807      	ldr	r0, [sp, #28]
 8004da4:	1af3      	subs	r3, r6, r3
 8004da6:	2f00      	cmp	r7, #0
 8004da8:	bf08      	it	eq
 8004daa:	462f      	moveq	r7, r5
 8004dac:	2d10      	cmp	r5, #16
 8004dae:	9306      	str	r3, [sp, #24]
 8004db0:	46a8      	mov	r8, r5
 8004db2:	bfa8      	it	ge
 8004db4:	f04f 0810 	movge.w	r8, #16
 8004db8:	f7fb fba4 	bl	8000504 <__aeabi_ui2d>
 8004dbc:	2d09      	cmp	r5, #9
 8004dbe:	4682      	mov	sl, r0
 8004dc0:	468b      	mov	fp, r1
 8004dc2:	dd13      	ble.n	8004dec <_strtod_l+0x3dc>
 8004dc4:	4b7b      	ldr	r3, [pc, #492]	; (8004fb4 <_strtod_l+0x5a4>)
 8004dc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004dca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004dce:	f7fb fc13 	bl	80005f8 <__aeabi_dmul>
 8004dd2:	4682      	mov	sl, r0
 8004dd4:	4648      	mov	r0, r9
 8004dd6:	468b      	mov	fp, r1
 8004dd8:	f7fb fb94 	bl	8000504 <__aeabi_ui2d>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4650      	mov	r0, sl
 8004de2:	4659      	mov	r1, fp
 8004de4:	f7fb fa52 	bl	800028c <__adddf3>
 8004de8:	4682      	mov	sl, r0
 8004dea:	468b      	mov	fp, r1
 8004dec:	2d0f      	cmp	r5, #15
 8004dee:	dc38      	bgt.n	8004e62 <_strtod_l+0x452>
 8004df0:	9b06      	ldr	r3, [sp, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f43f ae50 	beq.w	8004a98 <_strtod_l+0x88>
 8004df8:	dd24      	ble.n	8004e44 <_strtod_l+0x434>
 8004dfa:	2b16      	cmp	r3, #22
 8004dfc:	dc0b      	bgt.n	8004e16 <_strtod_l+0x406>
 8004dfe:	496d      	ldr	r1, [pc, #436]	; (8004fb4 <_strtod_l+0x5a4>)
 8004e00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e08:	4652      	mov	r2, sl
 8004e0a:	465b      	mov	r3, fp
 8004e0c:	f7fb fbf4 	bl	80005f8 <__aeabi_dmul>
 8004e10:	4682      	mov	sl, r0
 8004e12:	468b      	mov	fp, r1
 8004e14:	e640      	b.n	8004a98 <_strtod_l+0x88>
 8004e16:	9a06      	ldr	r2, [sp, #24]
 8004e18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	db20      	blt.n	8004e62 <_strtod_l+0x452>
 8004e20:	4c64      	ldr	r4, [pc, #400]	; (8004fb4 <_strtod_l+0x5a4>)
 8004e22:	f1c5 050f 	rsb	r5, r5, #15
 8004e26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004e2a:	4652      	mov	r2, sl
 8004e2c:	465b      	mov	r3, fp
 8004e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e32:	f7fb fbe1 	bl	80005f8 <__aeabi_dmul>
 8004e36:	9b06      	ldr	r3, [sp, #24]
 8004e38:	1b5d      	subs	r5, r3, r5
 8004e3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004e3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004e42:	e7e3      	b.n	8004e0c <_strtod_l+0x3fc>
 8004e44:	9b06      	ldr	r3, [sp, #24]
 8004e46:	3316      	adds	r3, #22
 8004e48:	db0b      	blt.n	8004e62 <_strtod_l+0x452>
 8004e4a:	9b05      	ldr	r3, [sp, #20]
 8004e4c:	1b9e      	subs	r6, r3, r6
 8004e4e:	4b59      	ldr	r3, [pc, #356]	; (8004fb4 <_strtod_l+0x5a4>)
 8004e50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004e54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e58:	4650      	mov	r0, sl
 8004e5a:	4659      	mov	r1, fp
 8004e5c:	f7fb fcf6 	bl	800084c <__aeabi_ddiv>
 8004e60:	e7d6      	b.n	8004e10 <_strtod_l+0x400>
 8004e62:	9b06      	ldr	r3, [sp, #24]
 8004e64:	eba5 0808 	sub.w	r8, r5, r8
 8004e68:	4498      	add	r8, r3
 8004e6a:	f1b8 0f00 	cmp.w	r8, #0
 8004e6e:	dd74      	ble.n	8004f5a <_strtod_l+0x54a>
 8004e70:	f018 030f 	ands.w	r3, r8, #15
 8004e74:	d00a      	beq.n	8004e8c <_strtod_l+0x47c>
 8004e76:	494f      	ldr	r1, [pc, #316]	; (8004fb4 <_strtod_l+0x5a4>)
 8004e78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004e7c:	4652      	mov	r2, sl
 8004e7e:	465b      	mov	r3, fp
 8004e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e84:	f7fb fbb8 	bl	80005f8 <__aeabi_dmul>
 8004e88:	4682      	mov	sl, r0
 8004e8a:	468b      	mov	fp, r1
 8004e8c:	f038 080f 	bics.w	r8, r8, #15
 8004e90:	d04f      	beq.n	8004f32 <_strtod_l+0x522>
 8004e92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004e96:	dd22      	ble.n	8004ede <_strtod_l+0x4ce>
 8004e98:	2500      	movs	r5, #0
 8004e9a:	462e      	mov	r6, r5
 8004e9c:	9507      	str	r5, [sp, #28]
 8004e9e:	9505      	str	r5, [sp, #20]
 8004ea0:	2322      	movs	r3, #34	; 0x22
 8004ea2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004fbc <_strtod_l+0x5ac>
 8004ea6:	6023      	str	r3, [r4, #0]
 8004ea8:	f04f 0a00 	mov.w	sl, #0
 8004eac:	9b07      	ldr	r3, [sp, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f43f adf2 	beq.w	8004a98 <_strtod_l+0x88>
 8004eb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f002 f960 	bl	800717c <_Bfree>
 8004ebc:	9905      	ldr	r1, [sp, #20]
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f002 f95c 	bl	800717c <_Bfree>
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f002 f958 	bl	800717c <_Bfree>
 8004ecc:	9907      	ldr	r1, [sp, #28]
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f002 f954 	bl	800717c <_Bfree>
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f002 f950 	bl	800717c <_Bfree>
 8004edc:	e5dc      	b.n	8004a98 <_strtod_l+0x88>
 8004ede:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <_strtod_l+0x5a8>)
 8004ee0:	9304      	str	r3, [sp, #16]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004ee8:	4650      	mov	r0, sl
 8004eea:	4659      	mov	r1, fp
 8004eec:	4699      	mov	r9, r3
 8004eee:	f1b8 0f01 	cmp.w	r8, #1
 8004ef2:	dc21      	bgt.n	8004f38 <_strtod_l+0x528>
 8004ef4:	b10b      	cbz	r3, 8004efa <_strtod_l+0x4ea>
 8004ef6:	4682      	mov	sl, r0
 8004ef8:	468b      	mov	fp, r1
 8004efa:	4b2f      	ldr	r3, [pc, #188]	; (8004fb8 <_strtod_l+0x5a8>)
 8004efc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004f00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004f04:	4652      	mov	r2, sl
 8004f06:	465b      	mov	r3, fp
 8004f08:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004f0c:	f7fb fb74 	bl	80005f8 <__aeabi_dmul>
 8004f10:	4b2a      	ldr	r3, [pc, #168]	; (8004fbc <_strtod_l+0x5ac>)
 8004f12:	460a      	mov	r2, r1
 8004f14:	400b      	ands	r3, r1
 8004f16:	492a      	ldr	r1, [pc, #168]	; (8004fc0 <_strtod_l+0x5b0>)
 8004f18:	428b      	cmp	r3, r1
 8004f1a:	4682      	mov	sl, r0
 8004f1c:	d8bc      	bhi.n	8004e98 <_strtod_l+0x488>
 8004f1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004f22:	428b      	cmp	r3, r1
 8004f24:	bf86      	itte	hi
 8004f26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004fc4 <_strtod_l+0x5b4>
 8004f2a:	f04f 3aff 	movhi.w	sl, #4294967295
 8004f2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004f32:	2300      	movs	r3, #0
 8004f34:	9304      	str	r3, [sp, #16]
 8004f36:	e084      	b.n	8005042 <_strtod_l+0x632>
 8004f38:	f018 0f01 	tst.w	r8, #1
 8004f3c:	d005      	beq.n	8004f4a <_strtod_l+0x53a>
 8004f3e:	9b04      	ldr	r3, [sp, #16]
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	f7fb fb58 	bl	80005f8 <__aeabi_dmul>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	9a04      	ldr	r2, [sp, #16]
 8004f4c:	3208      	adds	r2, #8
 8004f4e:	f109 0901 	add.w	r9, r9, #1
 8004f52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004f56:	9204      	str	r2, [sp, #16]
 8004f58:	e7c9      	b.n	8004eee <_strtod_l+0x4de>
 8004f5a:	d0ea      	beq.n	8004f32 <_strtod_l+0x522>
 8004f5c:	f1c8 0800 	rsb	r8, r8, #0
 8004f60:	f018 020f 	ands.w	r2, r8, #15
 8004f64:	d00a      	beq.n	8004f7c <_strtod_l+0x56c>
 8004f66:	4b13      	ldr	r3, [pc, #76]	; (8004fb4 <_strtod_l+0x5a4>)
 8004f68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f6c:	4650      	mov	r0, sl
 8004f6e:	4659      	mov	r1, fp
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	f7fb fc6a 	bl	800084c <__aeabi_ddiv>
 8004f78:	4682      	mov	sl, r0
 8004f7a:	468b      	mov	fp, r1
 8004f7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004f80:	d0d7      	beq.n	8004f32 <_strtod_l+0x522>
 8004f82:	f1b8 0f1f 	cmp.w	r8, #31
 8004f86:	dd1f      	ble.n	8004fc8 <_strtod_l+0x5b8>
 8004f88:	2500      	movs	r5, #0
 8004f8a:	462e      	mov	r6, r5
 8004f8c:	9507      	str	r5, [sp, #28]
 8004f8e:	9505      	str	r5, [sp, #20]
 8004f90:	2322      	movs	r3, #34	; 0x22
 8004f92:	f04f 0a00 	mov.w	sl, #0
 8004f96:	f04f 0b00 	mov.w	fp, #0
 8004f9a:	6023      	str	r3, [r4, #0]
 8004f9c:	e786      	b.n	8004eac <_strtod_l+0x49c>
 8004f9e:	bf00      	nop
 8004fa0:	08008821 	.word	0x08008821
 8004fa4:	08008864 	.word	0x08008864
 8004fa8:	08008819 	.word	0x08008819
 8004fac:	080089a4 	.word	0x080089a4
 8004fb0:	08008cb8 	.word	0x08008cb8
 8004fb4:	08008b98 	.word	0x08008b98
 8004fb8:	08008b70 	.word	0x08008b70
 8004fbc:	7ff00000 	.word	0x7ff00000
 8004fc0:	7ca00000 	.word	0x7ca00000
 8004fc4:	7fefffff 	.word	0x7fefffff
 8004fc8:	f018 0310 	ands.w	r3, r8, #16
 8004fcc:	bf18      	it	ne
 8004fce:	236a      	movne	r3, #106	; 0x6a
 8004fd0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005380 <_strtod_l+0x970>
 8004fd4:	9304      	str	r3, [sp, #16]
 8004fd6:	4650      	mov	r0, sl
 8004fd8:	4659      	mov	r1, fp
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f018 0f01 	tst.w	r8, #1
 8004fe0:	d004      	beq.n	8004fec <_strtod_l+0x5dc>
 8004fe2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004fe6:	f7fb fb07 	bl	80005f8 <__aeabi_dmul>
 8004fea:	2301      	movs	r3, #1
 8004fec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004ff0:	f109 0908 	add.w	r9, r9, #8
 8004ff4:	d1f2      	bne.n	8004fdc <_strtod_l+0x5cc>
 8004ff6:	b10b      	cbz	r3, 8004ffc <_strtod_l+0x5ec>
 8004ff8:	4682      	mov	sl, r0
 8004ffa:	468b      	mov	fp, r1
 8004ffc:	9b04      	ldr	r3, [sp, #16]
 8004ffe:	b1c3      	cbz	r3, 8005032 <_strtod_l+0x622>
 8005000:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005004:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005008:	2b00      	cmp	r3, #0
 800500a:	4659      	mov	r1, fp
 800500c:	dd11      	ble.n	8005032 <_strtod_l+0x622>
 800500e:	2b1f      	cmp	r3, #31
 8005010:	f340 8124 	ble.w	800525c <_strtod_l+0x84c>
 8005014:	2b34      	cmp	r3, #52	; 0x34
 8005016:	bfde      	ittt	le
 8005018:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800501c:	f04f 33ff 	movle.w	r3, #4294967295
 8005020:	fa03 f202 	lslle.w	r2, r3, r2
 8005024:	f04f 0a00 	mov.w	sl, #0
 8005028:	bfcc      	ite	gt
 800502a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800502e:	ea02 0b01 	andle.w	fp, r2, r1
 8005032:	2200      	movs	r2, #0
 8005034:	2300      	movs	r3, #0
 8005036:	4650      	mov	r0, sl
 8005038:	4659      	mov	r1, fp
 800503a:	f7fb fd45 	bl	8000ac8 <__aeabi_dcmpeq>
 800503e:	2800      	cmp	r0, #0
 8005040:	d1a2      	bne.n	8004f88 <_strtod_l+0x578>
 8005042:	9b07      	ldr	r3, [sp, #28]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	9908      	ldr	r1, [sp, #32]
 8005048:	462b      	mov	r3, r5
 800504a:	463a      	mov	r2, r7
 800504c:	4620      	mov	r0, r4
 800504e:	f002 f8fd 	bl	800724c <__s2b>
 8005052:	9007      	str	r0, [sp, #28]
 8005054:	2800      	cmp	r0, #0
 8005056:	f43f af1f 	beq.w	8004e98 <_strtod_l+0x488>
 800505a:	9b05      	ldr	r3, [sp, #20]
 800505c:	1b9e      	subs	r6, r3, r6
 800505e:	9b06      	ldr	r3, [sp, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	bfb4      	ite	lt
 8005064:	4633      	movlt	r3, r6
 8005066:	2300      	movge	r3, #0
 8005068:	930c      	str	r3, [sp, #48]	; 0x30
 800506a:	9b06      	ldr	r3, [sp, #24]
 800506c:	2500      	movs	r5, #0
 800506e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005072:	9312      	str	r3, [sp, #72]	; 0x48
 8005074:	462e      	mov	r6, r5
 8005076:	9b07      	ldr	r3, [sp, #28]
 8005078:	4620      	mov	r0, r4
 800507a:	6859      	ldr	r1, [r3, #4]
 800507c:	f002 f83e 	bl	80070fc <_Balloc>
 8005080:	9005      	str	r0, [sp, #20]
 8005082:	2800      	cmp	r0, #0
 8005084:	f43f af0c 	beq.w	8004ea0 <_strtod_l+0x490>
 8005088:	9b07      	ldr	r3, [sp, #28]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	3202      	adds	r2, #2
 800508e:	f103 010c 	add.w	r1, r3, #12
 8005092:	0092      	lsls	r2, r2, #2
 8005094:	300c      	adds	r0, #12
 8005096:	f7fe fd5b 	bl	8003b50 <memcpy>
 800509a:	ec4b ab10 	vmov	d0, sl, fp
 800509e:	aa1a      	add	r2, sp, #104	; 0x68
 80050a0:	a919      	add	r1, sp, #100	; 0x64
 80050a2:	4620      	mov	r0, r4
 80050a4:	f002 fc18 	bl	80078d8 <__d2b>
 80050a8:	ec4b ab18 	vmov	d8, sl, fp
 80050ac:	9018      	str	r0, [sp, #96]	; 0x60
 80050ae:	2800      	cmp	r0, #0
 80050b0:	f43f aef6 	beq.w	8004ea0 <_strtod_l+0x490>
 80050b4:	2101      	movs	r1, #1
 80050b6:	4620      	mov	r0, r4
 80050b8:	f002 f962 	bl	8007380 <__i2b>
 80050bc:	4606      	mov	r6, r0
 80050be:	2800      	cmp	r0, #0
 80050c0:	f43f aeee 	beq.w	8004ea0 <_strtod_l+0x490>
 80050c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050c6:	9904      	ldr	r1, [sp, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bfab      	itete	ge
 80050cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80050ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80050d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80050d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80050d6:	bfac      	ite	ge
 80050d8:	eb03 0902 	addge.w	r9, r3, r2
 80050dc:	1ad7      	sublt	r7, r2, r3
 80050de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80050e0:	eba3 0801 	sub.w	r8, r3, r1
 80050e4:	4490      	add	r8, r2
 80050e6:	4ba1      	ldr	r3, [pc, #644]	; (800536c <_strtod_l+0x95c>)
 80050e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80050ec:	4598      	cmp	r8, r3
 80050ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80050f2:	f280 80c7 	bge.w	8005284 <_strtod_l+0x874>
 80050f6:	eba3 0308 	sub.w	r3, r3, r8
 80050fa:	2b1f      	cmp	r3, #31
 80050fc:	eba2 0203 	sub.w	r2, r2, r3
 8005100:	f04f 0101 	mov.w	r1, #1
 8005104:	f300 80b1 	bgt.w	800526a <_strtod_l+0x85a>
 8005108:	fa01 f303 	lsl.w	r3, r1, r3
 800510c:	930d      	str	r3, [sp, #52]	; 0x34
 800510e:	2300      	movs	r3, #0
 8005110:	9308      	str	r3, [sp, #32]
 8005112:	eb09 0802 	add.w	r8, r9, r2
 8005116:	9b04      	ldr	r3, [sp, #16]
 8005118:	45c1      	cmp	r9, r8
 800511a:	4417      	add	r7, r2
 800511c:	441f      	add	r7, r3
 800511e:	464b      	mov	r3, r9
 8005120:	bfa8      	it	ge
 8005122:	4643      	movge	r3, r8
 8005124:	42bb      	cmp	r3, r7
 8005126:	bfa8      	it	ge
 8005128:	463b      	movge	r3, r7
 800512a:	2b00      	cmp	r3, #0
 800512c:	bfc2      	ittt	gt
 800512e:	eba8 0803 	subgt.w	r8, r8, r3
 8005132:	1aff      	subgt	r7, r7, r3
 8005134:	eba9 0903 	subgt.w	r9, r9, r3
 8005138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800513a:	2b00      	cmp	r3, #0
 800513c:	dd17      	ble.n	800516e <_strtod_l+0x75e>
 800513e:	4631      	mov	r1, r6
 8005140:	461a      	mov	r2, r3
 8005142:	4620      	mov	r0, r4
 8005144:	f002 f9dc 	bl	8007500 <__pow5mult>
 8005148:	4606      	mov	r6, r0
 800514a:	2800      	cmp	r0, #0
 800514c:	f43f aea8 	beq.w	8004ea0 <_strtod_l+0x490>
 8005150:	4601      	mov	r1, r0
 8005152:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005154:	4620      	mov	r0, r4
 8005156:	f002 f929 	bl	80073ac <__multiply>
 800515a:	900b      	str	r0, [sp, #44]	; 0x2c
 800515c:	2800      	cmp	r0, #0
 800515e:	f43f ae9f 	beq.w	8004ea0 <_strtod_l+0x490>
 8005162:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005164:	4620      	mov	r0, r4
 8005166:	f002 f809 	bl	800717c <_Bfree>
 800516a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800516c:	9318      	str	r3, [sp, #96]	; 0x60
 800516e:	f1b8 0f00 	cmp.w	r8, #0
 8005172:	f300 808c 	bgt.w	800528e <_strtod_l+0x87e>
 8005176:	9b06      	ldr	r3, [sp, #24]
 8005178:	2b00      	cmp	r3, #0
 800517a:	dd08      	ble.n	800518e <_strtod_l+0x77e>
 800517c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800517e:	9905      	ldr	r1, [sp, #20]
 8005180:	4620      	mov	r0, r4
 8005182:	f002 f9bd 	bl	8007500 <__pow5mult>
 8005186:	9005      	str	r0, [sp, #20]
 8005188:	2800      	cmp	r0, #0
 800518a:	f43f ae89 	beq.w	8004ea0 <_strtod_l+0x490>
 800518e:	2f00      	cmp	r7, #0
 8005190:	dd08      	ble.n	80051a4 <_strtod_l+0x794>
 8005192:	9905      	ldr	r1, [sp, #20]
 8005194:	463a      	mov	r2, r7
 8005196:	4620      	mov	r0, r4
 8005198:	f002 fa0c 	bl	80075b4 <__lshift>
 800519c:	9005      	str	r0, [sp, #20]
 800519e:	2800      	cmp	r0, #0
 80051a0:	f43f ae7e 	beq.w	8004ea0 <_strtod_l+0x490>
 80051a4:	f1b9 0f00 	cmp.w	r9, #0
 80051a8:	dd08      	ble.n	80051bc <_strtod_l+0x7ac>
 80051aa:	4631      	mov	r1, r6
 80051ac:	464a      	mov	r2, r9
 80051ae:	4620      	mov	r0, r4
 80051b0:	f002 fa00 	bl	80075b4 <__lshift>
 80051b4:	4606      	mov	r6, r0
 80051b6:	2800      	cmp	r0, #0
 80051b8:	f43f ae72 	beq.w	8004ea0 <_strtod_l+0x490>
 80051bc:	9a05      	ldr	r2, [sp, #20]
 80051be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80051c0:	4620      	mov	r0, r4
 80051c2:	f002 fa83 	bl	80076cc <__mdiff>
 80051c6:	4605      	mov	r5, r0
 80051c8:	2800      	cmp	r0, #0
 80051ca:	f43f ae69 	beq.w	8004ea0 <_strtod_l+0x490>
 80051ce:	68c3      	ldr	r3, [r0, #12]
 80051d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80051d2:	2300      	movs	r3, #0
 80051d4:	60c3      	str	r3, [r0, #12]
 80051d6:	4631      	mov	r1, r6
 80051d8:	f002 fa5c 	bl	8007694 <__mcmp>
 80051dc:	2800      	cmp	r0, #0
 80051de:	da60      	bge.n	80052a2 <_strtod_l+0x892>
 80051e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051e2:	ea53 030a 	orrs.w	r3, r3, sl
 80051e6:	f040 8082 	bne.w	80052ee <_strtod_l+0x8de>
 80051ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d17d      	bne.n	80052ee <_strtod_l+0x8de>
 80051f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80051f6:	0d1b      	lsrs	r3, r3, #20
 80051f8:	051b      	lsls	r3, r3, #20
 80051fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80051fe:	d976      	bls.n	80052ee <_strtod_l+0x8de>
 8005200:	696b      	ldr	r3, [r5, #20]
 8005202:	b913      	cbnz	r3, 800520a <_strtod_l+0x7fa>
 8005204:	692b      	ldr	r3, [r5, #16]
 8005206:	2b01      	cmp	r3, #1
 8005208:	dd71      	ble.n	80052ee <_strtod_l+0x8de>
 800520a:	4629      	mov	r1, r5
 800520c:	2201      	movs	r2, #1
 800520e:	4620      	mov	r0, r4
 8005210:	f002 f9d0 	bl	80075b4 <__lshift>
 8005214:	4631      	mov	r1, r6
 8005216:	4605      	mov	r5, r0
 8005218:	f002 fa3c 	bl	8007694 <__mcmp>
 800521c:	2800      	cmp	r0, #0
 800521e:	dd66      	ble.n	80052ee <_strtod_l+0x8de>
 8005220:	9904      	ldr	r1, [sp, #16]
 8005222:	4a53      	ldr	r2, [pc, #332]	; (8005370 <_strtod_l+0x960>)
 8005224:	465b      	mov	r3, fp
 8005226:	2900      	cmp	r1, #0
 8005228:	f000 8081 	beq.w	800532e <_strtod_l+0x91e>
 800522c:	ea02 010b 	and.w	r1, r2, fp
 8005230:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005234:	dc7b      	bgt.n	800532e <_strtod_l+0x91e>
 8005236:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800523a:	f77f aea9 	ble.w	8004f90 <_strtod_l+0x580>
 800523e:	4b4d      	ldr	r3, [pc, #308]	; (8005374 <_strtod_l+0x964>)
 8005240:	4650      	mov	r0, sl
 8005242:	4659      	mov	r1, fp
 8005244:	2200      	movs	r2, #0
 8005246:	f7fb f9d7 	bl	80005f8 <__aeabi_dmul>
 800524a:	460b      	mov	r3, r1
 800524c:	4303      	orrs	r3, r0
 800524e:	bf08      	it	eq
 8005250:	2322      	moveq	r3, #34	; 0x22
 8005252:	4682      	mov	sl, r0
 8005254:	468b      	mov	fp, r1
 8005256:	bf08      	it	eq
 8005258:	6023      	streq	r3, [r4, #0]
 800525a:	e62b      	b.n	8004eb4 <_strtod_l+0x4a4>
 800525c:	f04f 32ff 	mov.w	r2, #4294967295
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	ea03 0a0a 	and.w	sl, r3, sl
 8005268:	e6e3      	b.n	8005032 <_strtod_l+0x622>
 800526a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800526e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005272:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005276:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800527a:	fa01 f308 	lsl.w	r3, r1, r8
 800527e:	9308      	str	r3, [sp, #32]
 8005280:	910d      	str	r1, [sp, #52]	; 0x34
 8005282:	e746      	b.n	8005112 <_strtod_l+0x702>
 8005284:	2300      	movs	r3, #0
 8005286:	9308      	str	r3, [sp, #32]
 8005288:	2301      	movs	r3, #1
 800528a:	930d      	str	r3, [sp, #52]	; 0x34
 800528c:	e741      	b.n	8005112 <_strtod_l+0x702>
 800528e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005290:	4642      	mov	r2, r8
 8005292:	4620      	mov	r0, r4
 8005294:	f002 f98e 	bl	80075b4 <__lshift>
 8005298:	9018      	str	r0, [sp, #96]	; 0x60
 800529a:	2800      	cmp	r0, #0
 800529c:	f47f af6b 	bne.w	8005176 <_strtod_l+0x766>
 80052a0:	e5fe      	b.n	8004ea0 <_strtod_l+0x490>
 80052a2:	465f      	mov	r7, fp
 80052a4:	d16e      	bne.n	8005384 <_strtod_l+0x974>
 80052a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80052ac:	b342      	cbz	r2, 8005300 <_strtod_l+0x8f0>
 80052ae:	4a32      	ldr	r2, [pc, #200]	; (8005378 <_strtod_l+0x968>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d128      	bne.n	8005306 <_strtod_l+0x8f6>
 80052b4:	9b04      	ldr	r3, [sp, #16]
 80052b6:	4651      	mov	r1, sl
 80052b8:	b1eb      	cbz	r3, 80052f6 <_strtod_l+0x8e6>
 80052ba:	4b2d      	ldr	r3, [pc, #180]	; (8005370 <_strtod_l+0x960>)
 80052bc:	403b      	ands	r3, r7
 80052be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295
 80052c6:	d819      	bhi.n	80052fc <_strtod_l+0x8ec>
 80052c8:	0d1b      	lsrs	r3, r3, #20
 80052ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80052ce:	fa02 f303 	lsl.w	r3, r2, r3
 80052d2:	4299      	cmp	r1, r3
 80052d4:	d117      	bne.n	8005306 <_strtod_l+0x8f6>
 80052d6:	4b29      	ldr	r3, [pc, #164]	; (800537c <_strtod_l+0x96c>)
 80052d8:	429f      	cmp	r7, r3
 80052da:	d102      	bne.n	80052e2 <_strtod_l+0x8d2>
 80052dc:	3101      	adds	r1, #1
 80052de:	f43f addf 	beq.w	8004ea0 <_strtod_l+0x490>
 80052e2:	4b23      	ldr	r3, [pc, #140]	; (8005370 <_strtod_l+0x960>)
 80052e4:	403b      	ands	r3, r7
 80052e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80052ea:	f04f 0a00 	mov.w	sl, #0
 80052ee:	9b04      	ldr	r3, [sp, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1a4      	bne.n	800523e <_strtod_l+0x82e>
 80052f4:	e5de      	b.n	8004eb4 <_strtod_l+0x4a4>
 80052f6:	f04f 33ff 	mov.w	r3, #4294967295
 80052fa:	e7ea      	b.n	80052d2 <_strtod_l+0x8c2>
 80052fc:	4613      	mov	r3, r2
 80052fe:	e7e8      	b.n	80052d2 <_strtod_l+0x8c2>
 8005300:	ea53 030a 	orrs.w	r3, r3, sl
 8005304:	d08c      	beq.n	8005220 <_strtod_l+0x810>
 8005306:	9b08      	ldr	r3, [sp, #32]
 8005308:	b1db      	cbz	r3, 8005342 <_strtod_l+0x932>
 800530a:	423b      	tst	r3, r7
 800530c:	d0ef      	beq.n	80052ee <_strtod_l+0x8de>
 800530e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005310:	9a04      	ldr	r2, [sp, #16]
 8005312:	4650      	mov	r0, sl
 8005314:	4659      	mov	r1, fp
 8005316:	b1c3      	cbz	r3, 800534a <_strtod_l+0x93a>
 8005318:	f7ff fb5e 	bl	80049d8 <sulp>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	ec51 0b18 	vmov	r0, r1, d8
 8005324:	f7fa ffb2 	bl	800028c <__adddf3>
 8005328:	4682      	mov	sl, r0
 800532a:	468b      	mov	fp, r1
 800532c:	e7df      	b.n	80052ee <_strtod_l+0x8de>
 800532e:	4013      	ands	r3, r2
 8005330:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005334:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005338:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800533c:	f04f 3aff 	mov.w	sl, #4294967295
 8005340:	e7d5      	b.n	80052ee <_strtod_l+0x8de>
 8005342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005344:	ea13 0f0a 	tst.w	r3, sl
 8005348:	e7e0      	b.n	800530c <_strtod_l+0x8fc>
 800534a:	f7ff fb45 	bl	80049d8 <sulp>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	ec51 0b18 	vmov	r0, r1, d8
 8005356:	f7fa ff97 	bl	8000288 <__aeabi_dsub>
 800535a:	2200      	movs	r2, #0
 800535c:	2300      	movs	r3, #0
 800535e:	4682      	mov	sl, r0
 8005360:	468b      	mov	fp, r1
 8005362:	f7fb fbb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005366:	2800      	cmp	r0, #0
 8005368:	d0c1      	beq.n	80052ee <_strtod_l+0x8de>
 800536a:	e611      	b.n	8004f90 <_strtod_l+0x580>
 800536c:	fffffc02 	.word	0xfffffc02
 8005370:	7ff00000 	.word	0x7ff00000
 8005374:	39500000 	.word	0x39500000
 8005378:	000fffff 	.word	0x000fffff
 800537c:	7fefffff 	.word	0x7fefffff
 8005380:	08008878 	.word	0x08008878
 8005384:	4631      	mov	r1, r6
 8005386:	4628      	mov	r0, r5
 8005388:	f002 fb02 	bl	8007990 <__ratio>
 800538c:	ec59 8b10 	vmov	r8, r9, d0
 8005390:	ee10 0a10 	vmov	r0, s0
 8005394:	2200      	movs	r2, #0
 8005396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800539a:	4649      	mov	r1, r9
 800539c:	f7fb fba8 	bl	8000af0 <__aeabi_dcmple>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d07a      	beq.n	800549a <_strtod_l+0xa8a>
 80053a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d04a      	beq.n	8005440 <_strtod_l+0xa30>
 80053aa:	4b95      	ldr	r3, [pc, #596]	; (8005600 <_strtod_l+0xbf0>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80053b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005600 <_strtod_l+0xbf0>
 80053b6:	f04f 0800 	mov.w	r8, #0
 80053ba:	4b92      	ldr	r3, [pc, #584]	; (8005604 <_strtod_l+0xbf4>)
 80053bc:	403b      	ands	r3, r7
 80053be:	930d      	str	r3, [sp, #52]	; 0x34
 80053c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053c2:	4b91      	ldr	r3, [pc, #580]	; (8005608 <_strtod_l+0xbf8>)
 80053c4:	429a      	cmp	r2, r3
 80053c6:	f040 80b0 	bne.w	800552a <_strtod_l+0xb1a>
 80053ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80053d2:	ec4b ab10 	vmov	d0, sl, fp
 80053d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80053da:	f002 fa01 	bl	80077e0 <__ulp>
 80053de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053e2:	ec53 2b10 	vmov	r2, r3, d0
 80053e6:	f7fb f907 	bl	80005f8 <__aeabi_dmul>
 80053ea:	4652      	mov	r2, sl
 80053ec:	465b      	mov	r3, fp
 80053ee:	f7fa ff4d 	bl	800028c <__adddf3>
 80053f2:	460b      	mov	r3, r1
 80053f4:	4983      	ldr	r1, [pc, #524]	; (8005604 <_strtod_l+0xbf4>)
 80053f6:	4a85      	ldr	r2, [pc, #532]	; (800560c <_strtod_l+0xbfc>)
 80053f8:	4019      	ands	r1, r3
 80053fa:	4291      	cmp	r1, r2
 80053fc:	4682      	mov	sl, r0
 80053fe:	d960      	bls.n	80054c2 <_strtod_l+0xab2>
 8005400:	ee18 3a90 	vmov	r3, s17
 8005404:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005408:	4293      	cmp	r3, r2
 800540a:	d104      	bne.n	8005416 <_strtod_l+0xa06>
 800540c:	ee18 3a10 	vmov	r3, s16
 8005410:	3301      	adds	r3, #1
 8005412:	f43f ad45 	beq.w	8004ea0 <_strtod_l+0x490>
 8005416:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005618 <_strtod_l+0xc08>
 800541a:	f04f 3aff 	mov.w	sl, #4294967295
 800541e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005420:	4620      	mov	r0, r4
 8005422:	f001 feab 	bl	800717c <_Bfree>
 8005426:	9905      	ldr	r1, [sp, #20]
 8005428:	4620      	mov	r0, r4
 800542a:	f001 fea7 	bl	800717c <_Bfree>
 800542e:	4631      	mov	r1, r6
 8005430:	4620      	mov	r0, r4
 8005432:	f001 fea3 	bl	800717c <_Bfree>
 8005436:	4629      	mov	r1, r5
 8005438:	4620      	mov	r0, r4
 800543a:	f001 fe9f 	bl	800717c <_Bfree>
 800543e:	e61a      	b.n	8005076 <_strtod_l+0x666>
 8005440:	f1ba 0f00 	cmp.w	sl, #0
 8005444:	d11b      	bne.n	800547e <_strtod_l+0xa6e>
 8005446:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800544a:	b9f3      	cbnz	r3, 800548a <_strtod_l+0xa7a>
 800544c:	4b6c      	ldr	r3, [pc, #432]	; (8005600 <_strtod_l+0xbf0>)
 800544e:	2200      	movs	r2, #0
 8005450:	4640      	mov	r0, r8
 8005452:	4649      	mov	r1, r9
 8005454:	f7fb fb42 	bl	8000adc <__aeabi_dcmplt>
 8005458:	b9d0      	cbnz	r0, 8005490 <_strtod_l+0xa80>
 800545a:	4640      	mov	r0, r8
 800545c:	4649      	mov	r1, r9
 800545e:	4b6c      	ldr	r3, [pc, #432]	; (8005610 <_strtod_l+0xc00>)
 8005460:	2200      	movs	r2, #0
 8005462:	f7fb f8c9 	bl	80005f8 <__aeabi_dmul>
 8005466:	4680      	mov	r8, r0
 8005468:	4689      	mov	r9, r1
 800546a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800546e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005472:	9315      	str	r3, [sp, #84]	; 0x54
 8005474:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005478:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800547c:	e79d      	b.n	80053ba <_strtod_l+0x9aa>
 800547e:	f1ba 0f01 	cmp.w	sl, #1
 8005482:	d102      	bne.n	800548a <_strtod_l+0xa7a>
 8005484:	2f00      	cmp	r7, #0
 8005486:	f43f ad83 	beq.w	8004f90 <_strtod_l+0x580>
 800548a:	4b62      	ldr	r3, [pc, #392]	; (8005614 <_strtod_l+0xc04>)
 800548c:	2200      	movs	r2, #0
 800548e:	e78e      	b.n	80053ae <_strtod_l+0x99e>
 8005490:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005610 <_strtod_l+0xc00>
 8005494:	f04f 0800 	mov.w	r8, #0
 8005498:	e7e7      	b.n	800546a <_strtod_l+0xa5a>
 800549a:	4b5d      	ldr	r3, [pc, #372]	; (8005610 <_strtod_l+0xc00>)
 800549c:	4640      	mov	r0, r8
 800549e:	4649      	mov	r1, r9
 80054a0:	2200      	movs	r2, #0
 80054a2:	f7fb f8a9 	bl	80005f8 <__aeabi_dmul>
 80054a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054a8:	4680      	mov	r8, r0
 80054aa:	4689      	mov	r9, r1
 80054ac:	b933      	cbnz	r3, 80054bc <_strtod_l+0xaac>
 80054ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054b2:	900e      	str	r0, [sp, #56]	; 0x38
 80054b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80054b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80054ba:	e7dd      	b.n	8005478 <_strtod_l+0xa68>
 80054bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80054c0:	e7f9      	b.n	80054b6 <_strtod_l+0xaa6>
 80054c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80054c6:	9b04      	ldr	r3, [sp, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1a8      	bne.n	800541e <_strtod_l+0xa0e>
 80054cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80054d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054d2:	0d1b      	lsrs	r3, r3, #20
 80054d4:	051b      	lsls	r3, r3, #20
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d1a1      	bne.n	800541e <_strtod_l+0xa0e>
 80054da:	4640      	mov	r0, r8
 80054dc:	4649      	mov	r1, r9
 80054de:	f7fb fbeb 	bl	8000cb8 <__aeabi_d2lz>
 80054e2:	f7fb f85b 	bl	800059c <__aeabi_l2d>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4640      	mov	r0, r8
 80054ec:	4649      	mov	r1, r9
 80054ee:	f7fa fecb 	bl	8000288 <__aeabi_dsub>
 80054f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054f8:	ea43 030a 	orr.w	r3, r3, sl
 80054fc:	4313      	orrs	r3, r2
 80054fe:	4680      	mov	r8, r0
 8005500:	4689      	mov	r9, r1
 8005502:	d055      	beq.n	80055b0 <_strtod_l+0xba0>
 8005504:	a336      	add	r3, pc, #216	; (adr r3, 80055e0 <_strtod_l+0xbd0>)
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f7fb fae7 	bl	8000adc <__aeabi_dcmplt>
 800550e:	2800      	cmp	r0, #0
 8005510:	f47f acd0 	bne.w	8004eb4 <_strtod_l+0x4a4>
 8005514:	a334      	add	r3, pc, #208	; (adr r3, 80055e8 <_strtod_l+0xbd8>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	4640      	mov	r0, r8
 800551c:	4649      	mov	r1, r9
 800551e:	f7fb fafb 	bl	8000b18 <__aeabi_dcmpgt>
 8005522:	2800      	cmp	r0, #0
 8005524:	f43f af7b 	beq.w	800541e <_strtod_l+0xa0e>
 8005528:	e4c4      	b.n	8004eb4 <_strtod_l+0x4a4>
 800552a:	9b04      	ldr	r3, [sp, #16]
 800552c:	b333      	cbz	r3, 800557c <_strtod_l+0xb6c>
 800552e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005530:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005534:	d822      	bhi.n	800557c <_strtod_l+0xb6c>
 8005536:	a32e      	add	r3, pc, #184	; (adr r3, 80055f0 <_strtod_l+0xbe0>)
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	4640      	mov	r0, r8
 800553e:	4649      	mov	r1, r9
 8005540:	f7fb fad6 	bl	8000af0 <__aeabi_dcmple>
 8005544:	b1a0      	cbz	r0, 8005570 <_strtod_l+0xb60>
 8005546:	4649      	mov	r1, r9
 8005548:	4640      	mov	r0, r8
 800554a:	f7fb fb2d 	bl	8000ba8 <__aeabi_d2uiz>
 800554e:	2801      	cmp	r0, #1
 8005550:	bf38      	it	cc
 8005552:	2001      	movcc	r0, #1
 8005554:	f7fa ffd6 	bl	8000504 <__aeabi_ui2d>
 8005558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800555a:	4680      	mov	r8, r0
 800555c:	4689      	mov	r9, r1
 800555e:	bb23      	cbnz	r3, 80055aa <_strtod_l+0xb9a>
 8005560:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005564:	9010      	str	r0, [sp, #64]	; 0x40
 8005566:	9311      	str	r3, [sp, #68]	; 0x44
 8005568:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800556c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005572:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005574:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	9309      	str	r3, [sp, #36]	; 0x24
 800557c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005580:	eeb0 0a48 	vmov.f32	s0, s16
 8005584:	eef0 0a68 	vmov.f32	s1, s17
 8005588:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800558c:	f002 f928 	bl	80077e0 <__ulp>
 8005590:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005594:	ec53 2b10 	vmov	r2, r3, d0
 8005598:	f7fb f82e 	bl	80005f8 <__aeabi_dmul>
 800559c:	ec53 2b18 	vmov	r2, r3, d8
 80055a0:	f7fa fe74 	bl	800028c <__adddf3>
 80055a4:	4682      	mov	sl, r0
 80055a6:	468b      	mov	fp, r1
 80055a8:	e78d      	b.n	80054c6 <_strtod_l+0xab6>
 80055aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80055ae:	e7db      	b.n	8005568 <_strtod_l+0xb58>
 80055b0:	a311      	add	r3, pc, #68	; (adr r3, 80055f8 <_strtod_l+0xbe8>)
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	f7fb fa91 	bl	8000adc <__aeabi_dcmplt>
 80055ba:	e7b2      	b.n	8005522 <_strtod_l+0xb12>
 80055bc:	2300      	movs	r3, #0
 80055be:	930a      	str	r3, [sp, #40]	; 0x28
 80055c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	f7ff ba6b 	b.w	8004aa0 <_strtod_l+0x90>
 80055ca:	2a65      	cmp	r2, #101	; 0x65
 80055cc:	f43f ab5f 	beq.w	8004c8e <_strtod_l+0x27e>
 80055d0:	2a45      	cmp	r2, #69	; 0x45
 80055d2:	f43f ab5c 	beq.w	8004c8e <_strtod_l+0x27e>
 80055d6:	2301      	movs	r3, #1
 80055d8:	f7ff bb94 	b.w	8004d04 <_strtod_l+0x2f4>
 80055dc:	f3af 8000 	nop.w
 80055e0:	94a03595 	.word	0x94a03595
 80055e4:	3fdfffff 	.word	0x3fdfffff
 80055e8:	35afe535 	.word	0x35afe535
 80055ec:	3fe00000 	.word	0x3fe00000
 80055f0:	ffc00000 	.word	0xffc00000
 80055f4:	41dfffff 	.word	0x41dfffff
 80055f8:	94a03595 	.word	0x94a03595
 80055fc:	3fcfffff 	.word	0x3fcfffff
 8005600:	3ff00000 	.word	0x3ff00000
 8005604:	7ff00000 	.word	0x7ff00000
 8005608:	7fe00000 	.word	0x7fe00000
 800560c:	7c9fffff 	.word	0x7c9fffff
 8005610:	3fe00000 	.word	0x3fe00000
 8005614:	bff00000 	.word	0xbff00000
 8005618:	7fefffff 	.word	0x7fefffff

0800561c <_strtod_r>:
 800561c:	4b01      	ldr	r3, [pc, #4]	; (8005624 <_strtod_r+0x8>)
 800561e:	f7ff b9f7 	b.w	8004a10 <_strtod_l>
 8005622:	bf00      	nop
 8005624:	20000080 	.word	0x20000080

08005628 <_strtol_l.constprop.0>:
 8005628:	2b01      	cmp	r3, #1
 800562a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800562e:	d001      	beq.n	8005634 <_strtol_l.constprop.0+0xc>
 8005630:	2b24      	cmp	r3, #36	; 0x24
 8005632:	d906      	bls.n	8005642 <_strtol_l.constprop.0+0x1a>
 8005634:	f7fe fa62 	bl	8003afc <__errno>
 8005638:	2316      	movs	r3, #22
 800563a:	6003      	str	r3, [r0, #0]
 800563c:	2000      	movs	r0, #0
 800563e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005642:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005728 <_strtol_l.constprop.0+0x100>
 8005646:	460d      	mov	r5, r1
 8005648:	462e      	mov	r6, r5
 800564a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800564e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005652:	f017 0708 	ands.w	r7, r7, #8
 8005656:	d1f7      	bne.n	8005648 <_strtol_l.constprop.0+0x20>
 8005658:	2c2d      	cmp	r4, #45	; 0x2d
 800565a:	d132      	bne.n	80056c2 <_strtol_l.constprop.0+0x9a>
 800565c:	782c      	ldrb	r4, [r5, #0]
 800565e:	2701      	movs	r7, #1
 8005660:	1cb5      	adds	r5, r6, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d05b      	beq.n	800571e <_strtol_l.constprop.0+0xf6>
 8005666:	2b10      	cmp	r3, #16
 8005668:	d109      	bne.n	800567e <_strtol_l.constprop.0+0x56>
 800566a:	2c30      	cmp	r4, #48	; 0x30
 800566c:	d107      	bne.n	800567e <_strtol_l.constprop.0+0x56>
 800566e:	782c      	ldrb	r4, [r5, #0]
 8005670:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005674:	2c58      	cmp	r4, #88	; 0x58
 8005676:	d14d      	bne.n	8005714 <_strtol_l.constprop.0+0xec>
 8005678:	786c      	ldrb	r4, [r5, #1]
 800567a:	2310      	movs	r3, #16
 800567c:	3502      	adds	r5, #2
 800567e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005682:	f108 38ff 	add.w	r8, r8, #4294967295
 8005686:	f04f 0c00 	mov.w	ip, #0
 800568a:	fbb8 f9f3 	udiv	r9, r8, r3
 800568e:	4666      	mov	r6, ip
 8005690:	fb03 8a19 	mls	sl, r3, r9, r8
 8005694:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005698:	f1be 0f09 	cmp.w	lr, #9
 800569c:	d816      	bhi.n	80056cc <_strtol_l.constprop.0+0xa4>
 800569e:	4674      	mov	r4, lr
 80056a0:	42a3      	cmp	r3, r4
 80056a2:	dd24      	ble.n	80056ee <_strtol_l.constprop.0+0xc6>
 80056a4:	f1bc 0f00 	cmp.w	ip, #0
 80056a8:	db1e      	blt.n	80056e8 <_strtol_l.constprop.0+0xc0>
 80056aa:	45b1      	cmp	r9, r6
 80056ac:	d31c      	bcc.n	80056e8 <_strtol_l.constprop.0+0xc0>
 80056ae:	d101      	bne.n	80056b4 <_strtol_l.constprop.0+0x8c>
 80056b0:	45a2      	cmp	sl, r4
 80056b2:	db19      	blt.n	80056e8 <_strtol_l.constprop.0+0xc0>
 80056b4:	fb06 4603 	mla	r6, r6, r3, r4
 80056b8:	f04f 0c01 	mov.w	ip, #1
 80056bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056c0:	e7e8      	b.n	8005694 <_strtol_l.constprop.0+0x6c>
 80056c2:	2c2b      	cmp	r4, #43	; 0x2b
 80056c4:	bf04      	itt	eq
 80056c6:	782c      	ldrbeq	r4, [r5, #0]
 80056c8:	1cb5      	addeq	r5, r6, #2
 80056ca:	e7ca      	b.n	8005662 <_strtol_l.constprop.0+0x3a>
 80056cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80056d0:	f1be 0f19 	cmp.w	lr, #25
 80056d4:	d801      	bhi.n	80056da <_strtol_l.constprop.0+0xb2>
 80056d6:	3c37      	subs	r4, #55	; 0x37
 80056d8:	e7e2      	b.n	80056a0 <_strtol_l.constprop.0+0x78>
 80056da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80056de:	f1be 0f19 	cmp.w	lr, #25
 80056e2:	d804      	bhi.n	80056ee <_strtol_l.constprop.0+0xc6>
 80056e4:	3c57      	subs	r4, #87	; 0x57
 80056e6:	e7db      	b.n	80056a0 <_strtol_l.constprop.0+0x78>
 80056e8:	f04f 3cff 	mov.w	ip, #4294967295
 80056ec:	e7e6      	b.n	80056bc <_strtol_l.constprop.0+0x94>
 80056ee:	f1bc 0f00 	cmp.w	ip, #0
 80056f2:	da05      	bge.n	8005700 <_strtol_l.constprop.0+0xd8>
 80056f4:	2322      	movs	r3, #34	; 0x22
 80056f6:	6003      	str	r3, [r0, #0]
 80056f8:	4646      	mov	r6, r8
 80056fa:	b942      	cbnz	r2, 800570e <_strtol_l.constprop.0+0xe6>
 80056fc:	4630      	mov	r0, r6
 80056fe:	e79e      	b.n	800563e <_strtol_l.constprop.0+0x16>
 8005700:	b107      	cbz	r7, 8005704 <_strtol_l.constprop.0+0xdc>
 8005702:	4276      	negs	r6, r6
 8005704:	2a00      	cmp	r2, #0
 8005706:	d0f9      	beq.n	80056fc <_strtol_l.constprop.0+0xd4>
 8005708:	f1bc 0f00 	cmp.w	ip, #0
 800570c:	d000      	beq.n	8005710 <_strtol_l.constprop.0+0xe8>
 800570e:	1e69      	subs	r1, r5, #1
 8005710:	6011      	str	r1, [r2, #0]
 8005712:	e7f3      	b.n	80056fc <_strtol_l.constprop.0+0xd4>
 8005714:	2430      	movs	r4, #48	; 0x30
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1b1      	bne.n	800567e <_strtol_l.constprop.0+0x56>
 800571a:	2308      	movs	r3, #8
 800571c:	e7af      	b.n	800567e <_strtol_l.constprop.0+0x56>
 800571e:	2c30      	cmp	r4, #48	; 0x30
 8005720:	d0a5      	beq.n	800566e <_strtol_l.constprop.0+0x46>
 8005722:	230a      	movs	r3, #10
 8005724:	e7ab      	b.n	800567e <_strtol_l.constprop.0+0x56>
 8005726:	bf00      	nop
 8005728:	080088a1 	.word	0x080088a1

0800572c <_strtol_r>:
 800572c:	f7ff bf7c 	b.w	8005628 <_strtol_l.constprop.0>

08005730 <__swbuf_r>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	460e      	mov	r6, r1
 8005734:	4614      	mov	r4, r2
 8005736:	4605      	mov	r5, r0
 8005738:	b118      	cbz	r0, 8005742 <__swbuf_r+0x12>
 800573a:	6983      	ldr	r3, [r0, #24]
 800573c:	b90b      	cbnz	r3, 8005742 <__swbuf_r+0x12>
 800573e:	f001 f84b 	bl	80067d8 <__sinit>
 8005742:	4b21      	ldr	r3, [pc, #132]	; (80057c8 <__swbuf_r+0x98>)
 8005744:	429c      	cmp	r4, r3
 8005746:	d12b      	bne.n	80057a0 <__swbuf_r+0x70>
 8005748:	686c      	ldr	r4, [r5, #4]
 800574a:	69a3      	ldr	r3, [r4, #24]
 800574c:	60a3      	str	r3, [r4, #8]
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	071a      	lsls	r2, r3, #28
 8005752:	d52f      	bpl.n	80057b4 <__swbuf_r+0x84>
 8005754:	6923      	ldr	r3, [r4, #16]
 8005756:	b36b      	cbz	r3, 80057b4 <__swbuf_r+0x84>
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	6820      	ldr	r0, [r4, #0]
 800575c:	1ac0      	subs	r0, r0, r3
 800575e:	6963      	ldr	r3, [r4, #20]
 8005760:	b2f6      	uxtb	r6, r6
 8005762:	4283      	cmp	r3, r0
 8005764:	4637      	mov	r7, r6
 8005766:	dc04      	bgt.n	8005772 <__swbuf_r+0x42>
 8005768:	4621      	mov	r1, r4
 800576a:	4628      	mov	r0, r5
 800576c:	f000 ffa0 	bl	80066b0 <_fflush_r>
 8005770:	bb30      	cbnz	r0, 80057c0 <__swbuf_r+0x90>
 8005772:	68a3      	ldr	r3, [r4, #8]
 8005774:	3b01      	subs	r3, #1
 8005776:	60a3      	str	r3, [r4, #8]
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	6022      	str	r2, [r4, #0]
 800577e:	701e      	strb	r6, [r3, #0]
 8005780:	6963      	ldr	r3, [r4, #20]
 8005782:	3001      	adds	r0, #1
 8005784:	4283      	cmp	r3, r0
 8005786:	d004      	beq.n	8005792 <__swbuf_r+0x62>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	07db      	lsls	r3, r3, #31
 800578c:	d506      	bpl.n	800579c <__swbuf_r+0x6c>
 800578e:	2e0a      	cmp	r6, #10
 8005790:	d104      	bne.n	800579c <__swbuf_r+0x6c>
 8005792:	4621      	mov	r1, r4
 8005794:	4628      	mov	r0, r5
 8005796:	f000 ff8b 	bl	80066b0 <_fflush_r>
 800579a:	b988      	cbnz	r0, 80057c0 <__swbuf_r+0x90>
 800579c:	4638      	mov	r0, r7
 800579e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a0:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <__swbuf_r+0x9c>)
 80057a2:	429c      	cmp	r4, r3
 80057a4:	d101      	bne.n	80057aa <__swbuf_r+0x7a>
 80057a6:	68ac      	ldr	r4, [r5, #8]
 80057a8:	e7cf      	b.n	800574a <__swbuf_r+0x1a>
 80057aa:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <__swbuf_r+0xa0>)
 80057ac:	429c      	cmp	r4, r3
 80057ae:	bf08      	it	eq
 80057b0:	68ec      	ldreq	r4, [r5, #12]
 80057b2:	e7ca      	b.n	800574a <__swbuf_r+0x1a>
 80057b4:	4621      	mov	r1, r4
 80057b6:	4628      	mov	r0, r5
 80057b8:	f000 f80c 	bl	80057d4 <__swsetup_r>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d0cb      	beq.n	8005758 <__swbuf_r+0x28>
 80057c0:	f04f 37ff 	mov.w	r7, #4294967295
 80057c4:	e7ea      	b.n	800579c <__swbuf_r+0x6c>
 80057c6:	bf00      	nop
 80057c8:	08008a54 	.word	0x08008a54
 80057cc:	08008a74 	.word	0x08008a74
 80057d0:	08008a34 	.word	0x08008a34

080057d4 <__swsetup_r>:
 80057d4:	4b32      	ldr	r3, [pc, #200]	; (80058a0 <__swsetup_r+0xcc>)
 80057d6:	b570      	push	{r4, r5, r6, lr}
 80057d8:	681d      	ldr	r5, [r3, #0]
 80057da:	4606      	mov	r6, r0
 80057dc:	460c      	mov	r4, r1
 80057de:	b125      	cbz	r5, 80057ea <__swsetup_r+0x16>
 80057e0:	69ab      	ldr	r3, [r5, #24]
 80057e2:	b913      	cbnz	r3, 80057ea <__swsetup_r+0x16>
 80057e4:	4628      	mov	r0, r5
 80057e6:	f000 fff7 	bl	80067d8 <__sinit>
 80057ea:	4b2e      	ldr	r3, [pc, #184]	; (80058a4 <__swsetup_r+0xd0>)
 80057ec:	429c      	cmp	r4, r3
 80057ee:	d10f      	bne.n	8005810 <__swsetup_r+0x3c>
 80057f0:	686c      	ldr	r4, [r5, #4]
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057f8:	0719      	lsls	r1, r3, #28
 80057fa:	d42c      	bmi.n	8005856 <__swsetup_r+0x82>
 80057fc:	06dd      	lsls	r5, r3, #27
 80057fe:	d411      	bmi.n	8005824 <__swsetup_r+0x50>
 8005800:	2309      	movs	r3, #9
 8005802:	6033      	str	r3, [r6, #0]
 8005804:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	f04f 30ff 	mov.w	r0, #4294967295
 800580e:	e03e      	b.n	800588e <__swsetup_r+0xba>
 8005810:	4b25      	ldr	r3, [pc, #148]	; (80058a8 <__swsetup_r+0xd4>)
 8005812:	429c      	cmp	r4, r3
 8005814:	d101      	bne.n	800581a <__swsetup_r+0x46>
 8005816:	68ac      	ldr	r4, [r5, #8]
 8005818:	e7eb      	b.n	80057f2 <__swsetup_r+0x1e>
 800581a:	4b24      	ldr	r3, [pc, #144]	; (80058ac <__swsetup_r+0xd8>)
 800581c:	429c      	cmp	r4, r3
 800581e:	bf08      	it	eq
 8005820:	68ec      	ldreq	r4, [r5, #12]
 8005822:	e7e6      	b.n	80057f2 <__swsetup_r+0x1e>
 8005824:	0758      	lsls	r0, r3, #29
 8005826:	d512      	bpl.n	800584e <__swsetup_r+0x7a>
 8005828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800582a:	b141      	cbz	r1, 800583e <__swsetup_r+0x6a>
 800582c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005830:	4299      	cmp	r1, r3
 8005832:	d002      	beq.n	800583a <__swsetup_r+0x66>
 8005834:	4630      	mov	r0, r6
 8005836:	f002 f939 	bl	8007aac <_free_r>
 800583a:	2300      	movs	r3, #0
 800583c:	6363      	str	r3, [r4, #52]	; 0x34
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005844:	81a3      	strh	r3, [r4, #12]
 8005846:	2300      	movs	r3, #0
 8005848:	6063      	str	r3, [r4, #4]
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	f043 0308 	orr.w	r3, r3, #8
 8005854:	81a3      	strh	r3, [r4, #12]
 8005856:	6923      	ldr	r3, [r4, #16]
 8005858:	b94b      	cbnz	r3, 800586e <__swsetup_r+0x9a>
 800585a:	89a3      	ldrh	r3, [r4, #12]
 800585c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005864:	d003      	beq.n	800586e <__swsetup_r+0x9a>
 8005866:	4621      	mov	r1, r4
 8005868:	4630      	mov	r0, r6
 800586a:	f001 fbed 	bl	8007048 <__smakebuf_r>
 800586e:	89a0      	ldrh	r0, [r4, #12]
 8005870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005874:	f010 0301 	ands.w	r3, r0, #1
 8005878:	d00a      	beq.n	8005890 <__swsetup_r+0xbc>
 800587a:	2300      	movs	r3, #0
 800587c:	60a3      	str	r3, [r4, #8]
 800587e:	6963      	ldr	r3, [r4, #20]
 8005880:	425b      	negs	r3, r3
 8005882:	61a3      	str	r3, [r4, #24]
 8005884:	6923      	ldr	r3, [r4, #16]
 8005886:	b943      	cbnz	r3, 800589a <__swsetup_r+0xc6>
 8005888:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800588c:	d1ba      	bne.n	8005804 <__swsetup_r+0x30>
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	0781      	lsls	r1, r0, #30
 8005892:	bf58      	it	pl
 8005894:	6963      	ldrpl	r3, [r4, #20]
 8005896:	60a3      	str	r3, [r4, #8]
 8005898:	e7f4      	b.n	8005884 <__swsetup_r+0xb0>
 800589a:	2000      	movs	r0, #0
 800589c:	e7f7      	b.n	800588e <__swsetup_r+0xba>
 800589e:	bf00      	nop
 80058a0:	20000018 	.word	0x20000018
 80058a4:	08008a54 	.word	0x08008a54
 80058a8:	08008a74 	.word	0x08008a74
 80058ac:	08008a34 	.word	0x08008a34

080058b0 <quorem>:
 80058b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b4:	6903      	ldr	r3, [r0, #16]
 80058b6:	690c      	ldr	r4, [r1, #16]
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	4607      	mov	r7, r0
 80058bc:	f2c0 8081 	blt.w	80059c2 <quorem+0x112>
 80058c0:	3c01      	subs	r4, #1
 80058c2:	f101 0814 	add.w	r8, r1, #20
 80058c6:	f100 0514 	add.w	r5, r0, #20
 80058ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80058d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058d8:	3301      	adds	r3, #1
 80058da:	429a      	cmp	r2, r3
 80058dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80058e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80058e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80058e8:	d331      	bcc.n	800594e <quorem+0x9e>
 80058ea:	f04f 0e00 	mov.w	lr, #0
 80058ee:	4640      	mov	r0, r8
 80058f0:	46ac      	mov	ip, r5
 80058f2:	46f2      	mov	sl, lr
 80058f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80058f8:	b293      	uxth	r3, r2
 80058fa:	fb06 e303 	mla	r3, r6, r3, lr
 80058fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005902:	b29b      	uxth	r3, r3
 8005904:	ebaa 0303 	sub.w	r3, sl, r3
 8005908:	f8dc a000 	ldr.w	sl, [ip]
 800590c:	0c12      	lsrs	r2, r2, #16
 800590e:	fa13 f38a 	uxtah	r3, r3, sl
 8005912:	fb06 e202 	mla	r2, r6, r2, lr
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	9b00      	ldr	r3, [sp, #0]
 800591a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800591e:	b292      	uxth	r2, r2
 8005920:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005924:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005928:	f8bd 3000 	ldrh.w	r3, [sp]
 800592c:	4581      	cmp	r9, r0
 800592e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005932:	f84c 3b04 	str.w	r3, [ip], #4
 8005936:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800593a:	d2db      	bcs.n	80058f4 <quorem+0x44>
 800593c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005940:	b92b      	cbnz	r3, 800594e <quorem+0x9e>
 8005942:	9b01      	ldr	r3, [sp, #4]
 8005944:	3b04      	subs	r3, #4
 8005946:	429d      	cmp	r5, r3
 8005948:	461a      	mov	r2, r3
 800594a:	d32e      	bcc.n	80059aa <quorem+0xfa>
 800594c:	613c      	str	r4, [r7, #16]
 800594e:	4638      	mov	r0, r7
 8005950:	f001 fea0 	bl	8007694 <__mcmp>
 8005954:	2800      	cmp	r0, #0
 8005956:	db24      	blt.n	80059a2 <quorem+0xf2>
 8005958:	3601      	adds	r6, #1
 800595a:	4628      	mov	r0, r5
 800595c:	f04f 0c00 	mov.w	ip, #0
 8005960:	f858 2b04 	ldr.w	r2, [r8], #4
 8005964:	f8d0 e000 	ldr.w	lr, [r0]
 8005968:	b293      	uxth	r3, r2
 800596a:	ebac 0303 	sub.w	r3, ip, r3
 800596e:	0c12      	lsrs	r2, r2, #16
 8005970:	fa13 f38e 	uxtah	r3, r3, lr
 8005974:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005978:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800597c:	b29b      	uxth	r3, r3
 800597e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005982:	45c1      	cmp	r9, r8
 8005984:	f840 3b04 	str.w	r3, [r0], #4
 8005988:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800598c:	d2e8      	bcs.n	8005960 <quorem+0xb0>
 800598e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005992:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005996:	b922      	cbnz	r2, 80059a2 <quorem+0xf2>
 8005998:	3b04      	subs	r3, #4
 800599a:	429d      	cmp	r5, r3
 800599c:	461a      	mov	r2, r3
 800599e:	d30a      	bcc.n	80059b6 <quorem+0x106>
 80059a0:	613c      	str	r4, [r7, #16]
 80059a2:	4630      	mov	r0, r6
 80059a4:	b003      	add	sp, #12
 80059a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	3b04      	subs	r3, #4
 80059ae:	2a00      	cmp	r2, #0
 80059b0:	d1cc      	bne.n	800594c <quorem+0x9c>
 80059b2:	3c01      	subs	r4, #1
 80059b4:	e7c7      	b.n	8005946 <quorem+0x96>
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	3b04      	subs	r3, #4
 80059ba:	2a00      	cmp	r2, #0
 80059bc:	d1f0      	bne.n	80059a0 <quorem+0xf0>
 80059be:	3c01      	subs	r4, #1
 80059c0:	e7eb      	b.n	800599a <quorem+0xea>
 80059c2:	2000      	movs	r0, #0
 80059c4:	e7ee      	b.n	80059a4 <quorem+0xf4>
	...

080059c8 <_dtoa_r>:
 80059c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	ed2d 8b04 	vpush	{d8-d9}
 80059d0:	ec57 6b10 	vmov	r6, r7, d0
 80059d4:	b093      	sub	sp, #76	; 0x4c
 80059d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80059dc:	9106      	str	r1, [sp, #24]
 80059de:	ee10 aa10 	vmov	sl, s0
 80059e2:	4604      	mov	r4, r0
 80059e4:	9209      	str	r2, [sp, #36]	; 0x24
 80059e6:	930c      	str	r3, [sp, #48]	; 0x30
 80059e8:	46bb      	mov	fp, r7
 80059ea:	b975      	cbnz	r5, 8005a0a <_dtoa_r+0x42>
 80059ec:	2010      	movs	r0, #16
 80059ee:	f001 fb6b 	bl	80070c8 <malloc>
 80059f2:	4602      	mov	r2, r0
 80059f4:	6260      	str	r0, [r4, #36]	; 0x24
 80059f6:	b920      	cbnz	r0, 8005a02 <_dtoa_r+0x3a>
 80059f8:	4ba7      	ldr	r3, [pc, #668]	; (8005c98 <_dtoa_r+0x2d0>)
 80059fa:	21ea      	movs	r1, #234	; 0xea
 80059fc:	48a7      	ldr	r0, [pc, #668]	; (8005c9c <_dtoa_r+0x2d4>)
 80059fe:	f002 fc79 	bl	80082f4 <__assert_func>
 8005a02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a06:	6005      	str	r5, [r0, #0]
 8005a08:	60c5      	str	r5, [r0, #12]
 8005a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a0c:	6819      	ldr	r1, [r3, #0]
 8005a0e:	b151      	cbz	r1, 8005a26 <_dtoa_r+0x5e>
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	604a      	str	r2, [r1, #4]
 8005a14:	2301      	movs	r3, #1
 8005a16:	4093      	lsls	r3, r2
 8005a18:	608b      	str	r3, [r1, #8]
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f001 fbae 	bl	800717c <_Bfree>
 8005a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	1e3b      	subs	r3, r7, #0
 8005a28:	bfaa      	itet	ge
 8005a2a:	2300      	movge	r3, #0
 8005a2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005a30:	f8c8 3000 	strge.w	r3, [r8]
 8005a34:	4b9a      	ldr	r3, [pc, #616]	; (8005ca0 <_dtoa_r+0x2d8>)
 8005a36:	bfbc      	itt	lt
 8005a38:	2201      	movlt	r2, #1
 8005a3a:	f8c8 2000 	strlt.w	r2, [r8]
 8005a3e:	ea33 030b 	bics.w	r3, r3, fp
 8005a42:	d11b      	bne.n	8005a7c <_dtoa_r+0xb4>
 8005a44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a46:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a50:	4333      	orrs	r3, r6
 8005a52:	f000 8592 	beq.w	800657a <_dtoa_r+0xbb2>
 8005a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a58:	b963      	cbnz	r3, 8005a74 <_dtoa_r+0xac>
 8005a5a:	4b92      	ldr	r3, [pc, #584]	; (8005ca4 <_dtoa_r+0x2dc>)
 8005a5c:	e022      	b.n	8005aa4 <_dtoa_r+0xdc>
 8005a5e:	4b92      	ldr	r3, [pc, #584]	; (8005ca8 <_dtoa_r+0x2e0>)
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	3308      	adds	r3, #8
 8005a64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	9801      	ldr	r0, [sp, #4]
 8005a6a:	b013      	add	sp, #76	; 0x4c
 8005a6c:	ecbd 8b04 	vpop	{d8-d9}
 8005a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a74:	4b8b      	ldr	r3, [pc, #556]	; (8005ca4 <_dtoa_r+0x2dc>)
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	3303      	adds	r3, #3
 8005a7a:	e7f3      	b.n	8005a64 <_dtoa_r+0x9c>
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2300      	movs	r3, #0
 8005a80:	4650      	mov	r0, sl
 8005a82:	4659      	mov	r1, fp
 8005a84:	f7fb f820 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a88:	ec4b ab19 	vmov	d9, sl, fp
 8005a8c:	4680      	mov	r8, r0
 8005a8e:	b158      	cbz	r0, 8005aa8 <_dtoa_r+0xe0>
 8005a90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a92:	2301      	movs	r3, #1
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 856b 	beq.w	8006574 <_dtoa_r+0xbac>
 8005a9e:	4883      	ldr	r0, [pc, #524]	; (8005cac <_dtoa_r+0x2e4>)
 8005aa0:	6018      	str	r0, [r3, #0]
 8005aa2:	1e43      	subs	r3, r0, #1
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	e7df      	b.n	8005a68 <_dtoa_r+0xa0>
 8005aa8:	ec4b ab10 	vmov	d0, sl, fp
 8005aac:	aa10      	add	r2, sp, #64	; 0x40
 8005aae:	a911      	add	r1, sp, #68	; 0x44
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f001 ff11 	bl	80078d8 <__d2b>
 8005ab6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005aba:	ee08 0a10 	vmov	s16, r0
 8005abe:	2d00      	cmp	r5, #0
 8005ac0:	f000 8084 	beq.w	8005bcc <_dtoa_r+0x204>
 8005ac4:	ee19 3a90 	vmov	r3, s19
 8005ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005acc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005ad0:	4656      	mov	r6, sl
 8005ad2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005ad6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ada:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005ade:	4b74      	ldr	r3, [pc, #464]	; (8005cb0 <_dtoa_r+0x2e8>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	4639      	mov	r1, r7
 8005ae6:	f7fa fbcf 	bl	8000288 <__aeabi_dsub>
 8005aea:	a365      	add	r3, pc, #404	; (adr r3, 8005c80 <_dtoa_r+0x2b8>)
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f7fa fd82 	bl	80005f8 <__aeabi_dmul>
 8005af4:	a364      	add	r3, pc, #400	; (adr r3, 8005c88 <_dtoa_r+0x2c0>)
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f7fa fbc7 	bl	800028c <__adddf3>
 8005afe:	4606      	mov	r6, r0
 8005b00:	4628      	mov	r0, r5
 8005b02:	460f      	mov	r7, r1
 8005b04:	f7fa fd0e 	bl	8000524 <__aeabi_i2d>
 8005b08:	a361      	add	r3, pc, #388	; (adr r3, 8005c90 <_dtoa_r+0x2c8>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f7fa fd73 	bl	80005f8 <__aeabi_dmul>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4630      	mov	r0, r6
 8005b18:	4639      	mov	r1, r7
 8005b1a:	f7fa fbb7 	bl	800028c <__adddf3>
 8005b1e:	4606      	mov	r6, r0
 8005b20:	460f      	mov	r7, r1
 8005b22:	f7fb f819 	bl	8000b58 <__aeabi_d2iz>
 8005b26:	2200      	movs	r2, #0
 8005b28:	9000      	str	r0, [sp, #0]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	4639      	mov	r1, r7
 8005b30:	f7fa ffd4 	bl	8000adc <__aeabi_dcmplt>
 8005b34:	b150      	cbz	r0, 8005b4c <_dtoa_r+0x184>
 8005b36:	9800      	ldr	r0, [sp, #0]
 8005b38:	f7fa fcf4 	bl	8000524 <__aeabi_i2d>
 8005b3c:	4632      	mov	r2, r6
 8005b3e:	463b      	mov	r3, r7
 8005b40:	f7fa ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b44:	b910      	cbnz	r0, 8005b4c <_dtoa_r+0x184>
 8005b46:	9b00      	ldr	r3, [sp, #0]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	9b00      	ldr	r3, [sp, #0]
 8005b4e:	2b16      	cmp	r3, #22
 8005b50:	d85a      	bhi.n	8005c08 <_dtoa_r+0x240>
 8005b52:	9a00      	ldr	r2, [sp, #0]
 8005b54:	4b57      	ldr	r3, [pc, #348]	; (8005cb4 <_dtoa_r+0x2ec>)
 8005b56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	ec51 0b19 	vmov	r0, r1, d9
 8005b62:	f7fa ffbb 	bl	8000adc <__aeabi_dcmplt>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d050      	beq.n	8005c0c <_dtoa_r+0x244>
 8005b6a:	9b00      	ldr	r3, [sp, #0]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	2300      	movs	r3, #0
 8005b72:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b76:	1b5d      	subs	r5, r3, r5
 8005b78:	1e6b      	subs	r3, r5, #1
 8005b7a:	9305      	str	r3, [sp, #20]
 8005b7c:	bf45      	ittet	mi
 8005b7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005b82:	9304      	strmi	r3, [sp, #16]
 8005b84:	2300      	movpl	r3, #0
 8005b86:	2300      	movmi	r3, #0
 8005b88:	bf4c      	ite	mi
 8005b8a:	9305      	strmi	r3, [sp, #20]
 8005b8c:	9304      	strpl	r3, [sp, #16]
 8005b8e:	9b00      	ldr	r3, [sp, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	db3d      	blt.n	8005c10 <_dtoa_r+0x248>
 8005b94:	9b05      	ldr	r3, [sp, #20]
 8005b96:	9a00      	ldr	r2, [sp, #0]
 8005b98:	920a      	str	r2, [sp, #40]	; 0x28
 8005b9a:	4413      	add	r3, r2
 8005b9c:	9305      	str	r3, [sp, #20]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9307      	str	r3, [sp, #28]
 8005ba2:	9b06      	ldr	r3, [sp, #24]
 8005ba4:	2b09      	cmp	r3, #9
 8005ba6:	f200 8089 	bhi.w	8005cbc <_dtoa_r+0x2f4>
 8005baa:	2b05      	cmp	r3, #5
 8005bac:	bfc4      	itt	gt
 8005bae:	3b04      	subgt	r3, #4
 8005bb0:	9306      	strgt	r3, [sp, #24]
 8005bb2:	9b06      	ldr	r3, [sp, #24]
 8005bb4:	f1a3 0302 	sub.w	r3, r3, #2
 8005bb8:	bfcc      	ite	gt
 8005bba:	2500      	movgt	r5, #0
 8005bbc:	2501      	movle	r5, #1
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	f200 8087 	bhi.w	8005cd2 <_dtoa_r+0x30a>
 8005bc4:	e8df f003 	tbb	[pc, r3]
 8005bc8:	59383a2d 	.word	0x59383a2d
 8005bcc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005bd0:	441d      	add	r5, r3
 8005bd2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	bfc1      	itttt	gt
 8005bda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005bde:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005be2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005be6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005bea:	bfda      	itte	le
 8005bec:	f1c3 0320 	rsble	r3, r3, #32
 8005bf0:	fa06 f003 	lslle.w	r0, r6, r3
 8005bf4:	4318      	orrgt	r0, r3
 8005bf6:	f7fa fc85 	bl	8000504 <__aeabi_ui2d>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4606      	mov	r6, r0
 8005bfe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005c02:	3d01      	subs	r5, #1
 8005c04:	930e      	str	r3, [sp, #56]	; 0x38
 8005c06:	e76a      	b.n	8005ade <_dtoa_r+0x116>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e7b2      	b.n	8005b72 <_dtoa_r+0x1aa>
 8005c0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c0e:	e7b1      	b.n	8005b74 <_dtoa_r+0x1ac>
 8005c10:	9b04      	ldr	r3, [sp, #16]
 8005c12:	9a00      	ldr	r2, [sp, #0]
 8005c14:	1a9b      	subs	r3, r3, r2
 8005c16:	9304      	str	r3, [sp, #16]
 8005c18:	4253      	negs	r3, r2
 8005c1a:	9307      	str	r3, [sp, #28]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c20:	e7bf      	b.n	8005ba2 <_dtoa_r+0x1da>
 8005c22:	2300      	movs	r3, #0
 8005c24:	9308      	str	r3, [sp, #32]
 8005c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	dc55      	bgt.n	8005cd8 <_dtoa_r+0x310>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c32:	461a      	mov	r2, r3
 8005c34:	9209      	str	r2, [sp, #36]	; 0x24
 8005c36:	e00c      	b.n	8005c52 <_dtoa_r+0x28a>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e7f3      	b.n	8005c24 <_dtoa_r+0x25c>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c40:	9308      	str	r3, [sp, #32]
 8005c42:	9b00      	ldr	r3, [sp, #0]
 8005c44:	4413      	add	r3, r2
 8005c46:	9302      	str	r3, [sp, #8]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	9303      	str	r3, [sp, #12]
 8005c4e:	bfb8      	it	lt
 8005c50:	2301      	movlt	r3, #1
 8005c52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005c54:	2200      	movs	r2, #0
 8005c56:	6042      	str	r2, [r0, #4]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	f102 0614 	add.w	r6, r2, #20
 8005c5e:	429e      	cmp	r6, r3
 8005c60:	6841      	ldr	r1, [r0, #4]
 8005c62:	d93d      	bls.n	8005ce0 <_dtoa_r+0x318>
 8005c64:	4620      	mov	r0, r4
 8005c66:	f001 fa49 	bl	80070fc <_Balloc>
 8005c6a:	9001      	str	r0, [sp, #4]
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d13b      	bne.n	8005ce8 <_dtoa_r+0x320>
 8005c70:	4b11      	ldr	r3, [pc, #68]	; (8005cb8 <_dtoa_r+0x2f0>)
 8005c72:	4602      	mov	r2, r0
 8005c74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005c78:	e6c0      	b.n	80059fc <_dtoa_r+0x34>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e7df      	b.n	8005c3e <_dtoa_r+0x276>
 8005c7e:	bf00      	nop
 8005c80:	636f4361 	.word	0x636f4361
 8005c84:	3fd287a7 	.word	0x3fd287a7
 8005c88:	8b60c8b3 	.word	0x8b60c8b3
 8005c8c:	3fc68a28 	.word	0x3fc68a28
 8005c90:	509f79fb 	.word	0x509f79fb
 8005c94:	3fd34413 	.word	0x3fd34413
 8005c98:	080089ae 	.word	0x080089ae
 8005c9c:	080089c5 	.word	0x080089c5
 8005ca0:	7ff00000 	.word	0x7ff00000
 8005ca4:	080089aa 	.word	0x080089aa
 8005ca8:	080089a1 	.word	0x080089a1
 8005cac:	08008825 	.word	0x08008825
 8005cb0:	3ff80000 	.word	0x3ff80000
 8005cb4:	08008b98 	.word	0x08008b98
 8005cb8:	08008a20 	.word	0x08008a20
 8005cbc:	2501      	movs	r5, #1
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	9306      	str	r3, [sp, #24]
 8005cc2:	9508      	str	r5, [sp, #32]
 8005cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2312      	movs	r3, #18
 8005cd0:	e7b0      	b.n	8005c34 <_dtoa_r+0x26c>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	9308      	str	r3, [sp, #32]
 8005cd6:	e7f5      	b.n	8005cc4 <_dtoa_r+0x2fc>
 8005cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005cde:	e7b8      	b.n	8005c52 <_dtoa_r+0x28a>
 8005ce0:	3101      	adds	r1, #1
 8005ce2:	6041      	str	r1, [r0, #4]
 8005ce4:	0052      	lsls	r2, r2, #1
 8005ce6:	e7b8      	b.n	8005c5a <_dtoa_r+0x292>
 8005ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cea:	9a01      	ldr	r2, [sp, #4]
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	9b03      	ldr	r3, [sp, #12]
 8005cf0:	2b0e      	cmp	r3, #14
 8005cf2:	f200 809d 	bhi.w	8005e30 <_dtoa_r+0x468>
 8005cf6:	2d00      	cmp	r5, #0
 8005cf8:	f000 809a 	beq.w	8005e30 <_dtoa_r+0x468>
 8005cfc:	9b00      	ldr	r3, [sp, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	dd32      	ble.n	8005d68 <_dtoa_r+0x3a0>
 8005d02:	4ab7      	ldr	r2, [pc, #732]	; (8005fe0 <_dtoa_r+0x618>)
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d10:	9b00      	ldr	r3, [sp, #0]
 8005d12:	05d8      	lsls	r0, r3, #23
 8005d14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005d18:	d516      	bpl.n	8005d48 <_dtoa_r+0x380>
 8005d1a:	4bb2      	ldr	r3, [pc, #712]	; (8005fe4 <_dtoa_r+0x61c>)
 8005d1c:	ec51 0b19 	vmov	r0, r1, d9
 8005d20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d24:	f7fa fd92 	bl	800084c <__aeabi_ddiv>
 8005d28:	f007 070f 	and.w	r7, r7, #15
 8005d2c:	4682      	mov	sl, r0
 8005d2e:	468b      	mov	fp, r1
 8005d30:	2503      	movs	r5, #3
 8005d32:	4eac      	ldr	r6, [pc, #688]	; (8005fe4 <_dtoa_r+0x61c>)
 8005d34:	b957      	cbnz	r7, 8005d4c <_dtoa_r+0x384>
 8005d36:	4642      	mov	r2, r8
 8005d38:	464b      	mov	r3, r9
 8005d3a:	4650      	mov	r0, sl
 8005d3c:	4659      	mov	r1, fp
 8005d3e:	f7fa fd85 	bl	800084c <__aeabi_ddiv>
 8005d42:	4682      	mov	sl, r0
 8005d44:	468b      	mov	fp, r1
 8005d46:	e028      	b.n	8005d9a <_dtoa_r+0x3d2>
 8005d48:	2502      	movs	r5, #2
 8005d4a:	e7f2      	b.n	8005d32 <_dtoa_r+0x36a>
 8005d4c:	07f9      	lsls	r1, r7, #31
 8005d4e:	d508      	bpl.n	8005d62 <_dtoa_r+0x39a>
 8005d50:	4640      	mov	r0, r8
 8005d52:	4649      	mov	r1, r9
 8005d54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d58:	f7fa fc4e 	bl	80005f8 <__aeabi_dmul>
 8005d5c:	3501      	adds	r5, #1
 8005d5e:	4680      	mov	r8, r0
 8005d60:	4689      	mov	r9, r1
 8005d62:	107f      	asrs	r7, r7, #1
 8005d64:	3608      	adds	r6, #8
 8005d66:	e7e5      	b.n	8005d34 <_dtoa_r+0x36c>
 8005d68:	f000 809b 	beq.w	8005ea2 <_dtoa_r+0x4da>
 8005d6c:	9b00      	ldr	r3, [sp, #0]
 8005d6e:	4f9d      	ldr	r7, [pc, #628]	; (8005fe4 <_dtoa_r+0x61c>)
 8005d70:	425e      	negs	r6, r3
 8005d72:	4b9b      	ldr	r3, [pc, #620]	; (8005fe0 <_dtoa_r+0x618>)
 8005d74:	f006 020f 	and.w	r2, r6, #15
 8005d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	ec51 0b19 	vmov	r0, r1, d9
 8005d84:	f7fa fc38 	bl	80005f8 <__aeabi_dmul>
 8005d88:	1136      	asrs	r6, r6, #4
 8005d8a:	4682      	mov	sl, r0
 8005d8c:	468b      	mov	fp, r1
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2502      	movs	r5, #2
 8005d92:	2e00      	cmp	r6, #0
 8005d94:	d17a      	bne.n	8005e8c <_dtoa_r+0x4c4>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1d3      	bne.n	8005d42 <_dtoa_r+0x37a>
 8005d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8082 	beq.w	8005ea6 <_dtoa_r+0x4de>
 8005da2:	4b91      	ldr	r3, [pc, #580]	; (8005fe8 <_dtoa_r+0x620>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	4650      	mov	r0, sl
 8005da8:	4659      	mov	r1, fp
 8005daa:	f7fa fe97 	bl	8000adc <__aeabi_dcmplt>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d079      	beq.n	8005ea6 <_dtoa_r+0x4de>
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d076      	beq.n	8005ea6 <_dtoa_r+0x4de>
 8005db8:	9b02      	ldr	r3, [sp, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	dd36      	ble.n	8005e2c <_dtoa_r+0x464>
 8005dbe:	9b00      	ldr	r3, [sp, #0]
 8005dc0:	4650      	mov	r0, sl
 8005dc2:	4659      	mov	r1, fp
 8005dc4:	1e5f      	subs	r7, r3, #1
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	4b88      	ldr	r3, [pc, #544]	; (8005fec <_dtoa_r+0x624>)
 8005dca:	f7fa fc15 	bl	80005f8 <__aeabi_dmul>
 8005dce:	9e02      	ldr	r6, [sp, #8]
 8005dd0:	4682      	mov	sl, r0
 8005dd2:	468b      	mov	fp, r1
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f7fa fba4 	bl	8000524 <__aeabi_i2d>
 8005ddc:	4652      	mov	r2, sl
 8005dde:	465b      	mov	r3, fp
 8005de0:	f7fa fc0a 	bl	80005f8 <__aeabi_dmul>
 8005de4:	4b82      	ldr	r3, [pc, #520]	; (8005ff0 <_dtoa_r+0x628>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	f7fa fa50 	bl	800028c <__adddf3>
 8005dec:	46d0      	mov	r8, sl
 8005dee:	46d9      	mov	r9, fp
 8005df0:	4682      	mov	sl, r0
 8005df2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005df6:	2e00      	cmp	r6, #0
 8005df8:	d158      	bne.n	8005eac <_dtoa_r+0x4e4>
 8005dfa:	4b7e      	ldr	r3, [pc, #504]	; (8005ff4 <_dtoa_r+0x62c>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	4640      	mov	r0, r8
 8005e00:	4649      	mov	r1, r9
 8005e02:	f7fa fa41 	bl	8000288 <__aeabi_dsub>
 8005e06:	4652      	mov	r2, sl
 8005e08:	465b      	mov	r3, fp
 8005e0a:	4680      	mov	r8, r0
 8005e0c:	4689      	mov	r9, r1
 8005e0e:	f7fa fe83 	bl	8000b18 <__aeabi_dcmpgt>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	f040 8295 	bne.w	8006342 <_dtoa_r+0x97a>
 8005e18:	4652      	mov	r2, sl
 8005e1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005e1e:	4640      	mov	r0, r8
 8005e20:	4649      	mov	r1, r9
 8005e22:	f7fa fe5b 	bl	8000adc <__aeabi_dcmplt>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	f040 8289 	bne.w	800633e <_dtoa_r+0x976>
 8005e2c:	ec5b ab19 	vmov	sl, fp, d9
 8005e30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f2c0 8148 	blt.w	80060c8 <_dtoa_r+0x700>
 8005e38:	9a00      	ldr	r2, [sp, #0]
 8005e3a:	2a0e      	cmp	r2, #14
 8005e3c:	f300 8144 	bgt.w	80060c8 <_dtoa_r+0x700>
 8005e40:	4b67      	ldr	r3, [pc, #412]	; (8005fe0 <_dtoa_r+0x618>)
 8005e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f280 80d5 	bge.w	8005ffc <_dtoa_r+0x634>
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f300 80d1 	bgt.w	8005ffc <_dtoa_r+0x634>
 8005e5a:	f040 826f 	bne.w	800633c <_dtoa_r+0x974>
 8005e5e:	4b65      	ldr	r3, [pc, #404]	; (8005ff4 <_dtoa_r+0x62c>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	4640      	mov	r0, r8
 8005e64:	4649      	mov	r1, r9
 8005e66:	f7fa fbc7 	bl	80005f8 <__aeabi_dmul>
 8005e6a:	4652      	mov	r2, sl
 8005e6c:	465b      	mov	r3, fp
 8005e6e:	f7fa fe49 	bl	8000b04 <__aeabi_dcmpge>
 8005e72:	9e03      	ldr	r6, [sp, #12]
 8005e74:	4637      	mov	r7, r6
 8005e76:	2800      	cmp	r0, #0
 8005e78:	f040 8245 	bne.w	8006306 <_dtoa_r+0x93e>
 8005e7c:	9d01      	ldr	r5, [sp, #4]
 8005e7e:	2331      	movs	r3, #49	; 0x31
 8005e80:	f805 3b01 	strb.w	r3, [r5], #1
 8005e84:	9b00      	ldr	r3, [sp, #0]
 8005e86:	3301      	adds	r3, #1
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	e240      	b.n	800630e <_dtoa_r+0x946>
 8005e8c:	07f2      	lsls	r2, r6, #31
 8005e8e:	d505      	bpl.n	8005e9c <_dtoa_r+0x4d4>
 8005e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e94:	f7fa fbb0 	bl	80005f8 <__aeabi_dmul>
 8005e98:	3501      	adds	r5, #1
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	1076      	asrs	r6, r6, #1
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	e777      	b.n	8005d92 <_dtoa_r+0x3ca>
 8005ea2:	2502      	movs	r5, #2
 8005ea4:	e779      	b.n	8005d9a <_dtoa_r+0x3d2>
 8005ea6:	9f00      	ldr	r7, [sp, #0]
 8005ea8:	9e03      	ldr	r6, [sp, #12]
 8005eaa:	e794      	b.n	8005dd6 <_dtoa_r+0x40e>
 8005eac:	9901      	ldr	r1, [sp, #4]
 8005eae:	4b4c      	ldr	r3, [pc, #304]	; (8005fe0 <_dtoa_r+0x618>)
 8005eb0:	4431      	add	r1, r6
 8005eb2:	910d      	str	r1, [sp, #52]	; 0x34
 8005eb4:	9908      	ldr	r1, [sp, #32]
 8005eb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005eba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ebe:	2900      	cmp	r1, #0
 8005ec0:	d043      	beq.n	8005f4a <_dtoa_r+0x582>
 8005ec2:	494d      	ldr	r1, [pc, #308]	; (8005ff8 <_dtoa_r+0x630>)
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	f7fa fcc1 	bl	800084c <__aeabi_ddiv>
 8005eca:	4652      	mov	r2, sl
 8005ecc:	465b      	mov	r3, fp
 8005ece:	f7fa f9db 	bl	8000288 <__aeabi_dsub>
 8005ed2:	9d01      	ldr	r5, [sp, #4]
 8005ed4:	4682      	mov	sl, r0
 8005ed6:	468b      	mov	fp, r1
 8005ed8:	4649      	mov	r1, r9
 8005eda:	4640      	mov	r0, r8
 8005edc:	f7fa fe3c 	bl	8000b58 <__aeabi_d2iz>
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	f7fa fb1f 	bl	8000524 <__aeabi_i2d>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4640      	mov	r0, r8
 8005eec:	4649      	mov	r1, r9
 8005eee:	f7fa f9cb 	bl	8000288 <__aeabi_dsub>
 8005ef2:	3630      	adds	r6, #48	; 0x30
 8005ef4:	f805 6b01 	strb.w	r6, [r5], #1
 8005ef8:	4652      	mov	r2, sl
 8005efa:	465b      	mov	r3, fp
 8005efc:	4680      	mov	r8, r0
 8005efe:	4689      	mov	r9, r1
 8005f00:	f7fa fdec 	bl	8000adc <__aeabi_dcmplt>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d163      	bne.n	8005fd0 <_dtoa_r+0x608>
 8005f08:	4642      	mov	r2, r8
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	4936      	ldr	r1, [pc, #216]	; (8005fe8 <_dtoa_r+0x620>)
 8005f0e:	2000      	movs	r0, #0
 8005f10:	f7fa f9ba 	bl	8000288 <__aeabi_dsub>
 8005f14:	4652      	mov	r2, sl
 8005f16:	465b      	mov	r3, fp
 8005f18:	f7fa fde0 	bl	8000adc <__aeabi_dcmplt>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	f040 80b5 	bne.w	800608c <_dtoa_r+0x6c4>
 8005f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f24:	429d      	cmp	r5, r3
 8005f26:	d081      	beq.n	8005e2c <_dtoa_r+0x464>
 8005f28:	4b30      	ldr	r3, [pc, #192]	; (8005fec <_dtoa_r+0x624>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	4650      	mov	r0, sl
 8005f2e:	4659      	mov	r1, fp
 8005f30:	f7fa fb62 	bl	80005f8 <__aeabi_dmul>
 8005f34:	4b2d      	ldr	r3, [pc, #180]	; (8005fec <_dtoa_r+0x624>)
 8005f36:	4682      	mov	sl, r0
 8005f38:	468b      	mov	fp, r1
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	4649      	mov	r1, r9
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f7fa fb5a 	bl	80005f8 <__aeabi_dmul>
 8005f44:	4680      	mov	r8, r0
 8005f46:	4689      	mov	r9, r1
 8005f48:	e7c6      	b.n	8005ed8 <_dtoa_r+0x510>
 8005f4a:	4650      	mov	r0, sl
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	f7fa fb53 	bl	80005f8 <__aeabi_dmul>
 8005f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f54:	9d01      	ldr	r5, [sp, #4]
 8005f56:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f58:	4682      	mov	sl, r0
 8005f5a:	468b      	mov	fp, r1
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	4640      	mov	r0, r8
 8005f60:	f7fa fdfa 	bl	8000b58 <__aeabi_d2iz>
 8005f64:	4606      	mov	r6, r0
 8005f66:	f7fa fadd 	bl	8000524 <__aeabi_i2d>
 8005f6a:	3630      	adds	r6, #48	; 0x30
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4640      	mov	r0, r8
 8005f72:	4649      	mov	r1, r9
 8005f74:	f7fa f988 	bl	8000288 <__aeabi_dsub>
 8005f78:	f805 6b01 	strb.w	r6, [r5], #1
 8005f7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f7e:	429d      	cmp	r5, r3
 8005f80:	4680      	mov	r8, r0
 8005f82:	4689      	mov	r9, r1
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	d124      	bne.n	8005fd4 <_dtoa_r+0x60c>
 8005f8a:	4b1b      	ldr	r3, [pc, #108]	; (8005ff8 <_dtoa_r+0x630>)
 8005f8c:	4650      	mov	r0, sl
 8005f8e:	4659      	mov	r1, fp
 8005f90:	f7fa f97c 	bl	800028c <__adddf3>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4640      	mov	r0, r8
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	f7fa fdbc 	bl	8000b18 <__aeabi_dcmpgt>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d173      	bne.n	800608c <_dtoa_r+0x6c4>
 8005fa4:	4652      	mov	r2, sl
 8005fa6:	465b      	mov	r3, fp
 8005fa8:	4913      	ldr	r1, [pc, #76]	; (8005ff8 <_dtoa_r+0x630>)
 8005faa:	2000      	movs	r0, #0
 8005fac:	f7fa f96c 	bl	8000288 <__aeabi_dsub>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	f7fa fd90 	bl	8000adc <__aeabi_dcmplt>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	f43f af35 	beq.w	8005e2c <_dtoa_r+0x464>
 8005fc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005fc4:	1e6b      	subs	r3, r5, #1
 8005fc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fcc:	2b30      	cmp	r3, #48	; 0x30
 8005fce:	d0f8      	beq.n	8005fc2 <_dtoa_r+0x5fa>
 8005fd0:	9700      	str	r7, [sp, #0]
 8005fd2:	e049      	b.n	8006068 <_dtoa_r+0x6a0>
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <_dtoa_r+0x624>)
 8005fd6:	f7fa fb0f 	bl	80005f8 <__aeabi_dmul>
 8005fda:	4680      	mov	r8, r0
 8005fdc:	4689      	mov	r9, r1
 8005fde:	e7bd      	b.n	8005f5c <_dtoa_r+0x594>
 8005fe0:	08008b98 	.word	0x08008b98
 8005fe4:	08008b70 	.word	0x08008b70
 8005fe8:	3ff00000 	.word	0x3ff00000
 8005fec:	40240000 	.word	0x40240000
 8005ff0:	401c0000 	.word	0x401c0000
 8005ff4:	40140000 	.word	0x40140000
 8005ff8:	3fe00000 	.word	0x3fe00000
 8005ffc:	9d01      	ldr	r5, [sp, #4]
 8005ffe:	4656      	mov	r6, sl
 8006000:	465f      	mov	r7, fp
 8006002:	4642      	mov	r2, r8
 8006004:	464b      	mov	r3, r9
 8006006:	4630      	mov	r0, r6
 8006008:	4639      	mov	r1, r7
 800600a:	f7fa fc1f 	bl	800084c <__aeabi_ddiv>
 800600e:	f7fa fda3 	bl	8000b58 <__aeabi_d2iz>
 8006012:	4682      	mov	sl, r0
 8006014:	f7fa fa86 	bl	8000524 <__aeabi_i2d>
 8006018:	4642      	mov	r2, r8
 800601a:	464b      	mov	r3, r9
 800601c:	f7fa faec 	bl	80005f8 <__aeabi_dmul>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4630      	mov	r0, r6
 8006026:	4639      	mov	r1, r7
 8006028:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800602c:	f7fa f92c 	bl	8000288 <__aeabi_dsub>
 8006030:	f805 6b01 	strb.w	r6, [r5], #1
 8006034:	9e01      	ldr	r6, [sp, #4]
 8006036:	9f03      	ldr	r7, [sp, #12]
 8006038:	1bae      	subs	r6, r5, r6
 800603a:	42b7      	cmp	r7, r6
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	d135      	bne.n	80060ae <_dtoa_r+0x6e6>
 8006042:	f7fa f923 	bl	800028c <__adddf3>
 8006046:	4642      	mov	r2, r8
 8006048:	464b      	mov	r3, r9
 800604a:	4606      	mov	r6, r0
 800604c:	460f      	mov	r7, r1
 800604e:	f7fa fd63 	bl	8000b18 <__aeabi_dcmpgt>
 8006052:	b9d0      	cbnz	r0, 800608a <_dtoa_r+0x6c2>
 8006054:	4642      	mov	r2, r8
 8006056:	464b      	mov	r3, r9
 8006058:	4630      	mov	r0, r6
 800605a:	4639      	mov	r1, r7
 800605c:	f7fa fd34 	bl	8000ac8 <__aeabi_dcmpeq>
 8006060:	b110      	cbz	r0, 8006068 <_dtoa_r+0x6a0>
 8006062:	f01a 0f01 	tst.w	sl, #1
 8006066:	d110      	bne.n	800608a <_dtoa_r+0x6c2>
 8006068:	4620      	mov	r0, r4
 800606a:	ee18 1a10 	vmov	r1, s16
 800606e:	f001 f885 	bl	800717c <_Bfree>
 8006072:	2300      	movs	r3, #0
 8006074:	9800      	ldr	r0, [sp, #0]
 8006076:	702b      	strb	r3, [r5, #0]
 8006078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800607a:	3001      	adds	r0, #1
 800607c:	6018      	str	r0, [r3, #0]
 800607e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006080:	2b00      	cmp	r3, #0
 8006082:	f43f acf1 	beq.w	8005a68 <_dtoa_r+0xa0>
 8006086:	601d      	str	r5, [r3, #0]
 8006088:	e4ee      	b.n	8005a68 <_dtoa_r+0xa0>
 800608a:	9f00      	ldr	r7, [sp, #0]
 800608c:	462b      	mov	r3, r5
 800608e:	461d      	mov	r5, r3
 8006090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006094:	2a39      	cmp	r2, #57	; 0x39
 8006096:	d106      	bne.n	80060a6 <_dtoa_r+0x6de>
 8006098:	9a01      	ldr	r2, [sp, #4]
 800609a:	429a      	cmp	r2, r3
 800609c:	d1f7      	bne.n	800608e <_dtoa_r+0x6c6>
 800609e:	9901      	ldr	r1, [sp, #4]
 80060a0:	2230      	movs	r2, #48	; 0x30
 80060a2:	3701      	adds	r7, #1
 80060a4:	700a      	strb	r2, [r1, #0]
 80060a6:	781a      	ldrb	r2, [r3, #0]
 80060a8:	3201      	adds	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	e790      	b.n	8005fd0 <_dtoa_r+0x608>
 80060ae:	4ba6      	ldr	r3, [pc, #664]	; (8006348 <_dtoa_r+0x980>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	f7fa faa1 	bl	80005f8 <__aeabi_dmul>
 80060b6:	2200      	movs	r2, #0
 80060b8:	2300      	movs	r3, #0
 80060ba:	4606      	mov	r6, r0
 80060bc:	460f      	mov	r7, r1
 80060be:	f7fa fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d09d      	beq.n	8006002 <_dtoa_r+0x63a>
 80060c6:	e7cf      	b.n	8006068 <_dtoa_r+0x6a0>
 80060c8:	9a08      	ldr	r2, [sp, #32]
 80060ca:	2a00      	cmp	r2, #0
 80060cc:	f000 80d7 	beq.w	800627e <_dtoa_r+0x8b6>
 80060d0:	9a06      	ldr	r2, [sp, #24]
 80060d2:	2a01      	cmp	r2, #1
 80060d4:	f300 80ba 	bgt.w	800624c <_dtoa_r+0x884>
 80060d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060da:	2a00      	cmp	r2, #0
 80060dc:	f000 80b2 	beq.w	8006244 <_dtoa_r+0x87c>
 80060e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060e4:	9e07      	ldr	r6, [sp, #28]
 80060e6:	9d04      	ldr	r5, [sp, #16]
 80060e8:	9a04      	ldr	r2, [sp, #16]
 80060ea:	441a      	add	r2, r3
 80060ec:	9204      	str	r2, [sp, #16]
 80060ee:	9a05      	ldr	r2, [sp, #20]
 80060f0:	2101      	movs	r1, #1
 80060f2:	441a      	add	r2, r3
 80060f4:	4620      	mov	r0, r4
 80060f6:	9205      	str	r2, [sp, #20]
 80060f8:	f001 f942 	bl	8007380 <__i2b>
 80060fc:	4607      	mov	r7, r0
 80060fe:	2d00      	cmp	r5, #0
 8006100:	dd0c      	ble.n	800611c <_dtoa_r+0x754>
 8006102:	9b05      	ldr	r3, [sp, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	dd09      	ble.n	800611c <_dtoa_r+0x754>
 8006108:	42ab      	cmp	r3, r5
 800610a:	9a04      	ldr	r2, [sp, #16]
 800610c:	bfa8      	it	ge
 800610e:	462b      	movge	r3, r5
 8006110:	1ad2      	subs	r2, r2, r3
 8006112:	9204      	str	r2, [sp, #16]
 8006114:	9a05      	ldr	r2, [sp, #20]
 8006116:	1aed      	subs	r5, r5, r3
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	9305      	str	r3, [sp, #20]
 800611c:	9b07      	ldr	r3, [sp, #28]
 800611e:	b31b      	cbz	r3, 8006168 <_dtoa_r+0x7a0>
 8006120:	9b08      	ldr	r3, [sp, #32]
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 80af 	beq.w	8006286 <_dtoa_r+0x8be>
 8006128:	2e00      	cmp	r6, #0
 800612a:	dd13      	ble.n	8006154 <_dtoa_r+0x78c>
 800612c:	4639      	mov	r1, r7
 800612e:	4632      	mov	r2, r6
 8006130:	4620      	mov	r0, r4
 8006132:	f001 f9e5 	bl	8007500 <__pow5mult>
 8006136:	ee18 2a10 	vmov	r2, s16
 800613a:	4601      	mov	r1, r0
 800613c:	4607      	mov	r7, r0
 800613e:	4620      	mov	r0, r4
 8006140:	f001 f934 	bl	80073ac <__multiply>
 8006144:	ee18 1a10 	vmov	r1, s16
 8006148:	4680      	mov	r8, r0
 800614a:	4620      	mov	r0, r4
 800614c:	f001 f816 	bl	800717c <_Bfree>
 8006150:	ee08 8a10 	vmov	s16, r8
 8006154:	9b07      	ldr	r3, [sp, #28]
 8006156:	1b9a      	subs	r2, r3, r6
 8006158:	d006      	beq.n	8006168 <_dtoa_r+0x7a0>
 800615a:	ee18 1a10 	vmov	r1, s16
 800615e:	4620      	mov	r0, r4
 8006160:	f001 f9ce 	bl	8007500 <__pow5mult>
 8006164:	ee08 0a10 	vmov	s16, r0
 8006168:	2101      	movs	r1, #1
 800616a:	4620      	mov	r0, r4
 800616c:	f001 f908 	bl	8007380 <__i2b>
 8006170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006172:	2b00      	cmp	r3, #0
 8006174:	4606      	mov	r6, r0
 8006176:	f340 8088 	ble.w	800628a <_dtoa_r+0x8c2>
 800617a:	461a      	mov	r2, r3
 800617c:	4601      	mov	r1, r0
 800617e:	4620      	mov	r0, r4
 8006180:	f001 f9be 	bl	8007500 <__pow5mult>
 8006184:	9b06      	ldr	r3, [sp, #24]
 8006186:	2b01      	cmp	r3, #1
 8006188:	4606      	mov	r6, r0
 800618a:	f340 8081 	ble.w	8006290 <_dtoa_r+0x8c8>
 800618e:	f04f 0800 	mov.w	r8, #0
 8006192:	6933      	ldr	r3, [r6, #16]
 8006194:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006198:	6918      	ldr	r0, [r3, #16]
 800619a:	f001 f8a1 	bl	80072e0 <__hi0bits>
 800619e:	f1c0 0020 	rsb	r0, r0, #32
 80061a2:	9b05      	ldr	r3, [sp, #20]
 80061a4:	4418      	add	r0, r3
 80061a6:	f010 001f 	ands.w	r0, r0, #31
 80061aa:	f000 8092 	beq.w	80062d2 <_dtoa_r+0x90a>
 80061ae:	f1c0 0320 	rsb	r3, r0, #32
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	f340 808a 	ble.w	80062cc <_dtoa_r+0x904>
 80061b8:	f1c0 001c 	rsb	r0, r0, #28
 80061bc:	9b04      	ldr	r3, [sp, #16]
 80061be:	4403      	add	r3, r0
 80061c0:	9304      	str	r3, [sp, #16]
 80061c2:	9b05      	ldr	r3, [sp, #20]
 80061c4:	4403      	add	r3, r0
 80061c6:	4405      	add	r5, r0
 80061c8:	9305      	str	r3, [sp, #20]
 80061ca:	9b04      	ldr	r3, [sp, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	dd07      	ble.n	80061e0 <_dtoa_r+0x818>
 80061d0:	ee18 1a10 	vmov	r1, s16
 80061d4:	461a      	mov	r2, r3
 80061d6:	4620      	mov	r0, r4
 80061d8:	f001 f9ec 	bl	80075b4 <__lshift>
 80061dc:	ee08 0a10 	vmov	s16, r0
 80061e0:	9b05      	ldr	r3, [sp, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	dd05      	ble.n	80061f2 <_dtoa_r+0x82a>
 80061e6:	4631      	mov	r1, r6
 80061e8:	461a      	mov	r2, r3
 80061ea:	4620      	mov	r0, r4
 80061ec:	f001 f9e2 	bl	80075b4 <__lshift>
 80061f0:	4606      	mov	r6, r0
 80061f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d06e      	beq.n	80062d6 <_dtoa_r+0x90e>
 80061f8:	ee18 0a10 	vmov	r0, s16
 80061fc:	4631      	mov	r1, r6
 80061fe:	f001 fa49 	bl	8007694 <__mcmp>
 8006202:	2800      	cmp	r0, #0
 8006204:	da67      	bge.n	80062d6 <_dtoa_r+0x90e>
 8006206:	9b00      	ldr	r3, [sp, #0]
 8006208:	3b01      	subs	r3, #1
 800620a:	ee18 1a10 	vmov	r1, s16
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	220a      	movs	r2, #10
 8006212:	2300      	movs	r3, #0
 8006214:	4620      	mov	r0, r4
 8006216:	f000 ffd3 	bl	80071c0 <__multadd>
 800621a:	9b08      	ldr	r3, [sp, #32]
 800621c:	ee08 0a10 	vmov	s16, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 81b1 	beq.w	8006588 <_dtoa_r+0xbc0>
 8006226:	2300      	movs	r3, #0
 8006228:	4639      	mov	r1, r7
 800622a:	220a      	movs	r2, #10
 800622c:	4620      	mov	r0, r4
 800622e:	f000 ffc7 	bl	80071c0 <__multadd>
 8006232:	9b02      	ldr	r3, [sp, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	4607      	mov	r7, r0
 8006238:	f300 808e 	bgt.w	8006358 <_dtoa_r+0x990>
 800623c:	9b06      	ldr	r3, [sp, #24]
 800623e:	2b02      	cmp	r3, #2
 8006240:	dc51      	bgt.n	80062e6 <_dtoa_r+0x91e>
 8006242:	e089      	b.n	8006358 <_dtoa_r+0x990>
 8006244:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006246:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800624a:	e74b      	b.n	80060e4 <_dtoa_r+0x71c>
 800624c:	9b03      	ldr	r3, [sp, #12]
 800624e:	1e5e      	subs	r6, r3, #1
 8006250:	9b07      	ldr	r3, [sp, #28]
 8006252:	42b3      	cmp	r3, r6
 8006254:	bfbf      	itttt	lt
 8006256:	9b07      	ldrlt	r3, [sp, #28]
 8006258:	9607      	strlt	r6, [sp, #28]
 800625a:	1af2      	sublt	r2, r6, r3
 800625c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800625e:	bfb6      	itet	lt
 8006260:	189b      	addlt	r3, r3, r2
 8006262:	1b9e      	subge	r6, r3, r6
 8006264:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006266:	9b03      	ldr	r3, [sp, #12]
 8006268:	bfb8      	it	lt
 800626a:	2600      	movlt	r6, #0
 800626c:	2b00      	cmp	r3, #0
 800626e:	bfb7      	itett	lt
 8006270:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006274:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006278:	1a9d      	sublt	r5, r3, r2
 800627a:	2300      	movlt	r3, #0
 800627c:	e734      	b.n	80060e8 <_dtoa_r+0x720>
 800627e:	9e07      	ldr	r6, [sp, #28]
 8006280:	9d04      	ldr	r5, [sp, #16]
 8006282:	9f08      	ldr	r7, [sp, #32]
 8006284:	e73b      	b.n	80060fe <_dtoa_r+0x736>
 8006286:	9a07      	ldr	r2, [sp, #28]
 8006288:	e767      	b.n	800615a <_dtoa_r+0x792>
 800628a:	9b06      	ldr	r3, [sp, #24]
 800628c:	2b01      	cmp	r3, #1
 800628e:	dc18      	bgt.n	80062c2 <_dtoa_r+0x8fa>
 8006290:	f1ba 0f00 	cmp.w	sl, #0
 8006294:	d115      	bne.n	80062c2 <_dtoa_r+0x8fa>
 8006296:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800629a:	b993      	cbnz	r3, 80062c2 <_dtoa_r+0x8fa>
 800629c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80062a0:	0d1b      	lsrs	r3, r3, #20
 80062a2:	051b      	lsls	r3, r3, #20
 80062a4:	b183      	cbz	r3, 80062c8 <_dtoa_r+0x900>
 80062a6:	9b04      	ldr	r3, [sp, #16]
 80062a8:	3301      	adds	r3, #1
 80062aa:	9304      	str	r3, [sp, #16]
 80062ac:	9b05      	ldr	r3, [sp, #20]
 80062ae:	3301      	adds	r3, #1
 80062b0:	9305      	str	r3, [sp, #20]
 80062b2:	f04f 0801 	mov.w	r8, #1
 80062b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f47f af6a 	bne.w	8006192 <_dtoa_r+0x7ca>
 80062be:	2001      	movs	r0, #1
 80062c0:	e76f      	b.n	80061a2 <_dtoa_r+0x7da>
 80062c2:	f04f 0800 	mov.w	r8, #0
 80062c6:	e7f6      	b.n	80062b6 <_dtoa_r+0x8ee>
 80062c8:	4698      	mov	r8, r3
 80062ca:	e7f4      	b.n	80062b6 <_dtoa_r+0x8ee>
 80062cc:	f43f af7d 	beq.w	80061ca <_dtoa_r+0x802>
 80062d0:	4618      	mov	r0, r3
 80062d2:	301c      	adds	r0, #28
 80062d4:	e772      	b.n	80061bc <_dtoa_r+0x7f4>
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	dc37      	bgt.n	800634c <_dtoa_r+0x984>
 80062dc:	9b06      	ldr	r3, [sp, #24]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	dd34      	ble.n	800634c <_dtoa_r+0x984>
 80062e2:	9b03      	ldr	r3, [sp, #12]
 80062e4:	9302      	str	r3, [sp, #8]
 80062e6:	9b02      	ldr	r3, [sp, #8]
 80062e8:	b96b      	cbnz	r3, 8006306 <_dtoa_r+0x93e>
 80062ea:	4631      	mov	r1, r6
 80062ec:	2205      	movs	r2, #5
 80062ee:	4620      	mov	r0, r4
 80062f0:	f000 ff66 	bl	80071c0 <__multadd>
 80062f4:	4601      	mov	r1, r0
 80062f6:	4606      	mov	r6, r0
 80062f8:	ee18 0a10 	vmov	r0, s16
 80062fc:	f001 f9ca 	bl	8007694 <__mcmp>
 8006300:	2800      	cmp	r0, #0
 8006302:	f73f adbb 	bgt.w	8005e7c <_dtoa_r+0x4b4>
 8006306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006308:	9d01      	ldr	r5, [sp, #4]
 800630a:	43db      	mvns	r3, r3
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	f04f 0800 	mov.w	r8, #0
 8006312:	4631      	mov	r1, r6
 8006314:	4620      	mov	r0, r4
 8006316:	f000 ff31 	bl	800717c <_Bfree>
 800631a:	2f00      	cmp	r7, #0
 800631c:	f43f aea4 	beq.w	8006068 <_dtoa_r+0x6a0>
 8006320:	f1b8 0f00 	cmp.w	r8, #0
 8006324:	d005      	beq.n	8006332 <_dtoa_r+0x96a>
 8006326:	45b8      	cmp	r8, r7
 8006328:	d003      	beq.n	8006332 <_dtoa_r+0x96a>
 800632a:	4641      	mov	r1, r8
 800632c:	4620      	mov	r0, r4
 800632e:	f000 ff25 	bl	800717c <_Bfree>
 8006332:	4639      	mov	r1, r7
 8006334:	4620      	mov	r0, r4
 8006336:	f000 ff21 	bl	800717c <_Bfree>
 800633a:	e695      	b.n	8006068 <_dtoa_r+0x6a0>
 800633c:	2600      	movs	r6, #0
 800633e:	4637      	mov	r7, r6
 8006340:	e7e1      	b.n	8006306 <_dtoa_r+0x93e>
 8006342:	9700      	str	r7, [sp, #0]
 8006344:	4637      	mov	r7, r6
 8006346:	e599      	b.n	8005e7c <_dtoa_r+0x4b4>
 8006348:	40240000 	.word	0x40240000
 800634c:	9b08      	ldr	r3, [sp, #32]
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80ca 	beq.w	80064e8 <_dtoa_r+0xb20>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	9302      	str	r3, [sp, #8]
 8006358:	2d00      	cmp	r5, #0
 800635a:	dd05      	ble.n	8006368 <_dtoa_r+0x9a0>
 800635c:	4639      	mov	r1, r7
 800635e:	462a      	mov	r2, r5
 8006360:	4620      	mov	r0, r4
 8006362:	f001 f927 	bl	80075b4 <__lshift>
 8006366:	4607      	mov	r7, r0
 8006368:	f1b8 0f00 	cmp.w	r8, #0
 800636c:	d05b      	beq.n	8006426 <_dtoa_r+0xa5e>
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	4620      	mov	r0, r4
 8006372:	f000 fec3 	bl	80070fc <_Balloc>
 8006376:	4605      	mov	r5, r0
 8006378:	b928      	cbnz	r0, 8006386 <_dtoa_r+0x9be>
 800637a:	4b87      	ldr	r3, [pc, #540]	; (8006598 <_dtoa_r+0xbd0>)
 800637c:	4602      	mov	r2, r0
 800637e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006382:	f7ff bb3b 	b.w	80059fc <_dtoa_r+0x34>
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	3202      	adds	r2, #2
 800638a:	0092      	lsls	r2, r2, #2
 800638c:	f107 010c 	add.w	r1, r7, #12
 8006390:	300c      	adds	r0, #12
 8006392:	f7fd fbdd 	bl	8003b50 <memcpy>
 8006396:	2201      	movs	r2, #1
 8006398:	4629      	mov	r1, r5
 800639a:	4620      	mov	r0, r4
 800639c:	f001 f90a 	bl	80075b4 <__lshift>
 80063a0:	9b01      	ldr	r3, [sp, #4]
 80063a2:	f103 0901 	add.w	r9, r3, #1
 80063a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80063aa:	4413      	add	r3, r2
 80063ac:	9305      	str	r3, [sp, #20]
 80063ae:	f00a 0301 	and.w	r3, sl, #1
 80063b2:	46b8      	mov	r8, r7
 80063b4:	9304      	str	r3, [sp, #16]
 80063b6:	4607      	mov	r7, r0
 80063b8:	4631      	mov	r1, r6
 80063ba:	ee18 0a10 	vmov	r0, s16
 80063be:	f7ff fa77 	bl	80058b0 <quorem>
 80063c2:	4641      	mov	r1, r8
 80063c4:	9002      	str	r0, [sp, #8]
 80063c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80063ca:	ee18 0a10 	vmov	r0, s16
 80063ce:	f001 f961 	bl	8007694 <__mcmp>
 80063d2:	463a      	mov	r2, r7
 80063d4:	9003      	str	r0, [sp, #12]
 80063d6:	4631      	mov	r1, r6
 80063d8:	4620      	mov	r0, r4
 80063da:	f001 f977 	bl	80076cc <__mdiff>
 80063de:	68c2      	ldr	r2, [r0, #12]
 80063e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80063e4:	4605      	mov	r5, r0
 80063e6:	bb02      	cbnz	r2, 800642a <_dtoa_r+0xa62>
 80063e8:	4601      	mov	r1, r0
 80063ea:	ee18 0a10 	vmov	r0, s16
 80063ee:	f001 f951 	bl	8007694 <__mcmp>
 80063f2:	4602      	mov	r2, r0
 80063f4:	4629      	mov	r1, r5
 80063f6:	4620      	mov	r0, r4
 80063f8:	9207      	str	r2, [sp, #28]
 80063fa:	f000 febf 	bl	800717c <_Bfree>
 80063fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006402:	ea43 0102 	orr.w	r1, r3, r2
 8006406:	9b04      	ldr	r3, [sp, #16]
 8006408:	430b      	orrs	r3, r1
 800640a:	464d      	mov	r5, r9
 800640c:	d10f      	bne.n	800642e <_dtoa_r+0xa66>
 800640e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006412:	d02a      	beq.n	800646a <_dtoa_r+0xaa2>
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	dd02      	ble.n	8006420 <_dtoa_r+0xa58>
 800641a:	9b02      	ldr	r3, [sp, #8]
 800641c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006420:	f88b a000 	strb.w	sl, [fp]
 8006424:	e775      	b.n	8006312 <_dtoa_r+0x94a>
 8006426:	4638      	mov	r0, r7
 8006428:	e7ba      	b.n	80063a0 <_dtoa_r+0x9d8>
 800642a:	2201      	movs	r2, #1
 800642c:	e7e2      	b.n	80063f4 <_dtoa_r+0xa2c>
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	db04      	blt.n	800643e <_dtoa_r+0xa76>
 8006434:	9906      	ldr	r1, [sp, #24]
 8006436:	430b      	orrs	r3, r1
 8006438:	9904      	ldr	r1, [sp, #16]
 800643a:	430b      	orrs	r3, r1
 800643c:	d122      	bne.n	8006484 <_dtoa_r+0xabc>
 800643e:	2a00      	cmp	r2, #0
 8006440:	ddee      	ble.n	8006420 <_dtoa_r+0xa58>
 8006442:	ee18 1a10 	vmov	r1, s16
 8006446:	2201      	movs	r2, #1
 8006448:	4620      	mov	r0, r4
 800644a:	f001 f8b3 	bl	80075b4 <__lshift>
 800644e:	4631      	mov	r1, r6
 8006450:	ee08 0a10 	vmov	s16, r0
 8006454:	f001 f91e 	bl	8007694 <__mcmp>
 8006458:	2800      	cmp	r0, #0
 800645a:	dc03      	bgt.n	8006464 <_dtoa_r+0xa9c>
 800645c:	d1e0      	bne.n	8006420 <_dtoa_r+0xa58>
 800645e:	f01a 0f01 	tst.w	sl, #1
 8006462:	d0dd      	beq.n	8006420 <_dtoa_r+0xa58>
 8006464:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006468:	d1d7      	bne.n	800641a <_dtoa_r+0xa52>
 800646a:	2339      	movs	r3, #57	; 0x39
 800646c:	f88b 3000 	strb.w	r3, [fp]
 8006470:	462b      	mov	r3, r5
 8006472:	461d      	mov	r5, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800647a:	2a39      	cmp	r2, #57	; 0x39
 800647c:	d071      	beq.n	8006562 <_dtoa_r+0xb9a>
 800647e:	3201      	adds	r2, #1
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	e746      	b.n	8006312 <_dtoa_r+0x94a>
 8006484:	2a00      	cmp	r2, #0
 8006486:	dd07      	ble.n	8006498 <_dtoa_r+0xad0>
 8006488:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800648c:	d0ed      	beq.n	800646a <_dtoa_r+0xaa2>
 800648e:	f10a 0301 	add.w	r3, sl, #1
 8006492:	f88b 3000 	strb.w	r3, [fp]
 8006496:	e73c      	b.n	8006312 <_dtoa_r+0x94a>
 8006498:	9b05      	ldr	r3, [sp, #20]
 800649a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800649e:	4599      	cmp	r9, r3
 80064a0:	d047      	beq.n	8006532 <_dtoa_r+0xb6a>
 80064a2:	ee18 1a10 	vmov	r1, s16
 80064a6:	2300      	movs	r3, #0
 80064a8:	220a      	movs	r2, #10
 80064aa:	4620      	mov	r0, r4
 80064ac:	f000 fe88 	bl	80071c0 <__multadd>
 80064b0:	45b8      	cmp	r8, r7
 80064b2:	ee08 0a10 	vmov	s16, r0
 80064b6:	f04f 0300 	mov.w	r3, #0
 80064ba:	f04f 020a 	mov.w	r2, #10
 80064be:	4641      	mov	r1, r8
 80064c0:	4620      	mov	r0, r4
 80064c2:	d106      	bne.n	80064d2 <_dtoa_r+0xb0a>
 80064c4:	f000 fe7c 	bl	80071c0 <__multadd>
 80064c8:	4680      	mov	r8, r0
 80064ca:	4607      	mov	r7, r0
 80064cc:	f109 0901 	add.w	r9, r9, #1
 80064d0:	e772      	b.n	80063b8 <_dtoa_r+0x9f0>
 80064d2:	f000 fe75 	bl	80071c0 <__multadd>
 80064d6:	4639      	mov	r1, r7
 80064d8:	4680      	mov	r8, r0
 80064da:	2300      	movs	r3, #0
 80064dc:	220a      	movs	r2, #10
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 fe6e 	bl	80071c0 <__multadd>
 80064e4:	4607      	mov	r7, r0
 80064e6:	e7f1      	b.n	80064cc <_dtoa_r+0xb04>
 80064e8:	9b03      	ldr	r3, [sp, #12]
 80064ea:	9302      	str	r3, [sp, #8]
 80064ec:	9d01      	ldr	r5, [sp, #4]
 80064ee:	ee18 0a10 	vmov	r0, s16
 80064f2:	4631      	mov	r1, r6
 80064f4:	f7ff f9dc 	bl	80058b0 <quorem>
 80064f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80064fc:	9b01      	ldr	r3, [sp, #4]
 80064fe:	f805 ab01 	strb.w	sl, [r5], #1
 8006502:	1aea      	subs	r2, r5, r3
 8006504:	9b02      	ldr	r3, [sp, #8]
 8006506:	4293      	cmp	r3, r2
 8006508:	dd09      	ble.n	800651e <_dtoa_r+0xb56>
 800650a:	ee18 1a10 	vmov	r1, s16
 800650e:	2300      	movs	r3, #0
 8006510:	220a      	movs	r2, #10
 8006512:	4620      	mov	r0, r4
 8006514:	f000 fe54 	bl	80071c0 <__multadd>
 8006518:	ee08 0a10 	vmov	s16, r0
 800651c:	e7e7      	b.n	80064ee <_dtoa_r+0xb26>
 800651e:	9b02      	ldr	r3, [sp, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	bfc8      	it	gt
 8006524:	461d      	movgt	r5, r3
 8006526:	9b01      	ldr	r3, [sp, #4]
 8006528:	bfd8      	it	le
 800652a:	2501      	movle	r5, #1
 800652c:	441d      	add	r5, r3
 800652e:	f04f 0800 	mov.w	r8, #0
 8006532:	ee18 1a10 	vmov	r1, s16
 8006536:	2201      	movs	r2, #1
 8006538:	4620      	mov	r0, r4
 800653a:	f001 f83b 	bl	80075b4 <__lshift>
 800653e:	4631      	mov	r1, r6
 8006540:	ee08 0a10 	vmov	s16, r0
 8006544:	f001 f8a6 	bl	8007694 <__mcmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	dc91      	bgt.n	8006470 <_dtoa_r+0xaa8>
 800654c:	d102      	bne.n	8006554 <_dtoa_r+0xb8c>
 800654e:	f01a 0f01 	tst.w	sl, #1
 8006552:	d18d      	bne.n	8006470 <_dtoa_r+0xaa8>
 8006554:	462b      	mov	r3, r5
 8006556:	461d      	mov	r5, r3
 8006558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800655c:	2a30      	cmp	r2, #48	; 0x30
 800655e:	d0fa      	beq.n	8006556 <_dtoa_r+0xb8e>
 8006560:	e6d7      	b.n	8006312 <_dtoa_r+0x94a>
 8006562:	9a01      	ldr	r2, [sp, #4]
 8006564:	429a      	cmp	r2, r3
 8006566:	d184      	bne.n	8006472 <_dtoa_r+0xaaa>
 8006568:	9b00      	ldr	r3, [sp, #0]
 800656a:	3301      	adds	r3, #1
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	2331      	movs	r3, #49	; 0x31
 8006570:	7013      	strb	r3, [r2, #0]
 8006572:	e6ce      	b.n	8006312 <_dtoa_r+0x94a>
 8006574:	4b09      	ldr	r3, [pc, #36]	; (800659c <_dtoa_r+0xbd4>)
 8006576:	f7ff ba95 	b.w	8005aa4 <_dtoa_r+0xdc>
 800657a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800657c:	2b00      	cmp	r3, #0
 800657e:	f47f aa6e 	bne.w	8005a5e <_dtoa_r+0x96>
 8006582:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <_dtoa_r+0xbd8>)
 8006584:	f7ff ba8e 	b.w	8005aa4 <_dtoa_r+0xdc>
 8006588:	9b02      	ldr	r3, [sp, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	dcae      	bgt.n	80064ec <_dtoa_r+0xb24>
 800658e:	9b06      	ldr	r3, [sp, #24]
 8006590:	2b02      	cmp	r3, #2
 8006592:	f73f aea8 	bgt.w	80062e6 <_dtoa_r+0x91e>
 8006596:	e7a9      	b.n	80064ec <_dtoa_r+0xb24>
 8006598:	08008a20 	.word	0x08008a20
 800659c:	08008824 	.word	0x08008824
 80065a0:	080089a1 	.word	0x080089a1

080065a4 <__sflush_r>:
 80065a4:	898a      	ldrh	r2, [r1, #12]
 80065a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065aa:	4605      	mov	r5, r0
 80065ac:	0710      	lsls	r0, r2, #28
 80065ae:	460c      	mov	r4, r1
 80065b0:	d458      	bmi.n	8006664 <__sflush_r+0xc0>
 80065b2:	684b      	ldr	r3, [r1, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	dc05      	bgt.n	80065c4 <__sflush_r+0x20>
 80065b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	dc02      	bgt.n	80065c4 <__sflush_r+0x20>
 80065be:	2000      	movs	r0, #0
 80065c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065c6:	2e00      	cmp	r6, #0
 80065c8:	d0f9      	beq.n	80065be <__sflush_r+0x1a>
 80065ca:	2300      	movs	r3, #0
 80065cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065d0:	682f      	ldr	r7, [r5, #0]
 80065d2:	602b      	str	r3, [r5, #0]
 80065d4:	d032      	beq.n	800663c <__sflush_r+0x98>
 80065d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	075a      	lsls	r2, r3, #29
 80065dc:	d505      	bpl.n	80065ea <__sflush_r+0x46>
 80065de:	6863      	ldr	r3, [r4, #4]
 80065e0:	1ac0      	subs	r0, r0, r3
 80065e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065e4:	b10b      	cbz	r3, 80065ea <__sflush_r+0x46>
 80065e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065e8:	1ac0      	subs	r0, r0, r3
 80065ea:	2300      	movs	r3, #0
 80065ec:	4602      	mov	r2, r0
 80065ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065f0:	6a21      	ldr	r1, [r4, #32]
 80065f2:	4628      	mov	r0, r5
 80065f4:	47b0      	blx	r6
 80065f6:	1c43      	adds	r3, r0, #1
 80065f8:	89a3      	ldrh	r3, [r4, #12]
 80065fa:	d106      	bne.n	800660a <__sflush_r+0x66>
 80065fc:	6829      	ldr	r1, [r5, #0]
 80065fe:	291d      	cmp	r1, #29
 8006600:	d82c      	bhi.n	800665c <__sflush_r+0xb8>
 8006602:	4a2a      	ldr	r2, [pc, #168]	; (80066ac <__sflush_r+0x108>)
 8006604:	40ca      	lsrs	r2, r1
 8006606:	07d6      	lsls	r6, r2, #31
 8006608:	d528      	bpl.n	800665c <__sflush_r+0xb8>
 800660a:	2200      	movs	r2, #0
 800660c:	6062      	str	r2, [r4, #4]
 800660e:	04d9      	lsls	r1, r3, #19
 8006610:	6922      	ldr	r2, [r4, #16]
 8006612:	6022      	str	r2, [r4, #0]
 8006614:	d504      	bpl.n	8006620 <__sflush_r+0x7c>
 8006616:	1c42      	adds	r2, r0, #1
 8006618:	d101      	bne.n	800661e <__sflush_r+0x7a>
 800661a:	682b      	ldr	r3, [r5, #0]
 800661c:	b903      	cbnz	r3, 8006620 <__sflush_r+0x7c>
 800661e:	6560      	str	r0, [r4, #84]	; 0x54
 8006620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006622:	602f      	str	r7, [r5, #0]
 8006624:	2900      	cmp	r1, #0
 8006626:	d0ca      	beq.n	80065be <__sflush_r+0x1a>
 8006628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800662c:	4299      	cmp	r1, r3
 800662e:	d002      	beq.n	8006636 <__sflush_r+0x92>
 8006630:	4628      	mov	r0, r5
 8006632:	f001 fa3b 	bl	8007aac <_free_r>
 8006636:	2000      	movs	r0, #0
 8006638:	6360      	str	r0, [r4, #52]	; 0x34
 800663a:	e7c1      	b.n	80065c0 <__sflush_r+0x1c>
 800663c:	6a21      	ldr	r1, [r4, #32]
 800663e:	2301      	movs	r3, #1
 8006640:	4628      	mov	r0, r5
 8006642:	47b0      	blx	r6
 8006644:	1c41      	adds	r1, r0, #1
 8006646:	d1c7      	bne.n	80065d8 <__sflush_r+0x34>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0c4      	beq.n	80065d8 <__sflush_r+0x34>
 800664e:	2b1d      	cmp	r3, #29
 8006650:	d001      	beq.n	8006656 <__sflush_r+0xb2>
 8006652:	2b16      	cmp	r3, #22
 8006654:	d101      	bne.n	800665a <__sflush_r+0xb6>
 8006656:	602f      	str	r7, [r5, #0]
 8006658:	e7b1      	b.n	80065be <__sflush_r+0x1a>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006660:	81a3      	strh	r3, [r4, #12]
 8006662:	e7ad      	b.n	80065c0 <__sflush_r+0x1c>
 8006664:	690f      	ldr	r7, [r1, #16]
 8006666:	2f00      	cmp	r7, #0
 8006668:	d0a9      	beq.n	80065be <__sflush_r+0x1a>
 800666a:	0793      	lsls	r3, r2, #30
 800666c:	680e      	ldr	r6, [r1, #0]
 800666e:	bf08      	it	eq
 8006670:	694b      	ldreq	r3, [r1, #20]
 8006672:	600f      	str	r7, [r1, #0]
 8006674:	bf18      	it	ne
 8006676:	2300      	movne	r3, #0
 8006678:	eba6 0807 	sub.w	r8, r6, r7
 800667c:	608b      	str	r3, [r1, #8]
 800667e:	f1b8 0f00 	cmp.w	r8, #0
 8006682:	dd9c      	ble.n	80065be <__sflush_r+0x1a>
 8006684:	6a21      	ldr	r1, [r4, #32]
 8006686:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006688:	4643      	mov	r3, r8
 800668a:	463a      	mov	r2, r7
 800668c:	4628      	mov	r0, r5
 800668e:	47b0      	blx	r6
 8006690:	2800      	cmp	r0, #0
 8006692:	dc06      	bgt.n	80066a2 <__sflush_r+0xfe>
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800669a:	81a3      	strh	r3, [r4, #12]
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
 80066a0:	e78e      	b.n	80065c0 <__sflush_r+0x1c>
 80066a2:	4407      	add	r7, r0
 80066a4:	eba8 0800 	sub.w	r8, r8, r0
 80066a8:	e7e9      	b.n	800667e <__sflush_r+0xda>
 80066aa:	bf00      	nop
 80066ac:	20400001 	.word	0x20400001

080066b0 <_fflush_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	690b      	ldr	r3, [r1, #16]
 80066b4:	4605      	mov	r5, r0
 80066b6:	460c      	mov	r4, r1
 80066b8:	b913      	cbnz	r3, 80066c0 <_fflush_r+0x10>
 80066ba:	2500      	movs	r5, #0
 80066bc:	4628      	mov	r0, r5
 80066be:	bd38      	pop	{r3, r4, r5, pc}
 80066c0:	b118      	cbz	r0, 80066ca <_fflush_r+0x1a>
 80066c2:	6983      	ldr	r3, [r0, #24]
 80066c4:	b90b      	cbnz	r3, 80066ca <_fflush_r+0x1a>
 80066c6:	f000 f887 	bl	80067d8 <__sinit>
 80066ca:	4b14      	ldr	r3, [pc, #80]	; (800671c <_fflush_r+0x6c>)
 80066cc:	429c      	cmp	r4, r3
 80066ce:	d11b      	bne.n	8006708 <_fflush_r+0x58>
 80066d0:	686c      	ldr	r4, [r5, #4]
 80066d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0ef      	beq.n	80066ba <_fflush_r+0xa>
 80066da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066dc:	07d0      	lsls	r0, r2, #31
 80066de:	d404      	bmi.n	80066ea <_fflush_r+0x3a>
 80066e0:	0599      	lsls	r1, r3, #22
 80066e2:	d402      	bmi.n	80066ea <_fflush_r+0x3a>
 80066e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066e6:	f000 fc88 	bl	8006ffa <__retarget_lock_acquire_recursive>
 80066ea:	4628      	mov	r0, r5
 80066ec:	4621      	mov	r1, r4
 80066ee:	f7ff ff59 	bl	80065a4 <__sflush_r>
 80066f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066f4:	07da      	lsls	r2, r3, #31
 80066f6:	4605      	mov	r5, r0
 80066f8:	d4e0      	bmi.n	80066bc <_fflush_r+0xc>
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	059b      	lsls	r3, r3, #22
 80066fe:	d4dd      	bmi.n	80066bc <_fflush_r+0xc>
 8006700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006702:	f000 fc7b 	bl	8006ffc <__retarget_lock_release_recursive>
 8006706:	e7d9      	b.n	80066bc <_fflush_r+0xc>
 8006708:	4b05      	ldr	r3, [pc, #20]	; (8006720 <_fflush_r+0x70>)
 800670a:	429c      	cmp	r4, r3
 800670c:	d101      	bne.n	8006712 <_fflush_r+0x62>
 800670e:	68ac      	ldr	r4, [r5, #8]
 8006710:	e7df      	b.n	80066d2 <_fflush_r+0x22>
 8006712:	4b04      	ldr	r3, [pc, #16]	; (8006724 <_fflush_r+0x74>)
 8006714:	429c      	cmp	r4, r3
 8006716:	bf08      	it	eq
 8006718:	68ec      	ldreq	r4, [r5, #12]
 800671a:	e7da      	b.n	80066d2 <_fflush_r+0x22>
 800671c:	08008a54 	.word	0x08008a54
 8006720:	08008a74 	.word	0x08008a74
 8006724:	08008a34 	.word	0x08008a34

08006728 <std>:
 8006728:	2300      	movs	r3, #0
 800672a:	b510      	push	{r4, lr}
 800672c:	4604      	mov	r4, r0
 800672e:	e9c0 3300 	strd	r3, r3, [r0]
 8006732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006736:	6083      	str	r3, [r0, #8]
 8006738:	8181      	strh	r1, [r0, #12]
 800673a:	6643      	str	r3, [r0, #100]	; 0x64
 800673c:	81c2      	strh	r2, [r0, #14]
 800673e:	6183      	str	r3, [r0, #24]
 8006740:	4619      	mov	r1, r3
 8006742:	2208      	movs	r2, #8
 8006744:	305c      	adds	r0, #92	; 0x5c
 8006746:	f7fd fa11 	bl	8003b6c <memset>
 800674a:	4b05      	ldr	r3, [pc, #20]	; (8006760 <std+0x38>)
 800674c:	6263      	str	r3, [r4, #36]	; 0x24
 800674e:	4b05      	ldr	r3, [pc, #20]	; (8006764 <std+0x3c>)
 8006750:	62a3      	str	r3, [r4, #40]	; 0x28
 8006752:	4b05      	ldr	r3, [pc, #20]	; (8006768 <std+0x40>)
 8006754:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006756:	4b05      	ldr	r3, [pc, #20]	; (800676c <std+0x44>)
 8006758:	6224      	str	r4, [r4, #32]
 800675a:	6323      	str	r3, [r4, #48]	; 0x30
 800675c:	bd10      	pop	{r4, pc}
 800675e:	bf00      	nop
 8006760:	08008209 	.word	0x08008209
 8006764:	0800822b 	.word	0x0800822b
 8006768:	08008263 	.word	0x08008263
 800676c:	08008287 	.word	0x08008287

08006770 <_cleanup_r>:
 8006770:	4901      	ldr	r1, [pc, #4]	; (8006778 <_cleanup_r+0x8>)
 8006772:	f000 b8af 	b.w	80068d4 <_fwalk_reent>
 8006776:	bf00      	nop
 8006778:	080066b1 	.word	0x080066b1

0800677c <__sfmoreglue>:
 800677c:	b570      	push	{r4, r5, r6, lr}
 800677e:	2268      	movs	r2, #104	; 0x68
 8006780:	1e4d      	subs	r5, r1, #1
 8006782:	4355      	muls	r5, r2
 8006784:	460e      	mov	r6, r1
 8006786:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800678a:	f001 f9fb 	bl	8007b84 <_malloc_r>
 800678e:	4604      	mov	r4, r0
 8006790:	b140      	cbz	r0, 80067a4 <__sfmoreglue+0x28>
 8006792:	2100      	movs	r1, #0
 8006794:	e9c0 1600 	strd	r1, r6, [r0]
 8006798:	300c      	adds	r0, #12
 800679a:	60a0      	str	r0, [r4, #8]
 800679c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067a0:	f7fd f9e4 	bl	8003b6c <memset>
 80067a4:	4620      	mov	r0, r4
 80067a6:	bd70      	pop	{r4, r5, r6, pc}

080067a8 <__sfp_lock_acquire>:
 80067a8:	4801      	ldr	r0, [pc, #4]	; (80067b0 <__sfp_lock_acquire+0x8>)
 80067aa:	f000 bc26 	b.w	8006ffa <__retarget_lock_acquire_recursive>
 80067ae:	bf00      	nop
 80067b0:	20000269 	.word	0x20000269

080067b4 <__sfp_lock_release>:
 80067b4:	4801      	ldr	r0, [pc, #4]	; (80067bc <__sfp_lock_release+0x8>)
 80067b6:	f000 bc21 	b.w	8006ffc <__retarget_lock_release_recursive>
 80067ba:	bf00      	nop
 80067bc:	20000269 	.word	0x20000269

080067c0 <__sinit_lock_acquire>:
 80067c0:	4801      	ldr	r0, [pc, #4]	; (80067c8 <__sinit_lock_acquire+0x8>)
 80067c2:	f000 bc1a 	b.w	8006ffa <__retarget_lock_acquire_recursive>
 80067c6:	bf00      	nop
 80067c8:	2000026a 	.word	0x2000026a

080067cc <__sinit_lock_release>:
 80067cc:	4801      	ldr	r0, [pc, #4]	; (80067d4 <__sinit_lock_release+0x8>)
 80067ce:	f000 bc15 	b.w	8006ffc <__retarget_lock_release_recursive>
 80067d2:	bf00      	nop
 80067d4:	2000026a 	.word	0x2000026a

080067d8 <__sinit>:
 80067d8:	b510      	push	{r4, lr}
 80067da:	4604      	mov	r4, r0
 80067dc:	f7ff fff0 	bl	80067c0 <__sinit_lock_acquire>
 80067e0:	69a3      	ldr	r3, [r4, #24]
 80067e2:	b11b      	cbz	r3, 80067ec <__sinit+0x14>
 80067e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e8:	f7ff bff0 	b.w	80067cc <__sinit_lock_release>
 80067ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80067f0:	6523      	str	r3, [r4, #80]	; 0x50
 80067f2:	4b13      	ldr	r3, [pc, #76]	; (8006840 <__sinit+0x68>)
 80067f4:	4a13      	ldr	r2, [pc, #76]	; (8006844 <__sinit+0x6c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80067fa:	42a3      	cmp	r3, r4
 80067fc:	bf04      	itt	eq
 80067fe:	2301      	moveq	r3, #1
 8006800:	61a3      	streq	r3, [r4, #24]
 8006802:	4620      	mov	r0, r4
 8006804:	f000 f820 	bl	8006848 <__sfp>
 8006808:	6060      	str	r0, [r4, #4]
 800680a:	4620      	mov	r0, r4
 800680c:	f000 f81c 	bl	8006848 <__sfp>
 8006810:	60a0      	str	r0, [r4, #8]
 8006812:	4620      	mov	r0, r4
 8006814:	f000 f818 	bl	8006848 <__sfp>
 8006818:	2200      	movs	r2, #0
 800681a:	60e0      	str	r0, [r4, #12]
 800681c:	2104      	movs	r1, #4
 800681e:	6860      	ldr	r0, [r4, #4]
 8006820:	f7ff ff82 	bl	8006728 <std>
 8006824:	68a0      	ldr	r0, [r4, #8]
 8006826:	2201      	movs	r2, #1
 8006828:	2109      	movs	r1, #9
 800682a:	f7ff ff7d 	bl	8006728 <std>
 800682e:	68e0      	ldr	r0, [r4, #12]
 8006830:	2202      	movs	r2, #2
 8006832:	2112      	movs	r1, #18
 8006834:	f7ff ff78 	bl	8006728 <std>
 8006838:	2301      	movs	r3, #1
 800683a:	61a3      	str	r3, [r4, #24]
 800683c:	e7d2      	b.n	80067e4 <__sinit+0xc>
 800683e:	bf00      	nop
 8006840:	08008810 	.word	0x08008810
 8006844:	08006771 	.word	0x08006771

08006848 <__sfp>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	4607      	mov	r7, r0
 800684c:	f7ff ffac 	bl	80067a8 <__sfp_lock_acquire>
 8006850:	4b1e      	ldr	r3, [pc, #120]	; (80068cc <__sfp+0x84>)
 8006852:	681e      	ldr	r6, [r3, #0]
 8006854:	69b3      	ldr	r3, [r6, #24]
 8006856:	b913      	cbnz	r3, 800685e <__sfp+0x16>
 8006858:	4630      	mov	r0, r6
 800685a:	f7ff ffbd 	bl	80067d8 <__sinit>
 800685e:	3648      	adds	r6, #72	; 0x48
 8006860:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006864:	3b01      	subs	r3, #1
 8006866:	d503      	bpl.n	8006870 <__sfp+0x28>
 8006868:	6833      	ldr	r3, [r6, #0]
 800686a:	b30b      	cbz	r3, 80068b0 <__sfp+0x68>
 800686c:	6836      	ldr	r6, [r6, #0]
 800686e:	e7f7      	b.n	8006860 <__sfp+0x18>
 8006870:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006874:	b9d5      	cbnz	r5, 80068ac <__sfp+0x64>
 8006876:	4b16      	ldr	r3, [pc, #88]	; (80068d0 <__sfp+0x88>)
 8006878:	60e3      	str	r3, [r4, #12]
 800687a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800687e:	6665      	str	r5, [r4, #100]	; 0x64
 8006880:	f000 fbba 	bl	8006ff8 <__retarget_lock_init_recursive>
 8006884:	f7ff ff96 	bl	80067b4 <__sfp_lock_release>
 8006888:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800688c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006890:	6025      	str	r5, [r4, #0]
 8006892:	61a5      	str	r5, [r4, #24]
 8006894:	2208      	movs	r2, #8
 8006896:	4629      	mov	r1, r5
 8006898:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800689c:	f7fd f966 	bl	8003b6c <memset>
 80068a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068a8:	4620      	mov	r0, r4
 80068aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ac:	3468      	adds	r4, #104	; 0x68
 80068ae:	e7d9      	b.n	8006864 <__sfp+0x1c>
 80068b0:	2104      	movs	r1, #4
 80068b2:	4638      	mov	r0, r7
 80068b4:	f7ff ff62 	bl	800677c <__sfmoreglue>
 80068b8:	4604      	mov	r4, r0
 80068ba:	6030      	str	r0, [r6, #0]
 80068bc:	2800      	cmp	r0, #0
 80068be:	d1d5      	bne.n	800686c <__sfp+0x24>
 80068c0:	f7ff ff78 	bl	80067b4 <__sfp_lock_release>
 80068c4:	230c      	movs	r3, #12
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	e7ee      	b.n	80068a8 <__sfp+0x60>
 80068ca:	bf00      	nop
 80068cc:	08008810 	.word	0x08008810
 80068d0:	ffff0001 	.word	0xffff0001

080068d4 <_fwalk_reent>:
 80068d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d8:	4606      	mov	r6, r0
 80068da:	4688      	mov	r8, r1
 80068dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068e0:	2700      	movs	r7, #0
 80068e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068e6:	f1b9 0901 	subs.w	r9, r9, #1
 80068ea:	d505      	bpl.n	80068f8 <_fwalk_reent+0x24>
 80068ec:	6824      	ldr	r4, [r4, #0]
 80068ee:	2c00      	cmp	r4, #0
 80068f0:	d1f7      	bne.n	80068e2 <_fwalk_reent+0xe>
 80068f2:	4638      	mov	r0, r7
 80068f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068f8:	89ab      	ldrh	r3, [r5, #12]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d907      	bls.n	800690e <_fwalk_reent+0x3a>
 80068fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006902:	3301      	adds	r3, #1
 8006904:	d003      	beq.n	800690e <_fwalk_reent+0x3a>
 8006906:	4629      	mov	r1, r5
 8006908:	4630      	mov	r0, r6
 800690a:	47c0      	blx	r8
 800690c:	4307      	orrs	r7, r0
 800690e:	3568      	adds	r5, #104	; 0x68
 8006910:	e7e9      	b.n	80068e6 <_fwalk_reent+0x12>

08006912 <rshift>:
 8006912:	6903      	ldr	r3, [r0, #16]
 8006914:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800691c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006920:	f100 0414 	add.w	r4, r0, #20
 8006924:	dd45      	ble.n	80069b2 <rshift+0xa0>
 8006926:	f011 011f 	ands.w	r1, r1, #31
 800692a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800692e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006932:	d10c      	bne.n	800694e <rshift+0x3c>
 8006934:	f100 0710 	add.w	r7, r0, #16
 8006938:	4629      	mov	r1, r5
 800693a:	42b1      	cmp	r1, r6
 800693c:	d334      	bcc.n	80069a8 <rshift+0x96>
 800693e:	1a9b      	subs	r3, r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	1eea      	subs	r2, r5, #3
 8006944:	4296      	cmp	r6, r2
 8006946:	bf38      	it	cc
 8006948:	2300      	movcc	r3, #0
 800694a:	4423      	add	r3, r4
 800694c:	e015      	b.n	800697a <rshift+0x68>
 800694e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006952:	f1c1 0820 	rsb	r8, r1, #32
 8006956:	40cf      	lsrs	r7, r1
 8006958:	f105 0e04 	add.w	lr, r5, #4
 800695c:	46a1      	mov	r9, r4
 800695e:	4576      	cmp	r6, lr
 8006960:	46f4      	mov	ip, lr
 8006962:	d815      	bhi.n	8006990 <rshift+0x7e>
 8006964:	1a9a      	subs	r2, r3, r2
 8006966:	0092      	lsls	r2, r2, #2
 8006968:	3a04      	subs	r2, #4
 800696a:	3501      	adds	r5, #1
 800696c:	42ae      	cmp	r6, r5
 800696e:	bf38      	it	cc
 8006970:	2200      	movcc	r2, #0
 8006972:	18a3      	adds	r3, r4, r2
 8006974:	50a7      	str	r7, [r4, r2]
 8006976:	b107      	cbz	r7, 800697a <rshift+0x68>
 8006978:	3304      	adds	r3, #4
 800697a:	1b1a      	subs	r2, r3, r4
 800697c:	42a3      	cmp	r3, r4
 800697e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006982:	bf08      	it	eq
 8006984:	2300      	moveq	r3, #0
 8006986:	6102      	str	r2, [r0, #16]
 8006988:	bf08      	it	eq
 800698a:	6143      	streq	r3, [r0, #20]
 800698c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006990:	f8dc c000 	ldr.w	ip, [ip]
 8006994:	fa0c fc08 	lsl.w	ip, ip, r8
 8006998:	ea4c 0707 	orr.w	r7, ip, r7
 800699c:	f849 7b04 	str.w	r7, [r9], #4
 80069a0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80069a4:	40cf      	lsrs	r7, r1
 80069a6:	e7da      	b.n	800695e <rshift+0x4c>
 80069a8:	f851 cb04 	ldr.w	ip, [r1], #4
 80069ac:	f847 cf04 	str.w	ip, [r7, #4]!
 80069b0:	e7c3      	b.n	800693a <rshift+0x28>
 80069b2:	4623      	mov	r3, r4
 80069b4:	e7e1      	b.n	800697a <rshift+0x68>

080069b6 <__hexdig_fun>:
 80069b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80069ba:	2b09      	cmp	r3, #9
 80069bc:	d802      	bhi.n	80069c4 <__hexdig_fun+0xe>
 80069be:	3820      	subs	r0, #32
 80069c0:	b2c0      	uxtb	r0, r0
 80069c2:	4770      	bx	lr
 80069c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80069c8:	2b05      	cmp	r3, #5
 80069ca:	d801      	bhi.n	80069d0 <__hexdig_fun+0x1a>
 80069cc:	3847      	subs	r0, #71	; 0x47
 80069ce:	e7f7      	b.n	80069c0 <__hexdig_fun+0xa>
 80069d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80069d4:	2b05      	cmp	r3, #5
 80069d6:	d801      	bhi.n	80069dc <__hexdig_fun+0x26>
 80069d8:	3827      	subs	r0, #39	; 0x27
 80069da:	e7f1      	b.n	80069c0 <__hexdig_fun+0xa>
 80069dc:	2000      	movs	r0, #0
 80069de:	4770      	bx	lr

080069e0 <__gethex>:
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	ed2d 8b02 	vpush	{d8}
 80069e8:	b089      	sub	sp, #36	; 0x24
 80069ea:	ee08 0a10 	vmov	s16, r0
 80069ee:	9304      	str	r3, [sp, #16]
 80069f0:	4bb4      	ldr	r3, [pc, #720]	; (8006cc4 <__gethex+0x2e4>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	4618      	mov	r0, r3
 80069f8:	468b      	mov	fp, r1
 80069fa:	4690      	mov	r8, r2
 80069fc:	f7f9 fbe8 	bl	80001d0 <strlen>
 8006a00:	9b01      	ldr	r3, [sp, #4]
 8006a02:	f8db 2000 	ldr.w	r2, [fp]
 8006a06:	4403      	add	r3, r0
 8006a08:	4682      	mov	sl, r0
 8006a0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006a0e:	9305      	str	r3, [sp, #20]
 8006a10:	1c93      	adds	r3, r2, #2
 8006a12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006a16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006a1a:	32fe      	adds	r2, #254	; 0xfe
 8006a1c:	18d1      	adds	r1, r2, r3
 8006a1e:	461f      	mov	r7, r3
 8006a20:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006a24:	9100      	str	r1, [sp, #0]
 8006a26:	2830      	cmp	r0, #48	; 0x30
 8006a28:	d0f8      	beq.n	8006a1c <__gethex+0x3c>
 8006a2a:	f7ff ffc4 	bl	80069b6 <__hexdig_fun>
 8006a2e:	4604      	mov	r4, r0
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d13a      	bne.n	8006aaa <__gethex+0xca>
 8006a34:	9901      	ldr	r1, [sp, #4]
 8006a36:	4652      	mov	r2, sl
 8006a38:	4638      	mov	r0, r7
 8006a3a:	f001 fc28 	bl	800828e <strncmp>
 8006a3e:	4605      	mov	r5, r0
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d168      	bne.n	8006b16 <__gethex+0x136>
 8006a44:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006a48:	eb07 060a 	add.w	r6, r7, sl
 8006a4c:	f7ff ffb3 	bl	80069b6 <__hexdig_fun>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d062      	beq.n	8006b1a <__gethex+0x13a>
 8006a54:	4633      	mov	r3, r6
 8006a56:	7818      	ldrb	r0, [r3, #0]
 8006a58:	2830      	cmp	r0, #48	; 0x30
 8006a5a:	461f      	mov	r7, r3
 8006a5c:	f103 0301 	add.w	r3, r3, #1
 8006a60:	d0f9      	beq.n	8006a56 <__gethex+0x76>
 8006a62:	f7ff ffa8 	bl	80069b6 <__hexdig_fun>
 8006a66:	2301      	movs	r3, #1
 8006a68:	fab0 f480 	clz	r4, r0
 8006a6c:	0964      	lsrs	r4, r4, #5
 8006a6e:	4635      	mov	r5, r6
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	463a      	mov	r2, r7
 8006a74:	4616      	mov	r6, r2
 8006a76:	3201      	adds	r2, #1
 8006a78:	7830      	ldrb	r0, [r6, #0]
 8006a7a:	f7ff ff9c 	bl	80069b6 <__hexdig_fun>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d1f8      	bne.n	8006a74 <__gethex+0x94>
 8006a82:	9901      	ldr	r1, [sp, #4]
 8006a84:	4652      	mov	r2, sl
 8006a86:	4630      	mov	r0, r6
 8006a88:	f001 fc01 	bl	800828e <strncmp>
 8006a8c:	b980      	cbnz	r0, 8006ab0 <__gethex+0xd0>
 8006a8e:	b94d      	cbnz	r5, 8006aa4 <__gethex+0xc4>
 8006a90:	eb06 050a 	add.w	r5, r6, sl
 8006a94:	462a      	mov	r2, r5
 8006a96:	4616      	mov	r6, r2
 8006a98:	3201      	adds	r2, #1
 8006a9a:	7830      	ldrb	r0, [r6, #0]
 8006a9c:	f7ff ff8b 	bl	80069b6 <__hexdig_fun>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d1f8      	bne.n	8006a96 <__gethex+0xb6>
 8006aa4:	1bad      	subs	r5, r5, r6
 8006aa6:	00ad      	lsls	r5, r5, #2
 8006aa8:	e004      	b.n	8006ab4 <__gethex+0xd4>
 8006aaa:	2400      	movs	r4, #0
 8006aac:	4625      	mov	r5, r4
 8006aae:	e7e0      	b.n	8006a72 <__gethex+0x92>
 8006ab0:	2d00      	cmp	r5, #0
 8006ab2:	d1f7      	bne.n	8006aa4 <__gethex+0xc4>
 8006ab4:	7833      	ldrb	r3, [r6, #0]
 8006ab6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006aba:	2b50      	cmp	r3, #80	; 0x50
 8006abc:	d13b      	bne.n	8006b36 <__gethex+0x156>
 8006abe:	7873      	ldrb	r3, [r6, #1]
 8006ac0:	2b2b      	cmp	r3, #43	; 0x2b
 8006ac2:	d02c      	beq.n	8006b1e <__gethex+0x13e>
 8006ac4:	2b2d      	cmp	r3, #45	; 0x2d
 8006ac6:	d02e      	beq.n	8006b26 <__gethex+0x146>
 8006ac8:	1c71      	adds	r1, r6, #1
 8006aca:	f04f 0900 	mov.w	r9, #0
 8006ace:	7808      	ldrb	r0, [r1, #0]
 8006ad0:	f7ff ff71 	bl	80069b6 <__hexdig_fun>
 8006ad4:	1e43      	subs	r3, r0, #1
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b18      	cmp	r3, #24
 8006ada:	d82c      	bhi.n	8006b36 <__gethex+0x156>
 8006adc:	f1a0 0210 	sub.w	r2, r0, #16
 8006ae0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ae4:	f7ff ff67 	bl	80069b6 <__hexdig_fun>
 8006ae8:	1e43      	subs	r3, r0, #1
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b18      	cmp	r3, #24
 8006aee:	d91d      	bls.n	8006b2c <__gethex+0x14c>
 8006af0:	f1b9 0f00 	cmp.w	r9, #0
 8006af4:	d000      	beq.n	8006af8 <__gethex+0x118>
 8006af6:	4252      	negs	r2, r2
 8006af8:	4415      	add	r5, r2
 8006afa:	f8cb 1000 	str.w	r1, [fp]
 8006afe:	b1e4      	cbz	r4, 8006b3a <__gethex+0x15a>
 8006b00:	9b00      	ldr	r3, [sp, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	bf14      	ite	ne
 8006b06:	2700      	movne	r7, #0
 8006b08:	2706      	moveq	r7, #6
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	b009      	add	sp, #36	; 0x24
 8006b0e:	ecbd 8b02 	vpop	{d8}
 8006b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b16:	463e      	mov	r6, r7
 8006b18:	4625      	mov	r5, r4
 8006b1a:	2401      	movs	r4, #1
 8006b1c:	e7ca      	b.n	8006ab4 <__gethex+0xd4>
 8006b1e:	f04f 0900 	mov.w	r9, #0
 8006b22:	1cb1      	adds	r1, r6, #2
 8006b24:	e7d3      	b.n	8006ace <__gethex+0xee>
 8006b26:	f04f 0901 	mov.w	r9, #1
 8006b2a:	e7fa      	b.n	8006b22 <__gethex+0x142>
 8006b2c:	230a      	movs	r3, #10
 8006b2e:	fb03 0202 	mla	r2, r3, r2, r0
 8006b32:	3a10      	subs	r2, #16
 8006b34:	e7d4      	b.n	8006ae0 <__gethex+0x100>
 8006b36:	4631      	mov	r1, r6
 8006b38:	e7df      	b.n	8006afa <__gethex+0x11a>
 8006b3a:	1bf3      	subs	r3, r6, r7
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	4621      	mov	r1, r4
 8006b40:	2b07      	cmp	r3, #7
 8006b42:	dc0b      	bgt.n	8006b5c <__gethex+0x17c>
 8006b44:	ee18 0a10 	vmov	r0, s16
 8006b48:	f000 fad8 	bl	80070fc <_Balloc>
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	b940      	cbnz	r0, 8006b62 <__gethex+0x182>
 8006b50:	4b5d      	ldr	r3, [pc, #372]	; (8006cc8 <__gethex+0x2e8>)
 8006b52:	4602      	mov	r2, r0
 8006b54:	21de      	movs	r1, #222	; 0xde
 8006b56:	485d      	ldr	r0, [pc, #372]	; (8006ccc <__gethex+0x2ec>)
 8006b58:	f001 fbcc 	bl	80082f4 <__assert_func>
 8006b5c:	3101      	adds	r1, #1
 8006b5e:	105b      	asrs	r3, r3, #1
 8006b60:	e7ee      	b.n	8006b40 <__gethex+0x160>
 8006b62:	f100 0914 	add.w	r9, r0, #20
 8006b66:	f04f 0b00 	mov.w	fp, #0
 8006b6a:	f1ca 0301 	rsb	r3, sl, #1
 8006b6e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b72:	f8cd b000 	str.w	fp, [sp]
 8006b76:	9306      	str	r3, [sp, #24]
 8006b78:	42b7      	cmp	r7, r6
 8006b7a:	d340      	bcc.n	8006bfe <__gethex+0x21e>
 8006b7c:	9802      	ldr	r0, [sp, #8]
 8006b7e:	9b00      	ldr	r3, [sp, #0]
 8006b80:	f840 3b04 	str.w	r3, [r0], #4
 8006b84:	eba0 0009 	sub.w	r0, r0, r9
 8006b88:	1080      	asrs	r0, r0, #2
 8006b8a:	0146      	lsls	r6, r0, #5
 8006b8c:	6120      	str	r0, [r4, #16]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fba6 	bl	80072e0 <__hi0bits>
 8006b94:	1a30      	subs	r0, r6, r0
 8006b96:	f8d8 6000 	ldr.w	r6, [r8]
 8006b9a:	42b0      	cmp	r0, r6
 8006b9c:	dd63      	ble.n	8006c66 <__gethex+0x286>
 8006b9e:	1b87      	subs	r7, r0, r6
 8006ba0:	4639      	mov	r1, r7
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 ff4a 	bl	8007a3c <__any_on>
 8006ba8:	4682      	mov	sl, r0
 8006baa:	b1a8      	cbz	r0, 8006bd8 <__gethex+0x1f8>
 8006bac:	1e7b      	subs	r3, r7, #1
 8006bae:	1159      	asrs	r1, r3, #5
 8006bb0:	f003 021f 	and.w	r2, r3, #31
 8006bb4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006bb8:	f04f 0a01 	mov.w	sl, #1
 8006bbc:	fa0a f202 	lsl.w	r2, sl, r2
 8006bc0:	420a      	tst	r2, r1
 8006bc2:	d009      	beq.n	8006bd8 <__gethex+0x1f8>
 8006bc4:	4553      	cmp	r3, sl
 8006bc6:	dd05      	ble.n	8006bd4 <__gethex+0x1f4>
 8006bc8:	1eb9      	subs	r1, r7, #2
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f000 ff36 	bl	8007a3c <__any_on>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d145      	bne.n	8006c60 <__gethex+0x280>
 8006bd4:	f04f 0a02 	mov.w	sl, #2
 8006bd8:	4639      	mov	r1, r7
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f7ff fe99 	bl	8006912 <rshift>
 8006be0:	443d      	add	r5, r7
 8006be2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006be6:	42ab      	cmp	r3, r5
 8006be8:	da4c      	bge.n	8006c84 <__gethex+0x2a4>
 8006bea:	ee18 0a10 	vmov	r0, s16
 8006bee:	4621      	mov	r1, r4
 8006bf0:	f000 fac4 	bl	800717c <_Bfree>
 8006bf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	27a3      	movs	r7, #163	; 0xa3
 8006bfc:	e785      	b.n	8006b0a <__gethex+0x12a>
 8006bfe:	1e73      	subs	r3, r6, #1
 8006c00:	9a05      	ldr	r2, [sp, #20]
 8006c02:	9303      	str	r3, [sp, #12]
 8006c04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d019      	beq.n	8006c40 <__gethex+0x260>
 8006c0c:	f1bb 0f20 	cmp.w	fp, #32
 8006c10:	d107      	bne.n	8006c22 <__gethex+0x242>
 8006c12:	9b02      	ldr	r3, [sp, #8]
 8006c14:	9a00      	ldr	r2, [sp, #0]
 8006c16:	f843 2b04 	str.w	r2, [r3], #4
 8006c1a:	9302      	str	r3, [sp, #8]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	469b      	mov	fp, r3
 8006c22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006c26:	f7ff fec6 	bl	80069b6 <__hexdig_fun>
 8006c2a:	9b00      	ldr	r3, [sp, #0]
 8006c2c:	f000 000f 	and.w	r0, r0, #15
 8006c30:	fa00 f00b 	lsl.w	r0, r0, fp
 8006c34:	4303      	orrs	r3, r0
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	f10b 0b04 	add.w	fp, fp, #4
 8006c3c:	9b03      	ldr	r3, [sp, #12]
 8006c3e:	e00d      	b.n	8006c5c <__gethex+0x27c>
 8006c40:	9b03      	ldr	r3, [sp, #12]
 8006c42:	9a06      	ldr	r2, [sp, #24]
 8006c44:	4413      	add	r3, r2
 8006c46:	42bb      	cmp	r3, r7
 8006c48:	d3e0      	bcc.n	8006c0c <__gethex+0x22c>
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	9901      	ldr	r1, [sp, #4]
 8006c4e:	9307      	str	r3, [sp, #28]
 8006c50:	4652      	mov	r2, sl
 8006c52:	f001 fb1c 	bl	800828e <strncmp>
 8006c56:	9b07      	ldr	r3, [sp, #28]
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d1d7      	bne.n	8006c0c <__gethex+0x22c>
 8006c5c:	461e      	mov	r6, r3
 8006c5e:	e78b      	b.n	8006b78 <__gethex+0x198>
 8006c60:	f04f 0a03 	mov.w	sl, #3
 8006c64:	e7b8      	b.n	8006bd8 <__gethex+0x1f8>
 8006c66:	da0a      	bge.n	8006c7e <__gethex+0x29e>
 8006c68:	1a37      	subs	r7, r6, r0
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	ee18 0a10 	vmov	r0, s16
 8006c70:	463a      	mov	r2, r7
 8006c72:	f000 fc9f 	bl	80075b4 <__lshift>
 8006c76:	1bed      	subs	r5, r5, r7
 8006c78:	4604      	mov	r4, r0
 8006c7a:	f100 0914 	add.w	r9, r0, #20
 8006c7e:	f04f 0a00 	mov.w	sl, #0
 8006c82:	e7ae      	b.n	8006be2 <__gethex+0x202>
 8006c84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006c88:	42a8      	cmp	r0, r5
 8006c8a:	dd72      	ble.n	8006d72 <__gethex+0x392>
 8006c8c:	1b45      	subs	r5, r0, r5
 8006c8e:	42ae      	cmp	r6, r5
 8006c90:	dc36      	bgt.n	8006d00 <__gethex+0x320>
 8006c92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d02a      	beq.n	8006cf0 <__gethex+0x310>
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d02c      	beq.n	8006cf8 <__gethex+0x318>
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d11c      	bne.n	8006cdc <__gethex+0x2fc>
 8006ca2:	42ae      	cmp	r6, r5
 8006ca4:	d11a      	bne.n	8006cdc <__gethex+0x2fc>
 8006ca6:	2e01      	cmp	r6, #1
 8006ca8:	d112      	bne.n	8006cd0 <__gethex+0x2f0>
 8006caa:	9a04      	ldr	r2, [sp, #16]
 8006cac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006cb0:	6013      	str	r3, [r2, #0]
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	6123      	str	r3, [r4, #16]
 8006cb6:	f8c9 3000 	str.w	r3, [r9]
 8006cba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006cbc:	2762      	movs	r7, #98	; 0x62
 8006cbe:	601c      	str	r4, [r3, #0]
 8006cc0:	e723      	b.n	8006b0a <__gethex+0x12a>
 8006cc2:	bf00      	nop
 8006cc4:	08008afc 	.word	0x08008afc
 8006cc8:	08008a20 	.word	0x08008a20
 8006ccc:	08008a94 	.word	0x08008a94
 8006cd0:	1e71      	subs	r1, r6, #1
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 feb2 	bl	8007a3c <__any_on>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d1e6      	bne.n	8006caa <__gethex+0x2ca>
 8006cdc:	ee18 0a10 	vmov	r0, s16
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	f000 fa4b 	bl	800717c <_Bfree>
 8006ce6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ce8:	2300      	movs	r3, #0
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	2750      	movs	r7, #80	; 0x50
 8006cee:	e70c      	b.n	8006b0a <__gethex+0x12a>
 8006cf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f2      	bne.n	8006cdc <__gethex+0x2fc>
 8006cf6:	e7d8      	b.n	8006caa <__gethex+0x2ca>
 8006cf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1d5      	bne.n	8006caa <__gethex+0x2ca>
 8006cfe:	e7ed      	b.n	8006cdc <__gethex+0x2fc>
 8006d00:	1e6f      	subs	r7, r5, #1
 8006d02:	f1ba 0f00 	cmp.w	sl, #0
 8006d06:	d131      	bne.n	8006d6c <__gethex+0x38c>
 8006d08:	b127      	cbz	r7, 8006d14 <__gethex+0x334>
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 fe95 	bl	8007a3c <__any_on>
 8006d12:	4682      	mov	sl, r0
 8006d14:	117b      	asrs	r3, r7, #5
 8006d16:	2101      	movs	r1, #1
 8006d18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006d1c:	f007 071f 	and.w	r7, r7, #31
 8006d20:	fa01 f707 	lsl.w	r7, r1, r7
 8006d24:	421f      	tst	r7, r3
 8006d26:	4629      	mov	r1, r5
 8006d28:	4620      	mov	r0, r4
 8006d2a:	bf18      	it	ne
 8006d2c:	f04a 0a02 	orrne.w	sl, sl, #2
 8006d30:	1b76      	subs	r6, r6, r5
 8006d32:	f7ff fdee 	bl	8006912 <rshift>
 8006d36:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006d3a:	2702      	movs	r7, #2
 8006d3c:	f1ba 0f00 	cmp.w	sl, #0
 8006d40:	d048      	beq.n	8006dd4 <__gethex+0x3f4>
 8006d42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d015      	beq.n	8006d76 <__gethex+0x396>
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d017      	beq.n	8006d7e <__gethex+0x39e>
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d109      	bne.n	8006d66 <__gethex+0x386>
 8006d52:	f01a 0f02 	tst.w	sl, #2
 8006d56:	d006      	beq.n	8006d66 <__gethex+0x386>
 8006d58:	f8d9 0000 	ldr.w	r0, [r9]
 8006d5c:	ea4a 0a00 	orr.w	sl, sl, r0
 8006d60:	f01a 0f01 	tst.w	sl, #1
 8006d64:	d10e      	bne.n	8006d84 <__gethex+0x3a4>
 8006d66:	f047 0710 	orr.w	r7, r7, #16
 8006d6a:	e033      	b.n	8006dd4 <__gethex+0x3f4>
 8006d6c:	f04f 0a01 	mov.w	sl, #1
 8006d70:	e7d0      	b.n	8006d14 <__gethex+0x334>
 8006d72:	2701      	movs	r7, #1
 8006d74:	e7e2      	b.n	8006d3c <__gethex+0x35c>
 8006d76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d78:	f1c3 0301 	rsb	r3, r3, #1
 8006d7c:	9315      	str	r3, [sp, #84]	; 0x54
 8006d7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0f0      	beq.n	8006d66 <__gethex+0x386>
 8006d84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006d88:	f104 0314 	add.w	r3, r4, #20
 8006d8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006d90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006d94:	f04f 0c00 	mov.w	ip, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d9e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006da2:	d01c      	beq.n	8006dde <__gethex+0x3fe>
 8006da4:	3201      	adds	r2, #1
 8006da6:	6002      	str	r2, [r0, #0]
 8006da8:	2f02      	cmp	r7, #2
 8006daa:	f104 0314 	add.w	r3, r4, #20
 8006dae:	d13f      	bne.n	8006e30 <__gethex+0x450>
 8006db0:	f8d8 2000 	ldr.w	r2, [r8]
 8006db4:	3a01      	subs	r2, #1
 8006db6:	42b2      	cmp	r2, r6
 8006db8:	d10a      	bne.n	8006dd0 <__gethex+0x3f0>
 8006dba:	1171      	asrs	r1, r6, #5
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006dc2:	f006 061f 	and.w	r6, r6, #31
 8006dc6:	fa02 f606 	lsl.w	r6, r2, r6
 8006dca:	421e      	tst	r6, r3
 8006dcc:	bf18      	it	ne
 8006dce:	4617      	movne	r7, r2
 8006dd0:	f047 0720 	orr.w	r7, r7, #32
 8006dd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006dd6:	601c      	str	r4, [r3, #0]
 8006dd8:	9b04      	ldr	r3, [sp, #16]
 8006dda:	601d      	str	r5, [r3, #0]
 8006ddc:	e695      	b.n	8006b0a <__gethex+0x12a>
 8006dde:	4299      	cmp	r1, r3
 8006de0:	f843 cc04 	str.w	ip, [r3, #-4]
 8006de4:	d8d8      	bhi.n	8006d98 <__gethex+0x3b8>
 8006de6:	68a3      	ldr	r3, [r4, #8]
 8006de8:	459b      	cmp	fp, r3
 8006dea:	db19      	blt.n	8006e20 <__gethex+0x440>
 8006dec:	6861      	ldr	r1, [r4, #4]
 8006dee:	ee18 0a10 	vmov	r0, s16
 8006df2:	3101      	adds	r1, #1
 8006df4:	f000 f982 	bl	80070fc <_Balloc>
 8006df8:	4681      	mov	r9, r0
 8006dfa:	b918      	cbnz	r0, 8006e04 <__gethex+0x424>
 8006dfc:	4b1a      	ldr	r3, [pc, #104]	; (8006e68 <__gethex+0x488>)
 8006dfe:	4602      	mov	r2, r0
 8006e00:	2184      	movs	r1, #132	; 0x84
 8006e02:	e6a8      	b.n	8006b56 <__gethex+0x176>
 8006e04:	6922      	ldr	r2, [r4, #16]
 8006e06:	3202      	adds	r2, #2
 8006e08:	f104 010c 	add.w	r1, r4, #12
 8006e0c:	0092      	lsls	r2, r2, #2
 8006e0e:	300c      	adds	r0, #12
 8006e10:	f7fc fe9e 	bl	8003b50 <memcpy>
 8006e14:	4621      	mov	r1, r4
 8006e16:	ee18 0a10 	vmov	r0, s16
 8006e1a:	f000 f9af 	bl	800717c <_Bfree>
 8006e1e:	464c      	mov	r4, r9
 8006e20:	6923      	ldr	r3, [r4, #16]
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e28:	6122      	str	r2, [r4, #16]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	615a      	str	r2, [r3, #20]
 8006e2e:	e7bb      	b.n	8006da8 <__gethex+0x3c8>
 8006e30:	6922      	ldr	r2, [r4, #16]
 8006e32:	455a      	cmp	r2, fp
 8006e34:	dd0b      	ble.n	8006e4e <__gethex+0x46e>
 8006e36:	2101      	movs	r1, #1
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f7ff fd6a 	bl	8006912 <rshift>
 8006e3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e42:	3501      	adds	r5, #1
 8006e44:	42ab      	cmp	r3, r5
 8006e46:	f6ff aed0 	blt.w	8006bea <__gethex+0x20a>
 8006e4a:	2701      	movs	r7, #1
 8006e4c:	e7c0      	b.n	8006dd0 <__gethex+0x3f0>
 8006e4e:	f016 061f 	ands.w	r6, r6, #31
 8006e52:	d0fa      	beq.n	8006e4a <__gethex+0x46a>
 8006e54:	4453      	add	r3, sl
 8006e56:	f1c6 0620 	rsb	r6, r6, #32
 8006e5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006e5e:	f000 fa3f 	bl	80072e0 <__hi0bits>
 8006e62:	42b0      	cmp	r0, r6
 8006e64:	dbe7      	blt.n	8006e36 <__gethex+0x456>
 8006e66:	e7f0      	b.n	8006e4a <__gethex+0x46a>
 8006e68:	08008a20 	.word	0x08008a20

08006e6c <L_shift>:
 8006e6c:	f1c2 0208 	rsb	r2, r2, #8
 8006e70:	0092      	lsls	r2, r2, #2
 8006e72:	b570      	push	{r4, r5, r6, lr}
 8006e74:	f1c2 0620 	rsb	r6, r2, #32
 8006e78:	6843      	ldr	r3, [r0, #4]
 8006e7a:	6804      	ldr	r4, [r0, #0]
 8006e7c:	fa03 f506 	lsl.w	r5, r3, r6
 8006e80:	432c      	orrs	r4, r5
 8006e82:	40d3      	lsrs	r3, r2
 8006e84:	6004      	str	r4, [r0, #0]
 8006e86:	f840 3f04 	str.w	r3, [r0, #4]!
 8006e8a:	4288      	cmp	r0, r1
 8006e8c:	d3f4      	bcc.n	8006e78 <L_shift+0xc>
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}

08006e90 <__match>:
 8006e90:	b530      	push	{r4, r5, lr}
 8006e92:	6803      	ldr	r3, [r0, #0]
 8006e94:	3301      	adds	r3, #1
 8006e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e9a:	b914      	cbnz	r4, 8006ea2 <__match+0x12>
 8006e9c:	6003      	str	r3, [r0, #0]
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	bd30      	pop	{r4, r5, pc}
 8006ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ea6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006eaa:	2d19      	cmp	r5, #25
 8006eac:	bf98      	it	ls
 8006eae:	3220      	addls	r2, #32
 8006eb0:	42a2      	cmp	r2, r4
 8006eb2:	d0f0      	beq.n	8006e96 <__match+0x6>
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	e7f3      	b.n	8006ea0 <__match+0x10>

08006eb8 <__hexnan>:
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	680b      	ldr	r3, [r1, #0]
 8006ebe:	115e      	asrs	r6, r3, #5
 8006ec0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006ec4:	f013 031f 	ands.w	r3, r3, #31
 8006ec8:	b087      	sub	sp, #28
 8006eca:	bf18      	it	ne
 8006ecc:	3604      	addne	r6, #4
 8006ece:	2500      	movs	r5, #0
 8006ed0:	1f37      	subs	r7, r6, #4
 8006ed2:	4690      	mov	r8, r2
 8006ed4:	6802      	ldr	r2, [r0, #0]
 8006ed6:	9301      	str	r3, [sp, #4]
 8006ed8:	4682      	mov	sl, r0
 8006eda:	f846 5c04 	str.w	r5, [r6, #-4]
 8006ede:	46b9      	mov	r9, r7
 8006ee0:	463c      	mov	r4, r7
 8006ee2:	9502      	str	r5, [sp, #8]
 8006ee4:	46ab      	mov	fp, r5
 8006ee6:	7851      	ldrb	r1, [r2, #1]
 8006ee8:	1c53      	adds	r3, r2, #1
 8006eea:	9303      	str	r3, [sp, #12]
 8006eec:	b341      	cbz	r1, 8006f40 <__hexnan+0x88>
 8006eee:	4608      	mov	r0, r1
 8006ef0:	9205      	str	r2, [sp, #20]
 8006ef2:	9104      	str	r1, [sp, #16]
 8006ef4:	f7ff fd5f 	bl	80069b6 <__hexdig_fun>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d14f      	bne.n	8006f9c <__hexnan+0xe4>
 8006efc:	9904      	ldr	r1, [sp, #16]
 8006efe:	9a05      	ldr	r2, [sp, #20]
 8006f00:	2920      	cmp	r1, #32
 8006f02:	d818      	bhi.n	8006f36 <__hexnan+0x7e>
 8006f04:	9b02      	ldr	r3, [sp, #8]
 8006f06:	459b      	cmp	fp, r3
 8006f08:	dd13      	ble.n	8006f32 <__hexnan+0x7a>
 8006f0a:	454c      	cmp	r4, r9
 8006f0c:	d206      	bcs.n	8006f1c <__hexnan+0x64>
 8006f0e:	2d07      	cmp	r5, #7
 8006f10:	dc04      	bgt.n	8006f1c <__hexnan+0x64>
 8006f12:	462a      	mov	r2, r5
 8006f14:	4649      	mov	r1, r9
 8006f16:	4620      	mov	r0, r4
 8006f18:	f7ff ffa8 	bl	8006e6c <L_shift>
 8006f1c:	4544      	cmp	r4, r8
 8006f1e:	d950      	bls.n	8006fc2 <__hexnan+0x10a>
 8006f20:	2300      	movs	r3, #0
 8006f22:	f1a4 0904 	sub.w	r9, r4, #4
 8006f26:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f2a:	f8cd b008 	str.w	fp, [sp, #8]
 8006f2e:	464c      	mov	r4, r9
 8006f30:	461d      	mov	r5, r3
 8006f32:	9a03      	ldr	r2, [sp, #12]
 8006f34:	e7d7      	b.n	8006ee6 <__hexnan+0x2e>
 8006f36:	2929      	cmp	r1, #41	; 0x29
 8006f38:	d156      	bne.n	8006fe8 <__hexnan+0x130>
 8006f3a:	3202      	adds	r2, #2
 8006f3c:	f8ca 2000 	str.w	r2, [sl]
 8006f40:	f1bb 0f00 	cmp.w	fp, #0
 8006f44:	d050      	beq.n	8006fe8 <__hexnan+0x130>
 8006f46:	454c      	cmp	r4, r9
 8006f48:	d206      	bcs.n	8006f58 <__hexnan+0xa0>
 8006f4a:	2d07      	cmp	r5, #7
 8006f4c:	dc04      	bgt.n	8006f58 <__hexnan+0xa0>
 8006f4e:	462a      	mov	r2, r5
 8006f50:	4649      	mov	r1, r9
 8006f52:	4620      	mov	r0, r4
 8006f54:	f7ff ff8a 	bl	8006e6c <L_shift>
 8006f58:	4544      	cmp	r4, r8
 8006f5a:	d934      	bls.n	8006fc6 <__hexnan+0x10e>
 8006f5c:	f1a8 0204 	sub.w	r2, r8, #4
 8006f60:	4623      	mov	r3, r4
 8006f62:	f853 1b04 	ldr.w	r1, [r3], #4
 8006f66:	f842 1f04 	str.w	r1, [r2, #4]!
 8006f6a:	429f      	cmp	r7, r3
 8006f6c:	d2f9      	bcs.n	8006f62 <__hexnan+0xaa>
 8006f6e:	1b3b      	subs	r3, r7, r4
 8006f70:	f023 0303 	bic.w	r3, r3, #3
 8006f74:	3304      	adds	r3, #4
 8006f76:	3401      	adds	r4, #1
 8006f78:	3e03      	subs	r6, #3
 8006f7a:	42b4      	cmp	r4, r6
 8006f7c:	bf88      	it	hi
 8006f7e:	2304      	movhi	r3, #4
 8006f80:	4443      	add	r3, r8
 8006f82:	2200      	movs	r2, #0
 8006f84:	f843 2b04 	str.w	r2, [r3], #4
 8006f88:	429f      	cmp	r7, r3
 8006f8a:	d2fb      	bcs.n	8006f84 <__hexnan+0xcc>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	b91b      	cbnz	r3, 8006f98 <__hexnan+0xe0>
 8006f90:	4547      	cmp	r7, r8
 8006f92:	d127      	bne.n	8006fe4 <__hexnan+0x12c>
 8006f94:	2301      	movs	r3, #1
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	2005      	movs	r0, #5
 8006f9a:	e026      	b.n	8006fea <__hexnan+0x132>
 8006f9c:	3501      	adds	r5, #1
 8006f9e:	2d08      	cmp	r5, #8
 8006fa0:	f10b 0b01 	add.w	fp, fp, #1
 8006fa4:	dd06      	ble.n	8006fb4 <__hexnan+0xfc>
 8006fa6:	4544      	cmp	r4, r8
 8006fa8:	d9c3      	bls.n	8006f32 <__hexnan+0x7a>
 8006faa:	2300      	movs	r3, #0
 8006fac:	f844 3c04 	str.w	r3, [r4, #-4]
 8006fb0:	2501      	movs	r5, #1
 8006fb2:	3c04      	subs	r4, #4
 8006fb4:	6822      	ldr	r2, [r4, #0]
 8006fb6:	f000 000f 	and.w	r0, r0, #15
 8006fba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006fbe:	6022      	str	r2, [r4, #0]
 8006fc0:	e7b7      	b.n	8006f32 <__hexnan+0x7a>
 8006fc2:	2508      	movs	r5, #8
 8006fc4:	e7b5      	b.n	8006f32 <__hexnan+0x7a>
 8006fc6:	9b01      	ldr	r3, [sp, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0df      	beq.n	8006f8c <__hexnan+0xd4>
 8006fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd0:	f1c3 0320 	rsb	r3, r3, #32
 8006fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006fdc:	401a      	ands	r2, r3
 8006fde:	f846 2c04 	str.w	r2, [r6, #-4]
 8006fe2:	e7d3      	b.n	8006f8c <__hexnan+0xd4>
 8006fe4:	3f04      	subs	r7, #4
 8006fe6:	e7d1      	b.n	8006f8c <__hexnan+0xd4>
 8006fe8:	2004      	movs	r0, #4
 8006fea:	b007      	add	sp, #28
 8006fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ff0 <_localeconv_r>:
 8006ff0:	4800      	ldr	r0, [pc, #0]	; (8006ff4 <_localeconv_r+0x4>)
 8006ff2:	4770      	bx	lr
 8006ff4:	20000170 	.word	0x20000170

08006ff8 <__retarget_lock_init_recursive>:
 8006ff8:	4770      	bx	lr

08006ffa <__retarget_lock_acquire_recursive>:
 8006ffa:	4770      	bx	lr

08006ffc <__retarget_lock_release_recursive>:
 8006ffc:	4770      	bx	lr

08006ffe <__swhatbuf_r>:
 8006ffe:	b570      	push	{r4, r5, r6, lr}
 8007000:	460e      	mov	r6, r1
 8007002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007006:	2900      	cmp	r1, #0
 8007008:	b096      	sub	sp, #88	; 0x58
 800700a:	4614      	mov	r4, r2
 800700c:	461d      	mov	r5, r3
 800700e:	da08      	bge.n	8007022 <__swhatbuf_r+0x24>
 8007010:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	602a      	str	r2, [r5, #0]
 8007018:	061a      	lsls	r2, r3, #24
 800701a:	d410      	bmi.n	800703e <__swhatbuf_r+0x40>
 800701c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007020:	e00e      	b.n	8007040 <__swhatbuf_r+0x42>
 8007022:	466a      	mov	r2, sp
 8007024:	f001 f9a6 	bl	8008374 <_fstat_r>
 8007028:	2800      	cmp	r0, #0
 800702a:	dbf1      	blt.n	8007010 <__swhatbuf_r+0x12>
 800702c:	9a01      	ldr	r2, [sp, #4]
 800702e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007032:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007036:	425a      	negs	r2, r3
 8007038:	415a      	adcs	r2, r3
 800703a:	602a      	str	r2, [r5, #0]
 800703c:	e7ee      	b.n	800701c <__swhatbuf_r+0x1e>
 800703e:	2340      	movs	r3, #64	; 0x40
 8007040:	2000      	movs	r0, #0
 8007042:	6023      	str	r3, [r4, #0]
 8007044:	b016      	add	sp, #88	; 0x58
 8007046:	bd70      	pop	{r4, r5, r6, pc}

08007048 <__smakebuf_r>:
 8007048:	898b      	ldrh	r3, [r1, #12]
 800704a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800704c:	079d      	lsls	r5, r3, #30
 800704e:	4606      	mov	r6, r0
 8007050:	460c      	mov	r4, r1
 8007052:	d507      	bpl.n	8007064 <__smakebuf_r+0x1c>
 8007054:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	6123      	str	r3, [r4, #16]
 800705c:	2301      	movs	r3, #1
 800705e:	6163      	str	r3, [r4, #20]
 8007060:	b002      	add	sp, #8
 8007062:	bd70      	pop	{r4, r5, r6, pc}
 8007064:	ab01      	add	r3, sp, #4
 8007066:	466a      	mov	r2, sp
 8007068:	f7ff ffc9 	bl	8006ffe <__swhatbuf_r>
 800706c:	9900      	ldr	r1, [sp, #0]
 800706e:	4605      	mov	r5, r0
 8007070:	4630      	mov	r0, r6
 8007072:	f000 fd87 	bl	8007b84 <_malloc_r>
 8007076:	b948      	cbnz	r0, 800708c <__smakebuf_r+0x44>
 8007078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800707c:	059a      	lsls	r2, r3, #22
 800707e:	d4ef      	bmi.n	8007060 <__smakebuf_r+0x18>
 8007080:	f023 0303 	bic.w	r3, r3, #3
 8007084:	f043 0302 	orr.w	r3, r3, #2
 8007088:	81a3      	strh	r3, [r4, #12]
 800708a:	e7e3      	b.n	8007054 <__smakebuf_r+0xc>
 800708c:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <__smakebuf_r+0x7c>)
 800708e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	6020      	str	r0, [r4, #0]
 8007094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007098:	81a3      	strh	r3, [r4, #12]
 800709a:	9b00      	ldr	r3, [sp, #0]
 800709c:	6163      	str	r3, [r4, #20]
 800709e:	9b01      	ldr	r3, [sp, #4]
 80070a0:	6120      	str	r0, [r4, #16]
 80070a2:	b15b      	cbz	r3, 80070bc <__smakebuf_r+0x74>
 80070a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070a8:	4630      	mov	r0, r6
 80070aa:	f001 f975 	bl	8008398 <_isatty_r>
 80070ae:	b128      	cbz	r0, 80070bc <__smakebuf_r+0x74>
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	f023 0303 	bic.w	r3, r3, #3
 80070b6:	f043 0301 	orr.w	r3, r3, #1
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	89a0      	ldrh	r0, [r4, #12]
 80070be:	4305      	orrs	r5, r0
 80070c0:	81a5      	strh	r5, [r4, #12]
 80070c2:	e7cd      	b.n	8007060 <__smakebuf_r+0x18>
 80070c4:	08006771 	.word	0x08006771

080070c8 <malloc>:
 80070c8:	4b02      	ldr	r3, [pc, #8]	; (80070d4 <malloc+0xc>)
 80070ca:	4601      	mov	r1, r0
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	f000 bd59 	b.w	8007b84 <_malloc_r>
 80070d2:	bf00      	nop
 80070d4:	20000018 	.word	0x20000018

080070d8 <__ascii_mbtowc>:
 80070d8:	b082      	sub	sp, #8
 80070da:	b901      	cbnz	r1, 80070de <__ascii_mbtowc+0x6>
 80070dc:	a901      	add	r1, sp, #4
 80070de:	b142      	cbz	r2, 80070f2 <__ascii_mbtowc+0x1a>
 80070e0:	b14b      	cbz	r3, 80070f6 <__ascii_mbtowc+0x1e>
 80070e2:	7813      	ldrb	r3, [r2, #0]
 80070e4:	600b      	str	r3, [r1, #0]
 80070e6:	7812      	ldrb	r2, [r2, #0]
 80070e8:	1e10      	subs	r0, r2, #0
 80070ea:	bf18      	it	ne
 80070ec:	2001      	movne	r0, #1
 80070ee:	b002      	add	sp, #8
 80070f0:	4770      	bx	lr
 80070f2:	4610      	mov	r0, r2
 80070f4:	e7fb      	b.n	80070ee <__ascii_mbtowc+0x16>
 80070f6:	f06f 0001 	mvn.w	r0, #1
 80070fa:	e7f8      	b.n	80070ee <__ascii_mbtowc+0x16>

080070fc <_Balloc>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007100:	4604      	mov	r4, r0
 8007102:	460d      	mov	r5, r1
 8007104:	b976      	cbnz	r6, 8007124 <_Balloc+0x28>
 8007106:	2010      	movs	r0, #16
 8007108:	f7ff ffde 	bl	80070c8 <malloc>
 800710c:	4602      	mov	r2, r0
 800710e:	6260      	str	r0, [r4, #36]	; 0x24
 8007110:	b920      	cbnz	r0, 800711c <_Balloc+0x20>
 8007112:	4b18      	ldr	r3, [pc, #96]	; (8007174 <_Balloc+0x78>)
 8007114:	4818      	ldr	r0, [pc, #96]	; (8007178 <_Balloc+0x7c>)
 8007116:	2166      	movs	r1, #102	; 0x66
 8007118:	f001 f8ec 	bl	80082f4 <__assert_func>
 800711c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007120:	6006      	str	r6, [r0, #0]
 8007122:	60c6      	str	r6, [r0, #12]
 8007124:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007126:	68f3      	ldr	r3, [r6, #12]
 8007128:	b183      	cbz	r3, 800714c <_Balloc+0x50>
 800712a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007132:	b9b8      	cbnz	r0, 8007164 <_Balloc+0x68>
 8007134:	2101      	movs	r1, #1
 8007136:	fa01 f605 	lsl.w	r6, r1, r5
 800713a:	1d72      	adds	r2, r6, #5
 800713c:	0092      	lsls	r2, r2, #2
 800713e:	4620      	mov	r0, r4
 8007140:	f000 fc9d 	bl	8007a7e <_calloc_r>
 8007144:	b160      	cbz	r0, 8007160 <_Balloc+0x64>
 8007146:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800714a:	e00e      	b.n	800716a <_Balloc+0x6e>
 800714c:	2221      	movs	r2, #33	; 0x21
 800714e:	2104      	movs	r1, #4
 8007150:	4620      	mov	r0, r4
 8007152:	f000 fc94 	bl	8007a7e <_calloc_r>
 8007156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007158:	60f0      	str	r0, [r6, #12]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e4      	bne.n	800712a <_Balloc+0x2e>
 8007160:	2000      	movs	r0, #0
 8007162:	bd70      	pop	{r4, r5, r6, pc}
 8007164:	6802      	ldr	r2, [r0, #0]
 8007166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800716a:	2300      	movs	r3, #0
 800716c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007170:	e7f7      	b.n	8007162 <_Balloc+0x66>
 8007172:	bf00      	nop
 8007174:	080089ae 	.word	0x080089ae
 8007178:	08008b10 	.word	0x08008b10

0800717c <_Bfree>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007180:	4605      	mov	r5, r0
 8007182:	460c      	mov	r4, r1
 8007184:	b976      	cbnz	r6, 80071a4 <_Bfree+0x28>
 8007186:	2010      	movs	r0, #16
 8007188:	f7ff ff9e 	bl	80070c8 <malloc>
 800718c:	4602      	mov	r2, r0
 800718e:	6268      	str	r0, [r5, #36]	; 0x24
 8007190:	b920      	cbnz	r0, 800719c <_Bfree+0x20>
 8007192:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <_Bfree+0x3c>)
 8007194:	4809      	ldr	r0, [pc, #36]	; (80071bc <_Bfree+0x40>)
 8007196:	218a      	movs	r1, #138	; 0x8a
 8007198:	f001 f8ac 	bl	80082f4 <__assert_func>
 800719c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071a0:	6006      	str	r6, [r0, #0]
 80071a2:	60c6      	str	r6, [r0, #12]
 80071a4:	b13c      	cbz	r4, 80071b6 <_Bfree+0x3a>
 80071a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071a8:	6862      	ldr	r2, [r4, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071b0:	6021      	str	r1, [r4, #0]
 80071b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	080089ae 	.word	0x080089ae
 80071bc:	08008b10 	.word	0x08008b10

080071c0 <__multadd>:
 80071c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c4:	690d      	ldr	r5, [r1, #16]
 80071c6:	4607      	mov	r7, r0
 80071c8:	460c      	mov	r4, r1
 80071ca:	461e      	mov	r6, r3
 80071cc:	f101 0c14 	add.w	ip, r1, #20
 80071d0:	2000      	movs	r0, #0
 80071d2:	f8dc 3000 	ldr.w	r3, [ip]
 80071d6:	b299      	uxth	r1, r3
 80071d8:	fb02 6101 	mla	r1, r2, r1, r6
 80071dc:	0c1e      	lsrs	r6, r3, #16
 80071de:	0c0b      	lsrs	r3, r1, #16
 80071e0:	fb02 3306 	mla	r3, r2, r6, r3
 80071e4:	b289      	uxth	r1, r1
 80071e6:	3001      	adds	r0, #1
 80071e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071ec:	4285      	cmp	r5, r0
 80071ee:	f84c 1b04 	str.w	r1, [ip], #4
 80071f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071f6:	dcec      	bgt.n	80071d2 <__multadd+0x12>
 80071f8:	b30e      	cbz	r6, 800723e <__multadd+0x7e>
 80071fa:	68a3      	ldr	r3, [r4, #8]
 80071fc:	42ab      	cmp	r3, r5
 80071fe:	dc19      	bgt.n	8007234 <__multadd+0x74>
 8007200:	6861      	ldr	r1, [r4, #4]
 8007202:	4638      	mov	r0, r7
 8007204:	3101      	adds	r1, #1
 8007206:	f7ff ff79 	bl	80070fc <_Balloc>
 800720a:	4680      	mov	r8, r0
 800720c:	b928      	cbnz	r0, 800721a <__multadd+0x5a>
 800720e:	4602      	mov	r2, r0
 8007210:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <__multadd+0x84>)
 8007212:	480d      	ldr	r0, [pc, #52]	; (8007248 <__multadd+0x88>)
 8007214:	21b5      	movs	r1, #181	; 0xb5
 8007216:	f001 f86d 	bl	80082f4 <__assert_func>
 800721a:	6922      	ldr	r2, [r4, #16]
 800721c:	3202      	adds	r2, #2
 800721e:	f104 010c 	add.w	r1, r4, #12
 8007222:	0092      	lsls	r2, r2, #2
 8007224:	300c      	adds	r0, #12
 8007226:	f7fc fc93 	bl	8003b50 <memcpy>
 800722a:	4621      	mov	r1, r4
 800722c:	4638      	mov	r0, r7
 800722e:	f7ff ffa5 	bl	800717c <_Bfree>
 8007232:	4644      	mov	r4, r8
 8007234:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007238:	3501      	adds	r5, #1
 800723a:	615e      	str	r6, [r3, #20]
 800723c:	6125      	str	r5, [r4, #16]
 800723e:	4620      	mov	r0, r4
 8007240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007244:	08008a20 	.word	0x08008a20
 8007248:	08008b10 	.word	0x08008b10

0800724c <__s2b>:
 800724c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007250:	460c      	mov	r4, r1
 8007252:	4615      	mov	r5, r2
 8007254:	461f      	mov	r7, r3
 8007256:	2209      	movs	r2, #9
 8007258:	3308      	adds	r3, #8
 800725a:	4606      	mov	r6, r0
 800725c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007260:	2100      	movs	r1, #0
 8007262:	2201      	movs	r2, #1
 8007264:	429a      	cmp	r2, r3
 8007266:	db09      	blt.n	800727c <__s2b+0x30>
 8007268:	4630      	mov	r0, r6
 800726a:	f7ff ff47 	bl	80070fc <_Balloc>
 800726e:	b940      	cbnz	r0, 8007282 <__s2b+0x36>
 8007270:	4602      	mov	r2, r0
 8007272:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <__s2b+0x8c>)
 8007274:	4819      	ldr	r0, [pc, #100]	; (80072dc <__s2b+0x90>)
 8007276:	21ce      	movs	r1, #206	; 0xce
 8007278:	f001 f83c 	bl	80082f4 <__assert_func>
 800727c:	0052      	lsls	r2, r2, #1
 800727e:	3101      	adds	r1, #1
 8007280:	e7f0      	b.n	8007264 <__s2b+0x18>
 8007282:	9b08      	ldr	r3, [sp, #32]
 8007284:	6143      	str	r3, [r0, #20]
 8007286:	2d09      	cmp	r5, #9
 8007288:	f04f 0301 	mov.w	r3, #1
 800728c:	6103      	str	r3, [r0, #16]
 800728e:	dd16      	ble.n	80072be <__s2b+0x72>
 8007290:	f104 0909 	add.w	r9, r4, #9
 8007294:	46c8      	mov	r8, r9
 8007296:	442c      	add	r4, r5
 8007298:	f818 3b01 	ldrb.w	r3, [r8], #1
 800729c:	4601      	mov	r1, r0
 800729e:	3b30      	subs	r3, #48	; 0x30
 80072a0:	220a      	movs	r2, #10
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7ff ff8c 	bl	80071c0 <__multadd>
 80072a8:	45a0      	cmp	r8, r4
 80072aa:	d1f5      	bne.n	8007298 <__s2b+0x4c>
 80072ac:	f1a5 0408 	sub.w	r4, r5, #8
 80072b0:	444c      	add	r4, r9
 80072b2:	1b2d      	subs	r5, r5, r4
 80072b4:	1963      	adds	r3, r4, r5
 80072b6:	42bb      	cmp	r3, r7
 80072b8:	db04      	blt.n	80072c4 <__s2b+0x78>
 80072ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072be:	340a      	adds	r4, #10
 80072c0:	2509      	movs	r5, #9
 80072c2:	e7f6      	b.n	80072b2 <__s2b+0x66>
 80072c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80072c8:	4601      	mov	r1, r0
 80072ca:	3b30      	subs	r3, #48	; 0x30
 80072cc:	220a      	movs	r2, #10
 80072ce:	4630      	mov	r0, r6
 80072d0:	f7ff ff76 	bl	80071c0 <__multadd>
 80072d4:	e7ee      	b.n	80072b4 <__s2b+0x68>
 80072d6:	bf00      	nop
 80072d8:	08008a20 	.word	0x08008a20
 80072dc:	08008b10 	.word	0x08008b10

080072e0 <__hi0bits>:
 80072e0:	0c03      	lsrs	r3, r0, #16
 80072e2:	041b      	lsls	r3, r3, #16
 80072e4:	b9d3      	cbnz	r3, 800731c <__hi0bits+0x3c>
 80072e6:	0400      	lsls	r0, r0, #16
 80072e8:	2310      	movs	r3, #16
 80072ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072ee:	bf04      	itt	eq
 80072f0:	0200      	lsleq	r0, r0, #8
 80072f2:	3308      	addeq	r3, #8
 80072f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80072f8:	bf04      	itt	eq
 80072fa:	0100      	lsleq	r0, r0, #4
 80072fc:	3304      	addeq	r3, #4
 80072fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007302:	bf04      	itt	eq
 8007304:	0080      	lsleq	r0, r0, #2
 8007306:	3302      	addeq	r3, #2
 8007308:	2800      	cmp	r0, #0
 800730a:	db05      	blt.n	8007318 <__hi0bits+0x38>
 800730c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007310:	f103 0301 	add.w	r3, r3, #1
 8007314:	bf08      	it	eq
 8007316:	2320      	moveq	r3, #32
 8007318:	4618      	mov	r0, r3
 800731a:	4770      	bx	lr
 800731c:	2300      	movs	r3, #0
 800731e:	e7e4      	b.n	80072ea <__hi0bits+0xa>

08007320 <__lo0bits>:
 8007320:	6803      	ldr	r3, [r0, #0]
 8007322:	f013 0207 	ands.w	r2, r3, #7
 8007326:	4601      	mov	r1, r0
 8007328:	d00b      	beq.n	8007342 <__lo0bits+0x22>
 800732a:	07da      	lsls	r2, r3, #31
 800732c:	d423      	bmi.n	8007376 <__lo0bits+0x56>
 800732e:	0798      	lsls	r0, r3, #30
 8007330:	bf49      	itett	mi
 8007332:	085b      	lsrmi	r3, r3, #1
 8007334:	089b      	lsrpl	r3, r3, #2
 8007336:	2001      	movmi	r0, #1
 8007338:	600b      	strmi	r3, [r1, #0]
 800733a:	bf5c      	itt	pl
 800733c:	600b      	strpl	r3, [r1, #0]
 800733e:	2002      	movpl	r0, #2
 8007340:	4770      	bx	lr
 8007342:	b298      	uxth	r0, r3
 8007344:	b9a8      	cbnz	r0, 8007372 <__lo0bits+0x52>
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	2010      	movs	r0, #16
 800734a:	b2da      	uxtb	r2, r3
 800734c:	b90a      	cbnz	r2, 8007352 <__lo0bits+0x32>
 800734e:	3008      	adds	r0, #8
 8007350:	0a1b      	lsrs	r3, r3, #8
 8007352:	071a      	lsls	r2, r3, #28
 8007354:	bf04      	itt	eq
 8007356:	091b      	lsreq	r3, r3, #4
 8007358:	3004      	addeq	r0, #4
 800735a:	079a      	lsls	r2, r3, #30
 800735c:	bf04      	itt	eq
 800735e:	089b      	lsreq	r3, r3, #2
 8007360:	3002      	addeq	r0, #2
 8007362:	07da      	lsls	r2, r3, #31
 8007364:	d403      	bmi.n	800736e <__lo0bits+0x4e>
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	f100 0001 	add.w	r0, r0, #1
 800736c:	d005      	beq.n	800737a <__lo0bits+0x5a>
 800736e:	600b      	str	r3, [r1, #0]
 8007370:	4770      	bx	lr
 8007372:	4610      	mov	r0, r2
 8007374:	e7e9      	b.n	800734a <__lo0bits+0x2a>
 8007376:	2000      	movs	r0, #0
 8007378:	4770      	bx	lr
 800737a:	2020      	movs	r0, #32
 800737c:	4770      	bx	lr
	...

08007380 <__i2b>:
 8007380:	b510      	push	{r4, lr}
 8007382:	460c      	mov	r4, r1
 8007384:	2101      	movs	r1, #1
 8007386:	f7ff feb9 	bl	80070fc <_Balloc>
 800738a:	4602      	mov	r2, r0
 800738c:	b928      	cbnz	r0, 800739a <__i2b+0x1a>
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <__i2b+0x24>)
 8007390:	4805      	ldr	r0, [pc, #20]	; (80073a8 <__i2b+0x28>)
 8007392:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007396:	f000 ffad 	bl	80082f4 <__assert_func>
 800739a:	2301      	movs	r3, #1
 800739c:	6144      	str	r4, [r0, #20]
 800739e:	6103      	str	r3, [r0, #16]
 80073a0:	bd10      	pop	{r4, pc}
 80073a2:	bf00      	nop
 80073a4:	08008a20 	.word	0x08008a20
 80073a8:	08008b10 	.word	0x08008b10

080073ac <__multiply>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	4691      	mov	r9, r2
 80073b2:	690a      	ldr	r2, [r1, #16]
 80073b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	bfb8      	it	lt
 80073bc:	460b      	movlt	r3, r1
 80073be:	460c      	mov	r4, r1
 80073c0:	bfbc      	itt	lt
 80073c2:	464c      	movlt	r4, r9
 80073c4:	4699      	movlt	r9, r3
 80073c6:	6927      	ldr	r7, [r4, #16]
 80073c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073cc:	68a3      	ldr	r3, [r4, #8]
 80073ce:	6861      	ldr	r1, [r4, #4]
 80073d0:	eb07 060a 	add.w	r6, r7, sl
 80073d4:	42b3      	cmp	r3, r6
 80073d6:	b085      	sub	sp, #20
 80073d8:	bfb8      	it	lt
 80073da:	3101      	addlt	r1, #1
 80073dc:	f7ff fe8e 	bl	80070fc <_Balloc>
 80073e0:	b930      	cbnz	r0, 80073f0 <__multiply+0x44>
 80073e2:	4602      	mov	r2, r0
 80073e4:	4b44      	ldr	r3, [pc, #272]	; (80074f8 <__multiply+0x14c>)
 80073e6:	4845      	ldr	r0, [pc, #276]	; (80074fc <__multiply+0x150>)
 80073e8:	f240 115d 	movw	r1, #349	; 0x15d
 80073ec:	f000 ff82 	bl	80082f4 <__assert_func>
 80073f0:	f100 0514 	add.w	r5, r0, #20
 80073f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073f8:	462b      	mov	r3, r5
 80073fa:	2200      	movs	r2, #0
 80073fc:	4543      	cmp	r3, r8
 80073fe:	d321      	bcc.n	8007444 <__multiply+0x98>
 8007400:	f104 0314 	add.w	r3, r4, #20
 8007404:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007408:	f109 0314 	add.w	r3, r9, #20
 800740c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007410:	9202      	str	r2, [sp, #8]
 8007412:	1b3a      	subs	r2, r7, r4
 8007414:	3a15      	subs	r2, #21
 8007416:	f022 0203 	bic.w	r2, r2, #3
 800741a:	3204      	adds	r2, #4
 800741c:	f104 0115 	add.w	r1, r4, #21
 8007420:	428f      	cmp	r7, r1
 8007422:	bf38      	it	cc
 8007424:	2204      	movcc	r2, #4
 8007426:	9201      	str	r2, [sp, #4]
 8007428:	9a02      	ldr	r2, [sp, #8]
 800742a:	9303      	str	r3, [sp, #12]
 800742c:	429a      	cmp	r2, r3
 800742e:	d80c      	bhi.n	800744a <__multiply+0x9e>
 8007430:	2e00      	cmp	r6, #0
 8007432:	dd03      	ble.n	800743c <__multiply+0x90>
 8007434:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007438:	2b00      	cmp	r3, #0
 800743a:	d05a      	beq.n	80074f2 <__multiply+0x146>
 800743c:	6106      	str	r6, [r0, #16]
 800743e:	b005      	add	sp, #20
 8007440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007444:	f843 2b04 	str.w	r2, [r3], #4
 8007448:	e7d8      	b.n	80073fc <__multiply+0x50>
 800744a:	f8b3 a000 	ldrh.w	sl, [r3]
 800744e:	f1ba 0f00 	cmp.w	sl, #0
 8007452:	d024      	beq.n	800749e <__multiply+0xf2>
 8007454:	f104 0e14 	add.w	lr, r4, #20
 8007458:	46a9      	mov	r9, r5
 800745a:	f04f 0c00 	mov.w	ip, #0
 800745e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007462:	f8d9 1000 	ldr.w	r1, [r9]
 8007466:	fa1f fb82 	uxth.w	fp, r2
 800746a:	b289      	uxth	r1, r1
 800746c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007470:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007474:	f8d9 2000 	ldr.w	r2, [r9]
 8007478:	4461      	add	r1, ip
 800747a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800747e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007482:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007486:	b289      	uxth	r1, r1
 8007488:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800748c:	4577      	cmp	r7, lr
 800748e:	f849 1b04 	str.w	r1, [r9], #4
 8007492:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007496:	d8e2      	bhi.n	800745e <__multiply+0xb2>
 8007498:	9a01      	ldr	r2, [sp, #4]
 800749a:	f845 c002 	str.w	ip, [r5, r2]
 800749e:	9a03      	ldr	r2, [sp, #12]
 80074a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074a4:	3304      	adds	r3, #4
 80074a6:	f1b9 0f00 	cmp.w	r9, #0
 80074aa:	d020      	beq.n	80074ee <__multiply+0x142>
 80074ac:	6829      	ldr	r1, [r5, #0]
 80074ae:	f104 0c14 	add.w	ip, r4, #20
 80074b2:	46ae      	mov	lr, r5
 80074b4:	f04f 0a00 	mov.w	sl, #0
 80074b8:	f8bc b000 	ldrh.w	fp, [ip]
 80074bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074c0:	fb09 220b 	mla	r2, r9, fp, r2
 80074c4:	4492      	add	sl, r2
 80074c6:	b289      	uxth	r1, r1
 80074c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80074cc:	f84e 1b04 	str.w	r1, [lr], #4
 80074d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074d4:	f8be 1000 	ldrh.w	r1, [lr]
 80074d8:	0c12      	lsrs	r2, r2, #16
 80074da:	fb09 1102 	mla	r1, r9, r2, r1
 80074de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80074e2:	4567      	cmp	r7, ip
 80074e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074e8:	d8e6      	bhi.n	80074b8 <__multiply+0x10c>
 80074ea:	9a01      	ldr	r2, [sp, #4]
 80074ec:	50a9      	str	r1, [r5, r2]
 80074ee:	3504      	adds	r5, #4
 80074f0:	e79a      	b.n	8007428 <__multiply+0x7c>
 80074f2:	3e01      	subs	r6, #1
 80074f4:	e79c      	b.n	8007430 <__multiply+0x84>
 80074f6:	bf00      	nop
 80074f8:	08008a20 	.word	0x08008a20
 80074fc:	08008b10 	.word	0x08008b10

08007500 <__pow5mult>:
 8007500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007504:	4615      	mov	r5, r2
 8007506:	f012 0203 	ands.w	r2, r2, #3
 800750a:	4606      	mov	r6, r0
 800750c:	460f      	mov	r7, r1
 800750e:	d007      	beq.n	8007520 <__pow5mult+0x20>
 8007510:	4c25      	ldr	r4, [pc, #148]	; (80075a8 <__pow5mult+0xa8>)
 8007512:	3a01      	subs	r2, #1
 8007514:	2300      	movs	r3, #0
 8007516:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800751a:	f7ff fe51 	bl	80071c0 <__multadd>
 800751e:	4607      	mov	r7, r0
 8007520:	10ad      	asrs	r5, r5, #2
 8007522:	d03d      	beq.n	80075a0 <__pow5mult+0xa0>
 8007524:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007526:	b97c      	cbnz	r4, 8007548 <__pow5mult+0x48>
 8007528:	2010      	movs	r0, #16
 800752a:	f7ff fdcd 	bl	80070c8 <malloc>
 800752e:	4602      	mov	r2, r0
 8007530:	6270      	str	r0, [r6, #36]	; 0x24
 8007532:	b928      	cbnz	r0, 8007540 <__pow5mult+0x40>
 8007534:	4b1d      	ldr	r3, [pc, #116]	; (80075ac <__pow5mult+0xac>)
 8007536:	481e      	ldr	r0, [pc, #120]	; (80075b0 <__pow5mult+0xb0>)
 8007538:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800753c:	f000 feda 	bl	80082f4 <__assert_func>
 8007540:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007544:	6004      	str	r4, [r0, #0]
 8007546:	60c4      	str	r4, [r0, #12]
 8007548:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800754c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007550:	b94c      	cbnz	r4, 8007566 <__pow5mult+0x66>
 8007552:	f240 2171 	movw	r1, #625	; 0x271
 8007556:	4630      	mov	r0, r6
 8007558:	f7ff ff12 	bl	8007380 <__i2b>
 800755c:	2300      	movs	r3, #0
 800755e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007562:	4604      	mov	r4, r0
 8007564:	6003      	str	r3, [r0, #0]
 8007566:	f04f 0900 	mov.w	r9, #0
 800756a:	07eb      	lsls	r3, r5, #31
 800756c:	d50a      	bpl.n	8007584 <__pow5mult+0x84>
 800756e:	4639      	mov	r1, r7
 8007570:	4622      	mov	r2, r4
 8007572:	4630      	mov	r0, r6
 8007574:	f7ff ff1a 	bl	80073ac <__multiply>
 8007578:	4639      	mov	r1, r7
 800757a:	4680      	mov	r8, r0
 800757c:	4630      	mov	r0, r6
 800757e:	f7ff fdfd 	bl	800717c <_Bfree>
 8007582:	4647      	mov	r7, r8
 8007584:	106d      	asrs	r5, r5, #1
 8007586:	d00b      	beq.n	80075a0 <__pow5mult+0xa0>
 8007588:	6820      	ldr	r0, [r4, #0]
 800758a:	b938      	cbnz	r0, 800759c <__pow5mult+0x9c>
 800758c:	4622      	mov	r2, r4
 800758e:	4621      	mov	r1, r4
 8007590:	4630      	mov	r0, r6
 8007592:	f7ff ff0b 	bl	80073ac <__multiply>
 8007596:	6020      	str	r0, [r4, #0]
 8007598:	f8c0 9000 	str.w	r9, [r0]
 800759c:	4604      	mov	r4, r0
 800759e:	e7e4      	b.n	800756a <__pow5mult+0x6a>
 80075a0:	4638      	mov	r0, r7
 80075a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a6:	bf00      	nop
 80075a8:	08008c60 	.word	0x08008c60
 80075ac:	080089ae 	.word	0x080089ae
 80075b0:	08008b10 	.word	0x08008b10

080075b4 <__lshift>:
 80075b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b8:	460c      	mov	r4, r1
 80075ba:	6849      	ldr	r1, [r1, #4]
 80075bc:	6923      	ldr	r3, [r4, #16]
 80075be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075c2:	68a3      	ldr	r3, [r4, #8]
 80075c4:	4607      	mov	r7, r0
 80075c6:	4691      	mov	r9, r2
 80075c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075cc:	f108 0601 	add.w	r6, r8, #1
 80075d0:	42b3      	cmp	r3, r6
 80075d2:	db0b      	blt.n	80075ec <__lshift+0x38>
 80075d4:	4638      	mov	r0, r7
 80075d6:	f7ff fd91 	bl	80070fc <_Balloc>
 80075da:	4605      	mov	r5, r0
 80075dc:	b948      	cbnz	r0, 80075f2 <__lshift+0x3e>
 80075de:	4602      	mov	r2, r0
 80075e0:	4b2a      	ldr	r3, [pc, #168]	; (800768c <__lshift+0xd8>)
 80075e2:	482b      	ldr	r0, [pc, #172]	; (8007690 <__lshift+0xdc>)
 80075e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075e8:	f000 fe84 	bl	80082f4 <__assert_func>
 80075ec:	3101      	adds	r1, #1
 80075ee:	005b      	lsls	r3, r3, #1
 80075f0:	e7ee      	b.n	80075d0 <__lshift+0x1c>
 80075f2:	2300      	movs	r3, #0
 80075f4:	f100 0114 	add.w	r1, r0, #20
 80075f8:	f100 0210 	add.w	r2, r0, #16
 80075fc:	4618      	mov	r0, r3
 80075fe:	4553      	cmp	r3, sl
 8007600:	db37      	blt.n	8007672 <__lshift+0xbe>
 8007602:	6920      	ldr	r0, [r4, #16]
 8007604:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007608:	f104 0314 	add.w	r3, r4, #20
 800760c:	f019 091f 	ands.w	r9, r9, #31
 8007610:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007614:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007618:	d02f      	beq.n	800767a <__lshift+0xc6>
 800761a:	f1c9 0e20 	rsb	lr, r9, #32
 800761e:	468a      	mov	sl, r1
 8007620:	f04f 0c00 	mov.w	ip, #0
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	fa02 f209 	lsl.w	r2, r2, r9
 800762a:	ea42 020c 	orr.w	r2, r2, ip
 800762e:	f84a 2b04 	str.w	r2, [sl], #4
 8007632:	f853 2b04 	ldr.w	r2, [r3], #4
 8007636:	4298      	cmp	r0, r3
 8007638:	fa22 fc0e 	lsr.w	ip, r2, lr
 800763c:	d8f2      	bhi.n	8007624 <__lshift+0x70>
 800763e:	1b03      	subs	r3, r0, r4
 8007640:	3b15      	subs	r3, #21
 8007642:	f023 0303 	bic.w	r3, r3, #3
 8007646:	3304      	adds	r3, #4
 8007648:	f104 0215 	add.w	r2, r4, #21
 800764c:	4290      	cmp	r0, r2
 800764e:	bf38      	it	cc
 8007650:	2304      	movcc	r3, #4
 8007652:	f841 c003 	str.w	ip, [r1, r3]
 8007656:	f1bc 0f00 	cmp.w	ip, #0
 800765a:	d001      	beq.n	8007660 <__lshift+0xac>
 800765c:	f108 0602 	add.w	r6, r8, #2
 8007660:	3e01      	subs	r6, #1
 8007662:	4638      	mov	r0, r7
 8007664:	612e      	str	r6, [r5, #16]
 8007666:	4621      	mov	r1, r4
 8007668:	f7ff fd88 	bl	800717c <_Bfree>
 800766c:	4628      	mov	r0, r5
 800766e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007672:	f842 0f04 	str.w	r0, [r2, #4]!
 8007676:	3301      	adds	r3, #1
 8007678:	e7c1      	b.n	80075fe <__lshift+0x4a>
 800767a:	3904      	subs	r1, #4
 800767c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007680:	f841 2f04 	str.w	r2, [r1, #4]!
 8007684:	4298      	cmp	r0, r3
 8007686:	d8f9      	bhi.n	800767c <__lshift+0xc8>
 8007688:	e7ea      	b.n	8007660 <__lshift+0xac>
 800768a:	bf00      	nop
 800768c:	08008a20 	.word	0x08008a20
 8007690:	08008b10 	.word	0x08008b10

08007694 <__mcmp>:
 8007694:	b530      	push	{r4, r5, lr}
 8007696:	6902      	ldr	r2, [r0, #16]
 8007698:	690c      	ldr	r4, [r1, #16]
 800769a:	1b12      	subs	r2, r2, r4
 800769c:	d10e      	bne.n	80076bc <__mcmp+0x28>
 800769e:	f100 0314 	add.w	r3, r0, #20
 80076a2:	3114      	adds	r1, #20
 80076a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076b4:	42a5      	cmp	r5, r4
 80076b6:	d003      	beq.n	80076c0 <__mcmp+0x2c>
 80076b8:	d305      	bcc.n	80076c6 <__mcmp+0x32>
 80076ba:	2201      	movs	r2, #1
 80076bc:	4610      	mov	r0, r2
 80076be:	bd30      	pop	{r4, r5, pc}
 80076c0:	4283      	cmp	r3, r0
 80076c2:	d3f3      	bcc.n	80076ac <__mcmp+0x18>
 80076c4:	e7fa      	b.n	80076bc <__mcmp+0x28>
 80076c6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ca:	e7f7      	b.n	80076bc <__mcmp+0x28>

080076cc <__mdiff>:
 80076cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d0:	460c      	mov	r4, r1
 80076d2:	4606      	mov	r6, r0
 80076d4:	4611      	mov	r1, r2
 80076d6:	4620      	mov	r0, r4
 80076d8:	4690      	mov	r8, r2
 80076da:	f7ff ffdb 	bl	8007694 <__mcmp>
 80076de:	1e05      	subs	r5, r0, #0
 80076e0:	d110      	bne.n	8007704 <__mdiff+0x38>
 80076e2:	4629      	mov	r1, r5
 80076e4:	4630      	mov	r0, r6
 80076e6:	f7ff fd09 	bl	80070fc <_Balloc>
 80076ea:	b930      	cbnz	r0, 80076fa <__mdiff+0x2e>
 80076ec:	4b3a      	ldr	r3, [pc, #232]	; (80077d8 <__mdiff+0x10c>)
 80076ee:	4602      	mov	r2, r0
 80076f0:	f240 2132 	movw	r1, #562	; 0x232
 80076f4:	4839      	ldr	r0, [pc, #228]	; (80077dc <__mdiff+0x110>)
 80076f6:	f000 fdfd 	bl	80082f4 <__assert_func>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007704:	bfa4      	itt	ge
 8007706:	4643      	movge	r3, r8
 8007708:	46a0      	movge	r8, r4
 800770a:	4630      	mov	r0, r6
 800770c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007710:	bfa6      	itte	ge
 8007712:	461c      	movge	r4, r3
 8007714:	2500      	movge	r5, #0
 8007716:	2501      	movlt	r5, #1
 8007718:	f7ff fcf0 	bl	80070fc <_Balloc>
 800771c:	b920      	cbnz	r0, 8007728 <__mdiff+0x5c>
 800771e:	4b2e      	ldr	r3, [pc, #184]	; (80077d8 <__mdiff+0x10c>)
 8007720:	4602      	mov	r2, r0
 8007722:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007726:	e7e5      	b.n	80076f4 <__mdiff+0x28>
 8007728:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800772c:	6926      	ldr	r6, [r4, #16]
 800772e:	60c5      	str	r5, [r0, #12]
 8007730:	f104 0914 	add.w	r9, r4, #20
 8007734:	f108 0514 	add.w	r5, r8, #20
 8007738:	f100 0e14 	add.w	lr, r0, #20
 800773c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007740:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007744:	f108 0210 	add.w	r2, r8, #16
 8007748:	46f2      	mov	sl, lr
 800774a:	2100      	movs	r1, #0
 800774c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007750:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007754:	fa1f f883 	uxth.w	r8, r3
 8007758:	fa11 f18b 	uxtah	r1, r1, fp
 800775c:	0c1b      	lsrs	r3, r3, #16
 800775e:	eba1 0808 	sub.w	r8, r1, r8
 8007762:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007766:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800776a:	fa1f f888 	uxth.w	r8, r8
 800776e:	1419      	asrs	r1, r3, #16
 8007770:	454e      	cmp	r6, r9
 8007772:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007776:	f84a 3b04 	str.w	r3, [sl], #4
 800777a:	d8e7      	bhi.n	800774c <__mdiff+0x80>
 800777c:	1b33      	subs	r3, r6, r4
 800777e:	3b15      	subs	r3, #21
 8007780:	f023 0303 	bic.w	r3, r3, #3
 8007784:	3304      	adds	r3, #4
 8007786:	3415      	adds	r4, #21
 8007788:	42a6      	cmp	r6, r4
 800778a:	bf38      	it	cc
 800778c:	2304      	movcc	r3, #4
 800778e:	441d      	add	r5, r3
 8007790:	4473      	add	r3, lr
 8007792:	469e      	mov	lr, r3
 8007794:	462e      	mov	r6, r5
 8007796:	4566      	cmp	r6, ip
 8007798:	d30e      	bcc.n	80077b8 <__mdiff+0xec>
 800779a:	f10c 0203 	add.w	r2, ip, #3
 800779e:	1b52      	subs	r2, r2, r5
 80077a0:	f022 0203 	bic.w	r2, r2, #3
 80077a4:	3d03      	subs	r5, #3
 80077a6:	45ac      	cmp	ip, r5
 80077a8:	bf38      	it	cc
 80077aa:	2200      	movcc	r2, #0
 80077ac:	441a      	add	r2, r3
 80077ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80077b2:	b17b      	cbz	r3, 80077d4 <__mdiff+0x108>
 80077b4:	6107      	str	r7, [r0, #16]
 80077b6:	e7a3      	b.n	8007700 <__mdiff+0x34>
 80077b8:	f856 8b04 	ldr.w	r8, [r6], #4
 80077bc:	fa11 f288 	uxtah	r2, r1, r8
 80077c0:	1414      	asrs	r4, r2, #16
 80077c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077c6:	b292      	uxth	r2, r2
 80077c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077cc:	f84e 2b04 	str.w	r2, [lr], #4
 80077d0:	1421      	asrs	r1, r4, #16
 80077d2:	e7e0      	b.n	8007796 <__mdiff+0xca>
 80077d4:	3f01      	subs	r7, #1
 80077d6:	e7ea      	b.n	80077ae <__mdiff+0xe2>
 80077d8:	08008a20 	.word	0x08008a20
 80077dc:	08008b10 	.word	0x08008b10

080077e0 <__ulp>:
 80077e0:	b082      	sub	sp, #8
 80077e2:	ed8d 0b00 	vstr	d0, [sp]
 80077e6:	9b01      	ldr	r3, [sp, #4]
 80077e8:	4912      	ldr	r1, [pc, #72]	; (8007834 <__ulp+0x54>)
 80077ea:	4019      	ands	r1, r3
 80077ec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80077f0:	2900      	cmp	r1, #0
 80077f2:	dd05      	ble.n	8007800 <__ulp+0x20>
 80077f4:	2200      	movs	r2, #0
 80077f6:	460b      	mov	r3, r1
 80077f8:	ec43 2b10 	vmov	d0, r2, r3
 80077fc:	b002      	add	sp, #8
 80077fe:	4770      	bx	lr
 8007800:	4249      	negs	r1, r1
 8007802:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007806:	ea4f 5021 	mov.w	r0, r1, asr #20
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	f04f 0300 	mov.w	r3, #0
 8007812:	da04      	bge.n	800781e <__ulp+0x3e>
 8007814:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007818:	fa41 f300 	asr.w	r3, r1, r0
 800781c:	e7ec      	b.n	80077f8 <__ulp+0x18>
 800781e:	f1a0 0114 	sub.w	r1, r0, #20
 8007822:	291e      	cmp	r1, #30
 8007824:	bfda      	itte	le
 8007826:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800782a:	fa20 f101 	lsrle.w	r1, r0, r1
 800782e:	2101      	movgt	r1, #1
 8007830:	460a      	mov	r2, r1
 8007832:	e7e1      	b.n	80077f8 <__ulp+0x18>
 8007834:	7ff00000 	.word	0x7ff00000

08007838 <__b2d>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	6905      	ldr	r5, [r0, #16]
 800783c:	f100 0714 	add.w	r7, r0, #20
 8007840:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007844:	1f2e      	subs	r6, r5, #4
 8007846:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800784a:	4620      	mov	r0, r4
 800784c:	f7ff fd48 	bl	80072e0 <__hi0bits>
 8007850:	f1c0 0320 	rsb	r3, r0, #32
 8007854:	280a      	cmp	r0, #10
 8007856:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80078d4 <__b2d+0x9c>
 800785a:	600b      	str	r3, [r1, #0]
 800785c:	dc14      	bgt.n	8007888 <__b2d+0x50>
 800785e:	f1c0 0e0b 	rsb	lr, r0, #11
 8007862:	fa24 f10e 	lsr.w	r1, r4, lr
 8007866:	42b7      	cmp	r7, r6
 8007868:	ea41 030c 	orr.w	r3, r1, ip
 800786c:	bf34      	ite	cc
 800786e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007872:	2100      	movcs	r1, #0
 8007874:	3015      	adds	r0, #21
 8007876:	fa04 f000 	lsl.w	r0, r4, r0
 800787a:	fa21 f10e 	lsr.w	r1, r1, lr
 800787e:	ea40 0201 	orr.w	r2, r0, r1
 8007882:	ec43 2b10 	vmov	d0, r2, r3
 8007886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007888:	42b7      	cmp	r7, r6
 800788a:	bf3a      	itte	cc
 800788c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007890:	f1a5 0608 	subcc.w	r6, r5, #8
 8007894:	2100      	movcs	r1, #0
 8007896:	380b      	subs	r0, #11
 8007898:	d017      	beq.n	80078ca <__b2d+0x92>
 800789a:	f1c0 0c20 	rsb	ip, r0, #32
 800789e:	fa04 f500 	lsl.w	r5, r4, r0
 80078a2:	42be      	cmp	r6, r7
 80078a4:	fa21 f40c 	lsr.w	r4, r1, ip
 80078a8:	ea45 0504 	orr.w	r5, r5, r4
 80078ac:	bf8c      	ite	hi
 80078ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80078b2:	2400      	movls	r4, #0
 80078b4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80078b8:	fa01 f000 	lsl.w	r0, r1, r0
 80078bc:	fa24 f40c 	lsr.w	r4, r4, ip
 80078c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80078c4:	ea40 0204 	orr.w	r2, r0, r4
 80078c8:	e7db      	b.n	8007882 <__b2d+0x4a>
 80078ca:	ea44 030c 	orr.w	r3, r4, ip
 80078ce:	460a      	mov	r2, r1
 80078d0:	e7d7      	b.n	8007882 <__b2d+0x4a>
 80078d2:	bf00      	nop
 80078d4:	3ff00000 	.word	0x3ff00000

080078d8 <__d2b>:
 80078d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078dc:	4689      	mov	r9, r1
 80078de:	2101      	movs	r1, #1
 80078e0:	ec57 6b10 	vmov	r6, r7, d0
 80078e4:	4690      	mov	r8, r2
 80078e6:	f7ff fc09 	bl	80070fc <_Balloc>
 80078ea:	4604      	mov	r4, r0
 80078ec:	b930      	cbnz	r0, 80078fc <__d2b+0x24>
 80078ee:	4602      	mov	r2, r0
 80078f0:	4b25      	ldr	r3, [pc, #148]	; (8007988 <__d2b+0xb0>)
 80078f2:	4826      	ldr	r0, [pc, #152]	; (800798c <__d2b+0xb4>)
 80078f4:	f240 310a 	movw	r1, #778	; 0x30a
 80078f8:	f000 fcfc 	bl	80082f4 <__assert_func>
 80078fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007900:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007904:	bb35      	cbnz	r5, 8007954 <__d2b+0x7c>
 8007906:	2e00      	cmp	r6, #0
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	d028      	beq.n	800795e <__d2b+0x86>
 800790c:	4668      	mov	r0, sp
 800790e:	9600      	str	r6, [sp, #0]
 8007910:	f7ff fd06 	bl	8007320 <__lo0bits>
 8007914:	9900      	ldr	r1, [sp, #0]
 8007916:	b300      	cbz	r0, 800795a <__d2b+0x82>
 8007918:	9a01      	ldr	r2, [sp, #4]
 800791a:	f1c0 0320 	rsb	r3, r0, #32
 800791e:	fa02 f303 	lsl.w	r3, r2, r3
 8007922:	430b      	orrs	r3, r1
 8007924:	40c2      	lsrs	r2, r0
 8007926:	6163      	str	r3, [r4, #20]
 8007928:	9201      	str	r2, [sp, #4]
 800792a:	9b01      	ldr	r3, [sp, #4]
 800792c:	61a3      	str	r3, [r4, #24]
 800792e:	2b00      	cmp	r3, #0
 8007930:	bf14      	ite	ne
 8007932:	2202      	movne	r2, #2
 8007934:	2201      	moveq	r2, #1
 8007936:	6122      	str	r2, [r4, #16]
 8007938:	b1d5      	cbz	r5, 8007970 <__d2b+0x98>
 800793a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800793e:	4405      	add	r5, r0
 8007940:	f8c9 5000 	str.w	r5, [r9]
 8007944:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007948:	f8c8 0000 	str.w	r0, [r8]
 800794c:	4620      	mov	r0, r4
 800794e:	b003      	add	sp, #12
 8007950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007958:	e7d5      	b.n	8007906 <__d2b+0x2e>
 800795a:	6161      	str	r1, [r4, #20]
 800795c:	e7e5      	b.n	800792a <__d2b+0x52>
 800795e:	a801      	add	r0, sp, #4
 8007960:	f7ff fcde 	bl	8007320 <__lo0bits>
 8007964:	9b01      	ldr	r3, [sp, #4]
 8007966:	6163      	str	r3, [r4, #20]
 8007968:	2201      	movs	r2, #1
 800796a:	6122      	str	r2, [r4, #16]
 800796c:	3020      	adds	r0, #32
 800796e:	e7e3      	b.n	8007938 <__d2b+0x60>
 8007970:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007974:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007978:	f8c9 0000 	str.w	r0, [r9]
 800797c:	6918      	ldr	r0, [r3, #16]
 800797e:	f7ff fcaf 	bl	80072e0 <__hi0bits>
 8007982:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007986:	e7df      	b.n	8007948 <__d2b+0x70>
 8007988:	08008a20 	.word	0x08008a20
 800798c:	08008b10 	.word	0x08008b10

08007990 <__ratio>:
 8007990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	4688      	mov	r8, r1
 8007996:	4669      	mov	r1, sp
 8007998:	4681      	mov	r9, r0
 800799a:	f7ff ff4d 	bl	8007838 <__b2d>
 800799e:	a901      	add	r1, sp, #4
 80079a0:	4640      	mov	r0, r8
 80079a2:	ec55 4b10 	vmov	r4, r5, d0
 80079a6:	f7ff ff47 	bl	8007838 <__b2d>
 80079aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80079b2:	eba3 0c02 	sub.w	ip, r3, r2
 80079b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80079ba:	1a9b      	subs	r3, r3, r2
 80079bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80079c0:	ec51 0b10 	vmov	r0, r1, d0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	bfd6      	itet	le
 80079c8:	460a      	movle	r2, r1
 80079ca:	462a      	movgt	r2, r5
 80079cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80079d0:	468b      	mov	fp, r1
 80079d2:	462f      	mov	r7, r5
 80079d4:	bfd4      	ite	le
 80079d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80079da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80079de:	4620      	mov	r0, r4
 80079e0:	ee10 2a10 	vmov	r2, s0
 80079e4:	465b      	mov	r3, fp
 80079e6:	4639      	mov	r1, r7
 80079e8:	f7f8 ff30 	bl	800084c <__aeabi_ddiv>
 80079ec:	ec41 0b10 	vmov	d0, r0, r1
 80079f0:	b003      	add	sp, #12
 80079f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079f6 <__copybits>:
 80079f6:	3901      	subs	r1, #1
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	1149      	asrs	r1, r1, #5
 80079fc:	6914      	ldr	r4, [r2, #16]
 80079fe:	3101      	adds	r1, #1
 8007a00:	f102 0314 	add.w	r3, r2, #20
 8007a04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a0c:	1f05      	subs	r5, r0, #4
 8007a0e:	42a3      	cmp	r3, r4
 8007a10:	d30c      	bcc.n	8007a2c <__copybits+0x36>
 8007a12:	1aa3      	subs	r3, r4, r2
 8007a14:	3b11      	subs	r3, #17
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	3211      	adds	r2, #17
 8007a1c:	42a2      	cmp	r2, r4
 8007a1e:	bf88      	it	hi
 8007a20:	2300      	movhi	r3, #0
 8007a22:	4418      	add	r0, r3
 8007a24:	2300      	movs	r3, #0
 8007a26:	4288      	cmp	r0, r1
 8007a28:	d305      	bcc.n	8007a36 <__copybits+0x40>
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
 8007a2c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007a30:	f845 6f04 	str.w	r6, [r5, #4]!
 8007a34:	e7eb      	b.n	8007a0e <__copybits+0x18>
 8007a36:	f840 3b04 	str.w	r3, [r0], #4
 8007a3a:	e7f4      	b.n	8007a26 <__copybits+0x30>

08007a3c <__any_on>:
 8007a3c:	f100 0214 	add.w	r2, r0, #20
 8007a40:	6900      	ldr	r0, [r0, #16]
 8007a42:	114b      	asrs	r3, r1, #5
 8007a44:	4298      	cmp	r0, r3
 8007a46:	b510      	push	{r4, lr}
 8007a48:	db11      	blt.n	8007a6e <__any_on+0x32>
 8007a4a:	dd0a      	ble.n	8007a62 <__any_on+0x26>
 8007a4c:	f011 011f 	ands.w	r1, r1, #31
 8007a50:	d007      	beq.n	8007a62 <__any_on+0x26>
 8007a52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a56:	fa24 f001 	lsr.w	r0, r4, r1
 8007a5a:	fa00 f101 	lsl.w	r1, r0, r1
 8007a5e:	428c      	cmp	r4, r1
 8007a60:	d10b      	bne.n	8007a7a <__any_on+0x3e>
 8007a62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d803      	bhi.n	8007a72 <__any_on+0x36>
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	bd10      	pop	{r4, pc}
 8007a6e:	4603      	mov	r3, r0
 8007a70:	e7f7      	b.n	8007a62 <__any_on+0x26>
 8007a72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a76:	2900      	cmp	r1, #0
 8007a78:	d0f5      	beq.n	8007a66 <__any_on+0x2a>
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	e7f6      	b.n	8007a6c <__any_on+0x30>

08007a7e <_calloc_r>:
 8007a7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a80:	fba1 2402 	umull	r2, r4, r1, r2
 8007a84:	b94c      	cbnz	r4, 8007a9a <_calloc_r+0x1c>
 8007a86:	4611      	mov	r1, r2
 8007a88:	9201      	str	r2, [sp, #4]
 8007a8a:	f000 f87b 	bl	8007b84 <_malloc_r>
 8007a8e:	9a01      	ldr	r2, [sp, #4]
 8007a90:	4605      	mov	r5, r0
 8007a92:	b930      	cbnz	r0, 8007aa2 <_calloc_r+0x24>
 8007a94:	4628      	mov	r0, r5
 8007a96:	b003      	add	sp, #12
 8007a98:	bd30      	pop	{r4, r5, pc}
 8007a9a:	220c      	movs	r2, #12
 8007a9c:	6002      	str	r2, [r0, #0]
 8007a9e:	2500      	movs	r5, #0
 8007aa0:	e7f8      	b.n	8007a94 <_calloc_r+0x16>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	f7fc f862 	bl	8003b6c <memset>
 8007aa8:	e7f4      	b.n	8007a94 <_calloc_r+0x16>
	...

08007aac <_free_r>:
 8007aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007aae:	2900      	cmp	r1, #0
 8007ab0:	d044      	beq.n	8007b3c <_free_r+0x90>
 8007ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab6:	9001      	str	r0, [sp, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f1a1 0404 	sub.w	r4, r1, #4
 8007abe:	bfb8      	it	lt
 8007ac0:	18e4      	addlt	r4, r4, r3
 8007ac2:	f000 fca5 	bl	8008410 <__malloc_lock>
 8007ac6:	4a1e      	ldr	r2, [pc, #120]	; (8007b40 <_free_r+0x94>)
 8007ac8:	9801      	ldr	r0, [sp, #4]
 8007aca:	6813      	ldr	r3, [r2, #0]
 8007acc:	b933      	cbnz	r3, 8007adc <_free_r+0x30>
 8007ace:	6063      	str	r3, [r4, #4]
 8007ad0:	6014      	str	r4, [r2, #0]
 8007ad2:	b003      	add	sp, #12
 8007ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ad8:	f000 bca0 	b.w	800841c <__malloc_unlock>
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d908      	bls.n	8007af2 <_free_r+0x46>
 8007ae0:	6825      	ldr	r5, [r4, #0]
 8007ae2:	1961      	adds	r1, r4, r5
 8007ae4:	428b      	cmp	r3, r1
 8007ae6:	bf01      	itttt	eq
 8007ae8:	6819      	ldreq	r1, [r3, #0]
 8007aea:	685b      	ldreq	r3, [r3, #4]
 8007aec:	1949      	addeq	r1, r1, r5
 8007aee:	6021      	streq	r1, [r4, #0]
 8007af0:	e7ed      	b.n	8007ace <_free_r+0x22>
 8007af2:	461a      	mov	r2, r3
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	b10b      	cbz	r3, 8007afc <_free_r+0x50>
 8007af8:	42a3      	cmp	r3, r4
 8007afa:	d9fa      	bls.n	8007af2 <_free_r+0x46>
 8007afc:	6811      	ldr	r1, [r2, #0]
 8007afe:	1855      	adds	r5, r2, r1
 8007b00:	42a5      	cmp	r5, r4
 8007b02:	d10b      	bne.n	8007b1c <_free_r+0x70>
 8007b04:	6824      	ldr	r4, [r4, #0]
 8007b06:	4421      	add	r1, r4
 8007b08:	1854      	adds	r4, r2, r1
 8007b0a:	42a3      	cmp	r3, r4
 8007b0c:	6011      	str	r1, [r2, #0]
 8007b0e:	d1e0      	bne.n	8007ad2 <_free_r+0x26>
 8007b10:	681c      	ldr	r4, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	6053      	str	r3, [r2, #4]
 8007b16:	4421      	add	r1, r4
 8007b18:	6011      	str	r1, [r2, #0]
 8007b1a:	e7da      	b.n	8007ad2 <_free_r+0x26>
 8007b1c:	d902      	bls.n	8007b24 <_free_r+0x78>
 8007b1e:	230c      	movs	r3, #12
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	e7d6      	b.n	8007ad2 <_free_r+0x26>
 8007b24:	6825      	ldr	r5, [r4, #0]
 8007b26:	1961      	adds	r1, r4, r5
 8007b28:	428b      	cmp	r3, r1
 8007b2a:	bf04      	itt	eq
 8007b2c:	6819      	ldreq	r1, [r3, #0]
 8007b2e:	685b      	ldreq	r3, [r3, #4]
 8007b30:	6063      	str	r3, [r4, #4]
 8007b32:	bf04      	itt	eq
 8007b34:	1949      	addeq	r1, r1, r5
 8007b36:	6021      	streq	r1, [r4, #0]
 8007b38:	6054      	str	r4, [r2, #4]
 8007b3a:	e7ca      	b.n	8007ad2 <_free_r+0x26>
 8007b3c:	b003      	add	sp, #12
 8007b3e:	bd30      	pop	{r4, r5, pc}
 8007b40:	2000026c 	.word	0x2000026c

08007b44 <sbrk_aligned>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	4e0e      	ldr	r6, [pc, #56]	; (8007b80 <sbrk_aligned+0x3c>)
 8007b48:	460c      	mov	r4, r1
 8007b4a:	6831      	ldr	r1, [r6, #0]
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	b911      	cbnz	r1, 8007b56 <sbrk_aligned+0x12>
 8007b50:	f000 fb4a 	bl	80081e8 <_sbrk_r>
 8007b54:	6030      	str	r0, [r6, #0]
 8007b56:	4621      	mov	r1, r4
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 fb45 	bl	80081e8 <_sbrk_r>
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	d00a      	beq.n	8007b78 <sbrk_aligned+0x34>
 8007b62:	1cc4      	adds	r4, r0, #3
 8007b64:	f024 0403 	bic.w	r4, r4, #3
 8007b68:	42a0      	cmp	r0, r4
 8007b6a:	d007      	beq.n	8007b7c <sbrk_aligned+0x38>
 8007b6c:	1a21      	subs	r1, r4, r0
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f000 fb3a 	bl	80081e8 <_sbrk_r>
 8007b74:	3001      	adds	r0, #1
 8007b76:	d101      	bne.n	8007b7c <sbrk_aligned+0x38>
 8007b78:	f04f 34ff 	mov.w	r4, #4294967295
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	20000270 	.word	0x20000270

08007b84 <_malloc_r>:
 8007b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b88:	1ccd      	adds	r5, r1, #3
 8007b8a:	f025 0503 	bic.w	r5, r5, #3
 8007b8e:	3508      	adds	r5, #8
 8007b90:	2d0c      	cmp	r5, #12
 8007b92:	bf38      	it	cc
 8007b94:	250c      	movcc	r5, #12
 8007b96:	2d00      	cmp	r5, #0
 8007b98:	4607      	mov	r7, r0
 8007b9a:	db01      	blt.n	8007ba0 <_malloc_r+0x1c>
 8007b9c:	42a9      	cmp	r1, r5
 8007b9e:	d905      	bls.n	8007bac <_malloc_r+0x28>
 8007ba0:	230c      	movs	r3, #12
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	2600      	movs	r6, #0
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bac:	4e2e      	ldr	r6, [pc, #184]	; (8007c68 <_malloc_r+0xe4>)
 8007bae:	f000 fc2f 	bl	8008410 <__malloc_lock>
 8007bb2:	6833      	ldr	r3, [r6, #0]
 8007bb4:	461c      	mov	r4, r3
 8007bb6:	bb34      	cbnz	r4, 8007c06 <_malloc_r+0x82>
 8007bb8:	4629      	mov	r1, r5
 8007bba:	4638      	mov	r0, r7
 8007bbc:	f7ff ffc2 	bl	8007b44 <sbrk_aligned>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	d14d      	bne.n	8007c62 <_malloc_r+0xde>
 8007bc6:	6834      	ldr	r4, [r6, #0]
 8007bc8:	4626      	mov	r6, r4
 8007bca:	2e00      	cmp	r6, #0
 8007bcc:	d140      	bne.n	8007c50 <_malloc_r+0xcc>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	eb04 0803 	add.w	r8, r4, r3
 8007bd8:	f000 fb06 	bl	80081e8 <_sbrk_r>
 8007bdc:	4580      	cmp	r8, r0
 8007bde:	d13a      	bne.n	8007c56 <_malloc_r+0xd2>
 8007be0:	6821      	ldr	r1, [r4, #0]
 8007be2:	3503      	adds	r5, #3
 8007be4:	1a6d      	subs	r5, r5, r1
 8007be6:	f025 0503 	bic.w	r5, r5, #3
 8007bea:	3508      	adds	r5, #8
 8007bec:	2d0c      	cmp	r5, #12
 8007bee:	bf38      	it	cc
 8007bf0:	250c      	movcc	r5, #12
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	f7ff ffa5 	bl	8007b44 <sbrk_aligned>
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d02b      	beq.n	8007c56 <_malloc_r+0xd2>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	442b      	add	r3, r5
 8007c02:	6023      	str	r3, [r4, #0]
 8007c04:	e00e      	b.n	8007c24 <_malloc_r+0xa0>
 8007c06:	6822      	ldr	r2, [r4, #0]
 8007c08:	1b52      	subs	r2, r2, r5
 8007c0a:	d41e      	bmi.n	8007c4a <_malloc_r+0xc6>
 8007c0c:	2a0b      	cmp	r2, #11
 8007c0e:	d916      	bls.n	8007c3e <_malloc_r+0xba>
 8007c10:	1961      	adds	r1, r4, r5
 8007c12:	42a3      	cmp	r3, r4
 8007c14:	6025      	str	r5, [r4, #0]
 8007c16:	bf18      	it	ne
 8007c18:	6059      	strne	r1, [r3, #4]
 8007c1a:	6863      	ldr	r3, [r4, #4]
 8007c1c:	bf08      	it	eq
 8007c1e:	6031      	streq	r1, [r6, #0]
 8007c20:	5162      	str	r2, [r4, r5]
 8007c22:	604b      	str	r3, [r1, #4]
 8007c24:	4638      	mov	r0, r7
 8007c26:	f104 060b 	add.w	r6, r4, #11
 8007c2a:	f000 fbf7 	bl	800841c <__malloc_unlock>
 8007c2e:	f026 0607 	bic.w	r6, r6, #7
 8007c32:	1d23      	adds	r3, r4, #4
 8007c34:	1af2      	subs	r2, r6, r3
 8007c36:	d0b6      	beq.n	8007ba6 <_malloc_r+0x22>
 8007c38:	1b9b      	subs	r3, r3, r6
 8007c3a:	50a3      	str	r3, [r4, r2]
 8007c3c:	e7b3      	b.n	8007ba6 <_malloc_r+0x22>
 8007c3e:	6862      	ldr	r2, [r4, #4]
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	bf0c      	ite	eq
 8007c44:	6032      	streq	r2, [r6, #0]
 8007c46:	605a      	strne	r2, [r3, #4]
 8007c48:	e7ec      	b.n	8007c24 <_malloc_r+0xa0>
 8007c4a:	4623      	mov	r3, r4
 8007c4c:	6864      	ldr	r4, [r4, #4]
 8007c4e:	e7b2      	b.n	8007bb6 <_malloc_r+0x32>
 8007c50:	4634      	mov	r4, r6
 8007c52:	6876      	ldr	r6, [r6, #4]
 8007c54:	e7b9      	b.n	8007bca <_malloc_r+0x46>
 8007c56:	230c      	movs	r3, #12
 8007c58:	603b      	str	r3, [r7, #0]
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	f000 fbde 	bl	800841c <__malloc_unlock>
 8007c60:	e7a1      	b.n	8007ba6 <_malloc_r+0x22>
 8007c62:	6025      	str	r5, [r4, #0]
 8007c64:	e7de      	b.n	8007c24 <_malloc_r+0xa0>
 8007c66:	bf00      	nop
 8007c68:	2000026c 	.word	0x2000026c

08007c6c <__ssputs_r>:
 8007c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c70:	688e      	ldr	r6, [r1, #8]
 8007c72:	429e      	cmp	r6, r3
 8007c74:	4682      	mov	sl, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	4690      	mov	r8, r2
 8007c7a:	461f      	mov	r7, r3
 8007c7c:	d838      	bhi.n	8007cf0 <__ssputs_r+0x84>
 8007c7e:	898a      	ldrh	r2, [r1, #12]
 8007c80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c84:	d032      	beq.n	8007cec <__ssputs_r+0x80>
 8007c86:	6825      	ldr	r5, [r4, #0]
 8007c88:	6909      	ldr	r1, [r1, #16]
 8007c8a:	eba5 0901 	sub.w	r9, r5, r1
 8007c8e:	6965      	ldr	r5, [r4, #20]
 8007c90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c98:	3301      	adds	r3, #1
 8007c9a:	444b      	add	r3, r9
 8007c9c:	106d      	asrs	r5, r5, #1
 8007c9e:	429d      	cmp	r5, r3
 8007ca0:	bf38      	it	cc
 8007ca2:	461d      	movcc	r5, r3
 8007ca4:	0553      	lsls	r3, r2, #21
 8007ca6:	d531      	bpl.n	8007d0c <__ssputs_r+0xa0>
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7ff ff6b 	bl	8007b84 <_malloc_r>
 8007cae:	4606      	mov	r6, r0
 8007cb0:	b950      	cbnz	r0, 8007cc8 <__ssputs_r+0x5c>
 8007cb2:	230c      	movs	r3, #12
 8007cb4:	f8ca 3000 	str.w	r3, [sl]
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc8:	6921      	ldr	r1, [r4, #16]
 8007cca:	464a      	mov	r2, r9
 8007ccc:	f7fb ff40 	bl	8003b50 <memcpy>
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	6126      	str	r6, [r4, #16]
 8007cde:	6165      	str	r5, [r4, #20]
 8007ce0:	444e      	add	r6, r9
 8007ce2:	eba5 0509 	sub.w	r5, r5, r9
 8007ce6:	6026      	str	r6, [r4, #0]
 8007ce8:	60a5      	str	r5, [r4, #8]
 8007cea:	463e      	mov	r6, r7
 8007cec:	42be      	cmp	r6, r7
 8007cee:	d900      	bls.n	8007cf2 <__ssputs_r+0x86>
 8007cf0:	463e      	mov	r6, r7
 8007cf2:	6820      	ldr	r0, [r4, #0]
 8007cf4:	4632      	mov	r2, r6
 8007cf6:	4641      	mov	r1, r8
 8007cf8:	f000 fb70 	bl	80083dc <memmove>
 8007cfc:	68a3      	ldr	r3, [r4, #8]
 8007cfe:	1b9b      	subs	r3, r3, r6
 8007d00:	60a3      	str	r3, [r4, #8]
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	4433      	add	r3, r6
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	2000      	movs	r0, #0
 8007d0a:	e7db      	b.n	8007cc4 <__ssputs_r+0x58>
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	f000 fb8b 	bl	8008428 <_realloc_r>
 8007d12:	4606      	mov	r6, r0
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d1e1      	bne.n	8007cdc <__ssputs_r+0x70>
 8007d18:	6921      	ldr	r1, [r4, #16]
 8007d1a:	4650      	mov	r0, sl
 8007d1c:	f7ff fec6 	bl	8007aac <_free_r>
 8007d20:	e7c7      	b.n	8007cb2 <__ssputs_r+0x46>
	...

08007d24 <_svfiprintf_r>:
 8007d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	4698      	mov	r8, r3
 8007d2a:	898b      	ldrh	r3, [r1, #12]
 8007d2c:	061b      	lsls	r3, r3, #24
 8007d2e:	b09d      	sub	sp, #116	; 0x74
 8007d30:	4607      	mov	r7, r0
 8007d32:	460d      	mov	r5, r1
 8007d34:	4614      	mov	r4, r2
 8007d36:	d50e      	bpl.n	8007d56 <_svfiprintf_r+0x32>
 8007d38:	690b      	ldr	r3, [r1, #16]
 8007d3a:	b963      	cbnz	r3, 8007d56 <_svfiprintf_r+0x32>
 8007d3c:	2140      	movs	r1, #64	; 0x40
 8007d3e:	f7ff ff21 	bl	8007b84 <_malloc_r>
 8007d42:	6028      	str	r0, [r5, #0]
 8007d44:	6128      	str	r0, [r5, #16]
 8007d46:	b920      	cbnz	r0, 8007d52 <_svfiprintf_r+0x2e>
 8007d48:	230c      	movs	r3, #12
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	e0d1      	b.n	8007ef6 <_svfiprintf_r+0x1d2>
 8007d52:	2340      	movs	r3, #64	; 0x40
 8007d54:	616b      	str	r3, [r5, #20]
 8007d56:	2300      	movs	r3, #0
 8007d58:	9309      	str	r3, [sp, #36]	; 0x24
 8007d5a:	2320      	movs	r3, #32
 8007d5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d64:	2330      	movs	r3, #48	; 0x30
 8007d66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f10 <_svfiprintf_r+0x1ec>
 8007d6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d6e:	f04f 0901 	mov.w	r9, #1
 8007d72:	4623      	mov	r3, r4
 8007d74:	469a      	mov	sl, r3
 8007d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d7a:	b10a      	cbz	r2, 8007d80 <_svfiprintf_r+0x5c>
 8007d7c:	2a25      	cmp	r2, #37	; 0x25
 8007d7e:	d1f9      	bne.n	8007d74 <_svfiprintf_r+0x50>
 8007d80:	ebba 0b04 	subs.w	fp, sl, r4
 8007d84:	d00b      	beq.n	8007d9e <_svfiprintf_r+0x7a>
 8007d86:	465b      	mov	r3, fp
 8007d88:	4622      	mov	r2, r4
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	f7ff ff6d 	bl	8007c6c <__ssputs_r>
 8007d92:	3001      	adds	r0, #1
 8007d94:	f000 80aa 	beq.w	8007eec <_svfiprintf_r+0x1c8>
 8007d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d9a:	445a      	add	r2, fp
 8007d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 80a2 	beq.w	8007eec <_svfiprintf_r+0x1c8>
 8007da8:	2300      	movs	r3, #0
 8007daa:	f04f 32ff 	mov.w	r2, #4294967295
 8007dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007db2:	f10a 0a01 	add.w	sl, sl, #1
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	9307      	str	r3, [sp, #28]
 8007dba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8007dc0:	4654      	mov	r4, sl
 8007dc2:	2205      	movs	r2, #5
 8007dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc8:	4851      	ldr	r0, [pc, #324]	; (8007f10 <_svfiprintf_r+0x1ec>)
 8007dca:	f7f8 fa09 	bl	80001e0 <memchr>
 8007dce:	9a04      	ldr	r2, [sp, #16]
 8007dd0:	b9d8      	cbnz	r0, 8007e0a <_svfiprintf_r+0xe6>
 8007dd2:	06d0      	lsls	r0, r2, #27
 8007dd4:	bf44      	itt	mi
 8007dd6:	2320      	movmi	r3, #32
 8007dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ddc:	0711      	lsls	r1, r2, #28
 8007dde:	bf44      	itt	mi
 8007de0:	232b      	movmi	r3, #43	; 0x2b
 8007de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007de6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dea:	2b2a      	cmp	r3, #42	; 0x2a
 8007dec:	d015      	beq.n	8007e1a <_svfiprintf_r+0xf6>
 8007dee:	9a07      	ldr	r2, [sp, #28]
 8007df0:	4654      	mov	r4, sl
 8007df2:	2000      	movs	r0, #0
 8007df4:	f04f 0c0a 	mov.w	ip, #10
 8007df8:	4621      	mov	r1, r4
 8007dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dfe:	3b30      	subs	r3, #48	; 0x30
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d94e      	bls.n	8007ea2 <_svfiprintf_r+0x17e>
 8007e04:	b1b0      	cbz	r0, 8007e34 <_svfiprintf_r+0x110>
 8007e06:	9207      	str	r2, [sp, #28]
 8007e08:	e014      	b.n	8007e34 <_svfiprintf_r+0x110>
 8007e0a:	eba0 0308 	sub.w	r3, r0, r8
 8007e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e12:	4313      	orrs	r3, r2
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	46a2      	mov	sl, r4
 8007e18:	e7d2      	b.n	8007dc0 <_svfiprintf_r+0x9c>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	1d19      	adds	r1, r3, #4
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	9103      	str	r1, [sp, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfbb      	ittet	lt
 8007e26:	425b      	neglt	r3, r3
 8007e28:	f042 0202 	orrlt.w	r2, r2, #2
 8007e2c:	9307      	strge	r3, [sp, #28]
 8007e2e:	9307      	strlt	r3, [sp, #28]
 8007e30:	bfb8      	it	lt
 8007e32:	9204      	strlt	r2, [sp, #16]
 8007e34:	7823      	ldrb	r3, [r4, #0]
 8007e36:	2b2e      	cmp	r3, #46	; 0x2e
 8007e38:	d10c      	bne.n	8007e54 <_svfiprintf_r+0x130>
 8007e3a:	7863      	ldrb	r3, [r4, #1]
 8007e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e3e:	d135      	bne.n	8007eac <_svfiprintf_r+0x188>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	1d1a      	adds	r2, r3, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	9203      	str	r2, [sp, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	bfb8      	it	lt
 8007e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e50:	3402      	adds	r4, #2
 8007e52:	9305      	str	r3, [sp, #20]
 8007e54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f20 <_svfiprintf_r+0x1fc>
 8007e58:	7821      	ldrb	r1, [r4, #0]
 8007e5a:	2203      	movs	r2, #3
 8007e5c:	4650      	mov	r0, sl
 8007e5e:	f7f8 f9bf 	bl	80001e0 <memchr>
 8007e62:	b140      	cbz	r0, 8007e76 <_svfiprintf_r+0x152>
 8007e64:	2340      	movs	r3, #64	; 0x40
 8007e66:	eba0 000a 	sub.w	r0, r0, sl
 8007e6a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e6e:	9b04      	ldr	r3, [sp, #16]
 8007e70:	4303      	orrs	r3, r0
 8007e72:	3401      	adds	r4, #1
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7a:	4826      	ldr	r0, [pc, #152]	; (8007f14 <_svfiprintf_r+0x1f0>)
 8007e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e80:	2206      	movs	r2, #6
 8007e82:	f7f8 f9ad 	bl	80001e0 <memchr>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d038      	beq.n	8007efc <_svfiprintf_r+0x1d8>
 8007e8a:	4b23      	ldr	r3, [pc, #140]	; (8007f18 <_svfiprintf_r+0x1f4>)
 8007e8c:	bb1b      	cbnz	r3, 8007ed6 <_svfiprintf_r+0x1b2>
 8007e8e:	9b03      	ldr	r3, [sp, #12]
 8007e90:	3307      	adds	r3, #7
 8007e92:	f023 0307 	bic.w	r3, r3, #7
 8007e96:	3308      	adds	r3, #8
 8007e98:	9303      	str	r3, [sp, #12]
 8007e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9c:	4433      	add	r3, r6
 8007e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea0:	e767      	b.n	8007d72 <_svfiprintf_r+0x4e>
 8007ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	e7a5      	b.n	8007df8 <_svfiprintf_r+0xd4>
 8007eac:	2300      	movs	r3, #0
 8007eae:	3401      	adds	r4, #1
 8007eb0:	9305      	str	r3, [sp, #20]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	f04f 0c0a 	mov.w	ip, #10
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ebe:	3a30      	subs	r2, #48	; 0x30
 8007ec0:	2a09      	cmp	r2, #9
 8007ec2:	d903      	bls.n	8007ecc <_svfiprintf_r+0x1a8>
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0c5      	beq.n	8007e54 <_svfiprintf_r+0x130>
 8007ec8:	9105      	str	r1, [sp, #20]
 8007eca:	e7c3      	b.n	8007e54 <_svfiprintf_r+0x130>
 8007ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e7f0      	b.n	8007eb8 <_svfiprintf_r+0x194>
 8007ed6:	ab03      	add	r3, sp, #12
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	462a      	mov	r2, r5
 8007edc:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <_svfiprintf_r+0x1f8>)
 8007ede:	a904      	add	r1, sp, #16
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7fb feeb 	bl	8003cbc <_printf_float>
 8007ee6:	1c42      	adds	r2, r0, #1
 8007ee8:	4606      	mov	r6, r0
 8007eea:	d1d6      	bne.n	8007e9a <_svfiprintf_r+0x176>
 8007eec:	89ab      	ldrh	r3, [r5, #12]
 8007eee:	065b      	lsls	r3, r3, #25
 8007ef0:	f53f af2c 	bmi.w	8007d4c <_svfiprintf_r+0x28>
 8007ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ef6:	b01d      	add	sp, #116	; 0x74
 8007ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efc:	ab03      	add	r3, sp, #12
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	462a      	mov	r2, r5
 8007f02:	4b06      	ldr	r3, [pc, #24]	; (8007f1c <_svfiprintf_r+0x1f8>)
 8007f04:	a904      	add	r1, sp, #16
 8007f06:	4638      	mov	r0, r7
 8007f08:	f7fc f97c 	bl	8004204 <_printf_i>
 8007f0c:	e7eb      	b.n	8007ee6 <_svfiprintf_r+0x1c2>
 8007f0e:	bf00      	nop
 8007f10:	08008c6c 	.word	0x08008c6c
 8007f14:	08008c76 	.word	0x08008c76
 8007f18:	08003cbd 	.word	0x08003cbd
 8007f1c:	08007c6d 	.word	0x08007c6d
 8007f20:	08008c72 	.word	0x08008c72

08007f24 <__sfputc_r>:
 8007f24:	6893      	ldr	r3, [r2, #8]
 8007f26:	3b01      	subs	r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	b410      	push	{r4}
 8007f2c:	6093      	str	r3, [r2, #8]
 8007f2e:	da08      	bge.n	8007f42 <__sfputc_r+0x1e>
 8007f30:	6994      	ldr	r4, [r2, #24]
 8007f32:	42a3      	cmp	r3, r4
 8007f34:	db01      	blt.n	8007f3a <__sfputc_r+0x16>
 8007f36:	290a      	cmp	r1, #10
 8007f38:	d103      	bne.n	8007f42 <__sfputc_r+0x1e>
 8007f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f3e:	f7fd bbf7 	b.w	8005730 <__swbuf_r>
 8007f42:	6813      	ldr	r3, [r2, #0]
 8007f44:	1c58      	adds	r0, r3, #1
 8007f46:	6010      	str	r0, [r2, #0]
 8007f48:	7019      	strb	r1, [r3, #0]
 8007f4a:	4608      	mov	r0, r1
 8007f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <__sfputs_r>:
 8007f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f54:	4606      	mov	r6, r0
 8007f56:	460f      	mov	r7, r1
 8007f58:	4614      	mov	r4, r2
 8007f5a:	18d5      	adds	r5, r2, r3
 8007f5c:	42ac      	cmp	r4, r5
 8007f5e:	d101      	bne.n	8007f64 <__sfputs_r+0x12>
 8007f60:	2000      	movs	r0, #0
 8007f62:	e007      	b.n	8007f74 <__sfputs_r+0x22>
 8007f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f68:	463a      	mov	r2, r7
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f7ff ffda 	bl	8007f24 <__sfputc_r>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d1f3      	bne.n	8007f5c <__sfputs_r+0xa>
 8007f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f78 <_vfiprintf_r>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	460d      	mov	r5, r1
 8007f7e:	b09d      	sub	sp, #116	; 0x74
 8007f80:	4614      	mov	r4, r2
 8007f82:	4698      	mov	r8, r3
 8007f84:	4606      	mov	r6, r0
 8007f86:	b118      	cbz	r0, 8007f90 <_vfiprintf_r+0x18>
 8007f88:	6983      	ldr	r3, [r0, #24]
 8007f8a:	b90b      	cbnz	r3, 8007f90 <_vfiprintf_r+0x18>
 8007f8c:	f7fe fc24 	bl	80067d8 <__sinit>
 8007f90:	4b89      	ldr	r3, [pc, #548]	; (80081b8 <_vfiprintf_r+0x240>)
 8007f92:	429d      	cmp	r5, r3
 8007f94:	d11b      	bne.n	8007fce <_vfiprintf_r+0x56>
 8007f96:	6875      	ldr	r5, [r6, #4]
 8007f98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f9a:	07d9      	lsls	r1, r3, #31
 8007f9c:	d405      	bmi.n	8007faa <_vfiprintf_r+0x32>
 8007f9e:	89ab      	ldrh	r3, [r5, #12]
 8007fa0:	059a      	lsls	r2, r3, #22
 8007fa2:	d402      	bmi.n	8007faa <_vfiprintf_r+0x32>
 8007fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fa6:	f7ff f828 	bl	8006ffa <__retarget_lock_acquire_recursive>
 8007faa:	89ab      	ldrh	r3, [r5, #12]
 8007fac:	071b      	lsls	r3, r3, #28
 8007fae:	d501      	bpl.n	8007fb4 <_vfiprintf_r+0x3c>
 8007fb0:	692b      	ldr	r3, [r5, #16]
 8007fb2:	b9eb      	cbnz	r3, 8007ff0 <_vfiprintf_r+0x78>
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f7fd fc0c 	bl	80057d4 <__swsetup_r>
 8007fbc:	b1c0      	cbz	r0, 8007ff0 <_vfiprintf_r+0x78>
 8007fbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fc0:	07dc      	lsls	r4, r3, #31
 8007fc2:	d50e      	bpl.n	8007fe2 <_vfiprintf_r+0x6a>
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc8:	b01d      	add	sp, #116	; 0x74
 8007fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fce:	4b7b      	ldr	r3, [pc, #492]	; (80081bc <_vfiprintf_r+0x244>)
 8007fd0:	429d      	cmp	r5, r3
 8007fd2:	d101      	bne.n	8007fd8 <_vfiprintf_r+0x60>
 8007fd4:	68b5      	ldr	r5, [r6, #8]
 8007fd6:	e7df      	b.n	8007f98 <_vfiprintf_r+0x20>
 8007fd8:	4b79      	ldr	r3, [pc, #484]	; (80081c0 <_vfiprintf_r+0x248>)
 8007fda:	429d      	cmp	r5, r3
 8007fdc:	bf08      	it	eq
 8007fde:	68f5      	ldreq	r5, [r6, #12]
 8007fe0:	e7da      	b.n	8007f98 <_vfiprintf_r+0x20>
 8007fe2:	89ab      	ldrh	r3, [r5, #12]
 8007fe4:	0598      	lsls	r0, r3, #22
 8007fe6:	d4ed      	bmi.n	8007fc4 <_vfiprintf_r+0x4c>
 8007fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fea:	f7ff f807 	bl	8006ffc <__retarget_lock_release_recursive>
 8007fee:	e7e9      	b.n	8007fc4 <_vfiprintf_r+0x4c>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff4:	2320      	movs	r3, #32
 8007ff6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ffa:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ffe:	2330      	movs	r3, #48	; 0x30
 8008000:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081c4 <_vfiprintf_r+0x24c>
 8008004:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008008:	f04f 0901 	mov.w	r9, #1
 800800c:	4623      	mov	r3, r4
 800800e:	469a      	mov	sl, r3
 8008010:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008014:	b10a      	cbz	r2, 800801a <_vfiprintf_r+0xa2>
 8008016:	2a25      	cmp	r2, #37	; 0x25
 8008018:	d1f9      	bne.n	800800e <_vfiprintf_r+0x96>
 800801a:	ebba 0b04 	subs.w	fp, sl, r4
 800801e:	d00b      	beq.n	8008038 <_vfiprintf_r+0xc0>
 8008020:	465b      	mov	r3, fp
 8008022:	4622      	mov	r2, r4
 8008024:	4629      	mov	r1, r5
 8008026:	4630      	mov	r0, r6
 8008028:	f7ff ff93 	bl	8007f52 <__sfputs_r>
 800802c:	3001      	adds	r0, #1
 800802e:	f000 80aa 	beq.w	8008186 <_vfiprintf_r+0x20e>
 8008032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008034:	445a      	add	r2, fp
 8008036:	9209      	str	r2, [sp, #36]	; 0x24
 8008038:	f89a 3000 	ldrb.w	r3, [sl]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 80a2 	beq.w	8008186 <_vfiprintf_r+0x20e>
 8008042:	2300      	movs	r3, #0
 8008044:	f04f 32ff 	mov.w	r2, #4294967295
 8008048:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800804c:	f10a 0a01 	add.w	sl, sl, #1
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	9307      	str	r3, [sp, #28]
 8008054:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008058:	931a      	str	r3, [sp, #104]	; 0x68
 800805a:	4654      	mov	r4, sl
 800805c:	2205      	movs	r2, #5
 800805e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008062:	4858      	ldr	r0, [pc, #352]	; (80081c4 <_vfiprintf_r+0x24c>)
 8008064:	f7f8 f8bc 	bl	80001e0 <memchr>
 8008068:	9a04      	ldr	r2, [sp, #16]
 800806a:	b9d8      	cbnz	r0, 80080a4 <_vfiprintf_r+0x12c>
 800806c:	06d1      	lsls	r1, r2, #27
 800806e:	bf44      	itt	mi
 8008070:	2320      	movmi	r3, #32
 8008072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008076:	0713      	lsls	r3, r2, #28
 8008078:	bf44      	itt	mi
 800807a:	232b      	movmi	r3, #43	; 0x2b
 800807c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008080:	f89a 3000 	ldrb.w	r3, [sl]
 8008084:	2b2a      	cmp	r3, #42	; 0x2a
 8008086:	d015      	beq.n	80080b4 <_vfiprintf_r+0x13c>
 8008088:	9a07      	ldr	r2, [sp, #28]
 800808a:	4654      	mov	r4, sl
 800808c:	2000      	movs	r0, #0
 800808e:	f04f 0c0a 	mov.w	ip, #10
 8008092:	4621      	mov	r1, r4
 8008094:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008098:	3b30      	subs	r3, #48	; 0x30
 800809a:	2b09      	cmp	r3, #9
 800809c:	d94e      	bls.n	800813c <_vfiprintf_r+0x1c4>
 800809e:	b1b0      	cbz	r0, 80080ce <_vfiprintf_r+0x156>
 80080a0:	9207      	str	r2, [sp, #28]
 80080a2:	e014      	b.n	80080ce <_vfiprintf_r+0x156>
 80080a4:	eba0 0308 	sub.w	r3, r0, r8
 80080a8:	fa09 f303 	lsl.w	r3, r9, r3
 80080ac:	4313      	orrs	r3, r2
 80080ae:	9304      	str	r3, [sp, #16]
 80080b0:	46a2      	mov	sl, r4
 80080b2:	e7d2      	b.n	800805a <_vfiprintf_r+0xe2>
 80080b4:	9b03      	ldr	r3, [sp, #12]
 80080b6:	1d19      	adds	r1, r3, #4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	9103      	str	r1, [sp, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	bfbb      	ittet	lt
 80080c0:	425b      	neglt	r3, r3
 80080c2:	f042 0202 	orrlt.w	r2, r2, #2
 80080c6:	9307      	strge	r3, [sp, #28]
 80080c8:	9307      	strlt	r3, [sp, #28]
 80080ca:	bfb8      	it	lt
 80080cc:	9204      	strlt	r2, [sp, #16]
 80080ce:	7823      	ldrb	r3, [r4, #0]
 80080d0:	2b2e      	cmp	r3, #46	; 0x2e
 80080d2:	d10c      	bne.n	80080ee <_vfiprintf_r+0x176>
 80080d4:	7863      	ldrb	r3, [r4, #1]
 80080d6:	2b2a      	cmp	r3, #42	; 0x2a
 80080d8:	d135      	bne.n	8008146 <_vfiprintf_r+0x1ce>
 80080da:	9b03      	ldr	r3, [sp, #12]
 80080dc:	1d1a      	adds	r2, r3, #4
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	9203      	str	r2, [sp, #12]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	bfb8      	it	lt
 80080e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80080ea:	3402      	adds	r4, #2
 80080ec:	9305      	str	r3, [sp, #20]
 80080ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081d4 <_vfiprintf_r+0x25c>
 80080f2:	7821      	ldrb	r1, [r4, #0]
 80080f4:	2203      	movs	r2, #3
 80080f6:	4650      	mov	r0, sl
 80080f8:	f7f8 f872 	bl	80001e0 <memchr>
 80080fc:	b140      	cbz	r0, 8008110 <_vfiprintf_r+0x198>
 80080fe:	2340      	movs	r3, #64	; 0x40
 8008100:	eba0 000a 	sub.w	r0, r0, sl
 8008104:	fa03 f000 	lsl.w	r0, r3, r0
 8008108:	9b04      	ldr	r3, [sp, #16]
 800810a:	4303      	orrs	r3, r0
 800810c:	3401      	adds	r4, #1
 800810e:	9304      	str	r3, [sp, #16]
 8008110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008114:	482c      	ldr	r0, [pc, #176]	; (80081c8 <_vfiprintf_r+0x250>)
 8008116:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800811a:	2206      	movs	r2, #6
 800811c:	f7f8 f860 	bl	80001e0 <memchr>
 8008120:	2800      	cmp	r0, #0
 8008122:	d03f      	beq.n	80081a4 <_vfiprintf_r+0x22c>
 8008124:	4b29      	ldr	r3, [pc, #164]	; (80081cc <_vfiprintf_r+0x254>)
 8008126:	bb1b      	cbnz	r3, 8008170 <_vfiprintf_r+0x1f8>
 8008128:	9b03      	ldr	r3, [sp, #12]
 800812a:	3307      	adds	r3, #7
 800812c:	f023 0307 	bic.w	r3, r3, #7
 8008130:	3308      	adds	r3, #8
 8008132:	9303      	str	r3, [sp, #12]
 8008134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008136:	443b      	add	r3, r7
 8008138:	9309      	str	r3, [sp, #36]	; 0x24
 800813a:	e767      	b.n	800800c <_vfiprintf_r+0x94>
 800813c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008140:	460c      	mov	r4, r1
 8008142:	2001      	movs	r0, #1
 8008144:	e7a5      	b.n	8008092 <_vfiprintf_r+0x11a>
 8008146:	2300      	movs	r3, #0
 8008148:	3401      	adds	r4, #1
 800814a:	9305      	str	r3, [sp, #20]
 800814c:	4619      	mov	r1, r3
 800814e:	f04f 0c0a 	mov.w	ip, #10
 8008152:	4620      	mov	r0, r4
 8008154:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008158:	3a30      	subs	r2, #48	; 0x30
 800815a:	2a09      	cmp	r2, #9
 800815c:	d903      	bls.n	8008166 <_vfiprintf_r+0x1ee>
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0c5      	beq.n	80080ee <_vfiprintf_r+0x176>
 8008162:	9105      	str	r1, [sp, #20]
 8008164:	e7c3      	b.n	80080ee <_vfiprintf_r+0x176>
 8008166:	fb0c 2101 	mla	r1, ip, r1, r2
 800816a:	4604      	mov	r4, r0
 800816c:	2301      	movs	r3, #1
 800816e:	e7f0      	b.n	8008152 <_vfiprintf_r+0x1da>
 8008170:	ab03      	add	r3, sp, #12
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	462a      	mov	r2, r5
 8008176:	4b16      	ldr	r3, [pc, #88]	; (80081d0 <_vfiprintf_r+0x258>)
 8008178:	a904      	add	r1, sp, #16
 800817a:	4630      	mov	r0, r6
 800817c:	f7fb fd9e 	bl	8003cbc <_printf_float>
 8008180:	4607      	mov	r7, r0
 8008182:	1c78      	adds	r0, r7, #1
 8008184:	d1d6      	bne.n	8008134 <_vfiprintf_r+0x1bc>
 8008186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008188:	07d9      	lsls	r1, r3, #31
 800818a:	d405      	bmi.n	8008198 <_vfiprintf_r+0x220>
 800818c:	89ab      	ldrh	r3, [r5, #12]
 800818e:	059a      	lsls	r2, r3, #22
 8008190:	d402      	bmi.n	8008198 <_vfiprintf_r+0x220>
 8008192:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008194:	f7fe ff32 	bl	8006ffc <__retarget_lock_release_recursive>
 8008198:	89ab      	ldrh	r3, [r5, #12]
 800819a:	065b      	lsls	r3, r3, #25
 800819c:	f53f af12 	bmi.w	8007fc4 <_vfiprintf_r+0x4c>
 80081a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081a2:	e711      	b.n	8007fc8 <_vfiprintf_r+0x50>
 80081a4:	ab03      	add	r3, sp, #12
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	462a      	mov	r2, r5
 80081aa:	4b09      	ldr	r3, [pc, #36]	; (80081d0 <_vfiprintf_r+0x258>)
 80081ac:	a904      	add	r1, sp, #16
 80081ae:	4630      	mov	r0, r6
 80081b0:	f7fc f828 	bl	8004204 <_printf_i>
 80081b4:	e7e4      	b.n	8008180 <_vfiprintf_r+0x208>
 80081b6:	bf00      	nop
 80081b8:	08008a54 	.word	0x08008a54
 80081bc:	08008a74 	.word	0x08008a74
 80081c0:	08008a34 	.word	0x08008a34
 80081c4:	08008c6c 	.word	0x08008c6c
 80081c8:	08008c76 	.word	0x08008c76
 80081cc:	08003cbd 	.word	0x08003cbd
 80081d0:	08007f53 	.word	0x08007f53
 80081d4:	08008c72 	.word	0x08008c72

080081d8 <nan>:
 80081d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80081e0 <nan+0x8>
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	00000000 	.word	0x00000000
 80081e4:	7ff80000 	.word	0x7ff80000

080081e8 <_sbrk_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4d06      	ldr	r5, [pc, #24]	; (8008204 <_sbrk_r+0x1c>)
 80081ec:	2300      	movs	r3, #0
 80081ee:	4604      	mov	r4, r0
 80081f0:	4608      	mov	r0, r1
 80081f2:	602b      	str	r3, [r5, #0]
 80081f4:	f7f9 fab8 	bl	8001768 <_sbrk>
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	d102      	bne.n	8008202 <_sbrk_r+0x1a>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	b103      	cbz	r3, 8008202 <_sbrk_r+0x1a>
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	bd38      	pop	{r3, r4, r5, pc}
 8008204:	20000274 	.word	0x20000274

08008208 <__sread>:
 8008208:	b510      	push	{r4, lr}
 800820a:	460c      	mov	r4, r1
 800820c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008210:	f000 f93a 	bl	8008488 <_read_r>
 8008214:	2800      	cmp	r0, #0
 8008216:	bfab      	itete	ge
 8008218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800821a:	89a3      	ldrhlt	r3, [r4, #12]
 800821c:	181b      	addge	r3, r3, r0
 800821e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008222:	bfac      	ite	ge
 8008224:	6563      	strge	r3, [r4, #84]	; 0x54
 8008226:	81a3      	strhlt	r3, [r4, #12]
 8008228:	bd10      	pop	{r4, pc}

0800822a <__swrite>:
 800822a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800822e:	461f      	mov	r7, r3
 8008230:	898b      	ldrh	r3, [r1, #12]
 8008232:	05db      	lsls	r3, r3, #23
 8008234:	4605      	mov	r5, r0
 8008236:	460c      	mov	r4, r1
 8008238:	4616      	mov	r6, r2
 800823a:	d505      	bpl.n	8008248 <__swrite+0x1e>
 800823c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008240:	2302      	movs	r3, #2
 8008242:	2200      	movs	r2, #0
 8008244:	f000 f8b8 	bl	80083b8 <_lseek_r>
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800824e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	4632      	mov	r2, r6
 8008256:	463b      	mov	r3, r7
 8008258:	4628      	mov	r0, r5
 800825a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800825e:	f000 b837 	b.w	80082d0 <_write_r>

08008262 <__sseek>:
 8008262:	b510      	push	{r4, lr}
 8008264:	460c      	mov	r4, r1
 8008266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800826a:	f000 f8a5 	bl	80083b8 <_lseek_r>
 800826e:	1c43      	adds	r3, r0, #1
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	bf15      	itete	ne
 8008274:	6560      	strne	r0, [r4, #84]	; 0x54
 8008276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800827a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800827e:	81a3      	strheq	r3, [r4, #12]
 8008280:	bf18      	it	ne
 8008282:	81a3      	strhne	r3, [r4, #12]
 8008284:	bd10      	pop	{r4, pc}

08008286 <__sclose>:
 8008286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828a:	f000 b851 	b.w	8008330 <_close_r>

0800828e <strncmp>:
 800828e:	b510      	push	{r4, lr}
 8008290:	b17a      	cbz	r2, 80082b2 <strncmp+0x24>
 8008292:	4603      	mov	r3, r0
 8008294:	3901      	subs	r1, #1
 8008296:	1884      	adds	r4, r0, r2
 8008298:	f813 0b01 	ldrb.w	r0, [r3], #1
 800829c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80082a0:	4290      	cmp	r0, r2
 80082a2:	d101      	bne.n	80082a8 <strncmp+0x1a>
 80082a4:	42a3      	cmp	r3, r4
 80082a6:	d101      	bne.n	80082ac <strncmp+0x1e>
 80082a8:	1a80      	subs	r0, r0, r2
 80082aa:	bd10      	pop	{r4, pc}
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d1f3      	bne.n	8008298 <strncmp+0xa>
 80082b0:	e7fa      	b.n	80082a8 <strncmp+0x1a>
 80082b2:	4610      	mov	r0, r2
 80082b4:	e7f9      	b.n	80082aa <strncmp+0x1c>

080082b6 <__ascii_wctomb>:
 80082b6:	b149      	cbz	r1, 80082cc <__ascii_wctomb+0x16>
 80082b8:	2aff      	cmp	r2, #255	; 0xff
 80082ba:	bf85      	ittet	hi
 80082bc:	238a      	movhi	r3, #138	; 0x8a
 80082be:	6003      	strhi	r3, [r0, #0]
 80082c0:	700a      	strbls	r2, [r1, #0]
 80082c2:	f04f 30ff 	movhi.w	r0, #4294967295
 80082c6:	bf98      	it	ls
 80082c8:	2001      	movls	r0, #1
 80082ca:	4770      	bx	lr
 80082cc:	4608      	mov	r0, r1
 80082ce:	4770      	bx	lr

080082d0 <_write_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4d07      	ldr	r5, [pc, #28]	; (80082f0 <_write_r+0x20>)
 80082d4:	4604      	mov	r4, r0
 80082d6:	4608      	mov	r0, r1
 80082d8:	4611      	mov	r1, r2
 80082da:	2200      	movs	r2, #0
 80082dc:	602a      	str	r2, [r5, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	f7f9 f9f1 	bl	80016c6 <_write>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d102      	bne.n	80082ee <_write_r+0x1e>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	b103      	cbz	r3, 80082ee <_write_r+0x1e>
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	20000274 	.word	0x20000274

080082f4 <__assert_func>:
 80082f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082f6:	4614      	mov	r4, r2
 80082f8:	461a      	mov	r2, r3
 80082fa:	4b09      	ldr	r3, [pc, #36]	; (8008320 <__assert_func+0x2c>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4605      	mov	r5, r0
 8008300:	68d8      	ldr	r0, [r3, #12]
 8008302:	b14c      	cbz	r4, 8008318 <__assert_func+0x24>
 8008304:	4b07      	ldr	r3, [pc, #28]	; (8008324 <__assert_func+0x30>)
 8008306:	9100      	str	r1, [sp, #0]
 8008308:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800830c:	4906      	ldr	r1, [pc, #24]	; (8008328 <__assert_func+0x34>)
 800830e:	462b      	mov	r3, r5
 8008310:	f000 f81e 	bl	8008350 <fiprintf>
 8008314:	f000 f8ca 	bl	80084ac <abort>
 8008318:	4b04      	ldr	r3, [pc, #16]	; (800832c <__assert_func+0x38>)
 800831a:	461c      	mov	r4, r3
 800831c:	e7f3      	b.n	8008306 <__assert_func+0x12>
 800831e:	bf00      	nop
 8008320:	20000018 	.word	0x20000018
 8008324:	08008c7d 	.word	0x08008c7d
 8008328:	08008c8a 	.word	0x08008c8a
 800832c:	08008cb8 	.word	0x08008cb8

08008330 <_close_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4d06      	ldr	r5, [pc, #24]	; (800834c <_close_r+0x1c>)
 8008334:	2300      	movs	r3, #0
 8008336:	4604      	mov	r4, r0
 8008338:	4608      	mov	r0, r1
 800833a:	602b      	str	r3, [r5, #0]
 800833c:	f7f9 f9df 	bl	80016fe <_close>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_close_r+0x1a>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_close_r+0x1a>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	20000274 	.word	0x20000274

08008350 <fiprintf>:
 8008350:	b40e      	push	{r1, r2, r3}
 8008352:	b503      	push	{r0, r1, lr}
 8008354:	4601      	mov	r1, r0
 8008356:	ab03      	add	r3, sp, #12
 8008358:	4805      	ldr	r0, [pc, #20]	; (8008370 <fiprintf+0x20>)
 800835a:	f853 2b04 	ldr.w	r2, [r3], #4
 800835e:	6800      	ldr	r0, [r0, #0]
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	f7ff fe09 	bl	8007f78 <_vfiprintf_r>
 8008366:	b002      	add	sp, #8
 8008368:	f85d eb04 	ldr.w	lr, [sp], #4
 800836c:	b003      	add	sp, #12
 800836e:	4770      	bx	lr
 8008370:	20000018 	.word	0x20000018

08008374 <_fstat_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4d07      	ldr	r5, [pc, #28]	; (8008394 <_fstat_r+0x20>)
 8008378:	2300      	movs	r3, #0
 800837a:	4604      	mov	r4, r0
 800837c:	4608      	mov	r0, r1
 800837e:	4611      	mov	r1, r2
 8008380:	602b      	str	r3, [r5, #0]
 8008382:	f7f9 f9c8 	bl	8001716 <_fstat>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	d102      	bne.n	8008390 <_fstat_r+0x1c>
 800838a:	682b      	ldr	r3, [r5, #0]
 800838c:	b103      	cbz	r3, 8008390 <_fstat_r+0x1c>
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	bd38      	pop	{r3, r4, r5, pc}
 8008392:	bf00      	nop
 8008394:	20000274 	.word	0x20000274

08008398 <_isatty_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4d06      	ldr	r5, [pc, #24]	; (80083b4 <_isatty_r+0x1c>)
 800839c:	2300      	movs	r3, #0
 800839e:	4604      	mov	r4, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	602b      	str	r3, [r5, #0]
 80083a4:	f7f9 f9c7 	bl	8001736 <_isatty>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_isatty_r+0x1a>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_isatty_r+0x1a>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	20000274 	.word	0x20000274

080083b8 <_lseek_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d07      	ldr	r5, [pc, #28]	; (80083d8 <_lseek_r+0x20>)
 80083bc:	4604      	mov	r4, r0
 80083be:	4608      	mov	r0, r1
 80083c0:	4611      	mov	r1, r2
 80083c2:	2200      	movs	r2, #0
 80083c4:	602a      	str	r2, [r5, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	f7f9 f9c0 	bl	800174c <_lseek>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	d102      	bne.n	80083d6 <_lseek_r+0x1e>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	b103      	cbz	r3, 80083d6 <_lseek_r+0x1e>
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
 80083d8:	20000274 	.word	0x20000274

080083dc <memmove>:
 80083dc:	4288      	cmp	r0, r1
 80083de:	b510      	push	{r4, lr}
 80083e0:	eb01 0402 	add.w	r4, r1, r2
 80083e4:	d902      	bls.n	80083ec <memmove+0x10>
 80083e6:	4284      	cmp	r4, r0
 80083e8:	4623      	mov	r3, r4
 80083ea:	d807      	bhi.n	80083fc <memmove+0x20>
 80083ec:	1e43      	subs	r3, r0, #1
 80083ee:	42a1      	cmp	r1, r4
 80083f0:	d008      	beq.n	8008404 <memmove+0x28>
 80083f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083fa:	e7f8      	b.n	80083ee <memmove+0x12>
 80083fc:	4402      	add	r2, r0
 80083fe:	4601      	mov	r1, r0
 8008400:	428a      	cmp	r2, r1
 8008402:	d100      	bne.n	8008406 <memmove+0x2a>
 8008404:	bd10      	pop	{r4, pc}
 8008406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800840a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800840e:	e7f7      	b.n	8008400 <memmove+0x24>

08008410 <__malloc_lock>:
 8008410:	4801      	ldr	r0, [pc, #4]	; (8008418 <__malloc_lock+0x8>)
 8008412:	f7fe bdf2 	b.w	8006ffa <__retarget_lock_acquire_recursive>
 8008416:	bf00      	nop
 8008418:	20000268 	.word	0x20000268

0800841c <__malloc_unlock>:
 800841c:	4801      	ldr	r0, [pc, #4]	; (8008424 <__malloc_unlock+0x8>)
 800841e:	f7fe bded 	b.w	8006ffc <__retarget_lock_release_recursive>
 8008422:	bf00      	nop
 8008424:	20000268 	.word	0x20000268

08008428 <_realloc_r>:
 8008428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800842c:	4680      	mov	r8, r0
 800842e:	4614      	mov	r4, r2
 8008430:	460e      	mov	r6, r1
 8008432:	b921      	cbnz	r1, 800843e <_realloc_r+0x16>
 8008434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008438:	4611      	mov	r1, r2
 800843a:	f7ff bba3 	b.w	8007b84 <_malloc_r>
 800843e:	b92a      	cbnz	r2, 800844c <_realloc_r+0x24>
 8008440:	f7ff fb34 	bl	8007aac <_free_r>
 8008444:	4625      	mov	r5, r4
 8008446:	4628      	mov	r0, r5
 8008448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800844c:	f000 f835 	bl	80084ba <_malloc_usable_size_r>
 8008450:	4284      	cmp	r4, r0
 8008452:	4607      	mov	r7, r0
 8008454:	d802      	bhi.n	800845c <_realloc_r+0x34>
 8008456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800845a:	d812      	bhi.n	8008482 <_realloc_r+0x5a>
 800845c:	4621      	mov	r1, r4
 800845e:	4640      	mov	r0, r8
 8008460:	f7ff fb90 	bl	8007b84 <_malloc_r>
 8008464:	4605      	mov	r5, r0
 8008466:	2800      	cmp	r0, #0
 8008468:	d0ed      	beq.n	8008446 <_realloc_r+0x1e>
 800846a:	42bc      	cmp	r4, r7
 800846c:	4622      	mov	r2, r4
 800846e:	4631      	mov	r1, r6
 8008470:	bf28      	it	cs
 8008472:	463a      	movcs	r2, r7
 8008474:	f7fb fb6c 	bl	8003b50 <memcpy>
 8008478:	4631      	mov	r1, r6
 800847a:	4640      	mov	r0, r8
 800847c:	f7ff fb16 	bl	8007aac <_free_r>
 8008480:	e7e1      	b.n	8008446 <_realloc_r+0x1e>
 8008482:	4635      	mov	r5, r6
 8008484:	e7df      	b.n	8008446 <_realloc_r+0x1e>
	...

08008488 <_read_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4d07      	ldr	r5, [pc, #28]	; (80084a8 <_read_r+0x20>)
 800848c:	4604      	mov	r4, r0
 800848e:	4608      	mov	r0, r1
 8008490:	4611      	mov	r1, r2
 8008492:	2200      	movs	r2, #0
 8008494:	602a      	str	r2, [r5, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	f7f9 f8f8 	bl	800168c <_read>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_read_r+0x1e>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_read_r+0x1e>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	20000274 	.word	0x20000274

080084ac <abort>:
 80084ac:	b508      	push	{r3, lr}
 80084ae:	2006      	movs	r0, #6
 80084b0:	f000 f834 	bl	800851c <raise>
 80084b4:	2001      	movs	r0, #1
 80084b6:	f7f9 f8df 	bl	8001678 <_exit>

080084ba <_malloc_usable_size_r>:
 80084ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084be:	1f18      	subs	r0, r3, #4
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	bfbc      	itt	lt
 80084c4:	580b      	ldrlt	r3, [r1, r0]
 80084c6:	18c0      	addlt	r0, r0, r3
 80084c8:	4770      	bx	lr

080084ca <_raise_r>:
 80084ca:	291f      	cmp	r1, #31
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4604      	mov	r4, r0
 80084d0:	460d      	mov	r5, r1
 80084d2:	d904      	bls.n	80084de <_raise_r+0x14>
 80084d4:	2316      	movs	r3, #22
 80084d6:	6003      	str	r3, [r0, #0]
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	bd38      	pop	{r3, r4, r5, pc}
 80084de:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084e0:	b112      	cbz	r2, 80084e8 <_raise_r+0x1e>
 80084e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084e6:	b94b      	cbnz	r3, 80084fc <_raise_r+0x32>
 80084e8:	4620      	mov	r0, r4
 80084ea:	f000 f831 	bl	8008550 <_getpid_r>
 80084ee:	462a      	mov	r2, r5
 80084f0:	4601      	mov	r1, r0
 80084f2:	4620      	mov	r0, r4
 80084f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084f8:	f000 b818 	b.w	800852c <_kill_r>
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d00a      	beq.n	8008516 <_raise_r+0x4c>
 8008500:	1c59      	adds	r1, r3, #1
 8008502:	d103      	bne.n	800850c <_raise_r+0x42>
 8008504:	2316      	movs	r3, #22
 8008506:	6003      	str	r3, [r0, #0]
 8008508:	2001      	movs	r0, #1
 800850a:	e7e7      	b.n	80084dc <_raise_r+0x12>
 800850c:	2400      	movs	r4, #0
 800850e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008512:	4628      	mov	r0, r5
 8008514:	4798      	blx	r3
 8008516:	2000      	movs	r0, #0
 8008518:	e7e0      	b.n	80084dc <_raise_r+0x12>
	...

0800851c <raise>:
 800851c:	4b02      	ldr	r3, [pc, #8]	; (8008528 <raise+0xc>)
 800851e:	4601      	mov	r1, r0
 8008520:	6818      	ldr	r0, [r3, #0]
 8008522:	f7ff bfd2 	b.w	80084ca <_raise_r>
 8008526:	bf00      	nop
 8008528:	20000018 	.word	0x20000018

0800852c <_kill_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4d07      	ldr	r5, [pc, #28]	; (800854c <_kill_r+0x20>)
 8008530:	2300      	movs	r3, #0
 8008532:	4604      	mov	r4, r0
 8008534:	4608      	mov	r0, r1
 8008536:	4611      	mov	r1, r2
 8008538:	602b      	str	r3, [r5, #0]
 800853a:	f7f9 f88d 	bl	8001658 <_kill>
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	d102      	bne.n	8008548 <_kill_r+0x1c>
 8008542:	682b      	ldr	r3, [r5, #0]
 8008544:	b103      	cbz	r3, 8008548 <_kill_r+0x1c>
 8008546:	6023      	str	r3, [r4, #0]
 8008548:	bd38      	pop	{r3, r4, r5, pc}
 800854a:	bf00      	nop
 800854c:	20000274 	.word	0x20000274

08008550 <_getpid_r>:
 8008550:	f7f9 b87a 	b.w	8001648 <_getpid>

08008554 <_init>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	bf00      	nop
 8008558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855a:	bc08      	pop	{r3}
 800855c:	469e      	mov	lr, r3
 800855e:	4770      	bx	lr

08008560 <_fini>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	bf00      	nop
 8008564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008566:	bc08      	pop	{r3}
 8008568:	469e      	mov	lr, r3
 800856a:	4770      	bx	lr
