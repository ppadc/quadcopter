
GyrocamDemoRecap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9a0  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  0800ba58  0800ba58  0001ba58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0b4  0800c0b4  00020268  2**0
                  CONTENTS
  4 .ARM          00000000  0800c0b4  0800c0b4  00020268  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c0b4  0800c0b4  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c0b4  0800c0b4  0001c0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c0bc  0800c0bc  0001c0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800c0c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          0000034c  20000268  0800c32c  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  0800c32c  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187e8  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b4d  00000000  00000000  00038a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0003c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  0003d670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a150  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015477  00000000  00000000  00058710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c1b2  00000000  00000000  0006db87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9d39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed0  00000000  00000000  000f9d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000268 	.word	0x20000268
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800ba2c 	.word	0x0800ba2c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000026c 	.word	0x2000026c
 80000fc:	0800ba2c 	.word	0x0800ba2c

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	1c10      	adds	r0, r2, #0
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	1c19      	adds	r1, r3, #0
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f000 ff6f 	bl	800132c <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 feb9 	bl	80011d0 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 ff61 	bl	800132c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 ff57 	bl	800132c <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 fedb 	bl	8001248 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 fed1 	bl	8001248 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_ui2f>:
 80004b4:	b570      	push	{r4, r5, r6, lr}
 80004b6:	1e05      	subs	r5, r0, #0
 80004b8:	d00e      	beq.n	80004d8 <__aeabi_ui2f+0x24>
 80004ba:	f001 fe97 	bl	80021ec <__clzsi2>
 80004be:	239e      	movs	r3, #158	; 0x9e
 80004c0:	0004      	movs	r4, r0
 80004c2:	1a1b      	subs	r3, r3, r0
 80004c4:	2b96      	cmp	r3, #150	; 0x96
 80004c6:	dc0c      	bgt.n	80004e2 <__aeabi_ui2f+0x2e>
 80004c8:	2808      	cmp	r0, #8
 80004ca:	dd01      	ble.n	80004d0 <__aeabi_ui2f+0x1c>
 80004cc:	3c08      	subs	r4, #8
 80004ce:	40a5      	lsls	r5, r4
 80004d0:	026d      	lsls	r5, r5, #9
 80004d2:	0a6d      	lsrs	r5, r5, #9
 80004d4:	b2d8      	uxtb	r0, r3
 80004d6:	e001      	b.n	80004dc <__aeabi_ui2f+0x28>
 80004d8:	2000      	movs	r0, #0
 80004da:	2500      	movs	r5, #0
 80004dc:	05c0      	lsls	r0, r0, #23
 80004de:	4328      	orrs	r0, r5
 80004e0:	bd70      	pop	{r4, r5, r6, pc}
 80004e2:	2b99      	cmp	r3, #153	; 0x99
 80004e4:	dd09      	ble.n	80004fa <__aeabi_ui2f+0x46>
 80004e6:	0002      	movs	r2, r0
 80004e8:	0029      	movs	r1, r5
 80004ea:	321b      	adds	r2, #27
 80004ec:	4091      	lsls	r1, r2
 80004ee:	1e4a      	subs	r2, r1, #1
 80004f0:	4191      	sbcs	r1, r2
 80004f2:	2205      	movs	r2, #5
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	40d5      	lsrs	r5, r2
 80004f8:	430d      	orrs	r5, r1
 80004fa:	2c05      	cmp	r4, #5
 80004fc:	dd01      	ble.n	8000502 <__aeabi_ui2f+0x4e>
 80004fe:	1f62      	subs	r2, r4, #5
 8000500:	4095      	lsls	r5, r2
 8000502:	0029      	movs	r1, r5
 8000504:	4e08      	ldr	r6, [pc, #32]	; (8000528 <__aeabi_ui2f+0x74>)
 8000506:	4031      	ands	r1, r6
 8000508:	076a      	lsls	r2, r5, #29
 800050a:	d009      	beq.n	8000520 <__aeabi_ui2f+0x6c>
 800050c:	200f      	movs	r0, #15
 800050e:	4028      	ands	r0, r5
 8000510:	2804      	cmp	r0, #4
 8000512:	d005      	beq.n	8000520 <__aeabi_ui2f+0x6c>
 8000514:	3104      	adds	r1, #4
 8000516:	014a      	lsls	r2, r1, #5
 8000518:	d502      	bpl.n	8000520 <__aeabi_ui2f+0x6c>
 800051a:	239f      	movs	r3, #159	; 0x9f
 800051c:	4031      	ands	r1, r6
 800051e:	1b1b      	subs	r3, r3, r4
 8000520:	0189      	lsls	r1, r1, #6
 8000522:	0a4d      	lsrs	r5, r1, #9
 8000524:	b2d8      	uxtb	r0, r3
 8000526:	e7d9      	b.n	80004dc <__aeabi_ui2f+0x28>
 8000528:	fbffffff 	.word	0xfbffffff

0800052c <__aeabi_dadd>:
 800052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052e:	464f      	mov	r7, r9
 8000530:	46d6      	mov	lr, sl
 8000532:	4646      	mov	r6, r8
 8000534:	000d      	movs	r5, r1
 8000536:	0001      	movs	r1, r0
 8000538:	0018      	movs	r0, r3
 800053a:	b5c0      	push	{r6, r7, lr}
 800053c:	0017      	movs	r7, r2
 800053e:	032b      	lsls	r3, r5, #12
 8000540:	0a5a      	lsrs	r2, r3, #9
 8000542:	0f4b      	lsrs	r3, r1, #29
 8000544:	4313      	orrs	r3, r2
 8000546:	00ca      	lsls	r2, r1, #3
 8000548:	4691      	mov	r9, r2
 800054a:	0302      	lsls	r2, r0, #12
 800054c:	006e      	lsls	r6, r5, #1
 800054e:	0041      	lsls	r1, r0, #1
 8000550:	0a52      	lsrs	r2, r2, #9
 8000552:	0fec      	lsrs	r4, r5, #31
 8000554:	0f7d      	lsrs	r5, r7, #29
 8000556:	4315      	orrs	r5, r2
 8000558:	0d76      	lsrs	r6, r6, #21
 800055a:	0d49      	lsrs	r1, r1, #21
 800055c:	0fc0      	lsrs	r0, r0, #31
 800055e:	4682      	mov	sl, r0
 8000560:	46ac      	mov	ip, r5
 8000562:	00ff      	lsls	r7, r7, #3
 8000564:	1a72      	subs	r2, r6, r1
 8000566:	4284      	cmp	r4, r0
 8000568:	d100      	bne.n	800056c <__aeabi_dadd+0x40>
 800056a:	e098      	b.n	800069e <__aeabi_dadd+0x172>
 800056c:	2a00      	cmp	r2, #0
 800056e:	dc00      	bgt.n	8000572 <__aeabi_dadd+0x46>
 8000570:	e081      	b.n	8000676 <__aeabi_dadd+0x14a>
 8000572:	2900      	cmp	r1, #0
 8000574:	d100      	bne.n	8000578 <__aeabi_dadd+0x4c>
 8000576:	e0b6      	b.n	80006e6 <__aeabi_dadd+0x1ba>
 8000578:	49c9      	ldr	r1, [pc, #804]	; (80008a0 <__aeabi_dadd+0x374>)
 800057a:	428e      	cmp	r6, r1
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0x54>
 800057e:	e172      	b.n	8000866 <__aeabi_dadd+0x33a>
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	0028      	movs	r0, r5
 8000584:	0409      	lsls	r1, r1, #16
 8000586:	4308      	orrs	r0, r1
 8000588:	4684      	mov	ip, r0
 800058a:	2a38      	cmp	r2, #56	; 0x38
 800058c:	dd00      	ble.n	8000590 <__aeabi_dadd+0x64>
 800058e:	e15e      	b.n	800084e <__aeabi_dadd+0x322>
 8000590:	2a1f      	cmp	r2, #31
 8000592:	dd00      	ble.n	8000596 <__aeabi_dadd+0x6a>
 8000594:	e1ee      	b.n	8000974 <__aeabi_dadd+0x448>
 8000596:	2020      	movs	r0, #32
 8000598:	0039      	movs	r1, r7
 800059a:	4665      	mov	r5, ip
 800059c:	1a80      	subs	r0, r0, r2
 800059e:	4087      	lsls	r7, r0
 80005a0:	40d1      	lsrs	r1, r2
 80005a2:	4085      	lsls	r5, r0
 80005a4:	430d      	orrs	r5, r1
 80005a6:	0039      	movs	r1, r7
 80005a8:	1e4f      	subs	r7, r1, #1
 80005aa:	41b9      	sbcs	r1, r7
 80005ac:	4667      	mov	r7, ip
 80005ae:	40d7      	lsrs	r7, r2
 80005b0:	4329      	orrs	r1, r5
 80005b2:	1bdb      	subs	r3, r3, r7
 80005b4:	464a      	mov	r2, r9
 80005b6:	1a55      	subs	r5, r2, r1
 80005b8:	45a9      	cmp	r9, r5
 80005ba:	4189      	sbcs	r1, r1
 80005bc:	4249      	negs	r1, r1
 80005be:	1a5b      	subs	r3, r3, r1
 80005c0:	4698      	mov	r8, r3
 80005c2:	4643      	mov	r3, r8
 80005c4:	021b      	lsls	r3, r3, #8
 80005c6:	d400      	bmi.n	80005ca <__aeabi_dadd+0x9e>
 80005c8:	e0cc      	b.n	8000764 <__aeabi_dadd+0x238>
 80005ca:	4643      	mov	r3, r8
 80005cc:	025b      	lsls	r3, r3, #9
 80005ce:	0a5b      	lsrs	r3, r3, #9
 80005d0:	4698      	mov	r8, r3
 80005d2:	4643      	mov	r3, r8
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0xae>
 80005d8:	e12c      	b.n	8000834 <__aeabi_dadd+0x308>
 80005da:	4640      	mov	r0, r8
 80005dc:	f001 fe06 	bl	80021ec <__clzsi2>
 80005e0:	0001      	movs	r1, r0
 80005e2:	3908      	subs	r1, #8
 80005e4:	2220      	movs	r2, #32
 80005e6:	0028      	movs	r0, r5
 80005e8:	4643      	mov	r3, r8
 80005ea:	1a52      	subs	r2, r2, r1
 80005ec:	408b      	lsls	r3, r1
 80005ee:	40d0      	lsrs	r0, r2
 80005f0:	408d      	lsls	r5, r1
 80005f2:	4303      	orrs	r3, r0
 80005f4:	428e      	cmp	r6, r1
 80005f6:	dd00      	ble.n	80005fa <__aeabi_dadd+0xce>
 80005f8:	e117      	b.n	800082a <__aeabi_dadd+0x2fe>
 80005fa:	1b8e      	subs	r6, r1, r6
 80005fc:	1c72      	adds	r2, r6, #1
 80005fe:	2a1f      	cmp	r2, #31
 8000600:	dd00      	ble.n	8000604 <__aeabi_dadd+0xd8>
 8000602:	e1a7      	b.n	8000954 <__aeabi_dadd+0x428>
 8000604:	2120      	movs	r1, #32
 8000606:	0018      	movs	r0, r3
 8000608:	002e      	movs	r6, r5
 800060a:	1a89      	subs	r1, r1, r2
 800060c:	408d      	lsls	r5, r1
 800060e:	4088      	lsls	r0, r1
 8000610:	40d6      	lsrs	r6, r2
 8000612:	40d3      	lsrs	r3, r2
 8000614:	1e69      	subs	r1, r5, #1
 8000616:	418d      	sbcs	r5, r1
 8000618:	4330      	orrs	r0, r6
 800061a:	4698      	mov	r8, r3
 800061c:	2600      	movs	r6, #0
 800061e:	4305      	orrs	r5, r0
 8000620:	076b      	lsls	r3, r5, #29
 8000622:	d009      	beq.n	8000638 <__aeabi_dadd+0x10c>
 8000624:	230f      	movs	r3, #15
 8000626:	402b      	ands	r3, r5
 8000628:	2b04      	cmp	r3, #4
 800062a:	d005      	beq.n	8000638 <__aeabi_dadd+0x10c>
 800062c:	1d2b      	adds	r3, r5, #4
 800062e:	42ab      	cmp	r3, r5
 8000630:	41ad      	sbcs	r5, r5
 8000632:	426d      	negs	r5, r5
 8000634:	44a8      	add	r8, r5
 8000636:	001d      	movs	r5, r3
 8000638:	4643      	mov	r3, r8
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	d400      	bmi.n	8000640 <__aeabi_dadd+0x114>
 800063e:	e094      	b.n	800076a <__aeabi_dadd+0x23e>
 8000640:	4b97      	ldr	r3, [pc, #604]	; (80008a0 <__aeabi_dadd+0x374>)
 8000642:	1c72      	adds	r2, r6, #1
 8000644:	429a      	cmp	r2, r3
 8000646:	d100      	bne.n	800064a <__aeabi_dadd+0x11e>
 8000648:	e09d      	b.n	8000786 <__aeabi_dadd+0x25a>
 800064a:	4641      	mov	r1, r8
 800064c:	4b95      	ldr	r3, [pc, #596]	; (80008a4 <__aeabi_dadd+0x378>)
 800064e:	08ed      	lsrs	r5, r5, #3
 8000650:	4019      	ands	r1, r3
 8000652:	000b      	movs	r3, r1
 8000654:	0552      	lsls	r2, r2, #21
 8000656:	0749      	lsls	r1, r1, #29
 8000658:	025b      	lsls	r3, r3, #9
 800065a:	4329      	orrs	r1, r5
 800065c:	0b1b      	lsrs	r3, r3, #12
 800065e:	0d52      	lsrs	r2, r2, #21
 8000660:	0512      	lsls	r2, r2, #20
 8000662:	4313      	orrs	r3, r2
 8000664:	07e4      	lsls	r4, r4, #31
 8000666:	4323      	orrs	r3, r4
 8000668:	0008      	movs	r0, r1
 800066a:	0019      	movs	r1, r3
 800066c:	bce0      	pop	{r5, r6, r7}
 800066e:	46ba      	mov	sl, r7
 8000670:	46b1      	mov	r9, r6
 8000672:	46a8      	mov	r8, r5
 8000674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000676:	2a00      	cmp	r2, #0
 8000678:	d043      	beq.n	8000702 <__aeabi_dadd+0x1d6>
 800067a:	1b8a      	subs	r2, r1, r6
 800067c:	2e00      	cmp	r6, #0
 800067e:	d000      	beq.n	8000682 <__aeabi_dadd+0x156>
 8000680:	e12a      	b.n	80008d8 <__aeabi_dadd+0x3ac>
 8000682:	464c      	mov	r4, r9
 8000684:	431c      	orrs	r4, r3
 8000686:	d100      	bne.n	800068a <__aeabi_dadd+0x15e>
 8000688:	e1d1      	b.n	8000a2e <__aeabi_dadd+0x502>
 800068a:	1e54      	subs	r4, r2, #1
 800068c:	2a01      	cmp	r2, #1
 800068e:	d100      	bne.n	8000692 <__aeabi_dadd+0x166>
 8000690:	e21f      	b.n	8000ad2 <__aeabi_dadd+0x5a6>
 8000692:	4d83      	ldr	r5, [pc, #524]	; (80008a0 <__aeabi_dadd+0x374>)
 8000694:	42aa      	cmp	r2, r5
 8000696:	d100      	bne.n	800069a <__aeabi_dadd+0x16e>
 8000698:	e272      	b.n	8000b80 <__aeabi_dadd+0x654>
 800069a:	0022      	movs	r2, r4
 800069c:	e123      	b.n	80008e6 <__aeabi_dadd+0x3ba>
 800069e:	2a00      	cmp	r2, #0
 80006a0:	dc00      	bgt.n	80006a4 <__aeabi_dadd+0x178>
 80006a2:	e098      	b.n	80007d6 <__aeabi_dadd+0x2aa>
 80006a4:	2900      	cmp	r1, #0
 80006a6:	d042      	beq.n	800072e <__aeabi_dadd+0x202>
 80006a8:	497d      	ldr	r1, [pc, #500]	; (80008a0 <__aeabi_dadd+0x374>)
 80006aa:	428e      	cmp	r6, r1
 80006ac:	d100      	bne.n	80006b0 <__aeabi_dadd+0x184>
 80006ae:	e0da      	b.n	8000866 <__aeabi_dadd+0x33a>
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	0028      	movs	r0, r5
 80006b4:	0409      	lsls	r1, r1, #16
 80006b6:	4308      	orrs	r0, r1
 80006b8:	4684      	mov	ip, r0
 80006ba:	2a38      	cmp	r2, #56	; 0x38
 80006bc:	dd00      	ble.n	80006c0 <__aeabi_dadd+0x194>
 80006be:	e129      	b.n	8000914 <__aeabi_dadd+0x3e8>
 80006c0:	2a1f      	cmp	r2, #31
 80006c2:	dc00      	bgt.n	80006c6 <__aeabi_dadd+0x19a>
 80006c4:	e187      	b.n	80009d6 <__aeabi_dadd+0x4aa>
 80006c6:	0011      	movs	r1, r2
 80006c8:	4665      	mov	r5, ip
 80006ca:	3920      	subs	r1, #32
 80006cc:	40cd      	lsrs	r5, r1
 80006ce:	2a20      	cmp	r2, #32
 80006d0:	d004      	beq.n	80006dc <__aeabi_dadd+0x1b0>
 80006d2:	2040      	movs	r0, #64	; 0x40
 80006d4:	4661      	mov	r1, ip
 80006d6:	1a82      	subs	r2, r0, r2
 80006d8:	4091      	lsls	r1, r2
 80006da:	430f      	orrs	r7, r1
 80006dc:	0039      	movs	r1, r7
 80006de:	1e4f      	subs	r7, r1, #1
 80006e0:	41b9      	sbcs	r1, r7
 80006e2:	430d      	orrs	r5, r1
 80006e4:	e11b      	b.n	800091e <__aeabi_dadd+0x3f2>
 80006e6:	0029      	movs	r1, r5
 80006e8:	4339      	orrs	r1, r7
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x1c2>
 80006ec:	e0b5      	b.n	800085a <__aeabi_dadd+0x32e>
 80006ee:	1e51      	subs	r1, r2, #1
 80006f0:	2a01      	cmp	r2, #1
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x1ca>
 80006f4:	e1ab      	b.n	8000a4e <__aeabi_dadd+0x522>
 80006f6:	486a      	ldr	r0, [pc, #424]	; (80008a0 <__aeabi_dadd+0x374>)
 80006f8:	4282      	cmp	r2, r0
 80006fa:	d100      	bne.n	80006fe <__aeabi_dadd+0x1d2>
 80006fc:	e1b2      	b.n	8000a64 <__aeabi_dadd+0x538>
 80006fe:	000a      	movs	r2, r1
 8000700:	e743      	b.n	800058a <__aeabi_dadd+0x5e>
 8000702:	4969      	ldr	r1, [pc, #420]	; (80008a8 <__aeabi_dadd+0x37c>)
 8000704:	1c75      	adds	r5, r6, #1
 8000706:	420d      	tst	r5, r1
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x1e0>
 800070a:	e0cf      	b.n	80008ac <__aeabi_dadd+0x380>
 800070c:	2e00      	cmp	r6, #0
 800070e:	d000      	beq.n	8000712 <__aeabi_dadd+0x1e6>
 8000710:	e193      	b.n	8000a3a <__aeabi_dadd+0x50e>
 8000712:	4649      	mov	r1, r9
 8000714:	4319      	orrs	r1, r3
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x1ee>
 8000718:	e1d1      	b.n	8000abe <__aeabi_dadd+0x592>
 800071a:	4661      	mov	r1, ip
 800071c:	4339      	orrs	r1, r7
 800071e:	d000      	beq.n	8000722 <__aeabi_dadd+0x1f6>
 8000720:	e1e3      	b.n	8000aea <__aeabi_dadd+0x5be>
 8000722:	4649      	mov	r1, r9
 8000724:	0758      	lsls	r0, r3, #29
 8000726:	08c9      	lsrs	r1, r1, #3
 8000728:	4301      	orrs	r1, r0
 800072a:	08db      	lsrs	r3, r3, #3
 800072c:	e026      	b.n	800077c <__aeabi_dadd+0x250>
 800072e:	0029      	movs	r1, r5
 8000730:	4339      	orrs	r1, r7
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x20a>
 8000734:	e091      	b.n	800085a <__aeabi_dadd+0x32e>
 8000736:	1e51      	subs	r1, r2, #1
 8000738:	2a01      	cmp	r2, #1
 800073a:	d005      	beq.n	8000748 <__aeabi_dadd+0x21c>
 800073c:	4858      	ldr	r0, [pc, #352]	; (80008a0 <__aeabi_dadd+0x374>)
 800073e:	4282      	cmp	r2, r0
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x218>
 8000742:	e18f      	b.n	8000a64 <__aeabi_dadd+0x538>
 8000744:	000a      	movs	r2, r1
 8000746:	e7b8      	b.n	80006ba <__aeabi_dadd+0x18e>
 8000748:	003d      	movs	r5, r7
 800074a:	444d      	add	r5, r9
 800074c:	454d      	cmp	r5, r9
 800074e:	4189      	sbcs	r1, r1
 8000750:	4463      	add	r3, ip
 8000752:	4698      	mov	r8, r3
 8000754:	4249      	negs	r1, r1
 8000756:	4488      	add	r8, r1
 8000758:	4643      	mov	r3, r8
 800075a:	2602      	movs	r6, #2
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	d500      	bpl.n	8000762 <__aeabi_dadd+0x236>
 8000760:	e0eb      	b.n	800093a <__aeabi_dadd+0x40e>
 8000762:	3e01      	subs	r6, #1
 8000764:	076b      	lsls	r3, r5, #29
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x23e>
 8000768:	e75c      	b.n	8000624 <__aeabi_dadd+0xf8>
 800076a:	4643      	mov	r3, r8
 800076c:	08e9      	lsrs	r1, r5, #3
 800076e:	075a      	lsls	r2, r3, #29
 8000770:	4311      	orrs	r1, r2
 8000772:	0032      	movs	r2, r6
 8000774:	08db      	lsrs	r3, r3, #3
 8000776:	484a      	ldr	r0, [pc, #296]	; (80008a0 <__aeabi_dadd+0x374>)
 8000778:	4282      	cmp	r2, r0
 800077a:	d021      	beq.n	80007c0 <__aeabi_dadd+0x294>
 800077c:	031b      	lsls	r3, r3, #12
 800077e:	0552      	lsls	r2, r2, #21
 8000780:	0b1b      	lsrs	r3, r3, #12
 8000782:	0d52      	lsrs	r2, r2, #21
 8000784:	e76c      	b.n	8000660 <__aeabi_dadd+0x134>
 8000786:	2300      	movs	r3, #0
 8000788:	2100      	movs	r1, #0
 800078a:	e769      	b.n	8000660 <__aeabi_dadd+0x134>
 800078c:	002a      	movs	r2, r5
 800078e:	433a      	orrs	r2, r7
 8000790:	d069      	beq.n	8000866 <__aeabi_dadd+0x33a>
 8000792:	464a      	mov	r2, r9
 8000794:	0758      	lsls	r0, r3, #29
 8000796:	08d1      	lsrs	r1, r2, #3
 8000798:	08da      	lsrs	r2, r3, #3
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	031b      	lsls	r3, r3, #12
 800079e:	4308      	orrs	r0, r1
 80007a0:	421a      	tst	r2, r3
 80007a2:	d007      	beq.n	80007b4 <__aeabi_dadd+0x288>
 80007a4:	0029      	movs	r1, r5
 80007a6:	08ed      	lsrs	r5, r5, #3
 80007a8:	421d      	tst	r5, r3
 80007aa:	d103      	bne.n	80007b4 <__aeabi_dadd+0x288>
 80007ac:	002a      	movs	r2, r5
 80007ae:	08ff      	lsrs	r7, r7, #3
 80007b0:	0748      	lsls	r0, r1, #29
 80007b2:	4338      	orrs	r0, r7
 80007b4:	0f43      	lsrs	r3, r0, #29
 80007b6:	00c1      	lsls	r1, r0, #3
 80007b8:	075b      	lsls	r3, r3, #29
 80007ba:	08c9      	lsrs	r1, r1, #3
 80007bc:	4319      	orrs	r1, r3
 80007be:	0013      	movs	r3, r2
 80007c0:	000a      	movs	r2, r1
 80007c2:	431a      	orrs	r2, r3
 80007c4:	d100      	bne.n	80007c8 <__aeabi_dadd+0x29c>
 80007c6:	e213      	b.n	8000bf0 <__aeabi_dadd+0x6c4>
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	0312      	lsls	r2, r2, #12
 80007cc:	4313      	orrs	r3, r2
 80007ce:	031b      	lsls	r3, r3, #12
 80007d0:	4a33      	ldr	r2, [pc, #204]	; (80008a0 <__aeabi_dadd+0x374>)
 80007d2:	0b1b      	lsrs	r3, r3, #12
 80007d4:	e744      	b.n	8000660 <__aeabi_dadd+0x134>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d04b      	beq.n	8000872 <__aeabi_dadd+0x346>
 80007da:	1b8a      	subs	r2, r1, r6
 80007dc:	2e00      	cmp	r6, #0
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x2b6>
 80007e0:	e0e7      	b.n	80009b2 <__aeabi_dadd+0x486>
 80007e2:	482f      	ldr	r0, [pc, #188]	; (80008a0 <__aeabi_dadd+0x374>)
 80007e4:	4281      	cmp	r1, r0
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x2be>
 80007e8:	e195      	b.n	8000b16 <__aeabi_dadd+0x5ea>
 80007ea:	2080      	movs	r0, #128	; 0x80
 80007ec:	0400      	lsls	r0, r0, #16
 80007ee:	4303      	orrs	r3, r0
 80007f0:	2a38      	cmp	r2, #56	; 0x38
 80007f2:	dd00      	ble.n	80007f6 <__aeabi_dadd+0x2ca>
 80007f4:	e143      	b.n	8000a7e <__aeabi_dadd+0x552>
 80007f6:	2a1f      	cmp	r2, #31
 80007f8:	dd00      	ble.n	80007fc <__aeabi_dadd+0x2d0>
 80007fa:	e1db      	b.n	8000bb4 <__aeabi_dadd+0x688>
 80007fc:	2020      	movs	r0, #32
 80007fe:	001d      	movs	r5, r3
 8000800:	464e      	mov	r6, r9
 8000802:	1a80      	subs	r0, r0, r2
 8000804:	4085      	lsls	r5, r0
 8000806:	40d6      	lsrs	r6, r2
 8000808:	4335      	orrs	r5, r6
 800080a:	464e      	mov	r6, r9
 800080c:	4086      	lsls	r6, r0
 800080e:	0030      	movs	r0, r6
 8000810:	40d3      	lsrs	r3, r2
 8000812:	1e46      	subs	r6, r0, #1
 8000814:	41b0      	sbcs	r0, r6
 8000816:	449c      	add	ip, r3
 8000818:	4305      	orrs	r5, r0
 800081a:	19ed      	adds	r5, r5, r7
 800081c:	42bd      	cmp	r5, r7
 800081e:	419b      	sbcs	r3, r3
 8000820:	425b      	negs	r3, r3
 8000822:	4463      	add	r3, ip
 8000824:	4698      	mov	r8, r3
 8000826:	000e      	movs	r6, r1
 8000828:	e07f      	b.n	800092a <__aeabi_dadd+0x3fe>
 800082a:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <__aeabi_dadd+0x378>)
 800082c:	1a76      	subs	r6, r6, r1
 800082e:	4013      	ands	r3, r2
 8000830:	4698      	mov	r8, r3
 8000832:	e6f5      	b.n	8000620 <__aeabi_dadd+0xf4>
 8000834:	0028      	movs	r0, r5
 8000836:	f001 fcd9 	bl	80021ec <__clzsi2>
 800083a:	0001      	movs	r1, r0
 800083c:	3118      	adds	r1, #24
 800083e:	291f      	cmp	r1, #31
 8000840:	dc00      	bgt.n	8000844 <__aeabi_dadd+0x318>
 8000842:	e6cf      	b.n	80005e4 <__aeabi_dadd+0xb8>
 8000844:	002b      	movs	r3, r5
 8000846:	3808      	subs	r0, #8
 8000848:	4083      	lsls	r3, r0
 800084a:	2500      	movs	r5, #0
 800084c:	e6d2      	b.n	80005f4 <__aeabi_dadd+0xc8>
 800084e:	4662      	mov	r2, ip
 8000850:	433a      	orrs	r2, r7
 8000852:	0011      	movs	r1, r2
 8000854:	1e4f      	subs	r7, r1, #1
 8000856:	41b9      	sbcs	r1, r7
 8000858:	e6ac      	b.n	80005b4 <__aeabi_dadd+0x88>
 800085a:	4649      	mov	r1, r9
 800085c:	0758      	lsls	r0, r3, #29
 800085e:	08c9      	lsrs	r1, r1, #3
 8000860:	4301      	orrs	r1, r0
 8000862:	08db      	lsrs	r3, r3, #3
 8000864:	e787      	b.n	8000776 <__aeabi_dadd+0x24a>
 8000866:	4649      	mov	r1, r9
 8000868:	075a      	lsls	r2, r3, #29
 800086a:	08c9      	lsrs	r1, r1, #3
 800086c:	4311      	orrs	r1, r2
 800086e:	08db      	lsrs	r3, r3, #3
 8000870:	e7a6      	b.n	80007c0 <__aeabi_dadd+0x294>
 8000872:	490d      	ldr	r1, [pc, #52]	; (80008a8 <__aeabi_dadd+0x37c>)
 8000874:	1c70      	adds	r0, r6, #1
 8000876:	4208      	tst	r0, r1
 8000878:	d000      	beq.n	800087c <__aeabi_dadd+0x350>
 800087a:	e0bb      	b.n	80009f4 <__aeabi_dadd+0x4c8>
 800087c:	2e00      	cmp	r6, #0
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x356>
 8000880:	e114      	b.n	8000aac <__aeabi_dadd+0x580>
 8000882:	4649      	mov	r1, r9
 8000884:	4319      	orrs	r1, r3
 8000886:	d100      	bne.n	800088a <__aeabi_dadd+0x35e>
 8000888:	e175      	b.n	8000b76 <__aeabi_dadd+0x64a>
 800088a:	0029      	movs	r1, r5
 800088c:	4339      	orrs	r1, r7
 800088e:	d000      	beq.n	8000892 <__aeabi_dadd+0x366>
 8000890:	e17e      	b.n	8000b90 <__aeabi_dadd+0x664>
 8000892:	4649      	mov	r1, r9
 8000894:	0758      	lsls	r0, r3, #29
 8000896:	08c9      	lsrs	r1, r1, #3
 8000898:	4301      	orrs	r1, r0
 800089a:	08db      	lsrs	r3, r3, #3
 800089c:	e76e      	b.n	800077c <__aeabi_dadd+0x250>
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	000007ff 	.word	0x000007ff
 80008a4:	ff7fffff 	.word	0xff7fffff
 80008a8:	000007fe 	.word	0x000007fe
 80008ac:	4649      	mov	r1, r9
 80008ae:	1bcd      	subs	r5, r1, r7
 80008b0:	4661      	mov	r1, ip
 80008b2:	1a58      	subs	r0, r3, r1
 80008b4:	45a9      	cmp	r9, r5
 80008b6:	4189      	sbcs	r1, r1
 80008b8:	4249      	negs	r1, r1
 80008ba:	4688      	mov	r8, r1
 80008bc:	0001      	movs	r1, r0
 80008be:	4640      	mov	r0, r8
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	4688      	mov	r8, r1
 80008c4:	0209      	lsls	r1, r1, #8
 80008c6:	d500      	bpl.n	80008ca <__aeabi_dadd+0x39e>
 80008c8:	e0a6      	b.n	8000a18 <__aeabi_dadd+0x4ec>
 80008ca:	4641      	mov	r1, r8
 80008cc:	4329      	orrs	r1, r5
 80008ce:	d000      	beq.n	80008d2 <__aeabi_dadd+0x3a6>
 80008d0:	e67f      	b.n	80005d2 <__aeabi_dadd+0xa6>
 80008d2:	2300      	movs	r3, #0
 80008d4:	2400      	movs	r4, #0
 80008d6:	e751      	b.n	800077c <__aeabi_dadd+0x250>
 80008d8:	4cc7      	ldr	r4, [pc, #796]	; (8000bf8 <__aeabi_dadd+0x6cc>)
 80008da:	42a1      	cmp	r1, r4
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dadd+0x3b4>
 80008de:	e0c7      	b.n	8000a70 <__aeabi_dadd+0x544>
 80008e0:	2480      	movs	r4, #128	; 0x80
 80008e2:	0424      	lsls	r4, r4, #16
 80008e4:	4323      	orrs	r3, r4
 80008e6:	2a38      	cmp	r2, #56	; 0x38
 80008e8:	dc54      	bgt.n	8000994 <__aeabi_dadd+0x468>
 80008ea:	2a1f      	cmp	r2, #31
 80008ec:	dd00      	ble.n	80008f0 <__aeabi_dadd+0x3c4>
 80008ee:	e0cc      	b.n	8000a8a <__aeabi_dadd+0x55e>
 80008f0:	2420      	movs	r4, #32
 80008f2:	4648      	mov	r0, r9
 80008f4:	1aa4      	subs	r4, r4, r2
 80008f6:	001d      	movs	r5, r3
 80008f8:	464e      	mov	r6, r9
 80008fa:	40a0      	lsls	r0, r4
 80008fc:	40d6      	lsrs	r6, r2
 80008fe:	40a5      	lsls	r5, r4
 8000900:	0004      	movs	r4, r0
 8000902:	40d3      	lsrs	r3, r2
 8000904:	4662      	mov	r2, ip
 8000906:	4335      	orrs	r5, r6
 8000908:	1e66      	subs	r6, r4, #1
 800090a:	41b4      	sbcs	r4, r6
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	469c      	mov	ip, r3
 8000910:	4325      	orrs	r5, r4
 8000912:	e044      	b.n	800099e <__aeabi_dadd+0x472>
 8000914:	4662      	mov	r2, ip
 8000916:	433a      	orrs	r2, r7
 8000918:	0015      	movs	r5, r2
 800091a:	1e6f      	subs	r7, r5, #1
 800091c:	41bd      	sbcs	r5, r7
 800091e:	444d      	add	r5, r9
 8000920:	454d      	cmp	r5, r9
 8000922:	4189      	sbcs	r1, r1
 8000924:	4249      	negs	r1, r1
 8000926:	4688      	mov	r8, r1
 8000928:	4498      	add	r8, r3
 800092a:	4643      	mov	r3, r8
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	d400      	bmi.n	8000932 <__aeabi_dadd+0x406>
 8000930:	e718      	b.n	8000764 <__aeabi_dadd+0x238>
 8000932:	4bb1      	ldr	r3, [pc, #708]	; (8000bf8 <__aeabi_dadd+0x6cc>)
 8000934:	3601      	adds	r6, #1
 8000936:	429e      	cmp	r6, r3
 8000938:	d049      	beq.n	80009ce <__aeabi_dadd+0x4a2>
 800093a:	4642      	mov	r2, r8
 800093c:	4baf      	ldr	r3, [pc, #700]	; (8000bfc <__aeabi_dadd+0x6d0>)
 800093e:	2101      	movs	r1, #1
 8000940:	401a      	ands	r2, r3
 8000942:	0013      	movs	r3, r2
 8000944:	086a      	lsrs	r2, r5, #1
 8000946:	400d      	ands	r5, r1
 8000948:	4315      	orrs	r5, r2
 800094a:	07d9      	lsls	r1, r3, #31
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	4698      	mov	r8, r3
 8000950:	430d      	orrs	r5, r1
 8000952:	e665      	b.n	8000620 <__aeabi_dadd+0xf4>
 8000954:	0018      	movs	r0, r3
 8000956:	3e1f      	subs	r6, #31
 8000958:	40f0      	lsrs	r0, r6
 800095a:	2a20      	cmp	r2, #32
 800095c:	d003      	beq.n	8000966 <__aeabi_dadd+0x43a>
 800095e:	2140      	movs	r1, #64	; 0x40
 8000960:	1a8a      	subs	r2, r1, r2
 8000962:	4093      	lsls	r3, r2
 8000964:	431d      	orrs	r5, r3
 8000966:	1e69      	subs	r1, r5, #1
 8000968:	418d      	sbcs	r5, r1
 800096a:	2300      	movs	r3, #0
 800096c:	2600      	movs	r6, #0
 800096e:	4698      	mov	r8, r3
 8000970:	4305      	orrs	r5, r0
 8000972:	e6f7      	b.n	8000764 <__aeabi_dadd+0x238>
 8000974:	0011      	movs	r1, r2
 8000976:	4665      	mov	r5, ip
 8000978:	3920      	subs	r1, #32
 800097a:	40cd      	lsrs	r5, r1
 800097c:	2a20      	cmp	r2, #32
 800097e:	d004      	beq.n	800098a <__aeabi_dadd+0x45e>
 8000980:	2040      	movs	r0, #64	; 0x40
 8000982:	4661      	mov	r1, ip
 8000984:	1a82      	subs	r2, r0, r2
 8000986:	4091      	lsls	r1, r2
 8000988:	430f      	orrs	r7, r1
 800098a:	0039      	movs	r1, r7
 800098c:	1e4f      	subs	r7, r1, #1
 800098e:	41b9      	sbcs	r1, r7
 8000990:	4329      	orrs	r1, r5
 8000992:	e60f      	b.n	80005b4 <__aeabi_dadd+0x88>
 8000994:	464a      	mov	r2, r9
 8000996:	4313      	orrs	r3, r2
 8000998:	001d      	movs	r5, r3
 800099a:	1e6b      	subs	r3, r5, #1
 800099c:	419d      	sbcs	r5, r3
 800099e:	1b7d      	subs	r5, r7, r5
 80009a0:	42af      	cmp	r7, r5
 80009a2:	419b      	sbcs	r3, r3
 80009a4:	4662      	mov	r2, ip
 80009a6:	425b      	negs	r3, r3
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	4698      	mov	r8, r3
 80009ac:	4654      	mov	r4, sl
 80009ae:	000e      	movs	r6, r1
 80009b0:	e607      	b.n	80005c2 <__aeabi_dadd+0x96>
 80009b2:	4648      	mov	r0, r9
 80009b4:	4318      	orrs	r0, r3
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x48e>
 80009b8:	e0b3      	b.n	8000b22 <__aeabi_dadd+0x5f6>
 80009ba:	1e50      	subs	r0, r2, #1
 80009bc:	2a01      	cmp	r2, #1
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x496>
 80009c0:	e10d      	b.n	8000bde <__aeabi_dadd+0x6b2>
 80009c2:	4d8d      	ldr	r5, [pc, #564]	; (8000bf8 <__aeabi_dadd+0x6cc>)
 80009c4:	42aa      	cmp	r2, r5
 80009c6:	d100      	bne.n	80009ca <__aeabi_dadd+0x49e>
 80009c8:	e0a5      	b.n	8000b16 <__aeabi_dadd+0x5ea>
 80009ca:	0002      	movs	r2, r0
 80009cc:	e710      	b.n	80007f0 <__aeabi_dadd+0x2c4>
 80009ce:	0032      	movs	r2, r6
 80009d0:	2300      	movs	r3, #0
 80009d2:	2100      	movs	r1, #0
 80009d4:	e644      	b.n	8000660 <__aeabi_dadd+0x134>
 80009d6:	2120      	movs	r1, #32
 80009d8:	0038      	movs	r0, r7
 80009da:	1a89      	subs	r1, r1, r2
 80009dc:	4665      	mov	r5, ip
 80009de:	408f      	lsls	r7, r1
 80009e0:	408d      	lsls	r5, r1
 80009e2:	40d0      	lsrs	r0, r2
 80009e4:	1e79      	subs	r1, r7, #1
 80009e6:	418f      	sbcs	r7, r1
 80009e8:	4305      	orrs	r5, r0
 80009ea:	433d      	orrs	r5, r7
 80009ec:	4667      	mov	r7, ip
 80009ee:	40d7      	lsrs	r7, r2
 80009f0:	19db      	adds	r3, r3, r7
 80009f2:	e794      	b.n	800091e <__aeabi_dadd+0x3f2>
 80009f4:	4a80      	ldr	r2, [pc, #512]	; (8000bf8 <__aeabi_dadd+0x6cc>)
 80009f6:	4290      	cmp	r0, r2
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x4d0>
 80009fa:	e0ec      	b.n	8000bd6 <__aeabi_dadd+0x6aa>
 80009fc:	0039      	movs	r1, r7
 80009fe:	4449      	add	r1, r9
 8000a00:	4549      	cmp	r1, r9
 8000a02:	4192      	sbcs	r2, r2
 8000a04:	4463      	add	r3, ip
 8000a06:	4252      	negs	r2, r2
 8000a08:	189b      	adds	r3, r3, r2
 8000a0a:	07dd      	lsls	r5, r3, #31
 8000a0c:	0849      	lsrs	r1, r1, #1
 8000a0e:	085b      	lsrs	r3, r3, #1
 8000a10:	4698      	mov	r8, r3
 8000a12:	0006      	movs	r6, r0
 8000a14:	430d      	orrs	r5, r1
 8000a16:	e6a5      	b.n	8000764 <__aeabi_dadd+0x238>
 8000a18:	464a      	mov	r2, r9
 8000a1a:	1abd      	subs	r5, r7, r2
 8000a1c:	42af      	cmp	r7, r5
 8000a1e:	4189      	sbcs	r1, r1
 8000a20:	4662      	mov	r2, ip
 8000a22:	4249      	negs	r1, r1
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	1a5b      	subs	r3, r3, r1
 8000a28:	4698      	mov	r8, r3
 8000a2a:	4654      	mov	r4, sl
 8000a2c:	e5d1      	b.n	80005d2 <__aeabi_dadd+0xa6>
 8000a2e:	076c      	lsls	r4, r5, #29
 8000a30:	08f9      	lsrs	r1, r7, #3
 8000a32:	4321      	orrs	r1, r4
 8000a34:	08eb      	lsrs	r3, r5, #3
 8000a36:	0004      	movs	r4, r0
 8000a38:	e69d      	b.n	8000776 <__aeabi_dadd+0x24a>
 8000a3a:	464a      	mov	r2, r9
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	d175      	bne.n	8000b2c <__aeabi_dadd+0x600>
 8000a40:	4661      	mov	r1, ip
 8000a42:	4339      	orrs	r1, r7
 8000a44:	d114      	bne.n	8000a70 <__aeabi_dadd+0x544>
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	2400      	movs	r4, #0
 8000a4a:	031b      	lsls	r3, r3, #12
 8000a4c:	e6bc      	b.n	80007c8 <__aeabi_dadd+0x29c>
 8000a4e:	464a      	mov	r2, r9
 8000a50:	1bd5      	subs	r5, r2, r7
 8000a52:	45a9      	cmp	r9, r5
 8000a54:	4189      	sbcs	r1, r1
 8000a56:	4662      	mov	r2, ip
 8000a58:	4249      	negs	r1, r1
 8000a5a:	1a9b      	subs	r3, r3, r2
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	4698      	mov	r8, r3
 8000a60:	2601      	movs	r6, #1
 8000a62:	e5ae      	b.n	80005c2 <__aeabi_dadd+0x96>
 8000a64:	464a      	mov	r2, r9
 8000a66:	08d1      	lsrs	r1, r2, #3
 8000a68:	075a      	lsls	r2, r3, #29
 8000a6a:	4311      	orrs	r1, r2
 8000a6c:	08db      	lsrs	r3, r3, #3
 8000a6e:	e6a7      	b.n	80007c0 <__aeabi_dadd+0x294>
 8000a70:	4663      	mov	r3, ip
 8000a72:	08f9      	lsrs	r1, r7, #3
 8000a74:	075a      	lsls	r2, r3, #29
 8000a76:	4654      	mov	r4, sl
 8000a78:	4311      	orrs	r1, r2
 8000a7a:	08db      	lsrs	r3, r3, #3
 8000a7c:	e6a0      	b.n	80007c0 <__aeabi_dadd+0x294>
 8000a7e:	464a      	mov	r2, r9
 8000a80:	4313      	orrs	r3, r2
 8000a82:	001d      	movs	r5, r3
 8000a84:	1e6b      	subs	r3, r5, #1
 8000a86:	419d      	sbcs	r5, r3
 8000a88:	e6c7      	b.n	800081a <__aeabi_dadd+0x2ee>
 8000a8a:	0014      	movs	r4, r2
 8000a8c:	001e      	movs	r6, r3
 8000a8e:	3c20      	subs	r4, #32
 8000a90:	40e6      	lsrs	r6, r4
 8000a92:	2a20      	cmp	r2, #32
 8000a94:	d005      	beq.n	8000aa2 <__aeabi_dadd+0x576>
 8000a96:	2440      	movs	r4, #64	; 0x40
 8000a98:	1aa2      	subs	r2, r4, r2
 8000a9a:	4093      	lsls	r3, r2
 8000a9c:	464a      	mov	r2, r9
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	4691      	mov	r9, r2
 8000aa2:	464d      	mov	r5, r9
 8000aa4:	1e6b      	subs	r3, r5, #1
 8000aa6:	419d      	sbcs	r5, r3
 8000aa8:	4335      	orrs	r5, r6
 8000aaa:	e778      	b.n	800099e <__aeabi_dadd+0x472>
 8000aac:	464a      	mov	r2, r9
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_dadd+0x588>
 8000ab2:	e66b      	b.n	800078c <__aeabi_dadd+0x260>
 8000ab4:	076b      	lsls	r3, r5, #29
 8000ab6:	08f9      	lsrs	r1, r7, #3
 8000ab8:	4319      	orrs	r1, r3
 8000aba:	08eb      	lsrs	r3, r5, #3
 8000abc:	e680      	b.n	80007c0 <__aeabi_dadd+0x294>
 8000abe:	4661      	mov	r1, ip
 8000ac0:	4339      	orrs	r1, r7
 8000ac2:	d054      	beq.n	8000b6e <__aeabi_dadd+0x642>
 8000ac4:	4663      	mov	r3, ip
 8000ac6:	08f9      	lsrs	r1, r7, #3
 8000ac8:	075c      	lsls	r4, r3, #29
 8000aca:	4321      	orrs	r1, r4
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	0004      	movs	r4, r0
 8000ad0:	e654      	b.n	800077c <__aeabi_dadd+0x250>
 8000ad2:	464a      	mov	r2, r9
 8000ad4:	1abd      	subs	r5, r7, r2
 8000ad6:	42af      	cmp	r7, r5
 8000ad8:	4189      	sbcs	r1, r1
 8000ada:	4662      	mov	r2, ip
 8000adc:	4249      	negs	r1, r1
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	4698      	mov	r8, r3
 8000ae4:	0004      	movs	r4, r0
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	e56b      	b.n	80005c2 <__aeabi_dadd+0x96>
 8000aea:	464a      	mov	r2, r9
 8000aec:	1bd5      	subs	r5, r2, r7
 8000aee:	45a9      	cmp	r9, r5
 8000af0:	4189      	sbcs	r1, r1
 8000af2:	4662      	mov	r2, ip
 8000af4:	4249      	negs	r1, r1
 8000af6:	1a9a      	subs	r2, r3, r2
 8000af8:	1a52      	subs	r2, r2, r1
 8000afa:	4690      	mov	r8, r2
 8000afc:	0212      	lsls	r2, r2, #8
 8000afe:	d532      	bpl.n	8000b66 <__aeabi_dadd+0x63a>
 8000b00:	464a      	mov	r2, r9
 8000b02:	1abd      	subs	r5, r7, r2
 8000b04:	42af      	cmp	r7, r5
 8000b06:	4189      	sbcs	r1, r1
 8000b08:	4662      	mov	r2, ip
 8000b0a:	4249      	negs	r1, r1
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	1a5b      	subs	r3, r3, r1
 8000b10:	4698      	mov	r8, r3
 8000b12:	0004      	movs	r4, r0
 8000b14:	e584      	b.n	8000620 <__aeabi_dadd+0xf4>
 8000b16:	4663      	mov	r3, ip
 8000b18:	08f9      	lsrs	r1, r7, #3
 8000b1a:	075a      	lsls	r2, r3, #29
 8000b1c:	4311      	orrs	r1, r2
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	e64e      	b.n	80007c0 <__aeabi_dadd+0x294>
 8000b22:	08f9      	lsrs	r1, r7, #3
 8000b24:	0768      	lsls	r0, r5, #29
 8000b26:	4301      	orrs	r1, r0
 8000b28:	08eb      	lsrs	r3, r5, #3
 8000b2a:	e624      	b.n	8000776 <__aeabi_dadd+0x24a>
 8000b2c:	4662      	mov	r2, ip
 8000b2e:	433a      	orrs	r2, r7
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x608>
 8000b32:	e698      	b.n	8000866 <__aeabi_dadd+0x33a>
 8000b34:	464a      	mov	r2, r9
 8000b36:	08d1      	lsrs	r1, r2, #3
 8000b38:	075a      	lsls	r2, r3, #29
 8000b3a:	4311      	orrs	r1, r2
 8000b3c:	08da      	lsrs	r2, r3, #3
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	031b      	lsls	r3, r3, #12
 8000b42:	421a      	tst	r2, r3
 8000b44:	d008      	beq.n	8000b58 <__aeabi_dadd+0x62c>
 8000b46:	4660      	mov	r0, ip
 8000b48:	08c5      	lsrs	r5, r0, #3
 8000b4a:	421d      	tst	r5, r3
 8000b4c:	d104      	bne.n	8000b58 <__aeabi_dadd+0x62c>
 8000b4e:	4654      	mov	r4, sl
 8000b50:	002a      	movs	r2, r5
 8000b52:	08f9      	lsrs	r1, r7, #3
 8000b54:	0743      	lsls	r3, r0, #29
 8000b56:	4319      	orrs	r1, r3
 8000b58:	0f4b      	lsrs	r3, r1, #29
 8000b5a:	00c9      	lsls	r1, r1, #3
 8000b5c:	075b      	lsls	r3, r3, #29
 8000b5e:	08c9      	lsrs	r1, r1, #3
 8000b60:	4319      	orrs	r1, r3
 8000b62:	0013      	movs	r3, r2
 8000b64:	e62c      	b.n	80007c0 <__aeabi_dadd+0x294>
 8000b66:	4641      	mov	r1, r8
 8000b68:	4329      	orrs	r1, r5
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_dadd+0x642>
 8000b6c:	e5fa      	b.n	8000764 <__aeabi_dadd+0x238>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	000a      	movs	r2, r1
 8000b72:	2400      	movs	r4, #0
 8000b74:	e602      	b.n	800077c <__aeabi_dadd+0x250>
 8000b76:	076b      	lsls	r3, r5, #29
 8000b78:	08f9      	lsrs	r1, r7, #3
 8000b7a:	4319      	orrs	r1, r3
 8000b7c:	08eb      	lsrs	r3, r5, #3
 8000b7e:	e5fd      	b.n	800077c <__aeabi_dadd+0x250>
 8000b80:	4663      	mov	r3, ip
 8000b82:	08f9      	lsrs	r1, r7, #3
 8000b84:	075b      	lsls	r3, r3, #29
 8000b86:	4319      	orrs	r1, r3
 8000b88:	4663      	mov	r3, ip
 8000b8a:	0004      	movs	r4, r0
 8000b8c:	08db      	lsrs	r3, r3, #3
 8000b8e:	e617      	b.n	80007c0 <__aeabi_dadd+0x294>
 8000b90:	003d      	movs	r5, r7
 8000b92:	444d      	add	r5, r9
 8000b94:	4463      	add	r3, ip
 8000b96:	454d      	cmp	r5, r9
 8000b98:	4189      	sbcs	r1, r1
 8000b9a:	4698      	mov	r8, r3
 8000b9c:	4249      	negs	r1, r1
 8000b9e:	4488      	add	r8, r1
 8000ba0:	4643      	mov	r3, r8
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	d400      	bmi.n	8000ba8 <__aeabi_dadd+0x67c>
 8000ba6:	e5dd      	b.n	8000764 <__aeabi_dadd+0x238>
 8000ba8:	4642      	mov	r2, r8
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <__aeabi_dadd+0x6d0>)
 8000bac:	2601      	movs	r6, #1
 8000bae:	401a      	ands	r2, r3
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	e5d7      	b.n	8000764 <__aeabi_dadd+0x238>
 8000bb4:	0010      	movs	r0, r2
 8000bb6:	001e      	movs	r6, r3
 8000bb8:	3820      	subs	r0, #32
 8000bba:	40c6      	lsrs	r6, r0
 8000bbc:	2a20      	cmp	r2, #32
 8000bbe:	d005      	beq.n	8000bcc <__aeabi_dadd+0x6a0>
 8000bc0:	2040      	movs	r0, #64	; 0x40
 8000bc2:	1a82      	subs	r2, r0, r2
 8000bc4:	4093      	lsls	r3, r2
 8000bc6:	464a      	mov	r2, r9
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	4691      	mov	r9, r2
 8000bcc:	464d      	mov	r5, r9
 8000bce:	1e6b      	subs	r3, r5, #1
 8000bd0:	419d      	sbcs	r5, r3
 8000bd2:	4335      	orrs	r5, r6
 8000bd4:	e621      	b.n	800081a <__aeabi_dadd+0x2ee>
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	2300      	movs	r3, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	e540      	b.n	8000660 <__aeabi_dadd+0x134>
 8000bde:	464a      	mov	r2, r9
 8000be0:	19d5      	adds	r5, r2, r7
 8000be2:	42bd      	cmp	r5, r7
 8000be4:	4189      	sbcs	r1, r1
 8000be6:	4463      	add	r3, ip
 8000be8:	4698      	mov	r8, r3
 8000bea:	4249      	negs	r1, r1
 8000bec:	4488      	add	r8, r1
 8000bee:	e5b3      	b.n	8000758 <__aeabi_dadd+0x22c>
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4a01      	ldr	r2, [pc, #4]	; (8000bf8 <__aeabi_dadd+0x6cc>)
 8000bf4:	000b      	movs	r3, r1
 8000bf6:	e533      	b.n	8000660 <__aeabi_dadd+0x134>
 8000bf8:	000007ff 	.word	0x000007ff
 8000bfc:	ff7fffff 	.word	0xff7fffff

08000c00 <__aeabi_ddiv>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	464e      	mov	r6, r9
 8000c06:	4645      	mov	r5, r8
 8000c08:	46de      	mov	lr, fp
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	4681      	mov	r9, r0
 8000c0e:	0005      	movs	r5, r0
 8000c10:	030c      	lsls	r4, r1, #12
 8000c12:	0048      	lsls	r0, r1, #1
 8000c14:	4692      	mov	sl, r2
 8000c16:	001f      	movs	r7, r3
 8000c18:	b085      	sub	sp, #20
 8000c1a:	0b24      	lsrs	r4, r4, #12
 8000c1c:	0d40      	lsrs	r0, r0, #21
 8000c1e:	0fce      	lsrs	r6, r1, #31
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d059      	beq.n	8000cd8 <__aeabi_ddiv+0xd8>
 8000c24:	4b87      	ldr	r3, [pc, #540]	; (8000e44 <__aeabi_ddiv+0x244>)
 8000c26:	4298      	cmp	r0, r3
 8000c28:	d100      	bne.n	8000c2c <__aeabi_ddiv+0x2c>
 8000c2a:	e098      	b.n	8000d5e <__aeabi_ddiv+0x15e>
 8000c2c:	0f6b      	lsrs	r3, r5, #29
 8000c2e:	00e4      	lsls	r4, r4, #3
 8000c30:	431c      	orrs	r4, r3
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	041b      	lsls	r3, r3, #16
 8000c36:	4323      	orrs	r3, r4
 8000c38:	4698      	mov	r8, r3
 8000c3a:	4b83      	ldr	r3, [pc, #524]	; (8000e48 <__aeabi_ddiv+0x248>)
 8000c3c:	00ed      	lsls	r5, r5, #3
 8000c3e:	469b      	mov	fp, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	4699      	mov	r9, r3
 8000c44:	4483      	add	fp, r0
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	033c      	lsls	r4, r7, #12
 8000c4a:	007b      	lsls	r3, r7, #1
 8000c4c:	4650      	mov	r0, sl
 8000c4e:	0b24      	lsrs	r4, r4, #12
 8000c50:	0d5b      	lsrs	r3, r3, #21
 8000c52:	0fff      	lsrs	r7, r7, #31
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d067      	beq.n	8000d28 <__aeabi_ddiv+0x128>
 8000c58:	4a7a      	ldr	r2, [pc, #488]	; (8000e44 <__aeabi_ddiv+0x244>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d018      	beq.n	8000c90 <__aeabi_ddiv+0x90>
 8000c5e:	497a      	ldr	r1, [pc, #488]	; (8000e48 <__aeabi_ddiv+0x248>)
 8000c60:	0f42      	lsrs	r2, r0, #29
 8000c62:	468c      	mov	ip, r1
 8000c64:	00e4      	lsls	r4, r4, #3
 8000c66:	4659      	mov	r1, fp
 8000c68:	4314      	orrs	r4, r2
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	4463      	add	r3, ip
 8000c6e:	0412      	lsls	r2, r2, #16
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	4314      	orrs	r4, r2
 8000c74:	469b      	mov	fp, r3
 8000c76:	00c2      	lsls	r2, r0, #3
 8000c78:	2000      	movs	r0, #0
 8000c7a:	0033      	movs	r3, r6
 8000c7c:	407b      	eors	r3, r7
 8000c7e:	469a      	mov	sl, r3
 8000c80:	464b      	mov	r3, r9
 8000c82:	2b0f      	cmp	r3, #15
 8000c84:	d900      	bls.n	8000c88 <__aeabi_ddiv+0x88>
 8000c86:	e0ef      	b.n	8000e68 <__aeabi_ddiv+0x268>
 8000c88:	4970      	ldr	r1, [pc, #448]	; (8000e4c <__aeabi_ddiv+0x24c>)
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	58cb      	ldr	r3, [r1, r3]
 8000c8e:	469f      	mov	pc, r3
 8000c90:	4b6f      	ldr	r3, [pc, #444]	; (8000e50 <__aeabi_ddiv+0x250>)
 8000c92:	4652      	mov	r2, sl
 8000c94:	469c      	mov	ip, r3
 8000c96:	4322      	orrs	r2, r4
 8000c98:	44e3      	add	fp, ip
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_ddiv+0xa0>
 8000c9e:	e095      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8000ca0:	4649      	mov	r1, r9
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	4319      	orrs	r1, r3
 8000ca6:	4689      	mov	r9, r1
 8000ca8:	2400      	movs	r4, #0
 8000caa:	2002      	movs	r0, #2
 8000cac:	e7e5      	b.n	8000c7a <__aeabi_ddiv+0x7a>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2400      	movs	r4, #0
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	4652      	mov	r2, sl
 8000cb6:	051b      	lsls	r3, r3, #20
 8000cb8:	4323      	orrs	r3, r4
 8000cba:	07d2      	lsls	r2, r2, #31
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	0028      	movs	r0, r5
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	b005      	add	sp, #20
 8000cc4:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc6:	46bb      	mov	fp, r7
 8000cc8:	46b2      	mov	sl, r6
 8000cca:	46a9      	mov	r9, r5
 8000ccc:	46a0      	mov	r8, r4
 8000cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	2500      	movs	r5, #0
 8000cd4:	4b5b      	ldr	r3, [pc, #364]	; (8000e44 <__aeabi_ddiv+0x244>)
 8000cd6:	e7ed      	b.n	8000cb4 <__aeabi_ddiv+0xb4>
 8000cd8:	464b      	mov	r3, r9
 8000cda:	4323      	orrs	r3, r4
 8000cdc:	4698      	mov	r8, r3
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_ddiv+0xe2>
 8000ce0:	e089      	b.n	8000df6 <__aeabi_ddiv+0x1f6>
 8000ce2:	2c00      	cmp	r4, #0
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_ddiv+0xe8>
 8000ce6:	e1e0      	b.n	80010aa <__aeabi_ddiv+0x4aa>
 8000ce8:	0020      	movs	r0, r4
 8000cea:	f001 fa7f 	bl	80021ec <__clzsi2>
 8000cee:	0001      	movs	r1, r0
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	390b      	subs	r1, #11
 8000cf4:	231d      	movs	r3, #29
 8000cf6:	1a5b      	subs	r3, r3, r1
 8000cf8:	4649      	mov	r1, r9
 8000cfa:	0010      	movs	r0, r2
 8000cfc:	40d9      	lsrs	r1, r3
 8000cfe:	3808      	subs	r0, #8
 8000d00:	4084      	lsls	r4, r0
 8000d02:	000b      	movs	r3, r1
 8000d04:	464d      	mov	r5, r9
 8000d06:	4323      	orrs	r3, r4
 8000d08:	4698      	mov	r8, r3
 8000d0a:	4085      	lsls	r5, r0
 8000d0c:	4851      	ldr	r0, [pc, #324]	; (8000e54 <__aeabi_ddiv+0x254>)
 8000d0e:	033c      	lsls	r4, r7, #12
 8000d10:	1a83      	subs	r3, r0, r2
 8000d12:	469b      	mov	fp, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	4699      	mov	r9, r3
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	007b      	lsls	r3, r7, #1
 8000d1c:	4650      	mov	r0, sl
 8000d1e:	0b24      	lsrs	r4, r4, #12
 8000d20:	0d5b      	lsrs	r3, r3, #21
 8000d22:	0fff      	lsrs	r7, r7, #31
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d197      	bne.n	8000c58 <__aeabi_ddiv+0x58>
 8000d28:	4652      	mov	r2, sl
 8000d2a:	4322      	orrs	r2, r4
 8000d2c:	d055      	beq.n	8000dda <__aeabi_ddiv+0x1da>
 8000d2e:	2c00      	cmp	r4, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_ddiv+0x134>
 8000d32:	e1ca      	b.n	80010ca <__aeabi_ddiv+0x4ca>
 8000d34:	0020      	movs	r0, r4
 8000d36:	f001 fa59 	bl	80021ec <__clzsi2>
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	3a0b      	subs	r2, #11
 8000d3e:	231d      	movs	r3, #29
 8000d40:	0001      	movs	r1, r0
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	4652      	mov	r2, sl
 8000d46:	3908      	subs	r1, #8
 8000d48:	40da      	lsrs	r2, r3
 8000d4a:	408c      	lsls	r4, r1
 8000d4c:	4314      	orrs	r4, r2
 8000d4e:	4652      	mov	r2, sl
 8000d50:	408a      	lsls	r2, r1
 8000d52:	4b41      	ldr	r3, [pc, #260]	; (8000e58 <__aeabi_ddiv+0x258>)
 8000d54:	4458      	add	r0, fp
 8000d56:	469b      	mov	fp, r3
 8000d58:	4483      	add	fp, r0
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	e78d      	b.n	8000c7a <__aeabi_ddiv+0x7a>
 8000d5e:	464b      	mov	r3, r9
 8000d60:	4323      	orrs	r3, r4
 8000d62:	4698      	mov	r8, r3
 8000d64:	d140      	bne.n	8000de8 <__aeabi_ddiv+0x1e8>
 8000d66:	2308      	movs	r3, #8
 8000d68:	4699      	mov	r9, r3
 8000d6a:	3b06      	subs	r3, #6
 8000d6c:	2500      	movs	r5, #0
 8000d6e:	4683      	mov	fp, r0
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	e769      	b.n	8000c48 <__aeabi_ddiv+0x48>
 8000d74:	46b2      	mov	sl, r6
 8000d76:	9b00      	ldr	r3, [sp, #0]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d0a9      	beq.n	8000cd0 <__aeabi_ddiv+0xd0>
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x182>
 8000d80:	e211      	b.n	80011a6 <__aeabi_ddiv+0x5a6>
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d093      	beq.n	8000cae <__aeabi_ddiv+0xae>
 8000d86:	4a35      	ldr	r2, [pc, #212]	; (8000e5c <__aeabi_ddiv+0x25c>)
 8000d88:	445a      	add	r2, fp
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	dc00      	bgt.n	8000d90 <__aeabi_ddiv+0x190>
 8000d8e:	e13c      	b.n	800100a <__aeabi_ddiv+0x40a>
 8000d90:	076b      	lsls	r3, r5, #29
 8000d92:	d000      	beq.n	8000d96 <__aeabi_ddiv+0x196>
 8000d94:	e1a7      	b.n	80010e6 <__aeabi_ddiv+0x4e6>
 8000d96:	08ed      	lsrs	r5, r5, #3
 8000d98:	4643      	mov	r3, r8
 8000d9a:	01db      	lsls	r3, r3, #7
 8000d9c:	d506      	bpl.n	8000dac <__aeabi_ddiv+0x1ac>
 8000d9e:	4642      	mov	r2, r8
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <__aeabi_ddiv+0x260>)
 8000da2:	401a      	ands	r2, r3
 8000da4:	4690      	mov	r8, r2
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	00d2      	lsls	r2, r2, #3
 8000daa:	445a      	add	r2, fp
 8000dac:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <__aeabi_ddiv+0x264>)
 8000dae:	429a      	cmp	r2, r3
 8000db0:	dc8e      	bgt.n	8000cd0 <__aeabi_ddiv+0xd0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	0552      	lsls	r2, r2, #21
 8000db6:	0758      	lsls	r0, r3, #29
 8000db8:	025c      	lsls	r4, r3, #9
 8000dba:	4305      	orrs	r5, r0
 8000dbc:	0b24      	lsrs	r4, r4, #12
 8000dbe:	0d53      	lsrs	r3, r2, #21
 8000dc0:	e778      	b.n	8000cb4 <__aeabi_ddiv+0xb4>
 8000dc2:	46ba      	mov	sl, r7
 8000dc4:	46a0      	mov	r8, r4
 8000dc6:	0015      	movs	r5, r2
 8000dc8:	9000      	str	r0, [sp, #0]
 8000dca:	e7d4      	b.n	8000d76 <__aeabi_ddiv+0x176>
 8000dcc:	464a      	mov	r2, r9
 8000dce:	2303      	movs	r3, #3
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	4691      	mov	r9, r2
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	4652      	mov	r2, sl
 8000dd8:	e74f      	b.n	8000c7a <__aeabi_ddiv+0x7a>
 8000dda:	4649      	mov	r1, r9
 8000ddc:	2301      	movs	r3, #1
 8000dde:	4319      	orrs	r1, r3
 8000de0:	4689      	mov	r9, r1
 8000de2:	2400      	movs	r4, #0
 8000de4:	2001      	movs	r0, #1
 8000de6:	e748      	b.n	8000c7a <__aeabi_ddiv+0x7a>
 8000de8:	230c      	movs	r3, #12
 8000dea:	4699      	mov	r9, r3
 8000dec:	3b09      	subs	r3, #9
 8000dee:	46a0      	mov	r8, r4
 8000df0:	4683      	mov	fp, r0
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	e728      	b.n	8000c48 <__aeabi_ddiv+0x48>
 8000df6:	2304      	movs	r3, #4
 8000df8:	4699      	mov	r9, r3
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	469b      	mov	fp, r3
 8000dfe:	3301      	adds	r3, #1
 8000e00:	2500      	movs	r5, #0
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	e720      	b.n	8000c48 <__aeabi_ddiv+0x48>
 8000e06:	2300      	movs	r3, #0
 8000e08:	2480      	movs	r4, #128	; 0x80
 8000e0a:	469a      	mov	sl, r3
 8000e0c:	2500      	movs	r5, #0
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <__aeabi_ddiv+0x244>)
 8000e10:	0324      	lsls	r4, r4, #12
 8000e12:	e74f      	b.n	8000cb4 <__aeabi_ddiv+0xb4>
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	4641      	mov	r1, r8
 8000e18:	031b      	lsls	r3, r3, #12
 8000e1a:	4219      	tst	r1, r3
 8000e1c:	d008      	beq.n	8000e30 <__aeabi_ddiv+0x230>
 8000e1e:	421c      	tst	r4, r3
 8000e20:	d106      	bne.n	8000e30 <__aeabi_ddiv+0x230>
 8000e22:	431c      	orrs	r4, r3
 8000e24:	0324      	lsls	r4, r4, #12
 8000e26:	46ba      	mov	sl, r7
 8000e28:	0015      	movs	r5, r2
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <__aeabi_ddiv+0x244>)
 8000e2c:	0b24      	lsrs	r4, r4, #12
 8000e2e:	e741      	b.n	8000cb4 <__aeabi_ddiv+0xb4>
 8000e30:	2480      	movs	r4, #128	; 0x80
 8000e32:	4643      	mov	r3, r8
 8000e34:	0324      	lsls	r4, r4, #12
 8000e36:	431c      	orrs	r4, r3
 8000e38:	0324      	lsls	r4, r4, #12
 8000e3a:	46b2      	mov	sl, r6
 8000e3c:	4b01      	ldr	r3, [pc, #4]	; (8000e44 <__aeabi_ddiv+0x244>)
 8000e3e:	0b24      	lsrs	r4, r4, #12
 8000e40:	e738      	b.n	8000cb4 <__aeabi_ddiv+0xb4>
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	000007ff 	.word	0x000007ff
 8000e48:	fffffc01 	.word	0xfffffc01
 8000e4c:	0800bb20 	.word	0x0800bb20
 8000e50:	fffff801 	.word	0xfffff801
 8000e54:	fffffc0d 	.word	0xfffffc0d
 8000e58:	000003f3 	.word	0x000003f3
 8000e5c:	000003ff 	.word	0x000003ff
 8000e60:	feffffff 	.word	0xfeffffff
 8000e64:	000007fe 	.word	0x000007fe
 8000e68:	4544      	cmp	r4, r8
 8000e6a:	d200      	bcs.n	8000e6e <__aeabi_ddiv+0x26e>
 8000e6c:	e116      	b.n	800109c <__aeabi_ddiv+0x49c>
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0x272>
 8000e70:	e111      	b.n	8001096 <__aeabi_ddiv+0x496>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	002e      	movs	r6, r5
 8000e7a:	4640      	mov	r0, r8
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	44e3      	add	fp, ip
 8000e80:	0223      	lsls	r3, r4, #8
 8000e82:	0e14      	lsrs	r4, r2, #24
 8000e84:	431c      	orrs	r4, r3
 8000e86:	0c1b      	lsrs	r3, r3, #16
 8000e88:	4699      	mov	r9, r3
 8000e8a:	0423      	lsls	r3, r4, #16
 8000e8c:	0c1f      	lsrs	r7, r3, #16
 8000e8e:	0212      	lsls	r2, r2, #8
 8000e90:	4649      	mov	r1, r9
 8000e92:	9200      	str	r2, [sp, #0]
 8000e94:	9701      	str	r7, [sp, #4]
 8000e96:	f7ff f9df 	bl	8000258 <__aeabi_uidivmod>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	437a      	muls	r2, r7
 8000e9e:	040b      	lsls	r3, r1, #16
 8000ea0:	0c31      	lsrs	r1, r6, #16
 8000ea2:	4680      	mov	r8, r0
 8000ea4:	4319      	orrs	r1, r3
 8000ea6:	428a      	cmp	r2, r1
 8000ea8:	d90b      	bls.n	8000ec2 <__aeabi_ddiv+0x2c2>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	425b      	negs	r3, r3
 8000eae:	469c      	mov	ip, r3
 8000eb0:	1909      	adds	r1, r1, r4
 8000eb2:	44e0      	add	r8, ip
 8000eb4:	428c      	cmp	r4, r1
 8000eb6:	d804      	bhi.n	8000ec2 <__aeabi_ddiv+0x2c2>
 8000eb8:	428a      	cmp	r2, r1
 8000eba:	d902      	bls.n	8000ec2 <__aeabi_ddiv+0x2c2>
 8000ebc:	1e83      	subs	r3, r0, #2
 8000ebe:	4698      	mov	r8, r3
 8000ec0:	1909      	adds	r1, r1, r4
 8000ec2:	1a88      	subs	r0, r1, r2
 8000ec4:	4649      	mov	r1, r9
 8000ec6:	f7ff f9c7 	bl	8000258 <__aeabi_uidivmod>
 8000eca:	0409      	lsls	r1, r1, #16
 8000ecc:	468c      	mov	ip, r1
 8000ece:	0431      	lsls	r1, r6, #16
 8000ed0:	4666      	mov	r6, ip
 8000ed2:	9a01      	ldr	r2, [sp, #4]
 8000ed4:	0c09      	lsrs	r1, r1, #16
 8000ed6:	4342      	muls	r2, r0
 8000ed8:	0003      	movs	r3, r0
 8000eda:	4331      	orrs	r1, r6
 8000edc:	428a      	cmp	r2, r1
 8000ede:	d904      	bls.n	8000eea <__aeabi_ddiv+0x2ea>
 8000ee0:	1909      	adds	r1, r1, r4
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	428c      	cmp	r4, r1
 8000ee6:	d800      	bhi.n	8000eea <__aeabi_ddiv+0x2ea>
 8000ee8:	e111      	b.n	800110e <__aeabi_ddiv+0x50e>
 8000eea:	1a89      	subs	r1, r1, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	9e00      	ldr	r6, [sp, #0]
 8000ef0:	0412      	lsls	r2, r2, #16
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	0c33      	lsrs	r3, r6, #16
 8000ef6:	001f      	movs	r7, r3
 8000ef8:	0c10      	lsrs	r0, r2, #16
 8000efa:	4690      	mov	r8, r2
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	0413      	lsls	r3, r2, #16
 8000f00:	0432      	lsls	r2, r6, #16
 8000f02:	0c16      	lsrs	r6, r2, #16
 8000f04:	0032      	movs	r2, r6
 8000f06:	0c1b      	lsrs	r3, r3, #16
 8000f08:	435a      	muls	r2, r3
 8000f0a:	9603      	str	r6, [sp, #12]
 8000f0c:	437b      	muls	r3, r7
 8000f0e:	4346      	muls	r6, r0
 8000f10:	4378      	muls	r0, r7
 8000f12:	0c17      	lsrs	r7, r2, #16
 8000f14:	46bc      	mov	ip, r7
 8000f16:	199b      	adds	r3, r3, r6
 8000f18:	4463      	add	r3, ip
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	d903      	bls.n	8000f26 <__aeabi_ddiv+0x326>
 8000f1e:	2680      	movs	r6, #128	; 0x80
 8000f20:	0276      	lsls	r6, r6, #9
 8000f22:	46b4      	mov	ip, r6
 8000f24:	4460      	add	r0, ip
 8000f26:	0c1e      	lsrs	r6, r3, #16
 8000f28:	1830      	adds	r0, r6, r0
 8000f2a:	0416      	lsls	r6, r2, #16
 8000f2c:	041b      	lsls	r3, r3, #16
 8000f2e:	0c36      	lsrs	r6, r6, #16
 8000f30:	199e      	adds	r6, r3, r6
 8000f32:	4281      	cmp	r1, r0
 8000f34:	d200      	bcs.n	8000f38 <__aeabi_ddiv+0x338>
 8000f36:	e09c      	b.n	8001072 <__aeabi_ddiv+0x472>
 8000f38:	d100      	bne.n	8000f3c <__aeabi_ddiv+0x33c>
 8000f3a:	e097      	b.n	800106c <__aeabi_ddiv+0x46c>
 8000f3c:	1bae      	subs	r6, r5, r6
 8000f3e:	1a09      	subs	r1, r1, r0
 8000f40:	42b5      	cmp	r5, r6
 8000f42:	4180      	sbcs	r0, r0
 8000f44:	4240      	negs	r0, r0
 8000f46:	1a08      	subs	r0, r1, r0
 8000f48:	4284      	cmp	r4, r0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_ddiv+0x34e>
 8000f4c:	e111      	b.n	8001172 <__aeabi_ddiv+0x572>
 8000f4e:	4649      	mov	r1, r9
 8000f50:	f7ff f982 	bl	8000258 <__aeabi_uidivmod>
 8000f54:	9a01      	ldr	r2, [sp, #4]
 8000f56:	040b      	lsls	r3, r1, #16
 8000f58:	4342      	muls	r2, r0
 8000f5a:	0c31      	lsrs	r1, r6, #16
 8000f5c:	0005      	movs	r5, r0
 8000f5e:	4319      	orrs	r1, r3
 8000f60:	428a      	cmp	r2, r1
 8000f62:	d907      	bls.n	8000f74 <__aeabi_ddiv+0x374>
 8000f64:	1909      	adds	r1, r1, r4
 8000f66:	3d01      	subs	r5, #1
 8000f68:	428c      	cmp	r4, r1
 8000f6a:	d803      	bhi.n	8000f74 <__aeabi_ddiv+0x374>
 8000f6c:	428a      	cmp	r2, r1
 8000f6e:	d901      	bls.n	8000f74 <__aeabi_ddiv+0x374>
 8000f70:	1e85      	subs	r5, r0, #2
 8000f72:	1909      	adds	r1, r1, r4
 8000f74:	1a88      	subs	r0, r1, r2
 8000f76:	4649      	mov	r1, r9
 8000f78:	f7ff f96e 	bl	8000258 <__aeabi_uidivmod>
 8000f7c:	0409      	lsls	r1, r1, #16
 8000f7e:	468c      	mov	ip, r1
 8000f80:	0431      	lsls	r1, r6, #16
 8000f82:	4666      	mov	r6, ip
 8000f84:	9a01      	ldr	r2, [sp, #4]
 8000f86:	0c09      	lsrs	r1, r1, #16
 8000f88:	4342      	muls	r2, r0
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	4331      	orrs	r1, r6
 8000f8e:	428a      	cmp	r2, r1
 8000f90:	d907      	bls.n	8000fa2 <__aeabi_ddiv+0x3a2>
 8000f92:	1909      	adds	r1, r1, r4
 8000f94:	3b01      	subs	r3, #1
 8000f96:	428c      	cmp	r4, r1
 8000f98:	d803      	bhi.n	8000fa2 <__aeabi_ddiv+0x3a2>
 8000f9a:	428a      	cmp	r2, r1
 8000f9c:	d901      	bls.n	8000fa2 <__aeabi_ddiv+0x3a2>
 8000f9e:	1e83      	subs	r3, r0, #2
 8000fa0:	1909      	adds	r1, r1, r4
 8000fa2:	9e03      	ldr	r6, [sp, #12]
 8000fa4:	1a89      	subs	r1, r1, r2
 8000fa6:	0032      	movs	r2, r6
 8000fa8:	042d      	lsls	r5, r5, #16
 8000faa:	431d      	orrs	r5, r3
 8000fac:	9f02      	ldr	r7, [sp, #8]
 8000fae:	042b      	lsls	r3, r5, #16
 8000fb0:	0c1b      	lsrs	r3, r3, #16
 8000fb2:	435a      	muls	r2, r3
 8000fb4:	437b      	muls	r3, r7
 8000fb6:	469c      	mov	ip, r3
 8000fb8:	0c28      	lsrs	r0, r5, #16
 8000fba:	4346      	muls	r6, r0
 8000fbc:	0c13      	lsrs	r3, r2, #16
 8000fbe:	44b4      	add	ip, r6
 8000fc0:	4463      	add	r3, ip
 8000fc2:	4378      	muls	r0, r7
 8000fc4:	429e      	cmp	r6, r3
 8000fc6:	d903      	bls.n	8000fd0 <__aeabi_ddiv+0x3d0>
 8000fc8:	2680      	movs	r6, #128	; 0x80
 8000fca:	0276      	lsls	r6, r6, #9
 8000fcc:	46b4      	mov	ip, r6
 8000fce:	4460      	add	r0, ip
 8000fd0:	0c1e      	lsrs	r6, r3, #16
 8000fd2:	0412      	lsls	r2, r2, #16
 8000fd4:	041b      	lsls	r3, r3, #16
 8000fd6:	0c12      	lsrs	r2, r2, #16
 8000fd8:	1830      	adds	r0, r6, r0
 8000fda:	189b      	adds	r3, r3, r2
 8000fdc:	4281      	cmp	r1, r0
 8000fde:	d306      	bcc.n	8000fee <__aeabi_ddiv+0x3ee>
 8000fe0:	d002      	beq.n	8000fe8 <__aeabi_ddiv+0x3e8>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	431d      	orrs	r5, r3
 8000fe6:	e6ce      	b.n	8000d86 <__aeabi_ddiv+0x186>
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d100      	bne.n	8000fee <__aeabi_ddiv+0x3ee>
 8000fec:	e6cb      	b.n	8000d86 <__aeabi_ddiv+0x186>
 8000fee:	1861      	adds	r1, r4, r1
 8000ff0:	1e6e      	subs	r6, r5, #1
 8000ff2:	42a1      	cmp	r1, r4
 8000ff4:	d200      	bcs.n	8000ff8 <__aeabi_ddiv+0x3f8>
 8000ff6:	e0a4      	b.n	8001142 <__aeabi_ddiv+0x542>
 8000ff8:	4281      	cmp	r1, r0
 8000ffa:	d200      	bcs.n	8000ffe <__aeabi_ddiv+0x3fe>
 8000ffc:	e0c9      	b.n	8001192 <__aeabi_ddiv+0x592>
 8000ffe:	d100      	bne.n	8001002 <__aeabi_ddiv+0x402>
 8001000:	e0d9      	b.n	80011b6 <__aeabi_ddiv+0x5b6>
 8001002:	0035      	movs	r5, r6
 8001004:	e7ed      	b.n	8000fe2 <__aeabi_ddiv+0x3e2>
 8001006:	2501      	movs	r5, #1
 8001008:	426d      	negs	r5, r5
 800100a:	2101      	movs	r1, #1
 800100c:	1a89      	subs	r1, r1, r2
 800100e:	2938      	cmp	r1, #56	; 0x38
 8001010:	dd00      	ble.n	8001014 <__aeabi_ddiv+0x414>
 8001012:	e64c      	b.n	8000cae <__aeabi_ddiv+0xae>
 8001014:	291f      	cmp	r1, #31
 8001016:	dc00      	bgt.n	800101a <__aeabi_ddiv+0x41a>
 8001018:	e07f      	b.n	800111a <__aeabi_ddiv+0x51a>
 800101a:	231f      	movs	r3, #31
 800101c:	425b      	negs	r3, r3
 800101e:	1a9a      	subs	r2, r3, r2
 8001020:	4643      	mov	r3, r8
 8001022:	40d3      	lsrs	r3, r2
 8001024:	2920      	cmp	r1, #32
 8001026:	d004      	beq.n	8001032 <__aeabi_ddiv+0x432>
 8001028:	4644      	mov	r4, r8
 800102a:	4a65      	ldr	r2, [pc, #404]	; (80011c0 <__aeabi_ddiv+0x5c0>)
 800102c:	445a      	add	r2, fp
 800102e:	4094      	lsls	r4, r2
 8001030:	4325      	orrs	r5, r4
 8001032:	1e6a      	subs	r2, r5, #1
 8001034:	4195      	sbcs	r5, r2
 8001036:	2207      	movs	r2, #7
 8001038:	432b      	orrs	r3, r5
 800103a:	0015      	movs	r5, r2
 800103c:	2400      	movs	r4, #0
 800103e:	401d      	ands	r5, r3
 8001040:	421a      	tst	r2, r3
 8001042:	d100      	bne.n	8001046 <__aeabi_ddiv+0x446>
 8001044:	e0a1      	b.n	800118a <__aeabi_ddiv+0x58a>
 8001046:	220f      	movs	r2, #15
 8001048:	2400      	movs	r4, #0
 800104a:	401a      	ands	r2, r3
 800104c:	2a04      	cmp	r2, #4
 800104e:	d100      	bne.n	8001052 <__aeabi_ddiv+0x452>
 8001050:	e098      	b.n	8001184 <__aeabi_ddiv+0x584>
 8001052:	1d1a      	adds	r2, r3, #4
 8001054:	429a      	cmp	r2, r3
 8001056:	419b      	sbcs	r3, r3
 8001058:	425b      	negs	r3, r3
 800105a:	18e4      	adds	r4, r4, r3
 800105c:	0013      	movs	r3, r2
 800105e:	0222      	lsls	r2, r4, #8
 8001060:	d400      	bmi.n	8001064 <__aeabi_ddiv+0x464>
 8001062:	e08f      	b.n	8001184 <__aeabi_ddiv+0x584>
 8001064:	2301      	movs	r3, #1
 8001066:	2400      	movs	r4, #0
 8001068:	2500      	movs	r5, #0
 800106a:	e623      	b.n	8000cb4 <__aeabi_ddiv+0xb4>
 800106c:	42b5      	cmp	r5, r6
 800106e:	d300      	bcc.n	8001072 <__aeabi_ddiv+0x472>
 8001070:	e764      	b.n	8000f3c <__aeabi_ddiv+0x33c>
 8001072:	4643      	mov	r3, r8
 8001074:	1e5a      	subs	r2, r3, #1
 8001076:	9b00      	ldr	r3, [sp, #0]
 8001078:	469c      	mov	ip, r3
 800107a:	4465      	add	r5, ip
 800107c:	001f      	movs	r7, r3
 800107e:	429d      	cmp	r5, r3
 8001080:	419b      	sbcs	r3, r3
 8001082:	425b      	negs	r3, r3
 8001084:	191b      	adds	r3, r3, r4
 8001086:	18c9      	adds	r1, r1, r3
 8001088:	428c      	cmp	r4, r1
 800108a:	d23a      	bcs.n	8001102 <__aeabi_ddiv+0x502>
 800108c:	4288      	cmp	r0, r1
 800108e:	d863      	bhi.n	8001158 <__aeabi_ddiv+0x558>
 8001090:	d060      	beq.n	8001154 <__aeabi_ddiv+0x554>
 8001092:	4690      	mov	r8, r2
 8001094:	e752      	b.n	8000f3c <__aeabi_ddiv+0x33c>
 8001096:	42aa      	cmp	r2, r5
 8001098:	d900      	bls.n	800109c <__aeabi_ddiv+0x49c>
 800109a:	e6ea      	b.n	8000e72 <__aeabi_ddiv+0x272>
 800109c:	4643      	mov	r3, r8
 800109e:	07de      	lsls	r6, r3, #31
 80010a0:	0858      	lsrs	r0, r3, #1
 80010a2:	086b      	lsrs	r3, r5, #1
 80010a4:	431e      	orrs	r6, r3
 80010a6:	07ed      	lsls	r5, r5, #31
 80010a8:	e6ea      	b.n	8000e80 <__aeabi_ddiv+0x280>
 80010aa:	4648      	mov	r0, r9
 80010ac:	f001 f89e 	bl	80021ec <__clzsi2>
 80010b0:	0001      	movs	r1, r0
 80010b2:	0002      	movs	r2, r0
 80010b4:	3115      	adds	r1, #21
 80010b6:	3220      	adds	r2, #32
 80010b8:	291c      	cmp	r1, #28
 80010ba:	dc00      	bgt.n	80010be <__aeabi_ddiv+0x4be>
 80010bc:	e61a      	b.n	8000cf4 <__aeabi_ddiv+0xf4>
 80010be:	464b      	mov	r3, r9
 80010c0:	3808      	subs	r0, #8
 80010c2:	4083      	lsls	r3, r0
 80010c4:	2500      	movs	r5, #0
 80010c6:	4698      	mov	r8, r3
 80010c8:	e620      	b.n	8000d0c <__aeabi_ddiv+0x10c>
 80010ca:	f001 f88f 	bl	80021ec <__clzsi2>
 80010ce:	0003      	movs	r3, r0
 80010d0:	001a      	movs	r2, r3
 80010d2:	3215      	adds	r2, #21
 80010d4:	3020      	adds	r0, #32
 80010d6:	2a1c      	cmp	r2, #28
 80010d8:	dc00      	bgt.n	80010dc <__aeabi_ddiv+0x4dc>
 80010da:	e630      	b.n	8000d3e <__aeabi_ddiv+0x13e>
 80010dc:	4654      	mov	r4, sl
 80010de:	3b08      	subs	r3, #8
 80010e0:	2200      	movs	r2, #0
 80010e2:	409c      	lsls	r4, r3
 80010e4:	e635      	b.n	8000d52 <__aeabi_ddiv+0x152>
 80010e6:	230f      	movs	r3, #15
 80010e8:	402b      	ands	r3, r5
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d100      	bne.n	80010f0 <__aeabi_ddiv+0x4f0>
 80010ee:	e652      	b.n	8000d96 <__aeabi_ddiv+0x196>
 80010f0:	2305      	movs	r3, #5
 80010f2:	425b      	negs	r3, r3
 80010f4:	42ab      	cmp	r3, r5
 80010f6:	419b      	sbcs	r3, r3
 80010f8:	3504      	adds	r5, #4
 80010fa:	425b      	negs	r3, r3
 80010fc:	08ed      	lsrs	r5, r5, #3
 80010fe:	4498      	add	r8, r3
 8001100:	e64a      	b.n	8000d98 <__aeabi_ddiv+0x198>
 8001102:	428c      	cmp	r4, r1
 8001104:	d1c5      	bne.n	8001092 <__aeabi_ddiv+0x492>
 8001106:	42af      	cmp	r7, r5
 8001108:	d9c0      	bls.n	800108c <__aeabi_ddiv+0x48c>
 800110a:	4690      	mov	r8, r2
 800110c:	e716      	b.n	8000f3c <__aeabi_ddiv+0x33c>
 800110e:	428a      	cmp	r2, r1
 8001110:	d800      	bhi.n	8001114 <__aeabi_ddiv+0x514>
 8001112:	e6ea      	b.n	8000eea <__aeabi_ddiv+0x2ea>
 8001114:	1e83      	subs	r3, r0, #2
 8001116:	1909      	adds	r1, r1, r4
 8001118:	e6e7      	b.n	8000eea <__aeabi_ddiv+0x2ea>
 800111a:	4a2a      	ldr	r2, [pc, #168]	; (80011c4 <__aeabi_ddiv+0x5c4>)
 800111c:	0028      	movs	r0, r5
 800111e:	445a      	add	r2, fp
 8001120:	4643      	mov	r3, r8
 8001122:	4095      	lsls	r5, r2
 8001124:	4093      	lsls	r3, r2
 8001126:	40c8      	lsrs	r0, r1
 8001128:	1e6a      	subs	r2, r5, #1
 800112a:	4195      	sbcs	r5, r2
 800112c:	4644      	mov	r4, r8
 800112e:	4303      	orrs	r3, r0
 8001130:	432b      	orrs	r3, r5
 8001132:	40cc      	lsrs	r4, r1
 8001134:	075a      	lsls	r2, r3, #29
 8001136:	d092      	beq.n	800105e <__aeabi_ddiv+0x45e>
 8001138:	220f      	movs	r2, #15
 800113a:	401a      	ands	r2, r3
 800113c:	2a04      	cmp	r2, #4
 800113e:	d188      	bne.n	8001052 <__aeabi_ddiv+0x452>
 8001140:	e78d      	b.n	800105e <__aeabi_ddiv+0x45e>
 8001142:	0035      	movs	r5, r6
 8001144:	4281      	cmp	r1, r0
 8001146:	d000      	beq.n	800114a <__aeabi_ddiv+0x54a>
 8001148:	e74b      	b.n	8000fe2 <__aeabi_ddiv+0x3e2>
 800114a:	9a00      	ldr	r2, [sp, #0]
 800114c:	4293      	cmp	r3, r2
 800114e:	d000      	beq.n	8001152 <__aeabi_ddiv+0x552>
 8001150:	e747      	b.n	8000fe2 <__aeabi_ddiv+0x3e2>
 8001152:	e618      	b.n	8000d86 <__aeabi_ddiv+0x186>
 8001154:	42ae      	cmp	r6, r5
 8001156:	d99c      	bls.n	8001092 <__aeabi_ddiv+0x492>
 8001158:	2302      	movs	r3, #2
 800115a:	425b      	negs	r3, r3
 800115c:	469c      	mov	ip, r3
 800115e:	9b00      	ldr	r3, [sp, #0]
 8001160:	44e0      	add	r8, ip
 8001162:	469c      	mov	ip, r3
 8001164:	4465      	add	r5, ip
 8001166:	429d      	cmp	r5, r3
 8001168:	419b      	sbcs	r3, r3
 800116a:	425b      	negs	r3, r3
 800116c:	191b      	adds	r3, r3, r4
 800116e:	18c9      	adds	r1, r1, r3
 8001170:	e6e4      	b.n	8000f3c <__aeabi_ddiv+0x33c>
 8001172:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <__aeabi_ddiv+0x5c8>)
 8001174:	445a      	add	r2, fp
 8001176:	2a00      	cmp	r2, #0
 8001178:	dc00      	bgt.n	800117c <__aeabi_ddiv+0x57c>
 800117a:	e744      	b.n	8001006 <__aeabi_ddiv+0x406>
 800117c:	2301      	movs	r3, #1
 800117e:	2500      	movs	r5, #0
 8001180:	4498      	add	r8, r3
 8001182:	e609      	b.n	8000d98 <__aeabi_ddiv+0x198>
 8001184:	0765      	lsls	r5, r4, #29
 8001186:	0264      	lsls	r4, r4, #9
 8001188:	0b24      	lsrs	r4, r4, #12
 800118a:	08db      	lsrs	r3, r3, #3
 800118c:	431d      	orrs	r5, r3
 800118e:	2300      	movs	r3, #0
 8001190:	e590      	b.n	8000cb4 <__aeabi_ddiv+0xb4>
 8001192:	9e00      	ldr	r6, [sp, #0]
 8001194:	3d02      	subs	r5, #2
 8001196:	0072      	lsls	r2, r6, #1
 8001198:	42b2      	cmp	r2, r6
 800119a:	41bf      	sbcs	r7, r7
 800119c:	427f      	negs	r7, r7
 800119e:	193c      	adds	r4, r7, r4
 80011a0:	1909      	adds	r1, r1, r4
 80011a2:	9200      	str	r2, [sp, #0]
 80011a4:	e7ce      	b.n	8001144 <__aeabi_ddiv+0x544>
 80011a6:	2480      	movs	r4, #128	; 0x80
 80011a8:	4643      	mov	r3, r8
 80011aa:	0324      	lsls	r4, r4, #12
 80011ac:	431c      	orrs	r4, r3
 80011ae:	0324      	lsls	r4, r4, #12
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <__aeabi_ddiv+0x5cc>)
 80011b2:	0b24      	lsrs	r4, r4, #12
 80011b4:	e57e      	b.n	8000cb4 <__aeabi_ddiv+0xb4>
 80011b6:	9a00      	ldr	r2, [sp, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d3ea      	bcc.n	8001192 <__aeabi_ddiv+0x592>
 80011bc:	0035      	movs	r5, r6
 80011be:	e7c4      	b.n	800114a <__aeabi_ddiv+0x54a>
 80011c0:	0000043e 	.word	0x0000043e
 80011c4:	0000041e 	.word	0x0000041e
 80011c8:	000003ff 	.word	0x000003ff
 80011cc:	000007ff 	.word	0x000007ff

080011d0 <__eqdf2>:
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	464f      	mov	r7, r9
 80011d4:	4646      	mov	r6, r8
 80011d6:	46d6      	mov	lr, sl
 80011d8:	4694      	mov	ip, r2
 80011da:	4691      	mov	r9, r2
 80011dc:	031a      	lsls	r2, r3, #12
 80011de:	0b12      	lsrs	r2, r2, #12
 80011e0:	4d18      	ldr	r5, [pc, #96]	; (8001244 <__eqdf2+0x74>)
 80011e2:	b5c0      	push	{r6, r7, lr}
 80011e4:	004c      	lsls	r4, r1, #1
 80011e6:	030f      	lsls	r7, r1, #12
 80011e8:	4692      	mov	sl, r2
 80011ea:	005a      	lsls	r2, r3, #1
 80011ec:	0006      	movs	r6, r0
 80011ee:	4680      	mov	r8, r0
 80011f0:	0b3f      	lsrs	r7, r7, #12
 80011f2:	2001      	movs	r0, #1
 80011f4:	0d64      	lsrs	r4, r4, #21
 80011f6:	0fc9      	lsrs	r1, r1, #31
 80011f8:	0d52      	lsrs	r2, r2, #21
 80011fa:	0fdb      	lsrs	r3, r3, #31
 80011fc:	42ac      	cmp	r4, r5
 80011fe:	d00a      	beq.n	8001216 <__eqdf2+0x46>
 8001200:	42aa      	cmp	r2, r5
 8001202:	d003      	beq.n	800120c <__eqdf2+0x3c>
 8001204:	4294      	cmp	r4, r2
 8001206:	d101      	bne.n	800120c <__eqdf2+0x3c>
 8001208:	4557      	cmp	r7, sl
 800120a:	d00d      	beq.n	8001228 <__eqdf2+0x58>
 800120c:	bce0      	pop	{r5, r6, r7}
 800120e:	46ba      	mov	sl, r7
 8001210:	46b1      	mov	r9, r6
 8001212:	46a8      	mov	r8, r5
 8001214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001216:	003d      	movs	r5, r7
 8001218:	4335      	orrs	r5, r6
 800121a:	d1f7      	bne.n	800120c <__eqdf2+0x3c>
 800121c:	42a2      	cmp	r2, r4
 800121e:	d1f5      	bne.n	800120c <__eqdf2+0x3c>
 8001220:	4652      	mov	r2, sl
 8001222:	4665      	mov	r5, ip
 8001224:	432a      	orrs	r2, r5
 8001226:	d1f1      	bne.n	800120c <__eqdf2+0x3c>
 8001228:	2001      	movs	r0, #1
 800122a:	45c8      	cmp	r8, r9
 800122c:	d1ee      	bne.n	800120c <__eqdf2+0x3c>
 800122e:	4299      	cmp	r1, r3
 8001230:	d006      	beq.n	8001240 <__eqdf2+0x70>
 8001232:	2c00      	cmp	r4, #0
 8001234:	d1ea      	bne.n	800120c <__eqdf2+0x3c>
 8001236:	433e      	orrs	r6, r7
 8001238:	0030      	movs	r0, r6
 800123a:	1e46      	subs	r6, r0, #1
 800123c:	41b0      	sbcs	r0, r6
 800123e:	e7e5      	b.n	800120c <__eqdf2+0x3c>
 8001240:	2000      	movs	r0, #0
 8001242:	e7e3      	b.n	800120c <__eqdf2+0x3c>
 8001244:	000007ff 	.word	0x000007ff

08001248 <__gedf2>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	464e      	mov	r6, r9
 800124c:	4645      	mov	r5, r8
 800124e:	4657      	mov	r7, sl
 8001250:	46de      	mov	lr, fp
 8001252:	0004      	movs	r4, r0
 8001254:	0018      	movs	r0, r3
 8001256:	b5e0      	push	{r5, r6, r7, lr}
 8001258:	0016      	movs	r6, r2
 800125a:	031b      	lsls	r3, r3, #12
 800125c:	0b1b      	lsrs	r3, r3, #12
 800125e:	4d32      	ldr	r5, [pc, #200]	; (8001328 <__gedf2+0xe0>)
 8001260:	030f      	lsls	r7, r1, #12
 8001262:	004a      	lsls	r2, r1, #1
 8001264:	4699      	mov	r9, r3
 8001266:	0043      	lsls	r3, r0, #1
 8001268:	46a4      	mov	ip, r4
 800126a:	46b0      	mov	r8, r6
 800126c:	0b3f      	lsrs	r7, r7, #12
 800126e:	0d52      	lsrs	r2, r2, #21
 8001270:	0fc9      	lsrs	r1, r1, #31
 8001272:	0d5b      	lsrs	r3, r3, #21
 8001274:	0fc0      	lsrs	r0, r0, #31
 8001276:	42aa      	cmp	r2, r5
 8001278:	d029      	beq.n	80012ce <__gedf2+0x86>
 800127a:	42ab      	cmp	r3, r5
 800127c:	d018      	beq.n	80012b0 <__gedf2+0x68>
 800127e:	2a00      	cmp	r2, #0
 8001280:	d12a      	bne.n	80012d8 <__gedf2+0x90>
 8001282:	433c      	orrs	r4, r7
 8001284:	46a3      	mov	fp, r4
 8001286:	4265      	negs	r5, r4
 8001288:	4165      	adcs	r5, r4
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <__gedf2+0x4c>
 800128e:	464c      	mov	r4, r9
 8001290:	4326      	orrs	r6, r4
 8001292:	d027      	beq.n	80012e4 <__gedf2+0x9c>
 8001294:	2d00      	cmp	r5, #0
 8001296:	d115      	bne.n	80012c4 <__gedf2+0x7c>
 8001298:	4281      	cmp	r1, r0
 800129a:	d028      	beq.n	80012ee <__gedf2+0xa6>
 800129c:	2002      	movs	r0, #2
 800129e:	3901      	subs	r1, #1
 80012a0:	4008      	ands	r0, r1
 80012a2:	3801      	subs	r0, #1
 80012a4:	bcf0      	pop	{r4, r5, r6, r7}
 80012a6:	46bb      	mov	fp, r7
 80012a8:	46b2      	mov	sl, r6
 80012aa:	46a9      	mov	r9, r5
 80012ac:	46a0      	mov	r8, r4
 80012ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b0:	464d      	mov	r5, r9
 80012b2:	432e      	orrs	r6, r5
 80012b4:	d12f      	bne.n	8001316 <__gedf2+0xce>
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d1ee      	bne.n	8001298 <__gedf2+0x50>
 80012ba:	433c      	orrs	r4, r7
 80012bc:	4265      	negs	r5, r4
 80012be:	4165      	adcs	r5, r4
 80012c0:	2d00      	cmp	r5, #0
 80012c2:	d0e9      	beq.n	8001298 <__gedf2+0x50>
 80012c4:	2800      	cmp	r0, #0
 80012c6:	d1ed      	bne.n	80012a4 <__gedf2+0x5c>
 80012c8:	2001      	movs	r0, #1
 80012ca:	4240      	negs	r0, r0
 80012cc:	e7ea      	b.n	80012a4 <__gedf2+0x5c>
 80012ce:	003d      	movs	r5, r7
 80012d0:	4325      	orrs	r5, r4
 80012d2:	d120      	bne.n	8001316 <__gedf2+0xce>
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d0eb      	beq.n	80012b0 <__gedf2+0x68>
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1dd      	bne.n	8001298 <__gedf2+0x50>
 80012dc:	464c      	mov	r4, r9
 80012de:	4326      	orrs	r6, r4
 80012e0:	d1da      	bne.n	8001298 <__gedf2+0x50>
 80012e2:	e7db      	b.n	800129c <__gedf2+0x54>
 80012e4:	465b      	mov	r3, fp
 80012e6:	2000      	movs	r0, #0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0db      	beq.n	80012a4 <__gedf2+0x5c>
 80012ec:	e7d6      	b.n	800129c <__gedf2+0x54>
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dc0a      	bgt.n	8001308 <__gedf2+0xc0>
 80012f2:	dbe7      	blt.n	80012c4 <__gedf2+0x7c>
 80012f4:	454f      	cmp	r7, r9
 80012f6:	d8d1      	bhi.n	800129c <__gedf2+0x54>
 80012f8:	d010      	beq.n	800131c <__gedf2+0xd4>
 80012fa:	2000      	movs	r0, #0
 80012fc:	454f      	cmp	r7, r9
 80012fe:	d2d1      	bcs.n	80012a4 <__gedf2+0x5c>
 8001300:	2900      	cmp	r1, #0
 8001302:	d0e1      	beq.n	80012c8 <__gedf2+0x80>
 8001304:	0008      	movs	r0, r1
 8001306:	e7cd      	b.n	80012a4 <__gedf2+0x5c>
 8001308:	4243      	negs	r3, r0
 800130a:	4158      	adcs	r0, r3
 800130c:	2302      	movs	r3, #2
 800130e:	4240      	negs	r0, r0
 8001310:	4018      	ands	r0, r3
 8001312:	3801      	subs	r0, #1
 8001314:	e7c6      	b.n	80012a4 <__gedf2+0x5c>
 8001316:	2002      	movs	r0, #2
 8001318:	4240      	negs	r0, r0
 800131a:	e7c3      	b.n	80012a4 <__gedf2+0x5c>
 800131c:	45c4      	cmp	ip, r8
 800131e:	d8bd      	bhi.n	800129c <__gedf2+0x54>
 8001320:	2000      	movs	r0, #0
 8001322:	45c4      	cmp	ip, r8
 8001324:	d2be      	bcs.n	80012a4 <__gedf2+0x5c>
 8001326:	e7eb      	b.n	8001300 <__gedf2+0xb8>
 8001328:	000007ff 	.word	0x000007ff

0800132c <__ledf2>:
 800132c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132e:	464e      	mov	r6, r9
 8001330:	4645      	mov	r5, r8
 8001332:	4657      	mov	r7, sl
 8001334:	46de      	mov	lr, fp
 8001336:	0004      	movs	r4, r0
 8001338:	0018      	movs	r0, r3
 800133a:	b5e0      	push	{r5, r6, r7, lr}
 800133c:	0016      	movs	r6, r2
 800133e:	031b      	lsls	r3, r3, #12
 8001340:	0b1b      	lsrs	r3, r3, #12
 8001342:	4d31      	ldr	r5, [pc, #196]	; (8001408 <__ledf2+0xdc>)
 8001344:	030f      	lsls	r7, r1, #12
 8001346:	004a      	lsls	r2, r1, #1
 8001348:	4699      	mov	r9, r3
 800134a:	0043      	lsls	r3, r0, #1
 800134c:	46a4      	mov	ip, r4
 800134e:	46b0      	mov	r8, r6
 8001350:	0b3f      	lsrs	r7, r7, #12
 8001352:	0d52      	lsrs	r2, r2, #21
 8001354:	0fc9      	lsrs	r1, r1, #31
 8001356:	0d5b      	lsrs	r3, r3, #21
 8001358:	0fc0      	lsrs	r0, r0, #31
 800135a:	42aa      	cmp	r2, r5
 800135c:	d011      	beq.n	8001382 <__ledf2+0x56>
 800135e:	42ab      	cmp	r3, r5
 8001360:	d014      	beq.n	800138c <__ledf2+0x60>
 8001362:	2a00      	cmp	r2, #0
 8001364:	d12f      	bne.n	80013c6 <__ledf2+0x9a>
 8001366:	433c      	orrs	r4, r7
 8001368:	46a3      	mov	fp, r4
 800136a:	4265      	negs	r5, r4
 800136c:	4165      	adcs	r5, r4
 800136e:	2b00      	cmp	r3, #0
 8001370:	d114      	bne.n	800139c <__ledf2+0x70>
 8001372:	464c      	mov	r4, r9
 8001374:	4326      	orrs	r6, r4
 8001376:	d111      	bne.n	800139c <__ledf2+0x70>
 8001378:	465b      	mov	r3, fp
 800137a:	2000      	movs	r0, #0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d017      	beq.n	80013b0 <__ledf2+0x84>
 8001380:	e010      	b.n	80013a4 <__ledf2+0x78>
 8001382:	003d      	movs	r5, r7
 8001384:	4325      	orrs	r5, r4
 8001386:	d112      	bne.n	80013ae <__ledf2+0x82>
 8001388:	4293      	cmp	r3, r2
 800138a:	d11c      	bne.n	80013c6 <__ledf2+0x9a>
 800138c:	464d      	mov	r5, r9
 800138e:	432e      	orrs	r6, r5
 8001390:	d10d      	bne.n	80013ae <__ledf2+0x82>
 8001392:	2a00      	cmp	r2, #0
 8001394:	d104      	bne.n	80013a0 <__ledf2+0x74>
 8001396:	433c      	orrs	r4, r7
 8001398:	4265      	negs	r5, r4
 800139a:	4165      	adcs	r5, r4
 800139c:	2d00      	cmp	r5, #0
 800139e:	d10d      	bne.n	80013bc <__ledf2+0x90>
 80013a0:	4281      	cmp	r1, r0
 80013a2:	d016      	beq.n	80013d2 <__ledf2+0xa6>
 80013a4:	2002      	movs	r0, #2
 80013a6:	3901      	subs	r1, #1
 80013a8:	4008      	ands	r0, r1
 80013aa:	3801      	subs	r0, #1
 80013ac:	e000      	b.n	80013b0 <__ledf2+0x84>
 80013ae:	2002      	movs	r0, #2
 80013b0:	bcf0      	pop	{r4, r5, r6, r7}
 80013b2:	46bb      	mov	fp, r7
 80013b4:	46b2      	mov	sl, r6
 80013b6:	46a9      	mov	r9, r5
 80013b8:	46a0      	mov	r8, r4
 80013ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013bc:	2800      	cmp	r0, #0
 80013be:	d1f7      	bne.n	80013b0 <__ledf2+0x84>
 80013c0:	2001      	movs	r0, #1
 80013c2:	4240      	negs	r0, r0
 80013c4:	e7f4      	b.n	80013b0 <__ledf2+0x84>
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1ea      	bne.n	80013a0 <__ledf2+0x74>
 80013ca:	464c      	mov	r4, r9
 80013cc:	4326      	orrs	r6, r4
 80013ce:	d1e7      	bne.n	80013a0 <__ledf2+0x74>
 80013d0:	e7e8      	b.n	80013a4 <__ledf2+0x78>
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dd06      	ble.n	80013e4 <__ledf2+0xb8>
 80013d6:	4243      	negs	r3, r0
 80013d8:	4158      	adcs	r0, r3
 80013da:	2302      	movs	r3, #2
 80013dc:	4240      	negs	r0, r0
 80013de:	4018      	ands	r0, r3
 80013e0:	3801      	subs	r0, #1
 80013e2:	e7e5      	b.n	80013b0 <__ledf2+0x84>
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbe9      	blt.n	80013bc <__ledf2+0x90>
 80013e8:	454f      	cmp	r7, r9
 80013ea:	d8db      	bhi.n	80013a4 <__ledf2+0x78>
 80013ec:	d006      	beq.n	80013fc <__ledf2+0xd0>
 80013ee:	2000      	movs	r0, #0
 80013f0:	454f      	cmp	r7, r9
 80013f2:	d2dd      	bcs.n	80013b0 <__ledf2+0x84>
 80013f4:	2900      	cmp	r1, #0
 80013f6:	d0e3      	beq.n	80013c0 <__ledf2+0x94>
 80013f8:	0008      	movs	r0, r1
 80013fa:	e7d9      	b.n	80013b0 <__ledf2+0x84>
 80013fc:	45c4      	cmp	ip, r8
 80013fe:	d8d1      	bhi.n	80013a4 <__ledf2+0x78>
 8001400:	2000      	movs	r0, #0
 8001402:	45c4      	cmp	ip, r8
 8001404:	d2d4      	bcs.n	80013b0 <__ledf2+0x84>
 8001406:	e7f5      	b.n	80013f4 <__ledf2+0xc8>
 8001408:	000007ff 	.word	0x000007ff

0800140c <__aeabi_dmul>:
 800140c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140e:	4657      	mov	r7, sl
 8001410:	464e      	mov	r6, r9
 8001412:	4645      	mov	r5, r8
 8001414:	46de      	mov	lr, fp
 8001416:	b5e0      	push	{r5, r6, r7, lr}
 8001418:	4698      	mov	r8, r3
 800141a:	030c      	lsls	r4, r1, #12
 800141c:	004b      	lsls	r3, r1, #1
 800141e:	0006      	movs	r6, r0
 8001420:	4692      	mov	sl, r2
 8001422:	b087      	sub	sp, #28
 8001424:	0b24      	lsrs	r4, r4, #12
 8001426:	0d5b      	lsrs	r3, r3, #21
 8001428:	0fcf      	lsrs	r7, r1, #31
 800142a:	2b00      	cmp	r3, #0
 800142c:	d06c      	beq.n	8001508 <__aeabi_dmul+0xfc>
 800142e:	4add      	ldr	r2, [pc, #884]	; (80017a4 <__aeabi_dmul+0x398>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d100      	bne.n	8001436 <__aeabi_dmul+0x2a>
 8001434:	e086      	b.n	8001544 <__aeabi_dmul+0x138>
 8001436:	0f42      	lsrs	r2, r0, #29
 8001438:	00e4      	lsls	r4, r4, #3
 800143a:	4314      	orrs	r4, r2
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	0412      	lsls	r2, r2, #16
 8001440:	4314      	orrs	r4, r2
 8001442:	4ad9      	ldr	r2, [pc, #868]	; (80017a8 <__aeabi_dmul+0x39c>)
 8001444:	00c5      	lsls	r5, r0, #3
 8001446:	4694      	mov	ip, r2
 8001448:	4463      	add	r3, ip
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2300      	movs	r3, #0
 800144e:	4699      	mov	r9, r3
 8001450:	469b      	mov	fp, r3
 8001452:	4643      	mov	r3, r8
 8001454:	4642      	mov	r2, r8
 8001456:	031e      	lsls	r6, r3, #12
 8001458:	0fd2      	lsrs	r2, r2, #31
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4650      	mov	r0, sl
 800145e:	4690      	mov	r8, r2
 8001460:	0b36      	lsrs	r6, r6, #12
 8001462:	0d5b      	lsrs	r3, r3, #21
 8001464:	d100      	bne.n	8001468 <__aeabi_dmul+0x5c>
 8001466:	e078      	b.n	800155a <__aeabi_dmul+0x14e>
 8001468:	4ace      	ldr	r2, [pc, #824]	; (80017a4 <__aeabi_dmul+0x398>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d01d      	beq.n	80014aa <__aeabi_dmul+0x9e>
 800146e:	49ce      	ldr	r1, [pc, #824]	; (80017a8 <__aeabi_dmul+0x39c>)
 8001470:	0f42      	lsrs	r2, r0, #29
 8001472:	468c      	mov	ip, r1
 8001474:	9900      	ldr	r1, [sp, #0]
 8001476:	4463      	add	r3, ip
 8001478:	00f6      	lsls	r6, r6, #3
 800147a:	468c      	mov	ip, r1
 800147c:	4316      	orrs	r6, r2
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	449c      	add	ip, r3
 8001482:	0412      	lsls	r2, r2, #16
 8001484:	4663      	mov	r3, ip
 8001486:	4316      	orrs	r6, r2
 8001488:	00c2      	lsls	r2, r0, #3
 800148a:	2000      	movs	r0, #0
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	9900      	ldr	r1, [sp, #0]
 8001490:	4643      	mov	r3, r8
 8001492:	3101      	adds	r1, #1
 8001494:	468c      	mov	ip, r1
 8001496:	4649      	mov	r1, r9
 8001498:	407b      	eors	r3, r7
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	290f      	cmp	r1, #15
 800149e:	d900      	bls.n	80014a2 <__aeabi_dmul+0x96>
 80014a0:	e07e      	b.n	80015a0 <__aeabi_dmul+0x194>
 80014a2:	4bc2      	ldr	r3, [pc, #776]	; (80017ac <__aeabi_dmul+0x3a0>)
 80014a4:	0089      	lsls	r1, r1, #2
 80014a6:	5859      	ldr	r1, [r3, r1]
 80014a8:	468f      	mov	pc, r1
 80014aa:	4652      	mov	r2, sl
 80014ac:	9b00      	ldr	r3, [sp, #0]
 80014ae:	4332      	orrs	r2, r6
 80014b0:	d000      	beq.n	80014b4 <__aeabi_dmul+0xa8>
 80014b2:	e156      	b.n	8001762 <__aeabi_dmul+0x356>
 80014b4:	49bb      	ldr	r1, [pc, #748]	; (80017a4 <__aeabi_dmul+0x398>)
 80014b6:	2600      	movs	r6, #0
 80014b8:	468c      	mov	ip, r1
 80014ba:	4463      	add	r3, ip
 80014bc:	4649      	mov	r1, r9
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2302      	movs	r3, #2
 80014c2:	4319      	orrs	r1, r3
 80014c4:	4689      	mov	r9, r1
 80014c6:	2002      	movs	r0, #2
 80014c8:	e7e1      	b.n	800148e <__aeabi_dmul+0x82>
 80014ca:	4643      	mov	r3, r8
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	0034      	movs	r4, r6
 80014d0:	0015      	movs	r5, r2
 80014d2:	4683      	mov	fp, r0
 80014d4:	465b      	mov	r3, fp
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d05e      	beq.n	8001598 <__aeabi_dmul+0x18c>
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d100      	bne.n	80014e0 <__aeabi_dmul+0xd4>
 80014de:	e1f3      	b.n	80018c8 <__aeabi_dmul+0x4bc>
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dmul+0xda>
 80014e4:	e118      	b.n	8001718 <__aeabi_dmul+0x30c>
 80014e6:	2200      	movs	r2, #0
 80014e8:	2400      	movs	r4, #0
 80014ea:	2500      	movs	r5, #0
 80014ec:	9b01      	ldr	r3, [sp, #4]
 80014ee:	0512      	lsls	r2, r2, #20
 80014f0:	4322      	orrs	r2, r4
 80014f2:	07db      	lsls	r3, r3, #31
 80014f4:	431a      	orrs	r2, r3
 80014f6:	0028      	movs	r0, r5
 80014f8:	0011      	movs	r1, r2
 80014fa:	b007      	add	sp, #28
 80014fc:	bcf0      	pop	{r4, r5, r6, r7}
 80014fe:	46bb      	mov	fp, r7
 8001500:	46b2      	mov	sl, r6
 8001502:	46a9      	mov	r9, r5
 8001504:	46a0      	mov	r8, r4
 8001506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001508:	0025      	movs	r5, r4
 800150a:	4305      	orrs	r5, r0
 800150c:	d100      	bne.n	8001510 <__aeabi_dmul+0x104>
 800150e:	e141      	b.n	8001794 <__aeabi_dmul+0x388>
 8001510:	2c00      	cmp	r4, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_dmul+0x10a>
 8001514:	e1ad      	b.n	8001872 <__aeabi_dmul+0x466>
 8001516:	0020      	movs	r0, r4
 8001518:	f000 fe68 	bl	80021ec <__clzsi2>
 800151c:	0001      	movs	r1, r0
 800151e:	0002      	movs	r2, r0
 8001520:	390b      	subs	r1, #11
 8001522:	231d      	movs	r3, #29
 8001524:	0010      	movs	r0, r2
 8001526:	1a5b      	subs	r3, r3, r1
 8001528:	0031      	movs	r1, r6
 800152a:	0035      	movs	r5, r6
 800152c:	3808      	subs	r0, #8
 800152e:	4084      	lsls	r4, r0
 8001530:	40d9      	lsrs	r1, r3
 8001532:	4085      	lsls	r5, r0
 8001534:	430c      	orrs	r4, r1
 8001536:	489e      	ldr	r0, [pc, #632]	; (80017b0 <__aeabi_dmul+0x3a4>)
 8001538:	1a83      	subs	r3, r0, r2
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2300      	movs	r3, #0
 800153e:	4699      	mov	r9, r3
 8001540:	469b      	mov	fp, r3
 8001542:	e786      	b.n	8001452 <__aeabi_dmul+0x46>
 8001544:	0005      	movs	r5, r0
 8001546:	4325      	orrs	r5, r4
 8001548:	d000      	beq.n	800154c <__aeabi_dmul+0x140>
 800154a:	e11c      	b.n	8001786 <__aeabi_dmul+0x37a>
 800154c:	2208      	movs	r2, #8
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2302      	movs	r3, #2
 8001552:	2400      	movs	r4, #0
 8001554:	4691      	mov	r9, r2
 8001556:	469b      	mov	fp, r3
 8001558:	e77b      	b.n	8001452 <__aeabi_dmul+0x46>
 800155a:	4652      	mov	r2, sl
 800155c:	4332      	orrs	r2, r6
 800155e:	d100      	bne.n	8001562 <__aeabi_dmul+0x156>
 8001560:	e10a      	b.n	8001778 <__aeabi_dmul+0x36c>
 8001562:	2e00      	cmp	r6, #0
 8001564:	d100      	bne.n	8001568 <__aeabi_dmul+0x15c>
 8001566:	e176      	b.n	8001856 <__aeabi_dmul+0x44a>
 8001568:	0030      	movs	r0, r6
 800156a:	f000 fe3f 	bl	80021ec <__clzsi2>
 800156e:	0002      	movs	r2, r0
 8001570:	3a0b      	subs	r2, #11
 8001572:	231d      	movs	r3, #29
 8001574:	0001      	movs	r1, r0
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	4652      	mov	r2, sl
 800157a:	3908      	subs	r1, #8
 800157c:	40da      	lsrs	r2, r3
 800157e:	408e      	lsls	r6, r1
 8001580:	4316      	orrs	r6, r2
 8001582:	4652      	mov	r2, sl
 8001584:	408a      	lsls	r2, r1
 8001586:	9b00      	ldr	r3, [sp, #0]
 8001588:	4989      	ldr	r1, [pc, #548]	; (80017b0 <__aeabi_dmul+0x3a4>)
 800158a:	1a18      	subs	r0, r3, r0
 800158c:	0003      	movs	r3, r0
 800158e:	468c      	mov	ip, r1
 8001590:	4463      	add	r3, ip
 8001592:	2000      	movs	r0, #0
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	e77a      	b.n	800148e <__aeabi_dmul+0x82>
 8001598:	2400      	movs	r4, #0
 800159a:	2500      	movs	r5, #0
 800159c:	4a81      	ldr	r2, [pc, #516]	; (80017a4 <__aeabi_dmul+0x398>)
 800159e:	e7a5      	b.n	80014ec <__aeabi_dmul+0xe0>
 80015a0:	0c2f      	lsrs	r7, r5, #16
 80015a2:	042d      	lsls	r5, r5, #16
 80015a4:	0c2d      	lsrs	r5, r5, #16
 80015a6:	002b      	movs	r3, r5
 80015a8:	0c11      	lsrs	r1, r2, #16
 80015aa:	0412      	lsls	r2, r2, #16
 80015ac:	0c12      	lsrs	r2, r2, #16
 80015ae:	4353      	muls	r3, r2
 80015b0:	4698      	mov	r8, r3
 80015b2:	0013      	movs	r3, r2
 80015b4:	0028      	movs	r0, r5
 80015b6:	437b      	muls	r3, r7
 80015b8:	4699      	mov	r9, r3
 80015ba:	4348      	muls	r0, r1
 80015bc:	4448      	add	r0, r9
 80015be:	4683      	mov	fp, r0
 80015c0:	4640      	mov	r0, r8
 80015c2:	000b      	movs	r3, r1
 80015c4:	0c00      	lsrs	r0, r0, #16
 80015c6:	4682      	mov	sl, r0
 80015c8:	4658      	mov	r0, fp
 80015ca:	437b      	muls	r3, r7
 80015cc:	4450      	add	r0, sl
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	4581      	cmp	r9, r0
 80015d2:	d906      	bls.n	80015e2 <__aeabi_dmul+0x1d6>
 80015d4:	469a      	mov	sl, r3
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	025b      	lsls	r3, r3, #9
 80015da:	4699      	mov	r9, r3
 80015dc:	44ca      	add	sl, r9
 80015de:	4653      	mov	r3, sl
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	0c03      	lsrs	r3, r0, #16
 80015e4:	469b      	mov	fp, r3
 80015e6:	4643      	mov	r3, r8
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	0400      	lsls	r0, r0, #16
 80015ec:	0c1b      	lsrs	r3, r3, #16
 80015ee:	4698      	mov	r8, r3
 80015f0:	0003      	movs	r3, r0
 80015f2:	4443      	add	r3, r8
 80015f4:	9304      	str	r3, [sp, #16]
 80015f6:	0c33      	lsrs	r3, r6, #16
 80015f8:	4699      	mov	r9, r3
 80015fa:	002b      	movs	r3, r5
 80015fc:	0436      	lsls	r6, r6, #16
 80015fe:	0c36      	lsrs	r6, r6, #16
 8001600:	4373      	muls	r3, r6
 8001602:	4698      	mov	r8, r3
 8001604:	0033      	movs	r3, r6
 8001606:	437b      	muls	r3, r7
 8001608:	469a      	mov	sl, r3
 800160a:	464b      	mov	r3, r9
 800160c:	435d      	muls	r5, r3
 800160e:	435f      	muls	r7, r3
 8001610:	4643      	mov	r3, r8
 8001612:	4455      	add	r5, sl
 8001614:	0c18      	lsrs	r0, r3, #16
 8001616:	1940      	adds	r0, r0, r5
 8001618:	4582      	cmp	sl, r0
 800161a:	d903      	bls.n	8001624 <__aeabi_dmul+0x218>
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	025b      	lsls	r3, r3, #9
 8001620:	469a      	mov	sl, r3
 8001622:	4457      	add	r7, sl
 8001624:	0c05      	lsrs	r5, r0, #16
 8001626:	19eb      	adds	r3, r5, r7
 8001628:	9305      	str	r3, [sp, #20]
 800162a:	4643      	mov	r3, r8
 800162c:	041d      	lsls	r5, r3, #16
 800162e:	0c2d      	lsrs	r5, r5, #16
 8001630:	0400      	lsls	r0, r0, #16
 8001632:	1940      	adds	r0, r0, r5
 8001634:	0c25      	lsrs	r5, r4, #16
 8001636:	0424      	lsls	r4, r4, #16
 8001638:	0c24      	lsrs	r4, r4, #16
 800163a:	0027      	movs	r7, r4
 800163c:	4357      	muls	r7, r2
 800163e:	436a      	muls	r2, r5
 8001640:	4690      	mov	r8, r2
 8001642:	002a      	movs	r2, r5
 8001644:	0c3b      	lsrs	r3, r7, #16
 8001646:	469a      	mov	sl, r3
 8001648:	434a      	muls	r2, r1
 800164a:	4361      	muls	r1, r4
 800164c:	4441      	add	r1, r8
 800164e:	4451      	add	r1, sl
 8001650:	4483      	add	fp, r0
 8001652:	4588      	cmp	r8, r1
 8001654:	d903      	bls.n	800165e <__aeabi_dmul+0x252>
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	025b      	lsls	r3, r3, #9
 800165a:	4698      	mov	r8, r3
 800165c:	4442      	add	r2, r8
 800165e:	043f      	lsls	r7, r7, #16
 8001660:	0c0b      	lsrs	r3, r1, #16
 8001662:	0c3f      	lsrs	r7, r7, #16
 8001664:	0409      	lsls	r1, r1, #16
 8001666:	19c9      	adds	r1, r1, r7
 8001668:	0027      	movs	r7, r4
 800166a:	4698      	mov	r8, r3
 800166c:	464b      	mov	r3, r9
 800166e:	4377      	muls	r7, r6
 8001670:	435c      	muls	r4, r3
 8001672:	436e      	muls	r6, r5
 8001674:	435d      	muls	r5, r3
 8001676:	0c3b      	lsrs	r3, r7, #16
 8001678:	4699      	mov	r9, r3
 800167a:	19a4      	adds	r4, r4, r6
 800167c:	444c      	add	r4, r9
 800167e:	4442      	add	r2, r8
 8001680:	9503      	str	r5, [sp, #12]
 8001682:	42a6      	cmp	r6, r4
 8001684:	d904      	bls.n	8001690 <__aeabi_dmul+0x284>
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	025b      	lsls	r3, r3, #9
 800168a:	4698      	mov	r8, r3
 800168c:	4445      	add	r5, r8
 800168e:	9503      	str	r5, [sp, #12]
 8001690:	9b02      	ldr	r3, [sp, #8]
 8001692:	043f      	lsls	r7, r7, #16
 8001694:	445b      	add	r3, fp
 8001696:	001e      	movs	r6, r3
 8001698:	4283      	cmp	r3, r0
 800169a:	4180      	sbcs	r0, r0
 800169c:	0423      	lsls	r3, r4, #16
 800169e:	4698      	mov	r8, r3
 80016a0:	9b05      	ldr	r3, [sp, #20]
 80016a2:	0c3f      	lsrs	r7, r7, #16
 80016a4:	4447      	add	r7, r8
 80016a6:	4698      	mov	r8, r3
 80016a8:	1876      	adds	r6, r6, r1
 80016aa:	428e      	cmp	r6, r1
 80016ac:	4189      	sbcs	r1, r1
 80016ae:	4447      	add	r7, r8
 80016b0:	4240      	negs	r0, r0
 80016b2:	183d      	adds	r5, r7, r0
 80016b4:	46a8      	mov	r8, r5
 80016b6:	4693      	mov	fp, r2
 80016b8:	4249      	negs	r1, r1
 80016ba:	468a      	mov	sl, r1
 80016bc:	44c3      	add	fp, r8
 80016be:	429f      	cmp	r7, r3
 80016c0:	41bf      	sbcs	r7, r7
 80016c2:	4580      	cmp	r8, r0
 80016c4:	4180      	sbcs	r0, r0
 80016c6:	9b03      	ldr	r3, [sp, #12]
 80016c8:	44da      	add	sl, fp
 80016ca:	4698      	mov	r8, r3
 80016cc:	4653      	mov	r3, sl
 80016ce:	4240      	negs	r0, r0
 80016d0:	427f      	negs	r7, r7
 80016d2:	4307      	orrs	r7, r0
 80016d4:	0c24      	lsrs	r4, r4, #16
 80016d6:	4593      	cmp	fp, r2
 80016d8:	4192      	sbcs	r2, r2
 80016da:	458a      	cmp	sl, r1
 80016dc:	4189      	sbcs	r1, r1
 80016de:	193f      	adds	r7, r7, r4
 80016e0:	0ddc      	lsrs	r4, r3, #23
 80016e2:	9b04      	ldr	r3, [sp, #16]
 80016e4:	0275      	lsls	r5, r6, #9
 80016e6:	431d      	orrs	r5, r3
 80016e8:	1e68      	subs	r0, r5, #1
 80016ea:	4185      	sbcs	r5, r0
 80016ec:	4653      	mov	r3, sl
 80016ee:	4252      	negs	r2, r2
 80016f0:	4249      	negs	r1, r1
 80016f2:	430a      	orrs	r2, r1
 80016f4:	18bf      	adds	r7, r7, r2
 80016f6:	4447      	add	r7, r8
 80016f8:	0df6      	lsrs	r6, r6, #23
 80016fa:	027f      	lsls	r7, r7, #9
 80016fc:	4335      	orrs	r5, r6
 80016fe:	025a      	lsls	r2, r3, #9
 8001700:	433c      	orrs	r4, r7
 8001702:	4315      	orrs	r5, r2
 8001704:	01fb      	lsls	r3, r7, #7
 8001706:	d400      	bmi.n	800170a <__aeabi_dmul+0x2fe>
 8001708:	e0c1      	b.n	800188e <__aeabi_dmul+0x482>
 800170a:	2101      	movs	r1, #1
 800170c:	086a      	lsrs	r2, r5, #1
 800170e:	400d      	ands	r5, r1
 8001710:	4315      	orrs	r5, r2
 8001712:	07e2      	lsls	r2, r4, #31
 8001714:	4315      	orrs	r5, r2
 8001716:	0864      	lsrs	r4, r4, #1
 8001718:	4926      	ldr	r1, [pc, #152]	; (80017b4 <__aeabi_dmul+0x3a8>)
 800171a:	4461      	add	r1, ip
 800171c:	2900      	cmp	r1, #0
 800171e:	dd56      	ble.n	80017ce <__aeabi_dmul+0x3c2>
 8001720:	076b      	lsls	r3, r5, #29
 8001722:	d009      	beq.n	8001738 <__aeabi_dmul+0x32c>
 8001724:	220f      	movs	r2, #15
 8001726:	402a      	ands	r2, r5
 8001728:	2a04      	cmp	r2, #4
 800172a:	d005      	beq.n	8001738 <__aeabi_dmul+0x32c>
 800172c:	1d2a      	adds	r2, r5, #4
 800172e:	42aa      	cmp	r2, r5
 8001730:	41ad      	sbcs	r5, r5
 8001732:	426d      	negs	r5, r5
 8001734:	1964      	adds	r4, r4, r5
 8001736:	0015      	movs	r5, r2
 8001738:	01e3      	lsls	r3, r4, #7
 800173a:	d504      	bpl.n	8001746 <__aeabi_dmul+0x33a>
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	4a1e      	ldr	r2, [pc, #120]	; (80017b8 <__aeabi_dmul+0x3ac>)
 8001740:	00c9      	lsls	r1, r1, #3
 8001742:	4014      	ands	r4, r2
 8001744:	4461      	add	r1, ip
 8001746:	4a1d      	ldr	r2, [pc, #116]	; (80017bc <__aeabi_dmul+0x3b0>)
 8001748:	4291      	cmp	r1, r2
 800174a:	dd00      	ble.n	800174e <__aeabi_dmul+0x342>
 800174c:	e724      	b.n	8001598 <__aeabi_dmul+0x18c>
 800174e:	0762      	lsls	r2, r4, #29
 8001750:	08ed      	lsrs	r5, r5, #3
 8001752:	0264      	lsls	r4, r4, #9
 8001754:	0549      	lsls	r1, r1, #21
 8001756:	4315      	orrs	r5, r2
 8001758:	0b24      	lsrs	r4, r4, #12
 800175a:	0d4a      	lsrs	r2, r1, #21
 800175c:	e6c6      	b.n	80014ec <__aeabi_dmul+0xe0>
 800175e:	9701      	str	r7, [sp, #4]
 8001760:	e6b8      	b.n	80014d4 <__aeabi_dmul+0xc8>
 8001762:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <__aeabi_dmul+0x398>)
 8001764:	2003      	movs	r0, #3
 8001766:	4694      	mov	ip, r2
 8001768:	4463      	add	r3, ip
 800176a:	464a      	mov	r2, r9
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2303      	movs	r3, #3
 8001770:	431a      	orrs	r2, r3
 8001772:	4691      	mov	r9, r2
 8001774:	4652      	mov	r2, sl
 8001776:	e68a      	b.n	800148e <__aeabi_dmul+0x82>
 8001778:	4649      	mov	r1, r9
 800177a:	2301      	movs	r3, #1
 800177c:	4319      	orrs	r1, r3
 800177e:	4689      	mov	r9, r1
 8001780:	2600      	movs	r6, #0
 8001782:	2001      	movs	r0, #1
 8001784:	e683      	b.n	800148e <__aeabi_dmul+0x82>
 8001786:	220c      	movs	r2, #12
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2303      	movs	r3, #3
 800178c:	0005      	movs	r5, r0
 800178e:	4691      	mov	r9, r2
 8001790:	469b      	mov	fp, r3
 8001792:	e65e      	b.n	8001452 <__aeabi_dmul+0x46>
 8001794:	2304      	movs	r3, #4
 8001796:	4699      	mov	r9, r3
 8001798:	2300      	movs	r3, #0
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	2400      	movs	r4, #0
 80017a0:	469b      	mov	fp, r3
 80017a2:	e656      	b.n	8001452 <__aeabi_dmul+0x46>
 80017a4:	000007ff 	.word	0x000007ff
 80017a8:	fffffc01 	.word	0xfffffc01
 80017ac:	0800bb60 	.word	0x0800bb60
 80017b0:	fffffc0d 	.word	0xfffffc0d
 80017b4:	000003ff 	.word	0x000003ff
 80017b8:	feffffff 	.word	0xfeffffff
 80017bc:	000007fe 	.word	0x000007fe
 80017c0:	2300      	movs	r3, #0
 80017c2:	2480      	movs	r4, #128	; 0x80
 80017c4:	2500      	movs	r5, #0
 80017c6:	4a44      	ldr	r2, [pc, #272]	; (80018d8 <__aeabi_dmul+0x4cc>)
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	e68e      	b.n	80014ec <__aeabi_dmul+0xe0>
 80017ce:	2001      	movs	r0, #1
 80017d0:	1a40      	subs	r0, r0, r1
 80017d2:	2838      	cmp	r0, #56	; 0x38
 80017d4:	dd00      	ble.n	80017d8 <__aeabi_dmul+0x3cc>
 80017d6:	e686      	b.n	80014e6 <__aeabi_dmul+0xda>
 80017d8:	281f      	cmp	r0, #31
 80017da:	dd5b      	ble.n	8001894 <__aeabi_dmul+0x488>
 80017dc:	221f      	movs	r2, #31
 80017de:	0023      	movs	r3, r4
 80017e0:	4252      	negs	r2, r2
 80017e2:	1a51      	subs	r1, r2, r1
 80017e4:	40cb      	lsrs	r3, r1
 80017e6:	0019      	movs	r1, r3
 80017e8:	2820      	cmp	r0, #32
 80017ea:	d003      	beq.n	80017f4 <__aeabi_dmul+0x3e8>
 80017ec:	4a3b      	ldr	r2, [pc, #236]	; (80018dc <__aeabi_dmul+0x4d0>)
 80017ee:	4462      	add	r2, ip
 80017f0:	4094      	lsls	r4, r2
 80017f2:	4325      	orrs	r5, r4
 80017f4:	1e6a      	subs	r2, r5, #1
 80017f6:	4195      	sbcs	r5, r2
 80017f8:	002a      	movs	r2, r5
 80017fa:	430a      	orrs	r2, r1
 80017fc:	2107      	movs	r1, #7
 80017fe:	000d      	movs	r5, r1
 8001800:	2400      	movs	r4, #0
 8001802:	4015      	ands	r5, r2
 8001804:	4211      	tst	r1, r2
 8001806:	d05b      	beq.n	80018c0 <__aeabi_dmul+0x4b4>
 8001808:	210f      	movs	r1, #15
 800180a:	2400      	movs	r4, #0
 800180c:	4011      	ands	r1, r2
 800180e:	2904      	cmp	r1, #4
 8001810:	d053      	beq.n	80018ba <__aeabi_dmul+0x4ae>
 8001812:	1d11      	adds	r1, r2, #4
 8001814:	4291      	cmp	r1, r2
 8001816:	4192      	sbcs	r2, r2
 8001818:	4252      	negs	r2, r2
 800181a:	18a4      	adds	r4, r4, r2
 800181c:	000a      	movs	r2, r1
 800181e:	0223      	lsls	r3, r4, #8
 8001820:	d54b      	bpl.n	80018ba <__aeabi_dmul+0x4ae>
 8001822:	2201      	movs	r2, #1
 8001824:	2400      	movs	r4, #0
 8001826:	2500      	movs	r5, #0
 8001828:	e660      	b.n	80014ec <__aeabi_dmul+0xe0>
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	031b      	lsls	r3, r3, #12
 800182e:	421c      	tst	r4, r3
 8001830:	d009      	beq.n	8001846 <__aeabi_dmul+0x43a>
 8001832:	421e      	tst	r6, r3
 8001834:	d107      	bne.n	8001846 <__aeabi_dmul+0x43a>
 8001836:	4333      	orrs	r3, r6
 8001838:	031c      	lsls	r4, r3, #12
 800183a:	4643      	mov	r3, r8
 800183c:	0015      	movs	r5, r2
 800183e:	0b24      	lsrs	r4, r4, #12
 8001840:	4a25      	ldr	r2, [pc, #148]	; (80018d8 <__aeabi_dmul+0x4cc>)
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	e652      	b.n	80014ec <__aeabi_dmul+0xe0>
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	0312      	lsls	r2, r2, #12
 800184a:	4314      	orrs	r4, r2
 800184c:	0324      	lsls	r4, r4, #12
 800184e:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <__aeabi_dmul+0x4cc>)
 8001850:	0b24      	lsrs	r4, r4, #12
 8001852:	9701      	str	r7, [sp, #4]
 8001854:	e64a      	b.n	80014ec <__aeabi_dmul+0xe0>
 8001856:	f000 fcc9 	bl	80021ec <__clzsi2>
 800185a:	0003      	movs	r3, r0
 800185c:	001a      	movs	r2, r3
 800185e:	3215      	adds	r2, #21
 8001860:	3020      	adds	r0, #32
 8001862:	2a1c      	cmp	r2, #28
 8001864:	dc00      	bgt.n	8001868 <__aeabi_dmul+0x45c>
 8001866:	e684      	b.n	8001572 <__aeabi_dmul+0x166>
 8001868:	4656      	mov	r6, sl
 800186a:	3b08      	subs	r3, #8
 800186c:	2200      	movs	r2, #0
 800186e:	409e      	lsls	r6, r3
 8001870:	e689      	b.n	8001586 <__aeabi_dmul+0x17a>
 8001872:	f000 fcbb 	bl	80021ec <__clzsi2>
 8001876:	0001      	movs	r1, r0
 8001878:	0002      	movs	r2, r0
 800187a:	3115      	adds	r1, #21
 800187c:	3220      	adds	r2, #32
 800187e:	291c      	cmp	r1, #28
 8001880:	dc00      	bgt.n	8001884 <__aeabi_dmul+0x478>
 8001882:	e64e      	b.n	8001522 <__aeabi_dmul+0x116>
 8001884:	0034      	movs	r4, r6
 8001886:	3808      	subs	r0, #8
 8001888:	2500      	movs	r5, #0
 800188a:	4084      	lsls	r4, r0
 800188c:	e653      	b.n	8001536 <__aeabi_dmul+0x12a>
 800188e:	9b00      	ldr	r3, [sp, #0]
 8001890:	469c      	mov	ip, r3
 8001892:	e741      	b.n	8001718 <__aeabi_dmul+0x30c>
 8001894:	4912      	ldr	r1, [pc, #72]	; (80018e0 <__aeabi_dmul+0x4d4>)
 8001896:	0022      	movs	r2, r4
 8001898:	4461      	add	r1, ip
 800189a:	002e      	movs	r6, r5
 800189c:	408d      	lsls	r5, r1
 800189e:	408a      	lsls	r2, r1
 80018a0:	40c6      	lsrs	r6, r0
 80018a2:	1e69      	subs	r1, r5, #1
 80018a4:	418d      	sbcs	r5, r1
 80018a6:	4332      	orrs	r2, r6
 80018a8:	432a      	orrs	r2, r5
 80018aa:	40c4      	lsrs	r4, r0
 80018ac:	0753      	lsls	r3, r2, #29
 80018ae:	d0b6      	beq.n	800181e <__aeabi_dmul+0x412>
 80018b0:	210f      	movs	r1, #15
 80018b2:	4011      	ands	r1, r2
 80018b4:	2904      	cmp	r1, #4
 80018b6:	d1ac      	bne.n	8001812 <__aeabi_dmul+0x406>
 80018b8:	e7b1      	b.n	800181e <__aeabi_dmul+0x412>
 80018ba:	0765      	lsls	r5, r4, #29
 80018bc:	0264      	lsls	r4, r4, #9
 80018be:	0b24      	lsrs	r4, r4, #12
 80018c0:	08d2      	lsrs	r2, r2, #3
 80018c2:	4315      	orrs	r5, r2
 80018c4:	2200      	movs	r2, #0
 80018c6:	e611      	b.n	80014ec <__aeabi_dmul+0xe0>
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	0312      	lsls	r2, r2, #12
 80018cc:	4314      	orrs	r4, r2
 80018ce:	0324      	lsls	r4, r4, #12
 80018d0:	4a01      	ldr	r2, [pc, #4]	; (80018d8 <__aeabi_dmul+0x4cc>)
 80018d2:	0b24      	lsrs	r4, r4, #12
 80018d4:	e60a      	b.n	80014ec <__aeabi_dmul+0xe0>
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	000007ff 	.word	0x000007ff
 80018dc:	0000043e 	.word	0x0000043e
 80018e0:	0000041e 	.word	0x0000041e

080018e4 <__aeabi_dsub>:
 80018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e6:	4657      	mov	r7, sl
 80018e8:	464e      	mov	r6, r9
 80018ea:	4645      	mov	r5, r8
 80018ec:	46de      	mov	lr, fp
 80018ee:	0004      	movs	r4, r0
 80018f0:	b5e0      	push	{r5, r6, r7, lr}
 80018f2:	001f      	movs	r7, r3
 80018f4:	0010      	movs	r0, r2
 80018f6:	030b      	lsls	r3, r1, #12
 80018f8:	0f62      	lsrs	r2, r4, #29
 80018fa:	004e      	lsls	r6, r1, #1
 80018fc:	0fcd      	lsrs	r5, r1, #31
 80018fe:	0a5b      	lsrs	r3, r3, #9
 8001900:	0339      	lsls	r1, r7, #12
 8001902:	4313      	orrs	r3, r2
 8001904:	0a49      	lsrs	r1, r1, #9
 8001906:	00e2      	lsls	r2, r4, #3
 8001908:	0f44      	lsrs	r4, r0, #29
 800190a:	4321      	orrs	r1, r4
 800190c:	4cc2      	ldr	r4, [pc, #776]	; (8001c18 <__aeabi_dsub+0x334>)
 800190e:	4691      	mov	r9, r2
 8001910:	4692      	mov	sl, r2
 8001912:	00c0      	lsls	r0, r0, #3
 8001914:	007a      	lsls	r2, r7, #1
 8001916:	4680      	mov	r8, r0
 8001918:	0d76      	lsrs	r6, r6, #21
 800191a:	0d52      	lsrs	r2, r2, #21
 800191c:	0fff      	lsrs	r7, r7, #31
 800191e:	42a2      	cmp	r2, r4
 8001920:	d100      	bne.n	8001924 <__aeabi_dsub+0x40>
 8001922:	e0b4      	b.n	8001a8e <__aeabi_dsub+0x1aa>
 8001924:	2401      	movs	r4, #1
 8001926:	4067      	eors	r7, r4
 8001928:	46bb      	mov	fp, r7
 800192a:	42bd      	cmp	r5, r7
 800192c:	d100      	bne.n	8001930 <__aeabi_dsub+0x4c>
 800192e:	e088      	b.n	8001a42 <__aeabi_dsub+0x15e>
 8001930:	1ab4      	subs	r4, r6, r2
 8001932:	46a4      	mov	ip, r4
 8001934:	2c00      	cmp	r4, #0
 8001936:	dc00      	bgt.n	800193a <__aeabi_dsub+0x56>
 8001938:	e0b2      	b.n	8001aa0 <__aeabi_dsub+0x1bc>
 800193a:	2a00      	cmp	r2, #0
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x5c>
 800193e:	e0c5      	b.n	8001acc <__aeabi_dsub+0x1e8>
 8001940:	4ab5      	ldr	r2, [pc, #724]	; (8001c18 <__aeabi_dsub+0x334>)
 8001942:	4296      	cmp	r6, r2
 8001944:	d100      	bne.n	8001948 <__aeabi_dsub+0x64>
 8001946:	e28b      	b.n	8001e60 <__aeabi_dsub+0x57c>
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	4311      	orrs	r1, r2
 800194e:	4662      	mov	r2, ip
 8001950:	2a38      	cmp	r2, #56	; 0x38
 8001952:	dd00      	ble.n	8001956 <__aeabi_dsub+0x72>
 8001954:	e1a1      	b.n	8001c9a <__aeabi_dsub+0x3b6>
 8001956:	2a1f      	cmp	r2, #31
 8001958:	dd00      	ble.n	800195c <__aeabi_dsub+0x78>
 800195a:	e216      	b.n	8001d8a <__aeabi_dsub+0x4a6>
 800195c:	2720      	movs	r7, #32
 800195e:	000c      	movs	r4, r1
 8001960:	1abf      	subs	r7, r7, r2
 8001962:	40bc      	lsls	r4, r7
 8001964:	0002      	movs	r2, r0
 8001966:	46a0      	mov	r8, r4
 8001968:	4664      	mov	r4, ip
 800196a:	40b8      	lsls	r0, r7
 800196c:	40e2      	lsrs	r2, r4
 800196e:	4644      	mov	r4, r8
 8001970:	4314      	orrs	r4, r2
 8001972:	0002      	movs	r2, r0
 8001974:	1e50      	subs	r0, r2, #1
 8001976:	4182      	sbcs	r2, r0
 8001978:	4660      	mov	r0, ip
 800197a:	40c1      	lsrs	r1, r0
 800197c:	4322      	orrs	r2, r4
 800197e:	1a5b      	subs	r3, r3, r1
 8001980:	4649      	mov	r1, r9
 8001982:	1a8c      	subs	r4, r1, r2
 8001984:	45a1      	cmp	r9, r4
 8001986:	4192      	sbcs	r2, r2
 8001988:	4252      	negs	r2, r2
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	4698      	mov	r8, r3
 800198e:	4643      	mov	r3, r8
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	d400      	bmi.n	8001996 <__aeabi_dsub+0xb2>
 8001994:	e117      	b.n	8001bc6 <__aeabi_dsub+0x2e2>
 8001996:	4643      	mov	r3, r8
 8001998:	025b      	lsls	r3, r3, #9
 800199a:	0a5b      	lsrs	r3, r3, #9
 800199c:	4698      	mov	r8, r3
 800199e:	4643      	mov	r3, r8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d100      	bne.n	80019a6 <__aeabi_dsub+0xc2>
 80019a4:	e16c      	b.n	8001c80 <__aeabi_dsub+0x39c>
 80019a6:	4640      	mov	r0, r8
 80019a8:	f000 fc20 	bl	80021ec <__clzsi2>
 80019ac:	0002      	movs	r2, r0
 80019ae:	3a08      	subs	r2, #8
 80019b0:	2120      	movs	r1, #32
 80019b2:	0020      	movs	r0, r4
 80019b4:	4643      	mov	r3, r8
 80019b6:	1a89      	subs	r1, r1, r2
 80019b8:	4093      	lsls	r3, r2
 80019ba:	40c8      	lsrs	r0, r1
 80019bc:	4094      	lsls	r4, r2
 80019be:	4303      	orrs	r3, r0
 80019c0:	4296      	cmp	r6, r2
 80019c2:	dd00      	ble.n	80019c6 <__aeabi_dsub+0xe2>
 80019c4:	e157      	b.n	8001c76 <__aeabi_dsub+0x392>
 80019c6:	1b96      	subs	r6, r2, r6
 80019c8:	1c71      	adds	r1, r6, #1
 80019ca:	291f      	cmp	r1, #31
 80019cc:	dd00      	ble.n	80019d0 <__aeabi_dsub+0xec>
 80019ce:	e1cb      	b.n	8001d68 <__aeabi_dsub+0x484>
 80019d0:	2220      	movs	r2, #32
 80019d2:	0018      	movs	r0, r3
 80019d4:	0026      	movs	r6, r4
 80019d6:	1a52      	subs	r2, r2, r1
 80019d8:	4094      	lsls	r4, r2
 80019da:	4090      	lsls	r0, r2
 80019dc:	40ce      	lsrs	r6, r1
 80019de:	40cb      	lsrs	r3, r1
 80019e0:	1e62      	subs	r2, r4, #1
 80019e2:	4194      	sbcs	r4, r2
 80019e4:	4330      	orrs	r0, r6
 80019e6:	4698      	mov	r8, r3
 80019e8:	2600      	movs	r6, #0
 80019ea:	4304      	orrs	r4, r0
 80019ec:	0763      	lsls	r3, r4, #29
 80019ee:	d009      	beq.n	8001a04 <__aeabi_dsub+0x120>
 80019f0:	230f      	movs	r3, #15
 80019f2:	4023      	ands	r3, r4
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d005      	beq.n	8001a04 <__aeabi_dsub+0x120>
 80019f8:	1d23      	adds	r3, r4, #4
 80019fa:	42a3      	cmp	r3, r4
 80019fc:	41a4      	sbcs	r4, r4
 80019fe:	4264      	negs	r4, r4
 8001a00:	44a0      	add	r8, r4
 8001a02:	001c      	movs	r4, r3
 8001a04:	4643      	mov	r3, r8
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	d400      	bmi.n	8001a0c <__aeabi_dsub+0x128>
 8001a0a:	e0df      	b.n	8001bcc <__aeabi_dsub+0x2e8>
 8001a0c:	4b82      	ldr	r3, [pc, #520]	; (8001c18 <__aeabi_dsub+0x334>)
 8001a0e:	3601      	adds	r6, #1
 8001a10:	429e      	cmp	r6, r3
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0x132>
 8001a14:	e0fb      	b.n	8001c0e <__aeabi_dsub+0x32a>
 8001a16:	4642      	mov	r2, r8
 8001a18:	4b80      	ldr	r3, [pc, #512]	; (8001c1c <__aeabi_dsub+0x338>)
 8001a1a:	08e4      	lsrs	r4, r4, #3
 8001a1c:	401a      	ands	r2, r3
 8001a1e:	0013      	movs	r3, r2
 8001a20:	0571      	lsls	r1, r6, #21
 8001a22:	0752      	lsls	r2, r2, #29
 8001a24:	025b      	lsls	r3, r3, #9
 8001a26:	4322      	orrs	r2, r4
 8001a28:	0b1b      	lsrs	r3, r3, #12
 8001a2a:	0d49      	lsrs	r1, r1, #21
 8001a2c:	0509      	lsls	r1, r1, #20
 8001a2e:	07ed      	lsls	r5, r5, #31
 8001a30:	4319      	orrs	r1, r3
 8001a32:	4329      	orrs	r1, r5
 8001a34:	0010      	movs	r0, r2
 8001a36:	bcf0      	pop	{r4, r5, r6, r7}
 8001a38:	46bb      	mov	fp, r7
 8001a3a:	46b2      	mov	sl, r6
 8001a3c:	46a9      	mov	r9, r5
 8001a3e:	46a0      	mov	r8, r4
 8001a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a42:	1ab4      	subs	r4, r6, r2
 8001a44:	46a4      	mov	ip, r4
 8001a46:	2c00      	cmp	r4, #0
 8001a48:	dd58      	ble.n	8001afc <__aeabi_dsub+0x218>
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x16c>
 8001a4e:	e09e      	b.n	8001b8e <__aeabi_dsub+0x2aa>
 8001a50:	4a71      	ldr	r2, [pc, #452]	; (8001c18 <__aeabi_dsub+0x334>)
 8001a52:	4296      	cmp	r6, r2
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dsub+0x174>
 8001a56:	e13b      	b.n	8001cd0 <__aeabi_dsub+0x3ec>
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	0412      	lsls	r2, r2, #16
 8001a5c:	4311      	orrs	r1, r2
 8001a5e:	4662      	mov	r2, ip
 8001a60:	2a38      	cmp	r2, #56	; 0x38
 8001a62:	dd00      	ble.n	8001a66 <__aeabi_dsub+0x182>
 8001a64:	e0c1      	b.n	8001bea <__aeabi_dsub+0x306>
 8001a66:	2a1f      	cmp	r2, #31
 8001a68:	dc00      	bgt.n	8001a6c <__aeabi_dsub+0x188>
 8001a6a:	e1bb      	b.n	8001de4 <__aeabi_dsub+0x500>
 8001a6c:	000c      	movs	r4, r1
 8001a6e:	3a20      	subs	r2, #32
 8001a70:	40d4      	lsrs	r4, r2
 8001a72:	0022      	movs	r2, r4
 8001a74:	4664      	mov	r4, ip
 8001a76:	2c20      	cmp	r4, #32
 8001a78:	d004      	beq.n	8001a84 <__aeabi_dsub+0x1a0>
 8001a7a:	2740      	movs	r7, #64	; 0x40
 8001a7c:	1b3f      	subs	r7, r7, r4
 8001a7e:	40b9      	lsls	r1, r7
 8001a80:	4308      	orrs	r0, r1
 8001a82:	4680      	mov	r8, r0
 8001a84:	4644      	mov	r4, r8
 8001a86:	1e61      	subs	r1, r4, #1
 8001a88:	418c      	sbcs	r4, r1
 8001a8a:	4314      	orrs	r4, r2
 8001a8c:	e0b1      	b.n	8001bf2 <__aeabi_dsub+0x30e>
 8001a8e:	000c      	movs	r4, r1
 8001a90:	4304      	orrs	r4, r0
 8001a92:	d02a      	beq.n	8001aea <__aeabi_dsub+0x206>
 8001a94:	46bb      	mov	fp, r7
 8001a96:	42bd      	cmp	r5, r7
 8001a98:	d02d      	beq.n	8001af6 <__aeabi_dsub+0x212>
 8001a9a:	4c61      	ldr	r4, [pc, #388]	; (8001c20 <__aeabi_dsub+0x33c>)
 8001a9c:	46a4      	mov	ip, r4
 8001a9e:	44b4      	add	ip, r6
 8001aa0:	4664      	mov	r4, ip
 8001aa2:	2c00      	cmp	r4, #0
 8001aa4:	d05c      	beq.n	8001b60 <__aeabi_dsub+0x27c>
 8001aa6:	1b94      	subs	r4, r2, r6
 8001aa8:	46a4      	mov	ip, r4
 8001aaa:	2e00      	cmp	r6, #0
 8001aac:	d000      	beq.n	8001ab0 <__aeabi_dsub+0x1cc>
 8001aae:	e115      	b.n	8001cdc <__aeabi_dsub+0x3f8>
 8001ab0:	464d      	mov	r5, r9
 8001ab2:	431d      	orrs	r5, r3
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dsub+0x1d4>
 8001ab6:	e1c3      	b.n	8001e40 <__aeabi_dsub+0x55c>
 8001ab8:	1e65      	subs	r5, r4, #1
 8001aba:	2c01      	cmp	r4, #1
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_dsub+0x1dc>
 8001abe:	e20c      	b.n	8001eda <__aeabi_dsub+0x5f6>
 8001ac0:	4e55      	ldr	r6, [pc, #340]	; (8001c18 <__aeabi_dsub+0x334>)
 8001ac2:	42b4      	cmp	r4, r6
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x1e4>
 8001ac6:	e1f8      	b.n	8001eba <__aeabi_dsub+0x5d6>
 8001ac8:	46ac      	mov	ip, r5
 8001aca:	e10e      	b.n	8001cea <__aeabi_dsub+0x406>
 8001acc:	000a      	movs	r2, r1
 8001ace:	4302      	orrs	r2, r0
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x1f0>
 8001ad2:	e136      	b.n	8001d42 <__aeabi_dsub+0x45e>
 8001ad4:	0022      	movs	r2, r4
 8001ad6:	3a01      	subs	r2, #1
 8001ad8:	2c01      	cmp	r4, #1
 8001ada:	d100      	bne.n	8001ade <__aeabi_dsub+0x1fa>
 8001adc:	e1c6      	b.n	8001e6c <__aeabi_dsub+0x588>
 8001ade:	4c4e      	ldr	r4, [pc, #312]	; (8001c18 <__aeabi_dsub+0x334>)
 8001ae0:	45a4      	cmp	ip, r4
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dsub+0x202>
 8001ae4:	e0f4      	b.n	8001cd0 <__aeabi_dsub+0x3ec>
 8001ae6:	4694      	mov	ip, r2
 8001ae8:	e731      	b.n	800194e <__aeabi_dsub+0x6a>
 8001aea:	2401      	movs	r4, #1
 8001aec:	4067      	eors	r7, r4
 8001aee:	46bb      	mov	fp, r7
 8001af0:	42bd      	cmp	r5, r7
 8001af2:	d000      	beq.n	8001af6 <__aeabi_dsub+0x212>
 8001af4:	e71c      	b.n	8001930 <__aeabi_dsub+0x4c>
 8001af6:	4c4a      	ldr	r4, [pc, #296]	; (8001c20 <__aeabi_dsub+0x33c>)
 8001af8:	46a4      	mov	ip, r4
 8001afa:	44b4      	add	ip, r6
 8001afc:	4664      	mov	r4, ip
 8001afe:	2c00      	cmp	r4, #0
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x220>
 8001b02:	e0cf      	b.n	8001ca4 <__aeabi_dsub+0x3c0>
 8001b04:	1b94      	subs	r4, r2, r6
 8001b06:	46a4      	mov	ip, r4
 8001b08:	2e00      	cmp	r6, #0
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_dsub+0x22a>
 8001b0c:	e15c      	b.n	8001dc8 <__aeabi_dsub+0x4e4>
 8001b0e:	4e42      	ldr	r6, [pc, #264]	; (8001c18 <__aeabi_dsub+0x334>)
 8001b10:	42b2      	cmp	r2, r6
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x232>
 8001b14:	e1ec      	b.n	8001ef0 <__aeabi_dsub+0x60c>
 8001b16:	2680      	movs	r6, #128	; 0x80
 8001b18:	0436      	lsls	r6, r6, #16
 8001b1a:	4333      	orrs	r3, r6
 8001b1c:	4664      	mov	r4, ip
 8001b1e:	2c38      	cmp	r4, #56	; 0x38
 8001b20:	dd00      	ble.n	8001b24 <__aeabi_dsub+0x240>
 8001b22:	e1b3      	b.n	8001e8c <__aeabi_dsub+0x5a8>
 8001b24:	2c1f      	cmp	r4, #31
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dsub+0x246>
 8001b28:	e238      	b.n	8001f9c <__aeabi_dsub+0x6b8>
 8001b2a:	2620      	movs	r6, #32
 8001b2c:	1b36      	subs	r6, r6, r4
 8001b2e:	001c      	movs	r4, r3
 8001b30:	40b4      	lsls	r4, r6
 8001b32:	464f      	mov	r7, r9
 8001b34:	46a0      	mov	r8, r4
 8001b36:	4664      	mov	r4, ip
 8001b38:	40e7      	lsrs	r7, r4
 8001b3a:	4644      	mov	r4, r8
 8001b3c:	433c      	orrs	r4, r7
 8001b3e:	464f      	mov	r7, r9
 8001b40:	40b7      	lsls	r7, r6
 8001b42:	003e      	movs	r6, r7
 8001b44:	1e77      	subs	r7, r6, #1
 8001b46:	41be      	sbcs	r6, r7
 8001b48:	4334      	orrs	r4, r6
 8001b4a:	4666      	mov	r6, ip
 8001b4c:	40f3      	lsrs	r3, r6
 8001b4e:	18c9      	adds	r1, r1, r3
 8001b50:	1824      	adds	r4, r4, r0
 8001b52:	4284      	cmp	r4, r0
 8001b54:	419b      	sbcs	r3, r3
 8001b56:	425b      	negs	r3, r3
 8001b58:	4698      	mov	r8, r3
 8001b5a:	0016      	movs	r6, r2
 8001b5c:	4488      	add	r8, r1
 8001b5e:	e04e      	b.n	8001bfe <__aeabi_dsub+0x31a>
 8001b60:	4a30      	ldr	r2, [pc, #192]	; (8001c24 <__aeabi_dsub+0x340>)
 8001b62:	1c74      	adds	r4, r6, #1
 8001b64:	4214      	tst	r4, r2
 8001b66:	d000      	beq.n	8001b6a <__aeabi_dsub+0x286>
 8001b68:	e0d6      	b.n	8001d18 <__aeabi_dsub+0x434>
 8001b6a:	464a      	mov	r2, r9
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	2e00      	cmp	r6, #0
 8001b70:	d000      	beq.n	8001b74 <__aeabi_dsub+0x290>
 8001b72:	e15b      	b.n	8001e2c <__aeabi_dsub+0x548>
 8001b74:	2a00      	cmp	r2, #0
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dsub+0x296>
 8001b78:	e1a5      	b.n	8001ec6 <__aeabi_dsub+0x5e2>
 8001b7a:	000a      	movs	r2, r1
 8001b7c:	4302      	orrs	r2, r0
 8001b7e:	d000      	beq.n	8001b82 <__aeabi_dsub+0x29e>
 8001b80:	e1bb      	b.n	8001efa <__aeabi_dsub+0x616>
 8001b82:	464a      	mov	r2, r9
 8001b84:	0759      	lsls	r1, r3, #29
 8001b86:	08d2      	lsrs	r2, r2, #3
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	08db      	lsrs	r3, r3, #3
 8001b8c:	e027      	b.n	8001bde <__aeabi_dsub+0x2fa>
 8001b8e:	000a      	movs	r2, r1
 8001b90:	4302      	orrs	r2, r0
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x2b2>
 8001b94:	e174      	b.n	8001e80 <__aeabi_dsub+0x59c>
 8001b96:	0022      	movs	r2, r4
 8001b98:	3a01      	subs	r2, #1
 8001b9a:	2c01      	cmp	r4, #1
 8001b9c:	d005      	beq.n	8001baa <__aeabi_dsub+0x2c6>
 8001b9e:	4c1e      	ldr	r4, [pc, #120]	; (8001c18 <__aeabi_dsub+0x334>)
 8001ba0:	45a4      	cmp	ip, r4
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dsub+0x2c2>
 8001ba4:	e094      	b.n	8001cd0 <__aeabi_dsub+0x3ec>
 8001ba6:	4694      	mov	ip, r2
 8001ba8:	e759      	b.n	8001a5e <__aeabi_dsub+0x17a>
 8001baa:	4448      	add	r0, r9
 8001bac:	4548      	cmp	r0, r9
 8001bae:	4192      	sbcs	r2, r2
 8001bb0:	185b      	adds	r3, r3, r1
 8001bb2:	4698      	mov	r8, r3
 8001bb4:	0004      	movs	r4, r0
 8001bb6:	4252      	negs	r2, r2
 8001bb8:	4490      	add	r8, r2
 8001bba:	4643      	mov	r3, r8
 8001bbc:	2602      	movs	r6, #2
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	d500      	bpl.n	8001bc4 <__aeabi_dsub+0x2e0>
 8001bc2:	e0c4      	b.n	8001d4e <__aeabi_dsub+0x46a>
 8001bc4:	3e01      	subs	r6, #1
 8001bc6:	0763      	lsls	r3, r4, #29
 8001bc8:	d000      	beq.n	8001bcc <__aeabi_dsub+0x2e8>
 8001bca:	e711      	b.n	80019f0 <__aeabi_dsub+0x10c>
 8001bcc:	4643      	mov	r3, r8
 8001bce:	46b4      	mov	ip, r6
 8001bd0:	0759      	lsls	r1, r3, #29
 8001bd2:	08e2      	lsrs	r2, r4, #3
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	08db      	lsrs	r3, r3, #3
 8001bd8:	490f      	ldr	r1, [pc, #60]	; (8001c18 <__aeabi_dsub+0x334>)
 8001bda:	458c      	cmp	ip, r1
 8001bdc:	d040      	beq.n	8001c60 <__aeabi_dsub+0x37c>
 8001bde:	4661      	mov	r1, ip
 8001be0:	031b      	lsls	r3, r3, #12
 8001be2:	0549      	lsls	r1, r1, #21
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	0d49      	lsrs	r1, r1, #21
 8001be8:	e720      	b.n	8001a2c <__aeabi_dsub+0x148>
 8001bea:	4301      	orrs	r1, r0
 8001bec:	000c      	movs	r4, r1
 8001bee:	1e61      	subs	r1, r4, #1
 8001bf0:	418c      	sbcs	r4, r1
 8001bf2:	444c      	add	r4, r9
 8001bf4:	454c      	cmp	r4, r9
 8001bf6:	4192      	sbcs	r2, r2
 8001bf8:	4252      	negs	r2, r2
 8001bfa:	4690      	mov	r8, r2
 8001bfc:	4498      	add	r8, r3
 8001bfe:	4643      	mov	r3, r8
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	d5e0      	bpl.n	8001bc6 <__aeabi_dsub+0x2e2>
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <__aeabi_dsub+0x334>)
 8001c06:	3601      	adds	r6, #1
 8001c08:	429e      	cmp	r6, r3
 8001c0a:	d000      	beq.n	8001c0e <__aeabi_dsub+0x32a>
 8001c0c:	e09f      	b.n	8001d4e <__aeabi_dsub+0x46a>
 8001c0e:	0031      	movs	r1, r6
 8001c10:	2300      	movs	r3, #0
 8001c12:	2200      	movs	r2, #0
 8001c14:	e70a      	b.n	8001a2c <__aeabi_dsub+0x148>
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	ff7fffff 	.word	0xff7fffff
 8001c20:	fffff801 	.word	0xfffff801
 8001c24:	000007fe 	.word	0x000007fe
 8001c28:	2a00      	cmp	r2, #0
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x34a>
 8001c2c:	e160      	b.n	8001ef0 <__aeabi_dsub+0x60c>
 8001c2e:	000a      	movs	r2, r1
 8001c30:	4302      	orrs	r2, r0
 8001c32:	d04d      	beq.n	8001cd0 <__aeabi_dsub+0x3ec>
 8001c34:	464a      	mov	r2, r9
 8001c36:	075c      	lsls	r4, r3, #29
 8001c38:	08d2      	lsrs	r2, r2, #3
 8001c3a:	4322      	orrs	r2, r4
 8001c3c:	2480      	movs	r4, #128	; 0x80
 8001c3e:	08db      	lsrs	r3, r3, #3
 8001c40:	0324      	lsls	r4, r4, #12
 8001c42:	4223      	tst	r3, r4
 8001c44:	d007      	beq.n	8001c56 <__aeabi_dsub+0x372>
 8001c46:	08ce      	lsrs	r6, r1, #3
 8001c48:	4226      	tst	r6, r4
 8001c4a:	d104      	bne.n	8001c56 <__aeabi_dsub+0x372>
 8001c4c:	465d      	mov	r5, fp
 8001c4e:	0033      	movs	r3, r6
 8001c50:	08c2      	lsrs	r2, r0, #3
 8001c52:	0749      	lsls	r1, r1, #29
 8001c54:	430a      	orrs	r2, r1
 8001c56:	0f51      	lsrs	r1, r2, #29
 8001c58:	00d2      	lsls	r2, r2, #3
 8001c5a:	08d2      	lsrs	r2, r2, #3
 8001c5c:	0749      	lsls	r1, r1, #29
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	0011      	movs	r1, r2
 8001c62:	4319      	orrs	r1, r3
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x384>
 8001c66:	e1c8      	b.n	8001ffa <__aeabi_dsub+0x716>
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	0309      	lsls	r1, r1, #12
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	031b      	lsls	r3, r3, #12
 8001c70:	49d5      	ldr	r1, [pc, #852]	; (8001fc8 <__aeabi_dsub+0x6e4>)
 8001c72:	0b1b      	lsrs	r3, r3, #12
 8001c74:	e6da      	b.n	8001a2c <__aeabi_dsub+0x148>
 8001c76:	49d5      	ldr	r1, [pc, #852]	; (8001fcc <__aeabi_dsub+0x6e8>)
 8001c78:	1ab6      	subs	r6, r6, r2
 8001c7a:	400b      	ands	r3, r1
 8001c7c:	4698      	mov	r8, r3
 8001c7e:	e6b5      	b.n	80019ec <__aeabi_dsub+0x108>
 8001c80:	0020      	movs	r0, r4
 8001c82:	f000 fab3 	bl	80021ec <__clzsi2>
 8001c86:	0002      	movs	r2, r0
 8001c88:	3218      	adds	r2, #24
 8001c8a:	2a1f      	cmp	r2, #31
 8001c8c:	dc00      	bgt.n	8001c90 <__aeabi_dsub+0x3ac>
 8001c8e:	e68f      	b.n	80019b0 <__aeabi_dsub+0xcc>
 8001c90:	0023      	movs	r3, r4
 8001c92:	3808      	subs	r0, #8
 8001c94:	4083      	lsls	r3, r0
 8001c96:	2400      	movs	r4, #0
 8001c98:	e692      	b.n	80019c0 <__aeabi_dsub+0xdc>
 8001c9a:	4308      	orrs	r0, r1
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	1e50      	subs	r0, r2, #1
 8001ca0:	4182      	sbcs	r2, r0
 8001ca2:	e66d      	b.n	8001980 <__aeabi_dsub+0x9c>
 8001ca4:	4cca      	ldr	r4, [pc, #808]	; (8001fd0 <__aeabi_dsub+0x6ec>)
 8001ca6:	1c72      	adds	r2, r6, #1
 8001ca8:	4222      	tst	r2, r4
 8001caa:	d000      	beq.n	8001cae <__aeabi_dsub+0x3ca>
 8001cac:	e0ad      	b.n	8001e0a <__aeabi_dsub+0x526>
 8001cae:	464a      	mov	r2, r9
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	2e00      	cmp	r6, #0
 8001cb4:	d1b8      	bne.n	8001c28 <__aeabi_dsub+0x344>
 8001cb6:	2a00      	cmp	r2, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0x3d8>
 8001cba:	e158      	b.n	8001f6e <__aeabi_dsub+0x68a>
 8001cbc:	000a      	movs	r2, r1
 8001cbe:	4302      	orrs	r2, r0
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dsub+0x3e0>
 8001cc2:	e159      	b.n	8001f78 <__aeabi_dsub+0x694>
 8001cc4:	464a      	mov	r2, r9
 8001cc6:	0759      	lsls	r1, r3, #29
 8001cc8:	08d2      	lsrs	r2, r2, #3
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	08db      	lsrs	r3, r3, #3
 8001cce:	e786      	b.n	8001bde <__aeabi_dsub+0x2fa>
 8001cd0:	464a      	mov	r2, r9
 8001cd2:	0759      	lsls	r1, r3, #29
 8001cd4:	08d2      	lsrs	r2, r2, #3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	e7c1      	b.n	8001c60 <__aeabi_dsub+0x37c>
 8001cdc:	4dba      	ldr	r5, [pc, #744]	; (8001fc8 <__aeabi_dsub+0x6e4>)
 8001cde:	42aa      	cmp	r2, r5
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x400>
 8001ce2:	e11e      	b.n	8001f22 <__aeabi_dsub+0x63e>
 8001ce4:	2580      	movs	r5, #128	; 0x80
 8001ce6:	042d      	lsls	r5, r5, #16
 8001ce8:	432b      	orrs	r3, r5
 8001cea:	4664      	mov	r4, ip
 8001cec:	2c38      	cmp	r4, #56	; 0x38
 8001cee:	dc5d      	bgt.n	8001dac <__aeabi_dsub+0x4c8>
 8001cf0:	2c1f      	cmp	r4, #31
 8001cf2:	dd00      	ble.n	8001cf6 <__aeabi_dsub+0x412>
 8001cf4:	e0d0      	b.n	8001e98 <__aeabi_dsub+0x5b4>
 8001cf6:	2520      	movs	r5, #32
 8001cf8:	4667      	mov	r7, ip
 8001cfa:	1b2d      	subs	r5, r5, r4
 8001cfc:	464e      	mov	r6, r9
 8001cfe:	001c      	movs	r4, r3
 8001d00:	40fe      	lsrs	r6, r7
 8001d02:	40ac      	lsls	r4, r5
 8001d04:	4334      	orrs	r4, r6
 8001d06:	464e      	mov	r6, r9
 8001d08:	40ae      	lsls	r6, r5
 8001d0a:	0035      	movs	r5, r6
 8001d0c:	40fb      	lsrs	r3, r7
 8001d0e:	1e6e      	subs	r6, r5, #1
 8001d10:	41b5      	sbcs	r5, r6
 8001d12:	1ac9      	subs	r1, r1, r3
 8001d14:	432c      	orrs	r4, r5
 8001d16:	e04e      	b.n	8001db6 <__aeabi_dsub+0x4d2>
 8001d18:	464a      	mov	r2, r9
 8001d1a:	1a14      	subs	r4, r2, r0
 8001d1c:	45a1      	cmp	r9, r4
 8001d1e:	4192      	sbcs	r2, r2
 8001d20:	4252      	negs	r2, r2
 8001d22:	4690      	mov	r8, r2
 8001d24:	1a5f      	subs	r7, r3, r1
 8001d26:	003a      	movs	r2, r7
 8001d28:	4647      	mov	r7, r8
 8001d2a:	1bd2      	subs	r2, r2, r7
 8001d2c:	4690      	mov	r8, r2
 8001d2e:	0212      	lsls	r2, r2, #8
 8001d30:	d500      	bpl.n	8001d34 <__aeabi_dsub+0x450>
 8001d32:	e08b      	b.n	8001e4c <__aeabi_dsub+0x568>
 8001d34:	4642      	mov	r2, r8
 8001d36:	4322      	orrs	r2, r4
 8001d38:	d000      	beq.n	8001d3c <__aeabi_dsub+0x458>
 8001d3a:	e630      	b.n	800199e <__aeabi_dsub+0xba>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	2500      	movs	r5, #0
 8001d40:	e74d      	b.n	8001bde <__aeabi_dsub+0x2fa>
 8001d42:	464a      	mov	r2, r9
 8001d44:	0759      	lsls	r1, r3, #29
 8001d46:	08d2      	lsrs	r2, r2, #3
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	08db      	lsrs	r3, r3, #3
 8001d4c:	e744      	b.n	8001bd8 <__aeabi_dsub+0x2f4>
 8001d4e:	4642      	mov	r2, r8
 8001d50:	4b9e      	ldr	r3, [pc, #632]	; (8001fcc <__aeabi_dsub+0x6e8>)
 8001d52:	0861      	lsrs	r1, r4, #1
 8001d54:	401a      	ands	r2, r3
 8001d56:	0013      	movs	r3, r2
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4014      	ands	r4, r2
 8001d5c:	430c      	orrs	r4, r1
 8001d5e:	07da      	lsls	r2, r3, #31
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	4698      	mov	r8, r3
 8001d64:	4314      	orrs	r4, r2
 8001d66:	e641      	b.n	80019ec <__aeabi_dsub+0x108>
 8001d68:	001a      	movs	r2, r3
 8001d6a:	3e1f      	subs	r6, #31
 8001d6c:	40f2      	lsrs	r2, r6
 8001d6e:	0016      	movs	r6, r2
 8001d70:	2920      	cmp	r1, #32
 8001d72:	d003      	beq.n	8001d7c <__aeabi_dsub+0x498>
 8001d74:	2240      	movs	r2, #64	; 0x40
 8001d76:	1a51      	subs	r1, r2, r1
 8001d78:	408b      	lsls	r3, r1
 8001d7a:	431c      	orrs	r4, r3
 8001d7c:	1e62      	subs	r2, r4, #1
 8001d7e:	4194      	sbcs	r4, r2
 8001d80:	2300      	movs	r3, #0
 8001d82:	4334      	orrs	r4, r6
 8001d84:	4698      	mov	r8, r3
 8001d86:	2600      	movs	r6, #0
 8001d88:	e71d      	b.n	8001bc6 <__aeabi_dsub+0x2e2>
 8001d8a:	000c      	movs	r4, r1
 8001d8c:	3a20      	subs	r2, #32
 8001d8e:	40d4      	lsrs	r4, r2
 8001d90:	0022      	movs	r2, r4
 8001d92:	4664      	mov	r4, ip
 8001d94:	2c20      	cmp	r4, #32
 8001d96:	d004      	beq.n	8001da2 <__aeabi_dsub+0x4be>
 8001d98:	2740      	movs	r7, #64	; 0x40
 8001d9a:	1b3f      	subs	r7, r7, r4
 8001d9c:	40b9      	lsls	r1, r7
 8001d9e:	4308      	orrs	r0, r1
 8001da0:	4680      	mov	r8, r0
 8001da2:	4644      	mov	r4, r8
 8001da4:	1e61      	subs	r1, r4, #1
 8001da6:	418c      	sbcs	r4, r1
 8001da8:	4322      	orrs	r2, r4
 8001daa:	e5e9      	b.n	8001980 <__aeabi_dsub+0x9c>
 8001dac:	464c      	mov	r4, r9
 8001dae:	4323      	orrs	r3, r4
 8001db0:	001c      	movs	r4, r3
 8001db2:	1e63      	subs	r3, r4, #1
 8001db4:	419c      	sbcs	r4, r3
 8001db6:	1b04      	subs	r4, r0, r4
 8001db8:	42a0      	cmp	r0, r4
 8001dba:	419b      	sbcs	r3, r3
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	1acb      	subs	r3, r1, r3
 8001dc0:	4698      	mov	r8, r3
 8001dc2:	465d      	mov	r5, fp
 8001dc4:	0016      	movs	r6, r2
 8001dc6:	e5e2      	b.n	800198e <__aeabi_dsub+0xaa>
 8001dc8:	464e      	mov	r6, r9
 8001dca:	431e      	orrs	r6, r3
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x4ec>
 8001dce:	e0ae      	b.n	8001f2e <__aeabi_dsub+0x64a>
 8001dd0:	1e66      	subs	r6, r4, #1
 8001dd2:	2c01      	cmp	r4, #1
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x4f4>
 8001dd6:	e0fd      	b.n	8001fd4 <__aeabi_dsub+0x6f0>
 8001dd8:	4f7b      	ldr	r7, [pc, #492]	; (8001fc8 <__aeabi_dsub+0x6e4>)
 8001dda:	42bc      	cmp	r4, r7
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dsub+0x4fc>
 8001dde:	e107      	b.n	8001ff0 <__aeabi_dsub+0x70c>
 8001de0:	46b4      	mov	ip, r6
 8001de2:	e69b      	b.n	8001b1c <__aeabi_dsub+0x238>
 8001de4:	4664      	mov	r4, ip
 8001de6:	2220      	movs	r2, #32
 8001de8:	1b12      	subs	r2, r2, r4
 8001dea:	000c      	movs	r4, r1
 8001dec:	4094      	lsls	r4, r2
 8001dee:	0007      	movs	r7, r0
 8001df0:	4090      	lsls	r0, r2
 8001df2:	46a0      	mov	r8, r4
 8001df4:	4664      	mov	r4, ip
 8001df6:	1e42      	subs	r2, r0, #1
 8001df8:	4190      	sbcs	r0, r2
 8001dfa:	4662      	mov	r2, ip
 8001dfc:	40e7      	lsrs	r7, r4
 8001dfe:	4644      	mov	r4, r8
 8001e00:	40d1      	lsrs	r1, r2
 8001e02:	433c      	orrs	r4, r7
 8001e04:	4304      	orrs	r4, r0
 8001e06:	185b      	adds	r3, r3, r1
 8001e08:	e6f3      	b.n	8001bf2 <__aeabi_dsub+0x30e>
 8001e0a:	4c6f      	ldr	r4, [pc, #444]	; (8001fc8 <__aeabi_dsub+0x6e4>)
 8001e0c:	42a2      	cmp	r2, r4
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_dsub+0x52e>
 8001e10:	e0d5      	b.n	8001fbe <__aeabi_dsub+0x6da>
 8001e12:	4448      	add	r0, r9
 8001e14:	185b      	adds	r3, r3, r1
 8001e16:	4548      	cmp	r0, r9
 8001e18:	4189      	sbcs	r1, r1
 8001e1a:	4249      	negs	r1, r1
 8001e1c:	185b      	adds	r3, r3, r1
 8001e1e:	07dc      	lsls	r4, r3, #31
 8001e20:	0840      	lsrs	r0, r0, #1
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	4698      	mov	r8, r3
 8001e26:	0016      	movs	r6, r2
 8001e28:	4304      	orrs	r4, r0
 8001e2a:	e6cc      	b.n	8001bc6 <__aeabi_dsub+0x2e2>
 8001e2c:	2a00      	cmp	r2, #0
 8001e2e:	d000      	beq.n	8001e32 <__aeabi_dsub+0x54e>
 8001e30:	e082      	b.n	8001f38 <__aeabi_dsub+0x654>
 8001e32:	000a      	movs	r2, r1
 8001e34:	4302      	orrs	r2, r0
 8001e36:	d140      	bne.n	8001eba <__aeabi_dsub+0x5d6>
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	2500      	movs	r5, #0
 8001e3c:	031b      	lsls	r3, r3, #12
 8001e3e:	e713      	b.n	8001c68 <__aeabi_dsub+0x384>
 8001e40:	074b      	lsls	r3, r1, #29
 8001e42:	08c2      	lsrs	r2, r0, #3
 8001e44:	431a      	orrs	r2, r3
 8001e46:	465d      	mov	r5, fp
 8001e48:	08cb      	lsrs	r3, r1, #3
 8001e4a:	e6c5      	b.n	8001bd8 <__aeabi_dsub+0x2f4>
 8001e4c:	464a      	mov	r2, r9
 8001e4e:	1a84      	subs	r4, r0, r2
 8001e50:	42a0      	cmp	r0, r4
 8001e52:	4192      	sbcs	r2, r2
 8001e54:	1acb      	subs	r3, r1, r3
 8001e56:	4252      	negs	r2, r2
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	4698      	mov	r8, r3
 8001e5c:	465d      	mov	r5, fp
 8001e5e:	e59e      	b.n	800199e <__aeabi_dsub+0xba>
 8001e60:	464a      	mov	r2, r9
 8001e62:	0759      	lsls	r1, r3, #29
 8001e64:	08d2      	lsrs	r2, r2, #3
 8001e66:	430a      	orrs	r2, r1
 8001e68:	08db      	lsrs	r3, r3, #3
 8001e6a:	e6f9      	b.n	8001c60 <__aeabi_dsub+0x37c>
 8001e6c:	464a      	mov	r2, r9
 8001e6e:	1a14      	subs	r4, r2, r0
 8001e70:	45a1      	cmp	r9, r4
 8001e72:	4192      	sbcs	r2, r2
 8001e74:	1a5b      	subs	r3, r3, r1
 8001e76:	4252      	negs	r2, r2
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	4698      	mov	r8, r3
 8001e7c:	2601      	movs	r6, #1
 8001e7e:	e586      	b.n	800198e <__aeabi_dsub+0xaa>
 8001e80:	464a      	mov	r2, r9
 8001e82:	0759      	lsls	r1, r3, #29
 8001e84:	08d2      	lsrs	r2, r2, #3
 8001e86:	430a      	orrs	r2, r1
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	e6a5      	b.n	8001bd8 <__aeabi_dsub+0x2f4>
 8001e8c:	464c      	mov	r4, r9
 8001e8e:	4323      	orrs	r3, r4
 8001e90:	001c      	movs	r4, r3
 8001e92:	1e63      	subs	r3, r4, #1
 8001e94:	419c      	sbcs	r4, r3
 8001e96:	e65b      	b.n	8001b50 <__aeabi_dsub+0x26c>
 8001e98:	4665      	mov	r5, ip
 8001e9a:	001e      	movs	r6, r3
 8001e9c:	3d20      	subs	r5, #32
 8001e9e:	40ee      	lsrs	r6, r5
 8001ea0:	2c20      	cmp	r4, #32
 8001ea2:	d005      	beq.n	8001eb0 <__aeabi_dsub+0x5cc>
 8001ea4:	2540      	movs	r5, #64	; 0x40
 8001ea6:	1b2d      	subs	r5, r5, r4
 8001ea8:	40ab      	lsls	r3, r5
 8001eaa:	464c      	mov	r4, r9
 8001eac:	431c      	orrs	r4, r3
 8001eae:	46a2      	mov	sl, r4
 8001eb0:	4654      	mov	r4, sl
 8001eb2:	1e63      	subs	r3, r4, #1
 8001eb4:	419c      	sbcs	r4, r3
 8001eb6:	4334      	orrs	r4, r6
 8001eb8:	e77d      	b.n	8001db6 <__aeabi_dsub+0x4d2>
 8001eba:	074b      	lsls	r3, r1, #29
 8001ebc:	08c2      	lsrs	r2, r0, #3
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	465d      	mov	r5, fp
 8001ec2:	08cb      	lsrs	r3, r1, #3
 8001ec4:	e6cc      	b.n	8001c60 <__aeabi_dsub+0x37c>
 8001ec6:	000a      	movs	r2, r1
 8001ec8:	4302      	orrs	r2, r0
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x5ea>
 8001ecc:	e736      	b.n	8001d3c <__aeabi_dsub+0x458>
 8001ece:	074b      	lsls	r3, r1, #29
 8001ed0:	08c2      	lsrs	r2, r0, #3
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	465d      	mov	r5, fp
 8001ed6:	08cb      	lsrs	r3, r1, #3
 8001ed8:	e681      	b.n	8001bde <__aeabi_dsub+0x2fa>
 8001eda:	464a      	mov	r2, r9
 8001edc:	1a84      	subs	r4, r0, r2
 8001ede:	42a0      	cmp	r0, r4
 8001ee0:	4192      	sbcs	r2, r2
 8001ee2:	1acb      	subs	r3, r1, r3
 8001ee4:	4252      	negs	r2, r2
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	4698      	mov	r8, r3
 8001eea:	465d      	mov	r5, fp
 8001eec:	2601      	movs	r6, #1
 8001eee:	e54e      	b.n	800198e <__aeabi_dsub+0xaa>
 8001ef0:	074b      	lsls	r3, r1, #29
 8001ef2:	08c2      	lsrs	r2, r0, #3
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	08cb      	lsrs	r3, r1, #3
 8001ef8:	e6b2      	b.n	8001c60 <__aeabi_dsub+0x37c>
 8001efa:	464a      	mov	r2, r9
 8001efc:	1a14      	subs	r4, r2, r0
 8001efe:	45a1      	cmp	r9, r4
 8001f00:	4192      	sbcs	r2, r2
 8001f02:	1a5f      	subs	r7, r3, r1
 8001f04:	4252      	negs	r2, r2
 8001f06:	1aba      	subs	r2, r7, r2
 8001f08:	4690      	mov	r8, r2
 8001f0a:	0212      	lsls	r2, r2, #8
 8001f0c:	d56b      	bpl.n	8001fe6 <__aeabi_dsub+0x702>
 8001f0e:	464a      	mov	r2, r9
 8001f10:	1a84      	subs	r4, r0, r2
 8001f12:	42a0      	cmp	r0, r4
 8001f14:	4192      	sbcs	r2, r2
 8001f16:	1acb      	subs	r3, r1, r3
 8001f18:	4252      	negs	r2, r2
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	4698      	mov	r8, r3
 8001f1e:	465d      	mov	r5, fp
 8001f20:	e564      	b.n	80019ec <__aeabi_dsub+0x108>
 8001f22:	074b      	lsls	r3, r1, #29
 8001f24:	08c2      	lsrs	r2, r0, #3
 8001f26:	431a      	orrs	r2, r3
 8001f28:	465d      	mov	r5, fp
 8001f2a:	08cb      	lsrs	r3, r1, #3
 8001f2c:	e698      	b.n	8001c60 <__aeabi_dsub+0x37c>
 8001f2e:	074b      	lsls	r3, r1, #29
 8001f30:	08c2      	lsrs	r2, r0, #3
 8001f32:	431a      	orrs	r2, r3
 8001f34:	08cb      	lsrs	r3, r1, #3
 8001f36:	e64f      	b.n	8001bd8 <__aeabi_dsub+0x2f4>
 8001f38:	000a      	movs	r2, r1
 8001f3a:	4302      	orrs	r2, r0
 8001f3c:	d090      	beq.n	8001e60 <__aeabi_dsub+0x57c>
 8001f3e:	464a      	mov	r2, r9
 8001f40:	075c      	lsls	r4, r3, #29
 8001f42:	08d2      	lsrs	r2, r2, #3
 8001f44:	4314      	orrs	r4, r2
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	0312      	lsls	r2, r2, #12
 8001f4c:	4213      	tst	r3, r2
 8001f4e:	d008      	beq.n	8001f62 <__aeabi_dsub+0x67e>
 8001f50:	08ce      	lsrs	r6, r1, #3
 8001f52:	4216      	tst	r6, r2
 8001f54:	d105      	bne.n	8001f62 <__aeabi_dsub+0x67e>
 8001f56:	08c0      	lsrs	r0, r0, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4308      	orrs	r0, r1
 8001f5c:	0004      	movs	r4, r0
 8001f5e:	465d      	mov	r5, fp
 8001f60:	0033      	movs	r3, r6
 8001f62:	0f61      	lsrs	r1, r4, #29
 8001f64:	00e2      	lsls	r2, r4, #3
 8001f66:	0749      	lsls	r1, r1, #29
 8001f68:	08d2      	lsrs	r2, r2, #3
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	e678      	b.n	8001c60 <__aeabi_dsub+0x37c>
 8001f6e:	074b      	lsls	r3, r1, #29
 8001f70:	08c2      	lsrs	r2, r0, #3
 8001f72:	431a      	orrs	r2, r3
 8001f74:	08cb      	lsrs	r3, r1, #3
 8001f76:	e632      	b.n	8001bde <__aeabi_dsub+0x2fa>
 8001f78:	4448      	add	r0, r9
 8001f7a:	185b      	adds	r3, r3, r1
 8001f7c:	4548      	cmp	r0, r9
 8001f7e:	4192      	sbcs	r2, r2
 8001f80:	4698      	mov	r8, r3
 8001f82:	4252      	negs	r2, r2
 8001f84:	4490      	add	r8, r2
 8001f86:	4643      	mov	r3, r8
 8001f88:	0004      	movs	r4, r0
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	d400      	bmi.n	8001f90 <__aeabi_dsub+0x6ac>
 8001f8e:	e61a      	b.n	8001bc6 <__aeabi_dsub+0x2e2>
 8001f90:	4642      	mov	r2, r8
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <__aeabi_dsub+0x6e8>)
 8001f94:	2601      	movs	r6, #1
 8001f96:	401a      	ands	r2, r3
 8001f98:	4690      	mov	r8, r2
 8001f9a:	e614      	b.n	8001bc6 <__aeabi_dsub+0x2e2>
 8001f9c:	4666      	mov	r6, ip
 8001f9e:	001f      	movs	r7, r3
 8001fa0:	3e20      	subs	r6, #32
 8001fa2:	40f7      	lsrs	r7, r6
 8001fa4:	2c20      	cmp	r4, #32
 8001fa6:	d005      	beq.n	8001fb4 <__aeabi_dsub+0x6d0>
 8001fa8:	2640      	movs	r6, #64	; 0x40
 8001faa:	1b36      	subs	r6, r6, r4
 8001fac:	40b3      	lsls	r3, r6
 8001fae:	464c      	mov	r4, r9
 8001fb0:	431c      	orrs	r4, r3
 8001fb2:	46a2      	mov	sl, r4
 8001fb4:	4654      	mov	r4, sl
 8001fb6:	1e63      	subs	r3, r4, #1
 8001fb8:	419c      	sbcs	r4, r3
 8001fba:	433c      	orrs	r4, r7
 8001fbc:	e5c8      	b.n	8001b50 <__aeabi_dsub+0x26c>
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e532      	b.n	8001a2c <__aeabi_dsub+0x148>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	000007ff 	.word	0x000007ff
 8001fcc:	ff7fffff 	.word	0xff7fffff
 8001fd0:	000007fe 	.word	0x000007fe
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	1814      	adds	r4, r2, r0
 8001fd8:	4284      	cmp	r4, r0
 8001fda:	4192      	sbcs	r2, r2
 8001fdc:	185b      	adds	r3, r3, r1
 8001fde:	4698      	mov	r8, r3
 8001fe0:	4252      	negs	r2, r2
 8001fe2:	4490      	add	r8, r2
 8001fe4:	e5e9      	b.n	8001bba <__aeabi_dsub+0x2d6>
 8001fe6:	4642      	mov	r2, r8
 8001fe8:	4322      	orrs	r2, r4
 8001fea:	d100      	bne.n	8001fee <__aeabi_dsub+0x70a>
 8001fec:	e6a6      	b.n	8001d3c <__aeabi_dsub+0x458>
 8001fee:	e5ea      	b.n	8001bc6 <__aeabi_dsub+0x2e2>
 8001ff0:	074b      	lsls	r3, r1, #29
 8001ff2:	08c2      	lsrs	r2, r0, #3
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	08cb      	lsrs	r3, r1, #3
 8001ff8:	e632      	b.n	8001c60 <__aeabi_dsub+0x37c>
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	4901      	ldr	r1, [pc, #4]	; (8002004 <__aeabi_dsub+0x720>)
 8001ffe:	0013      	movs	r3, r2
 8002000:	e514      	b.n	8001a2c <__aeabi_dsub+0x148>
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	000007ff 	.word	0x000007ff

08002008 <__aeabi_dcmpun>:
 8002008:	b570      	push	{r4, r5, r6, lr}
 800200a:	0005      	movs	r5, r0
 800200c:	480c      	ldr	r0, [pc, #48]	; (8002040 <__aeabi_dcmpun+0x38>)
 800200e:	030c      	lsls	r4, r1, #12
 8002010:	0016      	movs	r6, r2
 8002012:	0049      	lsls	r1, r1, #1
 8002014:	031a      	lsls	r2, r3, #12
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	0b24      	lsrs	r4, r4, #12
 800201a:	0d49      	lsrs	r1, r1, #21
 800201c:	0b12      	lsrs	r2, r2, #12
 800201e:	0d5b      	lsrs	r3, r3, #21
 8002020:	4281      	cmp	r1, r0
 8002022:	d008      	beq.n	8002036 <__aeabi_dcmpun+0x2e>
 8002024:	4906      	ldr	r1, [pc, #24]	; (8002040 <__aeabi_dcmpun+0x38>)
 8002026:	2000      	movs	r0, #0
 8002028:	428b      	cmp	r3, r1
 800202a:	d103      	bne.n	8002034 <__aeabi_dcmpun+0x2c>
 800202c:	4332      	orrs	r2, r6
 800202e:	0010      	movs	r0, r2
 8002030:	1e42      	subs	r2, r0, #1
 8002032:	4190      	sbcs	r0, r2
 8002034:	bd70      	pop	{r4, r5, r6, pc}
 8002036:	2001      	movs	r0, #1
 8002038:	432c      	orrs	r4, r5
 800203a:	d1fb      	bne.n	8002034 <__aeabi_dcmpun+0x2c>
 800203c:	e7f2      	b.n	8002024 <__aeabi_dcmpun+0x1c>
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	000007ff 	.word	0x000007ff

08002044 <__aeabi_d2iz>:
 8002044:	000a      	movs	r2, r1
 8002046:	b530      	push	{r4, r5, lr}
 8002048:	4c13      	ldr	r4, [pc, #76]	; (8002098 <__aeabi_d2iz+0x54>)
 800204a:	0053      	lsls	r3, r2, #1
 800204c:	0309      	lsls	r1, r1, #12
 800204e:	0005      	movs	r5, r0
 8002050:	0b09      	lsrs	r1, r1, #12
 8002052:	2000      	movs	r0, #0
 8002054:	0d5b      	lsrs	r3, r3, #21
 8002056:	0fd2      	lsrs	r2, r2, #31
 8002058:	42a3      	cmp	r3, r4
 800205a:	dd04      	ble.n	8002066 <__aeabi_d2iz+0x22>
 800205c:	480f      	ldr	r0, [pc, #60]	; (800209c <__aeabi_d2iz+0x58>)
 800205e:	4283      	cmp	r3, r0
 8002060:	dd02      	ble.n	8002068 <__aeabi_d2iz+0x24>
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <__aeabi_d2iz+0x5c>)
 8002064:	18d0      	adds	r0, r2, r3
 8002066:	bd30      	pop	{r4, r5, pc}
 8002068:	2080      	movs	r0, #128	; 0x80
 800206a:	0340      	lsls	r0, r0, #13
 800206c:	4301      	orrs	r1, r0
 800206e:	480d      	ldr	r0, [pc, #52]	; (80020a4 <__aeabi_d2iz+0x60>)
 8002070:	1ac0      	subs	r0, r0, r3
 8002072:	281f      	cmp	r0, #31
 8002074:	dd08      	ble.n	8002088 <__aeabi_d2iz+0x44>
 8002076:	480c      	ldr	r0, [pc, #48]	; (80020a8 <__aeabi_d2iz+0x64>)
 8002078:	1ac3      	subs	r3, r0, r3
 800207a:	40d9      	lsrs	r1, r3
 800207c:	000b      	movs	r3, r1
 800207e:	4258      	negs	r0, r3
 8002080:	2a00      	cmp	r2, #0
 8002082:	d1f0      	bne.n	8002066 <__aeabi_d2iz+0x22>
 8002084:	0018      	movs	r0, r3
 8002086:	e7ee      	b.n	8002066 <__aeabi_d2iz+0x22>
 8002088:	4c08      	ldr	r4, [pc, #32]	; (80020ac <__aeabi_d2iz+0x68>)
 800208a:	40c5      	lsrs	r5, r0
 800208c:	46a4      	mov	ip, r4
 800208e:	4463      	add	r3, ip
 8002090:	4099      	lsls	r1, r3
 8002092:	000b      	movs	r3, r1
 8002094:	432b      	orrs	r3, r5
 8002096:	e7f2      	b.n	800207e <__aeabi_d2iz+0x3a>
 8002098:	000003fe 	.word	0x000003fe
 800209c:	0000041d 	.word	0x0000041d
 80020a0:	7fffffff 	.word	0x7fffffff
 80020a4:	00000433 	.word	0x00000433
 80020a8:	00000413 	.word	0x00000413
 80020ac:	fffffbed 	.word	0xfffffbed

080020b0 <__aeabi_i2d>:
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d016      	beq.n	80020e4 <__aeabi_i2d+0x34>
 80020b6:	17c3      	asrs	r3, r0, #31
 80020b8:	18c5      	adds	r5, r0, r3
 80020ba:	405d      	eors	r5, r3
 80020bc:	0fc4      	lsrs	r4, r0, #31
 80020be:	0028      	movs	r0, r5
 80020c0:	f000 f894 	bl	80021ec <__clzsi2>
 80020c4:	4a11      	ldr	r2, [pc, #68]	; (800210c <__aeabi_i2d+0x5c>)
 80020c6:	1a12      	subs	r2, r2, r0
 80020c8:	280a      	cmp	r0, #10
 80020ca:	dc16      	bgt.n	80020fa <__aeabi_i2d+0x4a>
 80020cc:	0003      	movs	r3, r0
 80020ce:	002e      	movs	r6, r5
 80020d0:	3315      	adds	r3, #21
 80020d2:	409e      	lsls	r6, r3
 80020d4:	230b      	movs	r3, #11
 80020d6:	1a18      	subs	r0, r3, r0
 80020d8:	40c5      	lsrs	r5, r0
 80020da:	0553      	lsls	r3, r2, #21
 80020dc:	032d      	lsls	r5, r5, #12
 80020de:	0b2d      	lsrs	r5, r5, #12
 80020e0:	0d5b      	lsrs	r3, r3, #21
 80020e2:	e003      	b.n	80020ec <__aeabi_i2d+0x3c>
 80020e4:	2400      	movs	r4, #0
 80020e6:	2300      	movs	r3, #0
 80020e8:	2500      	movs	r5, #0
 80020ea:	2600      	movs	r6, #0
 80020ec:	051b      	lsls	r3, r3, #20
 80020ee:	432b      	orrs	r3, r5
 80020f0:	07e4      	lsls	r4, r4, #31
 80020f2:	4323      	orrs	r3, r4
 80020f4:	0030      	movs	r0, r6
 80020f6:	0019      	movs	r1, r3
 80020f8:	bd70      	pop	{r4, r5, r6, pc}
 80020fa:	380b      	subs	r0, #11
 80020fc:	4085      	lsls	r5, r0
 80020fe:	0553      	lsls	r3, r2, #21
 8002100:	032d      	lsls	r5, r5, #12
 8002102:	2600      	movs	r6, #0
 8002104:	0b2d      	lsrs	r5, r5, #12
 8002106:	0d5b      	lsrs	r3, r3, #21
 8002108:	e7f0      	b.n	80020ec <__aeabi_i2d+0x3c>
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	0000041e 	.word	0x0000041e

08002110 <__aeabi_ui2d>:
 8002110:	b510      	push	{r4, lr}
 8002112:	1e04      	subs	r4, r0, #0
 8002114:	d010      	beq.n	8002138 <__aeabi_ui2d+0x28>
 8002116:	f000 f869 	bl	80021ec <__clzsi2>
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <__aeabi_ui2d+0x48>)
 800211c:	1a1b      	subs	r3, r3, r0
 800211e:	280a      	cmp	r0, #10
 8002120:	dc11      	bgt.n	8002146 <__aeabi_ui2d+0x36>
 8002122:	220b      	movs	r2, #11
 8002124:	0021      	movs	r1, r4
 8002126:	1a12      	subs	r2, r2, r0
 8002128:	40d1      	lsrs	r1, r2
 800212a:	3015      	adds	r0, #21
 800212c:	030a      	lsls	r2, r1, #12
 800212e:	055b      	lsls	r3, r3, #21
 8002130:	4084      	lsls	r4, r0
 8002132:	0b12      	lsrs	r2, r2, #12
 8002134:	0d5b      	lsrs	r3, r3, #21
 8002136:	e001      	b.n	800213c <__aeabi_ui2d+0x2c>
 8002138:	2300      	movs	r3, #0
 800213a:	2200      	movs	r2, #0
 800213c:	051b      	lsls	r3, r3, #20
 800213e:	4313      	orrs	r3, r2
 8002140:	0020      	movs	r0, r4
 8002142:	0019      	movs	r1, r3
 8002144:	bd10      	pop	{r4, pc}
 8002146:	0022      	movs	r2, r4
 8002148:	380b      	subs	r0, #11
 800214a:	4082      	lsls	r2, r0
 800214c:	055b      	lsls	r3, r3, #21
 800214e:	0312      	lsls	r2, r2, #12
 8002150:	2400      	movs	r4, #0
 8002152:	0b12      	lsrs	r2, r2, #12
 8002154:	0d5b      	lsrs	r3, r3, #21
 8002156:	e7f1      	b.n	800213c <__aeabi_ui2d+0x2c>
 8002158:	0000041e 	.word	0x0000041e

0800215c <__aeabi_f2d>:
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	0043      	lsls	r3, r0, #1
 8002160:	0246      	lsls	r6, r0, #9
 8002162:	0fc4      	lsrs	r4, r0, #31
 8002164:	20fe      	movs	r0, #254	; 0xfe
 8002166:	0e1b      	lsrs	r3, r3, #24
 8002168:	1c59      	adds	r1, r3, #1
 800216a:	0a75      	lsrs	r5, r6, #9
 800216c:	4208      	tst	r0, r1
 800216e:	d00c      	beq.n	800218a <__aeabi_f2d+0x2e>
 8002170:	22e0      	movs	r2, #224	; 0xe0
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	4694      	mov	ip, r2
 8002176:	076d      	lsls	r5, r5, #29
 8002178:	0b36      	lsrs	r6, r6, #12
 800217a:	4463      	add	r3, ip
 800217c:	051b      	lsls	r3, r3, #20
 800217e:	4333      	orrs	r3, r6
 8002180:	07e4      	lsls	r4, r4, #31
 8002182:	4323      	orrs	r3, r4
 8002184:	0028      	movs	r0, r5
 8002186:	0019      	movs	r1, r3
 8002188:	bd70      	pop	{r4, r5, r6, pc}
 800218a:	2b00      	cmp	r3, #0
 800218c:	d114      	bne.n	80021b8 <__aeabi_f2d+0x5c>
 800218e:	2d00      	cmp	r5, #0
 8002190:	d01b      	beq.n	80021ca <__aeabi_f2d+0x6e>
 8002192:	0028      	movs	r0, r5
 8002194:	f000 f82a 	bl	80021ec <__clzsi2>
 8002198:	280a      	cmp	r0, #10
 800219a:	dc1c      	bgt.n	80021d6 <__aeabi_f2d+0x7a>
 800219c:	230b      	movs	r3, #11
 800219e:	002a      	movs	r2, r5
 80021a0:	1a1b      	subs	r3, r3, r0
 80021a2:	40da      	lsrs	r2, r3
 80021a4:	0003      	movs	r3, r0
 80021a6:	3315      	adds	r3, #21
 80021a8:	409d      	lsls	r5, r3
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <__aeabi_f2d+0x88>)
 80021ac:	0312      	lsls	r2, r2, #12
 80021ae:	1a1b      	subs	r3, r3, r0
 80021b0:	055b      	lsls	r3, r3, #21
 80021b2:	0b16      	lsrs	r6, r2, #12
 80021b4:	0d5b      	lsrs	r3, r3, #21
 80021b6:	e7e1      	b.n	800217c <__aeabi_f2d+0x20>
 80021b8:	2d00      	cmp	r5, #0
 80021ba:	d009      	beq.n	80021d0 <__aeabi_f2d+0x74>
 80021bc:	0b32      	lsrs	r2, r6, #12
 80021be:	2680      	movs	r6, #128	; 0x80
 80021c0:	0336      	lsls	r6, r6, #12
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <__aeabi_f2d+0x8c>)
 80021c4:	076d      	lsls	r5, r5, #29
 80021c6:	4316      	orrs	r6, r2
 80021c8:	e7d8      	b.n	800217c <__aeabi_f2d+0x20>
 80021ca:	2300      	movs	r3, #0
 80021cc:	2600      	movs	r6, #0
 80021ce:	e7d5      	b.n	800217c <__aeabi_f2d+0x20>
 80021d0:	2600      	movs	r6, #0
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <__aeabi_f2d+0x8c>)
 80021d4:	e7d2      	b.n	800217c <__aeabi_f2d+0x20>
 80021d6:	0003      	movs	r3, r0
 80021d8:	002a      	movs	r2, r5
 80021da:	3b0b      	subs	r3, #11
 80021dc:	409a      	lsls	r2, r3
 80021de:	2500      	movs	r5, #0
 80021e0:	e7e3      	b.n	80021aa <__aeabi_f2d+0x4e>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	00000389 	.word	0x00000389
 80021e8:	000007ff 	.word	0x000007ff

080021ec <__clzsi2>:
 80021ec:	211c      	movs	r1, #28
 80021ee:	2301      	movs	r3, #1
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	4298      	cmp	r0, r3
 80021f4:	d301      	bcc.n	80021fa <__clzsi2+0xe>
 80021f6:	0c00      	lsrs	r0, r0, #16
 80021f8:	3910      	subs	r1, #16
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	4298      	cmp	r0, r3
 80021fe:	d301      	bcc.n	8002204 <__clzsi2+0x18>
 8002200:	0a00      	lsrs	r0, r0, #8
 8002202:	3908      	subs	r1, #8
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	4298      	cmp	r0, r3
 8002208:	d301      	bcc.n	800220e <__clzsi2+0x22>
 800220a:	0900      	lsrs	r0, r0, #4
 800220c:	3904      	subs	r1, #4
 800220e:	a202      	add	r2, pc, #8	; (adr r2, 8002218 <__clzsi2+0x2c>)
 8002210:	5c10      	ldrb	r0, [r2, r0]
 8002212:	1840      	adds	r0, r0, r1
 8002214:	4770      	bx	lr
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	02020304 	.word	0x02020304
 800221c:	01010101 	.word	0x01010101
	...

08002228 <log_i>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void log_i(char *data, ... ){
 8002228:	b40f      	push	{r0, r1, r2, r3}
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
	if( tx_ready != 1 ) return;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <log_i+0x50>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d117      	bne.n	8002268 <log_i+0x40>

	tx_ready = 0;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <log_i+0x50>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

	va_list args;

	va_start(args, data);
 800223e:	2314      	movs	r3, #20
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	607b      	str	r3, [r7, #4]

	vsprintf(tx_buffer,data, args);
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6939      	ldr	r1, [r7, #16]
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <log_i+0x54>)
 800224a:	0018      	movs	r0, r3
 800224c:	f007 f9fc 	bl	8009648 <vsiprintf>

	va_end( args);

	HAL_UART_Transmit_IT(&huart2, tx_buffer, strlen(tx_buffer));
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <log_i+0x54>)
 8002252:	0018      	movs	r0, r3
 8002254:	f7fd ff5e 	bl	8000114 <strlen>
 8002258:	0003      	movs	r3, r0
 800225a:	b29a      	uxth	r2, r3
 800225c:	4907      	ldr	r1, [pc, #28]	; (800227c <log_i+0x54>)
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <log_i+0x58>)
 8002260:	0018      	movs	r0, r3
 8002262:	f003 fd15 	bl	8005c90 <HAL_UART_Transmit_IT>
 8002266:	e000      	b.n	800226a <log_i+0x42>
	if( tx_ready != 1 ) return;
 8002268:	46c0      	nop			; (mov r8, r8)

}
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bc80      	pop	{r7}
 8002270:	bc08      	pop	{r3}
 8002272:	b004      	add	sp, #16
 8002274:	4718      	bx	r3
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	20000000 	.word	0x20000000
 800227c:	200004ac 	.word	0x200004ac
 8002280:	20000510 	.word	0x20000510

08002284 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	tx_ready = 1;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_UART_TxCpltCallback+0x18>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]
}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	b002      	add	sp, #8
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	20000000 	.word	0x20000000

080022a0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	char c = rx_c[0];
 80022a8:	210f      	movs	r1, #15
 80022aa:	187b      	adds	r3, r7, r1
 80022ac:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <HAL_UART_RxCpltCallback+0x30>)
 80022ae:	7812      	ldrb	r2, [r2, #0]
 80022b0:	701a      	strb	r2, [r3, #0]
	rxChar(c);
 80022b2:	187b      	adds	r3, r7, r1
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	0018      	movs	r0, r3
 80022b8:	f006 f880 	bl	80083bc <rxChar>

	HAL_UART_Receive_IT(&huart2, rx_c, 1);
 80022bc:	4904      	ldr	r1, [pc, #16]	; (80022d0 <HAL_UART_RxCpltCallback+0x30>)
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_UART_RxCpltCallback+0x34>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	0018      	movs	r0, r3
 80022c4:	f003 fd7e 	bl	8005dc4 <HAL_UART_Receive_IT>
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b004      	add	sp, #16
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200004a8 	.word	0x200004a8
 80022d4:	20000510 	.word	0x20000510

080022d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022dc:	f000 fbf4 	bl	8002ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022e0:	f000 f816 	bl	8002310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022e4:	f000 f954 	bl	8002590 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022e8:	f000 f904 	bl	80024f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80022ec:	f000 f884 	bl	80023f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80022f0:	f000 f8c2 	bl	8002478 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, rx_c, 1);
 80022f4:	4904      	ldr	r1, [pc, #16]	; (8002308 <main+0x30>)
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <main+0x34>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	0018      	movs	r0, r3
 80022fc:	f003 fd62 	bl	8005dc4 <HAL_UART_Receive_IT>
  maincpp();
 8002300:	f006 f870 	bl	80083e4 <maincpp>
  while (1)
 8002304:	e7fe      	b.n	8002304 <main+0x2c>
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	200004a8 	.word	0x200004a8
 800230c:	20000510 	.word	0x20000510

08002310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b099      	sub	sp, #100	; 0x64
 8002314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002316:	242c      	movs	r4, #44	; 0x2c
 8002318:	193b      	adds	r3, r7, r4
 800231a:	0018      	movs	r0, r3
 800231c:	2334      	movs	r3, #52	; 0x34
 800231e:	001a      	movs	r2, r3
 8002320:	2100      	movs	r1, #0
 8002322:	f006 faea 	bl	80088fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002326:	231c      	movs	r3, #28
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	0018      	movs	r0, r3
 800232c:	2310      	movs	r3, #16
 800232e:	001a      	movs	r2, r3
 8002330:	2100      	movs	r1, #0
 8002332:	f006 fae2 	bl	80088fa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002336:	003b      	movs	r3, r7
 8002338:	0018      	movs	r0, r3
 800233a:	231c      	movs	r3, #28
 800233c:	001a      	movs	r2, r3
 800233e:	2100      	movs	r1, #0
 8002340:	f006 fadb 	bl	80088fa <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	0018      	movs	r0, r3
 800234a:	f001 ff15 	bl	8004178 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800234e:	193b      	adds	r3, r7, r4
 8002350:	2202      	movs	r2, #2
 8002352:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002354:	193b      	adds	r3, r7, r4
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	0052      	lsls	r2, r2, #1
 800235a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800235c:	0021      	movs	r1, r4
 800235e:	187b      	adds	r3, r7, r1
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002364:	187b      	adds	r3, r7, r1
 8002366:	2240      	movs	r2, #64	; 0x40
 8002368:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2202      	movs	r2, #2
 800236e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002370:	187b      	adds	r3, r7, r1
 8002372:	2202      	movs	r2, #2
 8002374:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002376:	187b      	adds	r3, r7, r1
 8002378:	2200      	movs	r2, #0
 800237a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800237c:	187b      	adds	r3, r7, r1
 800237e:	2208      	movs	r2, #8
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002382:	187b      	adds	r3, r7, r1
 8002384:	2280      	movs	r2, #128	; 0x80
 8002386:	0292      	lsls	r2, r2, #10
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800238a:	187b      	adds	r3, r7, r1
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	0592      	lsls	r2, r2, #22
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002392:	187b      	adds	r3, r7, r1
 8002394:	0018      	movs	r0, r3
 8002396:	f001 ff3b 	bl	8004210 <HAL_RCC_OscConfig>
 800239a:	1e03      	subs	r3, r0, #0
 800239c:	d001      	beq.n	80023a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800239e:	f000 f965 	bl	800266c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a2:	211c      	movs	r1, #28
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	2207      	movs	r2, #7
 80023a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	2202      	movs	r2, #2
 80023ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	2200      	movs	r2, #0
 80023ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023bc:	187b      	adds	r3, r7, r1
 80023be:	2102      	movs	r1, #2
 80023c0:	0018      	movs	r0, r3
 80023c2:	f002 fa3b 	bl	800483c <HAL_RCC_ClockConfig>
 80023c6:	1e03      	subs	r3, r0, #0
 80023c8:	d001      	beq.n	80023ce <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80023ca:	f000 f94f 	bl	800266c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80023ce:	003b      	movs	r3, r7
 80023d0:	2222      	movs	r2, #34	; 0x22
 80023d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023d4:	003b      	movs	r3, r7
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80023da:	003b      	movs	r3, r7
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e0:	003b      	movs	r3, r7
 80023e2:	0018      	movs	r0, r3
 80023e4:	f002 fbd4 	bl	8004b90 <HAL_RCCEx_PeriphCLKConfig>
 80023e8:	1e03      	subs	r3, r0, #0
 80023ea:	d001      	beq.n	80023f0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80023ec:	f000 f93e 	bl	800266c <Error_Handler>
  }
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b019      	add	sp, #100	; 0x64
 80023f6:	bd90      	pop	{r4, r7, pc}

080023f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <MX_I2C1_Init+0x74>)
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <MX_I2C1_Init+0x78>)
 8002400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <MX_I2C1_Init+0x74>)
 8002404:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <MX_I2C1_Init+0x7c>)
 8002406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <MX_I2C1_Init+0x74>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <MX_I2C1_Init+0x74>)
 8002410:	2201      	movs	r2, #1
 8002412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <MX_I2C1_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <MX_I2C1_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <MX_I2C1_Init+0x74>)
 8002422:	2200      	movs	r2, #0
 8002424:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_I2C1_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <MX_I2C1_Init+0x74>)
 800242e:	2200      	movs	r2, #0
 8002430:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <MX_I2C1_Init+0x74>)
 8002434:	0018      	movs	r0, r3
 8002436:	f001 f8d1 	bl	80035dc <HAL_I2C_Init>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d001      	beq.n	8002442 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800243e:	f000 f915 	bl	800266c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <MX_I2C1_Init+0x74>)
 8002444:	2100      	movs	r1, #0
 8002446:	0018      	movs	r0, r3
 8002448:	f001 fdfe 	bl	8004048 <HAL_I2CEx_ConfigAnalogFilter>
 800244c:	1e03      	subs	r3, r0, #0
 800244e:	d001      	beq.n	8002454 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002450:	f000 f90c 	bl	800266c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <MX_I2C1_Init+0x74>)
 8002456:	2100      	movs	r1, #0
 8002458:	0018      	movs	r0, r3
 800245a:	f001 fe41 	bl	80040e0 <HAL_I2CEx_ConfigDigitalFilter>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d001      	beq.n	8002466 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002462:	f000 f903 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	200002a4 	.word	0x200002a4
 8002470:	40005400 	.word	0x40005400
 8002474:	00602173 	.word	0x00602173

08002478 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <MX_SPI1_Init+0x74>)
 800247e:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <MX_SPI1_Init+0x78>)
 8002480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <MX_SPI1_Init+0x74>)
 8002484:	2282      	movs	r2, #130	; 0x82
 8002486:	0052      	lsls	r2, r2, #1
 8002488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <MX_SPI1_Init+0x74>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_SPI1_Init+0x74>)
 8002492:	22e0      	movs	r2, #224	; 0xe0
 8002494:	00d2      	lsls	r2, r2, #3
 8002496:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_SPI1_Init+0x74>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <MX_SPI1_Init+0x74>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <MX_SPI1_Init+0x74>)
 80024a6:	2280      	movs	r2, #128	; 0x80
 80024a8:	0092      	lsls	r2, r2, #2
 80024aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <MX_SPI1_Init+0x74>)
 80024ae:	2210      	movs	r2, #16
 80024b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <MX_SPI1_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <MX_SPI1_Init+0x74>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <MX_SPI1_Init+0x74>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <MX_SPI1_Init+0x74>)
 80024c6:	2207      	movs	r2, #7
 80024c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <MX_SPI1_Init+0x74>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <MX_SPI1_Init+0x74>)
 80024d2:	2208      	movs	r2, #8
 80024d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <MX_SPI1_Init+0x74>)
 80024d8:	0018      	movs	r0, r3
 80024da:	f002 fc8d 	bl	8004df8 <HAL_SPI_Init>
 80024de:	1e03      	subs	r3, r0, #0
 80024e0:	d001      	beq.n	80024e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024e2:	f000 f8c3 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200002f0 	.word	0x200002f0
 80024f0:	40013000 	.word	0x40013000

080024f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024f8:	4b23      	ldr	r3, [pc, #140]	; (8002588 <MX_USART2_UART_Init+0x94>)
 80024fa:	4a24      	ldr	r2, [pc, #144]	; (800258c <MX_USART2_UART_Init+0x98>)
 80024fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <MX_USART2_UART_Init+0x94>)
 8002500:	2296      	movs	r2, #150	; 0x96
 8002502:	0192      	lsls	r2, r2, #6
 8002504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <MX_USART2_UART_Init+0x94>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <MX_USART2_UART_Init+0x94>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <MX_USART2_UART_Init+0x94>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <MX_USART2_UART_Init+0x94>)
 800251a:	220c      	movs	r2, #12
 800251c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800251e:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <MX_USART2_UART_Init+0x94>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002524:	4b18      	ldr	r3, [pc, #96]	; (8002588 <MX_USART2_UART_Init+0x94>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800252a:	4b17      	ldr	r3, [pc, #92]	; (8002588 <MX_USART2_UART_Init+0x94>)
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002530:	4b15      	ldr	r3, [pc, #84]	; (8002588 <MX_USART2_UART_Init+0x94>)
 8002532:	2200      	movs	r2, #0
 8002534:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002536:	4b14      	ldr	r3, [pc, #80]	; (8002588 <MX_USART2_UART_Init+0x94>)
 8002538:	2200      	movs	r2, #0
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <MX_USART2_UART_Init+0x94>)
 800253e:	0018      	movs	r0, r3
 8002540:	f003 fb50 	bl	8005be4 <HAL_UART_Init>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d001      	beq.n	800254c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002548:	f000 f890 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <MX_USART2_UART_Init+0x94>)
 800254e:	2100      	movs	r1, #0
 8002550:	0018      	movs	r0, r3
 8002552:	f004 ff9f 	bl	8007494 <HAL_UARTEx_SetTxFifoThreshold>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d001      	beq.n	800255e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800255a:	f000 f887 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <MX_USART2_UART_Init+0x94>)
 8002560:	2100      	movs	r1, #0
 8002562:	0018      	movs	r0, r3
 8002564:	f004 ffd6 	bl	8007514 <HAL_UARTEx_SetRxFifoThreshold>
 8002568:	1e03      	subs	r3, r0, #0
 800256a:	d001      	beq.n	8002570 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800256c:	f000 f87e 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <MX_USART2_UART_Init+0x94>)
 8002572:	0018      	movs	r0, r3
 8002574:	f004 ff54 	bl	8007420 <HAL_UARTEx_DisableFifoMode>
 8002578:	1e03      	subs	r3, r0, #0
 800257a:	d001      	beq.n	8002580 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800257c:	f000 f876 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	20000510 	.word	0x20000510
 800258c:	40004400 	.word	0x40004400

08002590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002596:	240c      	movs	r4, #12
 8002598:	193b      	adds	r3, r7, r4
 800259a:	0018      	movs	r0, r3
 800259c:	2314      	movs	r3, #20
 800259e:	001a      	movs	r2, r3
 80025a0:	2100      	movs	r1, #0
 80025a2:	f006 f9aa 	bl	80088fa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	4b2d      	ldr	r3, [pc, #180]	; (800265c <MX_GPIO_Init+0xcc>)
 80025a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025aa:	4b2c      	ldr	r3, [pc, #176]	; (800265c <MX_GPIO_Init+0xcc>)
 80025ac:	2102      	movs	r1, #2
 80025ae:	430a      	orrs	r2, r1
 80025b0:	635a      	str	r2, [r3, #52]	; 0x34
 80025b2:	4b2a      	ldr	r3, [pc, #168]	; (800265c <MX_GPIO_Init+0xcc>)
 80025b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b6:	2202      	movs	r2, #2
 80025b8:	4013      	ands	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025be:	4b27      	ldr	r3, [pc, #156]	; (800265c <MX_GPIO_Init+0xcc>)
 80025c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <MX_GPIO_Init+0xcc>)
 80025c4:	2104      	movs	r1, #4
 80025c6:	430a      	orrs	r2, r1
 80025c8:	635a      	str	r2, [r3, #52]	; 0x34
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <MX_GPIO_Init+0xcc>)
 80025cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ce:	2204      	movs	r2, #4
 80025d0:	4013      	ands	r3, r2
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d6:	4b21      	ldr	r3, [pc, #132]	; (800265c <MX_GPIO_Init+0xcc>)
 80025d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <MX_GPIO_Init+0xcc>)
 80025dc:	2101      	movs	r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <MX_GPIO_Init+0xcc>)
 80025e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e6:	2201      	movs	r2, #1
 80025e8:	4013      	ands	r3, r2
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 80025ee:	491c      	ldr	r1, [pc, #112]	; (8002660 <MX_GPIO_Init+0xd0>)
 80025f0:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <MX_GPIO_Init+0xd4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	0018      	movs	r0, r3
 80025f6:	f000 ffb9 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDY_Pin|LEDG_Pin, GPIO_PIN_RESET);
 80025fa:	23c0      	movs	r3, #192	; 0xc0
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	481a      	ldr	r0, [pc, #104]	; (8002668 <MX_GPIO_Init+0xd8>)
 8002600:	2200      	movs	r2, #0
 8002602:	0019      	movs	r1, r3
 8002604:	f000 ffb2 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDR_Pin CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|CSN_Pin|CE_Pin;
 8002608:	193b      	adds	r3, r7, r4
 800260a:	4a15      	ldr	r2, [pc, #84]	; (8002660 <MX_GPIO_Init+0xd0>)
 800260c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260e:	193b      	adds	r3, r7, r4
 8002610:	2201      	movs	r2, #1
 8002612:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	193b      	adds	r3, r7, r4
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	193b      	adds	r3, r7, r4
 800261c:	2200      	movs	r2, #0
 800261e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002620:	193b      	adds	r3, r7, r4
 8002622:	4a10      	ldr	r2, [pc, #64]	; (8002664 <MX_GPIO_Init+0xd4>)
 8002624:	0019      	movs	r1, r3
 8002626:	0010      	movs	r0, r2
 8002628:	f000 fe3c 	bl	80032a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDY_Pin LEDG_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin|LEDG_Pin;
 800262c:	0021      	movs	r1, r4
 800262e:	187b      	adds	r3, r7, r1
 8002630:	22c0      	movs	r2, #192	; 0xc0
 8002632:	0212      	lsls	r2, r2, #8
 8002634:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002636:	187b      	adds	r3, r7, r1
 8002638:	2201      	movs	r2, #1
 800263a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	187b      	adds	r3, r7, r1
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	187b      	adds	r3, r7, r1
 8002644:	2200      	movs	r2, #0
 8002646:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002648:	187b      	adds	r3, r7, r1
 800264a:	4a07      	ldr	r2, [pc, #28]	; (8002668 <MX_GPIO_Init+0xd8>)
 800264c:	0019      	movs	r1, r3
 800264e:	0010      	movs	r0, r2
 8002650:	f000 fe28 	bl	80032a4 <HAL_GPIO_Init>

}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b009      	add	sp, #36	; 0x24
 800265a:	bd90      	pop	{r4, r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	00000203 	.word	0x00000203
 8002664:	50000400 	.word	0x50000400
 8002668:	50000800 	.word	0x50000800

0800266c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
}
 8002672:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002674:	e7fe      	b.n	8002674 <Error_Handler+0x8>
	...

08002678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_MspInit+0x4c>)
 8002680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_MspInit+0x4c>)
 8002684:	2101      	movs	r1, #1
 8002686:	430a      	orrs	r2, r1
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_MspInit+0x4c>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2201      	movs	r2, #1
 8002690:	4013      	ands	r3, r2
 8002692:	607b      	str	r3, [r7, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_MspInit+0x4c>)
 8002698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_MspInit+0x4c>)
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	0549      	lsls	r1, r1, #21
 80026a0:	430a      	orrs	r2, r1
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80026a4:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <HAL_MspInit+0x4c>)
 80026a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	055b      	lsls	r3, r3, #21
 80026ac:	4013      	ands	r3, r2
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80026b2:	23c0      	movs	r3, #192	; 0xc0
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	0018      	movs	r0, r3
 80026b8:	f000 fab0 	bl	8002c1c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026bc:	46c0      	nop			; (mov r8, r8)
 80026be:	46bd      	mov	sp, r7
 80026c0:	b002      	add	sp, #8
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b08b      	sub	sp, #44	; 0x2c
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	2414      	movs	r4, #20
 80026d2:	193b      	adds	r3, r7, r4
 80026d4:	0018      	movs	r0, r3
 80026d6:	2314      	movs	r3, #20
 80026d8:	001a      	movs	r2, r3
 80026da:	2100      	movs	r1, #0
 80026dc:	f006 f90d 	bl	80088fa <memset>
  if(hi2c->Instance==I2C1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <HAL_I2C_MspInit+0x8c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d130      	bne.n	800274c <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_I2C_MspInit+0x90>)
 80026ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_I2C_MspInit+0x90>)
 80026f0:	2102      	movs	r1, #2
 80026f2:	430a      	orrs	r2, r1
 80026f4:	635a      	str	r2, [r3, #52]	; 0x34
 80026f6:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_I2C_MspInit+0x90>)
 80026f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fa:	2202      	movs	r2, #2
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002702:	193b      	adds	r3, r7, r4
 8002704:	22c0      	movs	r2, #192	; 0xc0
 8002706:	0052      	lsls	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800270a:	0021      	movs	r1, r4
 800270c:	187b      	adds	r3, r7, r1
 800270e:	2212      	movs	r2, #18
 8002710:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002712:	187b      	adds	r3, r7, r1
 8002714:	2201      	movs	r2, #1
 8002716:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	187b      	adds	r3, r7, r1
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800271e:	187b      	adds	r3, r7, r1
 8002720:	2206      	movs	r2, #6
 8002722:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002724:	187b      	adds	r3, r7, r1
 8002726:	4a0d      	ldr	r2, [pc, #52]	; (800275c <HAL_I2C_MspInit+0x94>)
 8002728:	0019      	movs	r1, r3
 800272a:	0010      	movs	r0, r2
 800272c:	f000 fdba 	bl	80032a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_I2C_MspInit+0x90>)
 8002732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_I2C_MspInit+0x90>)
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	0389      	lsls	r1, r1, #14
 800273a:	430a      	orrs	r2, r1
 800273c:	63da      	str	r2, [r3, #60]	; 0x3c
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_I2C_MspInit+0x90>)
 8002740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	039b      	lsls	r3, r3, #14
 8002746:	4013      	ands	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800274c:	46c0      	nop			; (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b00b      	add	sp, #44	; 0x2c
 8002752:	bd90      	pop	{r4, r7, pc}
 8002754:	40005400 	.word	0x40005400
 8002758:	40021000 	.word	0x40021000
 800275c:	50000400 	.word	0x50000400

08002760 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b08b      	sub	sp, #44	; 0x2c
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	2414      	movs	r4, #20
 800276a:	193b      	adds	r3, r7, r4
 800276c:	0018      	movs	r0, r3
 800276e:	2314      	movs	r3, #20
 8002770:	001a      	movs	r2, r3
 8002772:	2100      	movs	r1, #0
 8002774:	f006 f8c1 	bl	80088fa <memset>
  if(hspi->Instance==SPI1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1b      	ldr	r2, [pc, #108]	; (80027ec <HAL_SPI_MspInit+0x8c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d130      	bne.n	80027e4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_SPI_MspInit+0x90>)
 8002784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_SPI_MspInit+0x90>)
 8002788:	2180      	movs	r1, #128	; 0x80
 800278a:	0149      	lsls	r1, r1, #5
 800278c:	430a      	orrs	r2, r1
 800278e:	641a      	str	r2, [r3, #64]	; 0x40
 8002790:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <HAL_SPI_MspInit+0x90>)
 8002792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	015b      	lsls	r3, r3, #5
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_SPI_MspInit+0x90>)
 80027a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <HAL_SPI_MspInit+0x90>)
 80027a4:	2101      	movs	r1, #1
 80027a6:	430a      	orrs	r2, r1
 80027a8:	635a      	str	r2, [r3, #52]	; 0x34
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_SPI_MspInit+0x90>)
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	2201      	movs	r2, #1
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027b6:	0021      	movs	r1, r4
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	22e0      	movs	r2, #224	; 0xe0
 80027bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	2202      	movs	r2, #2
 80027c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	2202      	movs	r2, #2
 80027c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d6:	187a      	adds	r2, r7, r1
 80027d8:	23a0      	movs	r3, #160	; 0xa0
 80027da:	05db      	lsls	r3, r3, #23
 80027dc:	0011      	movs	r1, r2
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 fd60 	bl	80032a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b00b      	add	sp, #44	; 0x2c
 80027ea:	bd90      	pop	{r4, r7, pc}
 80027ec:	40013000 	.word	0x40013000
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b08b      	sub	sp, #44	; 0x2c
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	2414      	movs	r4, #20
 80027fe:	193b      	adds	r3, r7, r4
 8002800:	0018      	movs	r0, r3
 8002802:	2314      	movs	r3, #20
 8002804:	001a      	movs	r2, r3
 8002806:	2100      	movs	r1, #0
 8002808:	f006 f877 	bl	80088fa <memset>
  if(huart->Instance==USART2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <HAL_UART_MspInit+0x9c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d138      	bne.n	8002888 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002816:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <HAL_UART_MspInit+0xa0>)
 8002818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800281a:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_UART_MspInit+0xa0>)
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	0289      	lsls	r1, r1, #10
 8002820:	430a      	orrs	r2, r1
 8002822:	63da      	str	r2, [r3, #60]	; 0x3c
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_UART_MspInit+0xa0>)
 8002826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	029b      	lsls	r3, r3, #10
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <HAL_UART_MspInit+0xa0>)
 8002834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <HAL_UART_MspInit+0xa0>)
 8002838:	2101      	movs	r1, #1
 800283a:	430a      	orrs	r2, r1
 800283c:	635a      	str	r2, [r3, #52]	; 0x34
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_UART_MspInit+0xa0>)
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002842:	2201      	movs	r2, #1
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800284a:	0021      	movs	r1, r4
 800284c:	187b      	adds	r3, r7, r1
 800284e:	220c      	movs	r2, #12
 8002850:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	187b      	adds	r3, r7, r1
 8002854:	2202      	movs	r2, #2
 8002856:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	187b      	adds	r3, r7, r1
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	187b      	adds	r3, r7, r1
 8002860:	2200      	movs	r2, #0
 8002862:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002864:	187b      	adds	r3, r7, r1
 8002866:	2201      	movs	r2, #1
 8002868:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286a:	187a      	adds	r2, r7, r1
 800286c:	23a0      	movs	r3, #160	; 0xa0
 800286e:	05db      	lsls	r3, r3, #23
 8002870:	0011      	movs	r1, r2
 8002872:	0018      	movs	r0, r3
 8002874:	f000 fd16 	bl	80032a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002878:	2200      	movs	r2, #0
 800287a:	2100      	movs	r1, #0
 800287c:	201c      	movs	r0, #28
 800287e:	f000 fa8f 	bl	8002da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002882:	201c      	movs	r0, #28
 8002884:	f000 faa1 	bl	8002dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b00b      	add	sp, #44	; 0x2c
 800288e:	bd90      	pop	{r4, r7, pc}
 8002890:	40004400 	.word	0x40004400
 8002894:	40021000 	.word	0x40021000

08002898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800289c:	e7fe      	b.n	800289c <NMI_Handler+0x4>

0800289e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a2:	e7fe      	b.n	80028a2 <HardFault_Handler+0x4>

080028a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028bc:	f000 f96e 	bl	8002b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c0:	46c0      	nop			; (mov r8, r8)
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <USART2_IRQHandler+0x14>)
 80028ce:	0018      	movs	r0, r3
 80028d0:	f003 faba 	bl	8005e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	20000510 	.word	0x20000510

080028e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
	return 1;
 80028e4:	2301      	movs	r3, #1
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_kill>:

int _kill(int pid, int sig)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028f6:	f005 ff9d 	bl	8008834 <__errno>
 80028fa:	0003      	movs	r3, r0
 80028fc:	2216      	movs	r2, #22
 80028fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002900:	2301      	movs	r3, #1
 8002902:	425b      	negs	r3, r3
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b002      	add	sp, #8
 800290a:	bd80      	pop	{r7, pc}

0800290c <_exit>:

void _exit (int status)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002914:	2301      	movs	r3, #1
 8002916:	425a      	negs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	0011      	movs	r1, r2
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff ffe5 	bl	80028ec <_kill>
	while (1) {}		/* Make sure we hang here */
 8002922:	e7fe      	b.n	8002922 <_exit+0x16>

08002924 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	e00a      	b.n	800294c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002936:	e000      	b.n	800293a <_read+0x16>
 8002938:	bf00      	nop
 800293a:	0001      	movs	r1, r0
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	60ba      	str	r2, [r7, #8]
 8002942:	b2ca      	uxtb	r2, r1
 8002944:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3301      	adds	r3, #1
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	429a      	cmp	r2, r3
 8002952:	dbf0      	blt.n	8002936 <_read+0x12>
	}

return len;
 8002954:	687b      	ldr	r3, [r7, #4]
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b006      	add	sp, #24
 800295c:	bd80      	pop	{r7, pc}

0800295e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	e009      	b.n	8002984 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	60ba      	str	r2, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	0018      	movs	r0, r3
 800297a:	e000      	b.n	800297e <_write+0x20>
 800297c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3301      	adds	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	dbf1      	blt.n	8002970 <_write+0x12>
	}
	return len;
 800298c:	687b      	ldr	r3, [r7, #4]
}
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	b006      	add	sp, #24
 8002994:	bd80      	pop	{r7, pc}

08002996 <_close>:

int _close(int file)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
	return -1;
 800299e:	2301      	movs	r3, #1
 80029a0:	425b      	negs	r3, r3
}
 80029a2:	0018      	movs	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b002      	add	sp, #8
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	0192      	lsls	r2, r2, #6
 80029ba:	605a      	str	r2, [r3, #4]
	return 0;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_isatty>:

int _isatty(int file)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
	return 1;
 80029ce:	2301      	movs	r3, #1
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b002      	add	sp, #8
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
	return 0;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b004      	add	sp, #16
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f8:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <_sbrk+0x5c>)
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <_sbrk+0x60>)
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a04:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <_sbrk+0x64>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <_sbrk+0x64>)
 8002a0e:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <_sbrk+0x68>)
 8002a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <_sbrk+0x64>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	18d3      	adds	r3, r2, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d207      	bcs.n	8002a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a20:	f005 ff08 	bl	8008834 <__errno>
 8002a24:	0003      	movs	r3, r0
 8002a26:	220c      	movs	r2, #12
 8002a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	425b      	negs	r3, r3
 8002a2e:	e009      	b.n	8002a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <_sbrk+0x64>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a36:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <_sbrk+0x64>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	18d2      	adds	r2, r2, r3
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <_sbrk+0x64>)
 8002a40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002a42:	68fb      	ldr	r3, [r7, #12]
}
 8002a44:	0018      	movs	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b006      	add	sp, #24
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20009000 	.word	0x20009000
 8002a50:	00000400 	.word	0x00000400
 8002a54:	20000284 	.word	0x20000284
 8002a58:	200005b8 	.word	0x200005b8

08002a5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <SystemInit+0x14>)
 8002a62:	2280      	movs	r2, #128	; 0x80
 8002a64:	0512      	lsls	r2, r2, #20
 8002a66:	609a      	str	r2, [r3, #8]
#endif
}
 8002a68:	46c0      	nop			; (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a74:	480d      	ldr	r0, [pc, #52]	; (8002aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a78:	f7ff fff0 	bl	8002a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a7c:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a7e:	490d      	ldr	r1, [pc, #52]	; (8002ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <LoopForever+0xe>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a84:	e002      	b.n	8002a8c <LoopCopyDataInit>

08002a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8a:	3304      	adds	r3, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a90:	d3f9      	bcc.n	8002a86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a94:	4c0a      	ldr	r4, [pc, #40]	; (8002ac0 <LoopForever+0x16>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a98:	e001      	b.n	8002a9e <LoopFillZerobss>

08002a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a9c:	3204      	adds	r2, #4

08002a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa0:	d3fb      	bcc.n	8002a9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002aa2:	f005 fecd 	bl	8008840 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002aa6:	f7ff fc17 	bl	80022d8 <main>

08002aaa <LoopForever>:

LoopForever:
  b LoopForever
 8002aaa:	e7fe      	b.n	8002aaa <LoopForever>
  ldr   r0, =_estack
 8002aac:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab4:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8002ab8:	0800c0c4 	.word	0x0800c0c4
  ldr r2, =_sbss
 8002abc:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8002ac0:	200005b4 	.word	0x200005b4

08002ac4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ac4:	e7fe      	b.n	8002ac4 <ADC1_IRQHandler>
	...

08002ac8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ace:	1dfb      	adds	r3, r7, #7
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_Init+0x3c>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <HAL_Init+0x3c>)
 8002ada:	2180      	movs	r1, #128	; 0x80
 8002adc:	0049      	lsls	r1, r1, #1
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f000 f810 	bl	8002b08 <HAL_InitTick>
 8002ae8:	1e03      	subs	r3, r0, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002aec:	1dfb      	adds	r3, r7, #7
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e001      	b.n	8002af8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002af4:	f7ff fdc0 	bl	8002678 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	781b      	ldrb	r3, [r3, #0]
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40022000 	.word	0x40022000

08002b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b10:	230f      	movs	r3, #15
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002b18:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_InitTick+0x88>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d02b      	beq.n	8002b78 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <HAL_InitTick+0x8c>)
 8002b22:	681c      	ldr	r4, [r3, #0]
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <HAL_InitTick+0x88>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	0019      	movs	r1, r3
 8002b2a:	23fa      	movs	r3, #250	; 0xfa
 8002b2c:	0098      	lsls	r0, r3, #2
 8002b2e:	f7fd fb0d 	bl	800014c <__udivsi3>
 8002b32:	0003      	movs	r3, r0
 8002b34:	0019      	movs	r1, r3
 8002b36:	0020      	movs	r0, r4
 8002b38:	f7fd fb08 	bl	800014c <__udivsi3>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 f953 	bl	8002dea <HAL_SYSTICK_Config>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d112      	bne.n	8002b6e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d80a      	bhi.n	8002b64 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	2301      	movs	r3, #1
 8002b52:	425b      	negs	r3, r3
 8002b54:	2200      	movs	r2, #0
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 f922 	bl	8002da0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <HAL_InitTick+0x90>)
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e00d      	b.n	8002b80 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002b64:	230f      	movs	r3, #15
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e008      	b.n	8002b80 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b6e:	230f      	movs	r3, #15
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	e003      	b.n	8002b80 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b78:	230f      	movs	r3, #15
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b80:	230f      	movs	r3, #15
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	781b      	ldrb	r3, [r3, #0]
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b005      	add	sp, #20
 8002b8c:	bd90      	pop	{r4, r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	2000000c 	.word	0x2000000c
 8002b94:	20000004 	.word	0x20000004
 8002b98:	20000008 	.word	0x20000008

08002b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_IncTick+0x1c>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	001a      	movs	r2, r3
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_IncTick+0x20>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	18d2      	adds	r2, r2, r3
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_IncTick+0x20>)
 8002bae:	601a      	str	r2, [r3, #0]
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	2000000c 	.word	0x2000000c
 8002bbc:	200005a0 	.word	0x200005a0

08002bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc4:	4b02      	ldr	r3, [pc, #8]	; (8002bd0 <HAL_GetTick+0x10>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	0018      	movs	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	200005a0 	.word	0x200005a0

08002bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7ff fff0 	bl	8002bc0 <HAL_GetTick>
 8002be0:	0003      	movs	r3, r0
 8002be2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3301      	adds	r3, #1
 8002bec:	d005      	beq.n	8002bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_Delay+0x44>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	001a      	movs	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	189b      	adds	r3, r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	f7ff ffe0 	bl	8002bc0 <HAL_GetTick>
 8002c00:	0002      	movs	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d8f7      	bhi.n	8002bfc <HAL_Delay+0x28>
  {
  }
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b004      	add	sp, #16
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	2000000c 	.word	0x2000000c

08002c1c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a06      	ldr	r2, [pc, #24]	; (8002c44 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]
}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b002      	add	sp, #8
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	40010000 	.word	0x40010000
 8002c44:	fffff9ff 	.word	0xfffff9ff

08002c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	0002      	movs	r2, r0
 8002c50:	1dfb      	adds	r3, r7, #7
 8002c52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c54:	1dfb      	adds	r3, r7, #7
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b7f      	cmp	r3, #127	; 0x7f
 8002c5a:	d809      	bhi.n	8002c70 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5c:	1dfb      	adds	r3, r7, #7
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	001a      	movs	r2, r3
 8002c62:	231f      	movs	r3, #31
 8002c64:	401a      	ands	r2, r3
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <__NVIC_EnableIRQ+0x30>)
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4091      	lsls	r1, r2
 8002c6c:	000a      	movs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b002      	add	sp, #8
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	e000e100 	.word	0xe000e100

08002c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	0002      	movs	r2, r0
 8002c84:	6039      	str	r1, [r7, #0]
 8002c86:	1dfb      	adds	r3, r7, #7
 8002c88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c90:	d828      	bhi.n	8002ce4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c92:	4a2f      	ldr	r2, [pc, #188]	; (8002d50 <__NVIC_SetPriority+0xd4>)
 8002c94:	1dfb      	adds	r3, r7, #7
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	b25b      	sxtb	r3, r3
 8002c9a:	089b      	lsrs	r3, r3, #2
 8002c9c:	33c0      	adds	r3, #192	; 0xc0
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	589b      	ldr	r3, [r3, r2]
 8002ca2:	1dfa      	adds	r2, r7, #7
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	0011      	movs	r1, r2
 8002ca8:	2203      	movs	r2, #3
 8002caa:	400a      	ands	r2, r1
 8002cac:	00d2      	lsls	r2, r2, #3
 8002cae:	21ff      	movs	r1, #255	; 0xff
 8002cb0:	4091      	lsls	r1, r2
 8002cb2:	000a      	movs	r2, r1
 8002cb4:	43d2      	mvns	r2, r2
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	019b      	lsls	r3, r3, #6
 8002cbe:	22ff      	movs	r2, #255	; 0xff
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	1dfb      	adds	r3, r7, #7
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	2303      	movs	r3, #3
 8002cca:	4003      	ands	r3, r0
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd0:	481f      	ldr	r0, [pc, #124]	; (8002d50 <__NVIC_SetPriority+0xd4>)
 8002cd2:	1dfb      	adds	r3, r7, #7
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b25b      	sxtb	r3, r3
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	33c0      	adds	r3, #192	; 0xc0
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ce2:	e031      	b.n	8002d48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <__NVIC_SetPriority+0xd8>)
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	0019      	movs	r1, r3
 8002cec:	230f      	movs	r3, #15
 8002cee:	400b      	ands	r3, r1
 8002cf0:	3b08      	subs	r3, #8
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3306      	adds	r3, #6
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	18d3      	adds	r3, r2, r3
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	1dfa      	adds	r2, r7, #7
 8002d00:	7812      	ldrb	r2, [r2, #0]
 8002d02:	0011      	movs	r1, r2
 8002d04:	2203      	movs	r2, #3
 8002d06:	400a      	ands	r2, r1
 8002d08:	00d2      	lsls	r2, r2, #3
 8002d0a:	21ff      	movs	r1, #255	; 0xff
 8002d0c:	4091      	lsls	r1, r2
 8002d0e:	000a      	movs	r2, r1
 8002d10:	43d2      	mvns	r2, r2
 8002d12:	401a      	ands	r2, r3
 8002d14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	22ff      	movs	r2, #255	; 0xff
 8002d1c:	401a      	ands	r2, r3
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	0018      	movs	r0, r3
 8002d24:	2303      	movs	r3, #3
 8002d26:	4003      	ands	r3, r0
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d2c:	4809      	ldr	r0, [pc, #36]	; (8002d54 <__NVIC_SetPriority+0xd8>)
 8002d2e:	1dfb      	adds	r3, r7, #7
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	001c      	movs	r4, r3
 8002d34:	230f      	movs	r3, #15
 8002d36:	4023      	ands	r3, r4
 8002d38:	3b08      	subs	r3, #8
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	3306      	adds	r3, #6
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	18c3      	adds	r3, r0, r3
 8002d44:	3304      	adds	r3, #4
 8002d46:	601a      	str	r2, [r3, #0]
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b003      	add	sp, #12
 8002d4e:	bd90      	pop	{r4, r7, pc}
 8002d50:	e000e100 	.word	0xe000e100
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	1e5a      	subs	r2, r3, #1
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	045b      	lsls	r3, r3, #17
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d301      	bcc.n	8002d70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e010      	b.n	8002d92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d70:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <SysTick_Config+0x44>)
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	3a01      	subs	r2, #1
 8002d76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d78:	2301      	movs	r3, #1
 8002d7a:	425b      	negs	r3, r3
 8002d7c:	2103      	movs	r1, #3
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f7ff ff7c 	bl	8002c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <SysTick_Config+0x44>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <SysTick_Config+0x44>)
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b002      	add	sp, #8
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	210f      	movs	r1, #15
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	1c02      	adds	r2, r0, #0
 8002db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	b25b      	sxtb	r3, r3
 8002dba:	0011      	movs	r1, r2
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f7ff ff5d 	bl	8002c7c <__NVIC_SetPriority>
}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b004      	add	sp, #16
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	1dfb      	adds	r3, r7, #7
 8002dd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd6:	1dfb      	adds	r3, r7, #7
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b25b      	sxtb	r3, r3
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7ff ff33 	bl	8002c48 <__NVIC_EnableIRQ>
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b002      	add	sp, #8
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f7ff ffaf 	bl	8002d58 <SysTick_Config>
 8002dfa:	0003      	movs	r3, r0
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b002      	add	sp, #8
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e050      	b.n	8002eb8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2225      	movs	r2, #37	; 0x25
 8002e1a:	5c9b      	ldrb	r3, [r3, r2]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d008      	beq.n	8002e34 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2204      	movs	r2, #4
 8002e26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	; 0x24
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e041      	b.n	8002eb8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	210e      	movs	r1, #14
 8002e40:	438a      	bics	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	491c      	ldr	r1, [pc, #112]	; (8002ec0 <HAL_DMA_Abort+0xbc>)
 8002e50:	400a      	ands	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2101      	movs	r1, #1
 8002e60:	438a      	bics	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002e64:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <HAL_DMA_Abort+0xc0>)
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	221c      	movs	r2, #28
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2201      	movs	r2, #1
 8002e72:	409a      	lsls	r2, r3
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_DMA_Abort+0xc0>)
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e82:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00c      	beq.n	8002ea6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e96:	490a      	ldr	r1, [pc, #40]	; (8002ec0 <HAL_DMA_Abort+0xbc>)
 8002e98:	400a      	ands	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002ea4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2225      	movs	r2, #37	; 0x25
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2224      	movs	r2, #36	; 0x24
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b002      	add	sp, #8
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	fffffeff 	.word	0xfffffeff
 8002ec4:	40020000 	.word	0x40020000

08002ec8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed0:	210f      	movs	r1, #15
 8002ed2:	187b      	adds	r3, r7, r1
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2225      	movs	r2, #37	; 0x25
 8002edc:	5c9b      	ldrb	r3, [r3, r2]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d006      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002eea:	187b      	adds	r3, r7, r1
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e049      	b.n	8002f86 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	210e      	movs	r1, #14
 8002efe:	438a      	bics	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	438a      	bics	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	491d      	ldr	r1, [pc, #116]	; (8002f94 <HAL_DMA_Abort_IT+0xcc>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002f22:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_DMA_Abort_IT+0xd0>)
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	221c      	movs	r2, #28
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2201      	movs	r2, #1
 8002f30:	409a      	lsls	r2, r3
 8002f32:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <HAL_DMA_Abort_IT+0xd0>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f40:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00c      	beq.n	8002f64 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f54:	490f      	ldr	r1, [pc, #60]	; (8002f94 <HAL_DMA_Abort_IT+0xcc>)
 8002f56:	400a      	ands	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f62:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2225      	movs	r2, #37	; 0x25
 8002f68:	2101      	movs	r1, #1
 8002f6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2224      	movs	r2, #36	; 0x24
 8002f70:	2100      	movs	r1, #0
 8002f72:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	0010      	movs	r0, r2
 8002f84:	4798      	blx	r3
    }
  }
  return status;
 8002f86:	230f      	movs	r3, #15
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	781b      	ldrb	r3, [r3, #0]
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	fffffeff 	.word	0xfffffeff
 8002f98:	40020000 	.word	0x40020000

08002f9c <HAL_FLASH_Program>:
  *               are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603a      	str	r2, [r7, #0]
 8002fa8:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_FLASH_Program+0x94>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_FLASH_Program+0x1a>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e038      	b.n	8003028 <HAL_FLASH_Program+0x8c>
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <HAL_FLASH_Program+0x94>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fbc:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <HAL_FLASH_Program+0x94>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002fc2:	2517      	movs	r5, #23
 8002fc4:	197c      	adds	r4, r7, r5
 8002fc6:	23fa      	movs	r3, #250	; 0xfa
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 f858 	bl	8003080 <FLASH_WaitForLastOperation>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002fd4:	197b      	adds	r3, r7, r5
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d11f      	bne.n	800301c <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d106      	bne.n	8002ff0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	0008      	movs	r0, r1
 8002fea:	f000 f897 	bl	800311c <FLASH_Program_DoubleWord>
 8002fee:	e005      	b.n	8002ffc <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	0011      	movs	r1, r2
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f008 fd26 	bl	800ba48 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002ffc:	2317      	movs	r3, #23
 8002ffe:	18fc      	adds	r4, r7, r3
 8003000:	23fa      	movs	r3, #250	; 0xfa
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	0018      	movs	r0, r3
 8003006:	f000 f83b 	bl	8003080 <FLASH_WaitForLastOperation>
 800300a:	0003      	movs	r3, r0
 800300c:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_FLASH_Program+0x98>)
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	43d9      	mvns	r1, r3
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <HAL_FLASH_Program+0x98>)
 8003018:	400a      	ands	r2, r1
 800301a:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <HAL_FLASH_Program+0x94>)
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003022:	2317      	movs	r3, #23
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	781b      	ldrb	r3, [r3, #0]
}
 8003028:	0018      	movs	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	b006      	add	sp, #24
 800302e:	bdb0      	pop	{r4, r5, r7, pc}
 8003030:	20000288 	.word	0x20000288
 8003034:	40022000 	.word	0x40022000

08003038 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	1dfb      	adds	r3, r7, #7
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_FLASH_Unlock+0x3c>)
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	da0c      	bge.n	8003066 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800304c:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_FLASH_Unlock+0x3c>)
 800304e:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_FLASH_Unlock+0x40>)
 8003050:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_FLASH_Unlock+0x3c>)
 8003054:	4a09      	ldr	r2, [pc, #36]	; (800307c <HAL_FLASH_Unlock+0x44>)
 8003056:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_FLASH_Unlock+0x3c>)
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	da02      	bge.n	8003066 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8003060:	1dfb      	adds	r3, r7, #7
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003066:	1dfb      	adds	r3, r7, #7
 8003068:	781b      	ldrb	r3, [r3, #0]
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b002      	add	sp, #8
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	40022000 	.word	0x40022000
 8003078:	45670123 	.word	0x45670123
 800307c:	cdef89ab 	.word	0xcdef89ab

08003080 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8003088:	f7ff fd9a 	bl	8002bc0 <HAL_GetTick>
 800308c:	0002      	movs	r2, r0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	189b      	adds	r3, r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	025b      	lsls	r3, r3, #9
 8003098:	60bb      	str	r3, [r7, #8]
#endif

  while ((FLASH->SR & error) != 0x00U)
 800309a:	e007      	b.n	80030ac <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 800309c:	f7ff fd90 	bl	8002bc0 <HAL_GetTick>
 80030a0:	0002      	movs	r2, r0
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d801      	bhi.n	80030ac <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e02a      	b.n	8003102 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <FLASH_WaitForLastOperation+0x8c>)
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	4013      	ands	r3, r2
 80030b4:	d1f2      	bne.n	800309c <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <FLASH_WaitForLastOperation+0x8c>)
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	4a15      	ldr	r2, [pc, #84]	; (8003110 <FLASH_WaitForLastOperation+0x90>)
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80030c0:	4b12      	ldr	r3, [pc, #72]	; (800310c <FLASH_WaitForLastOperation+0x8c>)
 80030c2:	4a14      	ldr	r2, [pc, #80]	; (8003114 <FLASH_WaitForLastOperation+0x94>)
 80030c4:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d004      	beq.n	80030d6 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <FLASH_WaitForLastOperation+0x98>)
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e015      	b.n	8003102 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 80030d6:	f7ff fd73 	bl	8002bc0 <HAL_GetTick>
 80030da:	0002      	movs	r2, r0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	189b      	adds	r3, r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80030e2:	e007      	b.n	80030f4 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 80030e4:	f7ff fd6c 	bl	8002bc0 <HAL_GetTick>
 80030e8:	0002      	movs	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d801      	bhi.n	80030f4 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e006      	b.n	8003102 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <FLASH_WaitForLastOperation+0x8c>)
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	02db      	lsls	r3, r3, #11
 80030fc:	4013      	ands	r3, r2
 80030fe:	d1f1      	bne.n	80030e4 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	0018      	movs	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	b004      	add	sp, #16
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	40022000 	.word	0x40022000
 8003110:	000083fa 	.word	0x000083fa
 8003114:	000083fb 	.word	0x000083fb
 8003118:	20000288 	.word	0x20000288

0800311c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800311c:	b5b0      	push	{r4, r5, r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	603a      	str	r2, [r7, #0]
 8003126:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <FLASH_Program_DoubleWord+0x3c>)
 800312a:	695a      	ldr	r2, [r3, #20]
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <FLASH_Program_DoubleWord+0x3c>)
 800312e:	2101      	movs	r1, #1
 8003130:	430a      	orrs	r2, r1
 8003132:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800313a:	f3bf 8f6f 	isb	sy
}
 800313e:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	001c      	movs	r4, r3
 8003144:	2300      	movs	r3, #0
 8003146:	001d      	movs	r5, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3304      	adds	r3, #4
 800314c:	0022      	movs	r2, r4
 800314e:	601a      	str	r2, [r3, #0]
}
 8003150:	46c0      	nop			; (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	b004      	add	sp, #16
 8003156:	bdb0      	pop	{r4, r5, r7, pc}
 8003158:	40022000 	.word	0x40022000

0800315c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800315c:	b5b0      	push	{r4, r5, r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003166:	4b35      	ldr	r3, [pc, #212]	; (800323c <HAL_FLASHEx_Erase+0xe0>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_FLASHEx_Erase+0x16>
 800316e:	2302      	movs	r3, #2
 8003170:	e05f      	b.n	8003232 <HAL_FLASHEx_Erase+0xd6>
 8003172:	4b32      	ldr	r3, [pc, #200]	; (800323c <HAL_FLASHEx_Erase+0xe0>)
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003178:	4b30      	ldr	r3, [pc, #192]	; (800323c <HAL_FLASHEx_Erase+0xe0>)
 800317a:	2200      	movs	r2, #0
 800317c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800317e:	250f      	movs	r5, #15
 8003180:	197c      	adds	r4, r7, r5
 8003182:	23fa      	movs	r3, #250	; 0xfa
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	0018      	movs	r0, r3
 8003188:	f7ff ff7a 	bl	8003080 <FLASH_WaitForLastOperation>
 800318c:	0003      	movs	r3, r0
 800318e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003190:	002c      	movs	r4, r5
 8003192:	193b      	adds	r3, r7, r4
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d145      	bne.n	8003226 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2204      	movs	r2, #4
 800319e:	605a      	str	r2, [r3, #4]
#endif

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d10d      	bne.n	80031c4 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 f849 	bl	8003244 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031b2:	193c      	adds	r4, r7, r4
 80031b4:	23fa      	movs	r3, #250	; 0xfa
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7ff ff61 	bl	8003080 <FLASH_WaitForLastOperation>
 80031be:	0003      	movs	r3, r0
 80031c0:	7023      	strb	r3, [r4, #0]
 80031c2:	e030      	b.n	8003226 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2201      	movs	r2, #1
 80031c8:	4252      	negs	r2, r2
 80031ca:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	e01a      	b.n	800320a <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	0011      	movs	r1, r2
 80031dc:	0018      	movs	r0, r3
 80031de:	f000 f845 	bl	800326c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031e2:	250f      	movs	r5, #15
 80031e4:	197c      	adds	r4, r7, r5
 80031e6:	23fa      	movs	r3, #250	; 0xfa
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7ff ff48 	bl	8003080 <FLASH_WaitForLastOperation>
 80031f0:	0003      	movs	r3, r0
 80031f2:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80031f4:	197b      	adds	r3, r7, r5
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	601a      	str	r2, [r3, #0]
          break;
 8003202:	e00a      	b.n	800321a <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	3301      	adds	r3, #1
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	18d3      	adds	r3, r2, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	d3dc      	bcc.n	80031d4 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_FLASHEx_Erase+0xe4>)
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_FLASHEx_Erase+0xe4>)
 8003220:	2102      	movs	r1, #2
 8003222:	438a      	bics	r2, r1
 8003224:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_FLASHEx_Erase+0xe0>)
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800322c:	230f      	movs	r3, #15
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	781b      	ldrb	r3, [r3, #0]
}
 8003232:	0018      	movs	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	b004      	add	sp, #16
 8003238:	bdb0      	pop	{r4, r5, r7, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	20000288 	.word	0x20000288
 8003240:	40022000 	.word	0x40022000

08003244 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <FLASH_MassErase+0x24>)
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	431a      	orrs	r2, r3
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <FLASH_MassErase+0x24>)
 8003256:	2180      	movs	r1, #128	; 0x80
 8003258:	0249      	lsls	r1, r1, #9
 800325a:	430a      	orrs	r2, r1
 800325c:	615a      	str	r2, [r3, #20]
}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	46bd      	mov	sp, r7
 8003262:	b002      	add	sp, #8
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	40022000 	.word	0x40022000

0800326c <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <FLASH_PageErase+0x2c>)
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	4a08      	ldr	r2, [pc, #32]	; (800329c <FLASH_PageErase+0x30>)
 800327c:	4013      	ands	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	00da      	lsls	r2, r3, #3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	431a      	orrs	r2, r3
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <FLASH_PageErase+0x2c>)
 800328a:	4905      	ldr	r1, [pc, #20]	; (80032a0 <FLASH_PageErase+0x34>)
 800328c:	430a      	orrs	r2, r1
 800328e:	615a      	str	r2, [r3, #20]
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b004      	add	sp, #16
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40022000 	.word	0x40022000
 800329c:	fffffe07 	.word	0xfffffe07
 80032a0:	00010002 	.word	0x00010002

080032a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b2:	e147      	b.n	8003544 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2101      	movs	r1, #1
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4091      	lsls	r1, r2
 80032be:	000a      	movs	r2, r1
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d100      	bne.n	80032cc <HAL_GPIO_Init+0x28>
 80032ca:	e138      	b.n	800353e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d00b      	beq.n	80032ec <HAL_GPIO_Init+0x48>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d007      	beq.n	80032ec <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032e0:	2b11      	cmp	r3, #17
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b12      	cmp	r3, #18
 80032ea:	d130      	bne.n	800334e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	409a      	lsls	r2, r3
 80032fa:	0013      	movs	r3, r2
 80032fc:	43da      	mvns	r2, r3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	409a      	lsls	r2, r3
 800330e:	0013      	movs	r3, r2
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003322:	2201      	movs	r2, #1
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	409a      	lsls	r2, r3
 8003328:	0013      	movs	r3, r2
 800332a:	43da      	mvns	r2, r3
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	2201      	movs	r2, #1
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
 8003340:	0013      	movs	r3, r2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	2203      	movs	r2, #3
 800335a:	409a      	lsls	r2, r3
 800335c:	0013      	movs	r3, r2
 800335e:	43da      	mvns	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4013      	ands	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	409a      	lsls	r2, r3
 8003370:	0013      	movs	r3, r2
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0xea>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b12      	cmp	r3, #18
 800338c:	d123      	bne.n	80033d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	08da      	lsrs	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3208      	adds	r2, #8
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	58d3      	ldr	r3, [r2, r3]
 800339a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2207      	movs	r2, #7
 80033a0:	4013      	ands	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	220f      	movs	r2, #15
 80033a6:	409a      	lsls	r2, r3
 80033a8:	0013      	movs	r3, r2
 80033aa:	43da      	mvns	r2, r3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2107      	movs	r1, #7
 80033ba:	400b      	ands	r3, r1
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	409a      	lsls	r2, r3
 80033c0:	0013      	movs	r3, r2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	08da      	lsrs	r2, r3, #3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3208      	adds	r2, #8
 80033d0:	0092      	lsls	r2, r2, #2
 80033d2:	6939      	ldr	r1, [r7, #16]
 80033d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	2203      	movs	r2, #3
 80033e2:	409a      	lsls	r2, r3
 80033e4:	0013      	movs	r3, r2
 80033e6:	43da      	mvns	r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4013      	ands	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2203      	movs	r2, #3
 80033f4:	401a      	ands	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	409a      	lsls	r2, r3
 80033fc:	0013      	movs	r3, r2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	055b      	lsls	r3, r3, #21
 8003412:	4013      	ands	r3, r2
 8003414:	d100      	bne.n	8003418 <HAL_GPIO_Init+0x174>
 8003416:	e092      	b.n	800353e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003418:	4a50      	ldr	r2, [pc, #320]	; (800355c <HAL_GPIO_Init+0x2b8>)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3318      	adds	r3, #24
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	589b      	ldr	r3, [r3, r2]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2203      	movs	r2, #3
 800342a:	4013      	ands	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	220f      	movs	r2, #15
 8003430:	409a      	lsls	r2, r3
 8003432:	0013      	movs	r3, r2
 8003434:	43da      	mvns	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	23a0      	movs	r3, #160	; 0xa0
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	429a      	cmp	r2, r3
 8003444:	d013      	beq.n	800346e <HAL_GPIO_Init+0x1ca>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a45      	ldr	r2, [pc, #276]	; (8003560 <HAL_GPIO_Init+0x2bc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00d      	beq.n	800346a <HAL_GPIO_Init+0x1c6>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a44      	ldr	r2, [pc, #272]	; (8003564 <HAL_GPIO_Init+0x2c0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <HAL_GPIO_Init+0x1c2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a43      	ldr	r2, [pc, #268]	; (8003568 <HAL_GPIO_Init+0x2c4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_GPIO_Init+0x1be>
 800345e:	2303      	movs	r3, #3
 8003460:	e006      	b.n	8003470 <HAL_GPIO_Init+0x1cc>
 8003462:	2305      	movs	r3, #5
 8003464:	e004      	b.n	8003470 <HAL_GPIO_Init+0x1cc>
 8003466:	2302      	movs	r3, #2
 8003468:	e002      	b.n	8003470 <HAL_GPIO_Init+0x1cc>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_GPIO_Init+0x1cc>
 800346e:	2300      	movs	r3, #0
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	2103      	movs	r1, #3
 8003474:	400a      	ands	r2, r1
 8003476:	00d2      	lsls	r2, r2, #3
 8003478:	4093      	lsls	r3, r2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003480:	4936      	ldr	r1, [pc, #216]	; (800355c <HAL_GPIO_Init+0x2b8>)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	3318      	adds	r3, #24
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800348e:	4a33      	ldr	r2, [pc, #204]	; (800355c <HAL_GPIO_Init+0x2b8>)
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	58d3      	ldr	r3, [r2, r3]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	43da      	mvns	r2, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	025b      	lsls	r3, r3, #9
 80034a8:	4013      	ands	r3, r2
 80034aa:	d003      	beq.n	80034b4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034b4:	4929      	ldr	r1, [pc, #164]	; (800355c <HAL_GPIO_Init+0x2b8>)
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80034bc:	4a27      	ldr	r2, [pc, #156]	; (800355c <HAL_GPIO_Init+0x2b8>)
 80034be:	2384      	movs	r3, #132	; 0x84
 80034c0:	58d3      	ldr	r3, [r2, r3]
 80034c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	43da      	mvns	r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	029b      	lsls	r3, r3, #10
 80034d6:	4013      	ands	r3, r2
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034e2:	491e      	ldr	r1, [pc, #120]	; (800355c <HAL_GPIO_Init+0x2b8>)
 80034e4:	2284      	movs	r2, #132	; 0x84
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034ea:	4b1c      	ldr	r3, [pc, #112]	; (800355c <HAL_GPIO_Init+0x2b8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	43da      	mvns	r2, r3
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	035b      	lsls	r3, r3, #13
 8003502:	4013      	ands	r3, r2
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_GPIO_Init+0x2b8>)
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <HAL_GPIO_Init+0x2b8>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	43da      	mvns	r2, r3
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	039b      	lsls	r3, r3, #14
 800352c:	4013      	ands	r3, r2
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_GPIO_Init+0x2b8>)
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	3301      	adds	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	40da      	lsrs	r2, r3
 800354c:	1e13      	subs	r3, r2, #0
 800354e:	d000      	beq.n	8003552 <HAL_GPIO_Init+0x2ae>
 8003550:	e6b0      	b.n	80032b4 <HAL_GPIO_Init+0x10>
  }
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b006      	add	sp, #24
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021800 	.word	0x40021800
 8003560:	50000400 	.word	0x50000400
 8003564:	50000800 	.word	0x50000800
 8003568:	50000c00 	.word	0x50000c00

0800356c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	0008      	movs	r0, r1
 8003576:	0011      	movs	r1, r2
 8003578:	1cbb      	adds	r3, r7, #2
 800357a:	1c02      	adds	r2, r0, #0
 800357c:	801a      	strh	r2, [r3, #0]
 800357e:	1c7b      	adds	r3, r7, #1
 8003580:	1c0a      	adds	r2, r1, #0
 8003582:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003584:	1c7b      	adds	r3, r7, #1
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d004      	beq.n	8003596 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800358c:	1cbb      	adds	r3, r7, #2
 800358e:	881a      	ldrh	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003594:	e003      	b.n	800359e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003596:	1cbb      	adds	r3, r7, #2
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b002      	add	sp, #8
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	000a      	movs	r2, r1
 80035b0:	1cbb      	adds	r3, r7, #2
 80035b2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035ba:	1cbb      	adds	r3, r7, #2
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4013      	ands	r3, r2
 80035c2:	041a      	lsls	r2, r3, #16
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	1cb9      	adds	r1, r7, #2
 80035ca:	8809      	ldrh	r1, [r1, #0]
 80035cc:	400b      	ands	r3, r1
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	619a      	str	r2, [r3, #24]
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b004      	add	sp, #16
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e082      	b.n	80036f4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2241      	movs	r2, #65	; 0x41
 80035f2:	5c9b      	ldrb	r3, [r3, r2]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d107      	bne.n	800360a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2240      	movs	r2, #64	; 0x40
 80035fe:	2100      	movs	r1, #0
 8003600:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	0018      	movs	r0, r3
 8003606:	f7ff f85f 	bl	80026c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2241      	movs	r2, #65	; 0x41
 800360e:	2124      	movs	r1, #36	; 0x24
 8003610:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2101      	movs	r1, #1
 800361e:	438a      	bics	r2, r1
 8003620:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4934      	ldr	r1, [pc, #208]	; (80036fc <HAL_I2C_Init+0x120>)
 800362c:	400a      	ands	r2, r1
 800362e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4931      	ldr	r1, [pc, #196]	; (8003700 <HAL_I2C_Init+0x124>)
 800363c:	400a      	ands	r2, r1
 800363e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d108      	bne.n	800365a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2180      	movs	r1, #128	; 0x80
 8003652:	0209      	lsls	r1, r1, #8
 8003654:	430a      	orrs	r2, r1
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	e007      	b.n	800366a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2184      	movs	r1, #132	; 0x84
 8003664:	0209      	lsls	r1, r1, #8
 8003666:	430a      	orrs	r2, r1
 8003668:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d104      	bne.n	800367c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	0112      	lsls	r2, r2, #4
 800367a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	491f      	ldr	r1, [pc, #124]	; (8003704 <HAL_I2C_Init+0x128>)
 8003688:	430a      	orrs	r2, r1
 800368a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	491a      	ldr	r1, [pc, #104]	; (8003700 <HAL_I2C_Init+0x124>)
 8003698:	400a      	ands	r2, r1
 800369a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	0011      	movs	r1, r2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	021a      	lsls	r2, r3, #8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69d9      	ldr	r1, [r3, #28]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1a      	ldr	r2, [r3, #32]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2101      	movs	r1, #1
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2241      	movs	r2, #65	; 0x41
 80036e0:	2120      	movs	r1, #32
 80036e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2242      	movs	r2, #66	; 0x42
 80036ee:	2100      	movs	r1, #0
 80036f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	0018      	movs	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b002      	add	sp, #8
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	f0ffffff 	.word	0xf0ffffff
 8003700:	ffff7fff 	.word	0xffff7fff
 8003704:	02008000 	.word	0x02008000

08003708 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	000c      	movs	r4, r1
 8003712:	0010      	movs	r0, r2
 8003714:	0019      	movs	r1, r3
 8003716:	230a      	movs	r3, #10
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	1c22      	adds	r2, r4, #0
 800371c:	801a      	strh	r2, [r3, #0]
 800371e:	2308      	movs	r3, #8
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	1c02      	adds	r2, r0, #0
 8003724:	801a      	strh	r2, [r3, #0]
 8003726:	1dbb      	adds	r3, r7, #6
 8003728:	1c0a      	adds	r2, r1, #0
 800372a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2241      	movs	r2, #65	; 0x41
 8003730:	5c9b      	ldrb	r3, [r3, r2]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b20      	cmp	r3, #32
 8003736:	d000      	beq.n	800373a <HAL_I2C_Mem_Write+0x32>
 8003738:	e10c      	b.n	8003954 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <HAL_I2C_Mem_Write+0x42>
 8003740:	232c      	movs	r3, #44	; 0x2c
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d105      	bne.n	8003756 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2280      	movs	r2, #128	; 0x80
 800374e:	0092      	lsls	r2, r2, #2
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0ff      	b.n	8003956 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2240      	movs	r2, #64	; 0x40
 800375a:	5c9b      	ldrb	r3, [r3, r2]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_I2C_Mem_Write+0x5c>
 8003760:	2302      	movs	r3, #2
 8003762:	e0f8      	b.n	8003956 <HAL_I2C_Mem_Write+0x24e>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2240      	movs	r2, #64	; 0x40
 8003768:	2101      	movs	r1, #1
 800376a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800376c:	f7ff fa28 	bl	8002bc0 <HAL_GetTick>
 8003770:	0003      	movs	r3, r0
 8003772:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	0219      	lsls	r1, r3, #8
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2319      	movs	r3, #25
 8003780:	2201      	movs	r2, #1
 8003782:	f000 fb0b 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 8003786:	1e03      	subs	r3, r0, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0e3      	b.n	8003956 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2241      	movs	r2, #65	; 0x41
 8003792:	2121      	movs	r1, #33	; 0x21
 8003794:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2242      	movs	r2, #66	; 0x42
 800379a:	2140      	movs	r1, #64	; 0x40
 800379c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	222c      	movs	r2, #44	; 0x2c
 80037ae:	18ba      	adds	r2, r7, r2
 80037b0:	8812      	ldrh	r2, [r2, #0]
 80037b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ba:	1dbb      	adds	r3, r7, #6
 80037bc:	881c      	ldrh	r4, [r3, #0]
 80037be:	2308      	movs	r3, #8
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	881a      	ldrh	r2, [r3, #0]
 80037c4:	230a      	movs	r3, #10
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	8819      	ldrh	r1, [r3, #0]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	0023      	movs	r3, r4
 80037d6:	f000 f9f9 	bl	8003bcc <I2C_RequestMemoryWrite>
 80037da:	1e03      	subs	r3, r0, #0
 80037dc:	d005      	beq.n	80037ea <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2240      	movs	r2, #64	; 0x40
 80037e2:	2100      	movs	r1, #0
 80037e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0b5      	b.n	8003956 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2bff      	cmp	r3, #255	; 0xff
 80037f2:	d911      	bls.n	8003818 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	22ff      	movs	r2, #255	; 0xff
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	045c      	lsls	r4, r3, #17
 8003804:	230a      	movs	r3, #10
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	8819      	ldrh	r1, [r3, #0]
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	2300      	movs	r3, #0
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	0023      	movs	r3, r4
 8003812:	f000 fbe3 	bl	8003fdc <I2C_TransferConfig>
 8003816:	e012      	b.n	800383e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	b2da      	uxtb	r2, r3
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	049c      	lsls	r4, r3, #18
 800382c:	230a      	movs	r3, #10
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	8819      	ldrh	r1, [r3, #0]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	2300      	movs	r3, #0
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	0023      	movs	r3, r4
 800383a:	f000 fbcf 	bl	8003fdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	0018      	movs	r0, r3
 8003846:	f000 fae8 	bl	8003e1a <I2C_WaitOnTXISFlagUntilTimeout>
 800384a:	1e03      	subs	r3, r0, #0
 800384c:	d001      	beq.n	8003852 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e081      	b.n	8003956 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	781a      	ldrb	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d03a      	beq.n	8003902 <HAL_I2C_Mem_Write+0x1fa>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003890:	2b00      	cmp	r3, #0
 8003892:	d136      	bne.n	8003902 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	0013      	movs	r3, r2
 800389e:	2200      	movs	r2, #0
 80038a0:	2180      	movs	r1, #128	; 0x80
 80038a2:	f000 fa7b 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 80038a6:	1e03      	subs	r3, r0, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e053      	b.n	8003956 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2bff      	cmp	r3, #255	; 0xff
 80038b6:	d911      	bls.n	80038dc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	22ff      	movs	r2, #255	; 0xff
 80038bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	045c      	lsls	r4, r3, #17
 80038c8:	230a      	movs	r3, #10
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	8819      	ldrh	r1, [r3, #0]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	2300      	movs	r3, #0
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	0023      	movs	r3, r4
 80038d6:	f000 fb81 	bl	8003fdc <I2C_TransferConfig>
 80038da:	e012      	b.n	8003902 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	049c      	lsls	r4, r3, #18
 80038f0:	230a      	movs	r3, #10
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	8819      	ldrh	r1, [r3, #0]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	2300      	movs	r3, #0
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	0023      	movs	r3, r4
 80038fe:	f000 fb6d 	bl	8003fdc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d198      	bne.n	800383e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	0018      	movs	r0, r3
 8003914:	f000 fac0 	bl	8003e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e01a      	b.n	8003956 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2220      	movs	r2, #32
 8003926:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	490b      	ldr	r1, [pc, #44]	; (8003960 <HAL_I2C_Mem_Write+0x258>)
 8003934:	400a      	ands	r2, r1
 8003936:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2241      	movs	r2, #65	; 0x41
 800393c:	2120      	movs	r1, #32
 800393e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2242      	movs	r2, #66	; 0x42
 8003944:	2100      	movs	r1, #0
 8003946:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	2100      	movs	r1, #0
 800394e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	0018      	movs	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	b007      	add	sp, #28
 800395c:	bd90      	pop	{r4, r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	fe00e800 	.word	0xfe00e800

08003964 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b089      	sub	sp, #36	; 0x24
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	000c      	movs	r4, r1
 800396e:	0010      	movs	r0, r2
 8003970:	0019      	movs	r1, r3
 8003972:	230a      	movs	r3, #10
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	1c22      	adds	r2, r4, #0
 8003978:	801a      	strh	r2, [r3, #0]
 800397a:	2308      	movs	r3, #8
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	1c02      	adds	r2, r0, #0
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	1dbb      	adds	r3, r7, #6
 8003984:	1c0a      	adds	r2, r1, #0
 8003986:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2241      	movs	r2, #65	; 0x41
 800398c:	5c9b      	ldrb	r3, [r3, r2]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b20      	cmp	r3, #32
 8003992:	d000      	beq.n	8003996 <HAL_I2C_Mem_Read+0x32>
 8003994:	e110      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	d004      	beq.n	80039a6 <HAL_I2C_Mem_Read+0x42>
 800399c:	232c      	movs	r3, #44	; 0x2c
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d105      	bne.n	80039b2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2280      	movs	r2, #128	; 0x80
 80039aa:	0092      	lsls	r2, r2, #2
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e103      	b.n	8003bba <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2240      	movs	r2, #64	; 0x40
 80039b6:	5c9b      	ldrb	r3, [r3, r2]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_I2C_Mem_Read+0x5c>
 80039bc:	2302      	movs	r3, #2
 80039be:	e0fc      	b.n	8003bba <HAL_I2C_Mem_Read+0x256>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2240      	movs	r2, #64	; 0x40
 80039c4:	2101      	movs	r1, #1
 80039c6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039c8:	f7ff f8fa 	bl	8002bc0 <HAL_GetTick>
 80039cc:	0003      	movs	r3, r0
 80039ce:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	0219      	lsls	r1, r3, #8
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2319      	movs	r3, #25
 80039dc:	2201      	movs	r2, #1
 80039de:	f000 f9dd 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 80039e2:	1e03      	subs	r3, r0, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e0e7      	b.n	8003bba <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2241      	movs	r2, #65	; 0x41
 80039ee:	2122      	movs	r1, #34	; 0x22
 80039f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2242      	movs	r2, #66	; 0x42
 80039f6:	2140      	movs	r1, #64	; 0x40
 80039f8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	222c      	movs	r2, #44	; 0x2c
 8003a0a:	18ba      	adds	r2, r7, r2
 8003a0c:	8812      	ldrh	r2, [r2, #0]
 8003a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a16:	1dbb      	adds	r3, r7, #6
 8003a18:	881c      	ldrh	r4, [r3, #0]
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	881a      	ldrh	r2, [r3, #0]
 8003a20:	230a      	movs	r3, #10
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	8819      	ldrh	r1, [r3, #0]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	0023      	movs	r3, r4
 8003a32:	f000 f92f 	bl	8003c94 <I2C_RequestMemoryRead>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2240      	movs	r2, #64	; 0x40
 8003a3e:	2100      	movs	r1, #0
 8003a40:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e0b9      	b.n	8003bba <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2bff      	cmp	r3, #255	; 0xff
 8003a4e:	d911      	bls.n	8003a74 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	22ff      	movs	r2, #255	; 0xff
 8003a54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	045c      	lsls	r4, r3, #17
 8003a60:	230a      	movs	r3, #10
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	8819      	ldrh	r1, [r3, #0]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	4b56      	ldr	r3, [pc, #344]	; (8003bc4 <HAL_I2C_Mem_Read+0x260>)
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	0023      	movs	r3, r4
 8003a6e:	f000 fab5 	bl	8003fdc <I2C_TransferConfig>
 8003a72:	e012      	b.n	8003a9a <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	049c      	lsls	r4, r3, #18
 8003a88:	230a      	movs	r3, #10
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	8819      	ldrh	r1, [r3, #0]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <HAL_I2C_Mem_Read+0x260>)
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	0023      	movs	r3, r4
 8003a96:	f000 faa1 	bl	8003fdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	0013      	movs	r3, r2
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2104      	movs	r1, #4
 8003aa8:	f000 f978 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 8003aac:	1e03      	subs	r3, r0, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e082      	b.n	8003bba <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d03a      	beq.n	8003b66 <HAL_I2C_Mem_Read+0x202>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d136      	bne.n	8003b66 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	0013      	movs	r3, r2
 8003b02:	2200      	movs	r2, #0
 8003b04:	2180      	movs	r1, #128	; 0x80
 8003b06:	f000 f949 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 8003b0a:	1e03      	subs	r3, r0, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e053      	b.n	8003bba <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2bff      	cmp	r3, #255	; 0xff
 8003b1a:	d911      	bls.n	8003b40 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	22ff      	movs	r2, #255	; 0xff
 8003b20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	045c      	lsls	r4, r3, #17
 8003b2c:	230a      	movs	r3, #10
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	8819      	ldrh	r1, [r3, #0]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	2300      	movs	r3, #0
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	0023      	movs	r3, r4
 8003b3a:	f000 fa4f 	bl	8003fdc <I2C_TransferConfig>
 8003b3e:	e012      	b.n	8003b66 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	049c      	lsls	r4, r3, #18
 8003b54:	230a      	movs	r3, #10
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	8819      	ldrh	r1, [r3, #0]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	0023      	movs	r3, r4
 8003b62:	f000 fa3b 	bl	8003fdc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d194      	bne.n	8003a9a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f000 f98e 	bl	8003e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b7c:	1e03      	subs	r3, r0, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e01a      	b.n	8003bba <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	490c      	ldr	r1, [pc, #48]	; (8003bc8 <HAL_I2C_Mem_Read+0x264>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2241      	movs	r2, #65	; 0x41
 8003ba0:	2120      	movs	r1, #32
 8003ba2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2242      	movs	r2, #66	; 0x42
 8003ba8:	2100      	movs	r1, #0
 8003baa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2240      	movs	r2, #64	; 0x40
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e000      	b.n	8003bba <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
  }
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b007      	add	sp, #28
 8003bc0:	bd90      	pop	{r4, r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	80002400 	.word	0x80002400
 8003bc8:	fe00e800 	.word	0xfe00e800

08003bcc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b5b0      	push	{r4, r5, r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	000c      	movs	r4, r1
 8003bd6:	0010      	movs	r0, r2
 8003bd8:	0019      	movs	r1, r3
 8003bda:	250a      	movs	r5, #10
 8003bdc:	197b      	adds	r3, r7, r5
 8003bde:	1c22      	adds	r2, r4, #0
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	2308      	movs	r3, #8
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	1c02      	adds	r2, r0, #0
 8003be8:	801a      	strh	r2, [r3, #0]
 8003bea:	1dbb      	adds	r3, r7, #6
 8003bec:	1c0a      	adds	r2, r1, #0
 8003bee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bf0:	1dbb      	adds	r3, r7, #6
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	045c      	lsls	r4, r3, #17
 8003bfa:	197b      	adds	r3, r7, r5
 8003bfc:	8819      	ldrh	r1, [r3, #0]
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <I2C_RequestMemoryWrite+0xc4>)
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	0023      	movs	r3, r4
 8003c06:	f000 f9e9 	bl	8003fdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0c:	6a39      	ldr	r1, [r7, #32]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	0018      	movs	r0, r3
 8003c12:	f000 f902 	bl	8003e1a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c16:	1e03      	subs	r3, r0, #0
 8003c18:	d001      	beq.n	8003c1e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e033      	b.n	8003c86 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c1e:	1dbb      	adds	r3, r7, #6
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c26:	2308      	movs	r3, #8
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28
 8003c34:	e019      	b.n	8003c6a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c36:	2308      	movs	r3, #8
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4a:	6a39      	ldr	r1, [r7, #32]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 f8e3 	bl	8003e1a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c54:	1e03      	subs	r3, r0, #0
 8003c56:	d001      	beq.n	8003c5c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e014      	b.n	8003c86 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6a:	6a3a      	ldr	r2, [r7, #32]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	0013      	movs	r3, r2
 8003c74:	2200      	movs	r2, #0
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	f000 f890 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 8003c7c:	1e03      	subs	r3, r0, #0
 8003c7e:	d001      	beq.n	8003c84 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b004      	add	sp, #16
 8003c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	80002000 	.word	0x80002000

08003c94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b5b0      	push	{r4, r5, r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	000c      	movs	r4, r1
 8003c9e:	0010      	movs	r0, r2
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	250a      	movs	r5, #10
 8003ca4:	197b      	adds	r3, r7, r5
 8003ca6:	1c22      	adds	r2, r4, #0
 8003ca8:	801a      	strh	r2, [r3, #0]
 8003caa:	2308      	movs	r3, #8
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	1c02      	adds	r2, r0, #0
 8003cb0:	801a      	strh	r2, [r3, #0]
 8003cb2:	1dbb      	adds	r3, r7, #6
 8003cb4:	1c0a      	adds	r2, r1, #0
 8003cb6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003cb8:	1dbb      	adds	r3, r7, #6
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	197b      	adds	r3, r7, r5
 8003cc0:	8819      	ldrh	r1, [r3, #0]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <I2C_RequestMemoryRead+0xc0>)
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f000 f987 	bl	8003fdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd0:	6a39      	ldr	r1, [r7, #32]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f000 f8a0 	bl	8003e1a <I2C_WaitOnTXISFlagUntilTimeout>
 8003cda:	1e03      	subs	r3, r0, #0
 8003cdc:	d001      	beq.n	8003ce2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e033      	b.n	8003d4a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ce2:	1dbb      	adds	r3, r7, #6
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d107      	bne.n	8003cfa <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cea:	2308      	movs	r3, #8
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cf8:	e019      	b.n	8003d2e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0e:	6a39      	ldr	r1, [r7, #32]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	0018      	movs	r0, r3
 8003d14:	f000 f881 	bl	8003e1a <I2C_WaitOnTXISFlagUntilTimeout>
 8003d18:	1e03      	subs	r3, r0, #0
 8003d1a:	d001      	beq.n	8003d20 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e014      	b.n	8003d4a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d20:	2308      	movs	r3, #8
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d2e:	6a3a      	ldr	r2, [r7, #32]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	0013      	movs	r3, r2
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2140      	movs	r1, #64	; 0x40
 8003d3c:	f000 f82e 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d001      	beq.n	8003d48 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b004      	add	sp, #16
 8003d50:	bdb0      	pop	{r4, r5, r7, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	80002000 	.word	0x80002000

08003d58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2202      	movs	r2, #2
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d103      	bne.n	8003d76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2200      	movs	r2, #0
 8003d74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d007      	beq.n	8003d94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2101      	movs	r1, #1
 8003d90:	430a      	orrs	r2, r1
 8003d92:	619a      	str	r2, [r3, #24]
  }
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b002      	add	sp, #8
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	1dfb      	adds	r3, r7, #7
 8003daa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dac:	e021      	b.n	8003df2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	d01e      	beq.n	8003df2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db4:	f7fe ff04 	bl	8002bc0 <HAL_GetTick>
 8003db8:	0002      	movs	r2, r0
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d302      	bcc.n	8003dca <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d113      	bne.n	8003df2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	2220      	movs	r2, #32
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2241      	movs	r2, #65	; 0x41
 8003dda:	2120      	movs	r1, #32
 8003ddc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2242      	movs	r2, #66	; 0x42
 8003de2:	2100      	movs	r1, #0
 8003de4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2240      	movs	r2, #64	; 0x40
 8003dea:	2100      	movs	r1, #0
 8003dec:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e00f      	b.n	8003e12 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	425a      	negs	r2, r3
 8003e02:	4153      	adcs	r3, r2
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	001a      	movs	r2, r3
 8003e08:	1dfb      	adds	r3, r7, #7
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d0ce      	beq.n	8003dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b004      	add	sp, #16
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e26:	e02b      	b.n	8003e80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 f86e 	bl	8003f10 <I2C_IsAcknowledgeFailed>
 8003e34:	1e03      	subs	r3, r0, #0
 8003e36:	d001      	beq.n	8003e3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e029      	b.n	8003e90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	d01e      	beq.n	8003e80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fe febd 	bl	8002bc0 <HAL_GetTick>
 8003e46:	0002      	movs	r2, r0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d113      	bne.n	8003e80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2241      	movs	r2, #65	; 0x41
 8003e68:	2120      	movs	r1, #32
 8003e6a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2242      	movs	r2, #66	; 0x42
 8003e70:	2100      	movs	r1, #0
 8003e72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2240      	movs	r2, #64	; 0x40
 8003e78:	2100      	movs	r1, #0
 8003e7a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e007      	b.n	8003e90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2202      	movs	r2, #2
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d1cc      	bne.n	8003e28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	0018      	movs	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b004      	add	sp, #16
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea4:	e028      	b.n	8003ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f000 f82f 	bl	8003f10 <I2C_IsAcknowledgeFailed>
 8003eb2:	1e03      	subs	r3, r0, #0
 8003eb4:	d001      	beq.n	8003eba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e026      	b.n	8003f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eba:	f7fe fe81 	bl	8002bc0 <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d113      	bne.n	8003ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2241      	movs	r2, #65	; 0x41
 8003ee0:	2120      	movs	r1, #32
 8003ee2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2242      	movs	r2, #66	; 0x42
 8003ee8:	2100      	movs	r1, #0
 8003eea:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2240      	movs	r2, #64	; 0x40
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e007      	b.n	8003f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2220      	movs	r2, #32
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d1cf      	bne.n	8003ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	0018      	movs	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b004      	add	sp, #16
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2210      	movs	r2, #16
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d151      	bne.n	8003fce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f2a:	e021      	b.n	8003f70 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	d01e      	beq.n	8003f70 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7fe fe45 	bl	8002bc0 <HAL_GetTick>
 8003f36:	0002      	movs	r2, r0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <I2C_IsAcknowledgeFailed+0x38>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d113      	bne.n	8003f70 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2241      	movs	r2, #65	; 0x41
 8003f58:	2120      	movs	r1, #32
 8003f5a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2242      	movs	r2, #66	; 0x42
 8003f60:	2100      	movs	r1, #0
 8003f62:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2240      	movs	r2, #64	; 0x40
 8003f68:	2100      	movs	r1, #0
 8003f6a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e02f      	b.n	8003fd0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2220      	movs	r2, #32
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d1d6      	bne.n	8003f2c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2210      	movs	r2, #16
 8003f84:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	0018      	movs	r0, r3
 8003f92:	f7ff fee1 	bl	8003d58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	490d      	ldr	r1, [pc, #52]	; (8003fd8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	2204      	movs	r2, #4
 8003fac:	431a      	orrs	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2241      	movs	r2, #65	; 0x41
 8003fb6:	2120      	movs	r1, #32
 8003fb8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2242      	movs	r2, #66	; 0x42
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2240      	movs	r2, #64	; 0x40
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b004      	add	sp, #16
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	fe00e800 	.word	0xfe00e800

08003fdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	0008      	movs	r0, r1
 8003fe6:	0011      	movs	r1, r2
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	240a      	movs	r4, #10
 8003fec:	193b      	adds	r3, r7, r4
 8003fee:	1c02      	adds	r2, r0, #0
 8003ff0:	801a      	strh	r2, [r3, #0]
 8003ff2:	2009      	movs	r0, #9
 8003ff4:	183b      	adds	r3, r7, r0
 8003ff6:	1c0a      	adds	r2, r1, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	0d51      	lsrs	r1, r2, #21
 8004004:	2280      	movs	r2, #128	; 0x80
 8004006:	00d2      	lsls	r2, r2, #3
 8004008:	400a      	ands	r2, r1
 800400a:	490e      	ldr	r1, [pc, #56]	; (8004044 <I2C_TransferConfig+0x68>)
 800400c:	430a      	orrs	r2, r1
 800400e:	43d2      	mvns	r2, r2
 8004010:	401a      	ands	r2, r3
 8004012:	0011      	movs	r1, r2
 8004014:	193b      	adds	r3, r7, r4
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	059b      	lsls	r3, r3, #22
 800401a:	0d9a      	lsrs	r2, r3, #22
 800401c:	183b      	adds	r3, r7, r0
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	0418      	lsls	r0, r3, #16
 8004022:	23ff      	movs	r3, #255	; 0xff
 8004024:	041b      	lsls	r3, r3, #16
 8004026:	4003      	ands	r3, r0
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	431a      	orrs	r2, r3
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	431a      	orrs	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b005      	add	sp, #20
 8004040:	bd90      	pop	{r4, r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	03ff63ff 	.word	0x03ff63ff

08004048 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2241      	movs	r2, #65	; 0x41
 8004056:	5c9b      	ldrb	r3, [r3, r2]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b20      	cmp	r3, #32
 800405c:	d138      	bne.n	80040d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2240      	movs	r2, #64	; 0x40
 8004062:	5c9b      	ldrb	r3, [r3, r2]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004068:	2302      	movs	r3, #2
 800406a:	e032      	b.n	80040d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2240      	movs	r2, #64	; 0x40
 8004070:	2101      	movs	r1, #1
 8004072:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2241      	movs	r2, #65	; 0x41
 8004078:	2124      	movs	r1, #36	; 0x24
 800407a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2101      	movs	r1, #1
 8004088:	438a      	bics	r2, r1
 800408a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4911      	ldr	r1, [pc, #68]	; (80040dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004098:	400a      	ands	r2, r1
 800409a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6819      	ldr	r1, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2101      	movs	r1, #1
 80040b8:	430a      	orrs	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2241      	movs	r2, #65	; 0x41
 80040c0:	2120      	movs	r1, #32
 80040c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2240      	movs	r2, #64	; 0x40
 80040c8:	2100      	movs	r1, #0
 80040ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	e000      	b.n	80040d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040d0:	2302      	movs	r3, #2
  }
}
 80040d2:	0018      	movs	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b002      	add	sp, #8
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	ffffefff 	.word	0xffffefff

080040e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2241      	movs	r2, #65	; 0x41
 80040ee:	5c9b      	ldrb	r3, [r3, r2]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d139      	bne.n	800416a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2240      	movs	r2, #64	; 0x40
 80040fa:	5c9b      	ldrb	r3, [r3, r2]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004100:	2302      	movs	r3, #2
 8004102:	e033      	b.n	800416c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2240      	movs	r2, #64	; 0x40
 8004108:	2101      	movs	r1, #1
 800410a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2241      	movs	r2, #65	; 0x41
 8004110:	2124      	movs	r1, #36	; 0x24
 8004112:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2101      	movs	r1, #1
 8004120:	438a      	bics	r2, r1
 8004122:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4a11      	ldr	r2, [pc, #68]	; (8004174 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2101      	movs	r1, #1
 8004152:	430a      	orrs	r2, r1
 8004154:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2241      	movs	r2, #65	; 0x41
 800415a:	2120      	movs	r1, #32
 800415c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2240      	movs	r2, #64	; 0x40
 8004162:	2100      	movs	r1, #0
 8004164:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	e000      	b.n	800416c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800416a:	2302      	movs	r3, #2
  }
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	b004      	add	sp, #16
 8004172:	bd80      	pop	{r7, pc}
 8004174:	fffff0ff 	.word	0xfffff0ff

08004178 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004180:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a19      	ldr	r2, [pc, #100]	; (80041ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004186:	4013      	ands	r3, r2
 8004188:	0019      	movs	r1, r3
 800418a:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	430a      	orrs	r2, r1
 8004190:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	429a      	cmp	r2, r3
 800419a:	d11f      	bne.n	80041dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800419c:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	0013      	movs	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	189b      	adds	r3, r3, r2
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	4912      	ldr	r1, [pc, #72]	; (80041f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80041aa:	0018      	movs	r0, r3
 80041ac:	f7fb ffce 	bl	800014c <__udivsi3>
 80041b0:	0003      	movs	r3, r0
 80041b2:	3301      	adds	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041b6:	e008      	b.n	80041ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e001      	b.n	80041ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e009      	b.n	80041de <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	401a      	ands	r2, r3
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	429a      	cmp	r2, r3
 80041da:	d0ed      	beq.n	80041b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b004      	add	sp, #16
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	40007000 	.word	0x40007000
 80041ec:	fffff9ff 	.word	0xfffff9ff
 80041f0:	20000004 	.word	0x20000004
 80041f4:	000f4240 	.word	0x000f4240

080041f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <LL_RCC_GetAPB1Prescaler+0x14>)
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	23e0      	movs	r3, #224	; 0xe0
 8004202:	01db      	lsls	r3, r3, #7
 8004204:	4013      	ands	r3, r2
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40021000 	.word	0x40021000

08004210 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e2f9      	b.n	8004816 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2201      	movs	r2, #1
 8004228:	4013      	ands	r3, r2
 800422a:	d100      	bne.n	800422e <HAL_RCC_OscConfig+0x1e>
 800422c:	e07c      	b.n	8004328 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800422e:	4bc3      	ldr	r3, [pc, #780]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2238      	movs	r2, #56	; 0x38
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004238:	4bc0      	ldr	r3, [pc, #768]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2203      	movs	r2, #3
 800423e:	4013      	ands	r3, r2
 8004240:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b10      	cmp	r3, #16
 8004246:	d102      	bne.n	800424e <HAL_RCC_OscConfig+0x3e>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d002      	beq.n	8004254 <HAL_RCC_OscConfig+0x44>
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d10b      	bne.n	800426c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004254:	4bb9      	ldr	r3, [pc, #740]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	029b      	lsls	r3, r3, #10
 800425c:	4013      	ands	r3, r2
 800425e:	d062      	beq.n	8004326 <HAL_RCC_OscConfig+0x116>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d15e      	bne.n	8004326 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e2d4      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	025b      	lsls	r3, r3, #9
 8004274:	429a      	cmp	r2, r3
 8004276:	d107      	bne.n	8004288 <HAL_RCC_OscConfig+0x78>
 8004278:	4bb0      	ldr	r3, [pc, #704]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4baf      	ldr	r3, [pc, #700]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 800427e:	2180      	movs	r1, #128	; 0x80
 8004280:	0249      	lsls	r1, r1, #9
 8004282:	430a      	orrs	r2, r1
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e020      	b.n	80042ca <HAL_RCC_OscConfig+0xba>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	23a0      	movs	r3, #160	; 0xa0
 800428e:	02db      	lsls	r3, r3, #11
 8004290:	429a      	cmp	r2, r3
 8004292:	d10e      	bne.n	80042b2 <HAL_RCC_OscConfig+0xa2>
 8004294:	4ba9      	ldr	r3, [pc, #676]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4ba8      	ldr	r3, [pc, #672]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 800429a:	2180      	movs	r1, #128	; 0x80
 800429c:	02c9      	lsls	r1, r1, #11
 800429e:	430a      	orrs	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	4ba6      	ldr	r3, [pc, #664]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4ba5      	ldr	r3, [pc, #660]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80042a8:	2180      	movs	r1, #128	; 0x80
 80042aa:	0249      	lsls	r1, r1, #9
 80042ac:	430a      	orrs	r2, r1
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	e00b      	b.n	80042ca <HAL_RCC_OscConfig+0xba>
 80042b2:	4ba2      	ldr	r3, [pc, #648]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4ba1      	ldr	r3, [pc, #644]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80042b8:	49a1      	ldr	r1, [pc, #644]	; (8004540 <HAL_RCC_OscConfig+0x330>)
 80042ba:	400a      	ands	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	4b9f      	ldr	r3, [pc, #636]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b9e      	ldr	r3, [pc, #632]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80042c4:	499f      	ldr	r1, [pc, #636]	; (8004544 <HAL_RCC_OscConfig+0x334>)
 80042c6:	400a      	ands	r2, r1
 80042c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d014      	beq.n	80042fc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fe fc75 	bl	8002bc0 <HAL_GetTick>
 80042d6:	0003      	movs	r3, r0
 80042d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042dc:	f7fe fc70 	bl	8002bc0 <HAL_GetTick>
 80042e0:	0002      	movs	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b64      	cmp	r3, #100	; 0x64
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e293      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ee:	4b93      	ldr	r3, [pc, #588]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	029b      	lsls	r3, r3, #10
 80042f6:	4013      	ands	r3, r2
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0xcc>
 80042fa:	e015      	b.n	8004328 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fe fc60 	bl	8002bc0 <HAL_GetTick>
 8004300:	0003      	movs	r3, r0
 8004302:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004306:	f7fe fc5b 	bl	8002bc0 <HAL_GetTick>
 800430a:	0002      	movs	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b64      	cmp	r3, #100	; 0x64
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e27e      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004318:	4b88      	ldr	r3, [pc, #544]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	029b      	lsls	r3, r3, #10
 8004320:	4013      	ands	r3, r2
 8004322:	d1f0      	bne.n	8004306 <HAL_RCC_OscConfig+0xf6>
 8004324:	e000      	b.n	8004328 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004326:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2202      	movs	r2, #2
 800432e:	4013      	ands	r3, r2
 8004330:	d100      	bne.n	8004334 <HAL_RCC_OscConfig+0x124>
 8004332:	e099      	b.n	8004468 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004334:	4b81      	ldr	r3, [pc, #516]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2238      	movs	r2, #56	; 0x38
 800433a:	4013      	ands	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800433e:	4b7f      	ldr	r3, [pc, #508]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2203      	movs	r2, #3
 8004344:	4013      	ands	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	2b10      	cmp	r3, #16
 800434c:	d102      	bne.n	8004354 <HAL_RCC_OscConfig+0x144>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d002      	beq.n	800435a <HAL_RCC_OscConfig+0x14a>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d135      	bne.n	80043c6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800435a:	4b78      	ldr	r3, [pc, #480]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4013      	ands	r3, r2
 8004364:	d005      	beq.n	8004372 <HAL_RCC_OscConfig+0x162>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e251      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004372:	4b72      	ldr	r3, [pc, #456]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4a74      	ldr	r2, [pc, #464]	; (8004548 <HAL_RCC_OscConfig+0x338>)
 8004378:	4013      	ands	r3, r2
 800437a:	0019      	movs	r1, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	021a      	lsls	r2, r3, #8
 8004382:	4b6e      	ldr	r3, [pc, #440]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d112      	bne.n	80043b4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800438e:	4b6b      	ldr	r3, [pc, #428]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a6e      	ldr	r2, [pc, #440]	; (800454c <HAL_RCC_OscConfig+0x33c>)
 8004394:	4013      	ands	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	4b67      	ldr	r3, [pc, #412]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 800439e:	430a      	orrs	r2, r1
 80043a0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80043a2:	4b66      	ldr	r3, [pc, #408]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	0adb      	lsrs	r3, r3, #11
 80043a8:	2207      	movs	r2, #7
 80043aa:	4013      	ands	r3, r2
 80043ac:	4a68      	ldr	r2, [pc, #416]	; (8004550 <HAL_RCC_OscConfig+0x340>)
 80043ae:	40da      	lsrs	r2, r3
 80043b0:	4b68      	ldr	r3, [pc, #416]	; (8004554 <HAL_RCC_OscConfig+0x344>)
 80043b2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043b4:	4b68      	ldr	r3, [pc, #416]	; (8004558 <HAL_RCC_OscConfig+0x348>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f7fe fba5 	bl	8002b08 <HAL_InitTick>
 80043be:	1e03      	subs	r3, r0, #0
 80043c0:	d051      	beq.n	8004466 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e227      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d030      	beq.n	8004430 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043ce:	4b5b      	ldr	r3, [pc, #364]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a5e      	ldr	r2, [pc, #376]	; (800454c <HAL_RCC_OscConfig+0x33c>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	0019      	movs	r1, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	4b57      	ldr	r3, [pc, #348]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80043de:	430a      	orrs	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80043e2:	4b56      	ldr	r3, [pc, #344]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b55      	ldr	r3, [pc, #340]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	0049      	lsls	r1, r1, #1
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fe fbe6 	bl	8002bc0 <HAL_GetTick>
 80043f4:	0003      	movs	r3, r0
 80043f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043fa:	f7fe fbe1 	bl	8002bc0 <HAL_GetTick>
 80043fe:	0002      	movs	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e204      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800440c:	4b4b      	ldr	r3, [pc, #300]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	2380      	movs	r3, #128	; 0x80
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4013      	ands	r3, r2
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004418:	4b48      	ldr	r3, [pc, #288]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	4a4a      	ldr	r2, [pc, #296]	; (8004548 <HAL_RCC_OscConfig+0x338>)
 800441e:	4013      	ands	r3, r2
 8004420:	0019      	movs	r1, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	021a      	lsls	r2, r3, #8
 8004428:	4b44      	ldr	r3, [pc, #272]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	e01b      	b.n	8004468 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004430:	4b42      	ldr	r3, [pc, #264]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4b41      	ldr	r3, [pc, #260]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004436:	4949      	ldr	r1, [pc, #292]	; (800455c <HAL_RCC_OscConfig+0x34c>)
 8004438:	400a      	ands	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fe fbc0 	bl	8002bc0 <HAL_GetTick>
 8004440:	0003      	movs	r3, r0
 8004442:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004446:	f7fe fbbb 	bl	8002bc0 <HAL_GetTick>
 800444a:	0002      	movs	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e1de      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004458:	4b38      	ldr	r3, [pc, #224]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4013      	ands	r3, r2
 8004462:	d1f0      	bne.n	8004446 <HAL_RCC_OscConfig+0x236>
 8004464:	e000      	b.n	8004468 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004466:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2208      	movs	r2, #8
 800446e:	4013      	ands	r3, r2
 8004470:	d047      	beq.n	8004502 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004472:	4b32      	ldr	r3, [pc, #200]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2238      	movs	r2, #56	; 0x38
 8004478:	4013      	ands	r3, r2
 800447a:	2b18      	cmp	r3, #24
 800447c:	d10a      	bne.n	8004494 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800447e:	4b2f      	ldr	r3, [pc, #188]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004482:	2202      	movs	r2, #2
 8004484:	4013      	ands	r3, r2
 8004486:	d03c      	beq.n	8004502 <HAL_RCC_OscConfig+0x2f2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d138      	bne.n	8004502 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e1c0      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d019      	beq.n	80044d0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800449c:	4b27      	ldr	r3, [pc, #156]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 800449e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044a0:	4b26      	ldr	r3, [pc, #152]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80044a2:	2101      	movs	r1, #1
 80044a4:	430a      	orrs	r2, r1
 80044a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fe fb8a 	bl	8002bc0 <HAL_GetTick>
 80044ac:	0003      	movs	r3, r0
 80044ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b2:	f7fe fb85 	bl	8002bc0 <HAL_GetTick>
 80044b6:	0002      	movs	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e1a8      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80044c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c8:	2202      	movs	r2, #2
 80044ca:	4013      	ands	r3, r2
 80044cc:	d0f1      	beq.n	80044b2 <HAL_RCC_OscConfig+0x2a2>
 80044ce:	e018      	b.n	8004502 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80044d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044d4:	4b19      	ldr	r3, [pc, #100]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80044d6:	2101      	movs	r1, #1
 80044d8:	438a      	bics	r2, r1
 80044da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fe fb70 	bl	8002bc0 <HAL_GetTick>
 80044e0:	0003      	movs	r3, r0
 80044e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e6:	f7fe fb6b 	bl	8002bc0 <HAL_GetTick>
 80044ea:	0002      	movs	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e18e      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044f8:	4b10      	ldr	r3, [pc, #64]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 80044fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fc:	2202      	movs	r2, #2
 80044fe:	4013      	ands	r3, r2
 8004500:	d1f1      	bne.n	80044e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2204      	movs	r2, #4
 8004508:	4013      	ands	r3, r2
 800450a:	d100      	bne.n	800450e <HAL_RCC_OscConfig+0x2fe>
 800450c:	e0c6      	b.n	800469c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450e:	231f      	movs	r3, #31
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004516:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2238      	movs	r2, #56	; 0x38
 800451c:	4013      	ands	r3, r2
 800451e:	2b20      	cmp	r3, #32
 8004520:	d11e      	bne.n	8004560 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_RCC_OscConfig+0x32c>)
 8004524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004526:	2202      	movs	r2, #2
 8004528:	4013      	ands	r3, r2
 800452a:	d100      	bne.n	800452e <HAL_RCC_OscConfig+0x31e>
 800452c:	e0b6      	b.n	800469c <HAL_RCC_OscConfig+0x48c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d000      	beq.n	8004538 <HAL_RCC_OscConfig+0x328>
 8004536:	e0b1      	b.n	800469c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e16c      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
 800453c:	40021000 	.word	0x40021000
 8004540:	fffeffff 	.word	0xfffeffff
 8004544:	fffbffff 	.word	0xfffbffff
 8004548:	ffff80ff 	.word	0xffff80ff
 800454c:	ffffc7ff 	.word	0xffffc7ff
 8004550:	00f42400 	.word	0x00f42400
 8004554:	20000004 	.word	0x20000004
 8004558:	20000008 	.word	0x20000008
 800455c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004560:	4baf      	ldr	r3, [pc, #700]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004564:	2380      	movs	r3, #128	; 0x80
 8004566:	055b      	lsls	r3, r3, #21
 8004568:	4013      	ands	r3, r2
 800456a:	d101      	bne.n	8004570 <HAL_RCC_OscConfig+0x360>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x362>
 8004570:	2300      	movs	r3, #0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d011      	beq.n	800459a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004576:	4baa      	ldr	r3, [pc, #680]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800457a:	4ba9      	ldr	r3, [pc, #676]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 800457c:	2180      	movs	r1, #128	; 0x80
 800457e:	0549      	lsls	r1, r1, #21
 8004580:	430a      	orrs	r2, r1
 8004582:	63da      	str	r2, [r3, #60]	; 0x3c
 8004584:	4ba6      	ldr	r3, [pc, #664]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	055b      	lsls	r3, r3, #21
 800458c:	4013      	ands	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004592:	231f      	movs	r3, #31
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	2201      	movs	r2, #1
 8004598:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800459a:	4ba2      	ldr	r3, [pc, #648]	; (8004824 <HAL_RCC_OscConfig+0x614>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	4013      	ands	r3, r2
 80045a4:	d11a      	bne.n	80045dc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045a6:	4b9f      	ldr	r3, [pc, #636]	; (8004824 <HAL_RCC_OscConfig+0x614>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b9e      	ldr	r3, [pc, #632]	; (8004824 <HAL_RCC_OscConfig+0x614>)
 80045ac:	2180      	movs	r1, #128	; 0x80
 80045ae:	0049      	lsls	r1, r1, #1
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80045b4:	f7fe fb04 	bl	8002bc0 <HAL_GetTick>
 80045b8:	0003      	movs	r3, r0
 80045ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045be:	f7fe faff 	bl	8002bc0 <HAL_GetTick>
 80045c2:	0002      	movs	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e122      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d0:	4b94      	ldr	r3, [pc, #592]	; (8004824 <HAL_RCC_OscConfig+0x614>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	4013      	ands	r3, r2
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d106      	bne.n	80045f2 <HAL_RCC_OscConfig+0x3e2>
 80045e4:	4b8e      	ldr	r3, [pc, #568]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 80045e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045e8:	4b8d      	ldr	r3, [pc, #564]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 80045ea:	2101      	movs	r1, #1
 80045ec:	430a      	orrs	r2, r1
 80045ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80045f0:	e01c      	b.n	800462c <HAL_RCC_OscConfig+0x41c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d10c      	bne.n	8004614 <HAL_RCC_OscConfig+0x404>
 80045fa:	4b89      	ldr	r3, [pc, #548]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 80045fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045fe:	4b88      	ldr	r3, [pc, #544]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004600:	2104      	movs	r1, #4
 8004602:	430a      	orrs	r2, r1
 8004604:	65da      	str	r2, [r3, #92]	; 0x5c
 8004606:	4b86      	ldr	r3, [pc, #536]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004608:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800460a:	4b85      	ldr	r3, [pc, #532]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 800460c:	2101      	movs	r1, #1
 800460e:	430a      	orrs	r2, r1
 8004610:	65da      	str	r2, [r3, #92]	; 0x5c
 8004612:	e00b      	b.n	800462c <HAL_RCC_OscConfig+0x41c>
 8004614:	4b82      	ldr	r3, [pc, #520]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004616:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004618:	4b81      	ldr	r3, [pc, #516]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 800461a:	2101      	movs	r1, #1
 800461c:	438a      	bics	r2, r1
 800461e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004620:	4b7f      	ldr	r3, [pc, #508]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004622:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004624:	4b7e      	ldr	r3, [pc, #504]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004626:	2104      	movs	r1, #4
 8004628:	438a      	bics	r2, r1
 800462a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d014      	beq.n	800465e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fe fac4 	bl	8002bc0 <HAL_GetTick>
 8004638:	0003      	movs	r3, r0
 800463a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800463c:	e009      	b.n	8004652 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463e:	f7fe fabf 	bl	8002bc0 <HAL_GetTick>
 8004642:	0002      	movs	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	4a77      	ldr	r2, [pc, #476]	; (8004828 <HAL_RCC_OscConfig+0x618>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e0e1      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004652:	4b73      	ldr	r3, [pc, #460]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004656:	2202      	movs	r2, #2
 8004658:	4013      	ands	r3, r2
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x42e>
 800465c:	e013      	b.n	8004686 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465e:	f7fe faaf 	bl	8002bc0 <HAL_GetTick>
 8004662:	0003      	movs	r3, r0
 8004664:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004666:	e009      	b.n	800467c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004668:	f7fe faaa 	bl	8002bc0 <HAL_GetTick>
 800466c:	0002      	movs	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	4a6d      	ldr	r2, [pc, #436]	; (8004828 <HAL_RCC_OscConfig+0x618>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e0cc      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800467c:	4b68      	ldr	r3, [pc, #416]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 800467e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004680:	2202      	movs	r2, #2
 8004682:	4013      	ands	r3, r2
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004686:	231f      	movs	r3, #31
 8004688:	18fb      	adds	r3, r7, r3
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d105      	bne.n	800469c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004690:	4b63      	ldr	r3, [pc, #396]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004694:	4b62      	ldr	r3, [pc, #392]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004696:	4965      	ldr	r1, [pc, #404]	; (800482c <HAL_RCC_OscConfig+0x61c>)
 8004698:	400a      	ands	r2, r1
 800469a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d100      	bne.n	80046a6 <HAL_RCC_OscConfig+0x496>
 80046a4:	e0b6      	b.n	8004814 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a6:	4b5e      	ldr	r3, [pc, #376]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2238      	movs	r2, #56	; 0x38
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b10      	cmp	r3, #16
 80046b0:	d100      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4a4>
 80046b2:	e07e      	b.n	80047b2 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d153      	bne.n	8004764 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046bc:	4b58      	ldr	r3, [pc, #352]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4b57      	ldr	r3, [pc, #348]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 80046c2:	495b      	ldr	r1, [pc, #364]	; (8004830 <HAL_RCC_OscConfig+0x620>)
 80046c4:	400a      	ands	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c8:	f7fe fa7a 	bl	8002bc0 <HAL_GetTick>
 80046cc:	0003      	movs	r3, r0
 80046ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fe fa75 	bl	8002bc0 <HAL_GetTick>
 80046d6:	0002      	movs	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e098      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e4:	4b4e      	ldr	r3, [pc, #312]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	049b      	lsls	r3, r3, #18
 80046ec:	4013      	ands	r3, r2
 80046ee:	d1f0      	bne.n	80046d2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f0:	4b4b      	ldr	r3, [pc, #300]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4a4f      	ldr	r2, [pc, #316]	; (8004834 <HAL_RCC_OscConfig+0x624>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	0019      	movs	r1, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1a      	ldr	r2, [r3, #32]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	431a      	orrs	r2, r3
 8004718:	4b41      	ldr	r3, [pc, #260]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 800471a:	430a      	orrs	r2, r1
 800471c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800471e:	4b40      	ldr	r3, [pc, #256]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b3f      	ldr	r3, [pc, #252]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004724:	2180      	movs	r1, #128	; 0x80
 8004726:	0449      	lsls	r1, r1, #17
 8004728:	430a      	orrs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800472c:	4b3c      	ldr	r3, [pc, #240]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	4b3b      	ldr	r3, [pc, #236]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004732:	2180      	movs	r1, #128	; 0x80
 8004734:	0549      	lsls	r1, r1, #21
 8004736:	430a      	orrs	r2, r1
 8004738:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473a:	f7fe fa41 	bl	8002bc0 <HAL_GetTick>
 800473e:	0003      	movs	r3, r0
 8004740:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004744:	f7fe fa3c 	bl	8002bc0 <HAL_GetTick>
 8004748:	0002      	movs	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e05f      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004756:	4b32      	ldr	r3, [pc, #200]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	049b      	lsls	r3, r3, #18
 800475e:	4013      	ands	r3, r2
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x534>
 8004762:	e057      	b.n	8004814 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004764:	4b2e      	ldr	r3, [pc, #184]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b2d      	ldr	r3, [pc, #180]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 800476a:	4931      	ldr	r1, [pc, #196]	; (8004830 <HAL_RCC_OscConfig+0x620>)
 800476c:	400a      	ands	r2, r1
 800476e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004770:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	4b2a      	ldr	r3, [pc, #168]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004776:	2103      	movs	r1, #3
 8004778:	438a      	bics	r2, r1
 800477a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800477c:	4b28      	ldr	r3, [pc, #160]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	4b27      	ldr	r3, [pc, #156]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 8004782:	492d      	ldr	r1, [pc, #180]	; (8004838 <HAL_RCC_OscConfig+0x628>)
 8004784:	400a      	ands	r2, r1
 8004786:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fe fa1a 	bl	8002bc0 <HAL_GetTick>
 800478c:	0003      	movs	r3, r0
 800478e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004792:	f7fe fa15 	bl	8002bc0 <HAL_GetTick>
 8004796:	0002      	movs	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e038      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a4:	4b1e      	ldr	r3, [pc, #120]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	049b      	lsls	r3, r3, #18
 80047ac:	4013      	ands	r3, r2
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x582>
 80047b0:	e030      	b.n	8004814 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e02b      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80047be:	4b18      	ldr	r3, [pc, #96]	; (8004820 <HAL_RCC_OscConfig+0x610>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2203      	movs	r2, #3
 80047c8:	401a      	ands	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d11e      	bne.n	8004810 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2270      	movs	r2, #112	; 0x70
 80047d6:	401a      	ands	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d117      	bne.n	8004810 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	23fe      	movs	r3, #254	; 0xfe
 80047e4:	01db      	lsls	r3, r3, #7
 80047e6:	401a      	ands	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d10e      	bne.n	8004810 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	23f8      	movs	r3, #248	; 0xf8
 80047f6:	039b      	lsls	r3, r3, #14
 80047f8:	401a      	ands	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d106      	bne.n	8004810 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	0f5b      	lsrs	r3, r3, #29
 8004806:	075a      	lsls	r2, r3, #29
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	0018      	movs	r0, r3
 8004818:	46bd      	mov	sp, r7
 800481a:	b008      	add	sp, #32
 800481c:	bd80      	pop	{r7, pc}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	40021000 	.word	0x40021000
 8004824:	40007000 	.word	0x40007000
 8004828:	00001388 	.word	0x00001388
 800482c:	efffffff 	.word	0xefffffff
 8004830:	feffffff 	.word	0xfeffffff
 8004834:	1fc1808c 	.word	0x1fc1808c
 8004838:	effeffff 	.word	0xeffeffff

0800483c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0e9      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004850:	4b76      	ldr	r3, [pc, #472]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2207      	movs	r2, #7
 8004856:	4013      	ands	r3, r2
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d91e      	bls.n	800489c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b73      	ldr	r3, [pc, #460]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2207      	movs	r2, #7
 8004864:	4393      	bics	r3, r2
 8004866:	0019      	movs	r1, r3
 8004868:	4b70      	ldr	r3, [pc, #448]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004870:	f7fe f9a6 	bl	8002bc0 <HAL_GetTick>
 8004874:	0003      	movs	r3, r0
 8004876:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004878:	e009      	b.n	800488e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487a:	f7fe f9a1 	bl	8002bc0 <HAL_GetTick>
 800487e:	0002      	movs	r2, r0
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	4a6a      	ldr	r2, [pc, #424]	; (8004a30 <HAL_RCC_ClockConfig+0x1f4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0ca      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800488e:	4b67      	ldr	r3, [pc, #412]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2207      	movs	r2, #7
 8004894:	4013      	ands	r3, r2
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d1ee      	bne.n	800487a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2202      	movs	r2, #2
 80048a2:	4013      	ands	r3, r2
 80048a4:	d015      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2204      	movs	r2, #4
 80048ac:	4013      	ands	r3, r2
 80048ae:	d006      	beq.n	80048be <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048b0:	4b60      	ldr	r3, [pc, #384]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	4b5f      	ldr	r3, [pc, #380]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 80048b6:	21e0      	movs	r1, #224	; 0xe0
 80048b8:	01c9      	lsls	r1, r1, #7
 80048ba:	430a      	orrs	r2, r1
 80048bc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048be:	4b5d      	ldr	r3, [pc, #372]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	4a5d      	ldr	r2, [pc, #372]	; (8004a38 <HAL_RCC_ClockConfig+0x1fc>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	0019      	movs	r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	4b59      	ldr	r3, [pc, #356]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 80048ce:	430a      	orrs	r2, r1
 80048d0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2201      	movs	r2, #1
 80048d8:	4013      	ands	r3, r2
 80048da:	d057      	beq.n	800498c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d107      	bne.n	80048f4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048e4:	4b53      	ldr	r3, [pc, #332]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	029b      	lsls	r3, r3, #10
 80048ec:	4013      	ands	r3, r2
 80048ee:	d12b      	bne.n	8004948 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e097      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d107      	bne.n	800490c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fc:	4b4d      	ldr	r3, [pc, #308]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	049b      	lsls	r3, r3, #18
 8004904:	4013      	ands	r3, r2
 8004906:	d11f      	bne.n	8004948 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e08b      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d107      	bne.n	8004924 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004914:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4013      	ands	r3, r2
 800491e:	d113      	bne.n	8004948 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e07f      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d106      	bne.n	800493a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800492c:	4b41      	ldr	r3, [pc, #260]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 800492e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004930:	2202      	movs	r2, #2
 8004932:	4013      	ands	r3, r2
 8004934:	d108      	bne.n	8004948 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e074      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800493a:	4b3e      	ldr	r3, [pc, #248]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 800493c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493e:	2202      	movs	r2, #2
 8004940:	4013      	ands	r3, r2
 8004942:	d101      	bne.n	8004948 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e06d      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004948:	4b3a      	ldr	r3, [pc, #232]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2207      	movs	r2, #7
 800494e:	4393      	bics	r3, r2
 8004950:	0019      	movs	r1, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	4b37      	ldr	r3, [pc, #220]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800495c:	f7fe f930 	bl	8002bc0 <HAL_GetTick>
 8004960:	0003      	movs	r3, r0
 8004962:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004964:	e009      	b.n	800497a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004966:	f7fe f92b 	bl	8002bc0 <HAL_GetTick>
 800496a:	0002      	movs	r2, r0
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	4a2f      	ldr	r2, [pc, #188]	; (8004a30 <HAL_RCC_ClockConfig+0x1f4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e054      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	4b2e      	ldr	r3, [pc, #184]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2238      	movs	r2, #56	; 0x38
 8004980:	401a      	ands	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	429a      	cmp	r2, r3
 800498a:	d1ec      	bne.n	8004966 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800498c:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2207      	movs	r2, #7
 8004992:	4013      	ands	r3, r2
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d21e      	bcs.n	80049d8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499a:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2207      	movs	r2, #7
 80049a0:	4393      	bics	r3, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	4b21      	ldr	r3, [pc, #132]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049ac:	f7fe f908 	bl	8002bc0 <HAL_GetTick>
 80049b0:	0003      	movs	r3, r0
 80049b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049b4:	e009      	b.n	80049ca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b6:	f7fe f903 	bl	8002bc0 <HAL_GetTick>
 80049ba:	0002      	movs	r2, r0
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	4a1b      	ldr	r2, [pc, #108]	; (8004a30 <HAL_RCC_ClockConfig+0x1f4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e02c      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049ca:	4b18      	ldr	r3, [pc, #96]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2207      	movs	r2, #7
 80049d0:	4013      	ands	r3, r2
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d1ee      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2204      	movs	r2, #4
 80049de:	4013      	ands	r3, r2
 80049e0:	d009      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <HAL_RCC_ClockConfig+0x200>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	0019      	movs	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 80049f2:	430a      	orrs	r2, r1
 80049f4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80049f6:	f000 f829 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 80049fa:	0001      	movs	r1, r0
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	0a1b      	lsrs	r3, r3, #8
 8004a02:	220f      	movs	r2, #15
 8004a04:	401a      	ands	r2, r3
 8004a06:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <HAL_RCC_ClockConfig+0x204>)
 8004a08:	0092      	lsls	r2, r2, #2
 8004a0a:	58d3      	ldr	r3, [r2, r3]
 8004a0c:	221f      	movs	r2, #31
 8004a0e:	4013      	ands	r3, r2
 8004a10:	000a      	movs	r2, r1
 8004a12:	40da      	lsrs	r2, r3
 8004a14:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RCC_ClockConfig+0x208>)
 8004a16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a18:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_ClockConfig+0x20c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7fe f873 	bl	8002b08 <HAL_InitTick>
 8004a22:	0003      	movs	r3, r0
}
 8004a24:	0018      	movs	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b004      	add	sp, #16
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40022000 	.word	0x40022000
 8004a30:	00001388 	.word	0x00001388
 8004a34:	40021000 	.word	0x40021000
 8004a38:	fffff0ff 	.word	0xfffff0ff
 8004a3c:	ffff8fff 	.word	0xffff8fff
 8004a40:	0800bba0 	.word	0x0800bba0
 8004a44:	20000004 	.word	0x20000004
 8004a48:	20000008 	.word	0x20000008

08004a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a52:	4b3c      	ldr	r3, [pc, #240]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2238      	movs	r2, #56	; 0x38
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d10f      	bne.n	8004a7c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a5c:	4b39      	ldr	r3, [pc, #228]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0adb      	lsrs	r3, r3, #11
 8004a62:	2207      	movs	r2, #7
 8004a64:	4013      	ands	r3, r2
 8004a66:	2201      	movs	r2, #1
 8004a68:	409a      	lsls	r2, r3
 8004a6a:	0013      	movs	r3, r2
 8004a6c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	4835      	ldr	r0, [pc, #212]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a72:	f7fb fb6b 	bl	800014c <__udivsi3>
 8004a76:	0003      	movs	r3, r0
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	e05d      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a7c:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2238      	movs	r2, #56	; 0x38
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d102      	bne.n	8004a8e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a88:	4b30      	ldr	r3, [pc, #192]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x100>)
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	e054      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a8e:	4b2d      	ldr	r3, [pc, #180]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2238      	movs	r2, #56	; 0x38
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d138      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a9a:	4b2a      	ldr	r3, [pc, #168]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004aa4:	4b27      	ldr	r3, [pc, #156]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	091b      	lsrs	r3, r3, #4
 8004aaa:	2207      	movs	r2, #7
 8004aac:	4013      	ands	r3, r2
 8004aae:	3301      	adds	r3, #1
 8004ab0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d10d      	bne.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	4824      	ldr	r0, [pc, #144]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x100>)
 8004abc:	f7fb fb46 	bl	800014c <__udivsi3>
 8004ac0:	0003      	movs	r3, r0
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	4b1f      	ldr	r3, [pc, #124]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	227f      	movs	r2, #127	; 0x7f
 8004acc:	4013      	ands	r3, r2
 8004ace:	434b      	muls	r3, r1
 8004ad0:	617b      	str	r3, [r7, #20]
        break;
 8004ad2:	e00d      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	481c      	ldr	r0, [pc, #112]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ad8:	f7fb fb38 	bl	800014c <__udivsi3>
 8004adc:	0003      	movs	r3, r0
 8004ade:	0019      	movs	r1, r3
 8004ae0:	4b18      	ldr	r3, [pc, #96]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	0a1b      	lsrs	r3, r3, #8
 8004ae6:	227f      	movs	r2, #127	; 0x7f
 8004ae8:	4013      	ands	r3, r2
 8004aea:	434b      	muls	r3, r1
 8004aec:	617b      	str	r3, [r7, #20]
        break;
 8004aee:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004af0:	4b14      	ldr	r3, [pc, #80]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	0f5b      	lsrs	r3, r3, #29
 8004af6:	2207      	movs	r2, #7
 8004af8:	4013      	ands	r3, r2
 8004afa:	3301      	adds	r3, #1
 8004afc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	6978      	ldr	r0, [r7, #20]
 8004b02:	f7fb fb23 	bl	800014c <__udivsi3>
 8004b06:	0003      	movs	r3, r0
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	e015      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b0c:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2238      	movs	r2, #56	; 0x38
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d103      	bne.n	8004b20 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004b18:	2380      	movs	r3, #128	; 0x80
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	e00b      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b20:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2238      	movs	r2, #56	; 0x38
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b18      	cmp	r3, #24
 8004b2a:	d103      	bne.n	8004b34 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004b2c:	23fa      	movs	r3, #250	; 0xfa
 8004b2e:	01db      	lsls	r3, r3, #7
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	e001      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b38:	693b      	ldr	r3, [r7, #16]
}
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b006      	add	sp, #24
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	40021000 	.word	0x40021000
 8004b48:	00f42400 	.word	0x00f42400
 8004b4c:	007a1200 	.word	0x007a1200

08004b50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b54:	4b02      	ldr	r3, [pc, #8]	; (8004b60 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b56:	681b      	ldr	r3, [r3, #0]
}
 8004b58:	0018      	movs	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	20000004 	.word	0x20000004

08004b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b64:	b5b0      	push	{r4, r5, r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b68:	f7ff fff2 	bl	8004b50 <HAL_RCC_GetHCLKFreq>
 8004b6c:	0004      	movs	r4, r0
 8004b6e:	f7ff fb43 	bl	80041f8 <LL_RCC_GetAPB1Prescaler>
 8004b72:	0003      	movs	r3, r0
 8004b74:	0b1a      	lsrs	r2, r3, #12
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b78:	0092      	lsls	r2, r2, #2
 8004b7a:	58d3      	ldr	r3, [r2, r3]
 8004b7c:	221f      	movs	r2, #31
 8004b7e:	4013      	ands	r3, r2
 8004b80:	40dc      	lsrs	r4, r3
 8004b82:	0023      	movs	r3, r4
}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bdb0      	pop	{r4, r5, r7, pc}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	0800bbe0 	.word	0x0800bbe0

08004b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004b98:	2313      	movs	r3, #19
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ba0:	2312      	movs	r3, #18
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	2380      	movs	r3, #128	; 0x80
 8004bae:	029b      	lsls	r3, r3, #10
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d100      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004bb4:	e0a3      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb6:	2011      	movs	r0, #17
 8004bb8:	183b      	adds	r3, r7, r0
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bbe:	4b86      	ldr	r3, [pc, #536]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	055b      	lsls	r3, r3, #21
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d110      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bca:	4b83      	ldr	r3, [pc, #524]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bce:	4b82      	ldr	r3, [pc, #520]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bd0:	2180      	movs	r1, #128	; 0x80
 8004bd2:	0549      	lsls	r1, r1, #21
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004bd8:	4b7f      	ldr	r3, [pc, #508]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	055b      	lsls	r3, r3, #21
 8004be0:	4013      	ands	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be6:	183b      	adds	r3, r7, r0
 8004be8:	2201      	movs	r2, #1
 8004bea:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bec:	4b7b      	ldr	r3, [pc, #492]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	4b7a      	ldr	r3, [pc, #488]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004bf2:	2180      	movs	r1, #128	; 0x80
 8004bf4:	0049      	lsls	r1, r1, #1
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bfa:	f7fd ffe1 	bl	8002bc0 <HAL_GetTick>
 8004bfe:	0003      	movs	r3, r0
 8004c00:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c02:	e00b      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c04:	f7fd ffdc 	bl	8002bc0 <HAL_GetTick>
 8004c08:	0002      	movs	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d904      	bls.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004c12:	2313      	movs	r3, #19
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	2203      	movs	r2, #3
 8004c18:	701a      	strb	r2, [r3, #0]
        break;
 8004c1a:	e005      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c1c:	4b6f      	ldr	r3, [pc, #444]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	2380      	movs	r3, #128	; 0x80
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	4013      	ands	r3, r2
 8004c26:	d0ed      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004c28:	2313      	movs	r3, #19
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d154      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c32:	4b69      	ldr	r3, [pc, #420]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c36:	23c0      	movs	r3, #192	; 0xc0
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d019      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d014      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c4e:	4b62      	ldr	r3, [pc, #392]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c52:	4a63      	ldr	r2, [pc, #396]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c58:	4b5f      	ldr	r3, [pc, #380]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c5c:	4b5e      	ldr	r3, [pc, #376]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	0249      	lsls	r1, r1, #9
 8004c62:	430a      	orrs	r2, r1
 8004c64:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c66:	4b5c      	ldr	r3, [pc, #368]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c6a:	4b5b      	ldr	r3, [pc, #364]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c6c:	495d      	ldr	r1, [pc, #372]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c6e:	400a      	ands	r2, r1
 8004c70:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c72:	4b59      	ldr	r3, [pc, #356]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d016      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fd ff9e 	bl	8002bc0 <HAL_GetTick>
 8004c84:	0003      	movs	r3, r0
 8004c86:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c88:	e00c      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fd ff99 	bl	8002bc0 <HAL_GetTick>
 8004c8e:	0002      	movs	r2, r0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	4a54      	ldr	r2, [pc, #336]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d904      	bls.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004c9a:	2313      	movs	r3, #19
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	701a      	strb	r2, [r3, #0]
            break;
 8004ca2:	e004      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca4:	4b4c      	ldr	r3, [pc, #304]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca8:	2202      	movs	r2, #2
 8004caa:	4013      	ands	r3, r2
 8004cac:	d0ed      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004cae:	2313      	movs	r3, #19
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb8:	4b47      	ldr	r3, [pc, #284]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbc:	4a48      	ldr	r2, [pc, #288]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	4b44      	ldr	r3, [pc, #272]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ccc:	e00c      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cce:	2312      	movs	r3, #18
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	2213      	movs	r2, #19
 8004cd4:	18ba      	adds	r2, r7, r2
 8004cd6:	7812      	ldrb	r2, [r2, #0]
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	e005      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	2312      	movs	r3, #18
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	2213      	movs	r2, #19
 8004ce2:	18ba      	adds	r2, r7, r2
 8004ce4:	7812      	ldrb	r2, [r2, #0]
 8004ce6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ce8:	2311      	movs	r3, #17
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d105      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf2:	4b39      	ldr	r3, [pc, #228]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf6:	4b38      	ldr	r3, [pc, #224]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004cf8:	493c      	ldr	r1, [pc, #240]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2201      	movs	r2, #1
 8004d04:	4013      	ands	r3, r2
 8004d06:	d009      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d08:	4b33      	ldr	r3, [pc, #204]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	4393      	bics	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	4b30      	ldr	r3, [pc, #192]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2202      	movs	r2, #2
 8004d22:	4013      	ands	r3, r2
 8004d24:	d009      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d26:	4b2c      	ldr	r3, [pc, #176]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	220c      	movs	r2, #12
 8004d2c:	4393      	bics	r3, r2
 8004d2e:	0019      	movs	r1, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	4b28      	ldr	r3, [pc, #160]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d36:	430a      	orrs	r2, r1
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	4013      	ands	r3, r2
 8004d42:	d009      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d44:	4b24      	ldr	r3, [pc, #144]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d48:	4a29      	ldr	r2, [pc, #164]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	0019      	movs	r1, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	4b21      	ldr	r3, [pc, #132]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d54:	430a      	orrs	r2, r1
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	2380      	movs	r3, #128	; 0x80
 8004d5e:	01db      	lsls	r3, r3, #7
 8004d60:	4013      	ands	r3, r2
 8004d62:	d015      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d64:	4b1c      	ldr	r3, [pc, #112]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	0899      	lsrs	r1, r3, #2
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d72:	430a      	orrs	r2, r1
 8004d74:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	2380      	movs	r3, #128	; 0x80
 8004d7c:	05db      	lsls	r3, r3, #23
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d106      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d88:	2180      	movs	r1, #128	; 0x80
 8004d8a:	0249      	lsls	r1, r1, #9
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	2380      	movs	r3, #128	; 0x80
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d016      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004d9c:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	4a14      	ldr	r2, [pc, #80]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	0019      	movs	r1, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004dac:	430a      	orrs	r2, r1
 8004dae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	01db      	lsls	r3, r3, #7
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d106      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004dc2:	2180      	movs	r1, #128	; 0x80
 8004dc4:	0249      	lsls	r1, r1, #9
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004dca:	2312      	movs	r3, #18
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	781b      	ldrb	r3, [r3, #0]
}
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b006      	add	sp, #24
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	40007000 	.word	0x40007000
 8004de0:	fffffcff 	.word	0xfffffcff
 8004de4:	fffeffff 	.word	0xfffeffff
 8004de8:	00001388 	.word	0x00001388
 8004dec:	efffffff 	.word	0xefffffff
 8004df0:	ffffcfff 	.word	0xffffcfff
 8004df4:	ffff3fff 	.word	0xffff3fff

08004df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e0a8      	b.n	8004f5c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	2382      	movs	r3, #130	; 0x82
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d009      	beq.n	8004e32 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	61da      	str	r2, [r3, #28]
 8004e24:	e005      	b.n	8004e32 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	225d      	movs	r2, #93	; 0x5d
 8004e3c:	5c9b      	ldrb	r3, [r3, r2]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d107      	bne.n	8004e54 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	225c      	movs	r2, #92	; 0x5c
 8004e48:	2100      	movs	r1, #0
 8004e4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7fd fc86 	bl	8002760 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	225d      	movs	r2, #93	; 0x5d
 8004e58:	2102      	movs	r1, #2
 8004e5a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2140      	movs	r1, #64	; 0x40
 8004e68:	438a      	bics	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	23e0      	movs	r3, #224	; 0xe0
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d902      	bls.n	8004e7e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e002      	b.n	8004e84 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	015b      	lsls	r3, r3, #5
 8004e82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	23f0      	movs	r3, #240	; 0xf0
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d008      	beq.n	8004ea2 <HAL_SPI_Init+0xaa>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	23e0      	movs	r3, #224	; 0xe0
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d002      	beq.n	8004ea2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	2382      	movs	r3, #130	; 0x82
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	401a      	ands	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6899      	ldr	r1, [r3, #8]
 8004eb0:	2384      	movs	r3, #132	; 0x84
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	400b      	ands	r3, r1
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	400b      	ands	r3, r1
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6999      	ldr	r1, [r3, #24]
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	400b      	ands	r3, r1
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	2138      	movs	r1, #56	; 0x38
 8004ede:	400b      	ands	r3, r1
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	2180      	movs	r1, #128	; 0x80
 8004ee8:	400b      	ands	r3, r1
 8004eea:	431a      	orrs	r2, r3
 8004eec:	0011      	movs	r1, r2
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ef2:	2380      	movs	r3, #128	; 0x80
 8004ef4:	019b      	lsls	r3, r3, #6
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	0c1b      	lsrs	r3, r3, #16
 8004f06:	2204      	movs	r2, #4
 8004f08:	401a      	ands	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	2110      	movs	r1, #16
 8004f10:	400b      	ands	r3, r1
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f18:	2108      	movs	r1, #8
 8004f1a:	400b      	ands	r3, r1
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68d9      	ldr	r1, [r3, #12]
 8004f22:	23f0      	movs	r3, #240	; 0xf0
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	400b      	ands	r3, r1
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	0011      	movs	r1, r2
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	2380      	movs	r3, #128	; 0x80
 8004f30:	015b      	lsls	r3, r3, #5
 8004f32:	401a      	ands	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69da      	ldr	r2, [r3, #28]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4907      	ldr	r1, [pc, #28]	; (8004f64 <HAL_SPI_Init+0x16c>)
 8004f48:	400a      	ands	r2, r1
 8004f4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	225d      	movs	r2, #93	; 0x5d
 8004f56:	2101      	movs	r1, #1
 8004f58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b004      	add	sp, #16
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	fffff7ff 	.word	0xfffff7ff

08004f68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	1dbb      	adds	r3, r7, #6
 8004f76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f78:	231f      	movs	r3, #31
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	225c      	movs	r2, #92	; 0x5c
 8004f84:	5c9b      	ldrb	r3, [r3, r2]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_SPI_Transmit+0x26>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e140      	b.n	8005210 <HAL_SPI_Transmit+0x2a8>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	225c      	movs	r2, #92	; 0x5c
 8004f92:	2101      	movs	r1, #1
 8004f94:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f96:	f7fd fe13 	bl	8002bc0 <HAL_GetTick>
 8004f9a:	0003      	movs	r3, r0
 8004f9c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004f9e:	2316      	movs	r3, #22
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	1dba      	adds	r2, r7, #6
 8004fa4:	8812      	ldrh	r2, [r2, #0]
 8004fa6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	225d      	movs	r2, #93	; 0x5d
 8004fac:	5c9b      	ldrb	r3, [r3, r2]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d004      	beq.n	8004fbe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004fb4:	231f      	movs	r3, #31
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	2202      	movs	r2, #2
 8004fba:	701a      	strb	r2, [r3, #0]
    goto error;
 8004fbc:	e11d      	b.n	80051fa <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_SPI_Transmit+0x64>
 8004fc4:	1dbb      	adds	r3, r7, #6
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004fcc:	231f      	movs	r3, #31
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
    goto error;
 8004fd4:	e111      	b.n	80051fa <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	225d      	movs	r2, #93	; 0x5d
 8004fda:	2103      	movs	r1, #3
 8004fdc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1dba      	adds	r2, r7, #6
 8004fee:	8812      	ldrh	r2, [r2, #0]
 8004ff0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1dba      	adds	r2, r7, #6
 8004ff6:	8812      	ldrh	r2, [r2, #0]
 8004ff8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2244      	movs	r2, #68	; 0x44
 8005004:	2100      	movs	r1, #0
 8005006:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2246      	movs	r2, #70	; 0x46
 800500c:	2100      	movs	r1, #0
 800500e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	429a      	cmp	r2, r3
 8005026:	d110      	bne.n	800504a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2140      	movs	r1, #64	; 0x40
 8005034:	438a      	bics	r2, r1
 8005036:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2180      	movs	r1, #128	; 0x80
 8005044:	01c9      	lsls	r1, r1, #7
 8005046:	430a      	orrs	r2, r1
 8005048:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2240      	movs	r2, #64	; 0x40
 8005052:	4013      	ands	r3, r2
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d007      	beq.n	8005068 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2140      	movs	r1, #64	; 0x40
 8005064:	430a      	orrs	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	23e0      	movs	r3, #224	; 0xe0
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	429a      	cmp	r2, r3
 8005072:	d94e      	bls.n	8005112 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <HAL_SPI_Transmit+0x11e>
 800507c:	2316      	movs	r3, #22
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d13f      	bne.n	8005106 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	881a      	ldrh	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	1c9a      	adds	r2, r3, #2
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050aa:	e02c      	b.n	8005106 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2202      	movs	r2, #2
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d112      	bne.n	80050e0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	881a      	ldrh	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	1c9a      	adds	r2, r3, #2
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050de:	e012      	b.n	8005106 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050e0:	f7fd fd6e 	bl	8002bc0 <HAL_GetTick>
 80050e4:	0002      	movs	r2, r0
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d802      	bhi.n	80050f6 <HAL_SPI_Transmit+0x18e>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	d102      	bne.n	80050fc <HAL_SPI_Transmit+0x194>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80050fc:	231f      	movs	r3, #31
 80050fe:	18fb      	adds	r3, r7, r3
 8005100:	2203      	movs	r2, #3
 8005102:	701a      	strb	r2, [r3, #0]
          goto error;
 8005104:	e079      	b.n	80051fa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510a:	b29b      	uxth	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1cd      	bne.n	80050ac <HAL_SPI_Transmit+0x144>
 8005110:	e04f      	b.n	80051b2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d004      	beq.n	8005124 <HAL_SPI_Transmit+0x1bc>
 800511a:	2316      	movs	r3, #22
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d141      	bne.n	80051a8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	330c      	adds	r3, #12
 800512e:	7812      	ldrb	r2, [r2, #0]
 8005130:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800514a:	e02d      	b.n	80051a8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2202      	movs	r2, #2
 8005154:	4013      	ands	r3, r2
 8005156:	2b02      	cmp	r3, #2
 8005158:	d113      	bne.n	8005182 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	330c      	adds	r3, #12
 8005164:	7812      	ldrb	r2, [r2, #0]
 8005166:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005180:	e012      	b.n	80051a8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005182:	f7fd fd1d 	bl	8002bc0 <HAL_GetTick>
 8005186:	0002      	movs	r2, r0
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d802      	bhi.n	8005198 <HAL_SPI_Transmit+0x230>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	3301      	adds	r3, #1
 8005196:	d102      	bne.n	800519e <HAL_SPI_Transmit+0x236>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d104      	bne.n	80051a8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800519e:	231f      	movs	r3, #31
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	2203      	movs	r2, #3
 80051a4:	701a      	strb	r2, [r3, #0]
          goto error;
 80051a6:	e028      	b.n	80051fa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1cc      	bne.n	800514c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	0018      	movs	r0, r3
 80051ba:	f000 fccd 	bl	8005b58 <SPI_EndRxTxTransaction>
 80051be:	1e03      	subs	r3, r0, #0
 80051c0:	d002      	beq.n	80051c8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051d0:	2300      	movs	r3, #0
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d004      	beq.n	80051f8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80051ee:	231f      	movs	r3, #31
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	2201      	movs	r2, #1
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	e000      	b.n	80051fa <HAL_SPI_Transmit+0x292>
  }

error:
 80051f8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	225d      	movs	r2, #93	; 0x5d
 80051fe:	2101      	movs	r1, #1
 8005200:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	225c      	movs	r2, #92	; 0x5c
 8005206:	2100      	movs	r1, #0
 8005208:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800520a:	231f      	movs	r3, #31
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	781b      	ldrb	r3, [r3, #0]
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	b008      	add	sp, #32
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005218:	b590      	push	{r4, r7, lr}
 800521a:	b089      	sub	sp, #36	; 0x24
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	1dbb      	adds	r3, r7, #6
 8005226:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005228:	2317      	movs	r3, #23
 800522a:	18fb      	adds	r3, r7, r3
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	2382      	movs	r3, #130	; 0x82
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	429a      	cmp	r2, r3
 800523a:	d113      	bne.n	8005264 <HAL_SPI_Receive+0x4c>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10f      	bne.n	8005264 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	225d      	movs	r2, #93	; 0x5d
 8005248:	2104      	movs	r1, #4
 800524a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800524c:	1dbb      	adds	r3, r7, #6
 800524e:	881c      	ldrh	r4, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	0023      	movs	r3, r4
 800525c:	f000 f928 	bl	80054b0 <HAL_SPI_TransmitReceive>
 8005260:	0003      	movs	r3, r0
 8005262:	e11c      	b.n	800549e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	225c      	movs	r2, #92	; 0x5c
 8005268:	5c9b      	ldrb	r3, [r3, r2]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_SPI_Receive+0x5a>
 800526e:	2302      	movs	r3, #2
 8005270:	e115      	b.n	800549e <HAL_SPI_Receive+0x286>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	225c      	movs	r2, #92	; 0x5c
 8005276:	2101      	movs	r1, #1
 8005278:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800527a:	f7fd fca1 	bl	8002bc0 <HAL_GetTick>
 800527e:	0003      	movs	r3, r0
 8005280:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	225d      	movs	r2, #93	; 0x5d
 8005286:	5c9b      	ldrb	r3, [r3, r2]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	d004      	beq.n	8005298 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800528e:	2317      	movs	r3, #23
 8005290:	18fb      	adds	r3, r7, r3
 8005292:	2202      	movs	r2, #2
 8005294:	701a      	strb	r2, [r3, #0]
    goto error;
 8005296:	e0f7      	b.n	8005488 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_SPI_Receive+0x8e>
 800529e:	1dbb      	adds	r3, r7, #6
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d104      	bne.n	80052b0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80052a6:	2317      	movs	r3, #23
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	2201      	movs	r2, #1
 80052ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80052ae:	e0eb      	b.n	8005488 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	225d      	movs	r2, #93	; 0x5d
 80052b4:	2104      	movs	r1, #4
 80052b6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1dba      	adds	r2, r7, #6
 80052c8:	2144      	movs	r1, #68	; 0x44
 80052ca:	8812      	ldrh	r2, [r2, #0]
 80052cc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1dba      	adds	r2, r7, #6
 80052d2:	2146      	movs	r1, #70	; 0x46
 80052d4:	8812      	ldrh	r2, [r2, #0]
 80052d6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	23e0      	movs	r3, #224	; 0xe0
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	429a      	cmp	r2, r3
 8005300:	d908      	bls.n	8005314 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4966      	ldr	r1, [pc, #408]	; (80054a8 <HAL_SPI_Receive+0x290>)
 800530e:	400a      	ands	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	e008      	b.n	8005326 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2180      	movs	r1, #128	; 0x80
 8005320:	0149      	lsls	r1, r1, #5
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	429a      	cmp	r2, r3
 8005330:	d10f      	bne.n	8005352 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2140      	movs	r1, #64	; 0x40
 800533e:	438a      	bics	r2, r1
 8005340:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4957      	ldr	r1, [pc, #348]	; (80054ac <HAL_SPI_Receive+0x294>)
 800534e:	400a      	ands	r2, r1
 8005350:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2240      	movs	r2, #64	; 0x40
 800535a:	4013      	ands	r3, r2
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d007      	beq.n	8005370 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2140      	movs	r1, #64	; 0x40
 800536c:	430a      	orrs	r2, r1
 800536e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	23e0      	movs	r3, #224	; 0xe0
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	429a      	cmp	r2, r3
 800537a:	d900      	bls.n	800537e <HAL_SPI_Receive+0x166>
 800537c:	e069      	b.n	8005452 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800537e:	e031      	b.n	80053e4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2201      	movs	r2, #1
 8005388:	4013      	ands	r3, r2
 800538a:	2b01      	cmp	r3, #1
 800538c:	d117      	bne.n	80053be <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	330c      	adds	r3, #12
 8005394:	001a      	movs	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	7812      	ldrb	r2, [r2, #0]
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2246      	movs	r2, #70	; 0x46
 80053ae:	5a9b      	ldrh	r3, [r3, r2]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b299      	uxth	r1, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2246      	movs	r2, #70	; 0x46
 80053ba:	5299      	strh	r1, [r3, r2]
 80053bc:	e012      	b.n	80053e4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053be:	f7fd fbff 	bl	8002bc0 <HAL_GetTick>
 80053c2:	0002      	movs	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d802      	bhi.n	80053d4 <HAL_SPI_Receive+0x1bc>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	3301      	adds	r3, #1
 80053d2:	d102      	bne.n	80053da <HAL_SPI_Receive+0x1c2>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80053da:	2317      	movs	r3, #23
 80053dc:	18fb      	adds	r3, r7, r3
 80053de:	2203      	movs	r2, #3
 80053e0:	701a      	strb	r2, [r3, #0]
          goto error;
 80053e2:	e051      	b.n	8005488 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2246      	movs	r2, #70	; 0x46
 80053e8:	5a9b      	ldrh	r3, [r3, r2]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1c7      	bne.n	8005380 <HAL_SPI_Receive+0x168>
 80053f0:	e035      	b.n	800545e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2201      	movs	r2, #1
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d115      	bne.n	800542c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	b292      	uxth	r2, r2
 800540c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	1c9a      	adds	r2, r3, #2
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2246      	movs	r2, #70	; 0x46
 800541c:	5a9b      	ldrh	r3, [r3, r2]
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b299      	uxth	r1, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2246      	movs	r2, #70	; 0x46
 8005428:	5299      	strh	r1, [r3, r2]
 800542a:	e012      	b.n	8005452 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800542c:	f7fd fbc8 	bl	8002bc0 <HAL_GetTick>
 8005430:	0002      	movs	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d802      	bhi.n	8005442 <HAL_SPI_Receive+0x22a>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	3301      	adds	r3, #1
 8005440:	d102      	bne.n	8005448 <HAL_SPI_Receive+0x230>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005448:	2317      	movs	r3, #23
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	2203      	movs	r2, #3
 800544e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005450:	e01a      	b.n	8005488 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2246      	movs	r2, #70	; 0x46
 8005456:	5a9b      	ldrh	r3, [r3, r2]
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1c9      	bne.n	80053f2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	0018      	movs	r0, r3
 8005466:	f000 fb19 	bl	8005a9c <SPI_EndRxTransaction>
 800546a:	1e03      	subs	r3, r0, #0
 800546c:	d002      	beq.n	8005474 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800547c:	2317      	movs	r3, #23
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	2201      	movs	r2, #1
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	e000      	b.n	8005488 <HAL_SPI_Receive+0x270>
  }

error :
 8005486:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	225d      	movs	r2, #93	; 0x5d
 800548c:	2101      	movs	r1, #1
 800548e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	225c      	movs	r2, #92	; 0x5c
 8005494:	2100      	movs	r1, #0
 8005496:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005498:	2317      	movs	r3, #23
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	781b      	ldrb	r3, [r3, #0]
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b007      	add	sp, #28
 80054a4:	bd90      	pop	{r4, r7, pc}
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	ffffefff 	.word	0xffffefff
 80054ac:	ffffbfff 	.word	0xffffbfff

080054b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	; 0x28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	001a      	movs	r2, r3
 80054be:	1cbb      	adds	r3, r7, #2
 80054c0:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054c2:	2301      	movs	r3, #1
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054c6:	2323      	movs	r3, #35	; 0x23
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	225c      	movs	r2, #92	; 0x5c
 80054d2:	5c9b      	ldrb	r3, [r3, r2]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x2c>
 80054d8:	2302      	movs	r3, #2
 80054da:	e1b5      	b.n	8005848 <HAL_SPI_TransmitReceive+0x398>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	225c      	movs	r2, #92	; 0x5c
 80054e0:	2101      	movs	r1, #1
 80054e2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e4:	f7fd fb6c 	bl	8002bc0 <HAL_GetTick>
 80054e8:	0003      	movs	r3, r0
 80054ea:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054ec:	201b      	movs	r0, #27
 80054ee:	183b      	adds	r3, r7, r0
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	215d      	movs	r1, #93	; 0x5d
 80054f4:	5c52      	ldrb	r2, [r2, r1]
 80054f6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80054fe:	2312      	movs	r3, #18
 8005500:	18fb      	adds	r3, r7, r3
 8005502:	1cba      	adds	r2, r7, #2
 8005504:	8812      	ldrh	r2, [r2, #0]
 8005506:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005508:	183b      	adds	r3, r7, r0
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d011      	beq.n	8005534 <HAL_SPI_TransmitReceive+0x84>
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	2382      	movs	r3, #130	; 0x82
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	429a      	cmp	r2, r3
 8005518:	d107      	bne.n	800552a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d103      	bne.n	800552a <HAL_SPI_TransmitReceive+0x7a>
 8005522:	183b      	adds	r3, r7, r0
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b04      	cmp	r3, #4
 8005528:	d004      	beq.n	8005534 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800552a:	2323      	movs	r3, #35	; 0x23
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	2202      	movs	r2, #2
 8005530:	701a      	strb	r2, [r3, #0]
    goto error;
 8005532:	e17e      	b.n	8005832 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d006      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x98>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x98>
 8005540:	1cbb      	adds	r3, r7, #2
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d104      	bne.n	8005552 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005548:	2323      	movs	r3, #35	; 0x23
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	2201      	movs	r2, #1
 800554e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005550:	e16f      	b.n	8005832 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	225d      	movs	r2, #93	; 0x5d
 8005556:	5c9b      	ldrb	r3, [r3, r2]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b04      	cmp	r3, #4
 800555c:	d003      	beq.n	8005566 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	225d      	movs	r2, #93	; 0x5d
 8005562:	2105      	movs	r1, #5
 8005564:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1cba      	adds	r2, r7, #2
 8005576:	2146      	movs	r1, #70	; 0x46
 8005578:	8812      	ldrh	r2, [r2, #0]
 800557a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	1cba      	adds	r2, r7, #2
 8005580:	2144      	movs	r1, #68	; 0x44
 8005582:	8812      	ldrh	r2, [r2, #0]
 8005584:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	1cba      	adds	r2, r7, #2
 8005590:	8812      	ldrh	r2, [r2, #0]
 8005592:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	1cba      	adds	r2, r7, #2
 8005598:	8812      	ldrh	r2, [r2, #0]
 800559a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	23e0      	movs	r3, #224	; 0xe0
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d908      	bls.n	80055c6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	49a4      	ldr	r1, [pc, #656]	; (8005850 <HAL_SPI_TransmitReceive+0x3a0>)
 80055c0:	400a      	ands	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
 80055c4:	e008      	b.n	80055d8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2180      	movs	r1, #128	; 0x80
 80055d2:	0149      	lsls	r1, r1, #5
 80055d4:	430a      	orrs	r2, r1
 80055d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2240      	movs	r2, #64	; 0x40
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b40      	cmp	r3, #64	; 0x40
 80055e4:	d007      	beq.n	80055f6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2140      	movs	r1, #64	; 0x40
 80055f2:	430a      	orrs	r2, r1
 80055f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	23e0      	movs	r3, #224	; 0xe0
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	429a      	cmp	r2, r3
 8005600:	d800      	bhi.n	8005604 <HAL_SPI_TransmitReceive+0x154>
 8005602:	e07f      	b.n	8005704 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_SPI_TransmitReceive+0x168>
 800560c:	2312      	movs	r3, #18
 800560e:	18fb      	adds	r3, r7, r3
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d000      	beq.n	8005618 <HAL_SPI_TransmitReceive+0x168>
 8005616:	e069      	b.n	80056ec <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	881a      	ldrh	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	1c9a      	adds	r2, r3, #2
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800563c:	e056      	b.n	80056ec <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2202      	movs	r2, #2
 8005646:	4013      	ands	r3, r2
 8005648:	2b02      	cmp	r3, #2
 800564a:	d11b      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x1d4>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d016      	beq.n	8005684 <HAL_SPI_TransmitReceive+0x1d4>
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	2b01      	cmp	r3, #1
 800565a:	d113      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	881a      	ldrh	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	1c9a      	adds	r2, r3, #2
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2201      	movs	r2, #1
 800568c:	4013      	ands	r3, r2
 800568e:	2b01      	cmp	r3, #1
 8005690:	d11c      	bne.n	80056cc <HAL_SPI_TransmitReceive+0x21c>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2246      	movs	r2, #70	; 0x46
 8005696:	5a9b      	ldrh	r3, [r3, r2]
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d016      	beq.n	80056cc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	b292      	uxth	r2, r2
 80056aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	1c9a      	adds	r2, r3, #2
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2246      	movs	r2, #70	; 0x46
 80056ba:	5a9b      	ldrh	r3, [r3, r2]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b299      	uxth	r1, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2246      	movs	r2, #70	; 0x46
 80056c6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056c8:	2301      	movs	r3, #1
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056cc:	f7fd fa78 	bl	8002bc0 <HAL_GetTick>
 80056d0:	0002      	movs	r2, r0
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d8:	429a      	cmp	r2, r3
 80056da:	d807      	bhi.n	80056ec <HAL_SPI_TransmitReceive+0x23c>
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	3301      	adds	r3, #1
 80056e0:	d004      	beq.n	80056ec <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80056e2:	2323      	movs	r3, #35	; 0x23
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	2203      	movs	r2, #3
 80056e8:	701a      	strb	r2, [r3, #0]
        goto error;
 80056ea:	e0a2      	b.n	8005832 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1a3      	bne.n	800563e <HAL_SPI_TransmitReceive+0x18e>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2246      	movs	r2, #70	; 0x46
 80056fa:	5a9b      	ldrh	r3, [r3, r2]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d19d      	bne.n	800563e <HAL_SPI_TransmitReceive+0x18e>
 8005702:	e085      	b.n	8005810 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <HAL_SPI_TransmitReceive+0x268>
 800570c:	2312      	movs	r3, #18
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d000      	beq.n	8005718 <HAL_SPI_TransmitReceive+0x268>
 8005716:	e070      	b.n	80057fa <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330c      	adds	r3, #12
 8005722:	7812      	ldrb	r2, [r2, #0]
 8005724:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800573e:	e05c      	b.n	80057fa <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2202      	movs	r2, #2
 8005748:	4013      	ands	r3, r2
 800574a:	2b02      	cmp	r3, #2
 800574c:	d11c      	bne.n	8005788 <HAL_SPI_TransmitReceive+0x2d8>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005752:	b29b      	uxth	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d017      	beq.n	8005788 <HAL_SPI_TransmitReceive+0x2d8>
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	2b01      	cmp	r3, #1
 800575c:	d114      	bne.n	8005788 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	330c      	adds	r3, #12
 8005768:	7812      	ldrb	r2, [r2, #0]
 800576a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2201      	movs	r2, #1
 8005790:	4013      	ands	r3, r2
 8005792:	2b01      	cmp	r3, #1
 8005794:	d11e      	bne.n	80057d4 <HAL_SPI_TransmitReceive+0x324>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2246      	movs	r2, #70	; 0x46
 800579a:	5a9b      	ldrh	r3, [r3, r2]
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d018      	beq.n	80057d4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	330c      	adds	r3, #12
 80057a8:	001a      	movs	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	7812      	ldrb	r2, [r2, #0]
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2246      	movs	r2, #70	; 0x46
 80057c2:	5a9b      	ldrh	r3, [r3, r2]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b299      	uxth	r1, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2246      	movs	r2, #70	; 0x46
 80057ce:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057d0:	2301      	movs	r3, #1
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057d4:	f7fd f9f4 	bl	8002bc0 <HAL_GetTick>
 80057d8:	0002      	movs	r2, r0
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d802      	bhi.n	80057ea <HAL_SPI_TransmitReceive+0x33a>
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	3301      	adds	r3, #1
 80057e8:	d102      	bne.n	80057f0 <HAL_SPI_TransmitReceive+0x340>
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d104      	bne.n	80057fa <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80057f0:	2323      	movs	r3, #35	; 0x23
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	2203      	movs	r2, #3
 80057f6:	701a      	strb	r2, [r3, #0]
        goto error;
 80057f8:	e01b      	b.n	8005832 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d19d      	bne.n	8005740 <HAL_SPI_TransmitReceive+0x290>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2246      	movs	r2, #70	; 0x46
 8005808:	5a9b      	ldrh	r3, [r3, r2]
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d197      	bne.n	8005740 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	0018      	movs	r0, r3
 8005818:	f000 f99e 	bl	8005b58 <SPI_EndRxTxTransaction>
 800581c:	1e03      	subs	r3, r0, #0
 800581e:	d007      	beq.n	8005830 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005820:	2323      	movs	r3, #35	; 0x23
 8005822:	18fb      	adds	r3, r7, r3
 8005824:	2201      	movs	r2, #1
 8005826:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	661a      	str	r2, [r3, #96]	; 0x60
 800582e:	e000      	b.n	8005832 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005830:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	225d      	movs	r2, #93	; 0x5d
 8005836:	2101      	movs	r1, #1
 8005838:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	225c      	movs	r2, #92	; 0x5c
 800583e:	2100      	movs	r1, #0
 8005840:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005842:	2323      	movs	r3, #35	; 0x23
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	781b      	ldrb	r3, [r3, #0]
}
 8005848:	0018      	movs	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	b00a      	add	sp, #40	; 0x28
 800584e:	bd80      	pop	{r7, pc}
 8005850:	ffffefff 	.word	0xffffefff

08005854 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	1dfb      	adds	r3, r7, #7
 8005862:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005864:	f7fd f9ac 	bl	8002bc0 <HAL_GetTick>
 8005868:	0002      	movs	r2, r0
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	1a9b      	subs	r3, r3, r2
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	18d3      	adds	r3, r2, r3
 8005872:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005874:	f7fd f9a4 	bl	8002bc0 <HAL_GetTick>
 8005878:	0003      	movs	r3, r0
 800587a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800587c:	4b3a      	ldr	r3, [pc, #232]	; (8005968 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	015b      	lsls	r3, r3, #5
 8005882:	0d1b      	lsrs	r3, r3, #20
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	4353      	muls	r3, r2
 8005888:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800588a:	e058      	b.n	800593e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	3301      	adds	r3, #1
 8005890:	d055      	beq.n	800593e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005892:	f7fd f995 	bl	8002bc0 <HAL_GetTick>
 8005896:	0002      	movs	r2, r0
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d902      	bls.n	80058a8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d142      	bne.n	800592e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	21e0      	movs	r1, #224	; 0xe0
 80058b4:	438a      	bics	r2, r1
 80058b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	2382      	movs	r3, #130	; 0x82
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d113      	bne.n	80058ec <SPI_WaitFlagStateUntilTimeout+0x98>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	2380      	movs	r3, #128	; 0x80
 80058ca:	021b      	lsls	r3, r3, #8
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d005      	beq.n	80058dc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	2380      	movs	r3, #128	; 0x80
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	429a      	cmp	r2, r3
 80058da:	d107      	bne.n	80058ec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2140      	movs	r1, #64	; 0x40
 80058e8:	438a      	bics	r2, r1
 80058ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	019b      	lsls	r3, r3, #6
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d110      	bne.n	800591a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	491a      	ldr	r1, [pc, #104]	; (800596c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005904:	400a      	ands	r2, r1
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2180      	movs	r1, #128	; 0x80
 8005914:	0189      	lsls	r1, r1, #6
 8005916:	430a      	orrs	r2, r1
 8005918:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	225d      	movs	r2, #93	; 0x5d
 800591e:	2101      	movs	r1, #1
 8005920:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	225c      	movs	r2, #92	; 0x5c
 8005926:	2100      	movs	r1, #0
 8005928:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e017      	b.n	800595e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	3b01      	subs	r3, #1
 800593c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	4013      	ands	r3, r2
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	425a      	negs	r2, r3
 800594e:	4153      	adcs	r3, r2
 8005950:	b2db      	uxtb	r3, r3
 8005952:	001a      	movs	r2, r3
 8005954:	1dfb      	adds	r3, r7, #7
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d197      	bne.n	800588c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b008      	add	sp, #32
 8005964:	bd80      	pop	{r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	20000004 	.word	0x20000004
 800596c:	ffffdfff 	.word	0xffffdfff

08005970 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b088      	sub	sp, #32
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800597e:	f7fd f91f 	bl	8002bc0 <HAL_GetTick>
 8005982:	0002      	movs	r2, r0
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	18d3      	adds	r3, r2, r3
 800598c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800598e:	f7fd f917 	bl	8002bc0 <HAL_GetTick>
 8005992:	0003      	movs	r3, r0
 8005994:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005996:	4b3f      	ldr	r3, [pc, #252]	; (8005a94 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	0013      	movs	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	189b      	adds	r3, r3, r2
 80059a0:	00da      	lsls	r2, r3, #3
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	0d1b      	lsrs	r3, r3, #20
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	4353      	muls	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80059ac:	e064      	b.n	8005a78 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	23c0      	movs	r3, #192	; 0xc0
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d106      	bne.n	80059c6 <SPI_WaitFifoStateUntilTimeout+0x56>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	330c      	adds	r3, #12
 80059c4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	d055      	beq.n	8005a78 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059cc:	f7fd f8f8 	bl	8002bc0 <HAL_GetTick>
 80059d0:	0002      	movs	r2, r0
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d902      	bls.n	80059e2 <SPI_WaitFifoStateUntilTimeout+0x72>
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d142      	bne.n	8005a68 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	21e0      	movs	r1, #224	; 0xe0
 80059ee:	438a      	bics	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	2382      	movs	r3, #130	; 0x82
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d113      	bne.n	8005a26 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d005      	beq.n	8005a16 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	2380      	movs	r3, #128	; 0x80
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d107      	bne.n	8005a26 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2140      	movs	r1, #64	; 0x40
 8005a22:	438a      	bics	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a2a:	2380      	movs	r3, #128	; 0x80
 8005a2c:	019b      	lsls	r3, r3, #6
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d110      	bne.n	8005a54 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4916      	ldr	r1, [pc, #88]	; (8005a98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a3e:	400a      	ands	r2, r1
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2180      	movs	r1, #128	; 0x80
 8005a4e:	0189      	lsls	r1, r1, #6
 8005a50:	430a      	orrs	r2, r1
 8005a52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	225d      	movs	r2, #93	; 0x5d
 8005a58:	2101      	movs	r1, #1
 8005a5a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	225c      	movs	r2, #92	; 0x5c
 8005a60:	2100      	movs	r1, #0
 8005a62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e010      	b.n	8005a8a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	4013      	ands	r3, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d192      	bne.n	80059ae <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b008      	add	sp, #32
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	20000004 	.word	0x20000004
 8005a98:	ffffdfff 	.word	0xffffdfff

08005a9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	2382      	movs	r3, #130	; 0x82
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d113      	bne.n	8005adc <SPI_EndRxTransaction+0x40>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	2380      	movs	r3, #128	; 0x80
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d005      	beq.n	8005acc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	2380      	movs	r3, #128	; 0x80
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d107      	bne.n	8005adc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2140      	movs	r1, #64	; 0x40
 8005ad8:	438a      	bics	r2, r1
 8005ada:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	0013      	movs	r3, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2180      	movs	r1, #128	; 0x80
 8005aea:	f7ff feb3 	bl	8005854 <SPI_WaitFlagStateUntilTimeout>
 8005aee:	1e03      	subs	r3, r0, #0
 8005af0:	d007      	beq.n	8005b02 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af6:	2220      	movs	r2, #32
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e026      	b.n	8005b50 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	2382      	movs	r3, #130	; 0x82
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d11f      	bne.n	8005b4e <SPI_EndRxTransaction+0xb2>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	2380      	movs	r3, #128	; 0x80
 8005b14:	021b      	lsls	r3, r3, #8
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d005      	beq.n	8005b26 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	2380      	movs	r3, #128	; 0x80
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d113      	bne.n	8005b4e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	23c0      	movs	r3, #192	; 0xc0
 8005b2a:	00d9      	lsls	r1, r3, #3
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	0013      	movs	r3, r2
 8005b34:	2200      	movs	r2, #0
 8005b36:	f7ff ff1b 	bl	8005970 <SPI_WaitFifoStateUntilTimeout>
 8005b3a:	1e03      	subs	r3, r0, #0
 8005b3c:	d007      	beq.n	8005b4e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b42:	2220      	movs	r2, #32
 8005b44:	431a      	orrs	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e000      	b.n	8005b50 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	0018      	movs	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	b004      	add	sp, #16
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	23c0      	movs	r3, #192	; 0xc0
 8005b68:	0159      	lsls	r1, r3, #5
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	0013      	movs	r3, r2
 8005b72:	2200      	movs	r2, #0
 8005b74:	f7ff fefc 	bl	8005970 <SPI_WaitFifoStateUntilTimeout>
 8005b78:	1e03      	subs	r3, r0, #0
 8005b7a:	d007      	beq.n	8005b8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b80:	2220      	movs	r2, #32
 8005b82:	431a      	orrs	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e027      	b.n	8005bdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	0013      	movs	r3, r2
 8005b96:	2200      	movs	r2, #0
 8005b98:	2180      	movs	r1, #128	; 0x80
 8005b9a:	f7ff fe5b 	bl	8005854 <SPI_WaitFlagStateUntilTimeout>
 8005b9e:	1e03      	subs	r3, r0, #0
 8005ba0:	d007      	beq.n	8005bb2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e014      	b.n	8005bdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	23c0      	movs	r3, #192	; 0xc0
 8005bb6:	00d9      	lsls	r1, r3, #3
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	0013      	movs	r3, r2
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f7ff fed5 	bl	8005970 <SPI_WaitFifoStateUntilTimeout>
 8005bc6:	1e03      	subs	r3, r0, #0
 8005bc8:	d007      	beq.n	8005bda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bce:	2220      	movs	r2, #32
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e000      	b.n	8005bdc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	0018      	movs	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	b004      	add	sp, #16
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e046      	b.n	8005c84 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2284      	movs	r2, #132	; 0x84
 8005bfa:	589b      	ldr	r3, [r3, r2]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d107      	bne.n	8005c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2280      	movs	r2, #128	; 0x80
 8005c04:	2100      	movs	r1, #0
 8005c06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f7fc fdf2 	bl	80027f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2284      	movs	r2, #132	; 0x84
 8005c14:	2124      	movs	r1, #36	; 0x24
 8005c16:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2101      	movs	r1, #1
 8005c24:	438a      	bics	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 fb58 	bl	80062e0 <UART_SetConfig>
 8005c30:	0003      	movs	r3, r0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e024      	b.n	8005c84 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f000 fcf5 	bl	8006634 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	490d      	ldr	r1, [pc, #52]	; (8005c8c <HAL_UART_Init+0xa8>)
 8005c56:	400a      	ands	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	212a      	movs	r1, #42	; 0x2a
 8005c66:	438a      	bics	r2, r1
 8005c68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2101      	movs	r1, #1
 8005c76:	430a      	orrs	r2, r1
 8005c78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f000 fd8d 	bl	800679c <UART_CheckIdleState>
 8005c82:	0003      	movs	r3, r0
}
 8005c84:	0018      	movs	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b002      	add	sp, #8
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	ffffb7ff 	.word	0xffffb7ff

08005c90 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	1dbb      	adds	r3, r7, #6
 8005c9c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2284      	movs	r2, #132	; 0x84
 8005ca2:	589b      	ldr	r3, [r3, r2]
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d000      	beq.n	8005caa <HAL_UART_Transmit_IT+0x1a>
 8005ca8:	e07f      	b.n	8005daa <HAL_UART_Transmit_IT+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_UART_Transmit_IT+0x28>
 8005cb0:	1dbb      	adds	r3, r7, #6
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e077      	b.n	8005dac <HAL_UART_Transmit_IT+0x11c>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	2380      	movs	r3, #128	; 0x80
 8005cc2:	015b      	lsls	r3, r3, #5
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d109      	bne.n	8005cdc <HAL_UART_Transmit_IT+0x4c>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	d001      	beq.n	8005cdc <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e067      	b.n	8005dac <HAL_UART_Transmit_IT+0x11c>
      }
    }

    __HAL_LOCK(huart);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2280      	movs	r2, #128	; 0x80
 8005ce0:	5c9b      	ldrb	r3, [r3, r2]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_UART_Transmit_IT+0x5a>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e060      	b.n	8005dac <HAL_UART_Transmit_IT+0x11c>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2280      	movs	r2, #128	; 0x80
 8005cee:	2101      	movs	r1, #1
 8005cf0:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	1dba      	adds	r2, r7, #6
 8005cfc:	2154      	movs	r1, #84	; 0x54
 8005cfe:	8812      	ldrh	r2, [r2, #0]
 8005d00:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1dba      	adds	r2, r7, #6
 8005d06:	2156      	movs	r1, #86	; 0x56
 8005d08:	8812      	ldrh	r2, [r2, #0]
 8005d0a:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	228c      	movs	r2, #140	; 0x8c
 8005d16:	2100      	movs	r1, #0
 8005d18:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2284      	movs	r2, #132	; 0x84
 8005d1e:	2121      	movs	r1, #33	; 0x21
 8005d20:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005d26:	2380      	movs	r3, #128	; 0x80
 8005d28:	059b      	lsls	r3, r3, #22
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d11e      	bne.n	8005d6c <HAL_UART_Transmit_IT+0xdc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	015b      	lsls	r3, r3, #5
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d107      	bne.n	8005d4a <HAL_UART_Transmit_IT+0xba>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d103      	bne.n	8005d4a <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a1b      	ldr	r2, [pc, #108]	; (8005db4 <HAL_UART_Transmit_IT+0x124>)
 8005d46:	675a      	str	r2, [r3, #116]	; 0x74
 8005d48:	e002      	b.n	8005d50 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4a1a      	ldr	r2, [pc, #104]	; (8005db8 <HAL_UART_Transmit_IT+0x128>)
 8005d4e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2280      	movs	r2, #128	; 0x80
 8005d54:	2100      	movs	r1, #0
 8005d56:	5499      	strb	r1, [r3, r2]

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2180      	movs	r1, #128	; 0x80
 8005d64:	0409      	lsls	r1, r1, #16
 8005d66:	430a      	orrs	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]
 8005d6a:	e01c      	b.n	8005da6 <HAL_UART_Transmit_IT+0x116>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	2380      	movs	r3, #128	; 0x80
 8005d72:	015b      	lsls	r3, r3, #5
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d107      	bne.n	8005d88 <HAL_UART_Transmit_IT+0xf8>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d103      	bne.n	8005d88 <HAL_UART_Transmit_IT+0xf8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <HAL_UART_Transmit_IT+0x12c>)
 8005d84:	675a      	str	r2, [r3, #116]	; 0x74
 8005d86:	e002      	b.n	8005d8e <HAL_UART_Transmit_IT+0xfe>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4a0d      	ldr	r2, [pc, #52]	; (8005dc0 <HAL_UART_Transmit_IT+0x130>)
 8005d8c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2280      	movs	r2, #128	; 0x80
 8005d92:	2100      	movs	r1, #0
 8005d94:	5499      	strb	r1, [r3, r2]

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2180      	movs	r1, #128	; 0x80
 8005da2:	430a      	orrs	r2, r1
 8005da4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	e000      	b.n	8005dac <HAL_UART_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005daa:	2302      	movs	r3, #2
  }
}
 8005dac:	0018      	movs	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b004      	add	sp, #16
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	08006ce9 	.word	0x08006ce9
 8005db8:	08006c41 	.word	0x08006c41
 8005dbc:	08006bc7 	.word	0x08006bc7
 8005dc0:	08006b57 	.word	0x08006b57

08005dc4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	1dbb      	adds	r3, r7, #6
 8005dd0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2288      	movs	r2, #136	; 0x88
 8005dd6:	589b      	ldr	r3, [r3, r2]
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d12f      	bne.n	8005e3c <HAL_UART_Receive_IT+0x78>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_UART_Receive_IT+0x26>
 8005de2:	1dbb      	adds	r3, r7, #6
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e027      	b.n	8005e3e <HAL_UART_Receive_IT+0x7a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	2380      	movs	r3, #128	; 0x80
 8005df4:	015b      	lsls	r3, r3, #5
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d109      	bne.n	8005e0e <HAL_UART_Receive_IT+0x4a>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d105      	bne.n	8005e0e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2201      	movs	r2, #1
 8005e06:	4013      	ands	r3, r2
 8005e08:	d001      	beq.n	8005e0e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e017      	b.n	8005e3e <HAL_UART_Receive_IT+0x7a>
      }
    }

    __HAL_LOCK(huart);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2280      	movs	r2, #128	; 0x80
 8005e12:	5c9b      	ldrb	r3, [r3, r2]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_UART_Receive_IT+0x58>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e010      	b.n	8005e3e <HAL_UART_Receive_IT+0x7a>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2280      	movs	r2, #128	; 0x80
 8005e20:	2101      	movs	r1, #1
 8005e22:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	66da      	str	r2, [r3, #108]	; 0x6c

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005e2a:	1dbb      	adds	r3, r7, #6
 8005e2c:	881a      	ldrh	r2, [r3, #0]
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	0018      	movs	r0, r3
 8005e34:	f000 fd7e 	bl	8006934 <UART_Start_Receive_IT>
 8005e38:	0003      	movs	r3, r0
 8005e3a:	e000      	b.n	8005e3e <HAL_UART_Receive_IT+0x7a>
  }
  else
  {
    return HAL_BUSY;
 8005e3c:	2302      	movs	r3, #2
  }
}
 8005e3e:	0018      	movs	r0, r3
 8005e40:	46bd      	mov	sp, r7
 8005e42:	b004      	add	sp, #16
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4abb      	ldr	r2, [pc, #748]	; (8006158 <HAL_UART_IRQHandler+0x310>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d117      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2220      	movs	r2, #32
 8005e82:	4013      	ands	r3, r2
 8005e84:	d104      	bne.n	8005e90 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	2380      	movs	r3, #128	; 0x80
 8005e8a:	055b      	lsls	r3, r3, #21
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	d00a      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d100      	bne.n	8005e9a <HAL_UART_IRQHandler+0x52>
 8005e98:	e1fd      	b.n	8006296 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	0010      	movs	r0, r2
 8005ea2:	4798      	blx	r3
      }
      return;
 8005ea4:	e1f7      	b.n	8006296 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d100      	bne.n	8005eae <HAL_UART_IRQHandler+0x66>
 8005eac:	e0de      	b.n	800606c <HAL_UART_IRQHandler+0x224>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	4aaa      	ldr	r2, [pc, #680]	; (800615c <HAL_UART_IRQHandler+0x314>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d104      	bne.n	8005ec0 <HAL_UART_IRQHandler+0x78>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	4aa9      	ldr	r2, [pc, #676]	; (8006160 <HAL_UART_IRQHandler+0x318>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d100      	bne.n	8005ec0 <HAL_UART_IRQHandler+0x78>
 8005ebe:	e0d5      	b.n	800606c <HAL_UART_IRQHandler+0x224>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	d010      	beq.n	8005eea <HAL_UART_IRQHandler+0xa2>
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d00b      	beq.n	8005eea <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	228c      	movs	r2, #140	; 0x8c
 8005ede:	589b      	ldr	r3, [r3, r2]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	218c      	movs	r1, #140	; 0x8c
 8005ee8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	2202      	movs	r2, #2
 8005eee:	4013      	ands	r3, r2
 8005ef0:	d00f      	beq.n	8005f12 <HAL_UART_IRQHandler+0xca>
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d00b      	beq.n	8005f12 <HAL_UART_IRQHandler+0xca>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2202      	movs	r2, #2
 8005f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	228c      	movs	r2, #140	; 0x8c
 8005f06:	589b      	ldr	r3, [r3, r2]
 8005f08:	2204      	movs	r2, #4
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	218c      	movs	r1, #140	; 0x8c
 8005f10:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	2204      	movs	r2, #4
 8005f16:	4013      	ands	r3, r2
 8005f18:	d00f      	beq.n	8005f3a <HAL_UART_IRQHandler+0xf2>
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d00b      	beq.n	8005f3a <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2204      	movs	r2, #4
 8005f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	228c      	movs	r2, #140	; 0x8c
 8005f2e:	589b      	ldr	r3, [r3, r2]
 8005f30:	2202      	movs	r2, #2
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	218c      	movs	r1, #140	; 0x8c
 8005f38:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d013      	beq.n	8005f6a <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2220      	movs	r2, #32
 8005f46:	4013      	ands	r3, r2
 8005f48:	d103      	bne.n	8005f52 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	4a83      	ldr	r2, [pc, #524]	; (800615c <HAL_UART_IRQHandler+0x314>)
 8005f4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f50:	d00b      	beq.n	8005f6a <HAL_UART_IRQHandler+0x122>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2208      	movs	r2, #8
 8005f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	228c      	movs	r2, #140	; 0x8c
 8005f5e:	589b      	ldr	r3, [r3, r2]
 8005f60:	2208      	movs	r2, #8
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	218c      	movs	r1, #140	; 0x8c
 8005f68:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	2380      	movs	r3, #128	; 0x80
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	4013      	ands	r3, r2
 8005f72:	d011      	beq.n	8005f98 <HAL_UART_IRQHandler+0x150>
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	2380      	movs	r3, #128	; 0x80
 8005f78:	04db      	lsls	r3, r3, #19
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d00c      	beq.n	8005f98 <HAL_UART_IRQHandler+0x150>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2280      	movs	r2, #128	; 0x80
 8005f84:	0112      	lsls	r2, r2, #4
 8005f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	228c      	movs	r2, #140	; 0x8c
 8005f8c:	589b      	ldr	r3, [r3, r2]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	218c      	movs	r1, #140	; 0x8c
 8005f96:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	228c      	movs	r2, #140	; 0x8c
 8005f9c:	589b      	ldr	r3, [r3, r2]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d100      	bne.n	8005fa4 <HAL_UART_IRQHandler+0x15c>
 8005fa2:	e17a      	b.n	800629a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d011      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x188>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	d104      	bne.n	8005fbe <HAL_UART_IRQHandler+0x176>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	055b      	lsls	r3, r3, #21
 8005fba:	4013      	ands	r3, r2
 8005fbc:	d008      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x188>
      {
        if (huart->RxISR != NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x188>
        {
          huart->RxISR(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	0010      	movs	r0, r2
 8005fce:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	228c      	movs	r2, #140	; 0x8c
 8005fd4:	589b      	ldr	r3, [r3, r2]
 8005fd6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2240      	movs	r2, #64	; 0x40
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	2b40      	cmp	r3, #64	; 0x40
 8005fe4:	d003      	beq.n	8005fee <HAL_UART_IRQHandler+0x1a6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2228      	movs	r2, #40	; 0x28
 8005fea:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fec:	d033      	beq.n	8006056 <HAL_UART_IRQHandler+0x20e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f000 fd67 	bl	8006ac4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2240      	movs	r2, #64	; 0x40
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b40      	cmp	r3, #64	; 0x40
 8006002:	d123      	bne.n	800604c <HAL_UART_IRQHandler+0x204>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2140      	movs	r1, #64	; 0x40
 8006010:	438a      	bics	r2, r1
 8006012:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d012      	beq.n	8006042 <HAL_UART_IRQHandler+0x1fa>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006020:	4a50      	ldr	r2, [pc, #320]	; (8006164 <HAL_UART_IRQHandler+0x31c>)
 8006022:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006028:	0018      	movs	r0, r3
 800602a:	f7fc ff4d 	bl	8002ec8 <HAL_DMA_Abort_IT>
 800602e:	1e03      	subs	r3, r0, #0
 8006030:	d01a      	beq.n	8006068 <HAL_UART_IRQHandler+0x220>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800603c:	0018      	movs	r0, r3
 800603e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006040:	e012      	b.n	8006068 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	0018      	movs	r0, r3
 8006046:	f000 f937 	bl	80062b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604a:	e00d      	b.n	8006068 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	0018      	movs	r0, r3
 8006050:	f000 f932 	bl	80062b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006054:	e008      	b.n	8006068 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	0018      	movs	r0, r3
 800605a:	f000 f92d 	bl	80062b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	228c      	movs	r2, #140	; 0x8c
 8006062:	2100      	movs	r1, #0
 8006064:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006066:	e118      	b.n	800629a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	46c0      	nop			; (mov r8, r8)
    return;
 800606a:	e116      	b.n	800629a <HAL_UART_IRQHandler+0x452>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d000      	beq.n	8006076 <HAL_UART_IRQHandler+0x22e>
 8006074:	e0bb      	b.n	80061ee <HAL_UART_IRQHandler+0x3a6>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	2210      	movs	r2, #16
 800607a:	4013      	ands	r3, r2
 800607c:	d100      	bne.n	8006080 <HAL_UART_IRQHandler+0x238>
 800607e:	e0b6      	b.n	80061ee <HAL_UART_IRQHandler+0x3a6>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	2210      	movs	r2, #16
 8006084:	4013      	ands	r3, r2
 8006086:	d100      	bne.n	800608a <HAL_UART_IRQHandler+0x242>
 8006088:	e0b1      	b.n	80061ee <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2210      	movs	r2, #16
 8006090:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2240      	movs	r2, #64	; 0x40
 800609a:	4013      	ands	r3, r2
 800609c:	2b40      	cmp	r3, #64	; 0x40
 800609e:	d165      	bne.n	800616c <HAL_UART_IRQHandler+0x324>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	2108      	movs	r1, #8
 80060aa:	187b      	adds	r3, r7, r1
 80060ac:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80060ae:	187b      	adds	r3, r7, r1
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d100      	bne.n	80060b8 <HAL_UART_IRQHandler+0x270>
 80060b6:	e0f2      	b.n	800629e <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	225c      	movs	r2, #92	; 0x5c
 80060bc:	5a9b      	ldrh	r3, [r3, r2]
 80060be:	187a      	adds	r2, r7, r1
 80060c0:	8812      	ldrh	r2, [r2, #0]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d300      	bcc.n	80060c8 <HAL_UART_IRQHandler+0x280>
 80060c6:	e0ea      	b.n	800629e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	187a      	adds	r2, r7, r1
 80060cc:	215e      	movs	r1, #94	; 0x5e
 80060ce:	8812      	ldrh	r2, [r2, #0]
 80060d0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2220      	movs	r2, #32
 80060dc:	4013      	ands	r3, r2
 80060de:	d12b      	bne.n	8006138 <HAL_UART_IRQHandler+0x2f0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	491f      	ldr	r1, [pc, #124]	; (8006168 <HAL_UART_IRQHandler+0x320>)
 80060ec:	400a      	ands	r2, r1
 80060ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2101      	movs	r1, #1
 80060fc:	438a      	bics	r2, r1
 80060fe:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2140      	movs	r1, #64	; 0x40
 800610c:	438a      	bics	r2, r1
 800610e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2288      	movs	r2, #136	; 0x88
 8006114:	2120      	movs	r1, #32
 8006116:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2110      	movs	r1, #16
 800612a:	438a      	bics	r2, r1
 800612c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006132:	0018      	movs	r0, r3
 8006134:	f7fc fe66 	bl	8002e04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	225c      	movs	r2, #92	; 0x5c
 800613c:	5a9a      	ldrh	r2, [r3, r2]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	215e      	movs	r1, #94	; 0x5e
 8006142:	5a5b      	ldrh	r3, [r3, r1]
 8006144:	b29b      	uxth	r3, r3
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	b29a      	uxth	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	0011      	movs	r1, r2
 800614e:	0018      	movs	r0, r3
 8006150:	f000 f8ba 	bl	80062c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006154:	e0a3      	b.n	800629e <HAL_UART_IRQHandler+0x456>
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	0000080f 	.word	0x0000080f
 800615c:	10000001 	.word	0x10000001
 8006160:	04000120 	.word	0x04000120
 8006164:	08006b29 	.word	0x08006b29
 8006168:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	225c      	movs	r2, #92	; 0x5c
 8006170:	5a99      	ldrh	r1, [r3, r2]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	225e      	movs	r2, #94	; 0x5e
 8006176:	5a9b      	ldrh	r3, [r3, r2]
 8006178:	b29a      	uxth	r2, r3
 800617a:	200a      	movs	r0, #10
 800617c:	183b      	adds	r3, r7, r0
 800617e:	1a8a      	subs	r2, r1, r2
 8006180:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	225e      	movs	r2, #94	; 0x5e
 8006186:	5a9b      	ldrh	r3, [r3, r2]
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d100      	bne.n	8006190 <HAL_UART_IRQHandler+0x348>
 800618e:	e088      	b.n	80062a2 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8006190:	183b      	adds	r3, r7, r0
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d100      	bne.n	800619a <HAL_UART_IRQHandler+0x352>
 8006198:	e083      	b.n	80062a2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4942      	ldr	r1, [pc, #264]	; (80062b0 <HAL_UART_IRQHandler+0x468>)
 80061a6:	400a      	ands	r2, r1
 80061a8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	493f      	ldr	r1, [pc, #252]	; (80062b4 <HAL_UART_IRQHandler+0x46c>)
 80061b6:	400a      	ands	r2, r1
 80061b8:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2288      	movs	r2, #136	; 0x88
 80061be:	2120      	movs	r1, #32
 80061c0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2110      	movs	r1, #16
 80061da:	438a      	bics	r2, r1
 80061dc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061de:	183b      	adds	r3, r7, r0
 80061e0:	881a      	ldrh	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	0011      	movs	r1, r2
 80061e6:	0018      	movs	r0, r3
 80061e8:	f000 f86e 	bl	80062c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80061ec:	e059      	b.n	80062a2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	2380      	movs	r3, #128	; 0x80
 80061f2:	035b      	lsls	r3, r3, #13
 80061f4:	4013      	ands	r3, r2
 80061f6:	d00e      	beq.n	8006216 <HAL_UART_IRQHandler+0x3ce>
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	2380      	movs	r3, #128	; 0x80
 80061fc:	03db      	lsls	r3, r3, #15
 80061fe:	4013      	ands	r3, r2
 8006200:	d009      	beq.n	8006216 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2280      	movs	r2, #128	; 0x80
 8006208:	0352      	lsls	r2, r2, #13
 800620a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	0018      	movs	r0, r3
 8006210:	f001 f8ee 	bl	80073f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006214:	e048      	b.n	80062a8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	2280      	movs	r2, #128	; 0x80
 800621a:	4013      	ands	r3, r2
 800621c:	d012      	beq.n	8006244 <HAL_UART_IRQHandler+0x3fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2280      	movs	r2, #128	; 0x80
 8006222:	4013      	ands	r3, r2
 8006224:	d104      	bne.n	8006230 <HAL_UART_IRQHandler+0x3e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	2380      	movs	r3, #128	; 0x80
 800622a:	041b      	lsls	r3, r3, #16
 800622c:	4013      	ands	r3, r2
 800622e:	d009      	beq.n	8006244 <HAL_UART_IRQHandler+0x3fc>
  {
    if (huart->TxISR != NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006234:	2b00      	cmp	r3, #0
 8006236:	d036      	beq.n	80062a6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	0010      	movs	r0, r2
 8006240:	4798      	blx	r3
    }
    return;
 8006242:	e030      	b.n	80062a6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	2240      	movs	r2, #64	; 0x40
 8006248:	4013      	ands	r3, r2
 800624a:	d008      	beq.n	800625e <HAL_UART_IRQHandler+0x416>
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2240      	movs	r2, #64	; 0x40
 8006250:	4013      	ands	r3, r2
 8006252:	d004      	beq.n	800625e <HAL_UART_IRQHandler+0x416>
  {
    UART_EndTransmit_IT(huart);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	0018      	movs	r0, r3
 8006258:	f000 fd9e 	bl	8006d98 <UART_EndTransmit_IT>
    return;
 800625c:	e024      	b.n	80062a8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	2380      	movs	r3, #128	; 0x80
 8006262:	041b      	lsls	r3, r3, #16
 8006264:	4013      	ands	r3, r2
 8006266:	d009      	beq.n	800627c <HAL_UART_IRQHandler+0x434>
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	05db      	lsls	r3, r3, #23
 800626e:	4013      	ands	r3, r2
 8006270:	d004      	beq.n	800627c <HAL_UART_IRQHandler+0x434>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	0018      	movs	r0, r3
 8006276:	f001 f8cb 	bl	8007410 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800627a:	e015      	b.n	80062a8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	2380      	movs	r3, #128	; 0x80
 8006280:	045b      	lsls	r3, r3, #17
 8006282:	4013      	ands	r3, r2
 8006284:	d010      	beq.n	80062a8 <HAL_UART_IRQHandler+0x460>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	da0d      	bge.n	80062a8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	0018      	movs	r0, r3
 8006290:	f001 f8b6 	bl	8007400 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006294:	e008      	b.n	80062a8 <HAL_UART_IRQHandler+0x460>
      return;
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	e006      	b.n	80062a8 <HAL_UART_IRQHandler+0x460>
    return;
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	e004      	b.n	80062a8 <HAL_UART_IRQHandler+0x460>
      return;
 800629e:	46c0      	nop			; (mov r8, r8)
 80062a0:	e002      	b.n	80062a8 <HAL_UART_IRQHandler+0x460>
      return;
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	e000      	b.n	80062a8 <HAL_UART_IRQHandler+0x460>
    return;
 80062a6:	46c0      	nop			; (mov r8, r8)
  }
}
 80062a8:	46bd      	mov	sp, r7
 80062aa:	b008      	add	sp, #32
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	fffffedf 	.word	0xfffffedf
 80062b4:	effffffe 	.word	0xeffffffe

080062b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062c0:	46c0      	nop			; (mov r8, r8)
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b002      	add	sp, #8
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	000a      	movs	r2, r1
 80062d2:	1cbb      	adds	r3, r7, #2
 80062d4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	46bd      	mov	sp, r7
 80062da:	b002      	add	sp, #8
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062e8:	231a      	movs	r3, #26
 80062ea:	18fb      	adds	r3, r7, r3
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	4313      	orrs	r3, r2
 8006306:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	4313      	orrs	r3, r2
 8006310:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4abc      	ldr	r2, [pc, #752]	; (800660c <UART_SetConfig+0x32c>)
 800631a:	4013      	ands	r3, r2
 800631c:	0019      	movs	r1, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69fa      	ldr	r2, [r7, #28]
 8006324:	430a      	orrs	r2, r1
 8006326:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	4ab8      	ldr	r2, [pc, #736]	; (8006610 <UART_SetConfig+0x330>)
 8006330:	4013      	ands	r3, r2
 8006332:	0019      	movs	r1, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	4313      	orrs	r3, r2
 800634e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	4aaf      	ldr	r2, [pc, #700]	; (8006614 <UART_SetConfig+0x334>)
 8006358:	4013      	ands	r3, r2
 800635a:	0019      	movs	r1, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	69fa      	ldr	r2, [r7, #28]
 8006362:	430a      	orrs	r2, r1
 8006364:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	220f      	movs	r2, #15
 800636e:	4393      	bics	r3, r2
 8006370:	0019      	movs	r1, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4aa5      	ldr	r2, [pc, #660]	; (8006618 <UART_SetConfig+0x338>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d127      	bne.n	80063d8 <UART_SetConfig+0xf8>
 8006388:	4ba4      	ldr	r3, [pc, #656]	; (800661c <UART_SetConfig+0x33c>)
 800638a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638c:	2203      	movs	r2, #3
 800638e:	4013      	ands	r3, r2
 8006390:	2b03      	cmp	r3, #3
 8006392:	d017      	beq.n	80063c4 <UART_SetConfig+0xe4>
 8006394:	d81b      	bhi.n	80063ce <UART_SetConfig+0xee>
 8006396:	2b02      	cmp	r3, #2
 8006398:	d00a      	beq.n	80063b0 <UART_SetConfig+0xd0>
 800639a:	d818      	bhi.n	80063ce <UART_SetConfig+0xee>
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <UART_SetConfig+0xc6>
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d00a      	beq.n	80063ba <UART_SetConfig+0xda>
 80063a4:	e013      	b.n	80063ce <UART_SetConfig+0xee>
 80063a6:	231b      	movs	r3, #27
 80063a8:	18fb      	adds	r3, r7, r3
 80063aa:	2200      	movs	r2, #0
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	e058      	b.n	8006462 <UART_SetConfig+0x182>
 80063b0:	231b      	movs	r3, #27
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	2202      	movs	r2, #2
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	e053      	b.n	8006462 <UART_SetConfig+0x182>
 80063ba:	231b      	movs	r3, #27
 80063bc:	18fb      	adds	r3, r7, r3
 80063be:	2204      	movs	r2, #4
 80063c0:	701a      	strb	r2, [r3, #0]
 80063c2:	e04e      	b.n	8006462 <UART_SetConfig+0x182>
 80063c4:	231b      	movs	r3, #27
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	2208      	movs	r2, #8
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	e049      	b.n	8006462 <UART_SetConfig+0x182>
 80063ce:	231b      	movs	r3, #27
 80063d0:	18fb      	adds	r3, r7, r3
 80063d2:	2210      	movs	r2, #16
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	e044      	b.n	8006462 <UART_SetConfig+0x182>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a90      	ldr	r2, [pc, #576]	; (8006620 <UART_SetConfig+0x340>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d127      	bne.n	8006432 <UART_SetConfig+0x152>
 80063e2:	4b8e      	ldr	r3, [pc, #568]	; (800661c <UART_SetConfig+0x33c>)
 80063e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e6:	220c      	movs	r2, #12
 80063e8:	4013      	ands	r3, r2
 80063ea:	2b0c      	cmp	r3, #12
 80063ec:	d017      	beq.n	800641e <UART_SetConfig+0x13e>
 80063ee:	d81b      	bhi.n	8006428 <UART_SetConfig+0x148>
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d00a      	beq.n	800640a <UART_SetConfig+0x12a>
 80063f4:	d818      	bhi.n	8006428 <UART_SetConfig+0x148>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <UART_SetConfig+0x120>
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d00a      	beq.n	8006414 <UART_SetConfig+0x134>
 80063fe:	e013      	b.n	8006428 <UART_SetConfig+0x148>
 8006400:	231b      	movs	r3, #27
 8006402:	18fb      	adds	r3, r7, r3
 8006404:	2200      	movs	r2, #0
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	e02b      	b.n	8006462 <UART_SetConfig+0x182>
 800640a:	231b      	movs	r3, #27
 800640c:	18fb      	adds	r3, r7, r3
 800640e:	2202      	movs	r2, #2
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	e026      	b.n	8006462 <UART_SetConfig+0x182>
 8006414:	231b      	movs	r3, #27
 8006416:	18fb      	adds	r3, r7, r3
 8006418:	2204      	movs	r2, #4
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	e021      	b.n	8006462 <UART_SetConfig+0x182>
 800641e:	231b      	movs	r3, #27
 8006420:	18fb      	adds	r3, r7, r3
 8006422:	2208      	movs	r2, #8
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	e01c      	b.n	8006462 <UART_SetConfig+0x182>
 8006428:	231b      	movs	r3, #27
 800642a:	18fb      	adds	r3, r7, r3
 800642c:	2210      	movs	r2, #16
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	e017      	b.n	8006462 <UART_SetConfig+0x182>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a7b      	ldr	r2, [pc, #492]	; (8006624 <UART_SetConfig+0x344>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d104      	bne.n	8006446 <UART_SetConfig+0x166>
 800643c:	231b      	movs	r3, #27
 800643e:	18fb      	adds	r3, r7, r3
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	e00d      	b.n	8006462 <UART_SetConfig+0x182>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a77      	ldr	r2, [pc, #476]	; (8006628 <UART_SetConfig+0x348>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d104      	bne.n	800645a <UART_SetConfig+0x17a>
 8006450:	231b      	movs	r3, #27
 8006452:	18fb      	adds	r3, r7, r3
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	e003      	b.n	8006462 <UART_SetConfig+0x182>
 800645a:	231b      	movs	r3, #27
 800645c:	18fb      	adds	r3, r7, r3
 800645e:	2210      	movs	r2, #16
 8006460:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69da      	ldr	r2, [r3, #28]
 8006466:	2380      	movs	r3, #128	; 0x80
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	429a      	cmp	r2, r3
 800646c:	d000      	beq.n	8006470 <UART_SetConfig+0x190>
 800646e:	e066      	b.n	800653e <UART_SetConfig+0x25e>
  {
    switch (clocksource)
 8006470:	231b      	movs	r3, #27
 8006472:	18fb      	adds	r3, r7, r3
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b08      	cmp	r3, #8
 8006478:	d015      	beq.n	80064a6 <UART_SetConfig+0x1c6>
 800647a:	dc18      	bgt.n	80064ae <UART_SetConfig+0x1ce>
 800647c:	2b04      	cmp	r3, #4
 800647e:	d00d      	beq.n	800649c <UART_SetConfig+0x1bc>
 8006480:	dc15      	bgt.n	80064ae <UART_SetConfig+0x1ce>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <UART_SetConfig+0x1ac>
 8006486:	2b02      	cmp	r3, #2
 8006488:	d005      	beq.n	8006496 <UART_SetConfig+0x1b6>
 800648a:	e010      	b.n	80064ae <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800648c:	f7fe fb6a 	bl	8004b64 <HAL_RCC_GetPCLK1Freq>
 8006490:	0003      	movs	r3, r0
 8006492:	617b      	str	r3, [r7, #20]
        break;
 8006494:	e012      	b.n	80064bc <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006496:	4b65      	ldr	r3, [pc, #404]	; (800662c <UART_SetConfig+0x34c>)
 8006498:	617b      	str	r3, [r7, #20]
        break;
 800649a:	e00f      	b.n	80064bc <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800649c:	f7fe fad6 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 80064a0:	0003      	movs	r3, r0
 80064a2:	617b      	str	r3, [r7, #20]
        break;
 80064a4:	e00a      	b.n	80064bc <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064a6:	2380      	movs	r3, #128	; 0x80
 80064a8:	021b      	lsls	r3, r3, #8
 80064aa:	617b      	str	r3, [r7, #20]
        break;
 80064ac:	e006      	b.n	80064bc <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064b2:	231a      	movs	r3, #26
 80064b4:	18fb      	adds	r3, r7, r3
 80064b6:	2201      	movs	r2, #1
 80064b8:	701a      	strb	r2, [r3, #0]
        break;
 80064ba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d100      	bne.n	80064c4 <UART_SetConfig+0x1e4>
 80064c2:	e08e      	b.n	80065e2 <UART_SetConfig+0x302>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064c8:	4b59      	ldr	r3, [pc, #356]	; (8006630 <UART_SetConfig+0x350>)
 80064ca:	0052      	lsls	r2, r2, #1
 80064cc:	5ad3      	ldrh	r3, [r2, r3]
 80064ce:	0019      	movs	r1, r3
 80064d0:	6978      	ldr	r0, [r7, #20]
 80064d2:	f7f9 fe3b 	bl	800014c <__udivsi3>
 80064d6:	0003      	movs	r3, r0
 80064d8:	005a      	lsls	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	18d2      	adds	r2, r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	0019      	movs	r1, r3
 80064e8:	0010      	movs	r0, r2
 80064ea:	f7f9 fe2f 	bl	800014c <__udivsi3>
 80064ee:	0003      	movs	r3, r0
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	2b0f      	cmp	r3, #15
 80064f8:	d91c      	bls.n	8006534 <UART_SetConfig+0x254>
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	2380      	movs	r3, #128	; 0x80
 80064fe:	025b      	lsls	r3, r3, #9
 8006500:	429a      	cmp	r2, r3
 8006502:	d217      	bcs.n	8006534 <UART_SetConfig+0x254>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	b29a      	uxth	r2, r3
 8006508:	200e      	movs	r0, #14
 800650a:	183b      	adds	r3, r7, r0
 800650c:	210f      	movs	r1, #15
 800650e:	438a      	bics	r2, r1
 8006510:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	085b      	lsrs	r3, r3, #1
 8006516:	b29b      	uxth	r3, r3
 8006518:	2207      	movs	r2, #7
 800651a:	4013      	ands	r3, r2
 800651c:	b299      	uxth	r1, r3
 800651e:	183b      	adds	r3, r7, r0
 8006520:	183a      	adds	r2, r7, r0
 8006522:	8812      	ldrh	r2, [r2, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	183a      	adds	r2, r7, r0
 800652e:	8812      	ldrh	r2, [r2, #0]
 8006530:	60da      	str	r2, [r3, #12]
 8006532:	e056      	b.n	80065e2 <UART_SetConfig+0x302>
      }
      else
      {
        ret = HAL_ERROR;
 8006534:	231a      	movs	r3, #26
 8006536:	18fb      	adds	r3, r7, r3
 8006538:	2201      	movs	r2, #1
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	e051      	b.n	80065e2 <UART_SetConfig+0x302>
      }
    }
  }
  else
  {
    switch (clocksource)
 800653e:	231b      	movs	r3, #27
 8006540:	18fb      	adds	r3, r7, r3
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b08      	cmp	r3, #8
 8006546:	d015      	beq.n	8006574 <UART_SetConfig+0x294>
 8006548:	dc18      	bgt.n	800657c <UART_SetConfig+0x29c>
 800654a:	2b04      	cmp	r3, #4
 800654c:	d00d      	beq.n	800656a <UART_SetConfig+0x28a>
 800654e:	dc15      	bgt.n	800657c <UART_SetConfig+0x29c>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <UART_SetConfig+0x27a>
 8006554:	2b02      	cmp	r3, #2
 8006556:	d005      	beq.n	8006564 <UART_SetConfig+0x284>
 8006558:	e010      	b.n	800657c <UART_SetConfig+0x29c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800655a:	f7fe fb03 	bl	8004b64 <HAL_RCC_GetPCLK1Freq>
 800655e:	0003      	movs	r3, r0
 8006560:	617b      	str	r3, [r7, #20]
        break;
 8006562:	e012      	b.n	800658a <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006564:	4b31      	ldr	r3, [pc, #196]	; (800662c <UART_SetConfig+0x34c>)
 8006566:	617b      	str	r3, [r7, #20]
        break;
 8006568:	e00f      	b.n	800658a <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800656a:	f7fe fa6f 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 800656e:	0003      	movs	r3, r0
 8006570:	617b      	str	r3, [r7, #20]
        break;
 8006572:	e00a      	b.n	800658a <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006574:	2380      	movs	r3, #128	; 0x80
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	617b      	str	r3, [r7, #20]
        break;
 800657a:	e006      	b.n	800658a <UART_SetConfig+0x2aa>
      default:
        pclk = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006580:	231a      	movs	r3, #26
 8006582:	18fb      	adds	r3, r7, r3
 8006584:	2201      	movs	r2, #1
 8006586:	701a      	strb	r2, [r3, #0]
        break;
 8006588:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d028      	beq.n	80065e2 <UART_SetConfig+0x302>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006594:	4b26      	ldr	r3, [pc, #152]	; (8006630 <UART_SetConfig+0x350>)
 8006596:	0052      	lsls	r2, r2, #1
 8006598:	5ad3      	ldrh	r3, [r2, r3]
 800659a:	0019      	movs	r1, r3
 800659c:	6978      	ldr	r0, [r7, #20]
 800659e:	f7f9 fdd5 	bl	800014c <__udivsi3>
 80065a2:	0003      	movs	r3, r0
 80065a4:	001a      	movs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	18d2      	adds	r2, r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	0019      	movs	r1, r3
 80065b4:	0010      	movs	r0, r2
 80065b6:	f7f9 fdc9 	bl	800014c <__udivsi3>
 80065ba:	0003      	movs	r3, r0
 80065bc:	b29b      	uxth	r3, r3
 80065be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b0f      	cmp	r3, #15
 80065c4:	d909      	bls.n	80065da <UART_SetConfig+0x2fa>
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	2380      	movs	r3, #128	; 0x80
 80065ca:	025b      	lsls	r3, r3, #9
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d204      	bcs.n	80065da <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = usartdiv;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	60da      	str	r2, [r3, #12]
 80065d8:	e003      	b.n	80065e2 <UART_SetConfig+0x302>
      }
      else
      {
        ret = HAL_ERROR;
 80065da:	231a      	movs	r3, #26
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	2201      	movs	r2, #1
 80065e0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	226a      	movs	r2, #106	; 0x6a
 80065e6:	2101      	movs	r1, #1
 80065e8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2268      	movs	r2, #104	; 0x68
 80065ee:	2101      	movs	r1, #1
 80065f0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80065fe:	231a      	movs	r3, #26
 8006600:	18fb      	adds	r3, r7, r3
 8006602:	781b      	ldrb	r3, [r3, #0]
}
 8006604:	0018      	movs	r0, r3
 8006606:	46bd      	mov	sp, r7
 8006608:	b008      	add	sp, #32
 800660a:	bd80      	pop	{r7, pc}
 800660c:	cfff69f3 	.word	0xcfff69f3
 8006610:	ffffcfff 	.word	0xffffcfff
 8006614:	11fff4ff 	.word	0x11fff4ff
 8006618:	40013800 	.word	0x40013800
 800661c:	40021000 	.word	0x40021000
 8006620:	40004400 	.word	0x40004400
 8006624:	40004800 	.word	0x40004800
 8006628:	40004c00 	.word	0x40004c00
 800662c:	00f42400 	.word	0x00f42400
 8006630:	0800bc00 	.word	0x0800bc00

08006634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006640:	2201      	movs	r2, #1
 8006642:	4013      	ands	r3, r2
 8006644:	d00b      	beq.n	800665e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	4a4a      	ldr	r2, [pc, #296]	; (8006778 <UART_AdvFeatureConfig+0x144>)
 800664e:	4013      	ands	r3, r2
 8006650:	0019      	movs	r1, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	2202      	movs	r2, #2
 8006664:	4013      	ands	r3, r2
 8006666:	d00b      	beq.n	8006680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	4a43      	ldr	r2, [pc, #268]	; (800677c <UART_AdvFeatureConfig+0x148>)
 8006670:	4013      	ands	r3, r2
 8006672:	0019      	movs	r1, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	2204      	movs	r2, #4
 8006686:	4013      	ands	r3, r2
 8006688:	d00b      	beq.n	80066a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	4a3b      	ldr	r2, [pc, #236]	; (8006780 <UART_AdvFeatureConfig+0x14c>)
 8006692:	4013      	ands	r3, r2
 8006694:	0019      	movs	r1, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a6:	2208      	movs	r2, #8
 80066a8:	4013      	ands	r3, r2
 80066aa:	d00b      	beq.n	80066c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	4a34      	ldr	r2, [pc, #208]	; (8006784 <UART_AdvFeatureConfig+0x150>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	0019      	movs	r1, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c8:	2210      	movs	r2, #16
 80066ca:	4013      	ands	r3, r2
 80066cc:	d00b      	beq.n	80066e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	4a2c      	ldr	r2, [pc, #176]	; (8006788 <UART_AdvFeatureConfig+0x154>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	0019      	movs	r1, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ea:	2220      	movs	r2, #32
 80066ec:	4013      	ands	r3, r2
 80066ee:	d00b      	beq.n	8006708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	4a25      	ldr	r2, [pc, #148]	; (800678c <UART_AdvFeatureConfig+0x158>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	0019      	movs	r1, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670c:	2240      	movs	r2, #64	; 0x40
 800670e:	4013      	ands	r3, r2
 8006710:	d01d      	beq.n	800674e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4a1d      	ldr	r2, [pc, #116]	; (8006790 <UART_AdvFeatureConfig+0x15c>)
 800671a:	4013      	ands	r3, r2
 800671c:	0019      	movs	r1, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800672e:	2380      	movs	r3, #128	; 0x80
 8006730:	035b      	lsls	r3, r3, #13
 8006732:	429a      	cmp	r2, r3
 8006734:	d10b      	bne.n	800674e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	4a15      	ldr	r2, [pc, #84]	; (8006794 <UART_AdvFeatureConfig+0x160>)
 800673e:	4013      	ands	r3, r2
 8006740:	0019      	movs	r1, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	2280      	movs	r2, #128	; 0x80
 8006754:	4013      	ands	r3, r2
 8006756:	d00b      	beq.n	8006770 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	4a0e      	ldr	r2, [pc, #56]	; (8006798 <UART_AdvFeatureConfig+0x164>)
 8006760:	4013      	ands	r3, r2
 8006762:	0019      	movs	r1, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	605a      	str	r2, [r3, #4]
  }
}
 8006770:	46c0      	nop			; (mov r8, r8)
 8006772:	46bd      	mov	sp, r7
 8006774:	b002      	add	sp, #8
 8006776:	bd80      	pop	{r7, pc}
 8006778:	fffdffff 	.word	0xfffdffff
 800677c:	fffeffff 	.word	0xfffeffff
 8006780:	fffbffff 	.word	0xfffbffff
 8006784:	ffff7fff 	.word	0xffff7fff
 8006788:	ffffefff 	.word	0xffffefff
 800678c:	ffffdfff 	.word	0xffffdfff
 8006790:	ffefffff 	.word	0xffefffff
 8006794:	ff9fffff 	.word	0xff9fffff
 8006798:	fff7ffff 	.word	0xfff7ffff

0800679c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	228c      	movs	r2, #140	; 0x8c
 80067a8:	2100      	movs	r1, #0
 80067aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067ac:	f7fc fa08 	bl	8002bc0 <HAL_GetTick>
 80067b0:	0003      	movs	r3, r0
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2208      	movs	r2, #8
 80067bc:	4013      	ands	r3, r2
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d10c      	bne.n	80067dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2280      	movs	r2, #128	; 0x80
 80067c6:	0391      	lsls	r1, r2, #14
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4a18      	ldr	r2, [pc, #96]	; (800682c <UART_CheckIdleState+0x90>)
 80067cc:	9200      	str	r2, [sp, #0]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f000 f82e 	bl	8006830 <UART_WaitOnFlagUntilTimeout>
 80067d4:	1e03      	subs	r3, r0, #0
 80067d6:	d001      	beq.n	80067dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e023      	b.n	8006824 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2204      	movs	r2, #4
 80067e4:	4013      	ands	r3, r2
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d10c      	bne.n	8006804 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2280      	movs	r2, #128	; 0x80
 80067ee:	03d1      	lsls	r1, r2, #15
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	4a0e      	ldr	r2, [pc, #56]	; (800682c <UART_CheckIdleState+0x90>)
 80067f4:	9200      	str	r2, [sp, #0]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f000 f81a 	bl	8006830 <UART_WaitOnFlagUntilTimeout>
 80067fc:	1e03      	subs	r3, r0, #0
 80067fe:	d001      	beq.n	8006804 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e00f      	b.n	8006824 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2284      	movs	r2, #132	; 0x84
 8006808:	2120      	movs	r1, #32
 800680a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2288      	movs	r2, #136	; 0x88
 8006810:	2120      	movs	r1, #32
 8006812:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2280      	movs	r2, #128	; 0x80
 800681e:	2100      	movs	r1, #0
 8006820:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	0018      	movs	r0, r3
 8006826:	46bd      	mov	sp, r7
 8006828:	b004      	add	sp, #16
 800682a:	bd80      	pop	{r7, pc}
 800682c:	01ffffff 	.word	0x01ffffff

08006830 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	1dfb      	adds	r3, r7, #7
 800683e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006840:	e062      	b.n	8006908 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	3301      	adds	r3, #1
 8006846:	d05f      	beq.n	8006908 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006848:	f7fc f9ba 	bl	8002bc0 <HAL_GetTick>
 800684c:	0002      	movs	r2, r0
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	429a      	cmp	r2, r3
 8006856:	d302      	bcc.n	800685e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d11d      	bne.n	800689a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4931      	ldr	r1, [pc, #196]	; (8006930 <UART_WaitOnFlagUntilTimeout+0x100>)
 800686a:	400a      	ands	r2, r1
 800686c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2101      	movs	r1, #1
 800687a:	438a      	bics	r2, r1
 800687c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2284      	movs	r2, #132	; 0x84
 8006882:	2120      	movs	r1, #32
 8006884:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2288      	movs	r2, #136	; 0x88
 800688a:	2120      	movs	r1, #32
 800688c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2280      	movs	r2, #128	; 0x80
 8006892:	2100      	movs	r1, #0
 8006894:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e046      	b.n	8006928 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2204      	movs	r2, #4
 80068a2:	4013      	ands	r3, r2
 80068a4:	d030      	beq.n	8006908 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69da      	ldr	r2, [r3, #28]
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	401a      	ands	r2, r3
 80068b2:	2380      	movs	r3, #128	; 0x80
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d126      	bne.n	8006908 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2280      	movs	r2, #128	; 0x80
 80068c0:	0112      	lsls	r2, r2, #4
 80068c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4918      	ldr	r1, [pc, #96]	; (8006930 <UART_WaitOnFlagUntilTimeout+0x100>)
 80068d0:	400a      	ands	r2, r1
 80068d2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2101      	movs	r1, #1
 80068e0:	438a      	bics	r2, r1
 80068e2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2284      	movs	r2, #132	; 0x84
 80068e8:	2120      	movs	r1, #32
 80068ea:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2288      	movs	r2, #136	; 0x88
 80068f0:	2120      	movs	r1, #32
 80068f2:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	228c      	movs	r2, #140	; 0x8c
 80068f8:	2120      	movs	r1, #32
 80068fa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2280      	movs	r2, #128	; 0x80
 8006900:	2100      	movs	r1, #0
 8006902:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e00f      	b.n	8006928 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	4013      	ands	r3, r2
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	425a      	negs	r2, r3
 8006918:	4153      	adcs	r3, r2
 800691a:	b2db      	uxtb	r3, r3
 800691c:	001a      	movs	r2, r3
 800691e:	1dfb      	adds	r3, r7, #7
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	429a      	cmp	r2, r3
 8006924:	d08d      	beq.n	8006842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	0018      	movs	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	b004      	add	sp, #16
 800692e:	bd80      	pop	{r7, pc}
 8006930:	fffffe5f 	.word	0xfffffe5f

08006934 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	1dbb      	adds	r3, r7, #6
 8006940:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	1dba      	adds	r2, r7, #6
 800694c:	215c      	movs	r1, #92	; 0x5c
 800694e:	8812      	ldrh	r2, [r2, #0]
 8006950:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1dba      	adds	r2, r7, #6
 8006956:	215e      	movs	r1, #94	; 0x5e
 8006958:	8812      	ldrh	r2, [r2, #0]
 800695a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	2380      	movs	r3, #128	; 0x80
 8006968:	015b      	lsls	r3, r3, #5
 800696a:	429a      	cmp	r2, r3
 800696c:	d10d      	bne.n	800698a <UART_Start_Receive_IT+0x56>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d104      	bne.n	8006980 <UART_Start_Receive_IT+0x4c>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2260      	movs	r2, #96	; 0x60
 800697a:	494d      	ldr	r1, [pc, #308]	; (8006ab0 <UART_Start_Receive_IT+0x17c>)
 800697c:	5299      	strh	r1, [r3, r2]
 800697e:	e02e      	b.n	80069de <UART_Start_Receive_IT+0xaa>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2260      	movs	r2, #96	; 0x60
 8006984:	21ff      	movs	r1, #255	; 0xff
 8006986:	5299      	strh	r1, [r3, r2]
 8006988:	e029      	b.n	80069de <UART_Start_Receive_IT+0xaa>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10d      	bne.n	80069ae <UART_Start_Receive_IT+0x7a>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <UART_Start_Receive_IT+0x70>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2260      	movs	r2, #96	; 0x60
 800699e:	21ff      	movs	r1, #255	; 0xff
 80069a0:	5299      	strh	r1, [r3, r2]
 80069a2:	e01c      	b.n	80069de <UART_Start_Receive_IT+0xaa>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2260      	movs	r2, #96	; 0x60
 80069a8:	217f      	movs	r1, #127	; 0x7f
 80069aa:	5299      	strh	r1, [r3, r2]
 80069ac:	e017      	b.n	80069de <UART_Start_Receive_IT+0xaa>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	2380      	movs	r3, #128	; 0x80
 80069b4:	055b      	lsls	r3, r3, #21
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d10d      	bne.n	80069d6 <UART_Start_Receive_IT+0xa2>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d104      	bne.n	80069cc <UART_Start_Receive_IT+0x98>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2260      	movs	r2, #96	; 0x60
 80069c6:	217f      	movs	r1, #127	; 0x7f
 80069c8:	5299      	strh	r1, [r3, r2]
 80069ca:	e008      	b.n	80069de <UART_Start_Receive_IT+0xaa>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2260      	movs	r2, #96	; 0x60
 80069d0:	213f      	movs	r1, #63	; 0x3f
 80069d2:	5299      	strh	r1, [r3, r2]
 80069d4:	e003      	b.n	80069de <UART_Start_Receive_IT+0xaa>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2260      	movs	r2, #96	; 0x60
 80069da:	2100      	movs	r1, #0
 80069dc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	228c      	movs	r2, #140	; 0x8c
 80069e2:	2100      	movs	r1, #0
 80069e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2288      	movs	r2, #136	; 0x88
 80069ea:	2122      	movs	r1, #34	; 0x22
 80069ec:	5099      	str	r1, [r3, r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2101      	movs	r1, #1
 80069fa:	430a      	orrs	r2, r1
 80069fc:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006a02:	2380      	movs	r3, #128	; 0x80
 8006a04:	059b      	lsls	r3, r3, #22
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d12e      	bne.n	8006a68 <UART_Start_Receive_IT+0x134>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2268      	movs	r2, #104	; 0x68
 8006a0e:	5a9b      	ldrh	r3, [r3, r2]
 8006a10:	1dba      	adds	r2, r7, #6
 8006a12:	8812      	ldrh	r2, [r2, #0]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d327      	bcc.n	8006a68 <UART_Start_Receive_IT+0x134>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	2380      	movs	r3, #128	; 0x80
 8006a1e:	015b      	lsls	r3, r3, #5
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d107      	bne.n	8006a34 <UART_Start_Receive_IT+0x100>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d103      	bne.n	8006a34 <UART_Start_Receive_IT+0x100>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4a21      	ldr	r2, [pc, #132]	; (8006ab4 <UART_Start_Receive_IT+0x180>)
 8006a30:	671a      	str	r2, [r3, #112]	; 0x70
 8006a32:	e002      	b.n	8006a3a <UART_Start_Receive_IT+0x106>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4a20      	ldr	r2, [pc, #128]	; (8006ab8 <UART_Start_Receive_IT+0x184>)
 8006a38:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2280      	movs	r2, #128	; 0x80
 8006a3e:	2100      	movs	r1, #0
 8006a40:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2180      	movs	r1, #128	; 0x80
 8006a4e:	0049      	lsls	r1, r1, #1
 8006a50:	430a      	orrs	r2, r1
 8006a52:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2180      	movs	r1, #128	; 0x80
 8006a60:	0549      	lsls	r1, r1, #21
 8006a62:	430a      	orrs	r2, r1
 8006a64:	609a      	str	r2, [r3, #8]
 8006a66:	e01d      	b.n	8006aa4 <UART_Start_Receive_IT+0x170>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	2380      	movs	r3, #128	; 0x80
 8006a6e:	015b      	lsls	r3, r3, #5
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d107      	bne.n	8006a84 <UART_Start_Receive_IT+0x150>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <UART_Start_Receive_IT+0x150>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4a0f      	ldr	r2, [pc, #60]	; (8006abc <UART_Start_Receive_IT+0x188>)
 8006a80:	671a      	str	r2, [r3, #112]	; 0x70
 8006a82:	e002      	b.n	8006a8a <UART_Start_Receive_IT+0x156>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4a0e      	ldr	r2, [pc, #56]	; (8006ac0 <UART_Start_Receive_IT+0x18c>)
 8006a88:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2280      	movs	r2, #128	; 0x80
 8006a8e:	2100      	movs	r1, #0
 8006a90:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2190      	movs	r1, #144	; 0x90
 8006a9e:	0049      	lsls	r1, r1, #1
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	b004      	add	sp, #16
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	46c0      	nop			; (mov r8, r8)
 8006ab0:	000001ff 	.word	0x000001ff
 8006ab4:	080071cd 	.word	0x080071cd
 8006ab8:	08006fa9 	.word	0x08006fa9
 8006abc:	08006ebd 	.word	0x08006ebd
 8006ac0:	08006dd1 	.word	0x08006dd1

08006ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4912      	ldr	r1, [pc, #72]	; (8006b20 <UART_EndRxTransfer+0x5c>)
 8006ad8:	400a      	ands	r2, r1
 8006ada:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	490f      	ldr	r1, [pc, #60]	; (8006b24 <UART_EndRxTransfer+0x60>)
 8006ae8:	400a      	ands	r2, r1
 8006aea:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d107      	bne.n	8006b04 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2110      	movs	r1, #16
 8006b00:	438a      	bics	r2, r1
 8006b02:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2288      	movs	r2, #136	; 0x88
 8006b08:	2120      	movs	r1, #32
 8006b0a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006b18:	46c0      	nop			; (mov r8, r8)
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b002      	add	sp, #8
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	fffffedf 	.word	0xfffffedf
 8006b24:	effffffe 	.word	0xeffffffe

08006b28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	225e      	movs	r2, #94	; 0x5e
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2256      	movs	r2, #86	; 0x56
 8006b42:	2100      	movs	r1, #0
 8006b44:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f7ff fbb5 	bl	80062b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b004      	add	sp, #16
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2284      	movs	r2, #132	; 0x84
 8006b62:	589b      	ldr	r3, [r3, r2]
 8006b64:	2b21      	cmp	r3, #33	; 0x21
 8006b66:	d12a      	bne.n	8006bbe <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2256      	movs	r2, #86	; 0x56
 8006b6c:	5a9b      	ldrh	r3, [r3, r2]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d110      	bne.n	8006b96 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2180      	movs	r1, #128	; 0x80
 8006b80:	438a      	bics	r2, r1
 8006b82:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2140      	movs	r1, #64	; 0x40
 8006b90:	430a      	orrs	r2, r1
 8006b92:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006b94:	e013      	b.n	8006bbe <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9a:	781a      	ldrb	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2256      	movs	r2, #86	; 0x56
 8006bb0:	5a9b      	ldrh	r3, [r3, r2]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b299      	uxth	r1, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2256      	movs	r2, #86	; 0x56
 8006bbc:	5299      	strh	r1, [r3, r2]
}
 8006bbe:	46c0      	nop			; (mov r8, r8)
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b002      	add	sp, #8
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2284      	movs	r2, #132	; 0x84
 8006bd2:	589b      	ldr	r3, [r3, r2]
 8006bd4:	2b21      	cmp	r3, #33	; 0x21
 8006bd6:	d12f      	bne.n	8006c38 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2256      	movs	r2, #86	; 0x56
 8006bdc:	5a9b      	ldrh	r3, [r3, r2]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d110      	bne.n	8006c06 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2180      	movs	r1, #128	; 0x80
 8006bf0:	438a      	bics	r2, r1
 8006bf2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2140      	movs	r1, #64	; 0x40
 8006c00:	430a      	orrs	r2, r1
 8006c02:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006c04:	e018      	b.n	8006c38 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	001a      	movs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	05d2      	lsls	r2, r2, #23
 8006c18:	0dd2      	lsrs	r2, r2, #23
 8006c1a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c20:	1c9a      	adds	r2, r3, #2
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2256      	movs	r2, #86	; 0x56
 8006c2a:	5a9b      	ldrh	r3, [r3, r2]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b299      	uxth	r1, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2256      	movs	r2, #86	; 0x56
 8006c36:	5299      	strh	r1, [r3, r2]
}
 8006c38:	46c0      	nop			; (mov r8, r8)
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	b004      	add	sp, #16
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2284      	movs	r2, #132	; 0x84
 8006c4c:	589b      	ldr	r3, [r3, r2]
 8006c4e:	2b21      	cmp	r3, #33	; 0x21
 8006c50:	d143      	bne.n	8006cda <UART_TxISR_8BIT_FIFOEN+0x9a>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006c52:	230e      	movs	r3, #14
 8006c54:	18fb      	adds	r3, r7, r3
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	216a      	movs	r1, #106	; 0x6a
 8006c5a:	5a52      	ldrh	r2, [r2, r1]
 8006c5c:	801a      	strh	r2, [r3, #0]
 8006c5e:	e037      	b.n	8006cd0 <UART_TxISR_8BIT_FIFOEN+0x90>
    {
      if (huart->TxXferCount == 0U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2256      	movs	r2, #86	; 0x56
 8006c64:	5a9b      	ldrh	r3, [r3, r2]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d111      	bne.n	8006c90 <UART_TxISR_8BIT_FIFOEN+0x50>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	491b      	ldr	r1, [pc, #108]	; (8006ce4 <UART_TxISR_8BIT_FIFOEN+0xa4>)
 8006c78:	400a      	ands	r2, r1
 8006c7a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2140      	movs	r1, #64	; 0x40
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006c8c:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8006c8e:	e024      	b.n	8006cda <UART_TxISR_8BIT_FIFOEN+0x9a>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	2280      	movs	r2, #128	; 0x80
 8006c98:	4013      	ands	r3, r2
 8006c9a:	d013      	beq.n	8006cc4 <UART_TxISR_8BIT_FIFOEN+0x84>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca0:	781a      	ldrb	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2256      	movs	r2, #86	; 0x56
 8006cb6:	5a9b      	ldrh	r3, [r3, r2]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b299      	uxth	r1, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2256      	movs	r2, #86	; 0x56
 8006cc2:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006cc4:	210e      	movs	r1, #14
 8006cc6:	187b      	adds	r3, r7, r1
 8006cc8:	881a      	ldrh	r2, [r3, #0]
 8006cca:	187b      	adds	r3, r7, r1
 8006ccc:	3a01      	subs	r2, #1
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	230e      	movs	r3, #14
 8006cd2:	18fb      	adds	r3, r7, r3
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1c2      	bne.n	8006c60 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8006cda:	46c0      	nop			; (mov r8, r8)
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	b004      	add	sp, #16
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	ff7fffff 	.word	0xff7fffff

08006ce8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2284      	movs	r2, #132	; 0x84
 8006cf4:	589b      	ldr	r3, [r3, r2]
 8006cf6:	2b21      	cmp	r3, #33	; 0x21
 8006cf8:	d148      	bne.n	8006d8c <UART_TxISR_16BIT_FIFOEN+0xa4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006cfa:	230e      	movs	r3, #14
 8006cfc:	18fb      	adds	r3, r7, r3
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	216a      	movs	r1, #106	; 0x6a
 8006d02:	5a52      	ldrh	r2, [r2, r1]
 8006d04:	801a      	strh	r2, [r3, #0]
 8006d06:	e03c      	b.n	8006d82 <UART_TxISR_16BIT_FIFOEN+0x9a>
    {
      if (huart->TxXferCount == 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2256      	movs	r2, #86	; 0x56
 8006d0c:	5a9b      	ldrh	r3, [r3, r2]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d111      	bne.n	8006d38 <UART_TxISR_16BIT_FIFOEN+0x50>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689a      	ldr	r2, [r3, #8]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	491d      	ldr	r1, [pc, #116]	; (8006d94 <UART_TxISR_16BIT_FIFOEN+0xac>)
 8006d20:	400a      	ands	r2, r1
 8006d22:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2140      	movs	r1, #64	; 0x40
 8006d30:	430a      	orrs	r2, r1
 8006d32:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006d34:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8006d36:	e029      	b.n	8006d8c <UART_TxISR_16BIT_FIFOEN+0xa4>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	2280      	movs	r2, #128	; 0x80
 8006d40:	4013      	ands	r3, r2
 8006d42:	d018      	beq.n	8006d76 <UART_TxISR_16BIT_FIFOEN+0x8e>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d48:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	001a      	movs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	05d2      	lsls	r2, r2, #23
 8006d56:	0dd2      	lsrs	r2, r2, #23
 8006d58:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5e:	1c9a      	adds	r2, r3, #2
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2256      	movs	r2, #86	; 0x56
 8006d68:	5a9b      	ldrh	r3, [r3, r2]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b299      	uxth	r1, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2256      	movs	r2, #86	; 0x56
 8006d74:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006d76:	210e      	movs	r1, #14
 8006d78:	187b      	adds	r3, r7, r1
 8006d7a:	881a      	ldrh	r2, [r3, #0]
 8006d7c:	187b      	adds	r3, r7, r1
 8006d7e:	3a01      	subs	r2, #1
 8006d80:	801a      	strh	r2, [r3, #0]
 8006d82:	230e      	movs	r3, #14
 8006d84:	18fb      	adds	r3, r7, r3
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1bd      	bne.n	8006d08 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8006d8c:	46c0      	nop			; (mov r8, r8)
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	b004      	add	sp, #16
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	ff7fffff 	.word	0xff7fffff

08006d98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2140      	movs	r1, #64	; 0x40
 8006dac:	438a      	bics	r2, r1
 8006dae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2284      	movs	r2, #132	; 0x84
 8006db4:	2120      	movs	r1, #32
 8006db6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f7fb fa5f 	bl	8002284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	b002      	add	sp, #8
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006dd8:	200e      	movs	r0, #14
 8006dda:	183b      	adds	r3, r7, r0
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	2160      	movs	r1, #96	; 0x60
 8006de0:	5a52      	ldrh	r2, [r2, r1]
 8006de2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2288      	movs	r2, #136	; 0x88
 8006de8:	589b      	ldr	r3, [r3, r2]
 8006dea:	2b22      	cmp	r3, #34	; 0x22
 8006dec:	d158      	bne.n	8006ea0 <UART_RxISR_8BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006df4:	210c      	movs	r1, #12
 8006df6:	187b      	adds	r3, r7, r1
 8006df8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006dfa:	187b      	adds	r3, r7, r1
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	183b      	adds	r3, r7, r0
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b2d9      	uxtb	r1, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0a:	400a      	ands	r2, r1
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	225e      	movs	r2, #94	; 0x5e
 8006e1e:	5a9b      	ldrh	r3, [r3, r2]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b299      	uxth	r1, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	225e      	movs	r2, #94	; 0x5e
 8006e2a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	225e      	movs	r2, #94	; 0x5e
 8006e30:	5a9b      	ldrh	r3, [r3, r2]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d13b      	bne.n	8006eb0 <UART_RxISR_8BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	491d      	ldr	r1, [pc, #116]	; (8006eb8 <UART_RxISR_8BIT+0xe8>)
 8006e44:	400a      	ands	r2, r1
 8006e46:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2101      	movs	r1, #1
 8006e54:	438a      	bics	r2, r1
 8006e56:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2288      	movs	r2, #136	; 0x88
 8006e5c:	2120      	movs	r1, #32
 8006e5e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d110      	bne.n	8006e90 <UART_RxISR_8BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2110      	movs	r1, #16
 8006e7a:	438a      	bics	r2, r1
 8006e7c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	225c      	movs	r2, #92	; 0x5c
 8006e82:	5a9a      	ldrh	r2, [r3, r2]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	0011      	movs	r1, r2
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f7ff fa1d 	bl	80062c8 <HAL_UARTEx_RxEventCallback>
 8006e8e:	e003      	b.n	8006e98 <UART_RxISR_8BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	0018      	movs	r0, r3
 8006e94:	f7fb fa04 	bl	80022a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e9e:	e007      	b.n	8006eb0 <UART_RxISR_8BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2108      	movs	r1, #8
 8006eac:	430a      	orrs	r2, r1
 8006eae:	619a      	str	r2, [r3, #24]
}
 8006eb0:	46c0      	nop			; (mov r8, r8)
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b004      	add	sp, #16
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	fffffedf 	.word	0xfffffedf

08006ebc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ec4:	200e      	movs	r0, #14
 8006ec6:	183b      	adds	r3, r7, r0
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	2160      	movs	r1, #96	; 0x60
 8006ecc:	5a52      	ldrh	r2, [r2, r1]
 8006ece:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2288      	movs	r2, #136	; 0x88
 8006ed4:	589b      	ldr	r3, [r3, r2]
 8006ed6:	2b22      	cmp	r3, #34	; 0x22
 8006ed8:	d158      	bne.n	8006f8c <UART_RxISR_16BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ee0:	210c      	movs	r1, #12
 8006ee2:	187b      	adds	r3, r7, r1
 8006ee4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eea:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006eec:	187b      	adds	r3, r7, r1
 8006eee:	183a      	adds	r2, r7, r0
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	8812      	ldrh	r2, [r2, #0]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f00:	1c9a      	adds	r2, r3, #2
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	225e      	movs	r2, #94	; 0x5e
 8006f0a:	5a9b      	ldrh	r3, [r3, r2]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b299      	uxth	r1, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	225e      	movs	r2, #94	; 0x5e
 8006f16:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	225e      	movs	r2, #94	; 0x5e
 8006f1c:	5a9b      	ldrh	r3, [r3, r2]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d13b      	bne.n	8006f9c <UART_RxISR_16BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	491d      	ldr	r1, [pc, #116]	; (8006fa4 <UART_RxISR_16BIT+0xe8>)
 8006f30:	400a      	ands	r2, r1
 8006f32:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2101      	movs	r1, #1
 8006f40:	438a      	bics	r2, r1
 8006f42:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2288      	movs	r2, #136	; 0x88
 8006f48:	2120      	movs	r1, #32
 8006f4a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d110      	bne.n	8006f7c <UART_RxISR_16BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2110      	movs	r1, #16
 8006f66:	438a      	bics	r2, r1
 8006f68:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	225c      	movs	r2, #92	; 0x5c
 8006f6e:	5a9a      	ldrh	r2, [r3, r2]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	0011      	movs	r1, r2
 8006f74:	0018      	movs	r0, r3
 8006f76:	f7ff f9a7 	bl	80062c8 <HAL_UARTEx_RxEventCallback>
 8006f7a:	e003      	b.n	8006f84 <UART_RxISR_16BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	0018      	movs	r0, r3
 8006f80:	f7fb f98e 	bl	80022a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f8a:	e007      	b.n	8006f9c <UART_RxISR_16BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2108      	movs	r1, #8
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	619a      	str	r2, [r3, #24]
}
 8006f9c:	46c0      	nop			; (mov r8, r8)
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	b004      	add	sp, #16
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	fffffedf 	.word	0xfffffedf

08006fa8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006fb0:	231a      	movs	r3, #26
 8006fb2:	18fb      	adds	r3, r7, r3
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	2160      	movs	r1, #96	; 0x60
 8006fb8:	5a52      	ldrh	r2, [r2, r1]
 8006fba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2288      	movs	r2, #136	; 0x88
 8006fd8:	589b      	ldr	r3, [r3, r2]
 8006fda:	2b22      	cmp	r3, #34	; 0x22
 8006fdc:	d000      	beq.n	8006fe0 <UART_RxISR_8BIT_FIFOEN+0x38>
 8006fde:	e0e1      	b.n	80071a4 <UART_RxISR_8BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006fe0:	230e      	movs	r3, #14
 8006fe2:	18fb      	adds	r3, r7, r3
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	2168      	movs	r1, #104	; 0x68
 8006fe8:	5a52      	ldrh	r2, [r2, r1]
 8006fea:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fec:	e0aa      	b.n	8007144 <UART_RxISR_8BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ff4:	210c      	movs	r1, #12
 8006ff6:	187b      	adds	r3, r7, r1
 8006ff8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ffa:	187b      	adds	r3, r7, r1
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	231a      	movs	r3, #26
 8007002:	18fb      	adds	r3, r7, r3
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b2d9      	uxtb	r1, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700c:	400a      	ands	r2, r1
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	225e      	movs	r2, #94	; 0x5e
 8007020:	5a9b      	ldrh	r3, [r3, r2]
 8007022:	b29b      	uxth	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b299      	uxth	r1, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	225e      	movs	r2, #94	; 0x5e
 800702c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	2207      	movs	r2, #7
 800703a:	4013      	ands	r3, r2
 800703c:	d049      	beq.n	80070d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	2201      	movs	r2, #1
 8007042:	4013      	ands	r3, r2
 8007044:	d010      	beq.n	8007068 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	2380      	movs	r3, #128	; 0x80
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	4013      	ands	r3, r2
 800704e:	d00b      	beq.n	8007068 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2201      	movs	r2, #1
 8007056:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	228c      	movs	r2, #140	; 0x8c
 800705c:	589b      	ldr	r3, [r3, r2]
 800705e:	2201      	movs	r2, #1
 8007060:	431a      	orrs	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	218c      	movs	r1, #140	; 0x8c
 8007066:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	2202      	movs	r2, #2
 800706c:	4013      	ands	r3, r2
 800706e:	d00f      	beq.n	8007090 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2201      	movs	r2, #1
 8007074:	4013      	ands	r3, r2
 8007076:	d00b      	beq.n	8007090 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2202      	movs	r2, #2
 800707e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	228c      	movs	r2, #140	; 0x8c
 8007084:	589b      	ldr	r3, [r3, r2]
 8007086:	2204      	movs	r2, #4
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	218c      	movs	r1, #140	; 0x8c
 800708e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	2204      	movs	r2, #4
 8007094:	4013      	ands	r3, r2
 8007096:	d00f      	beq.n	80070b8 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	2201      	movs	r2, #1
 800709c:	4013      	ands	r3, r2
 800709e:	d00b      	beq.n	80070b8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2204      	movs	r2, #4
 80070a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	228c      	movs	r2, #140	; 0x8c
 80070ac:	589b      	ldr	r3, [r3, r2]
 80070ae:	2202      	movs	r2, #2
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	218c      	movs	r1, #140	; 0x8c
 80070b6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	228c      	movs	r2, #140	; 0x8c
 80070bc:	589b      	ldr	r3, [r3, r2]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d007      	beq.n	80070d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	0018      	movs	r0, r3
 80070c6:	f7ff f8f7 	bl	80062b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	228c      	movs	r2, #140	; 0x8c
 80070ce:	2100      	movs	r1, #0
 80070d0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	225e      	movs	r2, #94	; 0x5e
 80070d6:	5a9b      	ldrh	r3, [r3, r2]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d132      	bne.n	8007144 <UART_RxISR_8BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4934      	ldr	r1, [pc, #208]	; (80071bc <UART_RxISR_8BIT_FIFOEN+0x214>)
 80070ea:	400a      	ands	r2, r1
 80070ec:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4931      	ldr	r1, [pc, #196]	; (80071c0 <UART_RxISR_8BIT_FIFOEN+0x218>)
 80070fa:	400a      	ands	r2, r1
 80070fc:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2288      	movs	r2, #136	; 0x88
 8007102:	2120      	movs	r1, #32
 8007104:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d110      	bne.n	8007136 <UART_RxISR_8BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2110      	movs	r1, #16
 8007120:	438a      	bics	r2, r1
 8007122:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	225c      	movs	r2, #92	; 0x5c
 8007128:	5a9a      	ldrh	r2, [r3, r2]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	0011      	movs	r1, r2
 800712e:	0018      	movs	r0, r3
 8007130:	f7ff f8ca 	bl	80062c8 <HAL_UARTEx_RxEventCallback>
 8007134:	e003      	b.n	800713e <UART_RxISR_8BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	0018      	movs	r0, r3
 800713a:	f7fb f8b1 	bl	80022a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007144:	230e      	movs	r3, #14
 8007146:	18fb      	adds	r3, r7, r3
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d004      	beq.n	8007158 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	2220      	movs	r2, #32
 8007152:	4013      	ands	r3, r2
 8007154:	d000      	beq.n	8007158 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 8007156:	e74a      	b.n	8006fee <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007158:	200a      	movs	r0, #10
 800715a:	183b      	adds	r3, r7, r0
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	215e      	movs	r1, #94	; 0x5e
 8007160:	5a52      	ldrh	r2, [r2, r1]
 8007162:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007164:	0001      	movs	r1, r0
 8007166:	187b      	adds	r3, r7, r1
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d022      	beq.n	80071b4 <UART_RxISR_8BIT_FIFOEN+0x20c>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2268      	movs	r2, #104	; 0x68
 8007172:	5a9b      	ldrh	r3, [r3, r2]
 8007174:	187a      	adds	r2, r7, r1
 8007176:	8812      	ldrh	r2, [r2, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d21b      	bcs.n	80071b4 <UART_RxISR_8BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689a      	ldr	r2, [r3, #8]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	490f      	ldr	r1, [pc, #60]	; (80071c4 <UART_RxISR_8BIT_FIFOEN+0x21c>)
 8007188:	400a      	ands	r2, r1
 800718a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a0e      	ldr	r2, [pc, #56]	; (80071c8 <UART_RxISR_8BIT_FIFOEN+0x220>)
 8007190:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2120      	movs	r1, #32
 800719e:	430a      	orrs	r2, r1
 80071a0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071a2:	e007      	b.n	80071b4 <UART_RxISR_8BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	699a      	ldr	r2, [r3, #24]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2108      	movs	r1, #8
 80071b0:	430a      	orrs	r2, r1
 80071b2:	619a      	str	r2, [r3, #24]
}
 80071b4:	46c0      	nop			; (mov r8, r8)
 80071b6:	46bd      	mov	sp, r7
 80071b8:	b008      	add	sp, #32
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	fffffeff 	.word	0xfffffeff
 80071c0:	effffffe 	.word	0xeffffffe
 80071c4:	efffffff 	.word	0xefffffff
 80071c8:	08006dd1 	.word	0x08006dd1

080071cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08a      	sub	sp, #40	; 0x28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80071d4:	2322      	movs	r3, #34	; 0x22
 80071d6:	18fb      	adds	r3, r7, r3
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	2160      	movs	r1, #96	; 0x60
 80071dc:	5a52      	ldrh	r2, [r2, r1]
 80071de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2288      	movs	r2, #136	; 0x88
 80071fc:	589b      	ldr	r3, [r3, r2]
 80071fe:	2b22      	cmp	r3, #34	; 0x22
 8007200:	d000      	beq.n	8007204 <UART_RxISR_16BIT_FIFOEN+0x38>
 8007202:	e0e1      	b.n	80073c8 <UART_RxISR_16BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007204:	2316      	movs	r3, #22
 8007206:	18fb      	adds	r3, r7, r3
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	2168      	movs	r1, #104	; 0x68
 800720c:	5a52      	ldrh	r2, [r2, r1]
 800720e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007210:	e0aa      	b.n	8007368 <UART_RxISR_16BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007218:	2114      	movs	r1, #20
 800721a:	187b      	adds	r3, r7, r1
 800721c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007222:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007224:	187b      	adds	r3, r7, r1
 8007226:	2222      	movs	r2, #34	; 0x22
 8007228:	18ba      	adds	r2, r7, r2
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	8812      	ldrh	r2, [r2, #0]
 800722e:	4013      	ands	r3, r2
 8007230:	b29a      	uxth	r2, r3
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723a:	1c9a      	adds	r2, r3, #2
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	225e      	movs	r2, #94	; 0x5e
 8007244:	5a9b      	ldrh	r3, [r3, r2]
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b299      	uxth	r1, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	225e      	movs	r2, #94	; 0x5e
 8007250:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	2207      	movs	r2, #7
 800725e:	4013      	ands	r3, r2
 8007260:	d049      	beq.n	80072f6 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	2201      	movs	r2, #1
 8007266:	4013      	ands	r3, r2
 8007268:	d010      	beq.n	800728c <UART_RxISR_16BIT_FIFOEN+0xc0>
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	2380      	movs	r3, #128	; 0x80
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	4013      	ands	r3, r2
 8007272:	d00b      	beq.n	800728c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2201      	movs	r2, #1
 800727a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	228c      	movs	r2, #140	; 0x8c
 8007280:	589b      	ldr	r3, [r3, r2]
 8007282:	2201      	movs	r2, #1
 8007284:	431a      	orrs	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	218c      	movs	r1, #140	; 0x8c
 800728a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	2202      	movs	r2, #2
 8007290:	4013      	ands	r3, r2
 8007292:	d00f      	beq.n	80072b4 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	2201      	movs	r2, #1
 8007298:	4013      	ands	r3, r2
 800729a:	d00b      	beq.n	80072b4 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2202      	movs	r2, #2
 80072a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	228c      	movs	r2, #140	; 0x8c
 80072a8:	589b      	ldr	r3, [r3, r2]
 80072aa:	2204      	movs	r2, #4
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	218c      	movs	r1, #140	; 0x8c
 80072b2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	2204      	movs	r2, #4
 80072b8:	4013      	ands	r3, r2
 80072ba:	d00f      	beq.n	80072dc <UART_RxISR_16BIT_FIFOEN+0x110>
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	2201      	movs	r2, #1
 80072c0:	4013      	ands	r3, r2
 80072c2:	d00b      	beq.n	80072dc <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2204      	movs	r2, #4
 80072ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	228c      	movs	r2, #140	; 0x8c
 80072d0:	589b      	ldr	r3, [r3, r2]
 80072d2:	2202      	movs	r2, #2
 80072d4:	431a      	orrs	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	218c      	movs	r1, #140	; 0x8c
 80072da:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	228c      	movs	r2, #140	; 0x8c
 80072e0:	589b      	ldr	r3, [r3, r2]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d007      	beq.n	80072f6 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	0018      	movs	r0, r3
 80072ea:	f7fe ffe5 	bl	80062b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	228c      	movs	r2, #140	; 0x8c
 80072f2:	2100      	movs	r1, #0
 80072f4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	225e      	movs	r2, #94	; 0x5e
 80072fa:	5a9b      	ldrh	r3, [r3, r2]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d132      	bne.n	8007368 <UART_RxISR_16BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4934      	ldr	r1, [pc, #208]	; (80073e0 <UART_RxISR_16BIT_FIFOEN+0x214>)
 800730e:	400a      	ands	r2, r1
 8007310:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4931      	ldr	r1, [pc, #196]	; (80073e4 <UART_RxISR_16BIT_FIFOEN+0x218>)
 800731e:	400a      	ands	r2, r1
 8007320:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2288      	movs	r2, #136	; 0x88
 8007326:	2120      	movs	r1, #32
 8007328:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007334:	2b01      	cmp	r3, #1
 8007336:	d110      	bne.n	800735a <UART_RxISR_16BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2110      	movs	r1, #16
 8007344:	438a      	bics	r2, r1
 8007346:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	225c      	movs	r2, #92	; 0x5c
 800734c:	5a9a      	ldrh	r2, [r3, r2]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	0011      	movs	r1, r2
 8007352:	0018      	movs	r0, r3
 8007354:	f7fe ffb8 	bl	80062c8 <HAL_UARTEx_RxEventCallback>
 8007358:	e003      	b.n	8007362 <UART_RxISR_16BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	0018      	movs	r0, r3
 800735e:	f7fa ff9f 	bl	80022a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007368:	2316      	movs	r3, #22
 800736a:	18fb      	adds	r3, r7, r3
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d004      	beq.n	800737c <UART_RxISR_16BIT_FIFOEN+0x1b0>
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	2220      	movs	r2, #32
 8007376:	4013      	ands	r3, r2
 8007378:	d000      	beq.n	800737c <UART_RxISR_16BIT_FIFOEN+0x1b0>
 800737a:	e74a      	b.n	8007212 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800737c:	200e      	movs	r0, #14
 800737e:	183b      	adds	r3, r7, r0
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	215e      	movs	r1, #94	; 0x5e
 8007384:	5a52      	ldrh	r2, [r2, r1]
 8007386:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007388:	0001      	movs	r1, r0
 800738a:	187b      	adds	r3, r7, r1
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d022      	beq.n	80073d8 <UART_RxISR_16BIT_FIFOEN+0x20c>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2268      	movs	r2, #104	; 0x68
 8007396:	5a9b      	ldrh	r3, [r3, r2]
 8007398:	187a      	adds	r2, r7, r1
 800739a:	8812      	ldrh	r2, [r2, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d21b      	bcs.n	80073d8 <UART_RxISR_16BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	490f      	ldr	r1, [pc, #60]	; (80073e8 <UART_RxISR_16BIT_FIFOEN+0x21c>)
 80073ac:	400a      	ands	r2, r1
 80073ae:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a0e      	ldr	r2, [pc, #56]	; (80073ec <UART_RxISR_16BIT_FIFOEN+0x220>)
 80073b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2120      	movs	r1, #32
 80073c2:	430a      	orrs	r2, r1
 80073c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073c6:	e007      	b.n	80073d8 <UART_RxISR_16BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2108      	movs	r1, #8
 80073d4:	430a      	orrs	r2, r1
 80073d6:	619a      	str	r2, [r3, #24]
}
 80073d8:	46c0      	nop			; (mov r8, r8)
 80073da:	46bd      	mov	sp, r7
 80073dc:	b00a      	add	sp, #40	; 0x28
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	fffffeff 	.word	0xfffffeff
 80073e4:	effffffe 	.word	0xeffffffe
 80073e8:	efffffff 	.word	0xefffffff
 80073ec:	08006ebd 	.word	0x08006ebd

080073f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073f8:	46c0      	nop			; (mov r8, r8)
 80073fa:	46bd      	mov	sp, r7
 80073fc:	b002      	add	sp, #8
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007408:	46c0      	nop			; (mov r8, r8)
 800740a:	46bd      	mov	sp, r7
 800740c:	b002      	add	sp, #8
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007418:	46c0      	nop			; (mov r8, r8)
 800741a:	46bd      	mov	sp, r7
 800741c:	b002      	add	sp, #8
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2280      	movs	r2, #128	; 0x80
 800742c:	5c9b      	ldrb	r3, [r3, r2]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d101      	bne.n	8007436 <HAL_UARTEx_DisableFifoMode+0x16>
 8007432:	2302      	movs	r3, #2
 8007434:	e027      	b.n	8007486 <HAL_UARTEx_DisableFifoMode+0x66>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2280      	movs	r2, #128	; 0x80
 800743a:	2101      	movs	r1, #1
 800743c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2284      	movs	r2, #132	; 0x84
 8007442:	2124      	movs	r1, #36	; 0x24
 8007444:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2101      	movs	r1, #1
 800745a:	438a      	bics	r2, r1
 800745c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4a0b      	ldr	r2, [pc, #44]	; (8007490 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007462:	4013      	ands	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2284      	movs	r2, #132	; 0x84
 8007478:	2120      	movs	r1, #32
 800747a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2280      	movs	r2, #128	; 0x80
 8007480:	2100      	movs	r1, #0
 8007482:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	0018      	movs	r0, r3
 8007488:	46bd      	mov	sp, r7
 800748a:	b004      	add	sp, #16
 800748c:	bd80      	pop	{r7, pc}
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	dfffffff 	.word	0xdfffffff

08007494 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2280      	movs	r2, #128	; 0x80
 80074a2:	5c9b      	ldrb	r3, [r3, r2]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d101      	bne.n	80074ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074a8:	2302      	movs	r3, #2
 80074aa:	e02e      	b.n	800750a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2280      	movs	r2, #128	; 0x80
 80074b0:	2101      	movs	r1, #1
 80074b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2284      	movs	r2, #132	; 0x84
 80074b8:	2124      	movs	r1, #36	; 0x24
 80074ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2101      	movs	r1, #1
 80074d0:	438a      	bics	r2, r1
 80074d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	08d9      	lsrs	r1, r3, #3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	0018      	movs	r0, r3
 80074ec:	f000 f854 	bl	8007598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2284      	movs	r2, #132	; 0x84
 80074fc:	2120      	movs	r1, #32
 80074fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2280      	movs	r2, #128	; 0x80
 8007504:	2100      	movs	r1, #0
 8007506:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	0018      	movs	r0, r3
 800750c:	46bd      	mov	sp, r7
 800750e:	b004      	add	sp, #16
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2280      	movs	r2, #128	; 0x80
 8007522:	5c9b      	ldrb	r3, [r3, r2]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007528:	2302      	movs	r3, #2
 800752a:	e02f      	b.n	800758c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2280      	movs	r2, #128	; 0x80
 8007530:	2101      	movs	r1, #1
 8007532:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2284      	movs	r2, #132	; 0x84
 8007538:	2124      	movs	r1, #36	; 0x24
 800753a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2101      	movs	r1, #1
 8007550:	438a      	bics	r2, r1
 8007552:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	4a0e      	ldr	r2, [pc, #56]	; (8007594 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800755c:	4013      	ands	r3, r2
 800755e:	0019      	movs	r1, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	0018      	movs	r0, r3
 800756e:	f000 f813 	bl	8007598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2284      	movs	r2, #132	; 0x84
 800757e:	2120      	movs	r1, #32
 8007580:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2280      	movs	r2, #128	; 0x80
 8007586:	2100      	movs	r1, #0
 8007588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	0018      	movs	r0, r3
 800758e:	46bd      	mov	sp, r7
 8007590:	b004      	add	sp, #16
 8007592:	bd80      	pop	{r7, pc}
 8007594:	f1ffffff 	.word	0xf1ffffff

08007598 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800759a:	b089      	sub	sp, #36	; 0x24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80075a0:	2314      	movs	r3, #20
 80075a2:	18fb      	adds	r3, r7, r3
 80075a4:	4a2f      	ldr	r2, [pc, #188]	; (8007664 <UARTEx_SetNbDataToProcess+0xcc>)
 80075a6:	ca03      	ldmia	r2!, {r0, r1}
 80075a8:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80075aa:	230c      	movs	r3, #12
 80075ac:	18fb      	adds	r3, r7, r3
 80075ae:	4a2e      	ldr	r2, [pc, #184]	; (8007668 <UARTEx_SetNbDataToProcess+0xd0>)
 80075b0:	ca03      	ldmia	r2!, {r0, r1}
 80075b2:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d108      	bne.n	80075ce <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	226a      	movs	r2, #106	; 0x6a
 80075c0:	2101      	movs	r1, #1
 80075c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2268      	movs	r2, #104	; 0x68
 80075c8:	2101      	movs	r1, #1
 80075ca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075cc:	e046      	b.n	800765c <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075ce:	261f      	movs	r6, #31
 80075d0:	19bb      	adds	r3, r7, r6
 80075d2:	2208      	movs	r2, #8
 80075d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075d6:	201e      	movs	r0, #30
 80075d8:	183b      	adds	r3, r7, r0
 80075da:	2208      	movs	r2, #8
 80075dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	0e5b      	lsrs	r3, r3, #25
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	241d      	movs	r4, #29
 80075ea:	193b      	adds	r3, r7, r4
 80075ec:	2107      	movs	r1, #7
 80075ee:	400a      	ands	r2, r1
 80075f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	0f5b      	lsrs	r3, r3, #29
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	251c      	movs	r5, #28
 80075fe:	197b      	adds	r3, r7, r5
 8007600:	2107      	movs	r1, #7
 8007602:	400a      	ands	r2, r1
 8007604:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007606:	183b      	adds	r3, r7, r0
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	197a      	adds	r2, r7, r5
 800760c:	7812      	ldrb	r2, [r2, #0]
 800760e:	2114      	movs	r1, #20
 8007610:	1879      	adds	r1, r7, r1
 8007612:	5c8a      	ldrb	r2, [r1, r2]
 8007614:	435a      	muls	r2, r3
 8007616:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007618:	197b      	adds	r3, r7, r5
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	250c      	movs	r5, #12
 800761e:	197a      	adds	r2, r7, r5
 8007620:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007622:	0019      	movs	r1, r3
 8007624:	f7f8 fe1c 	bl	8000260 <__divsi3>
 8007628:	0003      	movs	r3, r0
 800762a:	b299      	uxth	r1, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	226a      	movs	r2, #106	; 0x6a
 8007630:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007632:	19bb      	adds	r3, r7, r6
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	193a      	adds	r2, r7, r4
 8007638:	7812      	ldrb	r2, [r2, #0]
 800763a:	2114      	movs	r1, #20
 800763c:	1879      	adds	r1, r7, r1
 800763e:	5c8a      	ldrb	r2, [r1, r2]
 8007640:	435a      	muls	r2, r3
 8007642:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007644:	193b      	adds	r3, r7, r4
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	197a      	adds	r2, r7, r5
 800764a:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800764c:	0019      	movs	r1, r3
 800764e:	f7f8 fe07 	bl	8000260 <__divsi3>
 8007652:	0003      	movs	r3, r0
 8007654:	b299      	uxth	r1, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2268      	movs	r2, #104	; 0x68
 800765a:	5299      	strh	r1, [r3, r2]
}
 800765c:	46c0      	nop			; (mov r8, r8)
 800765e:	46bd      	mov	sp, r7
 8007660:	b009      	add	sp, #36	; 0x24
 8007662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007664:	0800ba58 	.word	0x0800ba58
 8007668:	0800ba60 	.word	0x0800ba60

0800766c <_ZN6BNO055C1EP19__I2C_HandleTypeDefh>:
 *      Author: gvargas
 */

#include "BNO055.h"

BNO055::BNO055(I2C_HandleTypeDef* pDev, uint8_t slave) {
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	1dfb      	adds	r3, r7, #7
 8007678:	701a      	strb	r2, [r3, #0]
 800767a:	4a12      	ldr	r2, [pc, #72]	; (80076c4 <_ZN6BNO055C1EP19__I2C_HandleTypeDefh+0x58>)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2220      	movs	r2, #32
 8007684:	621a      	str	r2, [r3, #32]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2240      	movs	r2, #64	; 0x40
 800768a:	2100      	movs	r1, #0
 800768c:	5499      	strb	r1, [r3, r2]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2241      	movs	r2, #65	; 0x41
 8007692:	213c      	movs	r1, #60	; 0x3c
 8007694:	5499      	strb	r1, [r3, r2]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2268      	movs	r2, #104	; 0x68
 800769a:	2100      	movs	r1, #0
 800769c:	5499      	strb	r1, [r3, r2]
	// TODO Auto-generated constructor stub
	this->pDevice = pDev;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	605a      	str	r2, [r3, #4]
	this->slave_addr = slave << 1;
 80076a4:	1dfb      	adds	r3, r7, #7
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	18db      	adds	r3, r3, r3
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	721a      	strb	r2, [r3, #8]

	initMemory();
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	0018      	movs	r0, r3
 80076b4:	f000 f9ee 	bl	8007a94 <_ZN6BNO05510initMemoryEv>

}
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	0018      	movs	r0, r3
 80076bc:	46bd      	mov	sp, r7
 80076be:	b004      	add	sp, #16
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	0800bc20 	.word	0x0800bc20

080076c8 <_ZN6BNO055D1Ev>:

BNO055::~BNO055() {
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	4a03      	ldr	r2, [pc, #12]	; (80076e0 <_ZN6BNO055D1Ev+0x18>)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	0018      	movs	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	b002      	add	sp, #8
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	0800bc20 	.word	0x0800bc20

080076e4 <_ZN6BNO055D0Ev>:
BNO055::~BNO055() {
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
}
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	0018      	movs	r0, r3
 80076f0:	f7ff ffea 	bl	80076c8 <_ZN6BNO055D1Ev>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2170      	movs	r1, #112	; 0x70
 80076f8:	0018      	movs	r0, r3
 80076fa:	f001 f88d 	bl	8008818 <_ZdlPvj>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	0018      	movs	r0, r3
 8007702:	46bd      	mov	sp, r7
 8007704:	b002      	add	sp, #8
 8007706:	bd80      	pop	{r7, pc}

08007708 <_ZN6BNO0557readRegEhPhh>:

int BNO055::readReg(unsigned char reg, unsigned char *data, uint8_t size){
 8007708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800770a:	b08b      	sub	sp, #44	; 0x2c
 800770c:	af04      	add	r7, sp, #16
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	0008      	movs	r0, r1
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	0019      	movs	r1, r3
 8007716:	240b      	movs	r4, #11
 8007718:	193b      	adds	r3, r7, r4
 800771a:	1c02      	adds	r2, r0, #0
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	260a      	movs	r6, #10
 8007720:	19bb      	adds	r3, r7, r6
 8007722:	1c0a      	adds	r2, r1, #0
 8007724:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(pDevice, slave_addr | (1<<0), reg, 1, data, size, 1000);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6858      	ldr	r0, [r3, #4]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	7a1b      	ldrb	r3, [r3, #8]
 800772e:	2201      	movs	r2, #1
 8007730:	4313      	orrs	r3, r2
 8007732:	b2db      	uxtb	r3, r3
 8007734:	b299      	uxth	r1, r3
 8007736:	193b      	adds	r3, r7, r4
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b29d      	uxth	r5, r3
 800773c:	19bb      	adds	r3, r7, r6
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	b29b      	uxth	r3, r3
 8007742:	2617      	movs	r6, #23
 8007744:	19bc      	adds	r4, r7, r6
 8007746:	22fa      	movs	r2, #250	; 0xfa
 8007748:	0092      	lsls	r2, r2, #2
 800774a:	9202      	str	r2, [sp, #8]
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	2301      	movs	r3, #1
 8007754:	002a      	movs	r2, r5
 8007756:	f7fc f905 	bl	8003964 <HAL_I2C_Mem_Read>
 800775a:	0003      	movs	r3, r0
 800775c:	7023      	strb	r3, [r4, #0]

	return (int) ret;
 800775e:	19bb      	adds	r3, r7, r6
 8007760:	781b      	ldrb	r3, [r3, #0]
}
 8007762:	0018      	movs	r0, r3
 8007764:	46bd      	mov	sp, r7
 8007766:	b007      	add	sp, #28
 8007768:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800776a <_ZN6BNO0558writeRegEhPhh>:

int BNO055::writeReg(unsigned char reg, unsigned char *data, uint8_t size){
 800776a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776c:	b08b      	sub	sp, #44	; 0x2c
 800776e:	af04      	add	r7, sp, #16
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	0008      	movs	r0, r1
 8007774:	607a      	str	r2, [r7, #4]
 8007776:	0019      	movs	r1, r3
 8007778:	240b      	movs	r4, #11
 800777a:	193b      	adds	r3, r7, r4
 800777c:	1c02      	adds	r2, r0, #0
 800777e:	701a      	strb	r2, [r3, #0]
 8007780:	260a      	movs	r6, #10
 8007782:	19bb      	adds	r3, r7, r6
 8007784:	1c0a      	adds	r2, r1, #0
 8007786:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Write(pDevice, slave_addr, reg, 1, data, size, 1000);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6858      	ldr	r0, [r3, #4]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	7a1b      	ldrb	r3, [r3, #8]
 8007790:	b299      	uxth	r1, r3
 8007792:	193b      	adds	r3, r7, r4
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	b29d      	uxth	r5, r3
 8007798:	19bb      	adds	r3, r7, r6
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	b29b      	uxth	r3, r3
 800779e:	2617      	movs	r6, #23
 80077a0:	19bc      	adds	r4, r7, r6
 80077a2:	22fa      	movs	r2, #250	; 0xfa
 80077a4:	0092      	lsls	r2, r2, #2
 80077a6:	9202      	str	r2, [sp, #8]
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	2301      	movs	r3, #1
 80077b0:	002a      	movs	r2, r5
 80077b2:	f7fb ffa9 	bl	8003708 <HAL_I2C_Mem_Write>
 80077b6:	0003      	movs	r3, r0
 80077b8:	7023      	strb	r3, [r4, #0]

	return (int) ret;
 80077ba:	19bb      	adds	r3, r7, r6
 80077bc:	781b      	ldrb	r3, [r3, #0]
}
 80077be:	0018      	movs	r0, r3
 80077c0:	46bd      	mov	sp, r7
 80077c2:	b007      	add	sp, #28
 80077c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080077c8 <_ZN6BNO0555resetEv>:

void BNO055::reset(){
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]

	enableConfig();
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	0018      	movs	r0, r3
 80077d4:	f000 fa92 	bl	8007cfc <_ZN6BNO05512enableConfigEv>

	data[0] = 0b00100000;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	725a      	strb	r2, [r3, #9]
	writeReg(0x3f, data, 1);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	3309      	adds	r3, #9
 80077e2:	001a      	movs	r2, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	2301      	movs	r3, #1
 80077e8:	213f      	movs	r1, #63	; 0x3f
 80077ea:	f7ff ffbe 	bl	800776a <_ZN6BNO0558writeRegEhPhh>
	HAL_Delay(610);
 80077ee:	4b05      	ldr	r3, [pc, #20]	; (8007804 <_ZN6BNO0555resetEv+0x3c>)
 80077f0:	0018      	movs	r0, r3
 80077f2:	f7fb f9ef 	bl	8002bd4 <HAL_Delay>
	data[0] = 0b00000100;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2204      	movs	r2, #4
 80077fa:	725a      	strb	r2, [r3, #9]
	//writeReg(0x41, data, 1);


}
 80077fc:	46c0      	nop			; (mov r8, r8)
 80077fe:	46bd      	mov	sp, r7
 8007800:	b002      	add	sp, #8
 8007802:	bd80      	pop	{r7, pc}
 8007804:	00000262 	.word	0x00000262

08007808 <_ZN6BNO05510enableNDOFEv>:

void BNO055::enableNDOF(){
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_SET);
 8007810:	2380      	movs	r3, #128	; 0x80
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4828      	ldr	r0, [pc, #160]	; (80078b8 <_ZN6BNO05510enableNDOFEv+0xb0>)
 8007816:	2201      	movs	r2, #1
 8007818:	0019      	movs	r1, r3
 800781a:	f7fb fea7 	bl	800356c <HAL_GPIO_WritePin>
	readMemory(data, 1, sizeOfSettings - 24);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3309      	adds	r3, #9
 8007822:	0019      	movs	r1, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	3b18      	subs	r3, #24
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f000 f9a9 	bl	8007b84 <_ZN6BNO05510readMemoryEPhii>

	if( data[0] == 1 && calibrate == 0){
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	7a5b      	ldrb	r3, [r3, #9]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d121      	bne.n	800787e <_ZN6BNO05510enableNDOFEv+0x76>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2268      	movs	r2, #104	; 0x68
 800783e:	5c9b      	ldrb	r3, [r3, r2]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d11c      	bne.n	800787e <_ZN6BNO05510enableNDOFEv+0x76>
		readMemory(data, 22, sizeOfSettings - 23);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3309      	adds	r3, #9
 8007848:	0019      	movs	r1, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	3b17      	subs	r3, #23
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	2216      	movs	r2, #22
 8007854:	f000 f996 	bl	8007b84 <_ZN6BNO05510readMemoryEPhii>
		enableConfig();
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	0018      	movs	r0, r3
 800785c:	f000 fa4e 	bl	8007cfc <_ZN6BNO05512enableConfigEv>
		writeReg(0x55, data, 22);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	3309      	adds	r3, #9
 8007864:	001a      	movs	r2, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	2316      	movs	r3, #22
 800786a:	2155      	movs	r1, #85	; 0x55
 800786c:	f7ff ff7d 	bl	800776a <_ZN6BNO0558writeRegEhPhh>
		HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
 8007870:	2380      	movs	r3, #128	; 0x80
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4810      	ldr	r0, [pc, #64]	; (80078b8 <_ZN6BNO05510enableNDOFEv+0xb0>)
 8007876:	2200      	movs	r2, #0
 8007878:	0019      	movs	r1, r3
 800787a:	f7fb fe77 	bl	800356c <HAL_GPIO_WritePin>
	}


	data[0] = 0b11000000;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	22c0      	movs	r2, #192	; 0xc0
 8007882:	725a      	strb	r2, [r3, #9]
	writeReg(0x3f, data, 1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3309      	adds	r3, #9
 8007888:	001a      	movs	r2, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	2301      	movs	r3, #1
 800788e:	213f      	movs	r1, #63	; 0x3f
 8007890:	f7ff ff6b 	bl	800776a <_ZN6BNO0558writeRegEhPhh>

	data[0] = 0b00001100;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	220c      	movs	r2, #12
 8007898:	725a      	strb	r2, [r3, #9]
	writeReg(0x3d, data, 1);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3309      	adds	r3, #9
 800789e:	001a      	movs	r2, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	2301      	movs	r3, #1
 80078a4:	213d      	movs	r1, #61	; 0x3d
 80078a6:	f7ff ff60 	bl	800776a <_ZN6BNO0558writeRegEhPhh>
	HAL_Delay(7);
 80078aa:	2007      	movs	r0, #7
 80078ac:	f7fb f992 	bl	8002bd4 <HAL_Delay>
}
 80078b0:	46c0      	nop			; (mov r8, r8)
 80078b2:	46bd      	mov	sp, r7
 80078b4:	b002      	add	sp, #8
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	50000400 	.word	0x50000400

080078bc <_ZN6BNO0557getDataEv>:

void BNO055::getData(){
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	readReg(0x3f, data,1);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3309      	adds	r3, #9
 80078c8:	001a      	movs	r2, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	2301      	movs	r3, #1
 80078ce:	213f      	movs	r1, #63	; 0x3f
 80078d0:	f7ff ff1a 	bl	8007708 <_ZN6BNO0557readRegEhPhh>
	SysTrig = data[0];
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	7a59      	ldrb	r1, [r3, #9]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2247      	movs	r2, #71	; 0x47
 80078dc:	5499      	strb	r1, [r3, r2]
	readReg(0x35, data, 1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	3309      	adds	r3, #9
 80078e2:	001a      	movs	r2, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	2301      	movs	r3, #1
 80078e8:	2135      	movs	r1, #53	; 0x35
 80078ea:	f7ff ff0d 	bl	8007708 <_ZN6BNO0557readRegEhPhh>
	calibrationData = data[0];
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7a59      	ldrb	r1, [r3, #9]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2242      	movs	r2, #66	; 0x42
 80078f6:	5499      	strb	r1, [r3, r2]

	calMag = (calibrationData & 0b00000011);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2242      	movs	r2, #66	; 0x42
 80078fc:	5c9b      	ldrb	r3, [r3, r2]
 80078fe:	2203      	movs	r2, #3
 8007900:	4013      	ands	r3, r2
 8007902:	b2d9      	uxtb	r1, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2243      	movs	r2, #67	; 0x43
 8007908:	5499      	strb	r1, [r3, r2]
	calAcc = (calibrationData & 0b00001100)>>2;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2242      	movs	r2, #66	; 0x42
 800790e:	5c9b      	ldrb	r3, [r3, r2]
 8007910:	109b      	asrs	r3, r3, #2
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2203      	movs	r2, #3
 8007916:	4013      	ands	r3, r2
 8007918:	b2d9      	uxtb	r1, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2244      	movs	r2, #68	; 0x44
 800791e:	5499      	strb	r1, [r3, r2]
	calGyr  = (calibrationData & 0b00110000)>>4;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2242      	movs	r2, #66	; 0x42
 8007924:	5c9b      	ldrb	r3, [r3, r2]
 8007926:	111b      	asrs	r3, r3, #4
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2203      	movs	r2, #3
 800792c:	4013      	ands	r3, r2
 800792e:	b2d9      	uxtb	r1, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2245      	movs	r2, #69	; 0x45
 8007934:	5499      	strb	r1, [r3, r2]
	calSys = (calibrationData & 0b11000000)>>6;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2242      	movs	r2, #66	; 0x42
 800793a:	5c9b      	ldrb	r3, [r3, r2]
 800793c:	099b      	lsrs	r3, r3, #6
 800793e:	b2d9      	uxtb	r1, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2246      	movs	r2, #70	; 0x46
 8007944:	5499      	strb	r1, [r3, r2]

	readReg(0x1a, data, 6);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3309      	adds	r3, #9
 800794a:	001a      	movs	r2, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	2306      	movs	r3, #6
 8007950:	211a      	movs	r1, #26
 8007952:	f7ff fed9 	bl	8007708 <_ZN6BNO0557readRegEhPhh>

	heading =   (double) ((int32_t)(((int8_t)data[1])<<8 | data[0]));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	7a9b      	ldrb	r3, [r3, #10]
 800795a:	b25b      	sxtb	r3, r3
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	7a52      	ldrb	r2, [r2, #9]
 8007962:	4313      	orrs	r3, r2
 8007964:	0018      	movs	r0, r3
 8007966:	f7fa fba3 	bl	80020b0 <__aeabi_i2d>
 800796a:	0002      	movs	r2, r0
 800796c:	000b      	movs	r3, r1
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	628a      	str	r2, [r1, #40]	; 0x28
 8007972:	62cb      	str	r3, [r1, #44]	; 0x2c
	roll =   (double) ((int32_t)(((int8_t)data[3])<<8 | data[2]));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	7b1b      	ldrb	r3, [r3, #12]
 8007978:	b25b      	sxtb	r3, r3
 800797a:	021b      	lsls	r3, r3, #8
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	7ad2      	ldrb	r2, [r2, #11]
 8007980:	4313      	orrs	r3, r2
 8007982:	0018      	movs	r0, r3
 8007984:	f7fa fb94 	bl	80020b0 <__aeabi_i2d>
 8007988:	0002      	movs	r2, r0
 800798a:	000b      	movs	r3, r1
 800798c:	6879      	ldr	r1, [r7, #4]
 800798e:	638a      	str	r2, [r1, #56]	; 0x38
 8007990:	63cb      	str	r3, [r1, #60]	; 0x3c
	pitch =   (double) ((int32_t)(((int8_t)data[5])<<8 | data[4]));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	7b9b      	ldrb	r3, [r3, #14]
 8007996:	b25b      	sxtb	r3, r3
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	7b52      	ldrb	r2, [r2, #13]
 800799e:	4313      	orrs	r3, r2
 80079a0:	0018      	movs	r0, r3
 80079a2:	f7fa fb85 	bl	80020b0 <__aeabi_i2d>
 80079a6:	0002      	movs	r2, r0
 80079a8:	000b      	movs	r3, r1
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	630a      	str	r2, [r1, #48]	; 0x30
 80079ae:	634b      	str	r3, [r1, #52]	; 0x34

	heading /=16;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80079b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079b6:	2200      	movs	r2, #0
 80079b8:	4b35      	ldr	r3, [pc, #212]	; (8007a90 <_ZN6BNO0557getDataEv+0x1d4>)
 80079ba:	f7f9 f921 	bl	8000c00 <__aeabi_ddiv>
 80079be:	0002      	movs	r2, r0
 80079c0:	000b      	movs	r3, r1
 80079c2:	6879      	ldr	r1, [r7, #4]
 80079c4:	628a      	str	r2, [r1, #40]	; 0x28
 80079c6:	62cb      	str	r3, [r1, #44]	; 0x2c
	roll /= 16;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80079cc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80079ce:	2200      	movs	r2, #0
 80079d0:	4b2f      	ldr	r3, [pc, #188]	; (8007a90 <_ZN6BNO0557getDataEv+0x1d4>)
 80079d2:	f7f9 f915 	bl	8000c00 <__aeabi_ddiv>
 80079d6:	0002      	movs	r2, r0
 80079d8:	000b      	movs	r3, r1
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	638a      	str	r2, [r1, #56]	; 0x38
 80079de:	63cb      	str	r3, [r1, #60]	; 0x3c
	pitch /= 16;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079e6:	2200      	movs	r2, #0
 80079e8:	4b29      	ldr	r3, [pc, #164]	; (8007a90 <_ZN6BNO0557getDataEv+0x1d4>)
 80079ea:	f7f9 f909 	bl	8000c00 <__aeabi_ddiv>
 80079ee:	0002      	movs	r2, r0
 80079f0:	000b      	movs	r3, r1
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	630a      	str	r2, [r1, #48]	; 0x30
 80079f6:	634b      	str	r3, [r1, #52]	; 0x34

	//TODO: calibration code.
	if( calibrate == 1 ){
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2268      	movs	r2, #104	; 0x68
 80079fc:	5c9b      	ldrb	r3, [r3, r2]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d10c      	bne.n	8007a1c <_ZN6BNO0557getDataEv+0x160>
		reset();
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	0018      	movs	r0, r3
 8007a06:	f7ff fedf 	bl	80077c8 <_ZN6BNO0555resetEv>
		enableNDOF();
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	f7ff fefb 	bl	8007808 <_ZN6BNO05510enableNDOFEv>
		calibrate = 2;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2268      	movs	r2, #104	; 0x68
 8007a16:	2102      	movs	r1, #2
 8007a18:	5499      	strb	r1, [r3, r2]

		calibrate = 0;
		enableNDOF();
	}

}
 8007a1a:	e034      	b.n	8007a86 <_ZN6BNO0557getDataEv+0x1ca>
	}else if( calibrate == 2 && calibrationData == 0xff){
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2268      	movs	r2, #104	; 0x68
 8007a20:	5c9b      	ldrb	r3, [r3, r2]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d12f      	bne.n	8007a86 <_ZN6BNO0557getDataEv+0x1ca>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2242      	movs	r2, #66	; 0x42
 8007a2a:	5c9b      	ldrb	r3, [r3, r2]
 8007a2c:	2bff      	cmp	r3, #255	; 0xff
 8007a2e:	d12a      	bne.n	8007a86 <_ZN6BNO0557getDataEv+0x1ca>
		enableConfig();
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	0018      	movs	r0, r3
 8007a34:	f000 f962 	bl	8007cfc <_ZN6BNO05512enableConfigEv>
		readReg(0x55, data, 22);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3309      	adds	r3, #9
 8007a3c:	001a      	movs	r2, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	2316      	movs	r3, #22
 8007a42:	2155      	movs	r1, #85	; 0x55
 8007a44:	f7ff fe60 	bl	8007708 <_ZN6BNO0557readRegEhPhh>
		writeMemory(data, 22, sizeOfSettings - 23);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3309      	adds	r3, #9
 8007a4c:	0019      	movs	r1, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	3b17      	subs	r3, #23
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	2216      	movs	r2, #22
 8007a58:	f000 f8bc 	bl	8007bd4 <_ZN6BNO05511writeMemoryEPhii>
		data[0] = 1;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	725a      	strb	r2, [r3, #9]
		writeMemory(data, 1, sizeOfSettings - 24);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3309      	adds	r3, #9
 8007a66:	0019      	movs	r1, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	3b18      	subs	r3, #24
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f000 f8af 	bl	8007bd4 <_ZN6BNO05511writeMemoryEPhii>
		calibrate = 0;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2268      	movs	r2, #104	; 0x68
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	5499      	strb	r1, [r3, r2]
		enableNDOF();
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	0018      	movs	r0, r3
 8007a82:	f7ff fec1 	bl	8007808 <_ZN6BNO05510enableNDOFEv>
}
 8007a86:	46c0      	nop			; (mov r8, r8)
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	b002      	add	sp, #8
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	40300000 	.word	0x40300000

08007a94 <_ZN6BNO05510initMemoryEv>:


void BNO055::initMemory(){
 8007a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a96:	b08b      	sub	sp, #44	; 0x2c
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	61f8      	str	r0, [r7, #28]

	uint8_t temp[sizeOfSettings] = {0};
	temp[0] = 'I';
	usePitchInsteadOfRoll = 0;
	maxServoRoll = 60;
	writeMemory(temp, sizeOfSettings, 0);
 8007a9c:	466b      	mov	r3, sp
 8007a9e:	001e      	movs	r6, r3
	readMemory(memorySettings, sizeOfSettings, 0);
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	3348      	adds	r3, #72	; 0x48
 8007aa4:	0019      	movs	r1, r3
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	6a1a      	ldr	r2, [r3, #32]
 8007aaa:	69f8      	ldr	r0, [r7, #28]
 8007aac:	2300      	movs	r3, #0
 8007aae:	f000 f869 	bl	8007b84 <_ZN6BNO05510readMemoryEPhii>
	usePitchInsteadOfRoll = memorySettings[1];
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	2249      	movs	r2, #73	; 0x49
 8007ab6:	5c9b      	ldrb	r3, [r3, r2]
 8007ab8:	b259      	sxtb	r1, r3
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	2240      	movs	r2, #64	; 0x40
 8007abe:	5499      	strb	r1, [r3, r2]
	maxServoRoll = memorySettings[2];
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	224a      	movs	r2, #74	; 0x4a
 8007ac4:	5c99      	ldrb	r1, [r3, r2]
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	2241      	movs	r2, #65	; 0x41
 8007aca:	5499      	strb	r1, [r3, r2]
	if( memorySettings[0] == 'I') return;
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	2248      	movs	r2, #72	; 0x48
 8007ad0:	5c9b      	ldrb	r3, [r3, r2]
 8007ad2:	2b49      	cmp	r3, #73	; 0x49
 8007ad4:	d101      	bne.n	8007ada <_ZN6BNO05510initMemoryEv+0x46>
 8007ad6:	46b5      	mov	sp, r6
 8007ad8:	e051      	b.n	8007b7e <_ZN6BNO05510initMemoryEv+0xea>
	uint8_t temp[sizeOfSettings] = {0};
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ae2:	001a      	movs	r2, r3
 8007ae4:	3201      	adds	r2, #1
 8007ae6:	0014      	movs	r4, r2
 8007ae8:	2200      	movs	r2, #0
 8007aea:	0015      	movs	r5, r2
 8007aec:	0020      	movs	r0, r4
 8007aee:	0029      	movs	r1, r5
 8007af0:	0002      	movs	r2, r0
 8007af2:	0f52      	lsrs	r2, r2, #29
 8007af4:	000c      	movs	r4, r1
 8007af6:	00e4      	lsls	r4, r4, #3
 8007af8:	617c      	str	r4, [r7, #20]
 8007afa:	697c      	ldr	r4, [r7, #20]
 8007afc:	4314      	orrs	r4, r2
 8007afe:	617c      	str	r4, [r7, #20]
 8007b00:	0002      	movs	r2, r0
 8007b02:	00d2      	lsls	r2, r2, #3
 8007b04:	613a      	str	r2, [r7, #16]
 8007b06:	001a      	movs	r2, r3
 8007b08:	3201      	adds	r2, #1
 8007b0a:	603a      	str	r2, [r7, #0]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	6838      	ldr	r0, [r7, #0]
 8007b12:	6879      	ldr	r1, [r7, #4]
 8007b14:	0002      	movs	r2, r0
 8007b16:	0f52      	lsrs	r2, r2, #29
 8007b18:	000c      	movs	r4, r1
 8007b1a:	00e4      	lsls	r4, r4, #3
 8007b1c:	60fc      	str	r4, [r7, #12]
 8007b1e:	68fc      	ldr	r4, [r7, #12]
 8007b20:	4314      	orrs	r4, r2
 8007b22:	60fc      	str	r4, [r7, #12]
 8007b24:	0002      	movs	r2, r0
 8007b26:	00d2      	lsls	r2, r2, #3
 8007b28:	60ba      	str	r2, [r7, #8]
 8007b2a:	001a      	movs	r2, r3
 8007b2c:	3201      	adds	r2, #1
 8007b2e:	3207      	adds	r2, #7
 8007b30:	08d2      	lsrs	r2, r2, #3
 8007b32:	00d2      	lsls	r2, r2, #3
 8007b34:	4669      	mov	r1, sp
 8007b36:	1a8a      	subs	r2, r1, r2
 8007b38:	4695      	mov	sp, r2
 8007b3a:	466a      	mov	r2, sp
 8007b3c:	3200      	adds	r2, #0
 8007b3e:	623a      	str	r2, [r7, #32]
 8007b40:	6a3a      	ldr	r2, [r7, #32]
 8007b42:	2100      	movs	r1, #0
 8007b44:	7011      	strb	r1, [r2, #0]
 8007b46:	3201      	adds	r2, #1
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	db04      	blt.n	8007b58 <_ZN6BNO05510initMemoryEv+0xc4>
 8007b4e:	2100      	movs	r1, #0
 8007b50:	7011      	strb	r1, [r2, #0]
 8007b52:	3201      	adds	r2, #1
 8007b54:	3b01      	subs	r3, #1
 8007b56:	e7f8      	b.n	8007b4a <_ZN6BNO05510initMemoryEv+0xb6>
	temp[0] = 'I';
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	2249      	movs	r2, #73	; 0x49
 8007b5c:	701a      	strb	r2, [r3, #0]
	usePitchInsteadOfRoll = 0;
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	2240      	movs	r2, #64	; 0x40
 8007b62:	2100      	movs	r1, #0
 8007b64:	5499      	strb	r1, [r3, r2]
	maxServoRoll = 60;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	2241      	movs	r2, #65	; 0x41
 8007b6a:	213c      	movs	r1, #60	; 0x3c
 8007b6c:	5499      	strb	r1, [r3, r2]
	writeMemory(temp, sizeOfSettings, 0);
 8007b6e:	6a39      	ldr	r1, [r7, #32]
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	6a1a      	ldr	r2, [r3, #32]
 8007b74:	69f8      	ldr	r0, [r7, #28]
 8007b76:	2300      	movs	r3, #0
 8007b78:	f000 f82c 	bl	8007bd4 <_ZN6BNO05511writeMemoryEPhii>
 8007b7c:	46b5      	mov	sp, r6
}
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	b00b      	add	sp, #44	; 0x2c
 8007b82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b84 <_ZN6BNO05510readMemoryEPhii>:


void BNO055::readMemory(unsigned char* data, int size, int location){
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	603b      	str	r3, [r7, #0]
	location *= 8;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	603b      	str	r3, [r7, #0]

	for( int index = 0; index < size; index++){
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	da11      	bge.n	8007bc8 <_ZN6BNO05510readMemoryEPhii+0x44>
		data[index] =  (unsigned int)(*(uint64_t*)(0x0801F800 + location));
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	4a0a      	ldr	r2, [pc, #40]	; (8007bd0 <_ZN6BNO05510readMemoryEPhii+0x4c>)
 8007ba8:	4694      	mov	ip, r2
 8007baa:	4463      	add	r3, ip
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	6979      	ldr	r1, [r7, #20]
 8007bb2:	68b8      	ldr	r0, [r7, #8]
 8007bb4:	1841      	adds	r1, r0, r1
 8007bb6:	b2d3      	uxtb	r3, r2
 8007bb8:	700b      	strb	r3, [r1, #0]
		location += 8;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	603b      	str	r3, [r7, #0]
	for( int index = 0; index < size; index++){
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	e7e9      	b.n	8007b9c <_ZN6BNO05510readMemoryEPhii+0x18>
	}

}
 8007bc8:	46c0      	nop			; (mov r8, r8)
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	b006      	add	sp, #24
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	0801f800 	.word	0x0801f800

08007bd4 <_ZN6BNO05511writeMemoryEPhii>:

void BNO055::writeMemory(unsigned char* data, int size, int location){
 8007bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bd6:	b08d      	sub	sp, #52	; 0x34
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]

	readMemory(memorySettings, sizeOfSettings, 0);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3348      	adds	r3, #72	; 0x48
 8007be6:	0019      	movs	r1, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a1a      	ldr	r2, [r3, #32]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f7ff ffc8 	bl	8007b84 <_ZN6BNO05510readMemoryEPhii>

	size = size > sizeOfSettings ? sizeOfSettings : size;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	dd02      	ble.n	8007c04 <_ZN6BNO05511writeMemoryEPhii+0x30>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	e000      	b.n	8007c06 <_ZN6BNO05511writeMemoryEPhii+0x32>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	607b      	str	r3, [r7, #4]
	location = location >= sizeOfSettings ? sizeOfSettings : location;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	db02      	blt.n	8007c18 <_ZN6BNO05511writeMemoryEPhii+0x44>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	e000      	b.n	8007c1a <_ZN6BNO05511writeMemoryEPhii+0x46>
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	603b      	str	r3, [r7, #0]

	for( int index = 0; index < size; index++){
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	da1a      	bge.n	8007c5e <_ZN6BNO05511writeMemoryEPhii+0x8a>
		location = location >= sizeOfSettings ? sizeOfSettings : location;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	db02      	blt.n	8007c38 <_ZN6BNO05511writeMemoryEPhii+0x64>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	e000      	b.n	8007c3a <_ZN6BNO05511writeMemoryEPhii+0x66>
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	603b      	str	r3, [r7, #0]
		memorySettings[location++] = data[index];
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	18d2      	adds	r2, r2, r3
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	1c59      	adds	r1, r3, #1
 8007c46:	6039      	str	r1, [r7, #0]
 8007c48:	7810      	ldrb	r0, [r2, #0]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	2148      	movs	r1, #72	; 0x48
 8007c4e:	18d3      	adds	r3, r2, r3
 8007c50:	185b      	adds	r3, r3, r1
 8007c52:	1c02      	adds	r2, r0, #0
 8007c54:	701a      	strb	r2, [r3, #0]
	for( int index = 0; index < size; index++){
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	3301      	adds	r3, #1
 8007c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c5c:	e7e0      	b.n	8007c20 <_ZN6BNO05511writeMemoryEPhii+0x4c>
	}

	FLASH_EraseInitTypeDef epage;
	epage.TypeErase = FLASH_TYPEERASE_PAGES;
 8007c5e:	2114      	movs	r1, #20
 8007c60:	187b      	adds	r3, r7, r1
 8007c62:	2202      	movs	r2, #2
 8007c64:	601a      	str	r2, [r3, #0]
	epage.Page = 63;
 8007c66:	187b      	adds	r3, r7, r1
 8007c68:	223f      	movs	r2, #63	; 0x3f
 8007c6a:	609a      	str	r2, [r3, #8]
	epage.NbPages = 1;
 8007c6c:	187b      	adds	r3, r7, r1
 8007c6e:	2201      	movs	r2, #1
 8007c70:	60da      	str	r2, [r3, #12]

	uint32_t error = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef ret = HAL_FLASH_Unlock();
 8007c76:	2327      	movs	r3, #39	; 0x27
 8007c78:	18fe      	adds	r6, r7, r3
 8007c7a:	f7fb f9dd 	bl	8003038 <HAL_FLASH_Unlock>
 8007c7e:	0003      	movs	r3, r0
 8007c80:	7033      	strb	r3, [r6, #0]

	ret = HAL_FLASHEx_Erase(&epage, &error);
 8007c82:	2327      	movs	r3, #39	; 0x27
 8007c84:	18fe      	adds	r6, r7, r3
 8007c86:	2310      	movs	r3, #16
 8007c88:	18fa      	adds	r2, r7, r3
 8007c8a:	2114      	movs	r1, #20
 8007c8c:	187b      	adds	r3, r7, r1
 8007c8e:	0011      	movs	r1, r2
 8007c90:	0018      	movs	r0, r3
 8007c92:	f7fb fa63 	bl	800315c <HAL_FLASHEx_Erase>
 8007c96:	0003      	movs	r3, r0
 8007c98:	7033      	strb	r3, [r6, #0]

	for( int index = 0; index < sizeOfSettings; index++){
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	da1c      	bge.n	8007ce2 <_ZN6BNO05511writeMemoryEPhii+0x10e>
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x0801F800 + (index * 8), memorySettings[index]);
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	4a13      	ldr	r2, [pc, #76]	; (8007cf8 <_ZN6BNO05511writeMemoryEPhii+0x124>)
 8007cac:	4694      	mov	ip, r2
 8007cae:	4463      	add	r3, ip
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	2148      	movs	r1, #72	; 0x48
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	18d3      	adds	r3, r2, r3
 8007cbc:	185b      	adds	r3, r3, r1
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	001c      	movs	r4, r3
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	001d      	movs	r5, r3
 8007cc6:	2327      	movs	r3, #39	; 0x27
 8007cc8:	18fe      	adds	r6, r7, r3
 8007cca:	0022      	movs	r2, r4
 8007ccc:	002b      	movs	r3, r5
 8007cce:	0001      	movs	r1, r0
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	f7fb f963 	bl	8002f9c <HAL_FLASH_Program>
 8007cd6:	0003      	movs	r3, r0
 8007cd8:	7033      	strb	r3, [r6, #0]
	for( int index = 0; index < sizeOfSettings; index++){
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	3301      	adds	r3, #1
 8007cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ce0:	e7dd      	b.n	8007c9e <_ZN6BNO05511writeMemoryEPhii+0xca>
	}

	ret = HAL_FLASH_Unlock();
 8007ce2:	2327      	movs	r3, #39	; 0x27
 8007ce4:	18fc      	adds	r4, r7, r3
 8007ce6:	f7fb f9a7 	bl	8003038 <HAL_FLASH_Unlock>
 8007cea:	0003      	movs	r3, r0
 8007cec:	7023      	strb	r3, [r4, #0]

}
 8007cee:	46c0      	nop			; (mov r8, r8)
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	b00d      	add	sp, #52	; 0x34
 8007cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cf6:	46c0      	nop			; (mov r8, r8)
 8007cf8:	01003f00 	.word	0x01003f00

08007cfc <_ZN6BNO05512enableConfigEv>:

void BNO055::enableConfig(){
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	// TODO: calibration code.
	data[0] = 0;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	725a      	strb	r2, [r3, #9]
	writeReg(0x3d, data, 1);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3309      	adds	r3, #9
 8007d0e:	001a      	movs	r2, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	2301      	movs	r3, #1
 8007d14:	213d      	movs	r1, #61	; 0x3d
 8007d16:	f7ff fd28 	bl	800776a <_ZN6BNO0558writeRegEhPhh>
	HAL_Delay(19);
 8007d1a:	2013      	movs	r0, #19
 8007d1c:	f7fa ff5a 	bl	8002bd4 <HAL_Delay>

}
 8007d20:	46c0      	nop			; (mov r8, r8)
 8007d22:	46bd      	mov	sp, r7
 8007d24:	b002      	add	sp, #8
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <_ZN6BNO05522saveOrientationAsPitchEh>:

void BNO055::saveOrientationAsPitch(uint8_t val ){
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	000a      	movs	r2, r1
 8007d32:	1cfb      	adds	r3, r7, #3
 8007d34:	701a      	strb	r2, [r3, #0]
	data[0] = 1;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	725a      	strb	r2, [r3, #9]
	if(val == 0){
 8007d3c:	1cfb      	adds	r3, r7, #3
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <_ZN6BNO05522saveOrientationAsPitchEh+0x22>
		data[0] = 0;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	725a      	strb	r2, [r3, #9]
	}

	writeMemory(data, 1, 1);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3309      	adds	r3, #9
 8007d4e:	0019      	movs	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	2301      	movs	r3, #1
 8007d54:	2201      	movs	r2, #1
 8007d56:	f7ff ff3d 	bl	8007bd4 <_ZN6BNO05511writeMemoryEPhii>
	usePitchInsteadOfRoll = data[0];
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7a5b      	ldrb	r3, [r3, #9]
 8007d5e:	b259      	sxtb	r1, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2240      	movs	r2, #64	; 0x40
 8007d64:	5499      	strb	r1, [r3, r2]

}
 8007d66:	46c0      	nop			; (mov r8, r8)
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	b002      	add	sp, #8
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <_ZN6BNO05518getOrientationTextEv>:

char* BNO055::getOrientationText(){
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	if( usePitchInsteadOfRoll == 0){
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2240      	movs	r2, #64	; 0x40
 8007d7c:	569b      	ldrsb	r3, [r3, r2]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <_ZN6BNO05518getOrientationTextEv+0x16>
		return "Roll";
 8007d82:	4b03      	ldr	r3, [pc, #12]	; (8007d90 <_ZN6BNO05518getOrientationTextEv+0x20>)
 8007d84:	e000      	b.n	8007d88 <_ZN6BNO05518getOrientationTextEv+0x18>
	}

	return "Pitch";
 8007d86:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <_ZN6BNO05518getOrientationTextEv+0x24>)
}
 8007d88:	0018      	movs	r0, r3
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	b002      	add	sp, #8
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	0800ba68 	.word	0x0800ba68
 8007d94:	0800ba70 	.word	0x0800ba70

08007d98 <_ZN6BNO05516saveMaxServoRollEh>:
void BNO055::saveMaxServoRoll(uint8_t max){
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	000a      	movs	r2, r1
 8007da2:	1cfb      	adds	r3, r7, #3
 8007da4:	701a      	strb	r2, [r3, #0]
	if( max < 0)
		max *= -1;

	data[0]= max;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	1cfa      	adds	r2, r7, #3
 8007daa:	7812      	ldrb	r2, [r2, #0]
 8007dac:	725a      	strb	r2, [r3, #9]
	writeMemory(data, 1, 2);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3309      	adds	r3, #9
 8007db2:	0019      	movs	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	2302      	movs	r3, #2
 8007db8:	2201      	movs	r2, #1
 8007dba:	f7ff ff0b 	bl	8007bd4 <_ZN6BNO05511writeMemoryEPhii>
	maxServoRoll = data[0];
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7a59      	ldrb	r1, [r3, #9]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2241      	movs	r2, #65	; 0x41
 8007dc6:	5499      	strb	r1, [r3, r2]

}
 8007dc8:	46c0      	nop			; (mov r8, r8)
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	b002      	add	sp, #8
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <_ZN4HM11C1Ev>:
 */

#include "HM11.h"


HM11::HM11() {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	4a06      	ldr	r2, [pc, #24]	; (8007df4 <_ZN4HM11C1Ev+0x24>)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	605a      	str	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	66da      	str	r2, [r3, #108]	; 0x6c
	// TODO Auto-generated constructor stub

}
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	0018      	movs	r0, r3
 8007dee:	46bd      	mov	sp, r7
 8007df0:	b002      	add	sp, #8
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	0800bc30 	.word	0x0800bc30

08007df8 <_ZN4HM11D1Ev>:

HM11::~HM11() {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	4a03      	ldr	r2, [pc, #12]	; (8007e10 <_ZN4HM11D1Ev+0x18>)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	0018      	movs	r0, r3
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	b002      	add	sp, #8
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	0800bc30 	.word	0x0800bc30

08007e14 <_ZN4HM11D0Ev>:
HM11::~HM11() {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
}
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	0018      	movs	r0, r3
 8007e20:	f7ff ffea 	bl	8007df8 <_ZN4HM11D1Ev>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	21d8      	movs	r1, #216	; 0xd8
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f000 fcf5 	bl	8008818 <_ZdlPvj>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	0018      	movs	r0, r3
 8007e32:	46bd      	mov	sp, r7
 8007e34:	b002      	add	sp, #8
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <_ZN4HM1112addCharacterEc>:

void HM11::addCharacter(char c){
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	000a      	movs	r2, r1
 8007e42:	1cfb      	adds	r3, r7, #3
 8007e44:	701a      	strb	r2, [r3, #0]

	if( c == '\r' || c == '\n' || characterCount >= 50){
 8007e46:	1cfb      	adds	r3, r7, #3
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b0d      	cmp	r3, #13
 8007e4c:	d007      	beq.n	8007e5e <_ZN4HM1112addCharacterEc+0x26>
 8007e4e:	1cfb      	adds	r3, r7, #3
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b0a      	cmp	r3, #10
 8007e54:	d003      	beq.n	8007e5e <_ZN4HM1112addCharacterEc+0x26>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	2b31      	cmp	r3, #49	; 0x31
 8007e5c:	dd16      	ble.n	8007e8c <_ZN4HM1112addCharacterEc+0x54>
		memcpy(message,buffer, sizeof(buffer));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	333a      	adds	r3, #58	; 0x3a
 8007e62:	0018      	movs	r0, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3308      	adds	r3, #8
 8007e68:	2232      	movs	r2, #50	; 0x32
 8007e6a:	0019      	movs	r1, r3
 8007e6c:	f000 fd3c 	bl	80088e8 <memcpy>
		memset(buffer, 0, sizeof(buffer));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3308      	adds	r3, #8
 8007e74:	2232      	movs	r2, #50	; 0x32
 8007e76:	2100      	movs	r1, #0
 8007e78:	0018      	movs	r0, r3
 8007e7a:	f000 fd3e 	bl	80088fa <memset>
		newMessage = 1;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	66da      	str	r2, [r3, #108]	; 0x6c
		characterCount = 0;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	605a      	str	r2, [r3, #4]
 8007e8a:	e00a      	b.n	8007ea2 <_ZN4HM1112addCharacterEc+0x6a>
	}else{
		buffer[characterCount++] = c;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	1c59      	adds	r1, r3, #1
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	6051      	str	r1, [r2, #4]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	18d3      	adds	r3, r2, r3
 8007e9a:	1cfa      	adds	r2, r7, #3
 8007e9c:	7812      	ldrb	r2, [r2, #0]
 8007e9e:	721a      	strb	r2, [r3, #8]
	}
}
 8007ea0:	46c0      	nop			; (mov r8, r8)
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	b002      	add	sp, #8
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <_ZN4HM1112parseCommandEv>:

void HM11::parseCommand(){
 8007eac:	b5b0      	push	{r4, r5, r7, lr}
 8007eae:	b090      	sub	sp, #64	; 0x40
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
	char temp[50];

	memcpy(temp,message,sizeof(message));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	333a      	adds	r3, #58	; 0x3a
 8007eb8:	2508      	movs	r5, #8
 8007eba:	197a      	adds	r2, r7, r5
 8007ebc:	0010      	movs	r0, r2
 8007ebe:	0019      	movs	r1, r3
 8007ec0:	2332      	movs	r3, #50	; 0x32
 8007ec2:	001a      	movs	r2, r3
 8007ec4:	f000 fd10 	bl	80088e8 <memcpy>
	memset(field,0,strlen(field));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3370      	adds	r3, #112	; 0x70
 8007ecc:	001c      	movs	r4, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	3370      	adds	r3, #112	; 0x70
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	f7f8 f91e 	bl	8000114 <strlen>
 8007ed8:	0003      	movs	r3, r0
 8007eda:	001a      	movs	r2, r3
 8007edc:	2100      	movs	r1, #0
 8007ede:	0020      	movs	r0, r4
 8007ee0:	f000 fd0b 	bl	80088fa <memset>
	memset(valueString,0,strlen(valueString));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	33a2      	adds	r3, #162	; 0xa2
 8007ee8:	001c      	movs	r4, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	33a2      	adds	r3, #162	; 0xa2
 8007eee:	0018      	movs	r0, r3
 8007ef0:	f7f8 f910 	bl	8000114 <strlen>
 8007ef4:	0003      	movs	r3, r0
 8007ef6:	001a      	movs	r2, r3
 8007ef8:	2100      	movs	r1, #0
 8007efa:	0020      	movs	r0, r4
 8007efc:	f000 fcfd 	bl	80088fa <memset>

	char* ptr = strtok(temp,":");
 8007f00:	4a1a      	ldr	r2, [pc, #104]	; (8007f6c <_ZN4HM1112parseCommandEv+0xc0>)
 8007f02:	197b      	adds	r3, r7, r5
 8007f04:	0011      	movs	r1, r2
 8007f06:	0018      	movs	r0, r3
 8007f08:	f001 fa54 	bl	80093b4 <strtok>
 8007f0c:	0003      	movs	r3, r0
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c

	if( ptr == NULL ) return;
 8007f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d024      	beq.n	8007f60 <_ZN4HM1112parseCommandEv+0xb4>
	sprintf(field,"%s",ptr);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3370      	adds	r3, #112	; 0x70
 8007f1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f1c:	4914      	ldr	r1, [pc, #80]	; (8007f70 <_ZN4HM1112parseCommandEv+0xc4>)
 8007f1e:	0018      	movs	r0, r3
 8007f20:	f001 fa28 	bl	8009374 <siprintf>

	ptr = strtok(NULL,":");
 8007f24:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <_ZN4HM1112parseCommandEv+0xc0>)
 8007f26:	0019      	movs	r1, r3
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f001 fa43 	bl	80093b4 <strtok>
 8007f2e:	0003      	movs	r3, r0
 8007f30:	63fb      	str	r3, [r7, #60]	; 0x3c
	if( ptr == NULL ) return;
 8007f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d015      	beq.n	8007f64 <_ZN4HM1112parseCommandEv+0xb8>
	sprintf(valueString,"%s",ptr);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	33a2      	adds	r3, #162	; 0xa2
 8007f3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f3e:	490c      	ldr	r1, [pc, #48]	; (8007f70 <_ZN4HM1112parseCommandEv+0xc4>)
 8007f40:	0018      	movs	r0, r3
 8007f42:	f001 fa17 	bl	8009374 <siprintf>

	value = atoi(valueString);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	33a2      	adds	r3, #162	; 0xa2
 8007f4a:	0018      	movs	r0, r3
 8007f4c:	f000 fc6c 	bl	8008828 <atoi>
 8007f50:	0002      	movs	r2, r0
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	21d4      	movs	r1, #212	; 0xd4
 8007f56:	505a      	str	r2, [r3, r1]

	newMessage = 0;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	66da      	str	r2, [r3, #108]	; 0x6c
 8007f5e:	e002      	b.n	8007f66 <_ZN4HM1112parseCommandEv+0xba>
	if( ptr == NULL ) return;
 8007f60:	46c0      	nop			; (mov r8, r8)
 8007f62:	e000      	b.n	8007f66 <_ZN4HM1112parseCommandEv+0xba>
	if( ptr == NULL ) return;
 8007f64:	46c0      	nop			; (mov r8, r8)

}
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b010      	add	sp, #64	; 0x40
 8007f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8007f6c:	0800ba78 	.word	0x0800ba78
 8007f70:	0800ba7c 	.word	0x0800ba7c

08007f74 <_ZN8NRF24L016csnLowEv>:
public: //vars.

public: // funcs.


	void csnLow(){ HAL_GPIO_WritePin(csnPort, csn, GPIO_PIN_RESET);}
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6898      	ldr	r0, [r3, #8]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	8a1b      	ldrh	r3, [r3, #16]
 8007f84:	2200      	movs	r2, #0
 8007f86:	0019      	movs	r1, r3
 8007f88:	f7fb faf0 	bl	800356c <HAL_GPIO_WritePin>
 8007f8c:	46c0      	nop			; (mov r8, r8)
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	b002      	add	sp, #8
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <_ZN8NRF24L017csnHighEv>:
	void csnHigh(){ HAL_GPIO_WritePin(csnPort, csn, GPIO_PIN_SET);}
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6898      	ldr	r0, [r3, #8]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	8a1b      	ldrh	r3, [r3, #16]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	0019      	movs	r1, r3
 8007fa8:	f7fb fae0 	bl	800356c <HAL_GPIO_WritePin>
 8007fac:	46c0      	nop			; (mov r8, r8)
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	b002      	add	sp, #8
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <_ZN8NRF24L015ceLowEv>:

	void ceLow(){ HAL_GPIO_WritePin(cePort, ce, GPIO_PIN_RESET);}
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68d8      	ldr	r0, [r3, #12]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	8a5b      	ldrh	r3, [r3, #18]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	0019      	movs	r1, r3
 8007fc8:	f7fb fad0 	bl	800356c <HAL_GPIO_WritePin>
 8007fcc:	46c0      	nop			; (mov r8, r8)
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	b002      	add	sp, #8
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <_ZN8NRF24L016ceHighEv>:
	void ceHigh(){ HAL_GPIO_WritePin(cePort, ce, GPIO_PIN_SET);}
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68d8      	ldr	r0, [r3, #12]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	8a5b      	ldrh	r3, [r3, #18]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	0019      	movs	r1, r3
 8007fe8:	f7fb fac0 	bl	800356c <HAL_GPIO_WritePin>
 8007fec:	46c0      	nop			; (mov r8, r8)
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	b002      	add	sp, #8
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <_ZN8NRF24L01D1Ev>:
NRF24L01::NRF24L01() {
	// TODO Auto-generated constructor stub

}

NRF24L01::~NRF24L01() {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	4a03      	ldr	r2, [pc, #12]	; (800800c <_ZN8NRF24L01D1Ev+0x18>)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	0018      	movs	r0, r3
 8008006:	46bd      	mov	sp, r7
 8008008:	b002      	add	sp, #8
 800800a:	bd80      	pop	{r7, pc}
 800800c:	0800bc40 	.word	0x0800bc40

08008010 <_ZN8NRF24L01D0Ev>:
NRF24L01::~NRF24L01() {
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
}
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	0018      	movs	r0, r3
 800801c:	f7ff ffea 	bl	8007ff4 <_ZN8NRF24L01D1Ev>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	211c      	movs	r1, #28
 8008024:	0018      	movs	r0, r3
 8008026:	f000 fbf7 	bl	8008818 <_ZdlPvj>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	0018      	movs	r0, r3
 800802e:	46bd      	mov	sp, r7
 8008030:	b002      	add	sp, #8
 8008032:	bd80      	pop	{r7, pc}

08008034 <_ZN8NRF24L01C1EP19__SPI_HandleTypeDefP12GPIO_TypeDefS3_tt>:

NRF24L01::NRF24L01(SPI_HandleTypeDef* port, GPIO_TypeDef* csnPort, GPIO_TypeDef* cePort, uint16_t csn, uint16_t ce){
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	603b      	str	r3, [r7, #0]
 8008042:	4a15      	ldr	r2, [pc, #84]	; (8008098 <_ZN8NRF24L01C1EP19__SPI_HandleTypeDefP12GPIO_TypeDefS3_tt+0x64>)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2201      	movs	r2, #1
 800804c:	829a      	strh	r2, [r3, #20]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	22fa      	movs	r2, #250	; 0xfa
 8008052:	00d2      	lsls	r2, r2, #3
 8008054:	619a      	str	r2, [r3, #24]
	this->port = port;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	605a      	str	r2, [r3, #4]
	this->csnPort = csnPort;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	609a      	str	r2, [r3, #8]
	this->cePort = cePort;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	60da      	str	r2, [r3, #12]

	this->csn = csn;
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	2318      	movs	r3, #24
 800806c:	18fb      	adds	r3, r7, r3
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	8213      	strh	r3, [r2, #16]
	this->ce = ce;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	221c      	movs	r2, #28
 8008076:	18ba      	adds	r2, r7, r2
 8008078:	8812      	ldrh	r2, [r2, #0]
 800807a:	825a      	strh	r2, [r3, #18]

	ceLow();
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	0018      	movs	r0, r3
 8008080:	f7ff ff98 	bl	8007fb4 <_ZN8NRF24L015ceLowEv>
	csnHigh();
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	0018      	movs	r0, r3
 8008088:	f7ff ff84 	bl	8007f94 <_ZN8NRF24L017csnHighEv>


}
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	0018      	movs	r0, r3
 8008090:	46bd      	mov	sp, r7
 8008092:	b004      	add	sp, #16
 8008094:	bd80      	pop	{r7, pc}
 8008096:	46c0      	nop			; (mov r8, r8)
 8008098:	0800bc40 	.word	0x0800bc40

0800809c <_ZN8NRF24L017readRegEh>:

uint8_t NRF24L01::readReg( uint8_t reg){
 800809c:	b590      	push	{r4, r7, lr}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	000a      	movs	r2, r1
 80080a6:	1cfb      	adds	r3, r7, #3
 80080a8:	701a      	strb	r2, [r3, #0]
	reg = 0b00011111 & reg;
 80080aa:	1cfb      	adds	r3, r7, #3
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	221f      	movs	r2, #31
 80080b0:	4013      	ands	r3, r2
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	1cfb      	adds	r3, r7, #3
 80080b6:	701a      	strb	r2, [r3, #0]
	uint8_t result = 0;
 80080b8:	240f      	movs	r4, #15
 80080ba:	193b      	adds	r3, r7, r4
 80080bc:	2200      	movs	r2, #0
 80080be:	701a      	strb	r2, [r3, #0]

	csnLow();
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	0018      	movs	r0, r3
 80080c4:	f7ff ff56 	bl	8007f74 <_ZN8NRF24L016csnLowEv>
	HAL_SPI_Transmit(port, &reg, Size, Timeout);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6858      	ldr	r0, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	8a9a      	ldrh	r2, [r3, #20]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	1cf9      	adds	r1, r7, #3
 80080d6:	f7fc ff47 	bl	8004f68 <HAL_SPI_Transmit>
	HAL_SPI_Receive(port, &result, Size, Timeout);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6858      	ldr	r0, [r3, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	8a9a      	ldrh	r2, [r3, #20]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	1939      	adds	r1, r7, r4
 80080e8:	f7fd f896 	bl	8005218 <HAL_SPI_Receive>
	csnHigh();
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	0018      	movs	r0, r3
 80080f0:	f7ff ff50 	bl	8007f94 <_ZN8NRF24L017csnHighEv>

	return result;
 80080f4:	193b      	adds	r3, r7, r4
 80080f6:	781b      	ldrb	r3, [r3, #0]

}
 80080f8:	0018      	movs	r0, r3
 80080fa:	46bd      	mov	sp, r7
 80080fc:	b005      	add	sp, #20
 80080fe:	bd90      	pop	{r4, r7, pc}

08008100 <_ZN8NRF24L018writeRegEhh>:

void NRF24L01::writeReg( uint8_t reg, uint8_t data){
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	0008      	movs	r0, r1
 800810a:	0011      	movs	r1, r2
 800810c:	1cfb      	adds	r3, r7, #3
 800810e:	1c02      	adds	r2, r0, #0
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	1cbb      	adds	r3, r7, #2
 8008114:	1c0a      	adds	r2, r1, #0
 8008116:	701a      	strb	r2, [r3, #0]
	writeReg(reg, &data, 1);
 8008118:	1cba      	adds	r2, r7, #2
 800811a:	1cfb      	adds	r3, r7, #3
 800811c:	7819      	ldrb	r1, [r3, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	2301      	movs	r3, #1
 8008122:	f000 f804 	bl	800812e <_ZN8NRF24L018writeRegEhPhh>
}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	46bd      	mov	sp, r7
 800812a:	b002      	add	sp, #8
 800812c:	bd80      	pop	{r7, pc}

0800812e <_ZN8NRF24L018writeRegEhPhh>:

void NRF24L01::writeReg( uint8_t reg, uint8_t *data, uint8_t sizeOfData){
 800812e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008130:	46c6      	mov	lr, r8
 8008132:	b500      	push	{lr}
 8008134:	b08c      	sub	sp, #48	; 0x30
 8008136:	af00      	add	r7, sp, #0
 8008138:	6278      	str	r0, [r7, #36]	; 0x24
 800813a:	0008      	movs	r0, r1
 800813c:	61fa      	str	r2, [r7, #28]
 800813e:	0019      	movs	r1, r3
 8008140:	230b      	movs	r3, #11
 8008142:	001e      	movs	r6, r3
 8008144:	2218      	movs	r2, #24
 8008146:	4694      	mov	ip, r2
 8008148:	44bc      	add	ip, r7
 800814a:	4463      	add	r3, ip
 800814c:	1c02      	adds	r2, r0, #0
 800814e:	701a      	strb	r2, [r3, #0]
 8008150:	200a      	movs	r0, #10
 8008152:	2318      	movs	r3, #24
 8008154:	18fa      	adds	r2, r7, r3
 8008156:	1813      	adds	r3, r2, r0
 8008158:	1c0a      	adds	r2, r1, #0
 800815a:	701a      	strb	r2, [r3, #0]

	memcpy(buffer + 1, data, sizeOfData);

	csnLow();
	HAL_SPI_Transmit(port, buffer, sizeOfData + 1, Timeout);
	csnHigh();
 800815c:	466b      	mov	r3, sp
 800815e:	4698      	mov	r8, r3
	reg = 0b00100000 | ( 0b00011111 & reg);
 8008160:	0031      	movs	r1, r6
 8008162:	2618      	movs	r6, #24
 8008164:	19bb      	adds	r3, r7, r6
 8008166:	185b      	adds	r3, r3, r1
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	221f      	movs	r2, #31
 800816c:	4013      	ands	r3, r2
 800816e:	b2da      	uxtb	r2, r3
 8008170:	19bb      	adds	r3, r7, r6
 8008172:	185b      	adds	r3, r3, r1
 8008174:	2120      	movs	r1, #32
 8008176:	430a      	orrs	r2, r1
 8008178:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[ sizeOfData + 1] {reg};
 800817a:	19bb      	adds	r3, r7, r6
 800817c:	181b      	adds	r3, r3, r0
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008182:	001a      	movs	r2, r3
 8008184:	3201      	adds	r2, #1
 8008186:	60ba      	str	r2, [r7, #8]
 8008188:	2200      	movs	r2, #0
 800818a:	60fa      	str	r2, [r7, #12]
 800818c:	68b8      	ldr	r0, [r7, #8]
 800818e:	68f9      	ldr	r1, [r7, #12]
 8008190:	0002      	movs	r2, r0
 8008192:	0f52      	lsrs	r2, r2, #29
 8008194:	000e      	movs	r6, r1
 8008196:	00f6      	lsls	r6, r6, #3
 8008198:	617e      	str	r6, [r7, #20]
 800819a:	697e      	ldr	r6, [r7, #20]
 800819c:	4316      	orrs	r6, r2
 800819e:	617e      	str	r6, [r7, #20]
 80081a0:	0002      	movs	r2, r0
 80081a2:	00d2      	lsls	r2, r2, #3
 80081a4:	613a      	str	r2, [r7, #16]
 80081a6:	001a      	movs	r2, r3
 80081a8:	3201      	adds	r2, #1
 80081aa:	603a      	str	r2, [r7, #0]
 80081ac:	2200      	movs	r2, #0
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	6838      	ldr	r0, [r7, #0]
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	0002      	movs	r2, r0
 80081b6:	0f52      	lsrs	r2, r2, #29
 80081b8:	000e      	movs	r6, r1
 80081ba:	00f5      	lsls	r5, r6, #3
 80081bc:	4315      	orrs	r5, r2
 80081be:	0002      	movs	r2, r0
 80081c0:	00d4      	lsls	r4, r2, #3
 80081c2:	001a      	movs	r2, r3
 80081c4:	3201      	adds	r2, #1
 80081c6:	3207      	adds	r2, #7
 80081c8:	08d2      	lsrs	r2, r2, #3
 80081ca:	00d2      	lsls	r2, r2, #3
 80081cc:	4668      	mov	r0, sp
 80081ce:	1a82      	subs	r2, r0, r2
 80081d0:	4695      	mov	sp, r2
 80081d2:	466a      	mov	r2, sp
 80081d4:	3200      	adds	r2, #0
 80081d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80081d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081da:	210b      	movs	r1, #11
 80081dc:	2018      	movs	r0, #24
 80081de:	4684      	mov	ip, r0
 80081e0:	44bc      	add	ip, r7
 80081e2:	4461      	add	r1, ip
 80081e4:	7809      	ldrb	r1, [r1, #0]
 80081e6:	7011      	strb	r1, [r2, #0]
 80081e8:	3201      	adds	r2, #1
 80081ea:	3b01      	subs	r3, #1
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	db04      	blt.n	80081fa <_ZN8NRF24L018writeRegEhPhh+0xcc>
 80081f0:	2100      	movs	r1, #0
 80081f2:	7011      	strb	r1, [r2, #0]
 80081f4:	3201      	adds	r2, #1
 80081f6:	3b01      	subs	r3, #1
 80081f8:	e7f8      	b.n	80081ec <_ZN8NRF24L018writeRegEhPhh+0xbe>
	memcpy(buffer + 1, data, sizeOfData);
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	1c58      	adds	r0, r3, #1
 80081fe:	240a      	movs	r4, #10
 8008200:	2518      	movs	r5, #24
 8008202:	197b      	adds	r3, r7, r5
 8008204:	191b      	adds	r3, r3, r4
 8008206:	781a      	ldrb	r2, [r3, #0]
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	0019      	movs	r1, r3
 800820c:	f000 fb6c 	bl	80088e8 <memcpy>
	csnLow();
 8008210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008212:	0018      	movs	r0, r3
 8008214:	f7ff feae 	bl	8007f74 <_ZN8NRF24L016csnLowEv>
	HAL_SPI_Transmit(port, buffer, sizeOfData + 1, Timeout);
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	6858      	ldr	r0, [r3, #4]
 800821c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800821e:	197b      	adds	r3, r7, r5
 8008220:	191b      	adds	r3, r3, r4
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	b29b      	uxth	r3, r3
 8008226:	3301      	adds	r3, #1
 8008228:	b29a      	uxth	r2, r3
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	f7fc fe9b 	bl	8004f68 <HAL_SPI_Transmit>
	csnHigh();
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	0018      	movs	r0, r3
 8008236:	f7ff fead 	bl	8007f94 <_ZN8NRF24L017csnHighEv>
 800823a:	46c5      	mov	sp, r8

}
 800823c:	46c0      	nop			; (mov r8, r8)
 800823e:	46bd      	mov	sp, r7
 8008240:	b00c      	add	sp, #48	; 0x30
 8008242:	bc80      	pop	{r7}
 8008244:	46b8      	mov	r8, r7
 8008246:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008248 <_ZN8NRF24L016configEv>:

void NRF24L01::config(){
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]

	ceLow();
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	0018      	movs	r0, r3
 8008254:	f7ff feae 	bl	8007fb4 <_ZN8NRF24L015ceLowEv>
	csnHigh();
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	0018      	movs	r0, r3
 800825c:	f7ff fe9a 	bl	8007f94 <_ZN8NRF24L017csnHighEv>
	HAL_Delay(11);
 8008260:	200b      	movs	r0, #11
 8008262:	f7fa fcb7 	bl	8002bd4 <HAL_Delay>

	writeReg(0, 0b00001010); // config;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	220a      	movs	r2, #10
 800826a:	2100      	movs	r1, #0
 800826c:	0018      	movs	r0, r3
 800826e:	f7ff ff47 	bl	8008100 <_ZN8NRF24L018writeRegEhh>
	HAL_Delay(1);
 8008272:	2001      	movs	r0, #1
 8008274:	f7fa fcae 	bl	8002bd4 <HAL_Delay>

	writeReg(1, 0); // no ack.
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	2101      	movs	r1, #1
 800827e:	0018      	movs	r0, r3
 8008280:	f7ff ff3e 	bl	8008100 <_ZN8NRF24L018writeRegEhh>

	writeReg(5, 60);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	223c      	movs	r2, #60	; 0x3c
 8008288:	2105      	movs	r1, #5
 800828a:	0018      	movs	r0, r3
 800828c:	f7ff ff38 	bl	8008100 <_ZN8NRF24L018writeRegEhh>

	writeReg(0x0a, (uint8_t*)"gyroc", 5);
 8008290:	4a0a      	ldr	r2, [pc, #40]	; (80082bc <_ZN8NRF24L016configEv+0x74>)
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	2305      	movs	r3, #5
 8008296:	210a      	movs	r1, #10
 8008298:	f7ff ff49 	bl	800812e <_ZN8NRF24L018writeRegEhPhh>
	writeReg(0x10, (uint8_t*)"gyroc", 5);
 800829c:	4a07      	ldr	r2, [pc, #28]	; (80082bc <_ZN8NRF24L016configEv+0x74>)
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	2305      	movs	r3, #5
 80082a2:	2110      	movs	r1, #16
 80082a4:	f7ff ff43 	bl	800812e <_ZN8NRF24L018writeRegEhPhh>

	writeReg(0x11, 32);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2220      	movs	r2, #32
 80082ac:	2111      	movs	r1, #17
 80082ae:	0018      	movs	r0, r3
 80082b0:	f7ff ff26 	bl	8008100 <_ZN8NRF24L018writeRegEhh>

}
 80082b4:	46c0      	nop			; (mov r8, r8)
 80082b6:	46bd      	mov	sp, r7
 80082b8:	b002      	add	sp, #8
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	0800ba80 	.word	0x0800ba80

080082c0 <_ZN8NRF24L016modeTXEv>:

void NRF24L01::modeTX(){
 80082c0:	b5b0      	push	{r4, r5, r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
	uint8_t config = readReg(0);
 80082c8:	250f      	movs	r5, #15
 80082ca:	197c      	adds	r4, r7, r5
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2100      	movs	r1, #0
 80082d0:	0018      	movs	r0, r3
 80082d2:	f7ff fee3 	bl	800809c <_ZN8NRF24L017readRegEh>
 80082d6:	0003      	movs	r3, r0
 80082d8:	7023      	strb	r3, [r4, #0]

	config &= ~(1<<0);
 80082da:	0028      	movs	r0, r5
 80082dc:	183b      	adds	r3, r7, r0
 80082de:	183a      	adds	r2, r7, r0
 80082e0:	7812      	ldrb	r2, [r2, #0]
 80082e2:	2101      	movs	r1, #1
 80082e4:	438a      	bics	r2, r1
 80082e6:	701a      	strb	r2, [r3, #0]
	writeReg(0, config);
 80082e8:	183b      	adds	r3, r7, r0
 80082ea:	781a      	ldrb	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2100      	movs	r1, #0
 80082f0:	0018      	movs	r0, r3
 80082f2:	f7ff ff05 	bl	8008100 <_ZN8NRF24L018writeRegEhh>
	HAL_Delay(1);
 80082f6:	2001      	movs	r0, #1
 80082f8:	f7fa fc6c 	bl	8002bd4 <HAL_Delay>
	ceLow();
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	0018      	movs	r0, r3
 8008300:	f7ff fe58 	bl	8007fb4 <_ZN8NRF24L015ceLowEv>

}
 8008304:	46c0      	nop			; (mov r8, r8)
 8008306:	46bd      	mov	sp, r7
 8008308:	b004      	add	sp, #16
 800830a:	bdb0      	pop	{r4, r5, r7, pc}

0800830c <_ZN8NRF24L0111sendMessageEPci>:
	writeReg(0, config);
	HAL_Delay(1);
	ceHigh();
}

void NRF24L01::sendMessage(char* msg, int retries){
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
	for( int index = 0; index < retries; index++){
 8008318:	2300      	movs	r3, #0
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	da0c      	bge.n	800833e <_ZN8NRF24L0111sendMessageEPci+0x32>
		sendMessage(msg);
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	0011      	movs	r1, r2
 800832a:	0018      	movs	r0, r3
 800832c:	f000 f80b 	bl	8008346 <_ZN8NRF24L0111sendMessageEPc>
		HAL_Delay(1);
 8008330:	2001      	movs	r0, #1
 8008332:	f7fa fc4f 	bl	8002bd4 <HAL_Delay>
	for( int index = 0; index < retries; index++){
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	3301      	adds	r3, #1
 800833a:	617b      	str	r3, [r7, #20]
 800833c:	e7ee      	b.n	800831c <_ZN8NRF24L0111sendMessageEPci+0x10>
	}
}
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	46bd      	mov	sp, r7
 8008342:	b006      	add	sp, #24
 8008344:	bd80      	pop	{r7, pc}

08008346 <_ZN8NRF24L0111sendMessageEPc>:
void NRF24L01::sendMessage(char* msg){
 8008346:	b590      	push	{r4, r7, lr}
 8008348:	b08d      	sub	sp, #52	; 0x34
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]

	uint8_t buffer[33] {0b10100000};
 8008350:	240c      	movs	r4, #12
 8008352:	193b      	adds	r3, r7, r4
 8008354:	22a0      	movs	r2, #160	; 0xa0
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	3304      	adds	r3, #4
 800835a:	221d      	movs	r2, #29
 800835c:	2100      	movs	r1, #0
 800835e:	0018      	movs	r0, r3
 8008360:	f000 facb 	bl	80088fa <memset>

	memcpy(buffer + 1, msg, 32);
 8008364:	193b      	adds	r3, r7, r4
 8008366:	3301      	adds	r3, #1
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	2220      	movs	r2, #32
 800836c:	0018      	movs	r0, r3
 800836e:	f000 fabb 	bl	80088e8 <memcpy>

	csnLow();
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	0018      	movs	r0, r3
 8008376:	f7ff fdfd 	bl	8007f74 <_ZN8NRF24L016csnLowEv>

	HAL_SPI_Transmit(port, buffer, 33, Timeout);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6858      	ldr	r0, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	1939      	adds	r1, r7, r4
 8008384:	2221      	movs	r2, #33	; 0x21
 8008386:	f7fc fdef 	bl	8004f68 <HAL_SPI_Transmit>
	csnHigh();
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	0018      	movs	r0, r3
 800838e:	f7ff fe01 	bl	8007f94 <_ZN8NRF24L017csnHighEv>

	ceHigh();
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	0018      	movs	r0, r3
 8008396:	f7ff fe1d 	bl	8007fd4 <_ZN8NRF24L016ceHighEv>
	HAL_Delay(1);
 800839a:	2001      	movs	r0, #1
 800839c:	f7fa fc1a 	bl	8002bd4 <HAL_Delay>
	ceLow();
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	0018      	movs	r0, r3
 80083a4:	f7ff fe06 	bl	8007fb4 <_ZN8NRF24L015ceLowEv>

	writeReg(7, 0b00110000);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2230      	movs	r2, #48	; 0x30
 80083ac:	2107      	movs	r1, #7
 80083ae:	0018      	movs	r0, r3
 80083b0:	f7ff fea6 	bl	8008100 <_ZN8NRF24L018writeRegEhh>

}
 80083b4:	46c0      	nop			; (mov r8, r8)
 80083b6:	46bd      	mov	sp, r7
 80083b8:	b00d      	add	sp, #52	; 0x34
 80083ba:	bd90      	pop	{r4, r7, pc}

080083bc <rxChar>:

HM11 phone;

BNO055 gyro(&hi2c1);

void rxChar(char c){
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	0002      	movs	r2, r0
 80083c4:	1dfb      	adds	r3, r7, #7
 80083c6:	701a      	strb	r2, [r3, #0]

	phone.addCharacter(c);
 80083c8:	1dfb      	adds	r3, r7, #7
 80083ca:	781a      	ldrb	r2, [r3, #0]
 80083cc:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <rxChar+0x24>)
 80083ce:	0011      	movs	r1, r2
 80083d0:	0018      	movs	r0, r3
 80083d2:	f7ff fd31 	bl	8007e38 <_ZN4HM1112addCharacterEc>

}
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	46bd      	mov	sp, r7
 80083da:	b002      	add	sp, #8
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	46c0      	nop			; (mov r8, r8)
 80083e0:	20000354 	.word	0x20000354

080083e4 <maincpp>:


uint8_t data[22];
void maincpp(){
 80083e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083e6:	46de      	mov	lr, fp
 80083e8:	4657      	mov	r7, sl
 80083ea:	464e      	mov	r6, r9
 80083ec:	4645      	mov	r5, r8
 80083ee:	b5e0      	push	{r5, r6, r7, lr}
 80083f0:	b0ab      	sub	sp, #172	; 0xac
 80083f2:	af10      	add	r7, sp, #64	; 0x40
	gyro.reset();
 80083f4:	4bd4      	ldr	r3, [pc, #848]	; (8008748 <maincpp+0x364>)
 80083f6:	0018      	movs	r0, r3
 80083f8:	f7ff f9e6 	bl	80077c8 <_ZN6BNO0555resetEv>
	gyro.enableNDOF();
 80083fc:	4bd2      	ldr	r3, [pc, #840]	; (8008748 <maincpp+0x364>)
 80083fe:	0018      	movs	r0, r3
 8008400:	f7ff fa02 	bl	8007808 <_ZN6BNO05510enableNDOFEv>

	NRF24L01 nrf(&hspi1, CSN_GPIO_Port, CE_GPIO_Port,CSN_Pin,CE_Pin);
 8008404:	4cd1      	ldr	r4, [pc, #836]	; (800874c <maincpp+0x368>)
 8008406:	4ad1      	ldr	r2, [pc, #836]	; (800874c <maincpp+0x368>)
 8008408:	49d1      	ldr	r1, [pc, #836]	; (8008750 <maincpp+0x36c>)
 800840a:	2524      	movs	r5, #36	; 0x24
 800840c:	2620      	movs	r6, #32
 800840e:	19bb      	adds	r3, r7, r6
 8008410:	1958      	adds	r0, r3, r5
 8008412:	2302      	movs	r3, #2
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	2301      	movs	r3, #1
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	0023      	movs	r3, r4
 800841c:	f7ff fe0a 	bl	8008034 <_ZN8NRF24L01C1EP19__SPI_HandleTypeDefP12GPIO_TypeDefS3_tt>
	nrf.config();
 8008420:	002c      	movs	r4, r5
 8008422:	19bb      	adds	r3, r7, r6
 8008424:	191b      	adds	r3, r3, r4
 8008426:	0018      	movs	r0, r3
 8008428:	f7ff ff0e 	bl	8008248 <_ZN8NRF24L016configEv>

	nrf.modeTX();
 800842c:	19bb      	adds	r3, r7, r6
 800842e:	191b      	adds	r3, r3, r4
 8008430:	0018      	movs	r0, r3
 8008432:	f7ff ff45 	bl	80082c0 <_ZN8NRF24L016modeTXEv>

	char msg[32];

	double roll = 0.0;
 8008436:	2200      	movs	r2, #0
 8008438:	2300      	movs	r3, #0
 800843a:	663a      	str	r2, [r7, #96]	; 0x60
 800843c:	667b      	str	r3, [r7, #100]	; 0x64

	sprintf(msg,"45.0");
 800843e:	4ac5      	ldr	r2, [pc, #788]	; (8008754 <maincpp+0x370>)
 8008440:	2524      	movs	r5, #36	; 0x24
 8008442:	197b      	adds	r3, r7, r5
 8008444:	0011      	movs	r1, r2
 8008446:	0018      	movs	r0, r3
 8008448:	f000 ff94 	bl	8009374 <siprintf>
	msg[30] = 'R';
 800844c:	197b      	adds	r3, r7, r5
 800844e:	2252      	movs	r2, #82	; 0x52
 8008450:	779a      	strb	r2, [r3, #30]
	msg[31] = 'O';
 8008452:	197b      	adds	r3, r7, r5
 8008454:	224f      	movs	r2, #79	; 0x4f
 8008456:	77da      	strb	r2, [r3, #31]
	nrf.sendMessage(msg,20);
 8008458:	1979      	adds	r1, r7, r5
 800845a:	19bb      	adds	r3, r7, r6
 800845c:	191b      	adds	r3, r3, r4
 800845e:	2214      	movs	r2, #20
 8008460:	0018      	movs	r0, r3
 8008462:	f7ff ff53 	bl	800830c <_ZN8NRF24L0111sendMessageEPci>
	HAL_Delay(600);
 8008466:	2396      	movs	r3, #150	; 0x96
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	0018      	movs	r0, r3
 800846c:	f7fa fbb2 	bl	8002bd4 <HAL_Delay>

	sprintf(msg,"0.0");
 8008470:	4ab9      	ldr	r2, [pc, #740]	; (8008758 <maincpp+0x374>)
 8008472:	197b      	adds	r3, r7, r5
 8008474:	0011      	movs	r1, r2
 8008476:	0018      	movs	r0, r3
 8008478:	f000 ff7c 	bl	8009374 <siprintf>
	msg[30] = 'R';
 800847c:	197b      	adds	r3, r7, r5
 800847e:	2252      	movs	r2, #82	; 0x52
 8008480:	779a      	strb	r2, [r3, #30]
	msg[31] = 'O';
 8008482:	197b      	adds	r3, r7, r5
 8008484:	224f      	movs	r2, #79	; 0x4f
 8008486:	77da      	strb	r2, [r3, #31]
	nrf.sendMessage(msg,20);
 8008488:	1979      	adds	r1, r7, r5
 800848a:	19bb      	adds	r3, r7, r6
 800848c:	191b      	adds	r3, r3, r4
 800848e:	2214      	movs	r2, #20
 8008490:	0018      	movs	r0, r3
 8008492:	f7ff ff3b 	bl	800830c <_ZN8NRF24L0111sendMessageEPci>
	HAL_Delay(600);
 8008496:	2396      	movs	r3, #150	; 0x96
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	0018      	movs	r0, r3
 800849c:	f7fa fb9a 	bl	8002bd4 <HAL_Delay>

	sprintf(msg,"-45.0");
 80084a0:	4aae      	ldr	r2, [pc, #696]	; (800875c <maincpp+0x378>)
 80084a2:	197b      	adds	r3, r7, r5
 80084a4:	0011      	movs	r1, r2
 80084a6:	0018      	movs	r0, r3
 80084a8:	f000 ff64 	bl	8009374 <siprintf>
	msg[30] = 'R';
 80084ac:	197b      	adds	r3, r7, r5
 80084ae:	2252      	movs	r2, #82	; 0x52
 80084b0:	779a      	strb	r2, [r3, #30]
	msg[31] = 'O';
 80084b2:	197b      	adds	r3, r7, r5
 80084b4:	224f      	movs	r2, #79	; 0x4f
 80084b6:	77da      	strb	r2, [r3, #31]
	nrf.sendMessage(msg,20);
 80084b8:	1979      	adds	r1, r7, r5
 80084ba:	19bb      	adds	r3, r7, r6
 80084bc:	191b      	adds	r3, r3, r4
 80084be:	2214      	movs	r2, #20
 80084c0:	0018      	movs	r0, r3
 80084c2:	f7ff ff23 	bl	800830c <_ZN8NRF24L0111sendMessageEPci>
	HAL_Delay(600);
 80084c6:	2396      	movs	r3, #150	; 0x96
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	0018      	movs	r0, r3
 80084cc:	f7fa fb82 	bl	8002bd4 <HAL_Delay>

	sprintf(msg,"0.0");
 80084d0:	4aa1      	ldr	r2, [pc, #644]	; (8008758 <maincpp+0x374>)
 80084d2:	197b      	adds	r3, r7, r5
 80084d4:	0011      	movs	r1, r2
 80084d6:	0018      	movs	r0, r3
 80084d8:	f000 ff4c 	bl	8009374 <siprintf>
	msg[30] = 'R';
 80084dc:	197b      	adds	r3, r7, r5
 80084de:	2252      	movs	r2, #82	; 0x52
 80084e0:	779a      	strb	r2, [r3, #30]
	msg[31] = 'O';
 80084e2:	197b      	adds	r3, r7, r5
 80084e4:	224f      	movs	r2, #79	; 0x4f
 80084e6:	77da      	strb	r2, [r3, #31]
	nrf.sendMessage(msg,20);
 80084e8:	1979      	adds	r1, r7, r5
 80084ea:	19bb      	adds	r3, r7, r6
 80084ec:	191b      	adds	r3, r3, r4
 80084ee:	2214      	movs	r2, #20
 80084f0:	0018      	movs	r0, r3
 80084f2:	f7ff ff0b 	bl	800830c <_ZN8NRF24L0111sendMessageEPci>
	HAL_Delay(600);
 80084f6:	2396      	movs	r3, #150	; 0x96
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	0018      	movs	r0, r3
 80084fc:	f7fa fb6a 	bl	8002bd4 <HAL_Delay>


	while(1){

		gyro.getData();
 8008500:	4b91      	ldr	r3, [pc, #580]	; (8008748 <maincpp+0x364>)
 8008502:	0018      	movs	r0, r3
 8008504:	f7ff f9da 	bl	80078bc <_ZN6BNO0557getDataEv>


		//log_i("R:%.2f\r",gyro.roll);

		 roll = gyro.pitch;
 8008508:	4b8f      	ldr	r3, [pc, #572]	; (8008748 <maincpp+0x364>)
 800850a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800850c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850e:	663a      	str	r2, [r7, #96]	; 0x60
 8008510:	667b      	str	r3, [r7, #100]	; 0x64
		 if(gyro.usePitchInsteadOfRoll == 0)
 8008512:	4b8d      	ldr	r3, [pc, #564]	; (8008748 <maincpp+0x364>)
 8008514:	2240      	movs	r2, #64	; 0x40
 8008516:	569b      	ldrsb	r3, [r3, r2]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d104      	bne.n	8008526 <maincpp+0x142>
			 roll = gyro.roll;
 800851c:	4b8a      	ldr	r3, [pc, #552]	; (8008748 <maincpp+0x364>)
 800851e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008522:	663a      	str	r2, [r7, #96]	; 0x60
 8008524:	667b      	str	r3, [r7, #100]	; 0x64


		 if( roll > (float)gyro.maxServoRoll ) roll = (float)gyro.maxServoRoll ;
 8008526:	4b88      	ldr	r3, [pc, #544]	; (8008748 <maincpp+0x364>)
 8008528:	2241      	movs	r2, #65	; 0x41
 800852a:	5c9b      	ldrb	r3, [r3, r2]
 800852c:	0018      	movs	r0, r3
 800852e:	f7f7 ffc1 	bl	80004b4 <__aeabi_ui2f>
 8008532:	1c03      	adds	r3, r0, #0
 8008534:	1c18      	adds	r0, r3, #0
 8008536:	f7f9 fe11 	bl	800215c <__aeabi_f2d>
 800853a:	0002      	movs	r2, r0
 800853c:	000b      	movs	r3, r1
 800853e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008540:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008542:	f7f7 ffa3 	bl	800048c <__aeabi_dcmpgt>
 8008546:	1e03      	subs	r3, r0, #0
 8008548:	d00d      	beq.n	8008566 <maincpp+0x182>
 800854a:	4b7f      	ldr	r3, [pc, #508]	; (8008748 <maincpp+0x364>)
 800854c:	2241      	movs	r2, #65	; 0x41
 800854e:	5c9b      	ldrb	r3, [r3, r2]
 8008550:	0018      	movs	r0, r3
 8008552:	f7f7 ffaf 	bl	80004b4 <__aeabi_ui2f>
 8008556:	1c03      	adds	r3, r0, #0
 8008558:	1c18      	adds	r0, r3, #0
 800855a:	f7f9 fdff 	bl	800215c <__aeabi_f2d>
 800855e:	0002      	movs	r2, r0
 8008560:	000b      	movs	r3, r1
 8008562:	663a      	str	r2, [r7, #96]	; 0x60
 8008564:	667b      	str	r3, [r7, #100]	; 0x64
		 if( roll < -(float)gyro.maxServoRoll ) roll = -(float)gyro.maxServoRoll ;
 8008566:	4b78      	ldr	r3, [pc, #480]	; (8008748 <maincpp+0x364>)
 8008568:	2241      	movs	r2, #65	; 0x41
 800856a:	5c9b      	ldrb	r3, [r3, r2]
 800856c:	0018      	movs	r0, r3
 800856e:	f7f7 ffa1 	bl	80004b4 <__aeabi_ui2f>
 8008572:	1c02      	adds	r2, r0, #0
 8008574:	2380      	movs	r3, #128	; 0x80
 8008576:	061b      	lsls	r3, r3, #24
 8008578:	4053      	eors	r3, r2
 800857a:	1c18      	adds	r0, r3, #0
 800857c:	f7f9 fdee 	bl	800215c <__aeabi_f2d>
 8008580:	0002      	movs	r2, r0
 8008582:	000b      	movs	r3, r1
 8008584:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008586:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008588:	f7f7 ff6c 	bl	8000464 <__aeabi_dcmplt>
 800858c:	1e03      	subs	r3, r0, #0
 800858e:	d010      	beq.n	80085b2 <maincpp+0x1ce>
 8008590:	4b6d      	ldr	r3, [pc, #436]	; (8008748 <maincpp+0x364>)
 8008592:	2241      	movs	r2, #65	; 0x41
 8008594:	5c9b      	ldrb	r3, [r3, r2]
 8008596:	0018      	movs	r0, r3
 8008598:	f7f7 ff8c 	bl	80004b4 <__aeabi_ui2f>
 800859c:	1c02      	adds	r2, r0, #0
 800859e:	2380      	movs	r3, #128	; 0x80
 80085a0:	061b      	lsls	r3, r3, #24
 80085a2:	4053      	eors	r3, r2
 80085a4:	1c18      	adds	r0, r3, #0
 80085a6:	f7f9 fdd9 	bl	800215c <__aeabi_f2d>
 80085aa:	0002      	movs	r2, r0
 80085ac:	000b      	movs	r3, r1
 80085ae:	663a      	str	r2, [r7, #96]	; 0x60
 80085b0:	667b      	str	r3, [r7, #100]	; 0x64
//		 if( roll < -58 ) roll = -58.0;
		  sprintf(msg,"%.2f",roll);
 80085b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085b6:	496a      	ldr	r1, [pc, #424]	; (8008760 <maincpp+0x37c>)
 80085b8:	2424      	movs	r4, #36	; 0x24
 80085ba:	1938      	adds	r0, r7, r4
 80085bc:	f000 feda 	bl	8009374 <siprintf>
		        msg[30] = 'R';
 80085c0:	193b      	adds	r3, r7, r4
 80085c2:	2252      	movs	r2, #82	; 0x52
 80085c4:	779a      	strb	r2, [r3, #30]
		        msg[31] = 'O';
 80085c6:	193b      	adds	r3, r7, r4
 80085c8:	224f      	movs	r2, #79	; 0x4f
 80085ca:	77da      	strb	r2, [r3, #31]

		        nrf.sendMessage(msg);
 80085cc:	193a      	adds	r2, r7, r4
 80085ce:	2324      	movs	r3, #36	; 0x24
 80085d0:	2120      	movs	r1, #32
 80085d2:	468c      	mov	ip, r1
 80085d4:	44bc      	add	ip, r7
 80085d6:	4463      	add	r3, ip
 80085d8:	0011      	movs	r1, r2
 80085da:	0018      	movs	r0, r3
 80085dc:	f7ff feb3 	bl	8008346 <_ZN8NRF24L0111sendMessageEPc>

		        HAL_GPIO_TogglePin(LEDG_GPIO_Port, LEDG_Pin);
 80085e0:	2380      	movs	r3, #128	; 0x80
 80085e2:	021b      	lsls	r3, r3, #8
 80085e4:	4a5f      	ldr	r2, [pc, #380]	; (8008764 <maincpp+0x380>)
 80085e6:	0019      	movs	r1, r3
 80085e8:	0010      	movs	r0, r2
 80085ea:	f7fa ffdc 	bl	80035a6 <HAL_GPIO_TogglePin>

		itoa(gyro.SysTrig,msg,2);
 80085ee:	4b56      	ldr	r3, [pc, #344]	; (8008748 <maincpp+0x364>)
 80085f0:	2247      	movs	r2, #71	; 0x47
 80085f2:	5c9b      	ldrb	r3, [r3, r2]
 80085f4:	0018      	movs	r0, r3
 80085f6:	193b      	adds	r3, r7, r4
 80085f8:	2202      	movs	r2, #2
 80085fa:	0019      	movs	r1, r3
 80085fc:	f000 f95c 	bl	80088b8 <itoa>

		log_i("mr:%d\rsr:%.2f\rClk:%8s\rH:%.2f\rR:%.2f\rP:%.2f\rC:%d\rCm:%d\rCa:%d\rCg:%d\rCs:%d\rCF:%d\rou:%s\r",gyro.maxServoRoll,roll,msg, gyro.heading, gyro.roll,gyro.pitch,gyro.calibrationData,gyro.calMag,gyro.calAcc,gyro.calGyr,gyro.calSys,gyro.calibrate,gyro.getOrientationText());
 8008600:	4b51      	ldr	r3, [pc, #324]	; (8008748 <maincpp+0x364>)
 8008602:	2241      	movs	r2, #65	; 0x41
 8008604:	5c9b      	ldrb	r3, [r3, r2]
 8008606:	61fb      	str	r3, [r7, #28]
 8008608:	4b4f      	ldr	r3, [pc, #316]	; (8008748 <maincpp+0x364>)
 800860a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800860c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800860e:	4b4e      	ldr	r3, [pc, #312]	; (8008748 <maincpp+0x364>)
 8008610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008614:	613a      	str	r2, [r7, #16]
 8008616:	617b      	str	r3, [r7, #20]
 8008618:	4b4b      	ldr	r3, [pc, #300]	; (8008748 <maincpp+0x364>)
 800861a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800861c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800861e:	60b8      	str	r0, [r7, #8]
 8008620:	60f9      	str	r1, [r7, #12]
 8008622:	4b49      	ldr	r3, [pc, #292]	; (8008748 <maincpp+0x364>)
 8008624:	2242      	movs	r2, #66	; 0x42
 8008626:	5c9b      	ldrb	r3, [r3, r2]
 8008628:	469b      	mov	fp, r3
 800862a:	4b47      	ldr	r3, [pc, #284]	; (8008748 <maincpp+0x364>)
 800862c:	2243      	movs	r2, #67	; 0x43
 800862e:	5c9b      	ldrb	r3, [r3, r2]
 8008630:	61bb      	str	r3, [r7, #24]
 8008632:	4b45      	ldr	r3, [pc, #276]	; (8008748 <maincpp+0x364>)
 8008634:	2244      	movs	r2, #68	; 0x44
 8008636:	5c9b      	ldrb	r3, [r3, r2]
 8008638:	607b      	str	r3, [r7, #4]
 800863a:	4b43      	ldr	r3, [pc, #268]	; (8008748 <maincpp+0x364>)
 800863c:	2245      	movs	r2, #69	; 0x45
 800863e:	5c9b      	ldrb	r3, [r3, r2]
 8008640:	469a      	mov	sl, r3
 8008642:	4b41      	ldr	r3, [pc, #260]	; (8008748 <maincpp+0x364>)
 8008644:	2246      	movs	r2, #70	; 0x46
 8008646:	5c9b      	ldrb	r3, [r3, r2]
 8008648:	4699      	mov	r9, r3
 800864a:	4a3f      	ldr	r2, [pc, #252]	; (8008748 <maincpp+0x364>)
 800864c:	2368      	movs	r3, #104	; 0x68
 800864e:	5cd3      	ldrb	r3, [r2, r3]
 8008650:	4698      	mov	r8, r3
 8008652:	4b3d      	ldr	r3, [pc, #244]	; (8008748 <maincpp+0x364>)
 8008654:	0018      	movs	r0, r3
 8008656:	f7ff fb8b 	bl	8007d70 <_ZN6BNO05518getOrientationTextEv>
 800865a:	0003      	movs	r3, r0
 800865c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800865e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008660:	4e41      	ldr	r6, [pc, #260]	; (8008768 <maincpp+0x384>)
 8008662:	930e      	str	r3, [sp, #56]	; 0x38
 8008664:	4643      	mov	r3, r8
 8008666:	930d      	str	r3, [sp, #52]	; 0x34
 8008668:	464b      	mov	r3, r9
 800866a:	930c      	str	r3, [sp, #48]	; 0x30
 800866c:	4653      	mov	r3, sl
 800866e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	930a      	str	r3, [sp, #40]	; 0x28
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	9309      	str	r3, [sp, #36]	; 0x24
 8008678:	465b      	mov	r3, fp
 800867a:	9308      	str	r3, [sp, #32]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	9206      	str	r2, [sp, #24]
 8008682:	9307      	str	r3, [sp, #28]
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	9204      	str	r2, [sp, #16]
 800868a:	9305      	str	r3, [sp, #20]
 800868c:	9402      	str	r4, [sp, #8]
 800868e:	9503      	str	r5, [sp, #12]
 8008690:	2424      	movs	r4, #36	; 0x24
 8008692:	193b      	adds	r3, r7, r4
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	0002      	movs	r2, r0
 8008698:	000b      	movs	r3, r1
 800869a:	69f9      	ldr	r1, [r7, #28]
 800869c:	0030      	movs	r0, r6
 800869e:	f7f9 fdc3 	bl	8002228 <log_i>
		if( phone.newMessage == 1){
 80086a2:	4b32      	ldr	r3, [pc, #200]	; (800876c <maincpp+0x388>)
 80086a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d000      	beq.n	80086ac <maincpp+0x2c8>
 80086aa:	e729      	b.n	8008500 <maincpp+0x11c>
			HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 80086ac:	2380      	movs	r3, #128	; 0x80
 80086ae:	021b      	lsls	r3, r3, #8
 80086b0:	482c      	ldr	r0, [pc, #176]	; (8008764 <maincpp+0x380>)
 80086b2:	2201      	movs	r2, #1
 80086b4:	0019      	movs	r1, r3
 80086b6:	f7fa ff59 	bl	800356c <HAL_GPIO_WritePin>
			phone.parseCommand();
 80086ba:	4b2c      	ldr	r3, [pc, #176]	; (800876c <maincpp+0x388>)
 80086bc:	0018      	movs	r0, r3
 80086be:	f7ff fbf5 	bl	8007eac <_ZN4HM1112parseCommandEv>

			if( strcmp(phone.field,"Calibrate") == 0 ){
 80086c2:	4a2b      	ldr	r2, [pc, #172]	; (8008770 <maincpp+0x38c>)
 80086c4:	4b2b      	ldr	r3, [pc, #172]	; (8008774 <maincpp+0x390>)
 80086c6:	0011      	movs	r1, r2
 80086c8:	0018      	movs	r0, r3
 80086ca:	f7f7 fd19 	bl	8000100 <strcmp>
 80086ce:	1e03      	subs	r3, r0, #0
 80086d0:	d106      	bne.n	80086e0 <maincpp+0x2fc>
				gyro.calibrate = phone.value;
 80086d2:	4b26      	ldr	r3, [pc, #152]	; (800876c <maincpp+0x388>)
 80086d4:	22d4      	movs	r2, #212	; 0xd4
 80086d6:	589b      	ldr	r3, [r3, r2]
 80086d8:	b2d9      	uxtb	r1, r3
 80086da:	4b1b      	ldr	r3, [pc, #108]	; (8008748 <maincpp+0x364>)
 80086dc:	2268      	movs	r2, #104	; 0x68
 80086de:	5499      	strb	r1, [r3, r2]
			}
			if( strcmp(phone.field, "Roll") == 0) {
 80086e0:	4a25      	ldr	r2, [pc, #148]	; (8008778 <maincpp+0x394>)
 80086e2:	4b24      	ldr	r3, [pc, #144]	; (8008774 <maincpp+0x390>)
 80086e4:	0011      	movs	r1, r2
 80086e6:	0018      	movs	r0, r3
 80086e8:	f7f7 fd0a 	bl	8000100 <strcmp>
 80086ec:	1e03      	subs	r3, r0, #0
 80086ee:	d104      	bne.n	80086fa <maincpp+0x316>
				gyro.saveOrientationAsPitch(0);
 80086f0:	4b15      	ldr	r3, [pc, #84]	; (8008748 <maincpp+0x364>)
 80086f2:	2100      	movs	r1, #0
 80086f4:	0018      	movs	r0, r3
 80086f6:	f7ff fb17 	bl	8007d28 <_ZN6BNO05522saveOrientationAsPitchEh>
			}
			if( strcmp(phone.field, "Pitch") == 0) {
 80086fa:	4a20      	ldr	r2, [pc, #128]	; (800877c <maincpp+0x398>)
 80086fc:	4b1d      	ldr	r3, [pc, #116]	; (8008774 <maincpp+0x390>)
 80086fe:	0011      	movs	r1, r2
 8008700:	0018      	movs	r0, r3
 8008702:	f7f7 fcfd 	bl	8000100 <strcmp>
 8008706:	1e03      	subs	r3, r0, #0
 8008708:	d104      	bne.n	8008714 <maincpp+0x330>
				gyro.saveOrientationAsPitch(1);
 800870a:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <maincpp+0x364>)
 800870c:	2101      	movs	r1, #1
 800870e:	0018      	movs	r0, r3
 8008710:	f7ff fb0a 	bl	8007d28 <_ZN6BNO05522saveOrientationAsPitchEh>
			}
			if( strcmp(phone.field, "MaxRoll") == 0) {
 8008714:	4a1a      	ldr	r2, [pc, #104]	; (8008780 <maincpp+0x39c>)
 8008716:	4b17      	ldr	r3, [pc, #92]	; (8008774 <maincpp+0x390>)
 8008718:	0011      	movs	r1, r2
 800871a:	0018      	movs	r0, r3
 800871c:	f7f7 fcf0 	bl	8000100 <strcmp>
 8008720:	1e03      	subs	r3, r0, #0
 8008722:	d108      	bne.n	8008736 <maincpp+0x352>
				gyro.saveMaxServoRoll(phone.value);
 8008724:	4b11      	ldr	r3, [pc, #68]	; (800876c <maincpp+0x388>)
 8008726:	22d4      	movs	r2, #212	; 0xd4
 8008728:	589b      	ldr	r3, [r3, r2]
 800872a:	b2da      	uxtb	r2, r3
 800872c:	4b06      	ldr	r3, [pc, #24]	; (8008748 <maincpp+0x364>)
 800872e:	0011      	movs	r1, r2
 8008730:	0018      	movs	r0, r3
 8008732:	f7ff fb31 	bl	8007d98 <_ZN6BNO05516saveMaxServoRollEh>
			}
			HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 8008736:	2380      	movs	r3, #128	; 0x80
 8008738:	021b      	lsls	r3, r3, #8
 800873a:	480a      	ldr	r0, [pc, #40]	; (8008764 <maincpp+0x380>)
 800873c:	2200      	movs	r2, #0
 800873e:	0019      	movs	r1, r3
 8008740:	f7fa ff14 	bl	800356c <HAL_GPIO_WritePin>
		gyro.getData();
 8008744:	e6dc      	b.n	8008500 <maincpp+0x11c>
 8008746:	46c0      	nop			; (mov r8, r8)
 8008748:	20000430 	.word	0x20000430
 800874c:	50000400 	.word	0x50000400
 8008750:	200002f0 	.word	0x200002f0
 8008754:	0800ba88 	.word	0x0800ba88
 8008758:	0800ba90 	.word	0x0800ba90
 800875c:	0800ba94 	.word	0x0800ba94
 8008760:	0800ba9c 	.word	0x0800ba9c
 8008764:	50000800 	.word	0x50000800
 8008768:	0800baa4 	.word	0x0800baa4
 800876c:	20000354 	.word	0x20000354
 8008770:	0800bafc 	.word	0x0800bafc
 8008774:	200003c4 	.word	0x200003c4
 8008778:	0800bb08 	.word	0x0800bb08
 800877c:	0800bb10 	.word	0x0800bb10
 8008780:	0800bb18 	.word	0x0800bb18

08008784 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
}
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d10d      	bne.n	80087b0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	4a10      	ldr	r2, [pc, #64]	; (80087d8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d109      	bne.n	80087b0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
HM11 phone;
 800879c:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800879e:	0018      	movs	r0, r3
 80087a0:	f7ff fb16 	bl	8007dd0 <_ZN4HM11C1Ev>
BNO055 gyro(&hi2c1);
 80087a4:	490e      	ldr	r1, [pc, #56]	; (80087e0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80087a6:	4b0f      	ldr	r3, [pc, #60]	; (80087e4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80087a8:	2229      	movs	r2, #41	; 0x29
 80087aa:	0018      	movs	r0, r3
 80087ac:	f7fe ff5e 	bl	800766c <_ZN6BNO055C1EP19__I2C_HandleTypeDefh>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10b      	bne.n	80087ce <_Z41__static_initialization_and_destruction_0ii+0x4a>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	4a07      	ldr	r2, [pc, #28]	; (80087d8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d107      	bne.n	80087ce <_Z41__static_initialization_and_destruction_0ii+0x4a>
 80087be:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80087c0:	0018      	movs	r0, r3
 80087c2:	f7fe ff81 	bl	80076c8 <_ZN6BNO055D1Ev>
HM11 phone;
 80087c6:	4b05      	ldr	r3, [pc, #20]	; (80087dc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80087c8:	0018      	movs	r0, r3
 80087ca:	f7ff fb15 	bl	8007df8 <_ZN4HM11D1Ev>
}
 80087ce:	46c0      	nop			; (mov r8, r8)
 80087d0:	46bd      	mov	sp, r7
 80087d2:	b002      	add	sp, #8
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	46c0      	nop			; (mov r8, r8)
 80087d8:	0000ffff 	.word	0x0000ffff
 80087dc:	20000354 	.word	0x20000354
 80087e0:	200002a4 	.word	0x200002a4
 80087e4:	20000430 	.word	0x20000430

080087e8 <_GLOBAL__sub_I_hi2c1>:
 80087e8:	b580      	push	{r7, lr}
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	4b03      	ldr	r3, [pc, #12]	; (80087fc <_GLOBAL__sub_I_hi2c1+0x14>)
 80087ee:	0019      	movs	r1, r3
 80087f0:	2001      	movs	r0, #1
 80087f2:	f7ff ffc7 	bl	8008784 <_Z41__static_initialization_and_destruction_0ii>
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	46c0      	nop			; (mov r8, r8)
 80087fc:	0000ffff 	.word	0x0000ffff

08008800 <_GLOBAL__sub_D_hi2c1>:
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
 8008804:	4b03      	ldr	r3, [pc, #12]	; (8008814 <_GLOBAL__sub_D_hi2c1+0x14>)
 8008806:	0019      	movs	r1, r3
 8008808:	2000      	movs	r0, #0
 800880a:	f7ff ffbb 	bl	8008784 <_Z41__static_initialization_and_destruction_0ii>
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	46c0      	nop			; (mov r8, r8)
 8008814:	0000ffff 	.word	0x0000ffff

08008818 <_ZdlPvj>:
 8008818:	b510      	push	{r4, lr}
 800881a:	f000 f801 	bl	8008820 <_ZdlPv>
 800881e:	bd10      	pop	{r4, pc}

08008820 <_ZdlPv>:
 8008820:	b510      	push	{r4, lr}
 8008822:	f000 f857 	bl	80088d4 <free>
 8008826:	bd10      	pop	{r4, pc}

08008828 <atoi>:
 8008828:	b510      	push	{r4, lr}
 800882a:	220a      	movs	r2, #10
 800882c:	2100      	movs	r1, #0
 800882e:	f000 feb3 	bl	8009598 <strtol>
 8008832:	bd10      	pop	{r4, pc}

08008834 <__errno>:
 8008834:	4b01      	ldr	r3, [pc, #4]	; (800883c <__errno+0x8>)
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	4770      	bx	lr
 800883a:	46c0      	nop			; (mov r8, r8)
 800883c:	20000010 	.word	0x20000010

08008840 <__libc_init_array>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	2600      	movs	r6, #0
 8008844:	4d0c      	ldr	r5, [pc, #48]	; (8008878 <__libc_init_array+0x38>)
 8008846:	4c0d      	ldr	r4, [pc, #52]	; (800887c <__libc_init_array+0x3c>)
 8008848:	1b64      	subs	r4, r4, r5
 800884a:	10a4      	asrs	r4, r4, #2
 800884c:	42a6      	cmp	r6, r4
 800884e:	d109      	bne.n	8008864 <__libc_init_array+0x24>
 8008850:	2600      	movs	r6, #0
 8008852:	f003 f8eb 	bl	800ba2c <_init>
 8008856:	4d0a      	ldr	r5, [pc, #40]	; (8008880 <__libc_init_array+0x40>)
 8008858:	4c0a      	ldr	r4, [pc, #40]	; (8008884 <__libc_init_array+0x44>)
 800885a:	1b64      	subs	r4, r4, r5
 800885c:	10a4      	asrs	r4, r4, #2
 800885e:	42a6      	cmp	r6, r4
 8008860:	d105      	bne.n	800886e <__libc_init_array+0x2e>
 8008862:	bd70      	pop	{r4, r5, r6, pc}
 8008864:	00b3      	lsls	r3, r6, #2
 8008866:	58eb      	ldr	r3, [r5, r3]
 8008868:	4798      	blx	r3
 800886a:	3601      	adds	r6, #1
 800886c:	e7ee      	b.n	800884c <__libc_init_array+0xc>
 800886e:	00b3      	lsls	r3, r6, #2
 8008870:	58eb      	ldr	r3, [r5, r3]
 8008872:	4798      	blx	r3
 8008874:	3601      	adds	r6, #1
 8008876:	e7f2      	b.n	800885e <__libc_init_array+0x1e>
 8008878:	0800c0b4 	.word	0x0800c0b4
 800887c:	0800c0b4 	.word	0x0800c0b4
 8008880:	0800c0b4 	.word	0x0800c0b4
 8008884:	0800c0bc 	.word	0x0800c0bc

08008888 <__itoa>:
 8008888:	1e93      	subs	r3, r2, #2
 800888a:	b510      	push	{r4, lr}
 800888c:	000c      	movs	r4, r1
 800888e:	2b22      	cmp	r3, #34	; 0x22
 8008890:	d904      	bls.n	800889c <__itoa+0x14>
 8008892:	2300      	movs	r3, #0
 8008894:	001c      	movs	r4, r3
 8008896:	700b      	strb	r3, [r1, #0]
 8008898:	0020      	movs	r0, r4
 800889a:	bd10      	pop	{r4, pc}
 800889c:	2a0a      	cmp	r2, #10
 800889e:	d109      	bne.n	80088b4 <__itoa+0x2c>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	da07      	bge.n	80088b4 <__itoa+0x2c>
 80088a4:	232d      	movs	r3, #45	; 0x2d
 80088a6:	700b      	strb	r3, [r1, #0]
 80088a8:	2101      	movs	r1, #1
 80088aa:	4240      	negs	r0, r0
 80088ac:	1861      	adds	r1, r4, r1
 80088ae:	f000 fe7f 	bl	80095b0 <__utoa>
 80088b2:	e7f1      	b.n	8008898 <__itoa+0x10>
 80088b4:	2100      	movs	r1, #0
 80088b6:	e7f9      	b.n	80088ac <__itoa+0x24>

080088b8 <itoa>:
 80088b8:	b510      	push	{r4, lr}
 80088ba:	f7ff ffe5 	bl	8008888 <__itoa>
 80088be:	bd10      	pop	{r4, pc}

080088c0 <malloc>:
 80088c0:	b510      	push	{r4, lr}
 80088c2:	4b03      	ldr	r3, [pc, #12]	; (80088d0 <malloc+0x10>)
 80088c4:	0001      	movs	r1, r0
 80088c6:	6818      	ldr	r0, [r3, #0]
 80088c8:	f000 f86a 	bl	80089a0 <_malloc_r>
 80088cc:	bd10      	pop	{r4, pc}
 80088ce:	46c0      	nop			; (mov r8, r8)
 80088d0:	20000010 	.word	0x20000010

080088d4 <free>:
 80088d4:	b510      	push	{r4, lr}
 80088d6:	4b03      	ldr	r3, [pc, #12]	; (80088e4 <free+0x10>)
 80088d8:	0001      	movs	r1, r0
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	f000 f816 	bl	800890c <_free_r>
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	46c0      	nop			; (mov r8, r8)
 80088e4:	20000010 	.word	0x20000010

080088e8 <memcpy>:
 80088e8:	2300      	movs	r3, #0
 80088ea:	b510      	push	{r4, lr}
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d100      	bne.n	80088f2 <memcpy+0xa>
 80088f0:	bd10      	pop	{r4, pc}
 80088f2:	5ccc      	ldrb	r4, [r1, r3]
 80088f4:	54c4      	strb	r4, [r0, r3]
 80088f6:	3301      	adds	r3, #1
 80088f8:	e7f8      	b.n	80088ec <memcpy+0x4>

080088fa <memset>:
 80088fa:	0003      	movs	r3, r0
 80088fc:	1882      	adds	r2, r0, r2
 80088fe:	4293      	cmp	r3, r2
 8008900:	d100      	bne.n	8008904 <memset+0xa>
 8008902:	4770      	bx	lr
 8008904:	7019      	strb	r1, [r3, #0]
 8008906:	3301      	adds	r3, #1
 8008908:	e7f9      	b.n	80088fe <memset+0x4>
	...

0800890c <_free_r>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	0005      	movs	r5, r0
 8008910:	2900      	cmp	r1, #0
 8008912:	d010      	beq.n	8008936 <_free_r+0x2a>
 8008914:	1f0c      	subs	r4, r1, #4
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	da00      	bge.n	800891e <_free_r+0x12>
 800891c:	18e4      	adds	r4, r4, r3
 800891e:	0028      	movs	r0, r5
 8008920:	f001 fd86 	bl	800a430 <__malloc_lock>
 8008924:	4a1d      	ldr	r2, [pc, #116]	; (800899c <_free_r+0x90>)
 8008926:	6813      	ldr	r3, [r2, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d105      	bne.n	8008938 <_free_r+0x2c>
 800892c:	6063      	str	r3, [r4, #4]
 800892e:	6014      	str	r4, [r2, #0]
 8008930:	0028      	movs	r0, r5
 8008932:	f001 fd85 	bl	800a440 <__malloc_unlock>
 8008936:	bd70      	pop	{r4, r5, r6, pc}
 8008938:	42a3      	cmp	r3, r4
 800893a:	d908      	bls.n	800894e <_free_r+0x42>
 800893c:	6821      	ldr	r1, [r4, #0]
 800893e:	1860      	adds	r0, r4, r1
 8008940:	4283      	cmp	r3, r0
 8008942:	d1f3      	bne.n	800892c <_free_r+0x20>
 8008944:	6818      	ldr	r0, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	1841      	adds	r1, r0, r1
 800894a:	6021      	str	r1, [r4, #0]
 800894c:	e7ee      	b.n	800892c <_free_r+0x20>
 800894e:	001a      	movs	r2, r3
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <_free_r+0x4e>
 8008956:	42a3      	cmp	r3, r4
 8008958:	d9f9      	bls.n	800894e <_free_r+0x42>
 800895a:	6811      	ldr	r1, [r2, #0]
 800895c:	1850      	adds	r0, r2, r1
 800895e:	42a0      	cmp	r0, r4
 8008960:	d10b      	bne.n	800897a <_free_r+0x6e>
 8008962:	6820      	ldr	r0, [r4, #0]
 8008964:	1809      	adds	r1, r1, r0
 8008966:	1850      	adds	r0, r2, r1
 8008968:	6011      	str	r1, [r2, #0]
 800896a:	4283      	cmp	r3, r0
 800896c:	d1e0      	bne.n	8008930 <_free_r+0x24>
 800896e:	6818      	ldr	r0, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	1841      	adds	r1, r0, r1
 8008974:	6011      	str	r1, [r2, #0]
 8008976:	6053      	str	r3, [r2, #4]
 8008978:	e7da      	b.n	8008930 <_free_r+0x24>
 800897a:	42a0      	cmp	r0, r4
 800897c:	d902      	bls.n	8008984 <_free_r+0x78>
 800897e:	230c      	movs	r3, #12
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	e7d5      	b.n	8008930 <_free_r+0x24>
 8008984:	6821      	ldr	r1, [r4, #0]
 8008986:	1860      	adds	r0, r4, r1
 8008988:	4283      	cmp	r3, r0
 800898a:	d103      	bne.n	8008994 <_free_r+0x88>
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	1841      	adds	r1, r0, r1
 8008992:	6021      	str	r1, [r4, #0]
 8008994:	6063      	str	r3, [r4, #4]
 8008996:	6054      	str	r4, [r2, #4]
 8008998:	e7ca      	b.n	8008930 <_free_r+0x24>
 800899a:	46c0      	nop			; (mov r8, r8)
 800899c:	200004a0 	.word	0x200004a0

080089a0 <_malloc_r>:
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a2:	2303      	movs	r3, #3
 80089a4:	1ccd      	adds	r5, r1, #3
 80089a6:	439d      	bics	r5, r3
 80089a8:	3508      	adds	r5, #8
 80089aa:	0006      	movs	r6, r0
 80089ac:	2d0c      	cmp	r5, #12
 80089ae:	d21f      	bcs.n	80089f0 <_malloc_r+0x50>
 80089b0:	250c      	movs	r5, #12
 80089b2:	42a9      	cmp	r1, r5
 80089b4:	d81e      	bhi.n	80089f4 <_malloc_r+0x54>
 80089b6:	0030      	movs	r0, r6
 80089b8:	f001 fd3a 	bl	800a430 <__malloc_lock>
 80089bc:	4925      	ldr	r1, [pc, #148]	; (8008a54 <_malloc_r+0xb4>)
 80089be:	680a      	ldr	r2, [r1, #0]
 80089c0:	0014      	movs	r4, r2
 80089c2:	2c00      	cmp	r4, #0
 80089c4:	d11a      	bne.n	80089fc <_malloc_r+0x5c>
 80089c6:	4f24      	ldr	r7, [pc, #144]	; (8008a58 <_malloc_r+0xb8>)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d104      	bne.n	80089d8 <_malloc_r+0x38>
 80089ce:	0021      	movs	r1, r4
 80089d0:	0030      	movs	r0, r6
 80089d2:	f000 fcbd 	bl	8009350 <_sbrk_r>
 80089d6:	6038      	str	r0, [r7, #0]
 80089d8:	0029      	movs	r1, r5
 80089da:	0030      	movs	r0, r6
 80089dc:	f000 fcb8 	bl	8009350 <_sbrk_r>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d12b      	bne.n	8008a3c <_malloc_r+0x9c>
 80089e4:	230c      	movs	r3, #12
 80089e6:	0030      	movs	r0, r6
 80089e8:	6033      	str	r3, [r6, #0]
 80089ea:	f001 fd29 	bl	800a440 <__malloc_unlock>
 80089ee:	e003      	b.n	80089f8 <_malloc_r+0x58>
 80089f0:	2d00      	cmp	r5, #0
 80089f2:	dade      	bge.n	80089b2 <_malloc_r+0x12>
 80089f4:	230c      	movs	r3, #12
 80089f6:	6033      	str	r3, [r6, #0]
 80089f8:	2000      	movs	r0, #0
 80089fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	1b5b      	subs	r3, r3, r5
 8008a00:	d419      	bmi.n	8008a36 <_malloc_r+0x96>
 8008a02:	2b0b      	cmp	r3, #11
 8008a04:	d903      	bls.n	8008a0e <_malloc_r+0x6e>
 8008a06:	6023      	str	r3, [r4, #0]
 8008a08:	18e4      	adds	r4, r4, r3
 8008a0a:	6025      	str	r5, [r4, #0]
 8008a0c:	e003      	b.n	8008a16 <_malloc_r+0x76>
 8008a0e:	6863      	ldr	r3, [r4, #4]
 8008a10:	42a2      	cmp	r2, r4
 8008a12:	d10e      	bne.n	8008a32 <_malloc_r+0x92>
 8008a14:	600b      	str	r3, [r1, #0]
 8008a16:	0030      	movs	r0, r6
 8008a18:	f001 fd12 	bl	800a440 <__malloc_unlock>
 8008a1c:	0020      	movs	r0, r4
 8008a1e:	2207      	movs	r2, #7
 8008a20:	300b      	adds	r0, #11
 8008a22:	1d23      	adds	r3, r4, #4
 8008a24:	4390      	bics	r0, r2
 8008a26:	1ac2      	subs	r2, r0, r3
 8008a28:	4298      	cmp	r0, r3
 8008a2a:	d0e6      	beq.n	80089fa <_malloc_r+0x5a>
 8008a2c:	1a1b      	subs	r3, r3, r0
 8008a2e:	50a3      	str	r3, [r4, r2]
 8008a30:	e7e3      	b.n	80089fa <_malloc_r+0x5a>
 8008a32:	6053      	str	r3, [r2, #4]
 8008a34:	e7ef      	b.n	8008a16 <_malloc_r+0x76>
 8008a36:	0022      	movs	r2, r4
 8008a38:	6864      	ldr	r4, [r4, #4]
 8008a3a:	e7c2      	b.n	80089c2 <_malloc_r+0x22>
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	1cc4      	adds	r4, r0, #3
 8008a40:	439c      	bics	r4, r3
 8008a42:	42a0      	cmp	r0, r4
 8008a44:	d0e1      	beq.n	8008a0a <_malloc_r+0x6a>
 8008a46:	1a21      	subs	r1, r4, r0
 8008a48:	0030      	movs	r0, r6
 8008a4a:	f000 fc81 	bl	8009350 <_sbrk_r>
 8008a4e:	1c43      	adds	r3, r0, #1
 8008a50:	d1db      	bne.n	8008a0a <_malloc_r+0x6a>
 8008a52:	e7c7      	b.n	80089e4 <_malloc_r+0x44>
 8008a54:	200004a0 	.word	0x200004a0
 8008a58:	200004a4 	.word	0x200004a4

08008a5c <__cvt>:
 8008a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a5e:	001e      	movs	r6, r3
 8008a60:	2300      	movs	r3, #0
 8008a62:	0014      	movs	r4, r2
 8008a64:	b08b      	sub	sp, #44	; 0x2c
 8008a66:	429e      	cmp	r6, r3
 8008a68:	da04      	bge.n	8008a74 <__cvt+0x18>
 8008a6a:	2180      	movs	r1, #128	; 0x80
 8008a6c:	0609      	lsls	r1, r1, #24
 8008a6e:	1873      	adds	r3, r6, r1
 8008a70:	001e      	movs	r6, r3
 8008a72:	232d      	movs	r3, #45	; 0x2d
 8008a74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a76:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008a78:	7013      	strb	r3, [r2, #0]
 8008a7a:	2320      	movs	r3, #32
 8008a7c:	2203      	movs	r2, #3
 8008a7e:	439f      	bics	r7, r3
 8008a80:	2f46      	cmp	r7, #70	; 0x46
 8008a82:	d007      	beq.n	8008a94 <__cvt+0x38>
 8008a84:	003b      	movs	r3, r7
 8008a86:	3b45      	subs	r3, #69	; 0x45
 8008a88:	4259      	negs	r1, r3
 8008a8a:	414b      	adcs	r3, r1
 8008a8c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008a8e:	3a01      	subs	r2, #1
 8008a90:	18cb      	adds	r3, r1, r3
 8008a92:	9310      	str	r3, [sp, #64]	; 0x40
 8008a94:	ab09      	add	r3, sp, #36	; 0x24
 8008a96:	9304      	str	r3, [sp, #16]
 8008a98:	ab08      	add	r3, sp, #32
 8008a9a:	9303      	str	r3, [sp, #12]
 8008a9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a9e:	9200      	str	r2, [sp, #0]
 8008aa0:	9302      	str	r3, [sp, #8]
 8008aa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008aa4:	0022      	movs	r2, r4
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	0033      	movs	r3, r6
 8008aaa:	f000 fe83 	bl	80097b4 <_dtoa_r>
 8008aae:	0005      	movs	r5, r0
 8008ab0:	2f47      	cmp	r7, #71	; 0x47
 8008ab2:	d102      	bne.n	8008aba <__cvt+0x5e>
 8008ab4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ab6:	07db      	lsls	r3, r3, #31
 8008ab8:	d528      	bpl.n	8008b0c <__cvt+0xb0>
 8008aba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008abc:	18eb      	adds	r3, r5, r3
 8008abe:	9307      	str	r3, [sp, #28]
 8008ac0:	2f46      	cmp	r7, #70	; 0x46
 8008ac2:	d114      	bne.n	8008aee <__cvt+0x92>
 8008ac4:	782b      	ldrb	r3, [r5, #0]
 8008ac6:	2b30      	cmp	r3, #48	; 0x30
 8008ac8:	d10c      	bne.n	8008ae4 <__cvt+0x88>
 8008aca:	2200      	movs	r2, #0
 8008acc:	2300      	movs	r3, #0
 8008ace:	0020      	movs	r0, r4
 8008ad0:	0031      	movs	r1, r6
 8008ad2:	f7f7 fcc1 	bl	8000458 <__aeabi_dcmpeq>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d104      	bne.n	8008ae4 <__cvt+0x88>
 8008ada:	2301      	movs	r3, #1
 8008adc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ade:	1a9b      	subs	r3, r3, r2
 8008ae0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ae6:	9a07      	ldr	r2, [sp, #28]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	18d3      	adds	r3, r2, r3
 8008aec:	9307      	str	r3, [sp, #28]
 8008aee:	2200      	movs	r2, #0
 8008af0:	2300      	movs	r3, #0
 8008af2:	0020      	movs	r0, r4
 8008af4:	0031      	movs	r1, r6
 8008af6:	f7f7 fcaf 	bl	8000458 <__aeabi_dcmpeq>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d001      	beq.n	8008b02 <__cvt+0xa6>
 8008afe:	9b07      	ldr	r3, [sp, #28]
 8008b00:	9309      	str	r3, [sp, #36]	; 0x24
 8008b02:	2230      	movs	r2, #48	; 0x30
 8008b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b06:	9907      	ldr	r1, [sp, #28]
 8008b08:	428b      	cmp	r3, r1
 8008b0a:	d306      	bcc.n	8008b1a <__cvt+0xbe>
 8008b0c:	0028      	movs	r0, r5
 8008b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b12:	1b5b      	subs	r3, r3, r5
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	b00b      	add	sp, #44	; 0x2c
 8008b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b1a:	1c59      	adds	r1, r3, #1
 8008b1c:	9109      	str	r1, [sp, #36]	; 0x24
 8008b1e:	701a      	strb	r2, [r3, #0]
 8008b20:	e7f0      	b.n	8008b04 <__cvt+0xa8>

08008b22 <__exponent>:
 8008b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b24:	1c83      	adds	r3, r0, #2
 8008b26:	b087      	sub	sp, #28
 8008b28:	9303      	str	r3, [sp, #12]
 8008b2a:	0005      	movs	r5, r0
 8008b2c:	000c      	movs	r4, r1
 8008b2e:	232b      	movs	r3, #43	; 0x2b
 8008b30:	7002      	strb	r2, [r0, #0]
 8008b32:	2900      	cmp	r1, #0
 8008b34:	da01      	bge.n	8008b3a <__exponent+0x18>
 8008b36:	424c      	negs	r4, r1
 8008b38:	3302      	adds	r3, #2
 8008b3a:	706b      	strb	r3, [r5, #1]
 8008b3c:	2c09      	cmp	r4, #9
 8008b3e:	dd31      	ble.n	8008ba4 <__exponent+0x82>
 8008b40:	270a      	movs	r7, #10
 8008b42:	ab04      	add	r3, sp, #16
 8008b44:	1dde      	adds	r6, r3, #7
 8008b46:	0020      	movs	r0, r4
 8008b48:	0039      	movs	r1, r7
 8008b4a:	9601      	str	r6, [sp, #4]
 8008b4c:	f7f7 fc6e 	bl	800042c <__aeabi_idivmod>
 8008b50:	3e01      	subs	r6, #1
 8008b52:	3130      	adds	r1, #48	; 0x30
 8008b54:	0020      	movs	r0, r4
 8008b56:	7031      	strb	r1, [r6, #0]
 8008b58:	0039      	movs	r1, r7
 8008b5a:	9402      	str	r4, [sp, #8]
 8008b5c:	f7f7 fb80 	bl	8000260 <__divsi3>
 8008b60:	9b02      	ldr	r3, [sp, #8]
 8008b62:	0004      	movs	r4, r0
 8008b64:	2b63      	cmp	r3, #99	; 0x63
 8008b66:	dcee      	bgt.n	8008b46 <__exponent+0x24>
 8008b68:	9b01      	ldr	r3, [sp, #4]
 8008b6a:	3430      	adds	r4, #48	; 0x30
 8008b6c:	1e9a      	subs	r2, r3, #2
 8008b6e:	0013      	movs	r3, r2
 8008b70:	9903      	ldr	r1, [sp, #12]
 8008b72:	7014      	strb	r4, [r2, #0]
 8008b74:	a804      	add	r0, sp, #16
 8008b76:	3007      	adds	r0, #7
 8008b78:	4298      	cmp	r0, r3
 8008b7a:	d80e      	bhi.n	8008b9a <__exponent+0x78>
 8008b7c:	ab04      	add	r3, sp, #16
 8008b7e:	3307      	adds	r3, #7
 8008b80:	2000      	movs	r0, #0
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d804      	bhi.n	8008b90 <__exponent+0x6e>
 8008b86:	ab04      	add	r3, sp, #16
 8008b88:	3009      	adds	r0, #9
 8008b8a:	18c0      	adds	r0, r0, r3
 8008b8c:	9b01      	ldr	r3, [sp, #4]
 8008b8e:	1ac0      	subs	r0, r0, r3
 8008b90:	9b03      	ldr	r3, [sp, #12]
 8008b92:	1818      	adds	r0, r3, r0
 8008b94:	1b40      	subs	r0, r0, r5
 8008b96:	b007      	add	sp, #28
 8008b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b9a:	7818      	ldrb	r0, [r3, #0]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	7008      	strb	r0, [r1, #0]
 8008ba0:	3101      	adds	r1, #1
 8008ba2:	e7e7      	b.n	8008b74 <__exponent+0x52>
 8008ba4:	2330      	movs	r3, #48	; 0x30
 8008ba6:	18e4      	adds	r4, r4, r3
 8008ba8:	70ab      	strb	r3, [r5, #2]
 8008baa:	1d28      	adds	r0, r5, #4
 8008bac:	70ec      	strb	r4, [r5, #3]
 8008bae:	e7f1      	b.n	8008b94 <__exponent+0x72>

08008bb0 <_printf_float>:
 8008bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bb2:	b095      	sub	sp, #84	; 0x54
 8008bb4:	000c      	movs	r4, r1
 8008bb6:	9208      	str	r2, [sp, #32]
 8008bb8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008bba:	9309      	str	r3, [sp, #36]	; 0x24
 8008bbc:	0007      	movs	r7, r0
 8008bbe:	f001 fc27 	bl	800a410 <_localeconv_r>
 8008bc2:	6803      	ldr	r3, [r0, #0]
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bc8:	f7f7 faa4 	bl	8000114 <strlen>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9312      	str	r3, [sp, #72]	; 0x48
 8008bd0:	7e23      	ldrb	r3, [r4, #24]
 8008bd2:	2207      	movs	r2, #7
 8008bd4:	001e      	movs	r6, r3
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	900d      	str	r0, [sp, #52]	; 0x34
 8008bda:	930c      	str	r3, [sp, #48]	; 0x30
 8008bdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008bde:	682b      	ldr	r3, [r5, #0]
 8008be0:	05c9      	lsls	r1, r1, #23
 8008be2:	d547      	bpl.n	8008c74 <_printf_float+0xc4>
 8008be4:	189b      	adds	r3, r3, r2
 8008be6:	4393      	bics	r3, r2
 8008be8:	001a      	movs	r2, r3
 8008bea:	3208      	adds	r2, #8
 8008bec:	602a      	str	r2, [r5, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	64a2      	str	r2, [r4, #72]	; 0x48
 8008bf4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008bfa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008bfc:	930a      	str	r3, [sp, #40]	; 0x28
 8008bfe:	006b      	lsls	r3, r5, #1
 8008c00:	085b      	lsrs	r3, r3, #1
 8008c02:	930e      	str	r3, [sp, #56]	; 0x38
 8008c04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c06:	4ba8      	ldr	r3, [pc, #672]	; (8008ea8 <_printf_float+0x2f8>)
 8008c08:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008c0a:	4252      	negs	r2, r2
 8008c0c:	f7f9 f9fc 	bl	8002008 <__aeabi_dcmpun>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d131      	bne.n	8008c78 <_printf_float+0xc8>
 8008c14:	2201      	movs	r2, #1
 8008c16:	4ba4      	ldr	r3, [pc, #656]	; (8008ea8 <_printf_float+0x2f8>)
 8008c18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c1a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008c1c:	4252      	negs	r2, r2
 8008c1e:	f7f7 fc2b 	bl	8000478 <__aeabi_dcmple>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d128      	bne.n	8008c78 <_printf_float+0xc8>
 8008c26:	2200      	movs	r2, #0
 8008c28:	2300      	movs	r3, #0
 8008c2a:	0029      	movs	r1, r5
 8008c2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c2e:	f7f7 fc19 	bl	8000464 <__aeabi_dcmplt>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d003      	beq.n	8008c3e <_printf_float+0x8e>
 8008c36:	0023      	movs	r3, r4
 8008c38:	222d      	movs	r2, #45	; 0x2d
 8008c3a:	3343      	adds	r3, #67	; 0x43
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	4d9b      	ldr	r5, [pc, #620]	; (8008eac <_printf_float+0x2fc>)
 8008c40:	2e47      	cmp	r6, #71	; 0x47
 8008c42:	d900      	bls.n	8008c46 <_printf_float+0x96>
 8008c44:	4d9a      	ldr	r5, [pc, #616]	; (8008eb0 <_printf_float+0x300>)
 8008c46:	2303      	movs	r3, #3
 8008c48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c4a:	6123      	str	r3, [r4, #16]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	439a      	bics	r2, r3
 8008c50:	2300      	movs	r3, #0
 8008c52:	6022      	str	r2, [r4, #0]
 8008c54:	930a      	str	r3, [sp, #40]	; 0x28
 8008c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c58:	0021      	movs	r1, r4
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	0038      	movs	r0, r7
 8008c5e:	9b08      	ldr	r3, [sp, #32]
 8008c60:	aa13      	add	r2, sp, #76	; 0x4c
 8008c62:	f000 f9f3 	bl	800904c <_printf_common>
 8008c66:	1c43      	adds	r3, r0, #1
 8008c68:	d000      	beq.n	8008c6c <_printf_float+0xbc>
 8008c6a:	e09e      	b.n	8008daa <_printf_float+0x1fa>
 8008c6c:	2001      	movs	r0, #1
 8008c6e:	4240      	negs	r0, r0
 8008c70:	b015      	add	sp, #84	; 0x54
 8008c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c74:	3307      	adds	r3, #7
 8008c76:	e7b6      	b.n	8008be6 <_printf_float+0x36>
 8008c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c7a:	002b      	movs	r3, r5
 8008c7c:	0010      	movs	r0, r2
 8008c7e:	0029      	movs	r1, r5
 8008c80:	f7f9 f9c2 	bl	8002008 <__aeabi_dcmpun>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d00a      	beq.n	8008c9e <_printf_float+0xee>
 8008c88:	2d00      	cmp	r5, #0
 8008c8a:	da03      	bge.n	8008c94 <_printf_float+0xe4>
 8008c8c:	0023      	movs	r3, r4
 8008c8e:	222d      	movs	r2, #45	; 0x2d
 8008c90:	3343      	adds	r3, #67	; 0x43
 8008c92:	701a      	strb	r2, [r3, #0]
 8008c94:	4d87      	ldr	r5, [pc, #540]	; (8008eb4 <_printf_float+0x304>)
 8008c96:	2e47      	cmp	r6, #71	; 0x47
 8008c98:	d9d5      	bls.n	8008c46 <_printf_float+0x96>
 8008c9a:	4d87      	ldr	r5, [pc, #540]	; (8008eb8 <_printf_float+0x308>)
 8008c9c:	e7d3      	b.n	8008c46 <_printf_float+0x96>
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	0031      	movs	r1, r6
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	4391      	bics	r1, r2
 8008ca6:	910e      	str	r1, [sp, #56]	; 0x38
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	d147      	bne.n	8008d3c <_printf_float+0x18c>
 8008cac:	3307      	adds	r3, #7
 8008cae:	6063      	str	r3, [r4, #4]
 8008cb0:	2380      	movs	r3, #128	; 0x80
 8008cb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	2200      	movs	r2, #0
 8008cba:	9206      	str	r2, [sp, #24]
 8008cbc:	aa12      	add	r2, sp, #72	; 0x48
 8008cbe:	9205      	str	r2, [sp, #20]
 8008cc0:	aa11      	add	r2, sp, #68	; 0x44
 8008cc2:	9203      	str	r2, [sp, #12]
 8008cc4:	2223      	movs	r2, #35	; 0x23
 8008cc6:	a908      	add	r1, sp, #32
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	9301      	str	r3, [sp, #4]
 8008ccc:	6863      	ldr	r3, [r4, #4]
 8008cce:	1852      	adds	r2, r2, r1
 8008cd0:	9202      	str	r2, [sp, #8]
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	0038      	movs	r0, r7
 8008cd6:	002b      	movs	r3, r5
 8008cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cda:	9604      	str	r6, [sp, #16]
 8008cdc:	f7ff febe 	bl	8008a5c <__cvt>
 8008ce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ce2:	0005      	movs	r5, r0
 8008ce4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ce6:	2b47      	cmp	r3, #71	; 0x47
 8008ce8:	d108      	bne.n	8008cfc <_printf_float+0x14c>
 8008cea:	1ccb      	adds	r3, r1, #3
 8008cec:	db02      	blt.n	8008cf4 <_printf_float+0x144>
 8008cee:	6863      	ldr	r3, [r4, #4]
 8008cf0:	4299      	cmp	r1, r3
 8008cf2:	dd46      	ble.n	8008d82 <_printf_float+0x1d2>
 8008cf4:	0033      	movs	r3, r6
 8008cf6:	3b02      	subs	r3, #2
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	001e      	movs	r6, r3
 8008cfc:	2e65      	cmp	r6, #101	; 0x65
 8008cfe:	d824      	bhi.n	8008d4a <_printf_float+0x19a>
 8008d00:	0020      	movs	r0, r4
 8008d02:	0032      	movs	r2, r6
 8008d04:	3901      	subs	r1, #1
 8008d06:	3050      	adds	r0, #80	; 0x50
 8008d08:	9111      	str	r1, [sp, #68]	; 0x44
 8008d0a:	f7ff ff0a 	bl	8008b22 <__exponent>
 8008d0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d10:	900a      	str	r0, [sp, #40]	; 0x28
 8008d12:	1813      	adds	r3, r2, r0
 8008d14:	6123      	str	r3, [r4, #16]
 8008d16:	2a01      	cmp	r2, #1
 8008d18:	dc02      	bgt.n	8008d20 <_printf_float+0x170>
 8008d1a:	6822      	ldr	r2, [r4, #0]
 8008d1c:	07d2      	lsls	r2, r2, #31
 8008d1e:	d501      	bpl.n	8008d24 <_printf_float+0x174>
 8008d20:	3301      	adds	r3, #1
 8008d22:	6123      	str	r3, [r4, #16]
 8008d24:	2323      	movs	r3, #35	; 0x23
 8008d26:	aa08      	add	r2, sp, #32
 8008d28:	189b      	adds	r3, r3, r2
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d100      	bne.n	8008d32 <_printf_float+0x182>
 8008d30:	e791      	b.n	8008c56 <_printf_float+0xa6>
 8008d32:	0023      	movs	r3, r4
 8008d34:	222d      	movs	r2, #45	; 0x2d
 8008d36:	3343      	adds	r3, #67	; 0x43
 8008d38:	701a      	strb	r2, [r3, #0]
 8008d3a:	e78c      	b.n	8008c56 <_printf_float+0xa6>
 8008d3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d3e:	2a47      	cmp	r2, #71	; 0x47
 8008d40:	d1b6      	bne.n	8008cb0 <_printf_float+0x100>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1b4      	bne.n	8008cb0 <_printf_float+0x100>
 8008d46:	3301      	adds	r3, #1
 8008d48:	e7b1      	b.n	8008cae <_printf_float+0xfe>
 8008d4a:	2e66      	cmp	r6, #102	; 0x66
 8008d4c:	d11b      	bne.n	8008d86 <_printf_float+0x1d6>
 8008d4e:	6863      	ldr	r3, [r4, #4]
 8008d50:	2900      	cmp	r1, #0
 8008d52:	dd0d      	ble.n	8008d70 <_printf_float+0x1c0>
 8008d54:	6121      	str	r1, [r4, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d102      	bne.n	8008d60 <_printf_float+0x1b0>
 8008d5a:	6822      	ldr	r2, [r4, #0]
 8008d5c:	07d2      	lsls	r2, r2, #31
 8008d5e:	d502      	bpl.n	8008d66 <_printf_float+0x1b6>
 8008d60:	3301      	adds	r3, #1
 8008d62:	1859      	adds	r1, r3, r1
 8008d64:	6121      	str	r1, [r4, #16]
 8008d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d68:	65a3      	str	r3, [r4, #88]	; 0x58
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	930a      	str	r3, [sp, #40]	; 0x28
 8008d6e:	e7d9      	b.n	8008d24 <_printf_float+0x174>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d103      	bne.n	8008d7c <_printf_float+0x1cc>
 8008d74:	2201      	movs	r2, #1
 8008d76:	6821      	ldr	r1, [r4, #0]
 8008d78:	4211      	tst	r1, r2
 8008d7a:	d000      	beq.n	8008d7e <_printf_float+0x1ce>
 8008d7c:	1c9a      	adds	r2, r3, #2
 8008d7e:	6122      	str	r2, [r4, #16]
 8008d80:	e7f1      	b.n	8008d66 <_printf_float+0x1b6>
 8008d82:	2367      	movs	r3, #103	; 0x67
 8008d84:	001e      	movs	r6, r3
 8008d86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	db06      	blt.n	8008d9c <_printf_float+0x1ec>
 8008d8e:	6822      	ldr	r2, [r4, #0]
 8008d90:	6123      	str	r3, [r4, #16]
 8008d92:	07d2      	lsls	r2, r2, #31
 8008d94:	d5e7      	bpl.n	8008d66 <_printf_float+0x1b6>
 8008d96:	3301      	adds	r3, #1
 8008d98:	6123      	str	r3, [r4, #16]
 8008d9a:	e7e4      	b.n	8008d66 <_printf_float+0x1b6>
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	dc01      	bgt.n	8008da6 <_printf_float+0x1f6>
 8008da2:	1849      	adds	r1, r1, r1
 8008da4:	1ac9      	subs	r1, r1, r3
 8008da6:	1852      	adds	r2, r2, r1
 8008da8:	e7e9      	b.n	8008d7e <_printf_float+0x1ce>
 8008daa:	6822      	ldr	r2, [r4, #0]
 8008dac:	0553      	lsls	r3, r2, #21
 8008dae:	d408      	bmi.n	8008dc2 <_printf_float+0x212>
 8008db0:	6923      	ldr	r3, [r4, #16]
 8008db2:	002a      	movs	r2, r5
 8008db4:	0038      	movs	r0, r7
 8008db6:	9908      	ldr	r1, [sp, #32]
 8008db8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008dba:	47a8      	blx	r5
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	d129      	bne.n	8008e14 <_printf_float+0x264>
 8008dc0:	e754      	b.n	8008c6c <_printf_float+0xbc>
 8008dc2:	2e65      	cmp	r6, #101	; 0x65
 8008dc4:	d800      	bhi.n	8008dc8 <_printf_float+0x218>
 8008dc6:	e0ec      	b.n	8008fa2 <_printf_float+0x3f2>
 8008dc8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008dca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f7f7 fb42 	bl	8000458 <__aeabi_dcmpeq>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d034      	beq.n	8008e42 <_printf_float+0x292>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	0038      	movs	r0, r7
 8008ddc:	4a37      	ldr	r2, [pc, #220]	; (8008ebc <_printf_float+0x30c>)
 8008dde:	9908      	ldr	r1, [sp, #32]
 8008de0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008de2:	47a8      	blx	r5
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	d100      	bne.n	8008dea <_printf_float+0x23a>
 8008de8:	e740      	b.n	8008c6c <_printf_float+0xbc>
 8008dea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dee:	4293      	cmp	r3, r2
 8008df0:	db02      	blt.n	8008df8 <_printf_float+0x248>
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	07db      	lsls	r3, r3, #31
 8008df6:	d50d      	bpl.n	8008e14 <_printf_float+0x264>
 8008df8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008dfa:	0038      	movs	r0, r7
 8008dfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e00:	9908      	ldr	r1, [sp, #32]
 8008e02:	47a8      	blx	r5
 8008e04:	2500      	movs	r5, #0
 8008e06:	1c43      	adds	r3, r0, #1
 8008e08:	d100      	bne.n	8008e0c <_printf_float+0x25c>
 8008e0a:	e72f      	b.n	8008c6c <_printf_float+0xbc>
 8008e0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	42ab      	cmp	r3, r5
 8008e12:	dc0a      	bgt.n	8008e2a <_printf_float+0x27a>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	079b      	lsls	r3, r3, #30
 8008e18:	d500      	bpl.n	8008e1c <_printf_float+0x26c>
 8008e1a:	e114      	b.n	8009046 <_printf_float+0x496>
 8008e1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e1e:	68e0      	ldr	r0, [r4, #12]
 8008e20:	4298      	cmp	r0, r3
 8008e22:	db00      	blt.n	8008e26 <_printf_float+0x276>
 8008e24:	e724      	b.n	8008c70 <_printf_float+0xc0>
 8008e26:	0018      	movs	r0, r3
 8008e28:	e722      	b.n	8008c70 <_printf_float+0xc0>
 8008e2a:	0022      	movs	r2, r4
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	0038      	movs	r0, r7
 8008e30:	9908      	ldr	r1, [sp, #32]
 8008e32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e34:	321a      	adds	r2, #26
 8008e36:	47b0      	blx	r6
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d100      	bne.n	8008e3e <_printf_float+0x28e>
 8008e3c:	e716      	b.n	8008c6c <_printf_float+0xbc>
 8008e3e:	3501      	adds	r5, #1
 8008e40:	e7e4      	b.n	8008e0c <_printf_float+0x25c>
 8008e42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	dc3b      	bgt.n	8008ec0 <_printf_float+0x310>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	0038      	movs	r0, r7
 8008e4c:	4a1b      	ldr	r2, [pc, #108]	; (8008ebc <_printf_float+0x30c>)
 8008e4e:	9908      	ldr	r1, [sp, #32]
 8008e50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e52:	47b0      	blx	r6
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d100      	bne.n	8008e5a <_printf_float+0x2aa>
 8008e58:	e708      	b.n	8008c6c <_printf_float+0xbc>
 8008e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	d102      	bne.n	8008e68 <_printf_float+0x2b8>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	07db      	lsls	r3, r3, #31
 8008e66:	d5d5      	bpl.n	8008e14 <_printf_float+0x264>
 8008e68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e6a:	0038      	movs	r0, r7
 8008e6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e6e:	9908      	ldr	r1, [sp, #32]
 8008e70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e72:	47b0      	blx	r6
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	d100      	bne.n	8008e7a <_printf_float+0x2ca>
 8008e78:	e6f8      	b.n	8008c6c <_printf_float+0xbc>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8008e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e82:	425b      	negs	r3, r3
 8008e84:	4293      	cmp	r3, r2
 8008e86:	dc01      	bgt.n	8008e8c <_printf_float+0x2dc>
 8008e88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e8a:	e792      	b.n	8008db2 <_printf_float+0x202>
 8008e8c:	0022      	movs	r2, r4
 8008e8e:	2301      	movs	r3, #1
 8008e90:	0038      	movs	r0, r7
 8008e92:	9908      	ldr	r1, [sp, #32]
 8008e94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e96:	321a      	adds	r2, #26
 8008e98:	47b0      	blx	r6
 8008e9a:	1c43      	adds	r3, r0, #1
 8008e9c:	d100      	bne.n	8008ea0 <_printf_float+0x2f0>
 8008e9e:	e6e5      	b.n	8008c6c <_printf_float+0xbc>
 8008ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	e7ea      	b.n	8008e7c <_printf_float+0x2cc>
 8008ea6:	46c0      	nop			; (mov r8, r8)
 8008ea8:	7fefffff 	.word	0x7fefffff
 8008eac:	0800bc4c 	.word	0x0800bc4c
 8008eb0:	0800bc50 	.word	0x0800bc50
 8008eb4:	0800bc54 	.word	0x0800bc54
 8008eb8:	0800bc58 	.word	0x0800bc58
 8008ebc:	0800bc5c 	.word	0x0800bc5c
 8008ec0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ec4:	920a      	str	r2, [sp, #40]	; 0x28
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	dd00      	ble.n	8008ecc <_printf_float+0x31c>
 8008eca:	930a      	str	r3, [sp, #40]	; 0x28
 8008ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	dc3d      	bgt.n	8008f4e <_printf_float+0x39e>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed8:	43db      	mvns	r3, r3
 8008eda:	17db      	asrs	r3, r3, #31
 8008edc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ede:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ee0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ee2:	930c      	str	r3, [sp, #48]	; 0x30
 8008ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	dc36      	bgt.n	8008f60 <_printf_float+0x3b0>
 8008ef2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	db40      	blt.n	8008f7c <_printf_float+0x3cc>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	07db      	lsls	r3, r3, #31
 8008efe:	d43d      	bmi.n	8008f7c <_printf_float+0x3cc>
 8008f00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	1a52      	subs	r2, r2, r1
 8008f0a:	920a      	str	r2, [sp, #40]	; 0x28
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	dd00      	ble.n	8008f12 <_printf_float+0x362>
 8008f10:	930a      	str	r3, [sp, #40]	; 0x28
 8008f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dc3a      	bgt.n	8008f8e <_printf_float+0x3de>
 8008f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f1a:	2500      	movs	r5, #0
 8008f1c:	43db      	mvns	r3, r3
 8008f1e:	17db      	asrs	r3, r3, #31
 8008f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f28:	1a9b      	subs	r3, r3, r2
 8008f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f2c:	400a      	ands	r2, r1
 8008f2e:	1a9b      	subs	r3, r3, r2
 8008f30:	42ab      	cmp	r3, r5
 8008f32:	dc00      	bgt.n	8008f36 <_printf_float+0x386>
 8008f34:	e76e      	b.n	8008e14 <_printf_float+0x264>
 8008f36:	0022      	movs	r2, r4
 8008f38:	2301      	movs	r3, #1
 8008f3a:	0038      	movs	r0, r7
 8008f3c:	9908      	ldr	r1, [sp, #32]
 8008f3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f40:	321a      	adds	r2, #26
 8008f42:	47b0      	blx	r6
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d100      	bne.n	8008f4a <_printf_float+0x39a>
 8008f48:	e690      	b.n	8008c6c <_printf_float+0xbc>
 8008f4a:	3501      	adds	r5, #1
 8008f4c:	e7e9      	b.n	8008f22 <_printf_float+0x372>
 8008f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f50:	002a      	movs	r2, r5
 8008f52:	0038      	movs	r0, r7
 8008f54:	9908      	ldr	r1, [sp, #32]
 8008f56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f58:	47b0      	blx	r6
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	d1b9      	bne.n	8008ed2 <_printf_float+0x322>
 8008f5e:	e685      	b.n	8008c6c <_printf_float+0xbc>
 8008f60:	0022      	movs	r2, r4
 8008f62:	2301      	movs	r3, #1
 8008f64:	0038      	movs	r0, r7
 8008f66:	9908      	ldr	r1, [sp, #32]
 8008f68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f6a:	321a      	adds	r2, #26
 8008f6c:	47b0      	blx	r6
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	d100      	bne.n	8008f74 <_printf_float+0x3c4>
 8008f72:	e67b      	b.n	8008c6c <_printf_float+0xbc>
 8008f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f76:	3301      	adds	r3, #1
 8008f78:	930e      	str	r3, [sp, #56]	; 0x38
 8008f7a:	e7b0      	b.n	8008ede <_printf_float+0x32e>
 8008f7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f7e:	0038      	movs	r0, r7
 8008f80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f82:	9908      	ldr	r1, [sp, #32]
 8008f84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f86:	47b0      	blx	r6
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	d1b9      	bne.n	8008f00 <_printf_float+0x350>
 8008f8c:	e66e      	b.n	8008c6c <_printf_float+0xbc>
 8008f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f90:	0038      	movs	r0, r7
 8008f92:	18ea      	adds	r2, r5, r3
 8008f94:	9908      	ldr	r1, [sp, #32]
 8008f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f9a:	47a8      	blx	r5
 8008f9c:	1c43      	adds	r3, r0, #1
 8008f9e:	d1bb      	bne.n	8008f18 <_printf_float+0x368>
 8008fa0:	e664      	b.n	8008c6c <_printf_float+0xbc>
 8008fa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	dc02      	bgt.n	8008fae <_printf_float+0x3fe>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	421a      	tst	r2, r3
 8008fac:	d038      	beq.n	8009020 <_printf_float+0x470>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	002a      	movs	r2, r5
 8008fb2:	0038      	movs	r0, r7
 8008fb4:	9908      	ldr	r1, [sp, #32]
 8008fb6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008fb8:	47b0      	blx	r6
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	d100      	bne.n	8008fc0 <_printf_float+0x410>
 8008fbe:	e655      	b.n	8008c6c <_printf_float+0xbc>
 8008fc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fc2:	0038      	movs	r0, r7
 8008fc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fc6:	9908      	ldr	r1, [sp, #32]
 8008fc8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008fca:	47b0      	blx	r6
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d100      	bne.n	8008fd2 <_printf_float+0x422>
 8008fd0:	e64c      	b.n	8008c6c <_printf_float+0xbc>
 8008fd2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008fd4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f7f7 fa3d 	bl	8000458 <__aeabi_dcmpeq>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d11c      	bne.n	800901c <_printf_float+0x46c>
 8008fe2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fe4:	1c6a      	adds	r2, r5, #1
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	0038      	movs	r0, r7
 8008fea:	9908      	ldr	r1, [sp, #32]
 8008fec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fee:	47a8      	blx	r5
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d10f      	bne.n	8009014 <_printf_float+0x464>
 8008ff4:	e63a      	b.n	8008c6c <_printf_float+0xbc>
 8008ff6:	0022      	movs	r2, r4
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	0038      	movs	r0, r7
 8008ffc:	9908      	ldr	r1, [sp, #32]
 8008ffe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009000:	321a      	adds	r2, #26
 8009002:	47b0      	blx	r6
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	d100      	bne.n	800900a <_printf_float+0x45a>
 8009008:	e630      	b.n	8008c6c <_printf_float+0xbc>
 800900a:	3501      	adds	r5, #1
 800900c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800900e:	3b01      	subs	r3, #1
 8009010:	42ab      	cmp	r3, r5
 8009012:	dcf0      	bgt.n	8008ff6 <_printf_float+0x446>
 8009014:	0022      	movs	r2, r4
 8009016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009018:	3250      	adds	r2, #80	; 0x50
 800901a:	e6cb      	b.n	8008db4 <_printf_float+0x204>
 800901c:	2500      	movs	r5, #0
 800901e:	e7f5      	b.n	800900c <_printf_float+0x45c>
 8009020:	002a      	movs	r2, r5
 8009022:	e7e1      	b.n	8008fe8 <_printf_float+0x438>
 8009024:	0022      	movs	r2, r4
 8009026:	2301      	movs	r3, #1
 8009028:	0038      	movs	r0, r7
 800902a:	9908      	ldr	r1, [sp, #32]
 800902c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800902e:	3219      	adds	r2, #25
 8009030:	47b0      	blx	r6
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	d100      	bne.n	8009038 <_printf_float+0x488>
 8009036:	e619      	b.n	8008c6c <_printf_float+0xbc>
 8009038:	3501      	adds	r5, #1
 800903a:	68e3      	ldr	r3, [r4, #12]
 800903c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800903e:	1a9b      	subs	r3, r3, r2
 8009040:	42ab      	cmp	r3, r5
 8009042:	dcef      	bgt.n	8009024 <_printf_float+0x474>
 8009044:	e6ea      	b.n	8008e1c <_printf_float+0x26c>
 8009046:	2500      	movs	r5, #0
 8009048:	e7f7      	b.n	800903a <_printf_float+0x48a>
 800904a:	46c0      	nop			; (mov r8, r8)

0800904c <_printf_common>:
 800904c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800904e:	0015      	movs	r5, r2
 8009050:	9301      	str	r3, [sp, #4]
 8009052:	688a      	ldr	r2, [r1, #8]
 8009054:	690b      	ldr	r3, [r1, #16]
 8009056:	000c      	movs	r4, r1
 8009058:	9000      	str	r0, [sp, #0]
 800905a:	4293      	cmp	r3, r2
 800905c:	da00      	bge.n	8009060 <_printf_common+0x14>
 800905e:	0013      	movs	r3, r2
 8009060:	0022      	movs	r2, r4
 8009062:	602b      	str	r3, [r5, #0]
 8009064:	3243      	adds	r2, #67	; 0x43
 8009066:	7812      	ldrb	r2, [r2, #0]
 8009068:	2a00      	cmp	r2, #0
 800906a:	d001      	beq.n	8009070 <_printf_common+0x24>
 800906c:	3301      	adds	r3, #1
 800906e:	602b      	str	r3, [r5, #0]
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	069b      	lsls	r3, r3, #26
 8009074:	d502      	bpl.n	800907c <_printf_common+0x30>
 8009076:	682b      	ldr	r3, [r5, #0]
 8009078:	3302      	adds	r3, #2
 800907a:	602b      	str	r3, [r5, #0]
 800907c:	6822      	ldr	r2, [r4, #0]
 800907e:	2306      	movs	r3, #6
 8009080:	0017      	movs	r7, r2
 8009082:	401f      	ands	r7, r3
 8009084:	421a      	tst	r2, r3
 8009086:	d027      	beq.n	80090d8 <_printf_common+0x8c>
 8009088:	0023      	movs	r3, r4
 800908a:	3343      	adds	r3, #67	; 0x43
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	1e5a      	subs	r2, r3, #1
 8009090:	4193      	sbcs	r3, r2
 8009092:	6822      	ldr	r2, [r4, #0]
 8009094:	0692      	lsls	r2, r2, #26
 8009096:	d430      	bmi.n	80090fa <_printf_common+0xae>
 8009098:	0022      	movs	r2, r4
 800909a:	9901      	ldr	r1, [sp, #4]
 800909c:	9800      	ldr	r0, [sp, #0]
 800909e:	9e08      	ldr	r6, [sp, #32]
 80090a0:	3243      	adds	r2, #67	; 0x43
 80090a2:	47b0      	blx	r6
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d025      	beq.n	80090f4 <_printf_common+0xa8>
 80090a8:	2306      	movs	r3, #6
 80090aa:	6820      	ldr	r0, [r4, #0]
 80090ac:	682a      	ldr	r2, [r5, #0]
 80090ae:	68e1      	ldr	r1, [r4, #12]
 80090b0:	2500      	movs	r5, #0
 80090b2:	4003      	ands	r3, r0
 80090b4:	2b04      	cmp	r3, #4
 80090b6:	d103      	bne.n	80090c0 <_printf_common+0x74>
 80090b8:	1a8d      	subs	r5, r1, r2
 80090ba:	43eb      	mvns	r3, r5
 80090bc:	17db      	asrs	r3, r3, #31
 80090be:	401d      	ands	r5, r3
 80090c0:	68a3      	ldr	r3, [r4, #8]
 80090c2:	6922      	ldr	r2, [r4, #16]
 80090c4:	4293      	cmp	r3, r2
 80090c6:	dd01      	ble.n	80090cc <_printf_common+0x80>
 80090c8:	1a9b      	subs	r3, r3, r2
 80090ca:	18ed      	adds	r5, r5, r3
 80090cc:	2700      	movs	r7, #0
 80090ce:	42bd      	cmp	r5, r7
 80090d0:	d120      	bne.n	8009114 <_printf_common+0xc8>
 80090d2:	2000      	movs	r0, #0
 80090d4:	e010      	b.n	80090f8 <_printf_common+0xac>
 80090d6:	3701      	adds	r7, #1
 80090d8:	68e3      	ldr	r3, [r4, #12]
 80090da:	682a      	ldr	r2, [r5, #0]
 80090dc:	1a9b      	subs	r3, r3, r2
 80090de:	42bb      	cmp	r3, r7
 80090e0:	ddd2      	ble.n	8009088 <_printf_common+0x3c>
 80090e2:	0022      	movs	r2, r4
 80090e4:	2301      	movs	r3, #1
 80090e6:	9901      	ldr	r1, [sp, #4]
 80090e8:	9800      	ldr	r0, [sp, #0]
 80090ea:	9e08      	ldr	r6, [sp, #32]
 80090ec:	3219      	adds	r2, #25
 80090ee:	47b0      	blx	r6
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d1f0      	bne.n	80090d6 <_printf_common+0x8a>
 80090f4:	2001      	movs	r0, #1
 80090f6:	4240      	negs	r0, r0
 80090f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090fa:	2030      	movs	r0, #48	; 0x30
 80090fc:	18e1      	adds	r1, r4, r3
 80090fe:	3143      	adds	r1, #67	; 0x43
 8009100:	7008      	strb	r0, [r1, #0]
 8009102:	0021      	movs	r1, r4
 8009104:	1c5a      	adds	r2, r3, #1
 8009106:	3145      	adds	r1, #69	; 0x45
 8009108:	7809      	ldrb	r1, [r1, #0]
 800910a:	18a2      	adds	r2, r4, r2
 800910c:	3243      	adds	r2, #67	; 0x43
 800910e:	3302      	adds	r3, #2
 8009110:	7011      	strb	r1, [r2, #0]
 8009112:	e7c1      	b.n	8009098 <_printf_common+0x4c>
 8009114:	0022      	movs	r2, r4
 8009116:	2301      	movs	r3, #1
 8009118:	9901      	ldr	r1, [sp, #4]
 800911a:	9800      	ldr	r0, [sp, #0]
 800911c:	9e08      	ldr	r6, [sp, #32]
 800911e:	321a      	adds	r2, #26
 8009120:	47b0      	blx	r6
 8009122:	1c43      	adds	r3, r0, #1
 8009124:	d0e6      	beq.n	80090f4 <_printf_common+0xa8>
 8009126:	3701      	adds	r7, #1
 8009128:	e7d1      	b.n	80090ce <_printf_common+0x82>
	...

0800912c <_printf_i>:
 800912c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800912e:	b08b      	sub	sp, #44	; 0x2c
 8009130:	9206      	str	r2, [sp, #24]
 8009132:	000a      	movs	r2, r1
 8009134:	3243      	adds	r2, #67	; 0x43
 8009136:	9307      	str	r3, [sp, #28]
 8009138:	9005      	str	r0, [sp, #20]
 800913a:	9204      	str	r2, [sp, #16]
 800913c:	7e0a      	ldrb	r2, [r1, #24]
 800913e:	000c      	movs	r4, r1
 8009140:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009142:	2a78      	cmp	r2, #120	; 0x78
 8009144:	d806      	bhi.n	8009154 <_printf_i+0x28>
 8009146:	2a62      	cmp	r2, #98	; 0x62
 8009148:	d808      	bhi.n	800915c <_printf_i+0x30>
 800914a:	2a00      	cmp	r2, #0
 800914c:	d100      	bne.n	8009150 <_printf_i+0x24>
 800914e:	e0c0      	b.n	80092d2 <_printf_i+0x1a6>
 8009150:	2a58      	cmp	r2, #88	; 0x58
 8009152:	d052      	beq.n	80091fa <_printf_i+0xce>
 8009154:	0026      	movs	r6, r4
 8009156:	3642      	adds	r6, #66	; 0x42
 8009158:	7032      	strb	r2, [r6, #0]
 800915a:	e022      	b.n	80091a2 <_printf_i+0x76>
 800915c:	0010      	movs	r0, r2
 800915e:	3863      	subs	r0, #99	; 0x63
 8009160:	2815      	cmp	r0, #21
 8009162:	d8f7      	bhi.n	8009154 <_printf_i+0x28>
 8009164:	f7f6 ffe8 	bl	8000138 <__gnu_thumb1_case_shi>
 8009168:	001f0016 	.word	0x001f0016
 800916c:	fff6fff6 	.word	0xfff6fff6
 8009170:	fff6fff6 	.word	0xfff6fff6
 8009174:	fff6001f 	.word	0xfff6001f
 8009178:	fff6fff6 	.word	0xfff6fff6
 800917c:	00a8fff6 	.word	0x00a8fff6
 8009180:	009a0036 	.word	0x009a0036
 8009184:	fff6fff6 	.word	0xfff6fff6
 8009188:	fff600b9 	.word	0xfff600b9
 800918c:	fff60036 	.word	0xfff60036
 8009190:	009efff6 	.word	0x009efff6
 8009194:	0026      	movs	r6, r4
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	3642      	adds	r6, #66	; 0x42
 800919a:	1d11      	adds	r1, r2, #4
 800919c:	6019      	str	r1, [r3, #0]
 800919e:	6813      	ldr	r3, [r2, #0]
 80091a0:	7033      	strb	r3, [r6, #0]
 80091a2:	2301      	movs	r3, #1
 80091a4:	e0a7      	b.n	80092f6 <_printf_i+0x1ca>
 80091a6:	6808      	ldr	r0, [r1, #0]
 80091a8:	6819      	ldr	r1, [r3, #0]
 80091aa:	1d0a      	adds	r2, r1, #4
 80091ac:	0605      	lsls	r5, r0, #24
 80091ae:	d50b      	bpl.n	80091c8 <_printf_i+0x9c>
 80091b0:	680d      	ldr	r5, [r1, #0]
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	2d00      	cmp	r5, #0
 80091b6:	da03      	bge.n	80091c0 <_printf_i+0x94>
 80091b8:	232d      	movs	r3, #45	; 0x2d
 80091ba:	9a04      	ldr	r2, [sp, #16]
 80091bc:	426d      	negs	r5, r5
 80091be:	7013      	strb	r3, [r2, #0]
 80091c0:	4b61      	ldr	r3, [pc, #388]	; (8009348 <_printf_i+0x21c>)
 80091c2:	270a      	movs	r7, #10
 80091c4:	9303      	str	r3, [sp, #12]
 80091c6:	e032      	b.n	800922e <_printf_i+0x102>
 80091c8:	680d      	ldr	r5, [r1, #0]
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	0641      	lsls	r1, r0, #25
 80091ce:	d5f1      	bpl.n	80091b4 <_printf_i+0x88>
 80091d0:	b22d      	sxth	r5, r5
 80091d2:	e7ef      	b.n	80091b4 <_printf_i+0x88>
 80091d4:	680d      	ldr	r5, [r1, #0]
 80091d6:	6819      	ldr	r1, [r3, #0]
 80091d8:	1d08      	adds	r0, r1, #4
 80091da:	6018      	str	r0, [r3, #0]
 80091dc:	062e      	lsls	r6, r5, #24
 80091de:	d501      	bpl.n	80091e4 <_printf_i+0xb8>
 80091e0:	680d      	ldr	r5, [r1, #0]
 80091e2:	e003      	b.n	80091ec <_printf_i+0xc0>
 80091e4:	066d      	lsls	r5, r5, #25
 80091e6:	d5fb      	bpl.n	80091e0 <_printf_i+0xb4>
 80091e8:	680d      	ldr	r5, [r1, #0]
 80091ea:	b2ad      	uxth	r5, r5
 80091ec:	4b56      	ldr	r3, [pc, #344]	; (8009348 <_printf_i+0x21c>)
 80091ee:	270a      	movs	r7, #10
 80091f0:	9303      	str	r3, [sp, #12]
 80091f2:	2a6f      	cmp	r2, #111	; 0x6f
 80091f4:	d117      	bne.n	8009226 <_printf_i+0xfa>
 80091f6:	2708      	movs	r7, #8
 80091f8:	e015      	b.n	8009226 <_printf_i+0xfa>
 80091fa:	3145      	adds	r1, #69	; 0x45
 80091fc:	700a      	strb	r2, [r1, #0]
 80091fe:	4a52      	ldr	r2, [pc, #328]	; (8009348 <_printf_i+0x21c>)
 8009200:	9203      	str	r2, [sp, #12]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	6821      	ldr	r1, [r4, #0]
 8009206:	ca20      	ldmia	r2!, {r5}
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	0608      	lsls	r0, r1, #24
 800920c:	d550      	bpl.n	80092b0 <_printf_i+0x184>
 800920e:	07cb      	lsls	r3, r1, #31
 8009210:	d502      	bpl.n	8009218 <_printf_i+0xec>
 8009212:	2320      	movs	r3, #32
 8009214:	4319      	orrs	r1, r3
 8009216:	6021      	str	r1, [r4, #0]
 8009218:	2710      	movs	r7, #16
 800921a:	2d00      	cmp	r5, #0
 800921c:	d103      	bne.n	8009226 <_printf_i+0xfa>
 800921e:	2320      	movs	r3, #32
 8009220:	6822      	ldr	r2, [r4, #0]
 8009222:	439a      	bics	r2, r3
 8009224:	6022      	str	r2, [r4, #0]
 8009226:	0023      	movs	r3, r4
 8009228:	2200      	movs	r2, #0
 800922a:	3343      	adds	r3, #67	; 0x43
 800922c:	701a      	strb	r2, [r3, #0]
 800922e:	6863      	ldr	r3, [r4, #4]
 8009230:	60a3      	str	r3, [r4, #8]
 8009232:	2b00      	cmp	r3, #0
 8009234:	db03      	blt.n	800923e <_printf_i+0x112>
 8009236:	2204      	movs	r2, #4
 8009238:	6821      	ldr	r1, [r4, #0]
 800923a:	4391      	bics	r1, r2
 800923c:	6021      	str	r1, [r4, #0]
 800923e:	2d00      	cmp	r5, #0
 8009240:	d102      	bne.n	8009248 <_printf_i+0x11c>
 8009242:	9e04      	ldr	r6, [sp, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00c      	beq.n	8009262 <_printf_i+0x136>
 8009248:	9e04      	ldr	r6, [sp, #16]
 800924a:	0028      	movs	r0, r5
 800924c:	0039      	movs	r1, r7
 800924e:	f7f7 f803 	bl	8000258 <__aeabi_uidivmod>
 8009252:	9b03      	ldr	r3, [sp, #12]
 8009254:	3e01      	subs	r6, #1
 8009256:	5c5b      	ldrb	r3, [r3, r1]
 8009258:	7033      	strb	r3, [r6, #0]
 800925a:	002b      	movs	r3, r5
 800925c:	0005      	movs	r5, r0
 800925e:	429f      	cmp	r7, r3
 8009260:	d9f3      	bls.n	800924a <_printf_i+0x11e>
 8009262:	2f08      	cmp	r7, #8
 8009264:	d109      	bne.n	800927a <_printf_i+0x14e>
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	07db      	lsls	r3, r3, #31
 800926a:	d506      	bpl.n	800927a <_printf_i+0x14e>
 800926c:	6863      	ldr	r3, [r4, #4]
 800926e:	6922      	ldr	r2, [r4, #16]
 8009270:	4293      	cmp	r3, r2
 8009272:	dc02      	bgt.n	800927a <_printf_i+0x14e>
 8009274:	2330      	movs	r3, #48	; 0x30
 8009276:	3e01      	subs	r6, #1
 8009278:	7033      	strb	r3, [r6, #0]
 800927a:	9b04      	ldr	r3, [sp, #16]
 800927c:	1b9b      	subs	r3, r3, r6
 800927e:	6123      	str	r3, [r4, #16]
 8009280:	9b07      	ldr	r3, [sp, #28]
 8009282:	0021      	movs	r1, r4
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	9805      	ldr	r0, [sp, #20]
 8009288:	9b06      	ldr	r3, [sp, #24]
 800928a:	aa09      	add	r2, sp, #36	; 0x24
 800928c:	f7ff fede 	bl	800904c <_printf_common>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d135      	bne.n	8009300 <_printf_i+0x1d4>
 8009294:	2001      	movs	r0, #1
 8009296:	4240      	negs	r0, r0
 8009298:	b00b      	add	sp, #44	; 0x2c
 800929a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800929c:	2220      	movs	r2, #32
 800929e:	6809      	ldr	r1, [r1, #0]
 80092a0:	430a      	orrs	r2, r1
 80092a2:	6022      	str	r2, [r4, #0]
 80092a4:	0022      	movs	r2, r4
 80092a6:	2178      	movs	r1, #120	; 0x78
 80092a8:	3245      	adds	r2, #69	; 0x45
 80092aa:	7011      	strb	r1, [r2, #0]
 80092ac:	4a27      	ldr	r2, [pc, #156]	; (800934c <_printf_i+0x220>)
 80092ae:	e7a7      	b.n	8009200 <_printf_i+0xd4>
 80092b0:	0648      	lsls	r0, r1, #25
 80092b2:	d5ac      	bpl.n	800920e <_printf_i+0xe2>
 80092b4:	b2ad      	uxth	r5, r5
 80092b6:	e7aa      	b.n	800920e <_printf_i+0xe2>
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	680d      	ldr	r5, [r1, #0]
 80092bc:	1d10      	adds	r0, r2, #4
 80092be:	6949      	ldr	r1, [r1, #20]
 80092c0:	6018      	str	r0, [r3, #0]
 80092c2:	6813      	ldr	r3, [r2, #0]
 80092c4:	062e      	lsls	r6, r5, #24
 80092c6:	d501      	bpl.n	80092cc <_printf_i+0x1a0>
 80092c8:	6019      	str	r1, [r3, #0]
 80092ca:	e002      	b.n	80092d2 <_printf_i+0x1a6>
 80092cc:	066d      	lsls	r5, r5, #25
 80092ce:	d5fb      	bpl.n	80092c8 <_printf_i+0x19c>
 80092d0:	8019      	strh	r1, [r3, #0]
 80092d2:	2300      	movs	r3, #0
 80092d4:	9e04      	ldr	r6, [sp, #16]
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	e7d2      	b.n	8009280 <_printf_i+0x154>
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	1d11      	adds	r1, r2, #4
 80092de:	6019      	str	r1, [r3, #0]
 80092e0:	6816      	ldr	r6, [r2, #0]
 80092e2:	2100      	movs	r1, #0
 80092e4:	0030      	movs	r0, r6
 80092e6:	6862      	ldr	r2, [r4, #4]
 80092e8:	f001 f896 	bl	800a418 <memchr>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d001      	beq.n	80092f4 <_printf_i+0x1c8>
 80092f0:	1b80      	subs	r0, r0, r6
 80092f2:	6060      	str	r0, [r4, #4]
 80092f4:	6863      	ldr	r3, [r4, #4]
 80092f6:	6123      	str	r3, [r4, #16]
 80092f8:	2300      	movs	r3, #0
 80092fa:	9a04      	ldr	r2, [sp, #16]
 80092fc:	7013      	strb	r3, [r2, #0]
 80092fe:	e7bf      	b.n	8009280 <_printf_i+0x154>
 8009300:	6923      	ldr	r3, [r4, #16]
 8009302:	0032      	movs	r2, r6
 8009304:	9906      	ldr	r1, [sp, #24]
 8009306:	9805      	ldr	r0, [sp, #20]
 8009308:	9d07      	ldr	r5, [sp, #28]
 800930a:	47a8      	blx	r5
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d0c1      	beq.n	8009294 <_printf_i+0x168>
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	079b      	lsls	r3, r3, #30
 8009314:	d415      	bmi.n	8009342 <_printf_i+0x216>
 8009316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009318:	68e0      	ldr	r0, [r4, #12]
 800931a:	4298      	cmp	r0, r3
 800931c:	dabc      	bge.n	8009298 <_printf_i+0x16c>
 800931e:	0018      	movs	r0, r3
 8009320:	e7ba      	b.n	8009298 <_printf_i+0x16c>
 8009322:	0022      	movs	r2, r4
 8009324:	2301      	movs	r3, #1
 8009326:	9906      	ldr	r1, [sp, #24]
 8009328:	9805      	ldr	r0, [sp, #20]
 800932a:	9e07      	ldr	r6, [sp, #28]
 800932c:	3219      	adds	r2, #25
 800932e:	47b0      	blx	r6
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	d0af      	beq.n	8009294 <_printf_i+0x168>
 8009334:	3501      	adds	r5, #1
 8009336:	68e3      	ldr	r3, [r4, #12]
 8009338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800933a:	1a9b      	subs	r3, r3, r2
 800933c:	42ab      	cmp	r3, r5
 800933e:	dcf0      	bgt.n	8009322 <_printf_i+0x1f6>
 8009340:	e7e9      	b.n	8009316 <_printf_i+0x1ea>
 8009342:	2500      	movs	r5, #0
 8009344:	e7f7      	b.n	8009336 <_printf_i+0x20a>
 8009346:	46c0      	nop			; (mov r8, r8)
 8009348:	0800bc5e 	.word	0x0800bc5e
 800934c:	0800bc6f 	.word	0x0800bc6f

08009350 <_sbrk_r>:
 8009350:	2300      	movs	r3, #0
 8009352:	b570      	push	{r4, r5, r6, lr}
 8009354:	4d06      	ldr	r5, [pc, #24]	; (8009370 <_sbrk_r+0x20>)
 8009356:	0004      	movs	r4, r0
 8009358:	0008      	movs	r0, r1
 800935a:	602b      	str	r3, [r5, #0]
 800935c:	f7f9 fb48 	bl	80029f0 <_sbrk>
 8009360:	1c43      	adds	r3, r0, #1
 8009362:	d103      	bne.n	800936c <_sbrk_r+0x1c>
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d000      	beq.n	800936c <_sbrk_r+0x1c>
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	bd70      	pop	{r4, r5, r6, pc}
 800936e:	46c0      	nop			; (mov r8, r8)
 8009370:	200005a4 	.word	0x200005a4

08009374 <siprintf>:
 8009374:	b40e      	push	{r1, r2, r3}
 8009376:	b500      	push	{lr}
 8009378:	490b      	ldr	r1, [pc, #44]	; (80093a8 <siprintf+0x34>)
 800937a:	b09c      	sub	sp, #112	; 0x70
 800937c:	ab1d      	add	r3, sp, #116	; 0x74
 800937e:	9002      	str	r0, [sp, #8]
 8009380:	9006      	str	r0, [sp, #24]
 8009382:	9107      	str	r1, [sp, #28]
 8009384:	9104      	str	r1, [sp, #16]
 8009386:	4809      	ldr	r0, [pc, #36]	; (80093ac <siprintf+0x38>)
 8009388:	4909      	ldr	r1, [pc, #36]	; (80093b0 <siprintf+0x3c>)
 800938a:	cb04      	ldmia	r3!, {r2}
 800938c:	9105      	str	r1, [sp, #20]
 800938e:	6800      	ldr	r0, [r0, #0]
 8009390:	a902      	add	r1, sp, #8
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	f001 fc6a 	bl	800ac6c <_svfiprintf_r>
 8009398:	2300      	movs	r3, #0
 800939a:	9a02      	ldr	r2, [sp, #8]
 800939c:	7013      	strb	r3, [r2, #0]
 800939e:	b01c      	add	sp, #112	; 0x70
 80093a0:	bc08      	pop	{r3}
 80093a2:	b003      	add	sp, #12
 80093a4:	4718      	bx	r3
 80093a6:	46c0      	nop			; (mov r8, r8)
 80093a8:	7fffffff 	.word	0x7fffffff
 80093ac:	20000010 	.word	0x20000010
 80093b0:	ffff0208 	.word	0xffff0208

080093b4 <strtok>:
 80093b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b6:	4b16      	ldr	r3, [pc, #88]	; (8009410 <strtok+0x5c>)
 80093b8:	0005      	movs	r5, r0
 80093ba:	681f      	ldr	r7, [r3, #0]
 80093bc:	000e      	movs	r6, r1
 80093be:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80093c0:	2c00      	cmp	r4, #0
 80093c2:	d11d      	bne.n	8009400 <strtok+0x4c>
 80093c4:	2050      	movs	r0, #80	; 0x50
 80093c6:	f7ff fa7b 	bl	80088c0 <malloc>
 80093ca:	1e02      	subs	r2, r0, #0
 80093cc:	65b8      	str	r0, [r7, #88]	; 0x58
 80093ce:	d104      	bne.n	80093da <strtok+0x26>
 80093d0:	2157      	movs	r1, #87	; 0x57
 80093d2:	4b10      	ldr	r3, [pc, #64]	; (8009414 <strtok+0x60>)
 80093d4:	4810      	ldr	r0, [pc, #64]	; (8009418 <strtok+0x64>)
 80093d6:	f000 f943 	bl	8009660 <__assert_func>
 80093da:	6004      	str	r4, [r0, #0]
 80093dc:	6044      	str	r4, [r0, #4]
 80093de:	6084      	str	r4, [r0, #8]
 80093e0:	60c4      	str	r4, [r0, #12]
 80093e2:	6104      	str	r4, [r0, #16]
 80093e4:	6144      	str	r4, [r0, #20]
 80093e6:	6184      	str	r4, [r0, #24]
 80093e8:	6284      	str	r4, [r0, #40]	; 0x28
 80093ea:	62c4      	str	r4, [r0, #44]	; 0x2c
 80093ec:	6304      	str	r4, [r0, #48]	; 0x30
 80093ee:	6344      	str	r4, [r0, #52]	; 0x34
 80093f0:	6384      	str	r4, [r0, #56]	; 0x38
 80093f2:	63c4      	str	r4, [r0, #60]	; 0x3c
 80093f4:	6404      	str	r4, [r0, #64]	; 0x40
 80093f6:	6444      	str	r4, [r0, #68]	; 0x44
 80093f8:	6484      	str	r4, [r0, #72]	; 0x48
 80093fa:	64c4      	str	r4, [r0, #76]	; 0x4c
 80093fc:	7704      	strb	r4, [r0, #28]
 80093fe:	6244      	str	r4, [r0, #36]	; 0x24
 8009400:	0031      	movs	r1, r6
 8009402:	0028      	movs	r0, r5
 8009404:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009406:	2301      	movs	r3, #1
 8009408:	f000 f808 	bl	800941c <__strtok_r>
 800940c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800940e:	46c0      	nop			; (mov r8, r8)
 8009410:	20000010 	.word	0x20000010
 8009414:	0800bc80 	.word	0x0800bc80
 8009418:	0800bc97 	.word	0x0800bc97

0800941c <__strtok_r>:
 800941c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800941e:	2800      	cmp	r0, #0
 8009420:	d102      	bne.n	8009428 <__strtok_r+0xc>
 8009422:	6810      	ldr	r0, [r2, #0]
 8009424:	2800      	cmp	r0, #0
 8009426:	d013      	beq.n	8009450 <__strtok_r+0x34>
 8009428:	0004      	movs	r4, r0
 800942a:	0020      	movs	r0, r4
 800942c:	000e      	movs	r6, r1
 800942e:	7805      	ldrb	r5, [r0, #0]
 8009430:	3401      	adds	r4, #1
 8009432:	7837      	ldrb	r7, [r6, #0]
 8009434:	2f00      	cmp	r7, #0
 8009436:	d104      	bne.n	8009442 <__strtok_r+0x26>
 8009438:	2d00      	cmp	r5, #0
 800943a:	d10f      	bne.n	800945c <__strtok_r+0x40>
 800943c:	0028      	movs	r0, r5
 800943e:	6015      	str	r5, [r2, #0]
 8009440:	e006      	b.n	8009450 <__strtok_r+0x34>
 8009442:	3601      	adds	r6, #1
 8009444:	42bd      	cmp	r5, r7
 8009446:	d1f4      	bne.n	8009432 <__strtok_r+0x16>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1ee      	bne.n	800942a <__strtok_r+0xe>
 800944c:	6014      	str	r4, [r2, #0]
 800944e:	7003      	strb	r3, [r0, #0]
 8009450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009452:	002f      	movs	r7, r5
 8009454:	e00f      	b.n	8009476 <__strtok_r+0x5a>
 8009456:	3301      	adds	r3, #1
 8009458:	2e00      	cmp	r6, #0
 800945a:	d104      	bne.n	8009466 <__strtok_r+0x4a>
 800945c:	0023      	movs	r3, r4
 800945e:	3401      	adds	r4, #1
 8009460:	781d      	ldrb	r5, [r3, #0]
 8009462:	0027      	movs	r7, r4
 8009464:	000b      	movs	r3, r1
 8009466:	781e      	ldrb	r6, [r3, #0]
 8009468:	42b5      	cmp	r5, r6
 800946a:	d1f4      	bne.n	8009456 <__strtok_r+0x3a>
 800946c:	2d00      	cmp	r5, #0
 800946e:	d0f0      	beq.n	8009452 <__strtok_r+0x36>
 8009470:	2300      	movs	r3, #0
 8009472:	3c01      	subs	r4, #1
 8009474:	7023      	strb	r3, [r4, #0]
 8009476:	6017      	str	r7, [r2, #0]
 8009478:	e7ea      	b.n	8009450 <__strtok_r+0x34>
	...

0800947c <_strtol_l.isra.0>:
 800947c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800947e:	b087      	sub	sp, #28
 8009480:	001e      	movs	r6, r3
 8009482:	9005      	str	r0, [sp, #20]
 8009484:	9101      	str	r1, [sp, #4]
 8009486:	9202      	str	r2, [sp, #8]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d045      	beq.n	8009518 <_strtol_l.isra.0+0x9c>
 800948c:	0008      	movs	r0, r1
 800948e:	2b24      	cmp	r3, #36	; 0x24
 8009490:	d842      	bhi.n	8009518 <_strtol_l.isra.0+0x9c>
 8009492:	4b3f      	ldr	r3, [pc, #252]	; (8009590 <_strtol_l.isra.0+0x114>)
 8009494:	2208      	movs	r2, #8
 8009496:	469c      	mov	ip, r3
 8009498:	0003      	movs	r3, r0
 800949a:	4661      	mov	r1, ip
 800949c:	781c      	ldrb	r4, [r3, #0]
 800949e:	1c45      	adds	r5, r0, #1
 80094a0:	5d09      	ldrb	r1, [r1, r4]
 80094a2:	0028      	movs	r0, r5
 80094a4:	000f      	movs	r7, r1
 80094a6:	4017      	ands	r7, r2
 80094a8:	4211      	tst	r1, r2
 80094aa:	d1f5      	bne.n	8009498 <_strtol_l.isra.0+0x1c>
 80094ac:	2c2d      	cmp	r4, #45	; 0x2d
 80094ae:	d13a      	bne.n	8009526 <_strtol_l.isra.0+0xaa>
 80094b0:	2701      	movs	r7, #1
 80094b2:	782c      	ldrb	r4, [r5, #0]
 80094b4:	1c9d      	adds	r5, r3, #2
 80094b6:	2e00      	cmp	r6, #0
 80094b8:	d065      	beq.n	8009586 <_strtol_l.isra.0+0x10a>
 80094ba:	2e10      	cmp	r6, #16
 80094bc:	d109      	bne.n	80094d2 <_strtol_l.isra.0+0x56>
 80094be:	2c30      	cmp	r4, #48	; 0x30
 80094c0:	d107      	bne.n	80094d2 <_strtol_l.isra.0+0x56>
 80094c2:	2220      	movs	r2, #32
 80094c4:	782b      	ldrb	r3, [r5, #0]
 80094c6:	4393      	bics	r3, r2
 80094c8:	2b58      	cmp	r3, #88	; 0x58
 80094ca:	d157      	bne.n	800957c <_strtol_l.isra.0+0x100>
 80094cc:	2610      	movs	r6, #16
 80094ce:	786c      	ldrb	r4, [r5, #1]
 80094d0:	3502      	adds	r5, #2
 80094d2:	4b30      	ldr	r3, [pc, #192]	; (8009594 <_strtol_l.isra.0+0x118>)
 80094d4:	0031      	movs	r1, r6
 80094d6:	18fb      	adds	r3, r7, r3
 80094d8:	0018      	movs	r0, r3
 80094da:	9303      	str	r3, [sp, #12]
 80094dc:	f7f6 febc 	bl	8000258 <__aeabi_uidivmod>
 80094e0:	2300      	movs	r3, #0
 80094e2:	2201      	movs	r2, #1
 80094e4:	4684      	mov	ip, r0
 80094e6:	0018      	movs	r0, r3
 80094e8:	9104      	str	r1, [sp, #16]
 80094ea:	4252      	negs	r2, r2
 80094ec:	0021      	movs	r1, r4
 80094ee:	3930      	subs	r1, #48	; 0x30
 80094f0:	2909      	cmp	r1, #9
 80094f2:	d81d      	bhi.n	8009530 <_strtol_l.isra.0+0xb4>
 80094f4:	000c      	movs	r4, r1
 80094f6:	42a6      	cmp	r6, r4
 80094f8:	dd28      	ble.n	800954c <_strtol_l.isra.0+0xd0>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	db24      	blt.n	8009548 <_strtol_l.isra.0+0xcc>
 80094fe:	0013      	movs	r3, r2
 8009500:	4584      	cmp	ip, r0
 8009502:	d306      	bcc.n	8009512 <_strtol_l.isra.0+0x96>
 8009504:	d102      	bne.n	800950c <_strtol_l.isra.0+0x90>
 8009506:	9904      	ldr	r1, [sp, #16]
 8009508:	42a1      	cmp	r1, r4
 800950a:	db02      	blt.n	8009512 <_strtol_l.isra.0+0x96>
 800950c:	2301      	movs	r3, #1
 800950e:	4370      	muls	r0, r6
 8009510:	1820      	adds	r0, r4, r0
 8009512:	782c      	ldrb	r4, [r5, #0]
 8009514:	3501      	adds	r5, #1
 8009516:	e7e9      	b.n	80094ec <_strtol_l.isra.0+0x70>
 8009518:	f7ff f98c 	bl	8008834 <__errno>
 800951c:	2316      	movs	r3, #22
 800951e:	6003      	str	r3, [r0, #0]
 8009520:	2000      	movs	r0, #0
 8009522:	b007      	add	sp, #28
 8009524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009526:	2c2b      	cmp	r4, #43	; 0x2b
 8009528:	d1c5      	bne.n	80094b6 <_strtol_l.isra.0+0x3a>
 800952a:	782c      	ldrb	r4, [r5, #0]
 800952c:	1c9d      	adds	r5, r3, #2
 800952e:	e7c2      	b.n	80094b6 <_strtol_l.isra.0+0x3a>
 8009530:	0021      	movs	r1, r4
 8009532:	3941      	subs	r1, #65	; 0x41
 8009534:	2919      	cmp	r1, #25
 8009536:	d801      	bhi.n	800953c <_strtol_l.isra.0+0xc0>
 8009538:	3c37      	subs	r4, #55	; 0x37
 800953a:	e7dc      	b.n	80094f6 <_strtol_l.isra.0+0x7a>
 800953c:	0021      	movs	r1, r4
 800953e:	3961      	subs	r1, #97	; 0x61
 8009540:	2919      	cmp	r1, #25
 8009542:	d803      	bhi.n	800954c <_strtol_l.isra.0+0xd0>
 8009544:	3c57      	subs	r4, #87	; 0x57
 8009546:	e7d6      	b.n	80094f6 <_strtol_l.isra.0+0x7a>
 8009548:	0013      	movs	r3, r2
 800954a:	e7e2      	b.n	8009512 <_strtol_l.isra.0+0x96>
 800954c:	2b00      	cmp	r3, #0
 800954e:	da09      	bge.n	8009564 <_strtol_l.isra.0+0xe8>
 8009550:	2322      	movs	r3, #34	; 0x22
 8009552:	9a05      	ldr	r2, [sp, #20]
 8009554:	9803      	ldr	r0, [sp, #12]
 8009556:	6013      	str	r3, [r2, #0]
 8009558:	9b02      	ldr	r3, [sp, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0e1      	beq.n	8009522 <_strtol_l.isra.0+0xa6>
 800955e:	1e6b      	subs	r3, r5, #1
 8009560:	9301      	str	r3, [sp, #4]
 8009562:	e007      	b.n	8009574 <_strtol_l.isra.0+0xf8>
 8009564:	2f00      	cmp	r7, #0
 8009566:	d000      	beq.n	800956a <_strtol_l.isra.0+0xee>
 8009568:	4240      	negs	r0, r0
 800956a:	9a02      	ldr	r2, [sp, #8]
 800956c:	2a00      	cmp	r2, #0
 800956e:	d0d8      	beq.n	8009522 <_strtol_l.isra.0+0xa6>
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1f4      	bne.n	800955e <_strtol_l.isra.0+0xe2>
 8009574:	9b02      	ldr	r3, [sp, #8]
 8009576:	9a01      	ldr	r2, [sp, #4]
 8009578:	601a      	str	r2, [r3, #0]
 800957a:	e7d2      	b.n	8009522 <_strtol_l.isra.0+0xa6>
 800957c:	2430      	movs	r4, #48	; 0x30
 800957e:	2e00      	cmp	r6, #0
 8009580:	d1a7      	bne.n	80094d2 <_strtol_l.isra.0+0x56>
 8009582:	3608      	adds	r6, #8
 8009584:	e7a5      	b.n	80094d2 <_strtol_l.isra.0+0x56>
 8009586:	2c30      	cmp	r4, #48	; 0x30
 8009588:	d09b      	beq.n	80094c2 <_strtol_l.isra.0+0x46>
 800958a:	260a      	movs	r6, #10
 800958c:	e7a1      	b.n	80094d2 <_strtol_l.isra.0+0x56>
 800958e:	46c0      	nop			; (mov r8, r8)
 8009590:	0800bd5a 	.word	0x0800bd5a
 8009594:	7fffffff 	.word	0x7fffffff

08009598 <strtol>:
 8009598:	b510      	push	{r4, lr}
 800959a:	0013      	movs	r3, r2
 800959c:	000a      	movs	r2, r1
 800959e:	0001      	movs	r1, r0
 80095a0:	4802      	ldr	r0, [pc, #8]	; (80095ac <strtol+0x14>)
 80095a2:	6800      	ldr	r0, [r0, #0]
 80095a4:	f7ff ff6a 	bl	800947c <_strtol_l.isra.0>
 80095a8:	bd10      	pop	{r4, pc}
 80095aa:	46c0      	nop			; (mov r8, r8)
 80095ac:	20000010 	.word	0x20000010

080095b0 <__utoa>:
 80095b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095b2:	0016      	movs	r6, r2
 80095b4:	b08d      	sub	sp, #52	; 0x34
 80095b6:	0007      	movs	r7, r0
 80095b8:	000c      	movs	r4, r1
 80095ba:	2225      	movs	r2, #37	; 0x25
 80095bc:	4916      	ldr	r1, [pc, #88]	; (8009618 <__utoa+0x68>)
 80095be:	a802      	add	r0, sp, #8
 80095c0:	f7ff f992 	bl	80088e8 <memcpy>
 80095c4:	1eb3      	subs	r3, r6, #2
 80095c6:	2500      	movs	r5, #0
 80095c8:	2b22      	cmp	r3, #34	; 0x22
 80095ca:	d820      	bhi.n	800960e <__utoa+0x5e>
 80095cc:	1e63      	subs	r3, r4, #1
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	ab02      	add	r3, sp, #8
 80095d2:	9301      	str	r3, [sp, #4]
 80095d4:	0038      	movs	r0, r7
 80095d6:	0031      	movs	r1, r6
 80095d8:	f7f6 fe3e 	bl	8000258 <__aeabi_uidivmod>
 80095dc:	000b      	movs	r3, r1
 80095de:	9a01      	ldr	r2, [sp, #4]
 80095e0:	0029      	movs	r1, r5
 80095e2:	5cd3      	ldrb	r3, [r2, r3]
 80095e4:	9a00      	ldr	r2, [sp, #0]
 80095e6:	3501      	adds	r5, #1
 80095e8:	5553      	strb	r3, [r2, r5]
 80095ea:	003b      	movs	r3, r7
 80095ec:	0007      	movs	r7, r0
 80095ee:	429e      	cmp	r6, r3
 80095f0:	d9f0      	bls.n	80095d4 <__utoa+0x24>
 80095f2:	2300      	movs	r3, #0
 80095f4:	0022      	movs	r2, r4
 80095f6:	5563      	strb	r3, [r4, r5]
 80095f8:	000b      	movs	r3, r1
 80095fa:	1ac8      	subs	r0, r1, r3
 80095fc:	4283      	cmp	r3, r0
 80095fe:	dd08      	ble.n	8009612 <__utoa+0x62>
 8009600:	7810      	ldrb	r0, [r2, #0]
 8009602:	5ce5      	ldrb	r5, [r4, r3]
 8009604:	7015      	strb	r5, [r2, #0]
 8009606:	54e0      	strb	r0, [r4, r3]
 8009608:	3201      	adds	r2, #1
 800960a:	3b01      	subs	r3, #1
 800960c:	e7f5      	b.n	80095fa <__utoa+0x4a>
 800960e:	7025      	strb	r5, [r4, #0]
 8009610:	002c      	movs	r4, r5
 8009612:	0020      	movs	r0, r4
 8009614:	b00d      	add	sp, #52	; 0x34
 8009616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009618:	0800bcf8 	.word	0x0800bcf8

0800961c <_vsiprintf_r>:
 800961c:	b500      	push	{lr}
 800961e:	b09b      	sub	sp, #108	; 0x6c
 8009620:	9100      	str	r1, [sp, #0]
 8009622:	9104      	str	r1, [sp, #16]
 8009624:	4906      	ldr	r1, [pc, #24]	; (8009640 <_vsiprintf_r+0x24>)
 8009626:	9105      	str	r1, [sp, #20]
 8009628:	9102      	str	r1, [sp, #8]
 800962a:	4906      	ldr	r1, [pc, #24]	; (8009644 <_vsiprintf_r+0x28>)
 800962c:	9103      	str	r1, [sp, #12]
 800962e:	4669      	mov	r1, sp
 8009630:	f001 fb1c 	bl	800ac6c <_svfiprintf_r>
 8009634:	2300      	movs	r3, #0
 8009636:	9a00      	ldr	r2, [sp, #0]
 8009638:	7013      	strb	r3, [r2, #0]
 800963a:	b01b      	add	sp, #108	; 0x6c
 800963c:	bd00      	pop	{pc}
 800963e:	46c0      	nop			; (mov r8, r8)
 8009640:	7fffffff 	.word	0x7fffffff
 8009644:	ffff0208 	.word	0xffff0208

08009648 <vsiprintf>:
 8009648:	b510      	push	{r4, lr}
 800964a:	0013      	movs	r3, r2
 800964c:	000a      	movs	r2, r1
 800964e:	0001      	movs	r1, r0
 8009650:	4802      	ldr	r0, [pc, #8]	; (800965c <vsiprintf+0x14>)
 8009652:	6800      	ldr	r0, [r0, #0]
 8009654:	f7ff ffe2 	bl	800961c <_vsiprintf_r>
 8009658:	bd10      	pop	{r4, pc}
 800965a:	46c0      	nop			; (mov r8, r8)
 800965c:	20000010 	.word	0x20000010

08009660 <__assert_func>:
 8009660:	b530      	push	{r4, r5, lr}
 8009662:	0014      	movs	r4, r2
 8009664:	001a      	movs	r2, r3
 8009666:	4b09      	ldr	r3, [pc, #36]	; (800968c <__assert_func+0x2c>)
 8009668:	0005      	movs	r5, r0
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	b085      	sub	sp, #20
 800966e:	68d8      	ldr	r0, [r3, #12]
 8009670:	4b07      	ldr	r3, [pc, #28]	; (8009690 <__assert_func+0x30>)
 8009672:	2c00      	cmp	r4, #0
 8009674:	d101      	bne.n	800967a <__assert_func+0x1a>
 8009676:	4b07      	ldr	r3, [pc, #28]	; (8009694 <__assert_func+0x34>)
 8009678:	001c      	movs	r4, r3
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	9100      	str	r1, [sp, #0]
 800967e:	002b      	movs	r3, r5
 8009680:	4905      	ldr	r1, [pc, #20]	; (8009698 <__assert_func+0x38>)
 8009682:	9402      	str	r4, [sp, #8]
 8009684:	f000 feb4 	bl	800a3f0 <fiprintf>
 8009688:	f001 fe20 	bl	800b2cc <abort>
 800968c:	20000010 	.word	0x20000010
 8009690:	0800bd1d 	.word	0x0800bd1d
 8009694:	0800bd58 	.word	0x0800bd58
 8009698:	0800bd2a 	.word	0x0800bd2a

0800969c <quorem>:
 800969c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800969e:	0006      	movs	r6, r0
 80096a0:	690d      	ldr	r5, [r1, #16]
 80096a2:	6933      	ldr	r3, [r6, #16]
 80096a4:	b087      	sub	sp, #28
 80096a6:	2000      	movs	r0, #0
 80096a8:	9102      	str	r1, [sp, #8]
 80096aa:	42ab      	cmp	r3, r5
 80096ac:	db6b      	blt.n	8009786 <quorem+0xea>
 80096ae:	000b      	movs	r3, r1
 80096b0:	3d01      	subs	r5, #1
 80096b2:	00ac      	lsls	r4, r5, #2
 80096b4:	3314      	adds	r3, #20
 80096b6:	9305      	str	r3, [sp, #20]
 80096b8:	191b      	adds	r3, r3, r4
 80096ba:	9303      	str	r3, [sp, #12]
 80096bc:	0033      	movs	r3, r6
 80096be:	3314      	adds	r3, #20
 80096c0:	9301      	str	r3, [sp, #4]
 80096c2:	191c      	adds	r4, r3, r4
 80096c4:	9b03      	ldr	r3, [sp, #12]
 80096c6:	6827      	ldr	r7, [r4, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	0038      	movs	r0, r7
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	3301      	adds	r3, #1
 80096d0:	0019      	movs	r1, r3
 80096d2:	9304      	str	r3, [sp, #16]
 80096d4:	f7f6 fd3a 	bl	800014c <__udivsi3>
 80096d8:	9b04      	ldr	r3, [sp, #16]
 80096da:	9000      	str	r0, [sp, #0]
 80096dc:	429f      	cmp	r7, r3
 80096de:	d329      	bcc.n	8009734 <quorem+0x98>
 80096e0:	2300      	movs	r3, #0
 80096e2:	469c      	mov	ip, r3
 80096e4:	9801      	ldr	r0, [sp, #4]
 80096e6:	9f05      	ldr	r7, [sp, #20]
 80096e8:	9304      	str	r3, [sp, #16]
 80096ea:	cf08      	ldmia	r7!, {r3}
 80096ec:	9a00      	ldr	r2, [sp, #0]
 80096ee:	b299      	uxth	r1, r3
 80096f0:	4351      	muls	r1, r2
 80096f2:	0c1b      	lsrs	r3, r3, #16
 80096f4:	4353      	muls	r3, r2
 80096f6:	4461      	add	r1, ip
 80096f8:	0c0a      	lsrs	r2, r1, #16
 80096fa:	189b      	adds	r3, r3, r2
 80096fc:	0c1a      	lsrs	r2, r3, #16
 80096fe:	9305      	str	r3, [sp, #20]
 8009700:	6803      	ldr	r3, [r0, #0]
 8009702:	4694      	mov	ip, r2
 8009704:	b29a      	uxth	r2, r3
 8009706:	9b04      	ldr	r3, [sp, #16]
 8009708:	b289      	uxth	r1, r1
 800970a:	18d2      	adds	r2, r2, r3
 800970c:	6803      	ldr	r3, [r0, #0]
 800970e:	1a52      	subs	r2, r2, r1
 8009710:	0c19      	lsrs	r1, r3, #16
 8009712:	466b      	mov	r3, sp
 8009714:	8a9b      	ldrh	r3, [r3, #20]
 8009716:	1acb      	subs	r3, r1, r3
 8009718:	1411      	asrs	r1, r2, #16
 800971a:	185b      	adds	r3, r3, r1
 800971c:	1419      	asrs	r1, r3, #16
 800971e:	b292      	uxth	r2, r2
 8009720:	041b      	lsls	r3, r3, #16
 8009722:	431a      	orrs	r2, r3
 8009724:	9b03      	ldr	r3, [sp, #12]
 8009726:	9104      	str	r1, [sp, #16]
 8009728:	c004      	stmia	r0!, {r2}
 800972a:	42bb      	cmp	r3, r7
 800972c:	d2dd      	bcs.n	80096ea <quorem+0x4e>
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d02e      	beq.n	8009792 <quorem+0xf6>
 8009734:	0030      	movs	r0, r6
 8009736:	9902      	ldr	r1, [sp, #8]
 8009738:	f001 f910 	bl	800a95c <__mcmp>
 800973c:	2800      	cmp	r0, #0
 800973e:	db21      	blt.n	8009784 <quorem+0xe8>
 8009740:	0030      	movs	r0, r6
 8009742:	2400      	movs	r4, #0
 8009744:	9b00      	ldr	r3, [sp, #0]
 8009746:	9902      	ldr	r1, [sp, #8]
 8009748:	3301      	adds	r3, #1
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	3014      	adds	r0, #20
 800974e:	3114      	adds	r1, #20
 8009750:	6802      	ldr	r2, [r0, #0]
 8009752:	c908      	ldmia	r1!, {r3}
 8009754:	b292      	uxth	r2, r2
 8009756:	1914      	adds	r4, r2, r4
 8009758:	b29a      	uxth	r2, r3
 800975a:	1aa2      	subs	r2, r4, r2
 800975c:	6804      	ldr	r4, [r0, #0]
 800975e:	0c1b      	lsrs	r3, r3, #16
 8009760:	0c24      	lsrs	r4, r4, #16
 8009762:	1ae3      	subs	r3, r4, r3
 8009764:	1414      	asrs	r4, r2, #16
 8009766:	191b      	adds	r3, r3, r4
 8009768:	141c      	asrs	r4, r3, #16
 800976a:	b292      	uxth	r2, r2
 800976c:	041b      	lsls	r3, r3, #16
 800976e:	4313      	orrs	r3, r2
 8009770:	c008      	stmia	r0!, {r3}
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	428b      	cmp	r3, r1
 8009776:	d2eb      	bcs.n	8009750 <quorem+0xb4>
 8009778:	9a01      	ldr	r2, [sp, #4]
 800977a:	00ab      	lsls	r3, r5, #2
 800977c:	18d3      	adds	r3, r2, r3
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	2a00      	cmp	r2, #0
 8009782:	d010      	beq.n	80097a6 <quorem+0x10a>
 8009784:	9800      	ldr	r0, [sp, #0]
 8009786:	b007      	add	sp, #28
 8009788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d104      	bne.n	800979a <quorem+0xfe>
 8009790:	3d01      	subs	r5, #1
 8009792:	9b01      	ldr	r3, [sp, #4]
 8009794:	3c04      	subs	r4, #4
 8009796:	42a3      	cmp	r3, r4
 8009798:	d3f7      	bcc.n	800978a <quorem+0xee>
 800979a:	6135      	str	r5, [r6, #16]
 800979c:	e7ca      	b.n	8009734 <quorem+0x98>
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	2a00      	cmp	r2, #0
 80097a2:	d104      	bne.n	80097ae <quorem+0x112>
 80097a4:	3d01      	subs	r5, #1
 80097a6:	9a01      	ldr	r2, [sp, #4]
 80097a8:	3b04      	subs	r3, #4
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d3f7      	bcc.n	800979e <quorem+0x102>
 80097ae:	6135      	str	r5, [r6, #16]
 80097b0:	e7e8      	b.n	8009784 <quorem+0xe8>
	...

080097b4 <_dtoa_r>:
 80097b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097b6:	b09d      	sub	sp, #116	; 0x74
 80097b8:	9202      	str	r2, [sp, #8]
 80097ba:	9303      	str	r3, [sp, #12]
 80097bc:	9b02      	ldr	r3, [sp, #8]
 80097be:	9c03      	ldr	r4, [sp, #12]
 80097c0:	930a      	str	r3, [sp, #40]	; 0x28
 80097c2:	940b      	str	r4, [sp, #44]	; 0x2c
 80097c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097c6:	0007      	movs	r7, r0
 80097c8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80097ca:	2c00      	cmp	r4, #0
 80097cc:	d10e      	bne.n	80097ec <_dtoa_r+0x38>
 80097ce:	2010      	movs	r0, #16
 80097d0:	f7ff f876 	bl	80088c0 <malloc>
 80097d4:	1e02      	subs	r2, r0, #0
 80097d6:	6278      	str	r0, [r7, #36]	; 0x24
 80097d8:	d104      	bne.n	80097e4 <_dtoa_r+0x30>
 80097da:	21ea      	movs	r1, #234	; 0xea
 80097dc:	4bc0      	ldr	r3, [pc, #768]	; (8009ae0 <_dtoa_r+0x32c>)
 80097de:	48c1      	ldr	r0, [pc, #772]	; (8009ae4 <_dtoa_r+0x330>)
 80097e0:	f7ff ff3e 	bl	8009660 <__assert_func>
 80097e4:	6044      	str	r4, [r0, #4]
 80097e6:	6084      	str	r4, [r0, #8]
 80097e8:	6004      	str	r4, [r0, #0]
 80097ea:	60c4      	str	r4, [r0, #12]
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	6819      	ldr	r1, [r3, #0]
 80097f0:	2900      	cmp	r1, #0
 80097f2:	d00a      	beq.n	800980a <_dtoa_r+0x56>
 80097f4:	685a      	ldr	r2, [r3, #4]
 80097f6:	2301      	movs	r3, #1
 80097f8:	4093      	lsls	r3, r2
 80097fa:	604a      	str	r2, [r1, #4]
 80097fc:	608b      	str	r3, [r1, #8]
 80097fe:	0038      	movs	r0, r7
 8009800:	f000 fe6a 	bl	800a4d8 <_Bfree>
 8009804:	2200      	movs	r2, #0
 8009806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009808:	601a      	str	r2, [r3, #0]
 800980a:	9b03      	ldr	r3, [sp, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	da21      	bge.n	8009854 <_dtoa_r+0xa0>
 8009810:	2301      	movs	r3, #1
 8009812:	602b      	str	r3, [r5, #0]
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	005b      	lsls	r3, r3, #1
 8009818:	085b      	lsrs	r3, r3, #1
 800981a:	930b      	str	r3, [sp, #44]	; 0x2c
 800981c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800981e:	4bb2      	ldr	r3, [pc, #712]	; (8009ae8 <_dtoa_r+0x334>)
 8009820:	002a      	movs	r2, r5
 8009822:	9318      	str	r3, [sp, #96]	; 0x60
 8009824:	401a      	ands	r2, r3
 8009826:	429a      	cmp	r2, r3
 8009828:	d117      	bne.n	800985a <_dtoa_r+0xa6>
 800982a:	4bb0      	ldr	r3, [pc, #704]	; (8009aec <_dtoa_r+0x338>)
 800982c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800982e:	0328      	lsls	r0, r5, #12
 8009830:	6013      	str	r3, [r2, #0]
 8009832:	9b02      	ldr	r3, [sp, #8]
 8009834:	0b00      	lsrs	r0, r0, #12
 8009836:	4318      	orrs	r0, r3
 8009838:	d101      	bne.n	800983e <_dtoa_r+0x8a>
 800983a:	f000 fdc3 	bl	800a3c4 <_dtoa_r+0xc10>
 800983e:	48ac      	ldr	r0, [pc, #688]	; (8009af0 <_dtoa_r+0x33c>)
 8009840:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009842:	9005      	str	r0, [sp, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <_dtoa_r+0x9a>
 8009848:	4baa      	ldr	r3, [pc, #680]	; (8009af4 <_dtoa_r+0x340>)
 800984a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800984c:	6013      	str	r3, [r2, #0]
 800984e:	9805      	ldr	r0, [sp, #20]
 8009850:	b01d      	add	sp, #116	; 0x74
 8009852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009854:	2300      	movs	r3, #0
 8009856:	602b      	str	r3, [r5, #0]
 8009858:	e7e0      	b.n	800981c <_dtoa_r+0x68>
 800985a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800985c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800985e:	9312      	str	r3, [sp, #72]	; 0x48
 8009860:	9413      	str	r4, [sp, #76]	; 0x4c
 8009862:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009864:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009866:	2200      	movs	r2, #0
 8009868:	2300      	movs	r3, #0
 800986a:	f7f6 fdf5 	bl	8000458 <__aeabi_dcmpeq>
 800986e:	1e04      	subs	r4, r0, #0
 8009870:	d00b      	beq.n	800988a <_dtoa_r+0xd6>
 8009872:	2301      	movs	r3, #1
 8009874:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	4b9f      	ldr	r3, [pc, #636]	; (8009af8 <_dtoa_r+0x344>)
 800987a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800987c:	9305      	str	r3, [sp, #20]
 800987e:	2a00      	cmp	r2, #0
 8009880:	d0e5      	beq.n	800984e <_dtoa_r+0x9a>
 8009882:	4a9e      	ldr	r2, [pc, #632]	; (8009afc <_dtoa_r+0x348>)
 8009884:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009886:	600a      	str	r2, [r1, #0]
 8009888:	e7e1      	b.n	800984e <_dtoa_r+0x9a>
 800988a:	ab1a      	add	r3, sp, #104	; 0x68
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	0038      	movs	r0, r7
 8009894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009896:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009898:	f001 f914 	bl	800aac4 <__d2b>
 800989c:	006e      	lsls	r6, r5, #1
 800989e:	9004      	str	r0, [sp, #16]
 80098a0:	0d76      	lsrs	r6, r6, #21
 80098a2:	d100      	bne.n	80098a6 <_dtoa_r+0xf2>
 80098a4:	e07c      	b.n	80099a0 <_dtoa_r+0x1ec>
 80098a6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80098a8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80098aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098ac:	4a94      	ldr	r2, [pc, #592]	; (8009b00 <_dtoa_r+0x34c>)
 80098ae:	031b      	lsls	r3, r3, #12
 80098b0:	0b1b      	lsrs	r3, r3, #12
 80098b2:	431a      	orrs	r2, r3
 80098b4:	0011      	movs	r1, r2
 80098b6:	4b93      	ldr	r3, [pc, #588]	; (8009b04 <_dtoa_r+0x350>)
 80098b8:	9416      	str	r4, [sp, #88]	; 0x58
 80098ba:	18f6      	adds	r6, r6, r3
 80098bc:	2200      	movs	r2, #0
 80098be:	4b92      	ldr	r3, [pc, #584]	; (8009b08 <_dtoa_r+0x354>)
 80098c0:	f7f8 f810 	bl	80018e4 <__aeabi_dsub>
 80098c4:	4a91      	ldr	r2, [pc, #580]	; (8009b0c <_dtoa_r+0x358>)
 80098c6:	4b92      	ldr	r3, [pc, #584]	; (8009b10 <_dtoa_r+0x35c>)
 80098c8:	f7f7 fda0 	bl	800140c <__aeabi_dmul>
 80098cc:	4a91      	ldr	r2, [pc, #580]	; (8009b14 <_dtoa_r+0x360>)
 80098ce:	4b92      	ldr	r3, [pc, #584]	; (8009b18 <_dtoa_r+0x364>)
 80098d0:	f7f6 fe2c 	bl	800052c <__aeabi_dadd>
 80098d4:	0004      	movs	r4, r0
 80098d6:	0030      	movs	r0, r6
 80098d8:	000d      	movs	r5, r1
 80098da:	f7f8 fbe9 	bl	80020b0 <__aeabi_i2d>
 80098de:	4a8f      	ldr	r2, [pc, #572]	; (8009b1c <_dtoa_r+0x368>)
 80098e0:	4b8f      	ldr	r3, [pc, #572]	; (8009b20 <_dtoa_r+0x36c>)
 80098e2:	f7f7 fd93 	bl	800140c <__aeabi_dmul>
 80098e6:	0002      	movs	r2, r0
 80098e8:	000b      	movs	r3, r1
 80098ea:	0020      	movs	r0, r4
 80098ec:	0029      	movs	r1, r5
 80098ee:	f7f6 fe1d 	bl	800052c <__aeabi_dadd>
 80098f2:	0004      	movs	r4, r0
 80098f4:	000d      	movs	r5, r1
 80098f6:	f7f8 fba5 	bl	8002044 <__aeabi_d2iz>
 80098fa:	2200      	movs	r2, #0
 80098fc:	9002      	str	r0, [sp, #8]
 80098fe:	2300      	movs	r3, #0
 8009900:	0020      	movs	r0, r4
 8009902:	0029      	movs	r1, r5
 8009904:	f7f6 fdae 	bl	8000464 <__aeabi_dcmplt>
 8009908:	2800      	cmp	r0, #0
 800990a:	d00b      	beq.n	8009924 <_dtoa_r+0x170>
 800990c:	9802      	ldr	r0, [sp, #8]
 800990e:	f7f8 fbcf 	bl	80020b0 <__aeabi_i2d>
 8009912:	002b      	movs	r3, r5
 8009914:	0022      	movs	r2, r4
 8009916:	f7f6 fd9f 	bl	8000458 <__aeabi_dcmpeq>
 800991a:	4243      	negs	r3, r0
 800991c:	4158      	adcs	r0, r3
 800991e:	9b02      	ldr	r3, [sp, #8]
 8009920:	1a1b      	subs	r3, r3, r0
 8009922:	9302      	str	r3, [sp, #8]
 8009924:	2301      	movs	r3, #1
 8009926:	9315      	str	r3, [sp, #84]	; 0x54
 8009928:	9b02      	ldr	r3, [sp, #8]
 800992a:	2b16      	cmp	r3, #22
 800992c:	d80f      	bhi.n	800994e <_dtoa_r+0x19a>
 800992e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009930:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009932:	00da      	lsls	r2, r3, #3
 8009934:	4b7b      	ldr	r3, [pc, #492]	; (8009b24 <_dtoa_r+0x370>)
 8009936:	189b      	adds	r3, r3, r2
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	f7f6 fd92 	bl	8000464 <__aeabi_dcmplt>
 8009940:	2800      	cmp	r0, #0
 8009942:	d049      	beq.n	80099d8 <_dtoa_r+0x224>
 8009944:	9b02      	ldr	r3, [sp, #8]
 8009946:	3b01      	subs	r3, #1
 8009948:	9302      	str	r3, [sp, #8]
 800994a:	2300      	movs	r3, #0
 800994c:	9315      	str	r3, [sp, #84]	; 0x54
 800994e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009950:	1b9e      	subs	r6, r3, r6
 8009952:	2300      	movs	r3, #0
 8009954:	9308      	str	r3, [sp, #32]
 8009956:	0033      	movs	r3, r6
 8009958:	3b01      	subs	r3, #1
 800995a:	930d      	str	r3, [sp, #52]	; 0x34
 800995c:	d504      	bpl.n	8009968 <_dtoa_r+0x1b4>
 800995e:	2301      	movs	r3, #1
 8009960:	1b9b      	subs	r3, r3, r6
 8009962:	9308      	str	r3, [sp, #32]
 8009964:	2300      	movs	r3, #0
 8009966:	930d      	str	r3, [sp, #52]	; 0x34
 8009968:	9b02      	ldr	r3, [sp, #8]
 800996a:	2b00      	cmp	r3, #0
 800996c:	db36      	blt.n	80099dc <_dtoa_r+0x228>
 800996e:	9a02      	ldr	r2, [sp, #8]
 8009970:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009972:	4694      	mov	ip, r2
 8009974:	4463      	add	r3, ip
 8009976:	930d      	str	r3, [sp, #52]	; 0x34
 8009978:	2300      	movs	r3, #0
 800997a:	9214      	str	r2, [sp, #80]	; 0x50
 800997c:	930e      	str	r3, [sp, #56]	; 0x38
 800997e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009980:	2401      	movs	r4, #1
 8009982:	2b09      	cmp	r3, #9
 8009984:	d862      	bhi.n	8009a4c <_dtoa_r+0x298>
 8009986:	2b05      	cmp	r3, #5
 8009988:	dd02      	ble.n	8009990 <_dtoa_r+0x1dc>
 800998a:	2400      	movs	r4, #0
 800998c:	3b04      	subs	r3, #4
 800998e:	9322      	str	r3, [sp, #136]	; 0x88
 8009990:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009992:	1e98      	subs	r0, r3, #2
 8009994:	2803      	cmp	r0, #3
 8009996:	d862      	bhi.n	8009a5e <_dtoa_r+0x2aa>
 8009998:	f7f6 fbc4 	bl	8000124 <__gnu_thumb1_case_uqi>
 800999c:	56343629 	.word	0x56343629
 80099a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80099a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80099a4:	189e      	adds	r6, r3, r2
 80099a6:	4b60      	ldr	r3, [pc, #384]	; (8009b28 <_dtoa_r+0x374>)
 80099a8:	18f2      	adds	r2, r6, r3
 80099aa:	2a20      	cmp	r2, #32
 80099ac:	dd0f      	ble.n	80099ce <_dtoa_r+0x21a>
 80099ae:	2340      	movs	r3, #64	; 0x40
 80099b0:	1a9b      	subs	r3, r3, r2
 80099b2:	409d      	lsls	r5, r3
 80099b4:	4b5d      	ldr	r3, [pc, #372]	; (8009b2c <_dtoa_r+0x378>)
 80099b6:	9802      	ldr	r0, [sp, #8]
 80099b8:	18f3      	adds	r3, r6, r3
 80099ba:	40d8      	lsrs	r0, r3
 80099bc:	4328      	orrs	r0, r5
 80099be:	f7f8 fba7 	bl	8002110 <__aeabi_ui2d>
 80099c2:	2301      	movs	r3, #1
 80099c4:	4c5a      	ldr	r4, [pc, #360]	; (8009b30 <_dtoa_r+0x37c>)
 80099c6:	3e01      	subs	r6, #1
 80099c8:	1909      	adds	r1, r1, r4
 80099ca:	9316      	str	r3, [sp, #88]	; 0x58
 80099cc:	e776      	b.n	80098bc <_dtoa_r+0x108>
 80099ce:	2320      	movs	r3, #32
 80099d0:	9802      	ldr	r0, [sp, #8]
 80099d2:	1a9b      	subs	r3, r3, r2
 80099d4:	4098      	lsls	r0, r3
 80099d6:	e7f2      	b.n	80099be <_dtoa_r+0x20a>
 80099d8:	9015      	str	r0, [sp, #84]	; 0x54
 80099da:	e7b8      	b.n	800994e <_dtoa_r+0x19a>
 80099dc:	9b08      	ldr	r3, [sp, #32]
 80099de:	9a02      	ldr	r2, [sp, #8]
 80099e0:	1a9b      	subs	r3, r3, r2
 80099e2:	9308      	str	r3, [sp, #32]
 80099e4:	4253      	negs	r3, r2
 80099e6:	930e      	str	r3, [sp, #56]	; 0x38
 80099e8:	2300      	movs	r3, #0
 80099ea:	9314      	str	r3, [sp, #80]	; 0x50
 80099ec:	e7c7      	b.n	800997e <_dtoa_r+0x1ca>
 80099ee:	2300      	movs	r3, #0
 80099f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80099f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	dc36      	bgt.n	8009a66 <_dtoa_r+0x2b2>
 80099f8:	2301      	movs	r3, #1
 80099fa:	001a      	movs	r2, r3
 80099fc:	930c      	str	r3, [sp, #48]	; 0x30
 80099fe:	9306      	str	r3, [sp, #24]
 8009a00:	9223      	str	r2, [sp, #140]	; 0x8c
 8009a02:	e00d      	b.n	8009a20 <_dtoa_r+0x26c>
 8009a04:	2301      	movs	r3, #1
 8009a06:	e7f3      	b.n	80099f0 <_dtoa_r+0x23c>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009a0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a0e:	4694      	mov	ip, r2
 8009a10:	9b02      	ldr	r3, [sp, #8]
 8009a12:	4463      	add	r3, ip
 8009a14:	930c      	str	r3, [sp, #48]	; 0x30
 8009a16:	3301      	adds	r3, #1
 8009a18:	9306      	str	r3, [sp, #24]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	dc00      	bgt.n	8009a20 <_dtoa_r+0x26c>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	2200      	movs	r2, #0
 8009a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a24:	6042      	str	r2, [r0, #4]
 8009a26:	3204      	adds	r2, #4
 8009a28:	0015      	movs	r5, r2
 8009a2a:	3514      	adds	r5, #20
 8009a2c:	6841      	ldr	r1, [r0, #4]
 8009a2e:	429d      	cmp	r5, r3
 8009a30:	d91d      	bls.n	8009a6e <_dtoa_r+0x2ba>
 8009a32:	0038      	movs	r0, r7
 8009a34:	f000 fd0c 	bl	800a450 <_Balloc>
 8009a38:	9005      	str	r0, [sp, #20]
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d11b      	bne.n	8009a76 <_dtoa_r+0x2c2>
 8009a3e:	21d5      	movs	r1, #213	; 0xd5
 8009a40:	0002      	movs	r2, r0
 8009a42:	4b3c      	ldr	r3, [pc, #240]	; (8009b34 <_dtoa_r+0x380>)
 8009a44:	0049      	lsls	r1, r1, #1
 8009a46:	e6ca      	b.n	80097de <_dtoa_r+0x2a>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e7de      	b.n	8009a0a <_dtoa_r+0x256>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	940f      	str	r4, [sp, #60]	; 0x3c
 8009a50:	9322      	str	r3, [sp, #136]	; 0x88
 8009a52:	3b01      	subs	r3, #1
 8009a54:	930c      	str	r3, [sp, #48]	; 0x30
 8009a56:	9306      	str	r3, [sp, #24]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	3313      	adds	r3, #19
 8009a5c:	e7d0      	b.n	8009a00 <_dtoa_r+0x24c>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a62:	3b02      	subs	r3, #2
 8009a64:	e7f6      	b.n	8009a54 <_dtoa_r+0x2a0>
 8009a66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a68:	930c      	str	r3, [sp, #48]	; 0x30
 8009a6a:	9306      	str	r3, [sp, #24]
 8009a6c:	e7d8      	b.n	8009a20 <_dtoa_r+0x26c>
 8009a6e:	3101      	adds	r1, #1
 8009a70:	6041      	str	r1, [r0, #4]
 8009a72:	0052      	lsls	r2, r2, #1
 8009a74:	e7d8      	b.n	8009a28 <_dtoa_r+0x274>
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	9a05      	ldr	r2, [sp, #20]
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	9b06      	ldr	r3, [sp, #24]
 8009a7e:	2b0e      	cmp	r3, #14
 8009a80:	d900      	bls.n	8009a84 <_dtoa_r+0x2d0>
 8009a82:	e0eb      	b.n	8009c5c <_dtoa_r+0x4a8>
 8009a84:	2c00      	cmp	r4, #0
 8009a86:	d100      	bne.n	8009a8a <_dtoa_r+0x2d6>
 8009a88:	e0e8      	b.n	8009c5c <_dtoa_r+0x4a8>
 8009a8a:	9b02      	ldr	r3, [sp, #8]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	dd68      	ble.n	8009b62 <_dtoa_r+0x3ae>
 8009a90:	001a      	movs	r2, r3
 8009a92:	210f      	movs	r1, #15
 8009a94:	4b23      	ldr	r3, [pc, #140]	; (8009b24 <_dtoa_r+0x370>)
 8009a96:	400a      	ands	r2, r1
 8009a98:	00d2      	lsls	r2, r2, #3
 8009a9a:	189b      	adds	r3, r3, r2
 8009a9c:	681d      	ldr	r5, [r3, #0]
 8009a9e:	685e      	ldr	r6, [r3, #4]
 8009aa0:	9b02      	ldr	r3, [sp, #8]
 8009aa2:	111c      	asrs	r4, r3, #4
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	9310      	str	r3, [sp, #64]	; 0x40
 8009aa8:	9b02      	ldr	r3, [sp, #8]
 8009aaa:	05db      	lsls	r3, r3, #23
 8009aac:	d50b      	bpl.n	8009ac6 <_dtoa_r+0x312>
 8009aae:	4b22      	ldr	r3, [pc, #136]	; (8009b38 <_dtoa_r+0x384>)
 8009ab0:	400c      	ands	r4, r1
 8009ab2:	6a1a      	ldr	r2, [r3, #32]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009ab8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009aba:	f7f7 f8a1 	bl	8000c00 <__aeabi_ddiv>
 8009abe:	2303      	movs	r3, #3
 8009ac0:	900a      	str	r0, [sp, #40]	; 0x28
 8009ac2:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ac4:	9310      	str	r3, [sp, #64]	; 0x40
 8009ac6:	4b1c      	ldr	r3, [pc, #112]	; (8009b38 <_dtoa_r+0x384>)
 8009ac8:	9307      	str	r3, [sp, #28]
 8009aca:	2c00      	cmp	r4, #0
 8009acc:	d136      	bne.n	8009b3c <_dtoa_r+0x388>
 8009ace:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ad2:	002a      	movs	r2, r5
 8009ad4:	0033      	movs	r3, r6
 8009ad6:	f7f7 f893 	bl	8000c00 <__aeabi_ddiv>
 8009ada:	900a      	str	r0, [sp, #40]	; 0x28
 8009adc:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ade:	e05c      	b.n	8009b9a <_dtoa_r+0x3e6>
 8009ae0:	0800bc80 	.word	0x0800bc80
 8009ae4:	0800be67 	.word	0x0800be67
 8009ae8:	7ff00000 	.word	0x7ff00000
 8009aec:	0000270f 	.word	0x0000270f
 8009af0:	0800be63 	.word	0x0800be63
 8009af4:	0800be66 	.word	0x0800be66
 8009af8:	0800bc5c 	.word	0x0800bc5c
 8009afc:	0800bc5d 	.word	0x0800bc5d
 8009b00:	3ff00000 	.word	0x3ff00000
 8009b04:	fffffc01 	.word	0xfffffc01
 8009b08:	3ff80000 	.word	0x3ff80000
 8009b0c:	636f4361 	.word	0x636f4361
 8009b10:	3fd287a7 	.word	0x3fd287a7
 8009b14:	8b60c8b3 	.word	0x8b60c8b3
 8009b18:	3fc68a28 	.word	0x3fc68a28
 8009b1c:	509f79fb 	.word	0x509f79fb
 8009b20:	3fd34413 	.word	0x3fd34413
 8009b24:	0800bf60 	.word	0x0800bf60
 8009b28:	00000432 	.word	0x00000432
 8009b2c:	00000412 	.word	0x00000412
 8009b30:	fe100000 	.word	0xfe100000
 8009b34:	0800bec6 	.word	0x0800bec6
 8009b38:	0800bf38 	.word	0x0800bf38
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	421c      	tst	r4, r3
 8009b40:	d00b      	beq.n	8009b5a <_dtoa_r+0x3a6>
 8009b42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b44:	0028      	movs	r0, r5
 8009b46:	3301      	adds	r3, #1
 8009b48:	9310      	str	r3, [sp, #64]	; 0x40
 8009b4a:	9b07      	ldr	r3, [sp, #28]
 8009b4c:	0031      	movs	r1, r6
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	f7f7 fc5b 	bl	800140c <__aeabi_dmul>
 8009b56:	0005      	movs	r5, r0
 8009b58:	000e      	movs	r6, r1
 8009b5a:	9b07      	ldr	r3, [sp, #28]
 8009b5c:	1064      	asrs	r4, r4, #1
 8009b5e:	3308      	adds	r3, #8
 8009b60:	e7b2      	b.n	8009ac8 <_dtoa_r+0x314>
 8009b62:	2302      	movs	r3, #2
 8009b64:	9310      	str	r3, [sp, #64]	; 0x40
 8009b66:	9b02      	ldr	r3, [sp, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d016      	beq.n	8009b9a <_dtoa_r+0x3e6>
 8009b6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009b6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009b70:	425c      	negs	r4, r3
 8009b72:	230f      	movs	r3, #15
 8009b74:	4ab5      	ldr	r2, [pc, #724]	; (8009e4c <_dtoa_r+0x698>)
 8009b76:	4023      	ands	r3, r4
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	18d3      	adds	r3, r2, r3
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	f7f7 fc44 	bl	800140c <__aeabi_dmul>
 8009b84:	2601      	movs	r6, #1
 8009b86:	2300      	movs	r3, #0
 8009b88:	900a      	str	r0, [sp, #40]	; 0x28
 8009b8a:	910b      	str	r1, [sp, #44]	; 0x2c
 8009b8c:	4db0      	ldr	r5, [pc, #704]	; (8009e50 <_dtoa_r+0x69c>)
 8009b8e:	1124      	asrs	r4, r4, #4
 8009b90:	2c00      	cmp	r4, #0
 8009b92:	d000      	beq.n	8009b96 <_dtoa_r+0x3e2>
 8009b94:	e094      	b.n	8009cc0 <_dtoa_r+0x50c>
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d19f      	bne.n	8009ada <_dtoa_r+0x326>
 8009b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d100      	bne.n	8009ba2 <_dtoa_r+0x3ee>
 8009ba0:	e09b      	b.n	8009cda <_dtoa_r+0x526>
 8009ba2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009ba4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	0020      	movs	r0, r4
 8009baa:	0029      	movs	r1, r5
 8009bac:	4ba9      	ldr	r3, [pc, #676]	; (8009e54 <_dtoa_r+0x6a0>)
 8009bae:	f7f6 fc59 	bl	8000464 <__aeabi_dcmplt>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d100      	bne.n	8009bb8 <_dtoa_r+0x404>
 8009bb6:	e090      	b.n	8009cda <_dtoa_r+0x526>
 8009bb8:	9b06      	ldr	r3, [sp, #24]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d100      	bne.n	8009bc0 <_dtoa_r+0x40c>
 8009bbe:	e08c      	b.n	8009cda <_dtoa_r+0x526>
 8009bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	dd46      	ble.n	8009c54 <_dtoa_r+0x4a0>
 8009bc6:	9b02      	ldr	r3, [sp, #8]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	0020      	movs	r0, r4
 8009bcc:	0029      	movs	r1, r5
 8009bce:	1e5e      	subs	r6, r3, #1
 8009bd0:	4ba1      	ldr	r3, [pc, #644]	; (8009e58 <_dtoa_r+0x6a4>)
 8009bd2:	f7f7 fc1b 	bl	800140c <__aeabi_dmul>
 8009bd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bd8:	900a      	str	r0, [sp, #40]	; 0x28
 8009bda:	910b      	str	r1, [sp, #44]	; 0x2c
 8009bdc:	3301      	adds	r3, #1
 8009bde:	9310      	str	r3, [sp, #64]	; 0x40
 8009be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009be2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009be4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009be6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009be8:	9307      	str	r3, [sp, #28]
 8009bea:	f7f8 fa61 	bl	80020b0 <__aeabi_i2d>
 8009bee:	0022      	movs	r2, r4
 8009bf0:	002b      	movs	r3, r5
 8009bf2:	f7f7 fc0b 	bl	800140c <__aeabi_dmul>
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	4b98      	ldr	r3, [pc, #608]	; (8009e5c <_dtoa_r+0x6a8>)
 8009bfa:	f7f6 fc97 	bl	800052c <__aeabi_dadd>
 8009bfe:	9010      	str	r0, [sp, #64]	; 0x40
 8009c00:	9111      	str	r1, [sp, #68]	; 0x44
 8009c02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c06:	920a      	str	r2, [sp, #40]	; 0x28
 8009c08:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c0a:	4a95      	ldr	r2, [pc, #596]	; (8009e60 <_dtoa_r+0x6ac>)
 8009c0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c0e:	4694      	mov	ip, r2
 8009c10:	4463      	add	r3, ip
 8009c12:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c14:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c16:	9b07      	ldr	r3, [sp, #28]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d161      	bne.n	8009ce0 <_dtoa_r+0x52c>
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	0020      	movs	r0, r4
 8009c20:	0029      	movs	r1, r5
 8009c22:	4b90      	ldr	r3, [pc, #576]	; (8009e64 <_dtoa_r+0x6b0>)
 8009c24:	f7f7 fe5e 	bl	80018e4 <__aeabi_dsub>
 8009c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c2c:	0004      	movs	r4, r0
 8009c2e:	000d      	movs	r5, r1
 8009c30:	f7f6 fc2c 	bl	800048c <__aeabi_dcmpgt>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d000      	beq.n	8009c3a <_dtoa_r+0x486>
 8009c38:	e2b5      	b.n	800a1a6 <_dtoa_r+0x9f2>
 8009c3a:	488b      	ldr	r0, [pc, #556]	; (8009e68 <_dtoa_r+0x6b4>)
 8009c3c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c3e:	4684      	mov	ip, r0
 8009c40:	4461      	add	r1, ip
 8009c42:	000b      	movs	r3, r1
 8009c44:	0020      	movs	r0, r4
 8009c46:	0029      	movs	r1, r5
 8009c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c4a:	f7f6 fc0b 	bl	8000464 <__aeabi_dcmplt>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d000      	beq.n	8009c54 <_dtoa_r+0x4a0>
 8009c52:	e2a5      	b.n	800a1a0 <_dtoa_r+0x9ec>
 8009c54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c56:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009c58:	930a      	str	r3, [sp, #40]	; 0x28
 8009c5a:	940b      	str	r4, [sp, #44]	; 0x2c
 8009c5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da00      	bge.n	8009c64 <_dtoa_r+0x4b0>
 8009c62:	e171      	b.n	8009f48 <_dtoa_r+0x794>
 8009c64:	9a02      	ldr	r2, [sp, #8]
 8009c66:	2a0e      	cmp	r2, #14
 8009c68:	dd00      	ble.n	8009c6c <_dtoa_r+0x4b8>
 8009c6a:	e16d      	b.n	8009f48 <_dtoa_r+0x794>
 8009c6c:	4b77      	ldr	r3, [pc, #476]	; (8009e4c <_dtoa_r+0x698>)
 8009c6e:	00d2      	lsls	r2, r2, #3
 8009c70:	189b      	adds	r3, r3, r2
 8009c72:	685c      	ldr	r4, [r3, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	9308      	str	r3, [sp, #32]
 8009c78:	9409      	str	r4, [sp, #36]	; 0x24
 8009c7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	db00      	blt.n	8009c82 <_dtoa_r+0x4ce>
 8009c80:	e0f6      	b.n	8009e70 <_dtoa_r+0x6bc>
 8009c82:	9b06      	ldr	r3, [sp, #24]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	dd00      	ble.n	8009c8a <_dtoa_r+0x4d6>
 8009c88:	e0f2      	b.n	8009e70 <_dtoa_r+0x6bc>
 8009c8a:	d000      	beq.n	8009c8e <_dtoa_r+0x4da>
 8009c8c:	e288      	b.n	800a1a0 <_dtoa_r+0x9ec>
 8009c8e:	9808      	ldr	r0, [sp, #32]
 8009c90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c92:	2200      	movs	r2, #0
 8009c94:	4b73      	ldr	r3, [pc, #460]	; (8009e64 <_dtoa_r+0x6b0>)
 8009c96:	f7f7 fbb9 	bl	800140c <__aeabi_dmul>
 8009c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c9e:	f7f6 fbff 	bl	80004a0 <__aeabi_dcmpge>
 8009ca2:	9e06      	ldr	r6, [sp, #24]
 8009ca4:	0035      	movs	r5, r6
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d000      	beq.n	8009cac <_dtoa_r+0x4f8>
 8009caa:	e25f      	b.n	800a16c <_dtoa_r+0x9b8>
 8009cac:	9b05      	ldr	r3, [sp, #20]
 8009cae:	9a05      	ldr	r2, [sp, #20]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	9307      	str	r3, [sp, #28]
 8009cb4:	2331      	movs	r3, #49	; 0x31
 8009cb6:	7013      	strb	r3, [r2, #0]
 8009cb8:	9b02      	ldr	r3, [sp, #8]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	9302      	str	r3, [sp, #8]
 8009cbe:	e25a      	b.n	800a176 <_dtoa_r+0x9c2>
 8009cc0:	4234      	tst	r4, r6
 8009cc2:	d007      	beq.n	8009cd4 <_dtoa_r+0x520>
 8009cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	9310      	str	r3, [sp, #64]	; 0x40
 8009cca:	682a      	ldr	r2, [r5, #0]
 8009ccc:	686b      	ldr	r3, [r5, #4]
 8009cce:	f7f7 fb9d 	bl	800140c <__aeabi_dmul>
 8009cd2:	0033      	movs	r3, r6
 8009cd4:	1064      	asrs	r4, r4, #1
 8009cd6:	3508      	adds	r5, #8
 8009cd8:	e75a      	b.n	8009b90 <_dtoa_r+0x3dc>
 8009cda:	9e02      	ldr	r6, [sp, #8]
 8009cdc:	9b06      	ldr	r3, [sp, #24]
 8009cde:	e780      	b.n	8009be2 <_dtoa_r+0x42e>
 8009ce0:	9b07      	ldr	r3, [sp, #28]
 8009ce2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ce4:	1e5a      	subs	r2, r3, #1
 8009ce6:	4b59      	ldr	r3, [pc, #356]	; (8009e4c <_dtoa_r+0x698>)
 8009ce8:	00d2      	lsls	r2, r2, #3
 8009cea:	189b      	adds	r3, r3, r2
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	2900      	cmp	r1, #0
 8009cf2:	d051      	beq.n	8009d98 <_dtoa_r+0x5e4>
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	495d      	ldr	r1, [pc, #372]	; (8009e6c <_dtoa_r+0x6b8>)
 8009cf8:	f7f6 ff82 	bl	8000c00 <__aeabi_ddiv>
 8009cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d00:	f7f7 fdf0 	bl	80018e4 <__aeabi_dsub>
 8009d04:	9a05      	ldr	r2, [sp, #20]
 8009d06:	9b05      	ldr	r3, [sp, #20]
 8009d08:	4694      	mov	ip, r2
 8009d0a:	9310      	str	r3, [sp, #64]	; 0x40
 8009d0c:	9b07      	ldr	r3, [sp, #28]
 8009d0e:	900a      	str	r0, [sp, #40]	; 0x28
 8009d10:	910b      	str	r1, [sp, #44]	; 0x2c
 8009d12:	4463      	add	r3, ip
 8009d14:	9319      	str	r3, [sp, #100]	; 0x64
 8009d16:	0029      	movs	r1, r5
 8009d18:	0020      	movs	r0, r4
 8009d1a:	f7f8 f993 	bl	8002044 <__aeabi_d2iz>
 8009d1e:	9017      	str	r0, [sp, #92]	; 0x5c
 8009d20:	f7f8 f9c6 	bl	80020b0 <__aeabi_i2d>
 8009d24:	0002      	movs	r2, r0
 8009d26:	000b      	movs	r3, r1
 8009d28:	0020      	movs	r0, r4
 8009d2a:	0029      	movs	r1, r5
 8009d2c:	f7f7 fdda 	bl	80018e4 <__aeabi_dsub>
 8009d30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d34:	3301      	adds	r3, #1
 8009d36:	9307      	str	r3, [sp, #28]
 8009d38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d3a:	0004      	movs	r4, r0
 8009d3c:	3330      	adds	r3, #48	; 0x30
 8009d3e:	7013      	strb	r3, [r2, #0]
 8009d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d44:	000d      	movs	r5, r1
 8009d46:	f7f6 fb8d 	bl	8000464 <__aeabi_dcmplt>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d175      	bne.n	8009e3a <_dtoa_r+0x686>
 8009d4e:	0022      	movs	r2, r4
 8009d50:	002b      	movs	r3, r5
 8009d52:	2000      	movs	r0, #0
 8009d54:	493f      	ldr	r1, [pc, #252]	; (8009e54 <_dtoa_r+0x6a0>)
 8009d56:	f7f7 fdc5 	bl	80018e4 <__aeabi_dsub>
 8009d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d5e:	f7f6 fb81 	bl	8000464 <__aeabi_dcmplt>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d000      	beq.n	8009d68 <_dtoa_r+0x5b4>
 8009d66:	e0d1      	b.n	8009f0c <_dtoa_r+0x758>
 8009d68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d6a:	9a07      	ldr	r2, [sp, #28]
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d100      	bne.n	8009d72 <_dtoa_r+0x5be>
 8009d70:	e770      	b.n	8009c54 <_dtoa_r+0x4a0>
 8009d72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d76:	2200      	movs	r2, #0
 8009d78:	4b37      	ldr	r3, [pc, #220]	; (8009e58 <_dtoa_r+0x6a4>)
 8009d7a:	f7f7 fb47 	bl	800140c <__aeabi_dmul>
 8009d7e:	4b36      	ldr	r3, [pc, #216]	; (8009e58 <_dtoa_r+0x6a4>)
 8009d80:	900a      	str	r0, [sp, #40]	; 0x28
 8009d82:	910b      	str	r1, [sp, #44]	; 0x2c
 8009d84:	2200      	movs	r2, #0
 8009d86:	0020      	movs	r0, r4
 8009d88:	0029      	movs	r1, r5
 8009d8a:	f7f7 fb3f 	bl	800140c <__aeabi_dmul>
 8009d8e:	9b07      	ldr	r3, [sp, #28]
 8009d90:	0004      	movs	r4, r0
 8009d92:	000d      	movs	r5, r1
 8009d94:	9310      	str	r3, [sp, #64]	; 0x40
 8009d96:	e7be      	b.n	8009d16 <_dtoa_r+0x562>
 8009d98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d9c:	f7f7 fb36 	bl	800140c <__aeabi_dmul>
 8009da0:	9a05      	ldr	r2, [sp, #20]
 8009da2:	9b05      	ldr	r3, [sp, #20]
 8009da4:	4694      	mov	ip, r2
 8009da6:	930a      	str	r3, [sp, #40]	; 0x28
 8009da8:	9b07      	ldr	r3, [sp, #28]
 8009daa:	9010      	str	r0, [sp, #64]	; 0x40
 8009dac:	9111      	str	r1, [sp, #68]	; 0x44
 8009dae:	4463      	add	r3, ip
 8009db0:	9319      	str	r3, [sp, #100]	; 0x64
 8009db2:	0029      	movs	r1, r5
 8009db4:	0020      	movs	r0, r4
 8009db6:	f7f8 f945 	bl	8002044 <__aeabi_d2iz>
 8009dba:	9017      	str	r0, [sp, #92]	; 0x5c
 8009dbc:	f7f8 f978 	bl	80020b0 <__aeabi_i2d>
 8009dc0:	0002      	movs	r2, r0
 8009dc2:	000b      	movs	r3, r1
 8009dc4:	0020      	movs	r0, r4
 8009dc6:	0029      	movs	r1, r5
 8009dc8:	f7f7 fd8c 	bl	80018e4 <__aeabi_dsub>
 8009dcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dd0:	3330      	adds	r3, #48	; 0x30
 8009dd2:	7013      	strb	r3, [r2, #0]
 8009dd4:	0013      	movs	r3, r2
 8009dd6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009dd8:	3301      	adds	r3, #1
 8009dda:	0004      	movs	r4, r0
 8009ddc:	000d      	movs	r5, r1
 8009dde:	930a      	str	r3, [sp, #40]	; 0x28
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d12c      	bne.n	8009e3e <_dtoa_r+0x68a>
 8009de4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009de6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009de8:	9a05      	ldr	r2, [sp, #20]
 8009dea:	9b07      	ldr	r3, [sp, #28]
 8009dec:	4694      	mov	ip, r2
 8009dee:	4463      	add	r3, ip
 8009df0:	2200      	movs	r2, #0
 8009df2:	9307      	str	r3, [sp, #28]
 8009df4:	4b1d      	ldr	r3, [pc, #116]	; (8009e6c <_dtoa_r+0x6b8>)
 8009df6:	f7f6 fb99 	bl	800052c <__aeabi_dadd>
 8009dfa:	0002      	movs	r2, r0
 8009dfc:	000b      	movs	r3, r1
 8009dfe:	0020      	movs	r0, r4
 8009e00:	0029      	movs	r1, r5
 8009e02:	f7f6 fb43 	bl	800048c <__aeabi_dcmpgt>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d000      	beq.n	8009e0c <_dtoa_r+0x658>
 8009e0a:	e07f      	b.n	8009f0c <_dtoa_r+0x758>
 8009e0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e10:	2000      	movs	r0, #0
 8009e12:	4916      	ldr	r1, [pc, #88]	; (8009e6c <_dtoa_r+0x6b8>)
 8009e14:	f7f7 fd66 	bl	80018e4 <__aeabi_dsub>
 8009e18:	0002      	movs	r2, r0
 8009e1a:	000b      	movs	r3, r1
 8009e1c:	0020      	movs	r0, r4
 8009e1e:	0029      	movs	r1, r5
 8009e20:	f7f6 fb20 	bl	8000464 <__aeabi_dcmplt>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d100      	bne.n	8009e2a <_dtoa_r+0x676>
 8009e28:	e714      	b.n	8009c54 <_dtoa_r+0x4a0>
 8009e2a:	9b07      	ldr	r3, [sp, #28]
 8009e2c:	001a      	movs	r2, r3
 8009e2e:	3a01      	subs	r2, #1
 8009e30:	9207      	str	r2, [sp, #28]
 8009e32:	7812      	ldrb	r2, [r2, #0]
 8009e34:	2a30      	cmp	r2, #48	; 0x30
 8009e36:	d0f8      	beq.n	8009e2a <_dtoa_r+0x676>
 8009e38:	9307      	str	r3, [sp, #28]
 8009e3a:	9602      	str	r6, [sp, #8]
 8009e3c:	e054      	b.n	8009ee8 <_dtoa_r+0x734>
 8009e3e:	2200      	movs	r2, #0
 8009e40:	4b05      	ldr	r3, [pc, #20]	; (8009e58 <_dtoa_r+0x6a4>)
 8009e42:	f7f7 fae3 	bl	800140c <__aeabi_dmul>
 8009e46:	0004      	movs	r4, r0
 8009e48:	000d      	movs	r5, r1
 8009e4a:	e7b2      	b.n	8009db2 <_dtoa_r+0x5fe>
 8009e4c:	0800bf60 	.word	0x0800bf60
 8009e50:	0800bf38 	.word	0x0800bf38
 8009e54:	3ff00000 	.word	0x3ff00000
 8009e58:	40240000 	.word	0x40240000
 8009e5c:	401c0000 	.word	0x401c0000
 8009e60:	fcc00000 	.word	0xfcc00000
 8009e64:	40140000 	.word	0x40140000
 8009e68:	7cc00000 	.word	0x7cc00000
 8009e6c:	3fe00000 	.word	0x3fe00000
 8009e70:	9b06      	ldr	r3, [sp, #24]
 8009e72:	9e05      	ldr	r6, [sp, #20]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	199b      	adds	r3, r3, r6
 8009e78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009e7a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8009e7e:	9a08      	ldr	r2, [sp, #32]
 8009e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e82:	0020      	movs	r0, r4
 8009e84:	0029      	movs	r1, r5
 8009e86:	f7f6 febb 	bl	8000c00 <__aeabi_ddiv>
 8009e8a:	f7f8 f8db 	bl	8002044 <__aeabi_d2iz>
 8009e8e:	9006      	str	r0, [sp, #24]
 8009e90:	f7f8 f90e 	bl	80020b0 <__aeabi_i2d>
 8009e94:	9a08      	ldr	r2, [sp, #32]
 8009e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e98:	f7f7 fab8 	bl	800140c <__aeabi_dmul>
 8009e9c:	0002      	movs	r2, r0
 8009e9e:	000b      	movs	r3, r1
 8009ea0:	0020      	movs	r0, r4
 8009ea2:	0029      	movs	r1, r5
 8009ea4:	f7f7 fd1e 	bl	80018e4 <__aeabi_dsub>
 8009ea8:	0033      	movs	r3, r6
 8009eaa:	9a06      	ldr	r2, [sp, #24]
 8009eac:	3601      	adds	r6, #1
 8009eae:	3230      	adds	r2, #48	; 0x30
 8009eb0:	701a      	strb	r2, [r3, #0]
 8009eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eb4:	9607      	str	r6, [sp, #28]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d139      	bne.n	8009f2e <_dtoa_r+0x77a>
 8009eba:	0002      	movs	r2, r0
 8009ebc:	000b      	movs	r3, r1
 8009ebe:	f7f6 fb35 	bl	800052c <__aeabi_dadd>
 8009ec2:	9a08      	ldr	r2, [sp, #32]
 8009ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec6:	0004      	movs	r4, r0
 8009ec8:	000d      	movs	r5, r1
 8009eca:	f7f6 fadf 	bl	800048c <__aeabi_dcmpgt>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d11b      	bne.n	8009f0a <_dtoa_r+0x756>
 8009ed2:	9a08      	ldr	r2, [sp, #32]
 8009ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed6:	0020      	movs	r0, r4
 8009ed8:	0029      	movs	r1, r5
 8009eda:	f7f6 fabd 	bl	8000458 <__aeabi_dcmpeq>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d002      	beq.n	8009ee8 <_dtoa_r+0x734>
 8009ee2:	9b06      	ldr	r3, [sp, #24]
 8009ee4:	07db      	lsls	r3, r3, #31
 8009ee6:	d410      	bmi.n	8009f0a <_dtoa_r+0x756>
 8009ee8:	0038      	movs	r0, r7
 8009eea:	9904      	ldr	r1, [sp, #16]
 8009eec:	f000 faf4 	bl	800a4d8 <_Bfree>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	9a07      	ldr	r2, [sp, #28]
 8009ef4:	9802      	ldr	r0, [sp, #8]
 8009ef6:	7013      	strb	r3, [r2, #0]
 8009ef8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009efa:	3001      	adds	r0, #1
 8009efc:	6018      	str	r0, [r3, #0]
 8009efe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d100      	bne.n	8009f06 <_dtoa_r+0x752>
 8009f04:	e4a3      	b.n	800984e <_dtoa_r+0x9a>
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	e4a1      	b.n	800984e <_dtoa_r+0x9a>
 8009f0a:	9e02      	ldr	r6, [sp, #8]
 8009f0c:	9b07      	ldr	r3, [sp, #28]
 8009f0e:	9307      	str	r3, [sp, #28]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	781a      	ldrb	r2, [r3, #0]
 8009f14:	2a39      	cmp	r2, #57	; 0x39
 8009f16:	d106      	bne.n	8009f26 <_dtoa_r+0x772>
 8009f18:	9a05      	ldr	r2, [sp, #20]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d1f7      	bne.n	8009f0e <_dtoa_r+0x75a>
 8009f1e:	2230      	movs	r2, #48	; 0x30
 8009f20:	9905      	ldr	r1, [sp, #20]
 8009f22:	3601      	adds	r6, #1
 8009f24:	700a      	strb	r2, [r1, #0]
 8009f26:	781a      	ldrb	r2, [r3, #0]
 8009f28:	3201      	adds	r2, #1
 8009f2a:	701a      	strb	r2, [r3, #0]
 8009f2c:	e785      	b.n	8009e3a <_dtoa_r+0x686>
 8009f2e:	2200      	movs	r2, #0
 8009f30:	4bad      	ldr	r3, [pc, #692]	; (800a1e8 <_dtoa_r+0xa34>)
 8009f32:	f7f7 fa6b 	bl	800140c <__aeabi_dmul>
 8009f36:	2200      	movs	r2, #0
 8009f38:	2300      	movs	r3, #0
 8009f3a:	0004      	movs	r4, r0
 8009f3c:	000d      	movs	r5, r1
 8009f3e:	f7f6 fa8b 	bl	8000458 <__aeabi_dcmpeq>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d09b      	beq.n	8009e7e <_dtoa_r+0x6ca>
 8009f46:	e7cf      	b.n	8009ee8 <_dtoa_r+0x734>
 8009f48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f4a:	2a00      	cmp	r2, #0
 8009f4c:	d100      	bne.n	8009f50 <_dtoa_r+0x79c>
 8009f4e:	e082      	b.n	800a056 <_dtoa_r+0x8a2>
 8009f50:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f52:	2a01      	cmp	r2, #1
 8009f54:	dc66      	bgt.n	800a024 <_dtoa_r+0x870>
 8009f56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f58:	2a00      	cmp	r2, #0
 8009f5a:	d05f      	beq.n	800a01c <_dtoa_r+0x868>
 8009f5c:	4aa3      	ldr	r2, [pc, #652]	; (800a1ec <_dtoa_r+0xa38>)
 8009f5e:	189b      	adds	r3, r3, r2
 8009f60:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009f62:	9c08      	ldr	r4, [sp, #32]
 8009f64:	9a08      	ldr	r2, [sp, #32]
 8009f66:	2101      	movs	r1, #1
 8009f68:	18d2      	adds	r2, r2, r3
 8009f6a:	9208      	str	r2, [sp, #32]
 8009f6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f6e:	0038      	movs	r0, r7
 8009f70:	18d3      	adds	r3, r2, r3
 8009f72:	930d      	str	r3, [sp, #52]	; 0x34
 8009f74:	f000 fb60 	bl	800a638 <__i2b>
 8009f78:	0005      	movs	r5, r0
 8009f7a:	2c00      	cmp	r4, #0
 8009f7c:	dd0e      	ble.n	8009f9c <_dtoa_r+0x7e8>
 8009f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	dd0b      	ble.n	8009f9c <_dtoa_r+0x7e8>
 8009f84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f86:	0023      	movs	r3, r4
 8009f88:	4294      	cmp	r4, r2
 8009f8a:	dd00      	ble.n	8009f8e <_dtoa_r+0x7da>
 8009f8c:	0013      	movs	r3, r2
 8009f8e:	9a08      	ldr	r2, [sp, #32]
 8009f90:	1ae4      	subs	r4, r4, r3
 8009f92:	1ad2      	subs	r2, r2, r3
 8009f94:	9208      	str	r2, [sp, #32]
 8009f96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8009f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d01f      	beq.n	8009fe2 <_dtoa_r+0x82e>
 8009fa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d05a      	beq.n	800a05e <_dtoa_r+0x8aa>
 8009fa8:	2e00      	cmp	r6, #0
 8009faa:	dd11      	ble.n	8009fd0 <_dtoa_r+0x81c>
 8009fac:	0029      	movs	r1, r5
 8009fae:	0032      	movs	r2, r6
 8009fb0:	0038      	movs	r0, r7
 8009fb2:	f000 fc07 	bl	800a7c4 <__pow5mult>
 8009fb6:	9a04      	ldr	r2, [sp, #16]
 8009fb8:	0001      	movs	r1, r0
 8009fba:	0005      	movs	r5, r0
 8009fbc:	0038      	movs	r0, r7
 8009fbe:	f000 fb51 	bl	800a664 <__multiply>
 8009fc2:	9904      	ldr	r1, [sp, #16]
 8009fc4:	9007      	str	r0, [sp, #28]
 8009fc6:	0038      	movs	r0, r7
 8009fc8:	f000 fa86 	bl	800a4d8 <_Bfree>
 8009fcc:	9b07      	ldr	r3, [sp, #28]
 8009fce:	9304      	str	r3, [sp, #16]
 8009fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fd2:	1b9a      	subs	r2, r3, r6
 8009fd4:	42b3      	cmp	r3, r6
 8009fd6:	d004      	beq.n	8009fe2 <_dtoa_r+0x82e>
 8009fd8:	0038      	movs	r0, r7
 8009fda:	9904      	ldr	r1, [sp, #16]
 8009fdc:	f000 fbf2 	bl	800a7c4 <__pow5mult>
 8009fe0:	9004      	str	r0, [sp, #16]
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	0038      	movs	r0, r7
 8009fe6:	f000 fb27 	bl	800a638 <__i2b>
 8009fea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fec:	0006      	movs	r6, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	dd37      	ble.n	800a062 <_dtoa_r+0x8ae>
 8009ff2:	001a      	movs	r2, r3
 8009ff4:	0001      	movs	r1, r0
 8009ff6:	0038      	movs	r0, r7
 8009ff8:	f000 fbe4 	bl	800a7c4 <__pow5mult>
 8009ffc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ffe:	0006      	movs	r6, r0
 800a000:	2b01      	cmp	r3, #1
 800a002:	dd33      	ble.n	800a06c <_dtoa_r+0x8b8>
 800a004:	2300      	movs	r3, #0
 800a006:	9307      	str	r3, [sp, #28]
 800a008:	6933      	ldr	r3, [r6, #16]
 800a00a:	3303      	adds	r3, #3
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	18f3      	adds	r3, r6, r3
 800a010:	6858      	ldr	r0, [r3, #4]
 800a012:	f000 fac9 	bl	800a5a8 <__hi0bits>
 800a016:	2320      	movs	r3, #32
 800a018:	1a18      	subs	r0, r3, r0
 800a01a:	e03f      	b.n	800a09c <_dtoa_r+0x8e8>
 800a01c:	2336      	movs	r3, #54	; 0x36
 800a01e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a020:	1a9b      	subs	r3, r3, r2
 800a022:	e79d      	b.n	8009f60 <_dtoa_r+0x7ac>
 800a024:	9b06      	ldr	r3, [sp, #24]
 800a026:	1e5e      	subs	r6, r3, #1
 800a028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a02a:	42b3      	cmp	r3, r6
 800a02c:	db08      	blt.n	800a040 <_dtoa_r+0x88c>
 800a02e:	1b9e      	subs	r6, r3, r6
 800a030:	9b06      	ldr	r3, [sp, #24]
 800a032:	2b00      	cmp	r3, #0
 800a034:	da0c      	bge.n	800a050 <_dtoa_r+0x89c>
 800a036:	9b08      	ldr	r3, [sp, #32]
 800a038:	9a06      	ldr	r2, [sp, #24]
 800a03a:	1a9c      	subs	r4, r3, r2
 800a03c:	2300      	movs	r3, #0
 800a03e:	e791      	b.n	8009f64 <_dtoa_r+0x7b0>
 800a040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a042:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a044:	1af3      	subs	r3, r6, r3
 800a046:	18d3      	adds	r3, r2, r3
 800a048:	960e      	str	r6, [sp, #56]	; 0x38
 800a04a:	9314      	str	r3, [sp, #80]	; 0x50
 800a04c:	2600      	movs	r6, #0
 800a04e:	e7ef      	b.n	800a030 <_dtoa_r+0x87c>
 800a050:	9c08      	ldr	r4, [sp, #32]
 800a052:	9b06      	ldr	r3, [sp, #24]
 800a054:	e786      	b.n	8009f64 <_dtoa_r+0x7b0>
 800a056:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a058:	9c08      	ldr	r4, [sp, #32]
 800a05a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a05c:	e78d      	b.n	8009f7a <_dtoa_r+0x7c6>
 800a05e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a060:	e7ba      	b.n	8009fd8 <_dtoa_r+0x824>
 800a062:	2300      	movs	r3, #0
 800a064:	9307      	str	r3, [sp, #28]
 800a066:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a068:	2b01      	cmp	r3, #1
 800a06a:	dc13      	bgt.n	800a094 <_dtoa_r+0x8e0>
 800a06c:	2300      	movs	r3, #0
 800a06e:	9307      	str	r3, [sp, #28]
 800a070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10e      	bne.n	800a094 <_dtoa_r+0x8e0>
 800a076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a078:	031b      	lsls	r3, r3, #12
 800a07a:	d10b      	bne.n	800a094 <_dtoa_r+0x8e0>
 800a07c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a07e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a080:	4213      	tst	r3, r2
 800a082:	d007      	beq.n	800a094 <_dtoa_r+0x8e0>
 800a084:	9b08      	ldr	r3, [sp, #32]
 800a086:	3301      	adds	r3, #1
 800a088:	9308      	str	r3, [sp, #32]
 800a08a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a08c:	3301      	adds	r3, #1
 800a08e:	930d      	str	r3, [sp, #52]	; 0x34
 800a090:	2301      	movs	r3, #1
 800a092:	9307      	str	r3, [sp, #28]
 800a094:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a096:	2001      	movs	r0, #1
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d1b5      	bne.n	800a008 <_dtoa_r+0x854>
 800a09c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a09e:	221f      	movs	r2, #31
 800a0a0:	1818      	adds	r0, r3, r0
 800a0a2:	0003      	movs	r3, r0
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	4210      	tst	r0, r2
 800a0a8:	d046      	beq.n	800a138 <_dtoa_r+0x984>
 800a0aa:	3201      	adds	r2, #1
 800a0ac:	1ad2      	subs	r2, r2, r3
 800a0ae:	2a04      	cmp	r2, #4
 800a0b0:	dd3f      	ble.n	800a132 <_dtoa_r+0x97e>
 800a0b2:	221c      	movs	r2, #28
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	9a08      	ldr	r2, [sp, #32]
 800a0b8:	18e4      	adds	r4, r4, r3
 800a0ba:	18d2      	adds	r2, r2, r3
 800a0bc:	9208      	str	r2, [sp, #32]
 800a0be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0c0:	18d3      	adds	r3, r2, r3
 800a0c2:	930d      	str	r3, [sp, #52]	; 0x34
 800a0c4:	9b08      	ldr	r3, [sp, #32]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	dd05      	ble.n	800a0d6 <_dtoa_r+0x922>
 800a0ca:	001a      	movs	r2, r3
 800a0cc:	0038      	movs	r0, r7
 800a0ce:	9904      	ldr	r1, [sp, #16]
 800a0d0:	f000 fbd4 	bl	800a87c <__lshift>
 800a0d4:	9004      	str	r0, [sp, #16]
 800a0d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	dd05      	ble.n	800a0e8 <_dtoa_r+0x934>
 800a0dc:	0031      	movs	r1, r6
 800a0de:	001a      	movs	r2, r3
 800a0e0:	0038      	movs	r0, r7
 800a0e2:	f000 fbcb 	bl	800a87c <__lshift>
 800a0e6:	0006      	movs	r6, r0
 800a0e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d026      	beq.n	800a13c <_dtoa_r+0x988>
 800a0ee:	0031      	movs	r1, r6
 800a0f0:	9804      	ldr	r0, [sp, #16]
 800a0f2:	f000 fc33 	bl	800a95c <__mcmp>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	da20      	bge.n	800a13c <_dtoa_r+0x988>
 800a0fa:	9b02      	ldr	r3, [sp, #8]
 800a0fc:	220a      	movs	r2, #10
 800a0fe:	3b01      	subs	r3, #1
 800a100:	9302      	str	r3, [sp, #8]
 800a102:	0038      	movs	r0, r7
 800a104:	2300      	movs	r3, #0
 800a106:	9904      	ldr	r1, [sp, #16]
 800a108:	f000 fa0a 	bl	800a520 <__multadd>
 800a10c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a10e:	9004      	str	r0, [sp, #16]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d100      	bne.n	800a116 <_dtoa_r+0x962>
 800a114:	e160      	b.n	800a3d8 <_dtoa_r+0xc24>
 800a116:	2300      	movs	r3, #0
 800a118:	0029      	movs	r1, r5
 800a11a:	220a      	movs	r2, #10
 800a11c:	0038      	movs	r0, r7
 800a11e:	f000 f9ff 	bl	800a520 <__multadd>
 800a122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a124:	0005      	movs	r5, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	dc47      	bgt.n	800a1ba <_dtoa_r+0xa06>
 800a12a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	dc0d      	bgt.n	800a14c <_dtoa_r+0x998>
 800a130:	e043      	b.n	800a1ba <_dtoa_r+0xa06>
 800a132:	2a04      	cmp	r2, #4
 800a134:	d0c6      	beq.n	800a0c4 <_dtoa_r+0x910>
 800a136:	0013      	movs	r3, r2
 800a138:	331c      	adds	r3, #28
 800a13a:	e7bc      	b.n	800a0b6 <_dtoa_r+0x902>
 800a13c:	9b06      	ldr	r3, [sp, #24]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	dc35      	bgt.n	800a1ae <_dtoa_r+0x9fa>
 800a142:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a144:	2b02      	cmp	r3, #2
 800a146:	dd32      	ble.n	800a1ae <_dtoa_r+0x9fa>
 800a148:	9b06      	ldr	r3, [sp, #24]
 800a14a:	930c      	str	r3, [sp, #48]	; 0x30
 800a14c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10c      	bne.n	800a16c <_dtoa_r+0x9b8>
 800a152:	0031      	movs	r1, r6
 800a154:	2205      	movs	r2, #5
 800a156:	0038      	movs	r0, r7
 800a158:	f000 f9e2 	bl	800a520 <__multadd>
 800a15c:	0006      	movs	r6, r0
 800a15e:	0001      	movs	r1, r0
 800a160:	9804      	ldr	r0, [sp, #16]
 800a162:	f000 fbfb 	bl	800a95c <__mcmp>
 800a166:	2800      	cmp	r0, #0
 800a168:	dd00      	ble.n	800a16c <_dtoa_r+0x9b8>
 800a16a:	e59f      	b.n	8009cac <_dtoa_r+0x4f8>
 800a16c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a16e:	43db      	mvns	r3, r3
 800a170:	9302      	str	r3, [sp, #8]
 800a172:	9b05      	ldr	r3, [sp, #20]
 800a174:	9307      	str	r3, [sp, #28]
 800a176:	2400      	movs	r4, #0
 800a178:	0031      	movs	r1, r6
 800a17a:	0038      	movs	r0, r7
 800a17c:	f000 f9ac 	bl	800a4d8 <_Bfree>
 800a180:	2d00      	cmp	r5, #0
 800a182:	d100      	bne.n	800a186 <_dtoa_r+0x9d2>
 800a184:	e6b0      	b.n	8009ee8 <_dtoa_r+0x734>
 800a186:	2c00      	cmp	r4, #0
 800a188:	d005      	beq.n	800a196 <_dtoa_r+0x9e2>
 800a18a:	42ac      	cmp	r4, r5
 800a18c:	d003      	beq.n	800a196 <_dtoa_r+0x9e2>
 800a18e:	0021      	movs	r1, r4
 800a190:	0038      	movs	r0, r7
 800a192:	f000 f9a1 	bl	800a4d8 <_Bfree>
 800a196:	0029      	movs	r1, r5
 800a198:	0038      	movs	r0, r7
 800a19a:	f000 f99d 	bl	800a4d8 <_Bfree>
 800a19e:	e6a3      	b.n	8009ee8 <_dtoa_r+0x734>
 800a1a0:	2600      	movs	r6, #0
 800a1a2:	0035      	movs	r5, r6
 800a1a4:	e7e2      	b.n	800a16c <_dtoa_r+0x9b8>
 800a1a6:	9602      	str	r6, [sp, #8]
 800a1a8:	9e07      	ldr	r6, [sp, #28]
 800a1aa:	0035      	movs	r5, r6
 800a1ac:	e57e      	b.n	8009cac <_dtoa_r+0x4f8>
 800a1ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d100      	bne.n	800a1b6 <_dtoa_r+0xa02>
 800a1b4:	e0c8      	b.n	800a348 <_dtoa_r+0xb94>
 800a1b6:	9b06      	ldr	r3, [sp, #24]
 800a1b8:	930c      	str	r3, [sp, #48]	; 0x30
 800a1ba:	2c00      	cmp	r4, #0
 800a1bc:	dd05      	ble.n	800a1ca <_dtoa_r+0xa16>
 800a1be:	0029      	movs	r1, r5
 800a1c0:	0022      	movs	r2, r4
 800a1c2:	0038      	movs	r0, r7
 800a1c4:	f000 fb5a 	bl	800a87c <__lshift>
 800a1c8:	0005      	movs	r5, r0
 800a1ca:	9b07      	ldr	r3, [sp, #28]
 800a1cc:	0028      	movs	r0, r5
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01f      	beq.n	800a212 <_dtoa_r+0xa5e>
 800a1d2:	0038      	movs	r0, r7
 800a1d4:	6869      	ldr	r1, [r5, #4]
 800a1d6:	f000 f93b 	bl	800a450 <_Balloc>
 800a1da:	1e04      	subs	r4, r0, #0
 800a1dc:	d10c      	bne.n	800a1f8 <_dtoa_r+0xa44>
 800a1de:	0002      	movs	r2, r0
 800a1e0:	4b03      	ldr	r3, [pc, #12]	; (800a1f0 <_dtoa_r+0xa3c>)
 800a1e2:	4904      	ldr	r1, [pc, #16]	; (800a1f4 <_dtoa_r+0xa40>)
 800a1e4:	f7ff fafb 	bl	80097de <_dtoa_r+0x2a>
 800a1e8:	40240000 	.word	0x40240000
 800a1ec:	00000433 	.word	0x00000433
 800a1f0:	0800bec6 	.word	0x0800bec6
 800a1f4:	000002ea 	.word	0x000002ea
 800a1f8:	0029      	movs	r1, r5
 800a1fa:	692b      	ldr	r3, [r5, #16]
 800a1fc:	310c      	adds	r1, #12
 800a1fe:	1c9a      	adds	r2, r3, #2
 800a200:	0092      	lsls	r2, r2, #2
 800a202:	300c      	adds	r0, #12
 800a204:	f7fe fb70 	bl	80088e8 <memcpy>
 800a208:	2201      	movs	r2, #1
 800a20a:	0021      	movs	r1, r4
 800a20c:	0038      	movs	r0, r7
 800a20e:	f000 fb35 	bl	800a87c <__lshift>
 800a212:	002c      	movs	r4, r5
 800a214:	0005      	movs	r5, r0
 800a216:	9b05      	ldr	r3, [sp, #20]
 800a218:	9308      	str	r3, [sp, #32]
 800a21a:	0031      	movs	r1, r6
 800a21c:	9804      	ldr	r0, [sp, #16]
 800a21e:	f7ff fa3d 	bl	800969c <quorem>
 800a222:	0003      	movs	r3, r0
 800a224:	0021      	movs	r1, r4
 800a226:	3330      	adds	r3, #48	; 0x30
 800a228:	900e      	str	r0, [sp, #56]	; 0x38
 800a22a:	9804      	ldr	r0, [sp, #16]
 800a22c:	9306      	str	r3, [sp, #24]
 800a22e:	f000 fb95 	bl	800a95c <__mcmp>
 800a232:	002a      	movs	r2, r5
 800a234:	900f      	str	r0, [sp, #60]	; 0x3c
 800a236:	0031      	movs	r1, r6
 800a238:	0038      	movs	r0, r7
 800a23a:	f000 fbab 	bl	800a994 <__mdiff>
 800a23e:	68c3      	ldr	r3, [r0, #12]
 800a240:	9007      	str	r0, [sp, #28]
 800a242:	9310      	str	r3, [sp, #64]	; 0x40
 800a244:	2301      	movs	r3, #1
 800a246:	930d      	str	r3, [sp, #52]	; 0x34
 800a248:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d104      	bne.n	800a258 <_dtoa_r+0xaa4>
 800a24e:	0001      	movs	r1, r0
 800a250:	9804      	ldr	r0, [sp, #16]
 800a252:	f000 fb83 	bl	800a95c <__mcmp>
 800a256:	900d      	str	r0, [sp, #52]	; 0x34
 800a258:	0038      	movs	r0, r7
 800a25a:	9907      	ldr	r1, [sp, #28]
 800a25c:	f000 f93c 	bl	800a4d8 <_Bfree>
 800a260:	2301      	movs	r3, #1
 800a262:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a264:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a266:	4018      	ands	r0, r3
 800a268:	9b08      	ldr	r3, [sp, #32]
 800a26a:	3301      	adds	r3, #1
 800a26c:	9307      	str	r3, [sp, #28]
 800a26e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a270:	4313      	orrs	r3, r2
 800a272:	4303      	orrs	r3, r0
 800a274:	d10c      	bne.n	800a290 <_dtoa_r+0xadc>
 800a276:	9b06      	ldr	r3, [sp, #24]
 800a278:	2b39      	cmp	r3, #57	; 0x39
 800a27a:	d025      	beq.n	800a2c8 <_dtoa_r+0xb14>
 800a27c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	dd02      	ble.n	800a288 <_dtoa_r+0xad4>
 800a282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a284:	3331      	adds	r3, #49	; 0x31
 800a286:	9306      	str	r3, [sp, #24]
 800a288:	9b08      	ldr	r3, [sp, #32]
 800a28a:	9a06      	ldr	r2, [sp, #24]
 800a28c:	701a      	strb	r2, [r3, #0]
 800a28e:	e773      	b.n	800a178 <_dtoa_r+0x9c4>
 800a290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a292:	2b00      	cmp	r3, #0
 800a294:	db03      	blt.n	800a29e <_dtoa_r+0xaea>
 800a296:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a298:	4313      	orrs	r3, r2
 800a29a:	4303      	orrs	r3, r0
 800a29c:	d11f      	bne.n	800a2de <_dtoa_r+0xb2a>
 800a29e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	ddf1      	ble.n	800a288 <_dtoa_r+0xad4>
 800a2a4:	9904      	ldr	r1, [sp, #16]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	0038      	movs	r0, r7
 800a2aa:	f000 fae7 	bl	800a87c <__lshift>
 800a2ae:	0031      	movs	r1, r6
 800a2b0:	9004      	str	r0, [sp, #16]
 800a2b2:	f000 fb53 	bl	800a95c <__mcmp>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	dc03      	bgt.n	800a2c2 <_dtoa_r+0xb0e>
 800a2ba:	d1e5      	bne.n	800a288 <_dtoa_r+0xad4>
 800a2bc:	9b06      	ldr	r3, [sp, #24]
 800a2be:	07db      	lsls	r3, r3, #31
 800a2c0:	d5e2      	bpl.n	800a288 <_dtoa_r+0xad4>
 800a2c2:	9b06      	ldr	r3, [sp, #24]
 800a2c4:	2b39      	cmp	r3, #57	; 0x39
 800a2c6:	d1dc      	bne.n	800a282 <_dtoa_r+0xace>
 800a2c8:	2339      	movs	r3, #57	; 0x39
 800a2ca:	9a08      	ldr	r2, [sp, #32]
 800a2cc:	7013      	strb	r3, [r2, #0]
 800a2ce:	9b07      	ldr	r3, [sp, #28]
 800a2d0:	9307      	str	r3, [sp, #28]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	781a      	ldrb	r2, [r3, #0]
 800a2d6:	2a39      	cmp	r2, #57	; 0x39
 800a2d8:	d06c      	beq.n	800a3b4 <_dtoa_r+0xc00>
 800a2da:	3201      	adds	r2, #1
 800a2dc:	e7d6      	b.n	800a28c <_dtoa_r+0xad8>
 800a2de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	dd07      	ble.n	800a2f4 <_dtoa_r+0xb40>
 800a2e4:	9b06      	ldr	r3, [sp, #24]
 800a2e6:	2b39      	cmp	r3, #57	; 0x39
 800a2e8:	d0ee      	beq.n	800a2c8 <_dtoa_r+0xb14>
 800a2ea:	9b06      	ldr	r3, [sp, #24]
 800a2ec:	9a08      	ldr	r2, [sp, #32]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	7013      	strb	r3, [r2, #0]
 800a2f2:	e741      	b.n	800a178 <_dtoa_r+0x9c4>
 800a2f4:	9b08      	ldr	r3, [sp, #32]
 800a2f6:	9a06      	ldr	r2, [sp, #24]
 800a2f8:	701a      	strb	r2, [r3, #0]
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	9a05      	ldr	r2, [sp, #20]
 800a2fe:	1a9b      	subs	r3, r3, r2
 800a300:	9a08      	ldr	r2, [sp, #32]
 800a302:	189b      	adds	r3, r3, r2
 800a304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a306:	429a      	cmp	r2, r3
 800a308:	d03e      	beq.n	800a388 <_dtoa_r+0xbd4>
 800a30a:	2300      	movs	r3, #0
 800a30c:	220a      	movs	r2, #10
 800a30e:	9904      	ldr	r1, [sp, #16]
 800a310:	0038      	movs	r0, r7
 800a312:	f000 f905 	bl	800a520 <__multadd>
 800a316:	2300      	movs	r3, #0
 800a318:	9004      	str	r0, [sp, #16]
 800a31a:	220a      	movs	r2, #10
 800a31c:	0021      	movs	r1, r4
 800a31e:	0038      	movs	r0, r7
 800a320:	42ac      	cmp	r4, r5
 800a322:	d106      	bne.n	800a332 <_dtoa_r+0xb7e>
 800a324:	f000 f8fc 	bl	800a520 <__multadd>
 800a328:	0004      	movs	r4, r0
 800a32a:	0005      	movs	r5, r0
 800a32c:	9b07      	ldr	r3, [sp, #28]
 800a32e:	9308      	str	r3, [sp, #32]
 800a330:	e773      	b.n	800a21a <_dtoa_r+0xa66>
 800a332:	f000 f8f5 	bl	800a520 <__multadd>
 800a336:	0029      	movs	r1, r5
 800a338:	0004      	movs	r4, r0
 800a33a:	2300      	movs	r3, #0
 800a33c:	220a      	movs	r2, #10
 800a33e:	0038      	movs	r0, r7
 800a340:	f000 f8ee 	bl	800a520 <__multadd>
 800a344:	0005      	movs	r5, r0
 800a346:	e7f1      	b.n	800a32c <_dtoa_r+0xb78>
 800a348:	9b06      	ldr	r3, [sp, #24]
 800a34a:	930c      	str	r3, [sp, #48]	; 0x30
 800a34c:	2400      	movs	r4, #0
 800a34e:	0031      	movs	r1, r6
 800a350:	9804      	ldr	r0, [sp, #16]
 800a352:	f7ff f9a3 	bl	800969c <quorem>
 800a356:	9b05      	ldr	r3, [sp, #20]
 800a358:	3030      	adds	r0, #48	; 0x30
 800a35a:	5518      	strb	r0, [r3, r4]
 800a35c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a35e:	3401      	adds	r4, #1
 800a360:	9006      	str	r0, [sp, #24]
 800a362:	42a3      	cmp	r3, r4
 800a364:	dd07      	ble.n	800a376 <_dtoa_r+0xbc2>
 800a366:	2300      	movs	r3, #0
 800a368:	220a      	movs	r2, #10
 800a36a:	0038      	movs	r0, r7
 800a36c:	9904      	ldr	r1, [sp, #16]
 800a36e:	f000 f8d7 	bl	800a520 <__multadd>
 800a372:	9004      	str	r0, [sp, #16]
 800a374:	e7eb      	b.n	800a34e <_dtoa_r+0xb9a>
 800a376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a378:	2001      	movs	r0, #1
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	dd00      	ble.n	800a380 <_dtoa_r+0xbcc>
 800a37e:	0018      	movs	r0, r3
 800a380:	2400      	movs	r4, #0
 800a382:	9b05      	ldr	r3, [sp, #20]
 800a384:	181b      	adds	r3, r3, r0
 800a386:	9307      	str	r3, [sp, #28]
 800a388:	9904      	ldr	r1, [sp, #16]
 800a38a:	2201      	movs	r2, #1
 800a38c:	0038      	movs	r0, r7
 800a38e:	f000 fa75 	bl	800a87c <__lshift>
 800a392:	0031      	movs	r1, r6
 800a394:	9004      	str	r0, [sp, #16]
 800a396:	f000 fae1 	bl	800a95c <__mcmp>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	dc97      	bgt.n	800a2ce <_dtoa_r+0xb1a>
 800a39e:	d102      	bne.n	800a3a6 <_dtoa_r+0xbf2>
 800a3a0:	9b06      	ldr	r3, [sp, #24]
 800a3a2:	07db      	lsls	r3, r3, #31
 800a3a4:	d493      	bmi.n	800a2ce <_dtoa_r+0xb1a>
 800a3a6:	9b07      	ldr	r3, [sp, #28]
 800a3a8:	9307      	str	r3, [sp, #28]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	781a      	ldrb	r2, [r3, #0]
 800a3ae:	2a30      	cmp	r2, #48	; 0x30
 800a3b0:	d0fa      	beq.n	800a3a8 <_dtoa_r+0xbf4>
 800a3b2:	e6e1      	b.n	800a178 <_dtoa_r+0x9c4>
 800a3b4:	9a05      	ldr	r2, [sp, #20]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d18a      	bne.n	800a2d0 <_dtoa_r+0xb1c>
 800a3ba:	9b02      	ldr	r3, [sp, #8]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	9302      	str	r3, [sp, #8]
 800a3c0:	2331      	movs	r3, #49	; 0x31
 800a3c2:	e795      	b.n	800a2f0 <_dtoa_r+0xb3c>
 800a3c4:	4b08      	ldr	r3, [pc, #32]	; (800a3e8 <_dtoa_r+0xc34>)
 800a3c6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a3c8:	9305      	str	r3, [sp, #20]
 800a3ca:	4b08      	ldr	r3, [pc, #32]	; (800a3ec <_dtoa_r+0xc38>)
 800a3cc:	2a00      	cmp	r2, #0
 800a3ce:	d001      	beq.n	800a3d4 <_dtoa_r+0xc20>
 800a3d0:	f7ff fa3b 	bl	800984a <_dtoa_r+0x96>
 800a3d4:	f7ff fa3b 	bl	800984e <_dtoa_r+0x9a>
 800a3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	dcb6      	bgt.n	800a34c <_dtoa_r+0xb98>
 800a3de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	dd00      	ble.n	800a3e6 <_dtoa_r+0xc32>
 800a3e4:	e6b2      	b.n	800a14c <_dtoa_r+0x998>
 800a3e6:	e7b1      	b.n	800a34c <_dtoa_r+0xb98>
 800a3e8:	0800be5a 	.word	0x0800be5a
 800a3ec:	0800be62 	.word	0x0800be62

0800a3f0 <fiprintf>:
 800a3f0:	b40e      	push	{r1, r2, r3}
 800a3f2:	b503      	push	{r0, r1, lr}
 800a3f4:	0001      	movs	r1, r0
 800a3f6:	ab03      	add	r3, sp, #12
 800a3f8:	4804      	ldr	r0, [pc, #16]	; (800a40c <fiprintf+0x1c>)
 800a3fa:	cb04      	ldmia	r3!, {r2}
 800a3fc:	6800      	ldr	r0, [r0, #0]
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	f000 fd5c 	bl	800aebc <_vfiprintf_r>
 800a404:	b002      	add	sp, #8
 800a406:	bc08      	pop	{r3}
 800a408:	b003      	add	sp, #12
 800a40a:	4718      	bx	r3
 800a40c:	20000010 	.word	0x20000010

0800a410 <_localeconv_r>:
 800a410:	4800      	ldr	r0, [pc, #0]	; (800a414 <_localeconv_r+0x4>)
 800a412:	4770      	bx	lr
 800a414:	20000164 	.word	0x20000164

0800a418 <memchr>:
 800a418:	b2c9      	uxtb	r1, r1
 800a41a:	1882      	adds	r2, r0, r2
 800a41c:	4290      	cmp	r0, r2
 800a41e:	d101      	bne.n	800a424 <memchr+0xc>
 800a420:	2000      	movs	r0, #0
 800a422:	4770      	bx	lr
 800a424:	7803      	ldrb	r3, [r0, #0]
 800a426:	428b      	cmp	r3, r1
 800a428:	d0fb      	beq.n	800a422 <memchr+0xa>
 800a42a:	3001      	adds	r0, #1
 800a42c:	e7f6      	b.n	800a41c <memchr+0x4>
	...

0800a430 <__malloc_lock>:
 800a430:	b510      	push	{r4, lr}
 800a432:	4802      	ldr	r0, [pc, #8]	; (800a43c <__malloc_lock+0xc>)
 800a434:	f001 f921 	bl	800b67a <__retarget_lock_acquire_recursive>
 800a438:	bd10      	pop	{r4, pc}
 800a43a:	46c0      	nop			; (mov r8, r8)
 800a43c:	200005ac 	.word	0x200005ac

0800a440 <__malloc_unlock>:
 800a440:	b510      	push	{r4, lr}
 800a442:	4802      	ldr	r0, [pc, #8]	; (800a44c <__malloc_unlock+0xc>)
 800a444:	f001 f91a 	bl	800b67c <__retarget_lock_release_recursive>
 800a448:	bd10      	pop	{r4, pc}
 800a44a:	46c0      	nop			; (mov r8, r8)
 800a44c:	200005ac 	.word	0x200005ac

0800a450 <_Balloc>:
 800a450:	b570      	push	{r4, r5, r6, lr}
 800a452:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a454:	0006      	movs	r6, r0
 800a456:	000c      	movs	r4, r1
 800a458:	2d00      	cmp	r5, #0
 800a45a:	d10e      	bne.n	800a47a <_Balloc+0x2a>
 800a45c:	2010      	movs	r0, #16
 800a45e:	f7fe fa2f 	bl	80088c0 <malloc>
 800a462:	1e02      	subs	r2, r0, #0
 800a464:	6270      	str	r0, [r6, #36]	; 0x24
 800a466:	d104      	bne.n	800a472 <_Balloc+0x22>
 800a468:	2166      	movs	r1, #102	; 0x66
 800a46a:	4b19      	ldr	r3, [pc, #100]	; (800a4d0 <_Balloc+0x80>)
 800a46c:	4819      	ldr	r0, [pc, #100]	; (800a4d4 <_Balloc+0x84>)
 800a46e:	f7ff f8f7 	bl	8009660 <__assert_func>
 800a472:	6045      	str	r5, [r0, #4]
 800a474:	6085      	str	r5, [r0, #8]
 800a476:	6005      	str	r5, [r0, #0]
 800a478:	60c5      	str	r5, [r0, #12]
 800a47a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800a47c:	68eb      	ldr	r3, [r5, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d013      	beq.n	800a4aa <_Balloc+0x5a>
 800a482:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a484:	00a2      	lsls	r2, r4, #2
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	189b      	adds	r3, r3, r2
 800a48a:	6818      	ldr	r0, [r3, #0]
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d118      	bne.n	800a4c2 <_Balloc+0x72>
 800a490:	2101      	movs	r1, #1
 800a492:	000d      	movs	r5, r1
 800a494:	40a5      	lsls	r5, r4
 800a496:	1d6a      	adds	r2, r5, #5
 800a498:	0030      	movs	r0, r6
 800a49a:	0092      	lsls	r2, r2, #2
 800a49c:	f000 fb76 	bl	800ab8c <_calloc_r>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d00c      	beq.n	800a4be <_Balloc+0x6e>
 800a4a4:	6044      	str	r4, [r0, #4]
 800a4a6:	6085      	str	r5, [r0, #8]
 800a4a8:	e00d      	b.n	800a4c6 <_Balloc+0x76>
 800a4aa:	2221      	movs	r2, #33	; 0x21
 800a4ac:	2104      	movs	r1, #4
 800a4ae:	0030      	movs	r0, r6
 800a4b0:	f000 fb6c 	bl	800ab8c <_calloc_r>
 800a4b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a4b6:	60e8      	str	r0, [r5, #12]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1e1      	bne.n	800a482 <_Balloc+0x32>
 800a4be:	2000      	movs	r0, #0
 800a4c0:	bd70      	pop	{r4, r5, r6, pc}
 800a4c2:	6802      	ldr	r2, [r0, #0]
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	6103      	str	r3, [r0, #16]
 800a4ca:	60c3      	str	r3, [r0, #12]
 800a4cc:	e7f8      	b.n	800a4c0 <_Balloc+0x70>
 800a4ce:	46c0      	nop			; (mov r8, r8)
 800a4d0:	0800bc80 	.word	0x0800bc80
 800a4d4:	0800bed7 	.word	0x0800bed7

0800a4d8 <_Bfree>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4dc:	0005      	movs	r5, r0
 800a4de:	000c      	movs	r4, r1
 800a4e0:	2e00      	cmp	r6, #0
 800a4e2:	d10e      	bne.n	800a502 <_Bfree+0x2a>
 800a4e4:	2010      	movs	r0, #16
 800a4e6:	f7fe f9eb 	bl	80088c0 <malloc>
 800a4ea:	1e02      	subs	r2, r0, #0
 800a4ec:	6268      	str	r0, [r5, #36]	; 0x24
 800a4ee:	d104      	bne.n	800a4fa <_Bfree+0x22>
 800a4f0:	218a      	movs	r1, #138	; 0x8a
 800a4f2:	4b09      	ldr	r3, [pc, #36]	; (800a518 <_Bfree+0x40>)
 800a4f4:	4809      	ldr	r0, [pc, #36]	; (800a51c <_Bfree+0x44>)
 800a4f6:	f7ff f8b3 	bl	8009660 <__assert_func>
 800a4fa:	6046      	str	r6, [r0, #4]
 800a4fc:	6086      	str	r6, [r0, #8]
 800a4fe:	6006      	str	r6, [r0, #0]
 800a500:	60c6      	str	r6, [r0, #12]
 800a502:	2c00      	cmp	r4, #0
 800a504:	d007      	beq.n	800a516 <_Bfree+0x3e>
 800a506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a508:	6862      	ldr	r2, [r4, #4]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	0092      	lsls	r2, r2, #2
 800a50e:	189b      	adds	r3, r3, r2
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	6022      	str	r2, [r4, #0]
 800a514:	601c      	str	r4, [r3, #0]
 800a516:	bd70      	pop	{r4, r5, r6, pc}
 800a518:	0800bc80 	.word	0x0800bc80
 800a51c:	0800bed7 	.word	0x0800bed7

0800a520 <__multadd>:
 800a520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a522:	000e      	movs	r6, r1
 800a524:	9001      	str	r0, [sp, #4]
 800a526:	000c      	movs	r4, r1
 800a528:	001d      	movs	r5, r3
 800a52a:	2000      	movs	r0, #0
 800a52c:	690f      	ldr	r7, [r1, #16]
 800a52e:	3614      	adds	r6, #20
 800a530:	6833      	ldr	r3, [r6, #0]
 800a532:	3001      	adds	r0, #1
 800a534:	b299      	uxth	r1, r3
 800a536:	4351      	muls	r1, r2
 800a538:	0c1b      	lsrs	r3, r3, #16
 800a53a:	4353      	muls	r3, r2
 800a53c:	1949      	adds	r1, r1, r5
 800a53e:	0c0d      	lsrs	r5, r1, #16
 800a540:	195b      	adds	r3, r3, r5
 800a542:	0c1d      	lsrs	r5, r3, #16
 800a544:	b289      	uxth	r1, r1
 800a546:	041b      	lsls	r3, r3, #16
 800a548:	185b      	adds	r3, r3, r1
 800a54a:	c608      	stmia	r6!, {r3}
 800a54c:	4287      	cmp	r7, r0
 800a54e:	dcef      	bgt.n	800a530 <__multadd+0x10>
 800a550:	2d00      	cmp	r5, #0
 800a552:	d022      	beq.n	800a59a <__multadd+0x7a>
 800a554:	68a3      	ldr	r3, [r4, #8]
 800a556:	42bb      	cmp	r3, r7
 800a558:	dc19      	bgt.n	800a58e <__multadd+0x6e>
 800a55a:	6863      	ldr	r3, [r4, #4]
 800a55c:	9801      	ldr	r0, [sp, #4]
 800a55e:	1c59      	adds	r1, r3, #1
 800a560:	f7ff ff76 	bl	800a450 <_Balloc>
 800a564:	1e06      	subs	r6, r0, #0
 800a566:	d105      	bne.n	800a574 <__multadd+0x54>
 800a568:	0002      	movs	r2, r0
 800a56a:	21b5      	movs	r1, #181	; 0xb5
 800a56c:	4b0c      	ldr	r3, [pc, #48]	; (800a5a0 <__multadd+0x80>)
 800a56e:	480d      	ldr	r0, [pc, #52]	; (800a5a4 <__multadd+0x84>)
 800a570:	f7ff f876 	bl	8009660 <__assert_func>
 800a574:	0021      	movs	r1, r4
 800a576:	6923      	ldr	r3, [r4, #16]
 800a578:	310c      	adds	r1, #12
 800a57a:	1c9a      	adds	r2, r3, #2
 800a57c:	0092      	lsls	r2, r2, #2
 800a57e:	300c      	adds	r0, #12
 800a580:	f7fe f9b2 	bl	80088e8 <memcpy>
 800a584:	0021      	movs	r1, r4
 800a586:	9801      	ldr	r0, [sp, #4]
 800a588:	f7ff ffa6 	bl	800a4d8 <_Bfree>
 800a58c:	0034      	movs	r4, r6
 800a58e:	1d3b      	adds	r3, r7, #4
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	18e3      	adds	r3, r4, r3
 800a594:	605d      	str	r5, [r3, #4]
 800a596:	1c7b      	adds	r3, r7, #1
 800a598:	6123      	str	r3, [r4, #16]
 800a59a:	0020      	movs	r0, r4
 800a59c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a59e:	46c0      	nop			; (mov r8, r8)
 800a5a0:	0800bec6 	.word	0x0800bec6
 800a5a4:	0800bed7 	.word	0x0800bed7

0800a5a8 <__hi0bits>:
 800a5a8:	0003      	movs	r3, r0
 800a5aa:	0c02      	lsrs	r2, r0, #16
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	4282      	cmp	r2, r0
 800a5b0:	d101      	bne.n	800a5b6 <__hi0bits+0xe>
 800a5b2:	041b      	lsls	r3, r3, #16
 800a5b4:	3010      	adds	r0, #16
 800a5b6:	0e1a      	lsrs	r2, r3, #24
 800a5b8:	d101      	bne.n	800a5be <__hi0bits+0x16>
 800a5ba:	3008      	adds	r0, #8
 800a5bc:	021b      	lsls	r3, r3, #8
 800a5be:	0f1a      	lsrs	r2, r3, #28
 800a5c0:	d101      	bne.n	800a5c6 <__hi0bits+0x1e>
 800a5c2:	3004      	adds	r0, #4
 800a5c4:	011b      	lsls	r3, r3, #4
 800a5c6:	0f9a      	lsrs	r2, r3, #30
 800a5c8:	d101      	bne.n	800a5ce <__hi0bits+0x26>
 800a5ca:	3002      	adds	r0, #2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	db03      	blt.n	800a5da <__hi0bits+0x32>
 800a5d2:	3001      	adds	r0, #1
 800a5d4:	005b      	lsls	r3, r3, #1
 800a5d6:	d400      	bmi.n	800a5da <__hi0bits+0x32>
 800a5d8:	2020      	movs	r0, #32
 800a5da:	4770      	bx	lr

0800a5dc <__lo0bits>:
 800a5dc:	6803      	ldr	r3, [r0, #0]
 800a5de:	0002      	movs	r2, r0
 800a5e0:	2107      	movs	r1, #7
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	4008      	ands	r0, r1
 800a5e6:	420b      	tst	r3, r1
 800a5e8:	d00d      	beq.n	800a606 <__lo0bits+0x2a>
 800a5ea:	3906      	subs	r1, #6
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	420b      	tst	r3, r1
 800a5f0:	d105      	bne.n	800a5fe <__lo0bits+0x22>
 800a5f2:	3002      	adds	r0, #2
 800a5f4:	4203      	tst	r3, r0
 800a5f6:	d003      	beq.n	800a600 <__lo0bits+0x24>
 800a5f8:	40cb      	lsrs	r3, r1
 800a5fa:	0008      	movs	r0, r1
 800a5fc:	6013      	str	r3, [r2, #0]
 800a5fe:	4770      	bx	lr
 800a600:	089b      	lsrs	r3, r3, #2
 800a602:	6013      	str	r3, [r2, #0]
 800a604:	e7fb      	b.n	800a5fe <__lo0bits+0x22>
 800a606:	b299      	uxth	r1, r3
 800a608:	2900      	cmp	r1, #0
 800a60a:	d101      	bne.n	800a610 <__lo0bits+0x34>
 800a60c:	2010      	movs	r0, #16
 800a60e:	0c1b      	lsrs	r3, r3, #16
 800a610:	b2d9      	uxtb	r1, r3
 800a612:	2900      	cmp	r1, #0
 800a614:	d101      	bne.n	800a61a <__lo0bits+0x3e>
 800a616:	3008      	adds	r0, #8
 800a618:	0a1b      	lsrs	r3, r3, #8
 800a61a:	0719      	lsls	r1, r3, #28
 800a61c:	d101      	bne.n	800a622 <__lo0bits+0x46>
 800a61e:	3004      	adds	r0, #4
 800a620:	091b      	lsrs	r3, r3, #4
 800a622:	0799      	lsls	r1, r3, #30
 800a624:	d101      	bne.n	800a62a <__lo0bits+0x4e>
 800a626:	3002      	adds	r0, #2
 800a628:	089b      	lsrs	r3, r3, #2
 800a62a:	07d9      	lsls	r1, r3, #31
 800a62c:	d4e9      	bmi.n	800a602 <__lo0bits+0x26>
 800a62e:	3001      	adds	r0, #1
 800a630:	085b      	lsrs	r3, r3, #1
 800a632:	d1e6      	bne.n	800a602 <__lo0bits+0x26>
 800a634:	2020      	movs	r0, #32
 800a636:	e7e2      	b.n	800a5fe <__lo0bits+0x22>

0800a638 <__i2b>:
 800a638:	b510      	push	{r4, lr}
 800a63a:	000c      	movs	r4, r1
 800a63c:	2101      	movs	r1, #1
 800a63e:	f7ff ff07 	bl	800a450 <_Balloc>
 800a642:	2800      	cmp	r0, #0
 800a644:	d106      	bne.n	800a654 <__i2b+0x1c>
 800a646:	21a0      	movs	r1, #160	; 0xa0
 800a648:	0002      	movs	r2, r0
 800a64a:	4b04      	ldr	r3, [pc, #16]	; (800a65c <__i2b+0x24>)
 800a64c:	4804      	ldr	r0, [pc, #16]	; (800a660 <__i2b+0x28>)
 800a64e:	0049      	lsls	r1, r1, #1
 800a650:	f7ff f806 	bl	8009660 <__assert_func>
 800a654:	2301      	movs	r3, #1
 800a656:	6144      	str	r4, [r0, #20]
 800a658:	6103      	str	r3, [r0, #16]
 800a65a:	bd10      	pop	{r4, pc}
 800a65c:	0800bec6 	.word	0x0800bec6
 800a660:	0800bed7 	.word	0x0800bed7

0800a664 <__multiply>:
 800a664:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a666:	690b      	ldr	r3, [r1, #16]
 800a668:	0014      	movs	r4, r2
 800a66a:	6912      	ldr	r2, [r2, #16]
 800a66c:	000d      	movs	r5, r1
 800a66e:	b089      	sub	sp, #36	; 0x24
 800a670:	4293      	cmp	r3, r2
 800a672:	da01      	bge.n	800a678 <__multiply+0x14>
 800a674:	0025      	movs	r5, r4
 800a676:	000c      	movs	r4, r1
 800a678:	692f      	ldr	r7, [r5, #16]
 800a67a:	6926      	ldr	r6, [r4, #16]
 800a67c:	6869      	ldr	r1, [r5, #4]
 800a67e:	19bb      	adds	r3, r7, r6
 800a680:	9302      	str	r3, [sp, #8]
 800a682:	68ab      	ldr	r3, [r5, #8]
 800a684:	19ba      	adds	r2, r7, r6
 800a686:	4293      	cmp	r3, r2
 800a688:	da00      	bge.n	800a68c <__multiply+0x28>
 800a68a:	3101      	adds	r1, #1
 800a68c:	f7ff fee0 	bl	800a450 <_Balloc>
 800a690:	9001      	str	r0, [sp, #4]
 800a692:	2800      	cmp	r0, #0
 800a694:	d106      	bne.n	800a6a4 <__multiply+0x40>
 800a696:	215e      	movs	r1, #94	; 0x5e
 800a698:	0002      	movs	r2, r0
 800a69a:	4b48      	ldr	r3, [pc, #288]	; (800a7bc <__multiply+0x158>)
 800a69c:	4848      	ldr	r0, [pc, #288]	; (800a7c0 <__multiply+0x15c>)
 800a69e:	31ff      	adds	r1, #255	; 0xff
 800a6a0:	f7fe ffde 	bl	8009660 <__assert_func>
 800a6a4:	9b01      	ldr	r3, [sp, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	3314      	adds	r3, #20
 800a6aa:	469c      	mov	ip, r3
 800a6ac:	19bb      	adds	r3, r7, r6
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	4463      	add	r3, ip
 800a6b2:	9303      	str	r3, [sp, #12]
 800a6b4:	4663      	mov	r3, ip
 800a6b6:	9903      	ldr	r1, [sp, #12]
 800a6b8:	428b      	cmp	r3, r1
 800a6ba:	d32c      	bcc.n	800a716 <__multiply+0xb2>
 800a6bc:	002b      	movs	r3, r5
 800a6be:	0022      	movs	r2, r4
 800a6c0:	3314      	adds	r3, #20
 800a6c2:	00bf      	lsls	r7, r7, #2
 800a6c4:	3214      	adds	r2, #20
 800a6c6:	9306      	str	r3, [sp, #24]
 800a6c8:	00b6      	lsls	r6, r6, #2
 800a6ca:	19db      	adds	r3, r3, r7
 800a6cc:	9304      	str	r3, [sp, #16]
 800a6ce:	1993      	adds	r3, r2, r6
 800a6d0:	9307      	str	r3, [sp, #28]
 800a6d2:	2304      	movs	r3, #4
 800a6d4:	9305      	str	r3, [sp, #20]
 800a6d6:	002b      	movs	r3, r5
 800a6d8:	9904      	ldr	r1, [sp, #16]
 800a6da:	3315      	adds	r3, #21
 800a6dc:	9200      	str	r2, [sp, #0]
 800a6de:	4299      	cmp	r1, r3
 800a6e0:	d305      	bcc.n	800a6ee <__multiply+0x8a>
 800a6e2:	1b4b      	subs	r3, r1, r5
 800a6e4:	3b15      	subs	r3, #21
 800a6e6:	089b      	lsrs	r3, r3, #2
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	9305      	str	r3, [sp, #20]
 800a6ee:	9b07      	ldr	r3, [sp, #28]
 800a6f0:	9a00      	ldr	r2, [sp, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d311      	bcc.n	800a71a <__multiply+0xb6>
 800a6f6:	9b02      	ldr	r3, [sp, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	dd06      	ble.n	800a70a <__multiply+0xa6>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	3b04      	subs	r3, #4
 800a700:	9303      	str	r3, [sp, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d054      	beq.n	800a7b4 <__multiply+0x150>
 800a70a:	9b01      	ldr	r3, [sp, #4]
 800a70c:	9a02      	ldr	r2, [sp, #8]
 800a70e:	0018      	movs	r0, r3
 800a710:	611a      	str	r2, [r3, #16]
 800a712:	b009      	add	sp, #36	; 0x24
 800a714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a716:	c304      	stmia	r3!, {r2}
 800a718:	e7cd      	b.n	800a6b6 <__multiply+0x52>
 800a71a:	9b00      	ldr	r3, [sp, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	b298      	uxth	r0, r3
 800a720:	2800      	cmp	r0, #0
 800a722:	d01c      	beq.n	800a75e <__multiply+0xfa>
 800a724:	4667      	mov	r7, ip
 800a726:	2400      	movs	r4, #0
 800a728:	9e06      	ldr	r6, [sp, #24]
 800a72a:	ce02      	ldmia	r6!, {r1}
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	b28b      	uxth	r3, r1
 800a730:	4343      	muls	r3, r0
 800a732:	0c09      	lsrs	r1, r1, #16
 800a734:	4341      	muls	r1, r0
 800a736:	b292      	uxth	r2, r2
 800a738:	189b      	adds	r3, r3, r2
 800a73a:	191b      	adds	r3, r3, r4
 800a73c:	000c      	movs	r4, r1
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	0c11      	lsrs	r1, r2, #16
 800a742:	1861      	adds	r1, r4, r1
 800a744:	0c1c      	lsrs	r4, r3, #16
 800a746:	1909      	adds	r1, r1, r4
 800a748:	0c0c      	lsrs	r4, r1, #16
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	0409      	lsls	r1, r1, #16
 800a74e:	430b      	orrs	r3, r1
 800a750:	c708      	stmia	r7!, {r3}
 800a752:	9b04      	ldr	r3, [sp, #16]
 800a754:	42b3      	cmp	r3, r6
 800a756:	d8e8      	bhi.n	800a72a <__multiply+0xc6>
 800a758:	4663      	mov	r3, ip
 800a75a:	9a05      	ldr	r2, [sp, #20]
 800a75c:	509c      	str	r4, [r3, r2]
 800a75e:	9b00      	ldr	r3, [sp, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	0c1e      	lsrs	r6, r3, #16
 800a764:	d020      	beq.n	800a7a8 <__multiply+0x144>
 800a766:	4663      	mov	r3, ip
 800a768:	002c      	movs	r4, r5
 800a76a:	4660      	mov	r0, ip
 800a76c:	2700      	movs	r7, #0
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3414      	adds	r4, #20
 800a772:	6822      	ldr	r2, [r4, #0]
 800a774:	b29b      	uxth	r3, r3
 800a776:	b291      	uxth	r1, r2
 800a778:	4371      	muls	r1, r6
 800a77a:	6802      	ldr	r2, [r0, #0]
 800a77c:	0c12      	lsrs	r2, r2, #16
 800a77e:	1889      	adds	r1, r1, r2
 800a780:	19cf      	adds	r7, r1, r7
 800a782:	0439      	lsls	r1, r7, #16
 800a784:	430b      	orrs	r3, r1
 800a786:	6003      	str	r3, [r0, #0]
 800a788:	cc02      	ldmia	r4!, {r1}
 800a78a:	6843      	ldr	r3, [r0, #4]
 800a78c:	0c09      	lsrs	r1, r1, #16
 800a78e:	4371      	muls	r1, r6
 800a790:	b29b      	uxth	r3, r3
 800a792:	0c3f      	lsrs	r7, r7, #16
 800a794:	18cb      	adds	r3, r1, r3
 800a796:	9a04      	ldr	r2, [sp, #16]
 800a798:	19db      	adds	r3, r3, r7
 800a79a:	0c1f      	lsrs	r7, r3, #16
 800a79c:	3004      	adds	r0, #4
 800a79e:	42a2      	cmp	r2, r4
 800a7a0:	d8e7      	bhi.n	800a772 <__multiply+0x10e>
 800a7a2:	4662      	mov	r2, ip
 800a7a4:	9905      	ldr	r1, [sp, #20]
 800a7a6:	5053      	str	r3, [r2, r1]
 800a7a8:	9b00      	ldr	r3, [sp, #0]
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	2304      	movs	r3, #4
 800a7b0:	449c      	add	ip, r3
 800a7b2:	e79c      	b.n	800a6ee <__multiply+0x8a>
 800a7b4:	9b02      	ldr	r3, [sp, #8]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	9302      	str	r3, [sp, #8]
 800a7ba:	e79c      	b.n	800a6f6 <__multiply+0x92>
 800a7bc:	0800bec6 	.word	0x0800bec6
 800a7c0:	0800bed7 	.word	0x0800bed7

0800a7c4 <__pow5mult>:
 800a7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	0015      	movs	r5, r2
 800a7ca:	0007      	movs	r7, r0
 800a7cc:	000e      	movs	r6, r1
 800a7ce:	401a      	ands	r2, r3
 800a7d0:	421d      	tst	r5, r3
 800a7d2:	d008      	beq.n	800a7e6 <__pow5mult+0x22>
 800a7d4:	4925      	ldr	r1, [pc, #148]	; (800a86c <__pow5mult+0xa8>)
 800a7d6:	3a01      	subs	r2, #1
 800a7d8:	0092      	lsls	r2, r2, #2
 800a7da:	5852      	ldr	r2, [r2, r1]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	0031      	movs	r1, r6
 800a7e0:	f7ff fe9e 	bl	800a520 <__multadd>
 800a7e4:	0006      	movs	r6, r0
 800a7e6:	10ad      	asrs	r5, r5, #2
 800a7e8:	d03d      	beq.n	800a866 <__pow5mult+0xa2>
 800a7ea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a7ec:	2c00      	cmp	r4, #0
 800a7ee:	d10f      	bne.n	800a810 <__pow5mult+0x4c>
 800a7f0:	2010      	movs	r0, #16
 800a7f2:	f7fe f865 	bl	80088c0 <malloc>
 800a7f6:	1e02      	subs	r2, r0, #0
 800a7f8:	6278      	str	r0, [r7, #36]	; 0x24
 800a7fa:	d105      	bne.n	800a808 <__pow5mult+0x44>
 800a7fc:	21d7      	movs	r1, #215	; 0xd7
 800a7fe:	4b1c      	ldr	r3, [pc, #112]	; (800a870 <__pow5mult+0xac>)
 800a800:	481c      	ldr	r0, [pc, #112]	; (800a874 <__pow5mult+0xb0>)
 800a802:	0049      	lsls	r1, r1, #1
 800a804:	f7fe ff2c 	bl	8009660 <__assert_func>
 800a808:	6044      	str	r4, [r0, #4]
 800a80a:	6084      	str	r4, [r0, #8]
 800a80c:	6004      	str	r4, [r0, #0]
 800a80e:	60c4      	str	r4, [r0, #12]
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	689c      	ldr	r4, [r3, #8]
 800a814:	9301      	str	r3, [sp, #4]
 800a816:	2c00      	cmp	r4, #0
 800a818:	d108      	bne.n	800a82c <__pow5mult+0x68>
 800a81a:	0038      	movs	r0, r7
 800a81c:	4916      	ldr	r1, [pc, #88]	; (800a878 <__pow5mult+0xb4>)
 800a81e:	f7ff ff0b 	bl	800a638 <__i2b>
 800a822:	9b01      	ldr	r3, [sp, #4]
 800a824:	0004      	movs	r4, r0
 800a826:	6098      	str	r0, [r3, #8]
 800a828:	2300      	movs	r3, #0
 800a82a:	6003      	str	r3, [r0, #0]
 800a82c:	2301      	movs	r3, #1
 800a82e:	421d      	tst	r5, r3
 800a830:	d00a      	beq.n	800a848 <__pow5mult+0x84>
 800a832:	0031      	movs	r1, r6
 800a834:	0022      	movs	r2, r4
 800a836:	0038      	movs	r0, r7
 800a838:	f7ff ff14 	bl	800a664 <__multiply>
 800a83c:	0031      	movs	r1, r6
 800a83e:	9001      	str	r0, [sp, #4]
 800a840:	0038      	movs	r0, r7
 800a842:	f7ff fe49 	bl	800a4d8 <_Bfree>
 800a846:	9e01      	ldr	r6, [sp, #4]
 800a848:	106d      	asrs	r5, r5, #1
 800a84a:	d00c      	beq.n	800a866 <__pow5mult+0xa2>
 800a84c:	6820      	ldr	r0, [r4, #0]
 800a84e:	2800      	cmp	r0, #0
 800a850:	d107      	bne.n	800a862 <__pow5mult+0x9e>
 800a852:	0022      	movs	r2, r4
 800a854:	0021      	movs	r1, r4
 800a856:	0038      	movs	r0, r7
 800a858:	f7ff ff04 	bl	800a664 <__multiply>
 800a85c:	2300      	movs	r3, #0
 800a85e:	6020      	str	r0, [r4, #0]
 800a860:	6003      	str	r3, [r0, #0]
 800a862:	0004      	movs	r4, r0
 800a864:	e7e2      	b.n	800a82c <__pow5mult+0x68>
 800a866:	0030      	movs	r0, r6
 800a868:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a86a:	46c0      	nop			; (mov r8, r8)
 800a86c:	0800c028 	.word	0x0800c028
 800a870:	0800bc80 	.word	0x0800bc80
 800a874:	0800bed7 	.word	0x0800bed7
 800a878:	00000271 	.word	0x00000271

0800a87c <__lshift>:
 800a87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a87e:	000c      	movs	r4, r1
 800a880:	0017      	movs	r7, r2
 800a882:	6923      	ldr	r3, [r4, #16]
 800a884:	1155      	asrs	r5, r2, #5
 800a886:	b087      	sub	sp, #28
 800a888:	18eb      	adds	r3, r5, r3
 800a88a:	9302      	str	r3, [sp, #8]
 800a88c:	3301      	adds	r3, #1
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	6849      	ldr	r1, [r1, #4]
 800a892:	68a3      	ldr	r3, [r4, #8]
 800a894:	9004      	str	r0, [sp, #16]
 800a896:	9a01      	ldr	r2, [sp, #4]
 800a898:	4293      	cmp	r3, r2
 800a89a:	db11      	blt.n	800a8c0 <__lshift+0x44>
 800a89c:	9804      	ldr	r0, [sp, #16]
 800a89e:	f7ff fdd7 	bl	800a450 <_Balloc>
 800a8a2:	0002      	movs	r2, r0
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	3214      	adds	r2, #20
 800a8a8:	0006      	movs	r6, r0
 800a8aa:	0011      	movs	r1, r2
 800a8ac:	9203      	str	r2, [sp, #12]
 800a8ae:	4298      	cmp	r0, r3
 800a8b0:	d10d      	bne.n	800a8ce <__lshift+0x52>
 800a8b2:	21da      	movs	r1, #218	; 0xda
 800a8b4:	0002      	movs	r2, r0
 800a8b6:	4b27      	ldr	r3, [pc, #156]	; (800a954 <__lshift+0xd8>)
 800a8b8:	4827      	ldr	r0, [pc, #156]	; (800a958 <__lshift+0xdc>)
 800a8ba:	31ff      	adds	r1, #255	; 0xff
 800a8bc:	f7fe fed0 	bl	8009660 <__assert_func>
 800a8c0:	3101      	adds	r1, #1
 800a8c2:	005b      	lsls	r3, r3, #1
 800a8c4:	e7e7      	b.n	800a896 <__lshift+0x1a>
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	0098      	lsls	r0, r3, #2
 800a8ca:	500a      	str	r2, [r1, r0]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	42ab      	cmp	r3, r5
 800a8d0:	dbf9      	blt.n	800a8c6 <__lshift+0x4a>
 800a8d2:	43eb      	mvns	r3, r5
 800a8d4:	17db      	asrs	r3, r3, #31
 800a8d6:	401d      	ands	r5, r3
 800a8d8:	9b03      	ldr	r3, [sp, #12]
 800a8da:	00ad      	lsls	r5, r5, #2
 800a8dc:	211f      	movs	r1, #31
 800a8de:	0038      	movs	r0, r7
 800a8e0:	195d      	adds	r5, r3, r5
 800a8e2:	0023      	movs	r3, r4
 800a8e4:	6922      	ldr	r2, [r4, #16]
 800a8e6:	3314      	adds	r3, #20
 800a8e8:	0092      	lsls	r2, r2, #2
 800a8ea:	4008      	ands	r0, r1
 800a8ec:	4684      	mov	ip, r0
 800a8ee:	189a      	adds	r2, r3, r2
 800a8f0:	420f      	tst	r7, r1
 800a8f2:	d02a      	beq.n	800a94a <__lshift+0xce>
 800a8f4:	3101      	adds	r1, #1
 800a8f6:	1a09      	subs	r1, r1, r0
 800a8f8:	9105      	str	r1, [sp, #20]
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	9503      	str	r5, [sp, #12]
 800a8fe:	4667      	mov	r7, ip
 800a900:	6818      	ldr	r0, [r3, #0]
 800a902:	40b8      	lsls	r0, r7
 800a904:	4301      	orrs	r1, r0
 800a906:	9803      	ldr	r0, [sp, #12]
 800a908:	c002      	stmia	r0!, {r1}
 800a90a:	cb02      	ldmia	r3!, {r1}
 800a90c:	9003      	str	r0, [sp, #12]
 800a90e:	9805      	ldr	r0, [sp, #20]
 800a910:	40c1      	lsrs	r1, r0
 800a912:	429a      	cmp	r2, r3
 800a914:	d8f3      	bhi.n	800a8fe <__lshift+0x82>
 800a916:	0020      	movs	r0, r4
 800a918:	3015      	adds	r0, #21
 800a91a:	2304      	movs	r3, #4
 800a91c:	4282      	cmp	r2, r0
 800a91e:	d304      	bcc.n	800a92a <__lshift+0xae>
 800a920:	1b13      	subs	r3, r2, r4
 800a922:	3b15      	subs	r3, #21
 800a924:	089b      	lsrs	r3, r3, #2
 800a926:	3301      	adds	r3, #1
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	50e9      	str	r1, [r5, r3]
 800a92c:	2900      	cmp	r1, #0
 800a92e:	d002      	beq.n	800a936 <__lshift+0xba>
 800a930:	9b02      	ldr	r3, [sp, #8]
 800a932:	3302      	adds	r3, #2
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	9b01      	ldr	r3, [sp, #4]
 800a938:	9804      	ldr	r0, [sp, #16]
 800a93a:	3b01      	subs	r3, #1
 800a93c:	0021      	movs	r1, r4
 800a93e:	6133      	str	r3, [r6, #16]
 800a940:	f7ff fdca 	bl	800a4d8 <_Bfree>
 800a944:	0030      	movs	r0, r6
 800a946:	b007      	add	sp, #28
 800a948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94a:	cb02      	ldmia	r3!, {r1}
 800a94c:	c502      	stmia	r5!, {r1}
 800a94e:	429a      	cmp	r2, r3
 800a950:	d8fb      	bhi.n	800a94a <__lshift+0xce>
 800a952:	e7f0      	b.n	800a936 <__lshift+0xba>
 800a954:	0800bec6 	.word	0x0800bec6
 800a958:	0800bed7 	.word	0x0800bed7

0800a95c <__mcmp>:
 800a95c:	6902      	ldr	r2, [r0, #16]
 800a95e:	690b      	ldr	r3, [r1, #16]
 800a960:	b530      	push	{r4, r5, lr}
 800a962:	0004      	movs	r4, r0
 800a964:	1ad0      	subs	r0, r2, r3
 800a966:	429a      	cmp	r2, r3
 800a968:	d10d      	bne.n	800a986 <__mcmp+0x2a>
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	3414      	adds	r4, #20
 800a96e:	3114      	adds	r1, #20
 800a970:	18e2      	adds	r2, r4, r3
 800a972:	18c9      	adds	r1, r1, r3
 800a974:	3a04      	subs	r2, #4
 800a976:	3904      	subs	r1, #4
 800a978:	6815      	ldr	r5, [r2, #0]
 800a97a:	680b      	ldr	r3, [r1, #0]
 800a97c:	429d      	cmp	r5, r3
 800a97e:	d003      	beq.n	800a988 <__mcmp+0x2c>
 800a980:	2001      	movs	r0, #1
 800a982:	429d      	cmp	r5, r3
 800a984:	d303      	bcc.n	800a98e <__mcmp+0x32>
 800a986:	bd30      	pop	{r4, r5, pc}
 800a988:	4294      	cmp	r4, r2
 800a98a:	d3f3      	bcc.n	800a974 <__mcmp+0x18>
 800a98c:	e7fb      	b.n	800a986 <__mcmp+0x2a>
 800a98e:	4240      	negs	r0, r0
 800a990:	e7f9      	b.n	800a986 <__mcmp+0x2a>
	...

0800a994 <__mdiff>:
 800a994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a996:	000e      	movs	r6, r1
 800a998:	0007      	movs	r7, r0
 800a99a:	0011      	movs	r1, r2
 800a99c:	0030      	movs	r0, r6
 800a99e:	b087      	sub	sp, #28
 800a9a0:	0014      	movs	r4, r2
 800a9a2:	f7ff ffdb 	bl	800a95c <__mcmp>
 800a9a6:	1e05      	subs	r5, r0, #0
 800a9a8:	d110      	bne.n	800a9cc <__mdiff+0x38>
 800a9aa:	0001      	movs	r1, r0
 800a9ac:	0038      	movs	r0, r7
 800a9ae:	f7ff fd4f 	bl	800a450 <_Balloc>
 800a9b2:	1e02      	subs	r2, r0, #0
 800a9b4:	d104      	bne.n	800a9c0 <__mdiff+0x2c>
 800a9b6:	4b40      	ldr	r3, [pc, #256]	; (800aab8 <__mdiff+0x124>)
 800a9b8:	4940      	ldr	r1, [pc, #256]	; (800aabc <__mdiff+0x128>)
 800a9ba:	4841      	ldr	r0, [pc, #260]	; (800aac0 <__mdiff+0x12c>)
 800a9bc:	f7fe fe50 	bl	8009660 <__assert_func>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	6145      	str	r5, [r0, #20]
 800a9c4:	6103      	str	r3, [r0, #16]
 800a9c6:	0010      	movs	r0, r2
 800a9c8:	b007      	add	sp, #28
 800a9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	9301      	str	r3, [sp, #4]
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	db04      	blt.n	800a9de <__mdiff+0x4a>
 800a9d4:	0023      	movs	r3, r4
 800a9d6:	0034      	movs	r4, r6
 800a9d8:	001e      	movs	r6, r3
 800a9da:	2300      	movs	r3, #0
 800a9dc:	9301      	str	r3, [sp, #4]
 800a9de:	0038      	movs	r0, r7
 800a9e0:	6861      	ldr	r1, [r4, #4]
 800a9e2:	f7ff fd35 	bl	800a450 <_Balloc>
 800a9e6:	1e02      	subs	r2, r0, #0
 800a9e8:	d103      	bne.n	800a9f2 <__mdiff+0x5e>
 800a9ea:	2190      	movs	r1, #144	; 0x90
 800a9ec:	4b32      	ldr	r3, [pc, #200]	; (800aab8 <__mdiff+0x124>)
 800a9ee:	0089      	lsls	r1, r1, #2
 800a9f0:	e7e3      	b.n	800a9ba <__mdiff+0x26>
 800a9f2:	9b01      	ldr	r3, [sp, #4]
 800a9f4:	2700      	movs	r7, #0
 800a9f6:	60c3      	str	r3, [r0, #12]
 800a9f8:	6920      	ldr	r0, [r4, #16]
 800a9fa:	3414      	adds	r4, #20
 800a9fc:	9401      	str	r4, [sp, #4]
 800a9fe:	9b01      	ldr	r3, [sp, #4]
 800aa00:	0084      	lsls	r4, r0, #2
 800aa02:	191b      	adds	r3, r3, r4
 800aa04:	0034      	movs	r4, r6
 800aa06:	9302      	str	r3, [sp, #8]
 800aa08:	6933      	ldr	r3, [r6, #16]
 800aa0a:	3414      	adds	r4, #20
 800aa0c:	0099      	lsls	r1, r3, #2
 800aa0e:	1863      	adds	r3, r4, r1
 800aa10:	9303      	str	r3, [sp, #12]
 800aa12:	0013      	movs	r3, r2
 800aa14:	3314      	adds	r3, #20
 800aa16:	469c      	mov	ip, r3
 800aa18:	9305      	str	r3, [sp, #20]
 800aa1a:	9b01      	ldr	r3, [sp, #4]
 800aa1c:	9304      	str	r3, [sp, #16]
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	cc02      	ldmia	r4!, {r1}
 800aa22:	cb20      	ldmia	r3!, {r5}
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	b2ab      	uxth	r3, r5
 800aa28:	19df      	adds	r7, r3, r7
 800aa2a:	b28b      	uxth	r3, r1
 800aa2c:	1afb      	subs	r3, r7, r3
 800aa2e:	0c2d      	lsrs	r5, r5, #16
 800aa30:	0c09      	lsrs	r1, r1, #16
 800aa32:	1a69      	subs	r1, r5, r1
 800aa34:	141d      	asrs	r5, r3, #16
 800aa36:	1949      	adds	r1, r1, r5
 800aa38:	140f      	asrs	r7, r1, #16
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	0409      	lsls	r1, r1, #16
 800aa3e:	430b      	orrs	r3, r1
 800aa40:	4661      	mov	r1, ip
 800aa42:	c108      	stmia	r1!, {r3}
 800aa44:	9b03      	ldr	r3, [sp, #12]
 800aa46:	468c      	mov	ip, r1
 800aa48:	42a3      	cmp	r3, r4
 800aa4a:	d8e8      	bhi.n	800aa1e <__mdiff+0x8a>
 800aa4c:	0031      	movs	r1, r6
 800aa4e:	9c03      	ldr	r4, [sp, #12]
 800aa50:	3115      	adds	r1, #21
 800aa52:	2304      	movs	r3, #4
 800aa54:	428c      	cmp	r4, r1
 800aa56:	d304      	bcc.n	800aa62 <__mdiff+0xce>
 800aa58:	1ba3      	subs	r3, r4, r6
 800aa5a:	3b15      	subs	r3, #21
 800aa5c:	089b      	lsrs	r3, r3, #2
 800aa5e:	3301      	adds	r3, #1
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	9901      	ldr	r1, [sp, #4]
 800aa64:	18cc      	adds	r4, r1, r3
 800aa66:	9905      	ldr	r1, [sp, #20]
 800aa68:	0026      	movs	r6, r4
 800aa6a:	18cb      	adds	r3, r1, r3
 800aa6c:	469c      	mov	ip, r3
 800aa6e:	9902      	ldr	r1, [sp, #8]
 800aa70:	428e      	cmp	r6, r1
 800aa72:	d310      	bcc.n	800aa96 <__mdiff+0x102>
 800aa74:	9e02      	ldr	r6, [sp, #8]
 800aa76:	1ee5      	subs	r5, r4, #3
 800aa78:	2100      	movs	r1, #0
 800aa7a:	42ae      	cmp	r6, r5
 800aa7c:	d304      	bcc.n	800aa88 <__mdiff+0xf4>
 800aa7e:	0031      	movs	r1, r6
 800aa80:	3103      	adds	r1, #3
 800aa82:	1b09      	subs	r1, r1, r4
 800aa84:	0889      	lsrs	r1, r1, #2
 800aa86:	0089      	lsls	r1, r1, #2
 800aa88:	185b      	adds	r3, r3, r1
 800aa8a:	3b04      	subs	r3, #4
 800aa8c:	6819      	ldr	r1, [r3, #0]
 800aa8e:	2900      	cmp	r1, #0
 800aa90:	d00f      	beq.n	800aab2 <__mdiff+0x11e>
 800aa92:	6110      	str	r0, [r2, #16]
 800aa94:	e797      	b.n	800a9c6 <__mdiff+0x32>
 800aa96:	ce02      	ldmia	r6!, {r1}
 800aa98:	b28d      	uxth	r5, r1
 800aa9a:	19ed      	adds	r5, r5, r7
 800aa9c:	0c0f      	lsrs	r7, r1, #16
 800aa9e:	1429      	asrs	r1, r5, #16
 800aaa0:	1879      	adds	r1, r7, r1
 800aaa2:	140f      	asrs	r7, r1, #16
 800aaa4:	b2ad      	uxth	r5, r5
 800aaa6:	0409      	lsls	r1, r1, #16
 800aaa8:	430d      	orrs	r5, r1
 800aaaa:	4661      	mov	r1, ip
 800aaac:	c120      	stmia	r1!, {r5}
 800aaae:	468c      	mov	ip, r1
 800aab0:	e7dd      	b.n	800aa6e <__mdiff+0xda>
 800aab2:	3801      	subs	r0, #1
 800aab4:	e7e9      	b.n	800aa8a <__mdiff+0xf6>
 800aab6:	46c0      	nop			; (mov r8, r8)
 800aab8:	0800bec6 	.word	0x0800bec6
 800aabc:	00000232 	.word	0x00000232
 800aac0:	0800bed7 	.word	0x0800bed7

0800aac4 <__d2b>:
 800aac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aac6:	2101      	movs	r1, #1
 800aac8:	0014      	movs	r4, r2
 800aaca:	001e      	movs	r6, r3
 800aacc:	9f08      	ldr	r7, [sp, #32]
 800aace:	f7ff fcbf 	bl	800a450 <_Balloc>
 800aad2:	1e05      	subs	r5, r0, #0
 800aad4:	d105      	bne.n	800aae2 <__d2b+0x1e>
 800aad6:	0002      	movs	r2, r0
 800aad8:	4b26      	ldr	r3, [pc, #152]	; (800ab74 <__d2b+0xb0>)
 800aada:	4927      	ldr	r1, [pc, #156]	; (800ab78 <__d2b+0xb4>)
 800aadc:	4827      	ldr	r0, [pc, #156]	; (800ab7c <__d2b+0xb8>)
 800aade:	f7fe fdbf 	bl	8009660 <__assert_func>
 800aae2:	0333      	lsls	r3, r6, #12
 800aae4:	0076      	lsls	r6, r6, #1
 800aae6:	0b1b      	lsrs	r3, r3, #12
 800aae8:	0d76      	lsrs	r6, r6, #21
 800aaea:	d124      	bne.n	800ab36 <__d2b+0x72>
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	2c00      	cmp	r4, #0
 800aaf0:	d027      	beq.n	800ab42 <__d2b+0x7e>
 800aaf2:	4668      	mov	r0, sp
 800aaf4:	9400      	str	r4, [sp, #0]
 800aaf6:	f7ff fd71 	bl	800a5dc <__lo0bits>
 800aafa:	9c00      	ldr	r4, [sp, #0]
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d01e      	beq.n	800ab3e <__d2b+0x7a>
 800ab00:	9b01      	ldr	r3, [sp, #4]
 800ab02:	2120      	movs	r1, #32
 800ab04:	001a      	movs	r2, r3
 800ab06:	1a09      	subs	r1, r1, r0
 800ab08:	408a      	lsls	r2, r1
 800ab0a:	40c3      	lsrs	r3, r0
 800ab0c:	4322      	orrs	r2, r4
 800ab0e:	616a      	str	r2, [r5, #20]
 800ab10:	9301      	str	r3, [sp, #4]
 800ab12:	9c01      	ldr	r4, [sp, #4]
 800ab14:	61ac      	str	r4, [r5, #24]
 800ab16:	1e63      	subs	r3, r4, #1
 800ab18:	419c      	sbcs	r4, r3
 800ab1a:	3401      	adds	r4, #1
 800ab1c:	612c      	str	r4, [r5, #16]
 800ab1e:	2e00      	cmp	r6, #0
 800ab20:	d018      	beq.n	800ab54 <__d2b+0x90>
 800ab22:	4b17      	ldr	r3, [pc, #92]	; (800ab80 <__d2b+0xbc>)
 800ab24:	18f6      	adds	r6, r6, r3
 800ab26:	2335      	movs	r3, #53	; 0x35
 800ab28:	1836      	adds	r6, r6, r0
 800ab2a:	1a18      	subs	r0, r3, r0
 800ab2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab2e:	603e      	str	r6, [r7, #0]
 800ab30:	6018      	str	r0, [r3, #0]
 800ab32:	0028      	movs	r0, r5
 800ab34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab36:	2280      	movs	r2, #128	; 0x80
 800ab38:	0352      	lsls	r2, r2, #13
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	e7d6      	b.n	800aaec <__d2b+0x28>
 800ab3e:	616c      	str	r4, [r5, #20]
 800ab40:	e7e7      	b.n	800ab12 <__d2b+0x4e>
 800ab42:	a801      	add	r0, sp, #4
 800ab44:	f7ff fd4a 	bl	800a5dc <__lo0bits>
 800ab48:	2401      	movs	r4, #1
 800ab4a:	9b01      	ldr	r3, [sp, #4]
 800ab4c:	612c      	str	r4, [r5, #16]
 800ab4e:	616b      	str	r3, [r5, #20]
 800ab50:	3020      	adds	r0, #32
 800ab52:	e7e4      	b.n	800ab1e <__d2b+0x5a>
 800ab54:	4b0b      	ldr	r3, [pc, #44]	; (800ab84 <__d2b+0xc0>)
 800ab56:	18c0      	adds	r0, r0, r3
 800ab58:	4b0b      	ldr	r3, [pc, #44]	; (800ab88 <__d2b+0xc4>)
 800ab5a:	6038      	str	r0, [r7, #0]
 800ab5c:	18e3      	adds	r3, r4, r3
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	18eb      	adds	r3, r5, r3
 800ab62:	6958      	ldr	r0, [r3, #20]
 800ab64:	f7ff fd20 	bl	800a5a8 <__hi0bits>
 800ab68:	0164      	lsls	r4, r4, #5
 800ab6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab6c:	1a24      	subs	r4, r4, r0
 800ab6e:	601c      	str	r4, [r3, #0]
 800ab70:	e7df      	b.n	800ab32 <__d2b+0x6e>
 800ab72:	46c0      	nop			; (mov r8, r8)
 800ab74:	0800bec6 	.word	0x0800bec6
 800ab78:	0000030a 	.word	0x0000030a
 800ab7c:	0800bed7 	.word	0x0800bed7
 800ab80:	fffffbcd 	.word	0xfffffbcd
 800ab84:	fffffbce 	.word	0xfffffbce
 800ab88:	3fffffff 	.word	0x3fffffff

0800ab8c <_calloc_r>:
 800ab8c:	434a      	muls	r2, r1
 800ab8e:	b570      	push	{r4, r5, r6, lr}
 800ab90:	0011      	movs	r1, r2
 800ab92:	0015      	movs	r5, r2
 800ab94:	f7fd ff04 	bl	80089a0 <_malloc_r>
 800ab98:	1e04      	subs	r4, r0, #0
 800ab9a:	d003      	beq.n	800aba4 <_calloc_r+0x18>
 800ab9c:	002a      	movs	r2, r5
 800ab9e:	2100      	movs	r1, #0
 800aba0:	f7fd feab 	bl	80088fa <memset>
 800aba4:	0020      	movs	r0, r4
 800aba6:	bd70      	pop	{r4, r5, r6, pc}

0800aba8 <__ssputs_r>:
 800aba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abaa:	688e      	ldr	r6, [r1, #8]
 800abac:	b085      	sub	sp, #20
 800abae:	0007      	movs	r7, r0
 800abb0:	000c      	movs	r4, r1
 800abb2:	9203      	str	r2, [sp, #12]
 800abb4:	9301      	str	r3, [sp, #4]
 800abb6:	429e      	cmp	r6, r3
 800abb8:	d83c      	bhi.n	800ac34 <__ssputs_r+0x8c>
 800abba:	2390      	movs	r3, #144	; 0x90
 800abbc:	898a      	ldrh	r2, [r1, #12]
 800abbe:	00db      	lsls	r3, r3, #3
 800abc0:	421a      	tst	r2, r3
 800abc2:	d034      	beq.n	800ac2e <__ssputs_r+0x86>
 800abc4:	2503      	movs	r5, #3
 800abc6:	6909      	ldr	r1, [r1, #16]
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	1a5b      	subs	r3, r3, r1
 800abcc:	9302      	str	r3, [sp, #8]
 800abce:	6963      	ldr	r3, [r4, #20]
 800abd0:	9802      	ldr	r0, [sp, #8]
 800abd2:	435d      	muls	r5, r3
 800abd4:	0feb      	lsrs	r3, r5, #31
 800abd6:	195d      	adds	r5, r3, r5
 800abd8:	9b01      	ldr	r3, [sp, #4]
 800abda:	106d      	asrs	r5, r5, #1
 800abdc:	3301      	adds	r3, #1
 800abde:	181b      	adds	r3, r3, r0
 800abe0:	42ab      	cmp	r3, r5
 800abe2:	d900      	bls.n	800abe6 <__ssputs_r+0x3e>
 800abe4:	001d      	movs	r5, r3
 800abe6:	0553      	lsls	r3, r2, #21
 800abe8:	d532      	bpl.n	800ac50 <__ssputs_r+0xa8>
 800abea:	0029      	movs	r1, r5
 800abec:	0038      	movs	r0, r7
 800abee:	f7fd fed7 	bl	80089a0 <_malloc_r>
 800abf2:	1e06      	subs	r6, r0, #0
 800abf4:	d109      	bne.n	800ac0a <__ssputs_r+0x62>
 800abf6:	230c      	movs	r3, #12
 800abf8:	603b      	str	r3, [r7, #0]
 800abfa:	2340      	movs	r3, #64	; 0x40
 800abfc:	2001      	movs	r0, #1
 800abfe:	89a2      	ldrh	r2, [r4, #12]
 800ac00:	4240      	negs	r0, r0
 800ac02:	4313      	orrs	r3, r2
 800ac04:	81a3      	strh	r3, [r4, #12]
 800ac06:	b005      	add	sp, #20
 800ac08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac0a:	9a02      	ldr	r2, [sp, #8]
 800ac0c:	6921      	ldr	r1, [r4, #16]
 800ac0e:	f7fd fe6b 	bl	80088e8 <memcpy>
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	4a14      	ldr	r2, [pc, #80]	; (800ac68 <__ssputs_r+0xc0>)
 800ac16:	401a      	ands	r2, r3
 800ac18:	2380      	movs	r3, #128	; 0x80
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	81a3      	strh	r3, [r4, #12]
 800ac1e:	9b02      	ldr	r3, [sp, #8]
 800ac20:	6126      	str	r6, [r4, #16]
 800ac22:	18f6      	adds	r6, r6, r3
 800ac24:	6026      	str	r6, [r4, #0]
 800ac26:	6165      	str	r5, [r4, #20]
 800ac28:	9e01      	ldr	r6, [sp, #4]
 800ac2a:	1aed      	subs	r5, r5, r3
 800ac2c:	60a5      	str	r5, [r4, #8]
 800ac2e:	9b01      	ldr	r3, [sp, #4]
 800ac30:	429e      	cmp	r6, r3
 800ac32:	d900      	bls.n	800ac36 <__ssputs_r+0x8e>
 800ac34:	9e01      	ldr	r6, [sp, #4]
 800ac36:	0032      	movs	r2, r6
 800ac38:	9903      	ldr	r1, [sp, #12]
 800ac3a:	6820      	ldr	r0, [r4, #0]
 800ac3c:	f000 fd9e 	bl	800b77c <memmove>
 800ac40:	68a3      	ldr	r3, [r4, #8]
 800ac42:	2000      	movs	r0, #0
 800ac44:	1b9b      	subs	r3, r3, r6
 800ac46:	60a3      	str	r3, [r4, #8]
 800ac48:	6823      	ldr	r3, [r4, #0]
 800ac4a:	199e      	adds	r6, r3, r6
 800ac4c:	6026      	str	r6, [r4, #0]
 800ac4e:	e7da      	b.n	800ac06 <__ssputs_r+0x5e>
 800ac50:	002a      	movs	r2, r5
 800ac52:	0038      	movs	r0, r7
 800ac54:	f000 fda5 	bl	800b7a2 <_realloc_r>
 800ac58:	1e06      	subs	r6, r0, #0
 800ac5a:	d1e0      	bne.n	800ac1e <__ssputs_r+0x76>
 800ac5c:	0038      	movs	r0, r7
 800ac5e:	6921      	ldr	r1, [r4, #16]
 800ac60:	f7fd fe54 	bl	800890c <_free_r>
 800ac64:	e7c7      	b.n	800abf6 <__ssputs_r+0x4e>
 800ac66:	46c0      	nop			; (mov r8, r8)
 800ac68:	fffffb7f 	.word	0xfffffb7f

0800ac6c <_svfiprintf_r>:
 800ac6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac6e:	b0a1      	sub	sp, #132	; 0x84
 800ac70:	9003      	str	r0, [sp, #12]
 800ac72:	001d      	movs	r5, r3
 800ac74:	898b      	ldrh	r3, [r1, #12]
 800ac76:	000f      	movs	r7, r1
 800ac78:	0016      	movs	r6, r2
 800ac7a:	061b      	lsls	r3, r3, #24
 800ac7c:	d511      	bpl.n	800aca2 <_svfiprintf_r+0x36>
 800ac7e:	690b      	ldr	r3, [r1, #16]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10e      	bne.n	800aca2 <_svfiprintf_r+0x36>
 800ac84:	2140      	movs	r1, #64	; 0x40
 800ac86:	f7fd fe8b 	bl	80089a0 <_malloc_r>
 800ac8a:	6038      	str	r0, [r7, #0]
 800ac8c:	6138      	str	r0, [r7, #16]
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d105      	bne.n	800ac9e <_svfiprintf_r+0x32>
 800ac92:	230c      	movs	r3, #12
 800ac94:	9a03      	ldr	r2, [sp, #12]
 800ac96:	3801      	subs	r0, #1
 800ac98:	6013      	str	r3, [r2, #0]
 800ac9a:	b021      	add	sp, #132	; 0x84
 800ac9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac9e:	2340      	movs	r3, #64	; 0x40
 800aca0:	617b      	str	r3, [r7, #20]
 800aca2:	2300      	movs	r3, #0
 800aca4:	ac08      	add	r4, sp, #32
 800aca6:	6163      	str	r3, [r4, #20]
 800aca8:	3320      	adds	r3, #32
 800acaa:	7663      	strb	r3, [r4, #25]
 800acac:	3310      	adds	r3, #16
 800acae:	76a3      	strb	r3, [r4, #26]
 800acb0:	9507      	str	r5, [sp, #28]
 800acb2:	0035      	movs	r5, r6
 800acb4:	782b      	ldrb	r3, [r5, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <_svfiprintf_r+0x52>
 800acba:	2b25      	cmp	r3, #37	; 0x25
 800acbc:	d147      	bne.n	800ad4e <_svfiprintf_r+0xe2>
 800acbe:	1bab      	subs	r3, r5, r6
 800acc0:	9305      	str	r3, [sp, #20]
 800acc2:	42b5      	cmp	r5, r6
 800acc4:	d00c      	beq.n	800ace0 <_svfiprintf_r+0x74>
 800acc6:	0032      	movs	r2, r6
 800acc8:	0039      	movs	r1, r7
 800acca:	9803      	ldr	r0, [sp, #12]
 800accc:	f7ff ff6c 	bl	800aba8 <__ssputs_r>
 800acd0:	1c43      	adds	r3, r0, #1
 800acd2:	d100      	bne.n	800acd6 <_svfiprintf_r+0x6a>
 800acd4:	e0ae      	b.n	800ae34 <_svfiprintf_r+0x1c8>
 800acd6:	6962      	ldr	r2, [r4, #20]
 800acd8:	9b05      	ldr	r3, [sp, #20]
 800acda:	4694      	mov	ip, r2
 800acdc:	4463      	add	r3, ip
 800acde:	6163      	str	r3, [r4, #20]
 800ace0:	782b      	ldrb	r3, [r5, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d100      	bne.n	800ace8 <_svfiprintf_r+0x7c>
 800ace6:	e0a5      	b.n	800ae34 <_svfiprintf_r+0x1c8>
 800ace8:	2201      	movs	r2, #1
 800acea:	2300      	movs	r3, #0
 800acec:	4252      	negs	r2, r2
 800acee:	6062      	str	r2, [r4, #4]
 800acf0:	a904      	add	r1, sp, #16
 800acf2:	3254      	adds	r2, #84	; 0x54
 800acf4:	1852      	adds	r2, r2, r1
 800acf6:	1c6e      	adds	r6, r5, #1
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	60e3      	str	r3, [r4, #12]
 800acfc:	60a3      	str	r3, [r4, #8]
 800acfe:	7013      	strb	r3, [r2, #0]
 800ad00:	65a3      	str	r3, [r4, #88]	; 0x58
 800ad02:	2205      	movs	r2, #5
 800ad04:	7831      	ldrb	r1, [r6, #0]
 800ad06:	4854      	ldr	r0, [pc, #336]	; (800ae58 <_svfiprintf_r+0x1ec>)
 800ad08:	f7ff fb86 	bl	800a418 <memchr>
 800ad0c:	1c75      	adds	r5, r6, #1
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d11f      	bne.n	800ad52 <_svfiprintf_r+0xe6>
 800ad12:	6822      	ldr	r2, [r4, #0]
 800ad14:	06d3      	lsls	r3, r2, #27
 800ad16:	d504      	bpl.n	800ad22 <_svfiprintf_r+0xb6>
 800ad18:	2353      	movs	r3, #83	; 0x53
 800ad1a:	a904      	add	r1, sp, #16
 800ad1c:	185b      	adds	r3, r3, r1
 800ad1e:	2120      	movs	r1, #32
 800ad20:	7019      	strb	r1, [r3, #0]
 800ad22:	0713      	lsls	r3, r2, #28
 800ad24:	d504      	bpl.n	800ad30 <_svfiprintf_r+0xc4>
 800ad26:	2353      	movs	r3, #83	; 0x53
 800ad28:	a904      	add	r1, sp, #16
 800ad2a:	185b      	adds	r3, r3, r1
 800ad2c:	212b      	movs	r1, #43	; 0x2b
 800ad2e:	7019      	strb	r1, [r3, #0]
 800ad30:	7833      	ldrb	r3, [r6, #0]
 800ad32:	2b2a      	cmp	r3, #42	; 0x2a
 800ad34:	d016      	beq.n	800ad64 <_svfiprintf_r+0xf8>
 800ad36:	0035      	movs	r5, r6
 800ad38:	2100      	movs	r1, #0
 800ad3a:	200a      	movs	r0, #10
 800ad3c:	68e3      	ldr	r3, [r4, #12]
 800ad3e:	782a      	ldrb	r2, [r5, #0]
 800ad40:	1c6e      	adds	r6, r5, #1
 800ad42:	3a30      	subs	r2, #48	; 0x30
 800ad44:	2a09      	cmp	r2, #9
 800ad46:	d94e      	bls.n	800ade6 <_svfiprintf_r+0x17a>
 800ad48:	2900      	cmp	r1, #0
 800ad4a:	d111      	bne.n	800ad70 <_svfiprintf_r+0x104>
 800ad4c:	e017      	b.n	800ad7e <_svfiprintf_r+0x112>
 800ad4e:	3501      	adds	r5, #1
 800ad50:	e7b0      	b.n	800acb4 <_svfiprintf_r+0x48>
 800ad52:	4b41      	ldr	r3, [pc, #260]	; (800ae58 <_svfiprintf_r+0x1ec>)
 800ad54:	6822      	ldr	r2, [r4, #0]
 800ad56:	1ac0      	subs	r0, r0, r3
 800ad58:	2301      	movs	r3, #1
 800ad5a:	4083      	lsls	r3, r0
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	002e      	movs	r6, r5
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	e7ce      	b.n	800ad02 <_svfiprintf_r+0x96>
 800ad64:	9b07      	ldr	r3, [sp, #28]
 800ad66:	1d19      	adds	r1, r3, #4
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	9107      	str	r1, [sp, #28]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	db01      	blt.n	800ad74 <_svfiprintf_r+0x108>
 800ad70:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad72:	e004      	b.n	800ad7e <_svfiprintf_r+0x112>
 800ad74:	425b      	negs	r3, r3
 800ad76:	60e3      	str	r3, [r4, #12]
 800ad78:	2302      	movs	r3, #2
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	782b      	ldrb	r3, [r5, #0]
 800ad80:	2b2e      	cmp	r3, #46	; 0x2e
 800ad82:	d10a      	bne.n	800ad9a <_svfiprintf_r+0x12e>
 800ad84:	786b      	ldrb	r3, [r5, #1]
 800ad86:	2b2a      	cmp	r3, #42	; 0x2a
 800ad88:	d135      	bne.n	800adf6 <_svfiprintf_r+0x18a>
 800ad8a:	9b07      	ldr	r3, [sp, #28]
 800ad8c:	3502      	adds	r5, #2
 800ad8e:	1d1a      	adds	r2, r3, #4
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	9207      	str	r2, [sp, #28]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	db2b      	blt.n	800adf0 <_svfiprintf_r+0x184>
 800ad98:	9309      	str	r3, [sp, #36]	; 0x24
 800ad9a:	4e30      	ldr	r6, [pc, #192]	; (800ae5c <_svfiprintf_r+0x1f0>)
 800ad9c:	2203      	movs	r2, #3
 800ad9e:	0030      	movs	r0, r6
 800ada0:	7829      	ldrb	r1, [r5, #0]
 800ada2:	f7ff fb39 	bl	800a418 <memchr>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d006      	beq.n	800adb8 <_svfiprintf_r+0x14c>
 800adaa:	2340      	movs	r3, #64	; 0x40
 800adac:	1b80      	subs	r0, r0, r6
 800adae:	4083      	lsls	r3, r0
 800adb0:	6822      	ldr	r2, [r4, #0]
 800adb2:	3501      	adds	r5, #1
 800adb4:	4313      	orrs	r3, r2
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	7829      	ldrb	r1, [r5, #0]
 800adba:	2206      	movs	r2, #6
 800adbc:	4828      	ldr	r0, [pc, #160]	; (800ae60 <_svfiprintf_r+0x1f4>)
 800adbe:	1c6e      	adds	r6, r5, #1
 800adc0:	7621      	strb	r1, [r4, #24]
 800adc2:	f7ff fb29 	bl	800a418 <memchr>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d03c      	beq.n	800ae44 <_svfiprintf_r+0x1d8>
 800adca:	4b26      	ldr	r3, [pc, #152]	; (800ae64 <_svfiprintf_r+0x1f8>)
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d125      	bne.n	800ae1c <_svfiprintf_r+0x1b0>
 800add0:	2207      	movs	r2, #7
 800add2:	9b07      	ldr	r3, [sp, #28]
 800add4:	3307      	adds	r3, #7
 800add6:	4393      	bics	r3, r2
 800add8:	3308      	adds	r3, #8
 800adda:	9307      	str	r3, [sp, #28]
 800addc:	6963      	ldr	r3, [r4, #20]
 800adde:	9a04      	ldr	r2, [sp, #16]
 800ade0:	189b      	adds	r3, r3, r2
 800ade2:	6163      	str	r3, [r4, #20]
 800ade4:	e765      	b.n	800acb2 <_svfiprintf_r+0x46>
 800ade6:	4343      	muls	r3, r0
 800ade8:	0035      	movs	r5, r6
 800adea:	2101      	movs	r1, #1
 800adec:	189b      	adds	r3, r3, r2
 800adee:	e7a6      	b.n	800ad3e <_svfiprintf_r+0xd2>
 800adf0:	2301      	movs	r3, #1
 800adf2:	425b      	negs	r3, r3
 800adf4:	e7d0      	b.n	800ad98 <_svfiprintf_r+0x12c>
 800adf6:	2300      	movs	r3, #0
 800adf8:	200a      	movs	r0, #10
 800adfa:	001a      	movs	r2, r3
 800adfc:	3501      	adds	r5, #1
 800adfe:	6063      	str	r3, [r4, #4]
 800ae00:	7829      	ldrb	r1, [r5, #0]
 800ae02:	1c6e      	adds	r6, r5, #1
 800ae04:	3930      	subs	r1, #48	; 0x30
 800ae06:	2909      	cmp	r1, #9
 800ae08:	d903      	bls.n	800ae12 <_svfiprintf_r+0x1a6>
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d0c5      	beq.n	800ad9a <_svfiprintf_r+0x12e>
 800ae0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ae10:	e7c3      	b.n	800ad9a <_svfiprintf_r+0x12e>
 800ae12:	4342      	muls	r2, r0
 800ae14:	0035      	movs	r5, r6
 800ae16:	2301      	movs	r3, #1
 800ae18:	1852      	adds	r2, r2, r1
 800ae1a:	e7f1      	b.n	800ae00 <_svfiprintf_r+0x194>
 800ae1c:	ab07      	add	r3, sp, #28
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	003a      	movs	r2, r7
 800ae22:	0021      	movs	r1, r4
 800ae24:	4b10      	ldr	r3, [pc, #64]	; (800ae68 <_svfiprintf_r+0x1fc>)
 800ae26:	9803      	ldr	r0, [sp, #12]
 800ae28:	f7fd fec2 	bl	8008bb0 <_printf_float>
 800ae2c:	9004      	str	r0, [sp, #16]
 800ae2e:	9b04      	ldr	r3, [sp, #16]
 800ae30:	3301      	adds	r3, #1
 800ae32:	d1d3      	bne.n	800addc <_svfiprintf_r+0x170>
 800ae34:	89bb      	ldrh	r3, [r7, #12]
 800ae36:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ae38:	065b      	lsls	r3, r3, #25
 800ae3a:	d400      	bmi.n	800ae3e <_svfiprintf_r+0x1d2>
 800ae3c:	e72d      	b.n	800ac9a <_svfiprintf_r+0x2e>
 800ae3e:	2001      	movs	r0, #1
 800ae40:	4240      	negs	r0, r0
 800ae42:	e72a      	b.n	800ac9a <_svfiprintf_r+0x2e>
 800ae44:	ab07      	add	r3, sp, #28
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	003a      	movs	r2, r7
 800ae4a:	0021      	movs	r1, r4
 800ae4c:	4b06      	ldr	r3, [pc, #24]	; (800ae68 <_svfiprintf_r+0x1fc>)
 800ae4e:	9803      	ldr	r0, [sp, #12]
 800ae50:	f7fe f96c 	bl	800912c <_printf_i>
 800ae54:	e7ea      	b.n	800ae2c <_svfiprintf_r+0x1c0>
 800ae56:	46c0      	nop			; (mov r8, r8)
 800ae58:	0800c034 	.word	0x0800c034
 800ae5c:	0800c03a 	.word	0x0800c03a
 800ae60:	0800c03e 	.word	0x0800c03e
 800ae64:	08008bb1 	.word	0x08008bb1
 800ae68:	0800aba9 	.word	0x0800aba9

0800ae6c <__sfputc_r>:
 800ae6c:	6893      	ldr	r3, [r2, #8]
 800ae6e:	b510      	push	{r4, lr}
 800ae70:	3b01      	subs	r3, #1
 800ae72:	6093      	str	r3, [r2, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	da04      	bge.n	800ae82 <__sfputc_r+0x16>
 800ae78:	6994      	ldr	r4, [r2, #24]
 800ae7a:	42a3      	cmp	r3, r4
 800ae7c:	db07      	blt.n	800ae8e <__sfputc_r+0x22>
 800ae7e:	290a      	cmp	r1, #10
 800ae80:	d005      	beq.n	800ae8e <__sfputc_r+0x22>
 800ae82:	6813      	ldr	r3, [r2, #0]
 800ae84:	1c58      	adds	r0, r3, #1
 800ae86:	6010      	str	r0, [r2, #0]
 800ae88:	7019      	strb	r1, [r3, #0]
 800ae8a:	0008      	movs	r0, r1
 800ae8c:	bd10      	pop	{r4, pc}
 800ae8e:	f000 f94f 	bl	800b130 <__swbuf_r>
 800ae92:	0001      	movs	r1, r0
 800ae94:	e7f9      	b.n	800ae8a <__sfputc_r+0x1e>

0800ae96 <__sfputs_r>:
 800ae96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae98:	0006      	movs	r6, r0
 800ae9a:	000f      	movs	r7, r1
 800ae9c:	0014      	movs	r4, r2
 800ae9e:	18d5      	adds	r5, r2, r3
 800aea0:	42ac      	cmp	r4, r5
 800aea2:	d101      	bne.n	800aea8 <__sfputs_r+0x12>
 800aea4:	2000      	movs	r0, #0
 800aea6:	e007      	b.n	800aeb8 <__sfputs_r+0x22>
 800aea8:	7821      	ldrb	r1, [r4, #0]
 800aeaa:	003a      	movs	r2, r7
 800aeac:	0030      	movs	r0, r6
 800aeae:	f7ff ffdd 	bl	800ae6c <__sfputc_r>
 800aeb2:	3401      	adds	r4, #1
 800aeb4:	1c43      	adds	r3, r0, #1
 800aeb6:	d1f3      	bne.n	800aea0 <__sfputs_r+0xa>
 800aeb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aebc <_vfiprintf_r>:
 800aebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aebe:	b0a1      	sub	sp, #132	; 0x84
 800aec0:	0006      	movs	r6, r0
 800aec2:	000c      	movs	r4, r1
 800aec4:	001f      	movs	r7, r3
 800aec6:	9203      	str	r2, [sp, #12]
 800aec8:	2800      	cmp	r0, #0
 800aeca:	d004      	beq.n	800aed6 <_vfiprintf_r+0x1a>
 800aecc:	6983      	ldr	r3, [r0, #24]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d101      	bne.n	800aed6 <_vfiprintf_r+0x1a>
 800aed2:	f000 fb31 	bl	800b538 <__sinit>
 800aed6:	4b8e      	ldr	r3, [pc, #568]	; (800b110 <_vfiprintf_r+0x254>)
 800aed8:	429c      	cmp	r4, r3
 800aeda:	d11c      	bne.n	800af16 <_vfiprintf_r+0x5a>
 800aedc:	6874      	ldr	r4, [r6, #4]
 800aede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aee0:	07db      	lsls	r3, r3, #31
 800aee2:	d405      	bmi.n	800aef0 <_vfiprintf_r+0x34>
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	059b      	lsls	r3, r3, #22
 800aee8:	d402      	bmi.n	800aef0 <_vfiprintf_r+0x34>
 800aeea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeec:	f000 fbc5 	bl	800b67a <__retarget_lock_acquire_recursive>
 800aef0:	89a3      	ldrh	r3, [r4, #12]
 800aef2:	071b      	lsls	r3, r3, #28
 800aef4:	d502      	bpl.n	800aefc <_vfiprintf_r+0x40>
 800aef6:	6923      	ldr	r3, [r4, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d11d      	bne.n	800af38 <_vfiprintf_r+0x7c>
 800aefc:	0021      	movs	r1, r4
 800aefe:	0030      	movs	r0, r6
 800af00:	f000 f96c 	bl	800b1dc <__swsetup_r>
 800af04:	2800      	cmp	r0, #0
 800af06:	d017      	beq.n	800af38 <_vfiprintf_r+0x7c>
 800af08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af0a:	07db      	lsls	r3, r3, #31
 800af0c:	d50d      	bpl.n	800af2a <_vfiprintf_r+0x6e>
 800af0e:	2001      	movs	r0, #1
 800af10:	4240      	negs	r0, r0
 800af12:	b021      	add	sp, #132	; 0x84
 800af14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af16:	4b7f      	ldr	r3, [pc, #508]	; (800b114 <_vfiprintf_r+0x258>)
 800af18:	429c      	cmp	r4, r3
 800af1a:	d101      	bne.n	800af20 <_vfiprintf_r+0x64>
 800af1c:	68b4      	ldr	r4, [r6, #8]
 800af1e:	e7de      	b.n	800aede <_vfiprintf_r+0x22>
 800af20:	4b7d      	ldr	r3, [pc, #500]	; (800b118 <_vfiprintf_r+0x25c>)
 800af22:	429c      	cmp	r4, r3
 800af24:	d1db      	bne.n	800aede <_vfiprintf_r+0x22>
 800af26:	68f4      	ldr	r4, [r6, #12]
 800af28:	e7d9      	b.n	800aede <_vfiprintf_r+0x22>
 800af2a:	89a3      	ldrh	r3, [r4, #12]
 800af2c:	059b      	lsls	r3, r3, #22
 800af2e:	d4ee      	bmi.n	800af0e <_vfiprintf_r+0x52>
 800af30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af32:	f000 fba3 	bl	800b67c <__retarget_lock_release_recursive>
 800af36:	e7ea      	b.n	800af0e <_vfiprintf_r+0x52>
 800af38:	2300      	movs	r3, #0
 800af3a:	ad08      	add	r5, sp, #32
 800af3c:	616b      	str	r3, [r5, #20]
 800af3e:	3320      	adds	r3, #32
 800af40:	766b      	strb	r3, [r5, #25]
 800af42:	3310      	adds	r3, #16
 800af44:	76ab      	strb	r3, [r5, #26]
 800af46:	9707      	str	r7, [sp, #28]
 800af48:	9f03      	ldr	r7, [sp, #12]
 800af4a:	783b      	ldrb	r3, [r7, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <_vfiprintf_r+0x98>
 800af50:	2b25      	cmp	r3, #37	; 0x25
 800af52:	d14e      	bne.n	800aff2 <_vfiprintf_r+0x136>
 800af54:	9b03      	ldr	r3, [sp, #12]
 800af56:	1afb      	subs	r3, r7, r3
 800af58:	9305      	str	r3, [sp, #20]
 800af5a:	9b03      	ldr	r3, [sp, #12]
 800af5c:	429f      	cmp	r7, r3
 800af5e:	d00d      	beq.n	800af7c <_vfiprintf_r+0xc0>
 800af60:	9b05      	ldr	r3, [sp, #20]
 800af62:	0021      	movs	r1, r4
 800af64:	0030      	movs	r0, r6
 800af66:	9a03      	ldr	r2, [sp, #12]
 800af68:	f7ff ff95 	bl	800ae96 <__sfputs_r>
 800af6c:	1c43      	adds	r3, r0, #1
 800af6e:	d100      	bne.n	800af72 <_vfiprintf_r+0xb6>
 800af70:	e0b5      	b.n	800b0de <_vfiprintf_r+0x222>
 800af72:	696a      	ldr	r2, [r5, #20]
 800af74:	9b05      	ldr	r3, [sp, #20]
 800af76:	4694      	mov	ip, r2
 800af78:	4463      	add	r3, ip
 800af7a:	616b      	str	r3, [r5, #20]
 800af7c:	783b      	ldrb	r3, [r7, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d100      	bne.n	800af84 <_vfiprintf_r+0xc8>
 800af82:	e0ac      	b.n	800b0de <_vfiprintf_r+0x222>
 800af84:	2201      	movs	r2, #1
 800af86:	1c7b      	adds	r3, r7, #1
 800af88:	9303      	str	r3, [sp, #12]
 800af8a:	2300      	movs	r3, #0
 800af8c:	4252      	negs	r2, r2
 800af8e:	606a      	str	r2, [r5, #4]
 800af90:	a904      	add	r1, sp, #16
 800af92:	3254      	adds	r2, #84	; 0x54
 800af94:	1852      	adds	r2, r2, r1
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	60eb      	str	r3, [r5, #12]
 800af9a:	60ab      	str	r3, [r5, #8]
 800af9c:	7013      	strb	r3, [r2, #0]
 800af9e:	65ab      	str	r3, [r5, #88]	; 0x58
 800afa0:	9b03      	ldr	r3, [sp, #12]
 800afa2:	2205      	movs	r2, #5
 800afa4:	7819      	ldrb	r1, [r3, #0]
 800afa6:	485d      	ldr	r0, [pc, #372]	; (800b11c <_vfiprintf_r+0x260>)
 800afa8:	f7ff fa36 	bl	800a418 <memchr>
 800afac:	9b03      	ldr	r3, [sp, #12]
 800afae:	1c5f      	adds	r7, r3, #1
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d120      	bne.n	800aff6 <_vfiprintf_r+0x13a>
 800afb4:	682a      	ldr	r2, [r5, #0]
 800afb6:	06d3      	lsls	r3, r2, #27
 800afb8:	d504      	bpl.n	800afc4 <_vfiprintf_r+0x108>
 800afba:	2353      	movs	r3, #83	; 0x53
 800afbc:	a904      	add	r1, sp, #16
 800afbe:	185b      	adds	r3, r3, r1
 800afc0:	2120      	movs	r1, #32
 800afc2:	7019      	strb	r1, [r3, #0]
 800afc4:	0713      	lsls	r3, r2, #28
 800afc6:	d504      	bpl.n	800afd2 <_vfiprintf_r+0x116>
 800afc8:	2353      	movs	r3, #83	; 0x53
 800afca:	a904      	add	r1, sp, #16
 800afcc:	185b      	adds	r3, r3, r1
 800afce:	212b      	movs	r1, #43	; 0x2b
 800afd0:	7019      	strb	r1, [r3, #0]
 800afd2:	9b03      	ldr	r3, [sp, #12]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	2b2a      	cmp	r3, #42	; 0x2a
 800afd8:	d016      	beq.n	800b008 <_vfiprintf_r+0x14c>
 800afda:	2100      	movs	r1, #0
 800afdc:	68eb      	ldr	r3, [r5, #12]
 800afde:	9f03      	ldr	r7, [sp, #12]
 800afe0:	783a      	ldrb	r2, [r7, #0]
 800afe2:	1c78      	adds	r0, r7, #1
 800afe4:	3a30      	subs	r2, #48	; 0x30
 800afe6:	4684      	mov	ip, r0
 800afe8:	2a09      	cmp	r2, #9
 800afea:	d94f      	bls.n	800b08c <_vfiprintf_r+0x1d0>
 800afec:	2900      	cmp	r1, #0
 800afee:	d111      	bne.n	800b014 <_vfiprintf_r+0x158>
 800aff0:	e017      	b.n	800b022 <_vfiprintf_r+0x166>
 800aff2:	3701      	adds	r7, #1
 800aff4:	e7a9      	b.n	800af4a <_vfiprintf_r+0x8e>
 800aff6:	4b49      	ldr	r3, [pc, #292]	; (800b11c <_vfiprintf_r+0x260>)
 800aff8:	682a      	ldr	r2, [r5, #0]
 800affa:	1ac0      	subs	r0, r0, r3
 800affc:	2301      	movs	r3, #1
 800affe:	4083      	lsls	r3, r0
 800b000:	4313      	orrs	r3, r2
 800b002:	602b      	str	r3, [r5, #0]
 800b004:	9703      	str	r7, [sp, #12]
 800b006:	e7cb      	b.n	800afa0 <_vfiprintf_r+0xe4>
 800b008:	9b07      	ldr	r3, [sp, #28]
 800b00a:	1d19      	adds	r1, r3, #4
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	9107      	str	r1, [sp, #28]
 800b010:	2b00      	cmp	r3, #0
 800b012:	db01      	blt.n	800b018 <_vfiprintf_r+0x15c>
 800b014:	930b      	str	r3, [sp, #44]	; 0x2c
 800b016:	e004      	b.n	800b022 <_vfiprintf_r+0x166>
 800b018:	425b      	negs	r3, r3
 800b01a:	60eb      	str	r3, [r5, #12]
 800b01c:	2302      	movs	r3, #2
 800b01e:	4313      	orrs	r3, r2
 800b020:	602b      	str	r3, [r5, #0]
 800b022:	783b      	ldrb	r3, [r7, #0]
 800b024:	2b2e      	cmp	r3, #46	; 0x2e
 800b026:	d10a      	bne.n	800b03e <_vfiprintf_r+0x182>
 800b028:	787b      	ldrb	r3, [r7, #1]
 800b02a:	2b2a      	cmp	r3, #42	; 0x2a
 800b02c:	d137      	bne.n	800b09e <_vfiprintf_r+0x1e2>
 800b02e:	9b07      	ldr	r3, [sp, #28]
 800b030:	3702      	adds	r7, #2
 800b032:	1d1a      	adds	r2, r3, #4
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	9207      	str	r2, [sp, #28]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	db2d      	blt.n	800b098 <_vfiprintf_r+0x1dc>
 800b03c:	9309      	str	r3, [sp, #36]	; 0x24
 800b03e:	2203      	movs	r2, #3
 800b040:	7839      	ldrb	r1, [r7, #0]
 800b042:	4837      	ldr	r0, [pc, #220]	; (800b120 <_vfiprintf_r+0x264>)
 800b044:	f7ff f9e8 	bl	800a418 <memchr>
 800b048:	2800      	cmp	r0, #0
 800b04a:	d007      	beq.n	800b05c <_vfiprintf_r+0x1a0>
 800b04c:	4b34      	ldr	r3, [pc, #208]	; (800b120 <_vfiprintf_r+0x264>)
 800b04e:	682a      	ldr	r2, [r5, #0]
 800b050:	1ac0      	subs	r0, r0, r3
 800b052:	2340      	movs	r3, #64	; 0x40
 800b054:	4083      	lsls	r3, r0
 800b056:	4313      	orrs	r3, r2
 800b058:	3701      	adds	r7, #1
 800b05a:	602b      	str	r3, [r5, #0]
 800b05c:	7839      	ldrb	r1, [r7, #0]
 800b05e:	1c7b      	adds	r3, r7, #1
 800b060:	2206      	movs	r2, #6
 800b062:	4830      	ldr	r0, [pc, #192]	; (800b124 <_vfiprintf_r+0x268>)
 800b064:	9303      	str	r3, [sp, #12]
 800b066:	7629      	strb	r1, [r5, #24]
 800b068:	f7ff f9d6 	bl	800a418 <memchr>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d045      	beq.n	800b0fc <_vfiprintf_r+0x240>
 800b070:	4b2d      	ldr	r3, [pc, #180]	; (800b128 <_vfiprintf_r+0x26c>)
 800b072:	2b00      	cmp	r3, #0
 800b074:	d127      	bne.n	800b0c6 <_vfiprintf_r+0x20a>
 800b076:	2207      	movs	r2, #7
 800b078:	9b07      	ldr	r3, [sp, #28]
 800b07a:	3307      	adds	r3, #7
 800b07c:	4393      	bics	r3, r2
 800b07e:	3308      	adds	r3, #8
 800b080:	9307      	str	r3, [sp, #28]
 800b082:	696b      	ldr	r3, [r5, #20]
 800b084:	9a04      	ldr	r2, [sp, #16]
 800b086:	189b      	adds	r3, r3, r2
 800b088:	616b      	str	r3, [r5, #20]
 800b08a:	e75d      	b.n	800af48 <_vfiprintf_r+0x8c>
 800b08c:	210a      	movs	r1, #10
 800b08e:	434b      	muls	r3, r1
 800b090:	4667      	mov	r7, ip
 800b092:	189b      	adds	r3, r3, r2
 800b094:	3909      	subs	r1, #9
 800b096:	e7a3      	b.n	800afe0 <_vfiprintf_r+0x124>
 800b098:	2301      	movs	r3, #1
 800b09a:	425b      	negs	r3, r3
 800b09c:	e7ce      	b.n	800b03c <_vfiprintf_r+0x180>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	001a      	movs	r2, r3
 800b0a2:	3701      	adds	r7, #1
 800b0a4:	606b      	str	r3, [r5, #4]
 800b0a6:	7839      	ldrb	r1, [r7, #0]
 800b0a8:	1c78      	adds	r0, r7, #1
 800b0aa:	3930      	subs	r1, #48	; 0x30
 800b0ac:	4684      	mov	ip, r0
 800b0ae:	2909      	cmp	r1, #9
 800b0b0:	d903      	bls.n	800b0ba <_vfiprintf_r+0x1fe>
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d0c3      	beq.n	800b03e <_vfiprintf_r+0x182>
 800b0b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b0b8:	e7c1      	b.n	800b03e <_vfiprintf_r+0x182>
 800b0ba:	230a      	movs	r3, #10
 800b0bc:	435a      	muls	r2, r3
 800b0be:	4667      	mov	r7, ip
 800b0c0:	1852      	adds	r2, r2, r1
 800b0c2:	3b09      	subs	r3, #9
 800b0c4:	e7ef      	b.n	800b0a6 <_vfiprintf_r+0x1ea>
 800b0c6:	ab07      	add	r3, sp, #28
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	0022      	movs	r2, r4
 800b0cc:	0029      	movs	r1, r5
 800b0ce:	0030      	movs	r0, r6
 800b0d0:	4b16      	ldr	r3, [pc, #88]	; (800b12c <_vfiprintf_r+0x270>)
 800b0d2:	f7fd fd6d 	bl	8008bb0 <_printf_float>
 800b0d6:	9004      	str	r0, [sp, #16]
 800b0d8:	9b04      	ldr	r3, [sp, #16]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	d1d1      	bne.n	800b082 <_vfiprintf_r+0x1c6>
 800b0de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0e0:	07db      	lsls	r3, r3, #31
 800b0e2:	d405      	bmi.n	800b0f0 <_vfiprintf_r+0x234>
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	059b      	lsls	r3, r3, #22
 800b0e8:	d402      	bmi.n	800b0f0 <_vfiprintf_r+0x234>
 800b0ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0ec:	f000 fac6 	bl	800b67c <__retarget_lock_release_recursive>
 800b0f0:	89a3      	ldrh	r3, [r4, #12]
 800b0f2:	065b      	lsls	r3, r3, #25
 800b0f4:	d500      	bpl.n	800b0f8 <_vfiprintf_r+0x23c>
 800b0f6:	e70a      	b.n	800af0e <_vfiprintf_r+0x52>
 800b0f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b0fa:	e70a      	b.n	800af12 <_vfiprintf_r+0x56>
 800b0fc:	ab07      	add	r3, sp, #28
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	0022      	movs	r2, r4
 800b102:	0029      	movs	r1, r5
 800b104:	0030      	movs	r0, r6
 800b106:	4b09      	ldr	r3, [pc, #36]	; (800b12c <_vfiprintf_r+0x270>)
 800b108:	f7fe f810 	bl	800912c <_printf_i>
 800b10c:	e7e3      	b.n	800b0d6 <_vfiprintf_r+0x21a>
 800b10e:	46c0      	nop			; (mov r8, r8)
 800b110:	0800c068 	.word	0x0800c068
 800b114:	0800c088 	.word	0x0800c088
 800b118:	0800c048 	.word	0x0800c048
 800b11c:	0800c034 	.word	0x0800c034
 800b120:	0800c03a 	.word	0x0800c03a
 800b124:	0800c03e 	.word	0x0800c03e
 800b128:	08008bb1 	.word	0x08008bb1
 800b12c:	0800ae97 	.word	0x0800ae97

0800b130 <__swbuf_r>:
 800b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b132:	0005      	movs	r5, r0
 800b134:	000e      	movs	r6, r1
 800b136:	0014      	movs	r4, r2
 800b138:	2800      	cmp	r0, #0
 800b13a:	d004      	beq.n	800b146 <__swbuf_r+0x16>
 800b13c:	6983      	ldr	r3, [r0, #24]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <__swbuf_r+0x16>
 800b142:	f000 f9f9 	bl	800b538 <__sinit>
 800b146:	4b22      	ldr	r3, [pc, #136]	; (800b1d0 <__swbuf_r+0xa0>)
 800b148:	429c      	cmp	r4, r3
 800b14a:	d12e      	bne.n	800b1aa <__swbuf_r+0x7a>
 800b14c:	686c      	ldr	r4, [r5, #4]
 800b14e:	69a3      	ldr	r3, [r4, #24]
 800b150:	60a3      	str	r3, [r4, #8]
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	071b      	lsls	r3, r3, #28
 800b156:	d532      	bpl.n	800b1be <__swbuf_r+0x8e>
 800b158:	6923      	ldr	r3, [r4, #16]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d02f      	beq.n	800b1be <__swbuf_r+0x8e>
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	6922      	ldr	r2, [r4, #16]
 800b162:	b2f7      	uxtb	r7, r6
 800b164:	1a98      	subs	r0, r3, r2
 800b166:	6963      	ldr	r3, [r4, #20]
 800b168:	b2f6      	uxtb	r6, r6
 800b16a:	4283      	cmp	r3, r0
 800b16c:	dc05      	bgt.n	800b17a <__swbuf_r+0x4a>
 800b16e:	0021      	movs	r1, r4
 800b170:	0028      	movs	r0, r5
 800b172:	f000 f93f 	bl	800b3f4 <_fflush_r>
 800b176:	2800      	cmp	r0, #0
 800b178:	d127      	bne.n	800b1ca <__swbuf_r+0x9a>
 800b17a:	68a3      	ldr	r3, [r4, #8]
 800b17c:	3001      	adds	r0, #1
 800b17e:	3b01      	subs	r3, #1
 800b180:	60a3      	str	r3, [r4, #8]
 800b182:	6823      	ldr	r3, [r4, #0]
 800b184:	1c5a      	adds	r2, r3, #1
 800b186:	6022      	str	r2, [r4, #0]
 800b188:	701f      	strb	r7, [r3, #0]
 800b18a:	6963      	ldr	r3, [r4, #20]
 800b18c:	4283      	cmp	r3, r0
 800b18e:	d004      	beq.n	800b19a <__swbuf_r+0x6a>
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	07db      	lsls	r3, r3, #31
 800b194:	d507      	bpl.n	800b1a6 <__swbuf_r+0x76>
 800b196:	2e0a      	cmp	r6, #10
 800b198:	d105      	bne.n	800b1a6 <__swbuf_r+0x76>
 800b19a:	0021      	movs	r1, r4
 800b19c:	0028      	movs	r0, r5
 800b19e:	f000 f929 	bl	800b3f4 <_fflush_r>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d111      	bne.n	800b1ca <__swbuf_r+0x9a>
 800b1a6:	0030      	movs	r0, r6
 800b1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1aa:	4b0a      	ldr	r3, [pc, #40]	; (800b1d4 <__swbuf_r+0xa4>)
 800b1ac:	429c      	cmp	r4, r3
 800b1ae:	d101      	bne.n	800b1b4 <__swbuf_r+0x84>
 800b1b0:	68ac      	ldr	r4, [r5, #8]
 800b1b2:	e7cc      	b.n	800b14e <__swbuf_r+0x1e>
 800b1b4:	4b08      	ldr	r3, [pc, #32]	; (800b1d8 <__swbuf_r+0xa8>)
 800b1b6:	429c      	cmp	r4, r3
 800b1b8:	d1c9      	bne.n	800b14e <__swbuf_r+0x1e>
 800b1ba:	68ec      	ldr	r4, [r5, #12]
 800b1bc:	e7c7      	b.n	800b14e <__swbuf_r+0x1e>
 800b1be:	0021      	movs	r1, r4
 800b1c0:	0028      	movs	r0, r5
 800b1c2:	f000 f80b 	bl	800b1dc <__swsetup_r>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d0c9      	beq.n	800b15e <__swbuf_r+0x2e>
 800b1ca:	2601      	movs	r6, #1
 800b1cc:	4276      	negs	r6, r6
 800b1ce:	e7ea      	b.n	800b1a6 <__swbuf_r+0x76>
 800b1d0:	0800c068 	.word	0x0800c068
 800b1d4:	0800c088 	.word	0x0800c088
 800b1d8:	0800c048 	.word	0x0800c048

0800b1dc <__swsetup_r>:
 800b1dc:	4b37      	ldr	r3, [pc, #220]	; (800b2bc <__swsetup_r+0xe0>)
 800b1de:	b570      	push	{r4, r5, r6, lr}
 800b1e0:	681d      	ldr	r5, [r3, #0]
 800b1e2:	0006      	movs	r6, r0
 800b1e4:	000c      	movs	r4, r1
 800b1e6:	2d00      	cmp	r5, #0
 800b1e8:	d005      	beq.n	800b1f6 <__swsetup_r+0x1a>
 800b1ea:	69ab      	ldr	r3, [r5, #24]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d102      	bne.n	800b1f6 <__swsetup_r+0x1a>
 800b1f0:	0028      	movs	r0, r5
 800b1f2:	f000 f9a1 	bl	800b538 <__sinit>
 800b1f6:	4b32      	ldr	r3, [pc, #200]	; (800b2c0 <__swsetup_r+0xe4>)
 800b1f8:	429c      	cmp	r4, r3
 800b1fa:	d10f      	bne.n	800b21c <__swsetup_r+0x40>
 800b1fc:	686c      	ldr	r4, [r5, #4]
 800b1fe:	230c      	movs	r3, #12
 800b200:	5ee2      	ldrsh	r2, [r4, r3]
 800b202:	b293      	uxth	r3, r2
 800b204:	0711      	lsls	r1, r2, #28
 800b206:	d42d      	bmi.n	800b264 <__swsetup_r+0x88>
 800b208:	06d9      	lsls	r1, r3, #27
 800b20a:	d411      	bmi.n	800b230 <__swsetup_r+0x54>
 800b20c:	2309      	movs	r3, #9
 800b20e:	2001      	movs	r0, #1
 800b210:	6033      	str	r3, [r6, #0]
 800b212:	3337      	adds	r3, #55	; 0x37
 800b214:	4313      	orrs	r3, r2
 800b216:	81a3      	strh	r3, [r4, #12]
 800b218:	4240      	negs	r0, r0
 800b21a:	bd70      	pop	{r4, r5, r6, pc}
 800b21c:	4b29      	ldr	r3, [pc, #164]	; (800b2c4 <__swsetup_r+0xe8>)
 800b21e:	429c      	cmp	r4, r3
 800b220:	d101      	bne.n	800b226 <__swsetup_r+0x4a>
 800b222:	68ac      	ldr	r4, [r5, #8]
 800b224:	e7eb      	b.n	800b1fe <__swsetup_r+0x22>
 800b226:	4b28      	ldr	r3, [pc, #160]	; (800b2c8 <__swsetup_r+0xec>)
 800b228:	429c      	cmp	r4, r3
 800b22a:	d1e8      	bne.n	800b1fe <__swsetup_r+0x22>
 800b22c:	68ec      	ldr	r4, [r5, #12]
 800b22e:	e7e6      	b.n	800b1fe <__swsetup_r+0x22>
 800b230:	075b      	lsls	r3, r3, #29
 800b232:	d513      	bpl.n	800b25c <__swsetup_r+0x80>
 800b234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b236:	2900      	cmp	r1, #0
 800b238:	d008      	beq.n	800b24c <__swsetup_r+0x70>
 800b23a:	0023      	movs	r3, r4
 800b23c:	3344      	adds	r3, #68	; 0x44
 800b23e:	4299      	cmp	r1, r3
 800b240:	d002      	beq.n	800b248 <__swsetup_r+0x6c>
 800b242:	0030      	movs	r0, r6
 800b244:	f7fd fb62 	bl	800890c <_free_r>
 800b248:	2300      	movs	r3, #0
 800b24a:	6363      	str	r3, [r4, #52]	; 0x34
 800b24c:	2224      	movs	r2, #36	; 0x24
 800b24e:	89a3      	ldrh	r3, [r4, #12]
 800b250:	4393      	bics	r3, r2
 800b252:	81a3      	strh	r3, [r4, #12]
 800b254:	2300      	movs	r3, #0
 800b256:	6063      	str	r3, [r4, #4]
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	6023      	str	r3, [r4, #0]
 800b25c:	2308      	movs	r3, #8
 800b25e:	89a2      	ldrh	r2, [r4, #12]
 800b260:	4313      	orrs	r3, r2
 800b262:	81a3      	strh	r3, [r4, #12]
 800b264:	6923      	ldr	r3, [r4, #16]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10b      	bne.n	800b282 <__swsetup_r+0xa6>
 800b26a:	21a0      	movs	r1, #160	; 0xa0
 800b26c:	2280      	movs	r2, #128	; 0x80
 800b26e:	89a3      	ldrh	r3, [r4, #12]
 800b270:	0089      	lsls	r1, r1, #2
 800b272:	0092      	lsls	r2, r2, #2
 800b274:	400b      	ands	r3, r1
 800b276:	4293      	cmp	r3, r2
 800b278:	d003      	beq.n	800b282 <__swsetup_r+0xa6>
 800b27a:	0021      	movs	r1, r4
 800b27c:	0030      	movs	r0, r6
 800b27e:	f000 fa27 	bl	800b6d0 <__smakebuf_r>
 800b282:	220c      	movs	r2, #12
 800b284:	5ea3      	ldrsh	r3, [r4, r2]
 800b286:	2001      	movs	r0, #1
 800b288:	001a      	movs	r2, r3
 800b28a:	b299      	uxth	r1, r3
 800b28c:	4002      	ands	r2, r0
 800b28e:	4203      	tst	r3, r0
 800b290:	d00f      	beq.n	800b2b2 <__swsetup_r+0xd6>
 800b292:	2200      	movs	r2, #0
 800b294:	60a2      	str	r2, [r4, #8]
 800b296:	6962      	ldr	r2, [r4, #20]
 800b298:	4252      	negs	r2, r2
 800b29a:	61a2      	str	r2, [r4, #24]
 800b29c:	2000      	movs	r0, #0
 800b29e:	6922      	ldr	r2, [r4, #16]
 800b2a0:	4282      	cmp	r2, r0
 800b2a2:	d1ba      	bne.n	800b21a <__swsetup_r+0x3e>
 800b2a4:	060a      	lsls	r2, r1, #24
 800b2a6:	d5b8      	bpl.n	800b21a <__swsetup_r+0x3e>
 800b2a8:	2240      	movs	r2, #64	; 0x40
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	3801      	subs	r0, #1
 800b2b0:	e7b3      	b.n	800b21a <__swsetup_r+0x3e>
 800b2b2:	0788      	lsls	r0, r1, #30
 800b2b4:	d400      	bmi.n	800b2b8 <__swsetup_r+0xdc>
 800b2b6:	6962      	ldr	r2, [r4, #20]
 800b2b8:	60a2      	str	r2, [r4, #8]
 800b2ba:	e7ef      	b.n	800b29c <__swsetup_r+0xc0>
 800b2bc:	20000010 	.word	0x20000010
 800b2c0:	0800c068 	.word	0x0800c068
 800b2c4:	0800c088 	.word	0x0800c088
 800b2c8:	0800c048 	.word	0x0800c048

0800b2cc <abort>:
 800b2cc:	2006      	movs	r0, #6
 800b2ce:	b510      	push	{r4, lr}
 800b2d0:	f000 fab8 	bl	800b844 <raise>
 800b2d4:	2001      	movs	r0, #1
 800b2d6:	f7f7 fb19 	bl	800290c <_exit>
	...

0800b2dc <__sflush_r>:
 800b2dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2de:	898b      	ldrh	r3, [r1, #12]
 800b2e0:	0005      	movs	r5, r0
 800b2e2:	000c      	movs	r4, r1
 800b2e4:	071a      	lsls	r2, r3, #28
 800b2e6:	d45f      	bmi.n	800b3a8 <__sflush_r+0xcc>
 800b2e8:	684a      	ldr	r2, [r1, #4]
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	dc04      	bgt.n	800b2f8 <__sflush_r+0x1c>
 800b2ee:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b2f0:	2a00      	cmp	r2, #0
 800b2f2:	dc01      	bgt.n	800b2f8 <__sflush_r+0x1c>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b2f8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b2fa:	2f00      	cmp	r7, #0
 800b2fc:	d0fa      	beq.n	800b2f4 <__sflush_r+0x18>
 800b2fe:	2200      	movs	r2, #0
 800b300:	2180      	movs	r1, #128	; 0x80
 800b302:	682e      	ldr	r6, [r5, #0]
 800b304:	602a      	str	r2, [r5, #0]
 800b306:	001a      	movs	r2, r3
 800b308:	0149      	lsls	r1, r1, #5
 800b30a:	400a      	ands	r2, r1
 800b30c:	420b      	tst	r3, r1
 800b30e:	d034      	beq.n	800b37a <__sflush_r+0x9e>
 800b310:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b312:	89a3      	ldrh	r3, [r4, #12]
 800b314:	075b      	lsls	r3, r3, #29
 800b316:	d506      	bpl.n	800b326 <__sflush_r+0x4a>
 800b318:	6863      	ldr	r3, [r4, #4]
 800b31a:	1ac0      	subs	r0, r0, r3
 800b31c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <__sflush_r+0x4a>
 800b322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b324:	1ac0      	subs	r0, r0, r3
 800b326:	0002      	movs	r2, r0
 800b328:	6a21      	ldr	r1, [r4, #32]
 800b32a:	2300      	movs	r3, #0
 800b32c:	0028      	movs	r0, r5
 800b32e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b330:	47b8      	blx	r7
 800b332:	89a1      	ldrh	r1, [r4, #12]
 800b334:	1c43      	adds	r3, r0, #1
 800b336:	d106      	bne.n	800b346 <__sflush_r+0x6a>
 800b338:	682b      	ldr	r3, [r5, #0]
 800b33a:	2b1d      	cmp	r3, #29
 800b33c:	d831      	bhi.n	800b3a2 <__sflush_r+0xc6>
 800b33e:	4a2c      	ldr	r2, [pc, #176]	; (800b3f0 <__sflush_r+0x114>)
 800b340:	40da      	lsrs	r2, r3
 800b342:	07d3      	lsls	r3, r2, #31
 800b344:	d52d      	bpl.n	800b3a2 <__sflush_r+0xc6>
 800b346:	2300      	movs	r3, #0
 800b348:	6063      	str	r3, [r4, #4]
 800b34a:	6923      	ldr	r3, [r4, #16]
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	04cb      	lsls	r3, r1, #19
 800b350:	d505      	bpl.n	800b35e <__sflush_r+0x82>
 800b352:	1c43      	adds	r3, r0, #1
 800b354:	d102      	bne.n	800b35c <__sflush_r+0x80>
 800b356:	682b      	ldr	r3, [r5, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d100      	bne.n	800b35e <__sflush_r+0x82>
 800b35c:	6560      	str	r0, [r4, #84]	; 0x54
 800b35e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b360:	602e      	str	r6, [r5, #0]
 800b362:	2900      	cmp	r1, #0
 800b364:	d0c6      	beq.n	800b2f4 <__sflush_r+0x18>
 800b366:	0023      	movs	r3, r4
 800b368:	3344      	adds	r3, #68	; 0x44
 800b36a:	4299      	cmp	r1, r3
 800b36c:	d002      	beq.n	800b374 <__sflush_r+0x98>
 800b36e:	0028      	movs	r0, r5
 800b370:	f7fd facc 	bl	800890c <_free_r>
 800b374:	2000      	movs	r0, #0
 800b376:	6360      	str	r0, [r4, #52]	; 0x34
 800b378:	e7bd      	b.n	800b2f6 <__sflush_r+0x1a>
 800b37a:	2301      	movs	r3, #1
 800b37c:	0028      	movs	r0, r5
 800b37e:	6a21      	ldr	r1, [r4, #32]
 800b380:	47b8      	blx	r7
 800b382:	1c43      	adds	r3, r0, #1
 800b384:	d1c5      	bne.n	800b312 <__sflush_r+0x36>
 800b386:	682b      	ldr	r3, [r5, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d0c2      	beq.n	800b312 <__sflush_r+0x36>
 800b38c:	2b1d      	cmp	r3, #29
 800b38e:	d001      	beq.n	800b394 <__sflush_r+0xb8>
 800b390:	2b16      	cmp	r3, #22
 800b392:	d101      	bne.n	800b398 <__sflush_r+0xbc>
 800b394:	602e      	str	r6, [r5, #0]
 800b396:	e7ad      	b.n	800b2f4 <__sflush_r+0x18>
 800b398:	2340      	movs	r3, #64	; 0x40
 800b39a:	89a2      	ldrh	r2, [r4, #12]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	81a3      	strh	r3, [r4, #12]
 800b3a0:	e7a9      	b.n	800b2f6 <__sflush_r+0x1a>
 800b3a2:	2340      	movs	r3, #64	; 0x40
 800b3a4:	430b      	orrs	r3, r1
 800b3a6:	e7fa      	b.n	800b39e <__sflush_r+0xc2>
 800b3a8:	690f      	ldr	r7, [r1, #16]
 800b3aa:	2f00      	cmp	r7, #0
 800b3ac:	d0a2      	beq.n	800b2f4 <__sflush_r+0x18>
 800b3ae:	680a      	ldr	r2, [r1, #0]
 800b3b0:	600f      	str	r7, [r1, #0]
 800b3b2:	1bd2      	subs	r2, r2, r7
 800b3b4:	9201      	str	r2, [sp, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	079b      	lsls	r3, r3, #30
 800b3ba:	d100      	bne.n	800b3be <__sflush_r+0xe2>
 800b3bc:	694a      	ldr	r2, [r1, #20]
 800b3be:	60a2      	str	r2, [r4, #8]
 800b3c0:	9b01      	ldr	r3, [sp, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	dc00      	bgt.n	800b3c8 <__sflush_r+0xec>
 800b3c6:	e795      	b.n	800b2f4 <__sflush_r+0x18>
 800b3c8:	003a      	movs	r2, r7
 800b3ca:	0028      	movs	r0, r5
 800b3cc:	9b01      	ldr	r3, [sp, #4]
 800b3ce:	6a21      	ldr	r1, [r4, #32]
 800b3d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3d2:	47b0      	blx	r6
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	dc06      	bgt.n	800b3e6 <__sflush_r+0x10a>
 800b3d8:	2340      	movs	r3, #64	; 0x40
 800b3da:	2001      	movs	r0, #1
 800b3dc:	89a2      	ldrh	r2, [r4, #12]
 800b3de:	4240      	negs	r0, r0
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	81a3      	strh	r3, [r4, #12]
 800b3e4:	e787      	b.n	800b2f6 <__sflush_r+0x1a>
 800b3e6:	9b01      	ldr	r3, [sp, #4]
 800b3e8:	183f      	adds	r7, r7, r0
 800b3ea:	1a1b      	subs	r3, r3, r0
 800b3ec:	9301      	str	r3, [sp, #4]
 800b3ee:	e7e7      	b.n	800b3c0 <__sflush_r+0xe4>
 800b3f0:	20400001 	.word	0x20400001

0800b3f4 <_fflush_r>:
 800b3f4:	690b      	ldr	r3, [r1, #16]
 800b3f6:	b570      	push	{r4, r5, r6, lr}
 800b3f8:	0005      	movs	r5, r0
 800b3fa:	000c      	movs	r4, r1
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d102      	bne.n	800b406 <_fflush_r+0x12>
 800b400:	2500      	movs	r5, #0
 800b402:	0028      	movs	r0, r5
 800b404:	bd70      	pop	{r4, r5, r6, pc}
 800b406:	2800      	cmp	r0, #0
 800b408:	d004      	beq.n	800b414 <_fflush_r+0x20>
 800b40a:	6983      	ldr	r3, [r0, #24]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d101      	bne.n	800b414 <_fflush_r+0x20>
 800b410:	f000 f892 	bl	800b538 <__sinit>
 800b414:	4b14      	ldr	r3, [pc, #80]	; (800b468 <_fflush_r+0x74>)
 800b416:	429c      	cmp	r4, r3
 800b418:	d11b      	bne.n	800b452 <_fflush_r+0x5e>
 800b41a:	686c      	ldr	r4, [r5, #4]
 800b41c:	220c      	movs	r2, #12
 800b41e:	5ea3      	ldrsh	r3, [r4, r2]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d0ed      	beq.n	800b400 <_fflush_r+0xc>
 800b424:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b426:	07d2      	lsls	r2, r2, #31
 800b428:	d404      	bmi.n	800b434 <_fflush_r+0x40>
 800b42a:	059b      	lsls	r3, r3, #22
 800b42c:	d402      	bmi.n	800b434 <_fflush_r+0x40>
 800b42e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b430:	f000 f923 	bl	800b67a <__retarget_lock_acquire_recursive>
 800b434:	0028      	movs	r0, r5
 800b436:	0021      	movs	r1, r4
 800b438:	f7ff ff50 	bl	800b2dc <__sflush_r>
 800b43c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b43e:	0005      	movs	r5, r0
 800b440:	07db      	lsls	r3, r3, #31
 800b442:	d4de      	bmi.n	800b402 <_fflush_r+0xe>
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	059b      	lsls	r3, r3, #22
 800b448:	d4db      	bmi.n	800b402 <_fflush_r+0xe>
 800b44a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b44c:	f000 f916 	bl	800b67c <__retarget_lock_release_recursive>
 800b450:	e7d7      	b.n	800b402 <_fflush_r+0xe>
 800b452:	4b06      	ldr	r3, [pc, #24]	; (800b46c <_fflush_r+0x78>)
 800b454:	429c      	cmp	r4, r3
 800b456:	d101      	bne.n	800b45c <_fflush_r+0x68>
 800b458:	68ac      	ldr	r4, [r5, #8]
 800b45a:	e7df      	b.n	800b41c <_fflush_r+0x28>
 800b45c:	4b04      	ldr	r3, [pc, #16]	; (800b470 <_fflush_r+0x7c>)
 800b45e:	429c      	cmp	r4, r3
 800b460:	d1dc      	bne.n	800b41c <_fflush_r+0x28>
 800b462:	68ec      	ldr	r4, [r5, #12]
 800b464:	e7da      	b.n	800b41c <_fflush_r+0x28>
 800b466:	46c0      	nop			; (mov r8, r8)
 800b468:	0800c068 	.word	0x0800c068
 800b46c:	0800c088 	.word	0x0800c088
 800b470:	0800c048 	.word	0x0800c048

0800b474 <std>:
 800b474:	2300      	movs	r3, #0
 800b476:	b510      	push	{r4, lr}
 800b478:	0004      	movs	r4, r0
 800b47a:	6003      	str	r3, [r0, #0]
 800b47c:	6043      	str	r3, [r0, #4]
 800b47e:	6083      	str	r3, [r0, #8]
 800b480:	8181      	strh	r1, [r0, #12]
 800b482:	6643      	str	r3, [r0, #100]	; 0x64
 800b484:	0019      	movs	r1, r3
 800b486:	81c2      	strh	r2, [r0, #14]
 800b488:	6103      	str	r3, [r0, #16]
 800b48a:	6143      	str	r3, [r0, #20]
 800b48c:	6183      	str	r3, [r0, #24]
 800b48e:	2208      	movs	r2, #8
 800b490:	305c      	adds	r0, #92	; 0x5c
 800b492:	f7fd fa32 	bl	80088fa <memset>
 800b496:	4b05      	ldr	r3, [pc, #20]	; (800b4ac <std+0x38>)
 800b498:	6263      	str	r3, [r4, #36]	; 0x24
 800b49a:	4b05      	ldr	r3, [pc, #20]	; (800b4b0 <std+0x3c>)
 800b49c:	6224      	str	r4, [r4, #32]
 800b49e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4a0:	4b04      	ldr	r3, [pc, #16]	; (800b4b4 <std+0x40>)
 800b4a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4a4:	4b04      	ldr	r3, [pc, #16]	; (800b4b8 <std+0x44>)
 800b4a6:	6323      	str	r3, [r4, #48]	; 0x30
 800b4a8:	bd10      	pop	{r4, pc}
 800b4aa:	46c0      	nop			; (mov r8, r8)
 800b4ac:	0800b885 	.word	0x0800b885
 800b4b0:	0800b8ad 	.word	0x0800b8ad
 800b4b4:	0800b8e5 	.word	0x0800b8e5
 800b4b8:	0800b911 	.word	0x0800b911

0800b4bc <_cleanup_r>:
 800b4bc:	b510      	push	{r4, lr}
 800b4be:	4902      	ldr	r1, [pc, #8]	; (800b4c8 <_cleanup_r+0xc>)
 800b4c0:	f000 f8ba 	bl	800b638 <_fwalk_reent>
 800b4c4:	bd10      	pop	{r4, pc}
 800b4c6:	46c0      	nop			; (mov r8, r8)
 800b4c8:	0800b3f5 	.word	0x0800b3f5

0800b4cc <__sfmoreglue>:
 800b4cc:	b570      	push	{r4, r5, r6, lr}
 800b4ce:	2568      	movs	r5, #104	; 0x68
 800b4d0:	1e4a      	subs	r2, r1, #1
 800b4d2:	4355      	muls	r5, r2
 800b4d4:	000e      	movs	r6, r1
 800b4d6:	0029      	movs	r1, r5
 800b4d8:	3174      	adds	r1, #116	; 0x74
 800b4da:	f7fd fa61 	bl	80089a0 <_malloc_r>
 800b4de:	1e04      	subs	r4, r0, #0
 800b4e0:	d008      	beq.n	800b4f4 <__sfmoreglue+0x28>
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	002a      	movs	r2, r5
 800b4e6:	6001      	str	r1, [r0, #0]
 800b4e8:	6046      	str	r6, [r0, #4]
 800b4ea:	300c      	adds	r0, #12
 800b4ec:	60a0      	str	r0, [r4, #8]
 800b4ee:	3268      	adds	r2, #104	; 0x68
 800b4f0:	f7fd fa03 	bl	80088fa <memset>
 800b4f4:	0020      	movs	r0, r4
 800b4f6:	bd70      	pop	{r4, r5, r6, pc}

0800b4f8 <__sfp_lock_acquire>:
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	4802      	ldr	r0, [pc, #8]	; (800b504 <__sfp_lock_acquire+0xc>)
 800b4fc:	f000 f8bd 	bl	800b67a <__retarget_lock_acquire_recursive>
 800b500:	bd10      	pop	{r4, pc}
 800b502:	46c0      	nop			; (mov r8, r8)
 800b504:	200005b0 	.word	0x200005b0

0800b508 <__sfp_lock_release>:
 800b508:	b510      	push	{r4, lr}
 800b50a:	4802      	ldr	r0, [pc, #8]	; (800b514 <__sfp_lock_release+0xc>)
 800b50c:	f000 f8b6 	bl	800b67c <__retarget_lock_release_recursive>
 800b510:	bd10      	pop	{r4, pc}
 800b512:	46c0      	nop			; (mov r8, r8)
 800b514:	200005b0 	.word	0x200005b0

0800b518 <__sinit_lock_acquire>:
 800b518:	b510      	push	{r4, lr}
 800b51a:	4802      	ldr	r0, [pc, #8]	; (800b524 <__sinit_lock_acquire+0xc>)
 800b51c:	f000 f8ad 	bl	800b67a <__retarget_lock_acquire_recursive>
 800b520:	bd10      	pop	{r4, pc}
 800b522:	46c0      	nop			; (mov r8, r8)
 800b524:	200005ab 	.word	0x200005ab

0800b528 <__sinit_lock_release>:
 800b528:	b510      	push	{r4, lr}
 800b52a:	4802      	ldr	r0, [pc, #8]	; (800b534 <__sinit_lock_release+0xc>)
 800b52c:	f000 f8a6 	bl	800b67c <__retarget_lock_release_recursive>
 800b530:	bd10      	pop	{r4, pc}
 800b532:	46c0      	nop			; (mov r8, r8)
 800b534:	200005ab 	.word	0x200005ab

0800b538 <__sinit>:
 800b538:	b513      	push	{r0, r1, r4, lr}
 800b53a:	0004      	movs	r4, r0
 800b53c:	f7ff ffec 	bl	800b518 <__sinit_lock_acquire>
 800b540:	69a3      	ldr	r3, [r4, #24]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d002      	beq.n	800b54c <__sinit+0x14>
 800b546:	f7ff ffef 	bl	800b528 <__sinit_lock_release>
 800b54a:	bd13      	pop	{r0, r1, r4, pc}
 800b54c:	64a3      	str	r3, [r4, #72]	; 0x48
 800b54e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b550:	6523      	str	r3, [r4, #80]	; 0x50
 800b552:	4b13      	ldr	r3, [pc, #76]	; (800b5a0 <__sinit+0x68>)
 800b554:	4a13      	ldr	r2, [pc, #76]	; (800b5a4 <__sinit+0x6c>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	62a2      	str	r2, [r4, #40]	; 0x28
 800b55a:	9301      	str	r3, [sp, #4]
 800b55c:	42a3      	cmp	r3, r4
 800b55e:	d101      	bne.n	800b564 <__sinit+0x2c>
 800b560:	2301      	movs	r3, #1
 800b562:	61a3      	str	r3, [r4, #24]
 800b564:	0020      	movs	r0, r4
 800b566:	f000 f81f 	bl	800b5a8 <__sfp>
 800b56a:	6060      	str	r0, [r4, #4]
 800b56c:	0020      	movs	r0, r4
 800b56e:	f000 f81b 	bl	800b5a8 <__sfp>
 800b572:	60a0      	str	r0, [r4, #8]
 800b574:	0020      	movs	r0, r4
 800b576:	f000 f817 	bl	800b5a8 <__sfp>
 800b57a:	2200      	movs	r2, #0
 800b57c:	2104      	movs	r1, #4
 800b57e:	60e0      	str	r0, [r4, #12]
 800b580:	6860      	ldr	r0, [r4, #4]
 800b582:	f7ff ff77 	bl	800b474 <std>
 800b586:	2201      	movs	r2, #1
 800b588:	2109      	movs	r1, #9
 800b58a:	68a0      	ldr	r0, [r4, #8]
 800b58c:	f7ff ff72 	bl	800b474 <std>
 800b590:	2202      	movs	r2, #2
 800b592:	2112      	movs	r1, #18
 800b594:	68e0      	ldr	r0, [r4, #12]
 800b596:	f7ff ff6d 	bl	800b474 <std>
 800b59a:	2301      	movs	r3, #1
 800b59c:	61a3      	str	r3, [r4, #24]
 800b59e:	e7d2      	b.n	800b546 <__sinit+0xe>
 800b5a0:	0800bc48 	.word	0x0800bc48
 800b5a4:	0800b4bd 	.word	0x0800b4bd

0800b5a8 <__sfp>:
 800b5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5aa:	0007      	movs	r7, r0
 800b5ac:	f7ff ffa4 	bl	800b4f8 <__sfp_lock_acquire>
 800b5b0:	4b1f      	ldr	r3, [pc, #124]	; (800b630 <__sfp+0x88>)
 800b5b2:	681e      	ldr	r6, [r3, #0]
 800b5b4:	69b3      	ldr	r3, [r6, #24]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d102      	bne.n	800b5c0 <__sfp+0x18>
 800b5ba:	0030      	movs	r0, r6
 800b5bc:	f7ff ffbc 	bl	800b538 <__sinit>
 800b5c0:	3648      	adds	r6, #72	; 0x48
 800b5c2:	68b4      	ldr	r4, [r6, #8]
 800b5c4:	6873      	ldr	r3, [r6, #4]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	d504      	bpl.n	800b5d4 <__sfp+0x2c>
 800b5ca:	6833      	ldr	r3, [r6, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d022      	beq.n	800b616 <__sfp+0x6e>
 800b5d0:	6836      	ldr	r6, [r6, #0]
 800b5d2:	e7f6      	b.n	800b5c2 <__sfp+0x1a>
 800b5d4:	220c      	movs	r2, #12
 800b5d6:	5ea5      	ldrsh	r5, [r4, r2]
 800b5d8:	2d00      	cmp	r5, #0
 800b5da:	d11a      	bne.n	800b612 <__sfp+0x6a>
 800b5dc:	0020      	movs	r0, r4
 800b5de:	4b15      	ldr	r3, [pc, #84]	; (800b634 <__sfp+0x8c>)
 800b5e0:	3058      	adds	r0, #88	; 0x58
 800b5e2:	60e3      	str	r3, [r4, #12]
 800b5e4:	6665      	str	r5, [r4, #100]	; 0x64
 800b5e6:	f000 f847 	bl	800b678 <__retarget_lock_init_recursive>
 800b5ea:	f7ff ff8d 	bl	800b508 <__sfp_lock_release>
 800b5ee:	0020      	movs	r0, r4
 800b5f0:	2208      	movs	r2, #8
 800b5f2:	0029      	movs	r1, r5
 800b5f4:	6025      	str	r5, [r4, #0]
 800b5f6:	60a5      	str	r5, [r4, #8]
 800b5f8:	6065      	str	r5, [r4, #4]
 800b5fa:	6125      	str	r5, [r4, #16]
 800b5fc:	6165      	str	r5, [r4, #20]
 800b5fe:	61a5      	str	r5, [r4, #24]
 800b600:	305c      	adds	r0, #92	; 0x5c
 800b602:	f7fd f97a 	bl	80088fa <memset>
 800b606:	6365      	str	r5, [r4, #52]	; 0x34
 800b608:	63a5      	str	r5, [r4, #56]	; 0x38
 800b60a:	64a5      	str	r5, [r4, #72]	; 0x48
 800b60c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b60e:	0020      	movs	r0, r4
 800b610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b612:	3468      	adds	r4, #104	; 0x68
 800b614:	e7d7      	b.n	800b5c6 <__sfp+0x1e>
 800b616:	2104      	movs	r1, #4
 800b618:	0038      	movs	r0, r7
 800b61a:	f7ff ff57 	bl	800b4cc <__sfmoreglue>
 800b61e:	1e04      	subs	r4, r0, #0
 800b620:	6030      	str	r0, [r6, #0]
 800b622:	d1d5      	bne.n	800b5d0 <__sfp+0x28>
 800b624:	f7ff ff70 	bl	800b508 <__sfp_lock_release>
 800b628:	230c      	movs	r3, #12
 800b62a:	603b      	str	r3, [r7, #0]
 800b62c:	e7ef      	b.n	800b60e <__sfp+0x66>
 800b62e:	46c0      	nop			; (mov r8, r8)
 800b630:	0800bc48 	.word	0x0800bc48
 800b634:	ffff0001 	.word	0xffff0001

0800b638 <_fwalk_reent>:
 800b638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b63a:	0004      	movs	r4, r0
 800b63c:	0006      	movs	r6, r0
 800b63e:	2700      	movs	r7, #0
 800b640:	9101      	str	r1, [sp, #4]
 800b642:	3448      	adds	r4, #72	; 0x48
 800b644:	6863      	ldr	r3, [r4, #4]
 800b646:	68a5      	ldr	r5, [r4, #8]
 800b648:	9300      	str	r3, [sp, #0]
 800b64a:	9b00      	ldr	r3, [sp, #0]
 800b64c:	3b01      	subs	r3, #1
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	d504      	bpl.n	800b65c <_fwalk_reent+0x24>
 800b652:	6824      	ldr	r4, [r4, #0]
 800b654:	2c00      	cmp	r4, #0
 800b656:	d1f5      	bne.n	800b644 <_fwalk_reent+0xc>
 800b658:	0038      	movs	r0, r7
 800b65a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b65c:	89ab      	ldrh	r3, [r5, #12]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d908      	bls.n	800b674 <_fwalk_reent+0x3c>
 800b662:	220e      	movs	r2, #14
 800b664:	5eab      	ldrsh	r3, [r5, r2]
 800b666:	3301      	adds	r3, #1
 800b668:	d004      	beq.n	800b674 <_fwalk_reent+0x3c>
 800b66a:	0029      	movs	r1, r5
 800b66c:	0030      	movs	r0, r6
 800b66e:	9b01      	ldr	r3, [sp, #4]
 800b670:	4798      	blx	r3
 800b672:	4307      	orrs	r7, r0
 800b674:	3568      	adds	r5, #104	; 0x68
 800b676:	e7e8      	b.n	800b64a <_fwalk_reent+0x12>

0800b678 <__retarget_lock_init_recursive>:
 800b678:	4770      	bx	lr

0800b67a <__retarget_lock_acquire_recursive>:
 800b67a:	4770      	bx	lr

0800b67c <__retarget_lock_release_recursive>:
 800b67c:	4770      	bx	lr
	...

0800b680 <__swhatbuf_r>:
 800b680:	b570      	push	{r4, r5, r6, lr}
 800b682:	000e      	movs	r6, r1
 800b684:	001d      	movs	r5, r3
 800b686:	230e      	movs	r3, #14
 800b688:	5ec9      	ldrsh	r1, [r1, r3]
 800b68a:	0014      	movs	r4, r2
 800b68c:	b096      	sub	sp, #88	; 0x58
 800b68e:	2900      	cmp	r1, #0
 800b690:	da07      	bge.n	800b6a2 <__swhatbuf_r+0x22>
 800b692:	2300      	movs	r3, #0
 800b694:	602b      	str	r3, [r5, #0]
 800b696:	89b3      	ldrh	r3, [r6, #12]
 800b698:	061b      	lsls	r3, r3, #24
 800b69a:	d411      	bmi.n	800b6c0 <__swhatbuf_r+0x40>
 800b69c:	2380      	movs	r3, #128	; 0x80
 800b69e:	00db      	lsls	r3, r3, #3
 800b6a0:	e00f      	b.n	800b6c2 <__swhatbuf_r+0x42>
 800b6a2:	466a      	mov	r2, sp
 800b6a4:	f000 f96e 	bl	800b984 <_fstat_r>
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	dbf2      	blt.n	800b692 <__swhatbuf_r+0x12>
 800b6ac:	23f0      	movs	r3, #240	; 0xf0
 800b6ae:	9901      	ldr	r1, [sp, #4]
 800b6b0:	021b      	lsls	r3, r3, #8
 800b6b2:	4019      	ands	r1, r3
 800b6b4:	4b05      	ldr	r3, [pc, #20]	; (800b6cc <__swhatbuf_r+0x4c>)
 800b6b6:	18c9      	adds	r1, r1, r3
 800b6b8:	424b      	negs	r3, r1
 800b6ba:	4159      	adcs	r1, r3
 800b6bc:	6029      	str	r1, [r5, #0]
 800b6be:	e7ed      	b.n	800b69c <__swhatbuf_r+0x1c>
 800b6c0:	2340      	movs	r3, #64	; 0x40
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	b016      	add	sp, #88	; 0x58
 800b6c8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ca:	46c0      	nop			; (mov r8, r8)
 800b6cc:	ffffe000 	.word	0xffffe000

0800b6d0 <__smakebuf_r>:
 800b6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6d2:	2602      	movs	r6, #2
 800b6d4:	898b      	ldrh	r3, [r1, #12]
 800b6d6:	0005      	movs	r5, r0
 800b6d8:	000c      	movs	r4, r1
 800b6da:	4233      	tst	r3, r6
 800b6dc:	d006      	beq.n	800b6ec <__smakebuf_r+0x1c>
 800b6de:	0023      	movs	r3, r4
 800b6e0:	3347      	adds	r3, #71	; 0x47
 800b6e2:	6023      	str	r3, [r4, #0]
 800b6e4:	6123      	str	r3, [r4, #16]
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	6163      	str	r3, [r4, #20]
 800b6ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b6ec:	466a      	mov	r2, sp
 800b6ee:	ab01      	add	r3, sp, #4
 800b6f0:	f7ff ffc6 	bl	800b680 <__swhatbuf_r>
 800b6f4:	9900      	ldr	r1, [sp, #0]
 800b6f6:	0007      	movs	r7, r0
 800b6f8:	0028      	movs	r0, r5
 800b6fa:	f7fd f951 	bl	80089a0 <_malloc_r>
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d108      	bne.n	800b714 <__smakebuf_r+0x44>
 800b702:	220c      	movs	r2, #12
 800b704:	5ea3      	ldrsh	r3, [r4, r2]
 800b706:	059a      	lsls	r2, r3, #22
 800b708:	d4ef      	bmi.n	800b6ea <__smakebuf_r+0x1a>
 800b70a:	2203      	movs	r2, #3
 800b70c:	4393      	bics	r3, r2
 800b70e:	431e      	orrs	r6, r3
 800b710:	81a6      	strh	r6, [r4, #12]
 800b712:	e7e4      	b.n	800b6de <__smakebuf_r+0xe>
 800b714:	4b0f      	ldr	r3, [pc, #60]	; (800b754 <__smakebuf_r+0x84>)
 800b716:	62ab      	str	r3, [r5, #40]	; 0x28
 800b718:	2380      	movs	r3, #128	; 0x80
 800b71a:	89a2      	ldrh	r2, [r4, #12]
 800b71c:	6020      	str	r0, [r4, #0]
 800b71e:	4313      	orrs	r3, r2
 800b720:	81a3      	strh	r3, [r4, #12]
 800b722:	9b00      	ldr	r3, [sp, #0]
 800b724:	6120      	str	r0, [r4, #16]
 800b726:	6163      	str	r3, [r4, #20]
 800b728:	9b01      	ldr	r3, [sp, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00d      	beq.n	800b74a <__smakebuf_r+0x7a>
 800b72e:	0028      	movs	r0, r5
 800b730:	230e      	movs	r3, #14
 800b732:	5ee1      	ldrsh	r1, [r4, r3]
 800b734:	f000 f938 	bl	800b9a8 <_isatty_r>
 800b738:	2800      	cmp	r0, #0
 800b73a:	d006      	beq.n	800b74a <__smakebuf_r+0x7a>
 800b73c:	2203      	movs	r2, #3
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	4393      	bics	r3, r2
 800b742:	001a      	movs	r2, r3
 800b744:	2301      	movs	r3, #1
 800b746:	4313      	orrs	r3, r2
 800b748:	81a3      	strh	r3, [r4, #12]
 800b74a:	89a0      	ldrh	r0, [r4, #12]
 800b74c:	4307      	orrs	r7, r0
 800b74e:	81a7      	strh	r7, [r4, #12]
 800b750:	e7cb      	b.n	800b6ea <__smakebuf_r+0x1a>
 800b752:	46c0      	nop			; (mov r8, r8)
 800b754:	0800b4bd 	.word	0x0800b4bd

0800b758 <__ascii_mbtowc>:
 800b758:	b082      	sub	sp, #8
 800b75a:	2900      	cmp	r1, #0
 800b75c:	d100      	bne.n	800b760 <__ascii_mbtowc+0x8>
 800b75e:	a901      	add	r1, sp, #4
 800b760:	1e10      	subs	r0, r2, #0
 800b762:	d006      	beq.n	800b772 <__ascii_mbtowc+0x1a>
 800b764:	2b00      	cmp	r3, #0
 800b766:	d006      	beq.n	800b776 <__ascii_mbtowc+0x1e>
 800b768:	7813      	ldrb	r3, [r2, #0]
 800b76a:	600b      	str	r3, [r1, #0]
 800b76c:	7810      	ldrb	r0, [r2, #0]
 800b76e:	1e43      	subs	r3, r0, #1
 800b770:	4198      	sbcs	r0, r3
 800b772:	b002      	add	sp, #8
 800b774:	4770      	bx	lr
 800b776:	2002      	movs	r0, #2
 800b778:	4240      	negs	r0, r0
 800b77a:	e7fa      	b.n	800b772 <__ascii_mbtowc+0x1a>

0800b77c <memmove>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	4288      	cmp	r0, r1
 800b780:	d902      	bls.n	800b788 <memmove+0xc>
 800b782:	188b      	adds	r3, r1, r2
 800b784:	4298      	cmp	r0, r3
 800b786:	d303      	bcc.n	800b790 <memmove+0x14>
 800b788:	2300      	movs	r3, #0
 800b78a:	e007      	b.n	800b79c <memmove+0x20>
 800b78c:	5c8b      	ldrb	r3, [r1, r2]
 800b78e:	5483      	strb	r3, [r0, r2]
 800b790:	3a01      	subs	r2, #1
 800b792:	d2fb      	bcs.n	800b78c <memmove+0x10>
 800b794:	bd10      	pop	{r4, pc}
 800b796:	5ccc      	ldrb	r4, [r1, r3]
 800b798:	54c4      	strb	r4, [r0, r3]
 800b79a:	3301      	adds	r3, #1
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d1fa      	bne.n	800b796 <memmove+0x1a>
 800b7a0:	e7f8      	b.n	800b794 <memmove+0x18>

0800b7a2 <_realloc_r>:
 800b7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a4:	0007      	movs	r7, r0
 800b7a6:	000d      	movs	r5, r1
 800b7a8:	0016      	movs	r6, r2
 800b7aa:	2900      	cmp	r1, #0
 800b7ac:	d105      	bne.n	800b7ba <_realloc_r+0x18>
 800b7ae:	0011      	movs	r1, r2
 800b7b0:	f7fd f8f6 	bl	80089a0 <_malloc_r>
 800b7b4:	0004      	movs	r4, r0
 800b7b6:	0020      	movs	r0, r4
 800b7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ba:	2a00      	cmp	r2, #0
 800b7bc:	d103      	bne.n	800b7c6 <_realloc_r+0x24>
 800b7be:	f7fd f8a5 	bl	800890c <_free_r>
 800b7c2:	0034      	movs	r4, r6
 800b7c4:	e7f7      	b.n	800b7b6 <_realloc_r+0x14>
 800b7c6:	f000 f915 	bl	800b9f4 <_malloc_usable_size_r>
 800b7ca:	002c      	movs	r4, r5
 800b7cc:	42b0      	cmp	r0, r6
 800b7ce:	d2f2      	bcs.n	800b7b6 <_realloc_r+0x14>
 800b7d0:	0031      	movs	r1, r6
 800b7d2:	0038      	movs	r0, r7
 800b7d4:	f7fd f8e4 	bl	80089a0 <_malloc_r>
 800b7d8:	1e04      	subs	r4, r0, #0
 800b7da:	d0ec      	beq.n	800b7b6 <_realloc_r+0x14>
 800b7dc:	0029      	movs	r1, r5
 800b7de:	0032      	movs	r2, r6
 800b7e0:	f7fd f882 	bl	80088e8 <memcpy>
 800b7e4:	0029      	movs	r1, r5
 800b7e6:	0038      	movs	r0, r7
 800b7e8:	f7fd f890 	bl	800890c <_free_r>
 800b7ec:	e7e3      	b.n	800b7b6 <_realloc_r+0x14>

0800b7ee <_raise_r>:
 800b7ee:	b570      	push	{r4, r5, r6, lr}
 800b7f0:	0004      	movs	r4, r0
 800b7f2:	000d      	movs	r5, r1
 800b7f4:	291f      	cmp	r1, #31
 800b7f6:	d904      	bls.n	800b802 <_raise_r+0x14>
 800b7f8:	2316      	movs	r3, #22
 800b7fa:	6003      	str	r3, [r0, #0]
 800b7fc:	2001      	movs	r0, #1
 800b7fe:	4240      	negs	r0, r0
 800b800:	bd70      	pop	{r4, r5, r6, pc}
 800b802:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b804:	2b00      	cmp	r3, #0
 800b806:	d004      	beq.n	800b812 <_raise_r+0x24>
 800b808:	008a      	lsls	r2, r1, #2
 800b80a:	189b      	adds	r3, r3, r2
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	2a00      	cmp	r2, #0
 800b810:	d108      	bne.n	800b824 <_raise_r+0x36>
 800b812:	0020      	movs	r0, r4
 800b814:	f000 f832 	bl	800b87c <_getpid_r>
 800b818:	002a      	movs	r2, r5
 800b81a:	0001      	movs	r1, r0
 800b81c:	0020      	movs	r0, r4
 800b81e:	f000 f81b 	bl	800b858 <_kill_r>
 800b822:	e7ed      	b.n	800b800 <_raise_r+0x12>
 800b824:	2000      	movs	r0, #0
 800b826:	2a01      	cmp	r2, #1
 800b828:	d0ea      	beq.n	800b800 <_raise_r+0x12>
 800b82a:	1c51      	adds	r1, r2, #1
 800b82c:	d103      	bne.n	800b836 <_raise_r+0x48>
 800b82e:	2316      	movs	r3, #22
 800b830:	3001      	adds	r0, #1
 800b832:	6023      	str	r3, [r4, #0]
 800b834:	e7e4      	b.n	800b800 <_raise_r+0x12>
 800b836:	2400      	movs	r4, #0
 800b838:	0028      	movs	r0, r5
 800b83a:	601c      	str	r4, [r3, #0]
 800b83c:	4790      	blx	r2
 800b83e:	0020      	movs	r0, r4
 800b840:	e7de      	b.n	800b800 <_raise_r+0x12>
	...

0800b844 <raise>:
 800b844:	b510      	push	{r4, lr}
 800b846:	4b03      	ldr	r3, [pc, #12]	; (800b854 <raise+0x10>)
 800b848:	0001      	movs	r1, r0
 800b84a:	6818      	ldr	r0, [r3, #0]
 800b84c:	f7ff ffcf 	bl	800b7ee <_raise_r>
 800b850:	bd10      	pop	{r4, pc}
 800b852:	46c0      	nop			; (mov r8, r8)
 800b854:	20000010 	.word	0x20000010

0800b858 <_kill_r>:
 800b858:	2300      	movs	r3, #0
 800b85a:	b570      	push	{r4, r5, r6, lr}
 800b85c:	4d06      	ldr	r5, [pc, #24]	; (800b878 <_kill_r+0x20>)
 800b85e:	0004      	movs	r4, r0
 800b860:	0008      	movs	r0, r1
 800b862:	0011      	movs	r1, r2
 800b864:	602b      	str	r3, [r5, #0]
 800b866:	f7f7 f841 	bl	80028ec <_kill>
 800b86a:	1c43      	adds	r3, r0, #1
 800b86c:	d103      	bne.n	800b876 <_kill_r+0x1e>
 800b86e:	682b      	ldr	r3, [r5, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d000      	beq.n	800b876 <_kill_r+0x1e>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd70      	pop	{r4, r5, r6, pc}
 800b878:	200005a4 	.word	0x200005a4

0800b87c <_getpid_r>:
 800b87c:	b510      	push	{r4, lr}
 800b87e:	f7f7 f82f 	bl	80028e0 <_getpid>
 800b882:	bd10      	pop	{r4, pc}

0800b884 <__sread>:
 800b884:	b570      	push	{r4, r5, r6, lr}
 800b886:	000c      	movs	r4, r1
 800b888:	250e      	movs	r5, #14
 800b88a:	5f49      	ldrsh	r1, [r1, r5]
 800b88c:	f000 f8ba 	bl	800ba04 <_read_r>
 800b890:	2800      	cmp	r0, #0
 800b892:	db03      	blt.n	800b89c <__sread+0x18>
 800b894:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b896:	181b      	adds	r3, r3, r0
 800b898:	6563      	str	r3, [r4, #84]	; 0x54
 800b89a:	bd70      	pop	{r4, r5, r6, pc}
 800b89c:	89a3      	ldrh	r3, [r4, #12]
 800b89e:	4a02      	ldr	r2, [pc, #8]	; (800b8a8 <__sread+0x24>)
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	81a3      	strh	r3, [r4, #12]
 800b8a4:	e7f9      	b.n	800b89a <__sread+0x16>
 800b8a6:	46c0      	nop			; (mov r8, r8)
 800b8a8:	ffffefff 	.word	0xffffefff

0800b8ac <__swrite>:
 800b8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ae:	001f      	movs	r7, r3
 800b8b0:	898b      	ldrh	r3, [r1, #12]
 800b8b2:	0005      	movs	r5, r0
 800b8b4:	000c      	movs	r4, r1
 800b8b6:	0016      	movs	r6, r2
 800b8b8:	05db      	lsls	r3, r3, #23
 800b8ba:	d505      	bpl.n	800b8c8 <__swrite+0x1c>
 800b8bc:	230e      	movs	r3, #14
 800b8be:	5ec9      	ldrsh	r1, [r1, r3]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	2302      	movs	r3, #2
 800b8c4:	f000 f882 	bl	800b9cc <_lseek_r>
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	4a05      	ldr	r2, [pc, #20]	; (800b8e0 <__swrite+0x34>)
 800b8cc:	0028      	movs	r0, r5
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	81a3      	strh	r3, [r4, #12]
 800b8d2:	0032      	movs	r2, r6
 800b8d4:	230e      	movs	r3, #14
 800b8d6:	5ee1      	ldrsh	r1, [r4, r3]
 800b8d8:	003b      	movs	r3, r7
 800b8da:	f000 f82d 	bl	800b938 <_write_r>
 800b8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e0:	ffffefff 	.word	0xffffefff

0800b8e4 <__sseek>:
 800b8e4:	b570      	push	{r4, r5, r6, lr}
 800b8e6:	000c      	movs	r4, r1
 800b8e8:	250e      	movs	r5, #14
 800b8ea:	5f49      	ldrsh	r1, [r1, r5]
 800b8ec:	f000 f86e 	bl	800b9cc <_lseek_r>
 800b8f0:	89a3      	ldrh	r3, [r4, #12]
 800b8f2:	1c42      	adds	r2, r0, #1
 800b8f4:	d103      	bne.n	800b8fe <__sseek+0x1a>
 800b8f6:	4a05      	ldr	r2, [pc, #20]	; (800b90c <__sseek+0x28>)
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	81a3      	strh	r3, [r4, #12]
 800b8fc:	bd70      	pop	{r4, r5, r6, pc}
 800b8fe:	2280      	movs	r2, #128	; 0x80
 800b900:	0152      	lsls	r2, r2, #5
 800b902:	4313      	orrs	r3, r2
 800b904:	81a3      	strh	r3, [r4, #12]
 800b906:	6560      	str	r0, [r4, #84]	; 0x54
 800b908:	e7f8      	b.n	800b8fc <__sseek+0x18>
 800b90a:	46c0      	nop			; (mov r8, r8)
 800b90c:	ffffefff 	.word	0xffffefff

0800b910 <__sclose>:
 800b910:	b510      	push	{r4, lr}
 800b912:	230e      	movs	r3, #14
 800b914:	5ec9      	ldrsh	r1, [r1, r3]
 800b916:	f000 f823 	bl	800b960 <_close_r>
 800b91a:	bd10      	pop	{r4, pc}

0800b91c <__ascii_wctomb>:
 800b91c:	0003      	movs	r3, r0
 800b91e:	1e08      	subs	r0, r1, #0
 800b920:	d005      	beq.n	800b92e <__ascii_wctomb+0x12>
 800b922:	2aff      	cmp	r2, #255	; 0xff
 800b924:	d904      	bls.n	800b930 <__ascii_wctomb+0x14>
 800b926:	228a      	movs	r2, #138	; 0x8a
 800b928:	2001      	movs	r0, #1
 800b92a:	601a      	str	r2, [r3, #0]
 800b92c:	4240      	negs	r0, r0
 800b92e:	4770      	bx	lr
 800b930:	2001      	movs	r0, #1
 800b932:	700a      	strb	r2, [r1, #0]
 800b934:	e7fb      	b.n	800b92e <__ascii_wctomb+0x12>
	...

0800b938 <_write_r>:
 800b938:	b570      	push	{r4, r5, r6, lr}
 800b93a:	0004      	movs	r4, r0
 800b93c:	0008      	movs	r0, r1
 800b93e:	0011      	movs	r1, r2
 800b940:	001a      	movs	r2, r3
 800b942:	2300      	movs	r3, #0
 800b944:	4d05      	ldr	r5, [pc, #20]	; (800b95c <_write_r+0x24>)
 800b946:	602b      	str	r3, [r5, #0]
 800b948:	f7f7 f809 	bl	800295e <_write>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	d103      	bne.n	800b958 <_write_r+0x20>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d000      	beq.n	800b958 <_write_r+0x20>
 800b956:	6023      	str	r3, [r4, #0]
 800b958:	bd70      	pop	{r4, r5, r6, pc}
 800b95a:	46c0      	nop			; (mov r8, r8)
 800b95c:	200005a4 	.word	0x200005a4

0800b960 <_close_r>:
 800b960:	2300      	movs	r3, #0
 800b962:	b570      	push	{r4, r5, r6, lr}
 800b964:	4d06      	ldr	r5, [pc, #24]	; (800b980 <_close_r+0x20>)
 800b966:	0004      	movs	r4, r0
 800b968:	0008      	movs	r0, r1
 800b96a:	602b      	str	r3, [r5, #0]
 800b96c:	f7f7 f813 	bl	8002996 <_close>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	d103      	bne.n	800b97c <_close_r+0x1c>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d000      	beq.n	800b97c <_close_r+0x1c>
 800b97a:	6023      	str	r3, [r4, #0]
 800b97c:	bd70      	pop	{r4, r5, r6, pc}
 800b97e:	46c0      	nop			; (mov r8, r8)
 800b980:	200005a4 	.word	0x200005a4

0800b984 <_fstat_r>:
 800b984:	2300      	movs	r3, #0
 800b986:	b570      	push	{r4, r5, r6, lr}
 800b988:	4d06      	ldr	r5, [pc, #24]	; (800b9a4 <_fstat_r+0x20>)
 800b98a:	0004      	movs	r4, r0
 800b98c:	0008      	movs	r0, r1
 800b98e:	0011      	movs	r1, r2
 800b990:	602b      	str	r3, [r5, #0]
 800b992:	f7f7 f80a 	bl	80029aa <_fstat>
 800b996:	1c43      	adds	r3, r0, #1
 800b998:	d103      	bne.n	800b9a2 <_fstat_r+0x1e>
 800b99a:	682b      	ldr	r3, [r5, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d000      	beq.n	800b9a2 <_fstat_r+0x1e>
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	bd70      	pop	{r4, r5, r6, pc}
 800b9a4:	200005a4 	.word	0x200005a4

0800b9a8 <_isatty_r>:
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	b570      	push	{r4, r5, r6, lr}
 800b9ac:	4d06      	ldr	r5, [pc, #24]	; (800b9c8 <_isatty_r+0x20>)
 800b9ae:	0004      	movs	r4, r0
 800b9b0:	0008      	movs	r0, r1
 800b9b2:	602b      	str	r3, [r5, #0]
 800b9b4:	f7f7 f807 	bl	80029c6 <_isatty>
 800b9b8:	1c43      	adds	r3, r0, #1
 800b9ba:	d103      	bne.n	800b9c4 <_isatty_r+0x1c>
 800b9bc:	682b      	ldr	r3, [r5, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d000      	beq.n	800b9c4 <_isatty_r+0x1c>
 800b9c2:	6023      	str	r3, [r4, #0]
 800b9c4:	bd70      	pop	{r4, r5, r6, pc}
 800b9c6:	46c0      	nop			; (mov r8, r8)
 800b9c8:	200005a4 	.word	0x200005a4

0800b9cc <_lseek_r>:
 800b9cc:	b570      	push	{r4, r5, r6, lr}
 800b9ce:	0004      	movs	r4, r0
 800b9d0:	0008      	movs	r0, r1
 800b9d2:	0011      	movs	r1, r2
 800b9d4:	001a      	movs	r2, r3
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	4d05      	ldr	r5, [pc, #20]	; (800b9f0 <_lseek_r+0x24>)
 800b9da:	602b      	str	r3, [r5, #0]
 800b9dc:	f7f6 fffc 	bl	80029d8 <_lseek>
 800b9e0:	1c43      	adds	r3, r0, #1
 800b9e2:	d103      	bne.n	800b9ec <_lseek_r+0x20>
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d000      	beq.n	800b9ec <_lseek_r+0x20>
 800b9ea:	6023      	str	r3, [r4, #0]
 800b9ec:	bd70      	pop	{r4, r5, r6, pc}
 800b9ee:	46c0      	nop			; (mov r8, r8)
 800b9f0:	200005a4 	.word	0x200005a4

0800b9f4 <_malloc_usable_size_r>:
 800b9f4:	1f0b      	subs	r3, r1, #4
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	1f18      	subs	r0, r3, #4
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	da01      	bge.n	800ba02 <_malloc_usable_size_r+0xe>
 800b9fe:	580b      	ldr	r3, [r1, r0]
 800ba00:	18c0      	adds	r0, r0, r3
 800ba02:	4770      	bx	lr

0800ba04 <_read_r>:
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	0004      	movs	r4, r0
 800ba08:	0008      	movs	r0, r1
 800ba0a:	0011      	movs	r1, r2
 800ba0c:	001a      	movs	r2, r3
 800ba0e:	2300      	movs	r3, #0
 800ba10:	4d05      	ldr	r5, [pc, #20]	; (800ba28 <_read_r+0x24>)
 800ba12:	602b      	str	r3, [r5, #0]
 800ba14:	f7f6 ff86 	bl	8002924 <_read>
 800ba18:	1c43      	adds	r3, r0, #1
 800ba1a:	d103      	bne.n	800ba24 <_read_r+0x20>
 800ba1c:	682b      	ldr	r3, [r5, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d000      	beq.n	800ba24 <_read_r+0x20>
 800ba22:	6023      	str	r3, [r4, #0]
 800ba24:	bd70      	pop	{r4, r5, r6, pc}
 800ba26:	46c0      	nop			; (mov r8, r8)
 800ba28:	200005a4 	.word	0x200005a4

0800ba2c <_init>:
 800ba2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2e:	46c0      	nop			; (mov r8, r8)
 800ba30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba32:	bc08      	pop	{r3}
 800ba34:	469e      	mov	lr, r3
 800ba36:	4770      	bx	lr

0800ba38 <_fini>:
 800ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3a:	46c0      	nop			; (mov r8, r8)
 800ba3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba3e:	bc08      	pop	{r3}
 800ba40:	469e      	mov	lr, r3
 800ba42:	4770      	bx	lr
 800ba44:	0000      	movs	r0, r0
	...

0800ba48 <__FLASH_Program_Fast_veneer>:
 800ba48:	b401      	push	{r0}
 800ba4a:	4802      	ldr	r0, [pc, #8]	; (800ba54 <__FLASH_Program_Fast_veneer+0xc>)
 800ba4c:	4684      	mov	ip, r0
 800ba4e:	bc01      	pop	{r0}
 800ba50:	4760      	bx	ip
 800ba52:	bf00      	nop
 800ba54:	200001e1 	.word	0x200001e1

Disassembly of section .data:

20000000 <tx_ready>:
20000000:	00000001                                ....

20000004 <SystemCoreClock>:
20000004:	00f42400                                .$..

20000008 <uwTickPrio>:
20000008:	00000004                                ....

2000000c <uwTickFreq>:
2000000c:	00000001                                ....

20000010 <_impure_ptr>:
20000010:	20000014                                ... 

20000014 <impure_data>:
20000014:	00000000 0800c068 0800c088 0800c048     ....h.......H...
	...

20000074 <__global_locale>:
20000074:	00000043 00000000 00000000 00000000     C...............
	...
20000094:	00000043 00000000 00000000 00000000     C...............
	...
200000b4:	00000043 00000000 00000000 00000000     C...............
	...
200000d4:	00000043 00000000 00000000 00000000     C...............
	...
200000f4:	00000043 00000000 00000000 00000000     C...............
	...
20000114:	00000043 00000000 00000000 00000000     C...............
	...
20000134:	00000043 00000000 00000000 00000000     C...............
	...
20000154:	0800b91d 0800b759 00000000 0800bd59     ....Y.......Y...
20000164:	0800c0b0 0800bd58 0800bd58 0800bd58     ....X...X...X...
20000174:	0800bd58 0800bd58 0800bd58 0800bd58     X...X...X...X...
20000184:	0800bd58 0800bd58 ffffffff ffffffff     X...X...........
20000194:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200001bc:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200001e0 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200001e0:	b580      	push	{r7, lr}
200001e2:	b088      	sub	sp, #32
200001e4:	af00      	add	r7, sp, #0
200001e6:	6078      	str	r0, [r7, #4]
200001e8:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200001ea:	231f      	movs	r3, #31
200001ec:	18fb      	adds	r3, r7, r3
200001ee:	2200      	movs	r2, #0
200001f0:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200001f2:	687b      	ldr	r3, [r7, #4]
200001f4:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200001f6:	683b      	ldr	r3, [r7, #0]
200001f8:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200001fa:	4b1a      	ldr	r3, [pc, #104]	; (20000264 <FLASH_Program_Fast+0x84>)
200001fc:	695a      	ldr	r2, [r3, #20]
200001fe:	4b19      	ldr	r3, [pc, #100]	; (20000264 <FLASH_Program_Fast+0x84>)
20000200:	2180      	movs	r1, #128	; 0x80
20000202:	02c9      	lsls	r1, r1, #11
20000204:	430a      	orrs	r2, r1
20000206:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000208:	f3ef 8310 	mrs	r3, PRIMASK
2000020c:	60fb      	str	r3, [r7, #12]
  return(result);
2000020e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000212:	b672      	cpsid	i
}
20000214:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000216:	e00f      	b.n	20000238 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000218:	697a      	ldr	r2, [r7, #20]
2000021a:	69bb      	ldr	r3, [r7, #24]
2000021c:	6812      	ldr	r2, [r2, #0]
2000021e:	601a      	str	r2, [r3, #0]
    src += 4U;
20000220:	697b      	ldr	r3, [r7, #20]
20000222:	3304      	adds	r3, #4
20000224:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000226:	69bb      	ldr	r3, [r7, #24]
20000228:	3304      	adds	r3, #4
2000022a:	61bb      	str	r3, [r7, #24]
    index++;
2000022c:	211f      	movs	r1, #31
2000022e:	187b      	adds	r3, r7, r1
20000230:	781a      	ldrb	r2, [r3, #0]
20000232:	187b      	adds	r3, r7, r1
20000234:	3201      	adds	r2, #1
20000236:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000238:	231f      	movs	r3, #31
2000023a:	18fb      	adds	r3, r7, r3
2000023c:	781b      	ldrb	r3, [r3, #0]
2000023e:	2b3f      	cmp	r3, #63	; 0x3f
20000240:	d9ea      	bls.n	20000218 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	4b07      	ldr	r3, [pc, #28]	; (20000264 <FLASH_Program_Fast+0x84>)
20000246:	691a      	ldr	r2, [r3, #16]
20000248:	2380      	movs	r3, #128	; 0x80
2000024a:	025b      	lsls	r3, r3, #9
2000024c:	4013      	ands	r3, r2
2000024e:	d1f9      	bne.n	20000244 <FLASH_Program_Fast+0x64>
20000250:	693b      	ldr	r3, [r7, #16]
20000252:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000254:	68bb      	ldr	r3, [r7, #8]
20000256:	f383 8810 	msr	PRIMASK, r3
}
2000025a:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000025c:	46c0      	nop			; (mov r8, r8)
2000025e:	46bd      	mov	sp, r7
20000260:	b008      	add	sp, #32
20000262:	bd80      	pop	{r7, pc}
20000264:	40022000 	.word	0x40022000
