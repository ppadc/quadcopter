/*
 * matrix.c
 *
 *  Created on: Jul 1, 2023
 *      Author: nguye
 */

#include<stdio.h>
#include<math.h>
#include "matrix.h"

void matrixPower(double matrix[9][9], int *n, double result[9][9]) {
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            result[i][j] = (i == j) ? 1 : 0;
        }
    }

    for (int k=0; k<*n; k++) {
        int temp[9][9] = {0};
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                for (int x = 0; x < 9; x++) {
                    temp[i][j] += matrix[i][x] * result[x][j];
                }
            }
        }
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                result[i][j] = temp[i][j];
            }
        }
    }
}

float determinant(double a[12][12],float k){
	float s = 1, det = 0;
	double  b[25][25];
	int i, j, m, n, c;
	  if (k == 1)
	    {
	     return (a[0][0]);
	    }
	  else
	    {
	     det = 0;
	     for (c = 0; c < k; c++)
	       {
	        m = 0;
	        n = 0;
	        for (i = 0;i < k; i++)
	          {
	            for (j = 0 ;j < k; j++)
	              {
	                b[i][j] = 0;
	                if (i != 0 && j != c)
	                 {
	                   b[m][n] = a[i][j];
	                   if (n < (k - 2))
	                    n++;
	                   else
	                    {
	                     n = 0;
	                     m++;
	                     }
	                   }
	               }
	             }
	          det = det + s * (a[0][c] * determinant(b, k - 1));
	          s = -1 * s;
	          }
	    }
	return(det);
}
void cofactor(double num[21][21], float f)
{
 double b[25][25], fac[25][25];
 int p, q, m, n, i, j;
 for (q = 0;q < f; q++)
 {
   for (p = 0;p < f; p++)
    {
     m = 0;
     n = 0;
     for (i = 0;i < f; i++)
     {
       for (j = 0;j < f; j++)
        {
          if (i != q && j != p)
          {
            b[m][n] = num[i][j];
            if (n < (f - 2))
             n++;
            else
             {
               n = 0;
               m++;
               }
            }
        }
      }
      fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
    }
  }
  transpose(num, fac, f);
}
/*Finding transpose of matrix*/
void transpose(float num[25][25], float fac[25][25], float r)
{
  int i, j;
  float b[25][25], inverse[25][25], d;

  for (i = 0;i < r; i++)
    {
     for (j = 0;j < r; j++)
       {
         b[i][j] = fac[j][i];
        }
    }
  d = determinant(num, r);
  for (i = 0;i < r; i++)
    {
     for (j = 0;j < r; j++)
       {
        inverse[i][j] = b[i][j] / d;
        }
    }
}


