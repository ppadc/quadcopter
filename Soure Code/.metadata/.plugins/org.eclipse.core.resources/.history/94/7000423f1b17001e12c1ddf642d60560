/*
 * mpc_simplification.c
 *
 *  Created on: Jun 27, 2023
 *      Author: nguye
 */

#include "params.h"
#include "../Rotational_matrix/rotational_matrix.h"
#include <complex.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include "../LPV_cont_discrete/LPV_cont_discrete.h"

int mpc_simplification(double Ad_matrix[6][6],double Bd_matrix[6][3],double Cd_matrix[3][6], double Dd_matrix[3][3],int *hz){
    /*This function creates the compact matrices for Model Predictive Control*/
	// db - double bar
	// dbt - double bar transpose
	// dc - double circumflex

	/*Create A_aug*/
	double A_aug[6][9];
	for(int i=0;i<6;i++){
		for(int j=0;j<6;j++){
			A_aug[i][j] = Ad_matrix[i][j];
		}
	}
	for(int i=0;i<6;i++){
		for(int j=6;j<9;j++){
			A_aug[i][j] = Bd_matrix[i][j-6];
		}
	}
	double temp_A[3][9] = {
	        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
	        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
	        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}
	};
	double A_aug_new[9][9];
	for(int i=0;i<6;i++){
		for(int j=0;j<9;j++){
			A_aug_new[i][j] = A_aug[i][j];
		}
	}
	for(int i=6;i<9;i++){
		for(int j=0;j<9;j++){
			A_aug_new[i][j] = temp_A[i-6][j];
		}
	}
	/*Create B_aug*/
	double temp_B[3][3] = {
		 {1.0, 0.0, 0.0},
		 {0.0, 1.0, 0.0},
		 {0.0, 0.0, 1.0}
	};
	double B_aug[9][3];
	for(int i=0;i<6;i++){
		for(int j=0;j<3;j++){
			B_aug[i][j] = Bd_matrix[i][j];
		}
	}
	for(int i=6;i<9;i++){
		for(int j=0;j<3;j++){
			B_aug[i][j] = temp_B[i-6][j];
		}
	}
	/*Create C_aug*/
	double temp_C[3][3]={
			{0.0, 0.0, 0.0},
			{0.0, 0.0, 0.0},
			{0.0, 0.0, 0.0}
	};
	double C_aug[3][9];
	for(int i=0;i<3;i++){
		for(int j=0;j<6;j++){
			C_aug[i][j] = Cd_matrix[i][j];
		}
	}
	for(int i=0;i<3;i++){
		for(int j=6;j<9;j++){
			C_aug[i][j] = temp_C[i][j-6];
		}
	}
	/*Create D_aug*/
	double D_aug[3][3];
	for(int i=0;i<3;i++){
		for(int j=0;j<3;j++){
			D_aug[i][j] = Dd_matrix[i][j];
		}
	}
	/*Calculation for CQC Matrix*/
	//transpose C_aug
	double C_aug_transpose[9][3];
	C_aug_transpose[0][0] = C_aug[0][0];	C_aug_transpose[0][1] = C_aug[1][0]; C_aug_transpose[0][2] = C_aug[2][0];
	C_aug_transpose[1][0] = C_aug[0][1];	C_aug_transpose[1][1] = C_aug[1][1]; C_aug_transpose[1][2] = C_aug[2][1];
	C_aug_transpose[2][0] = C_aug[0][2];	C_aug_transpose[2][1] = C_aug[1][2]; C_aug_transpose[2][2] = C_aug[2][2];
	C_aug_transpose[3][0] = C_aug[0][3];	C_aug_transpose[3][1] = C_aug[1][3]; C_aug_transpose[3][2] = C_aug[2][3];
	C_aug_transpose[4][0] = C_aug[0][4];	C_aug_transpose[4][1] = C_aug[1][4]; C_aug_transpose[4][2] = C_aug[2][4];
	C_aug_transpose[5][0] = C_aug[0][5];	C_aug_transpose[5][1] = C_aug[1][5]; C_aug_transpose[5][2] = C_aug[2][5];
	C_aug_transpose[6][0] = C_aug[0][6];	C_aug_transpose[6][1] = C_aug[1][6]; C_aug_transpose[6][2] = C_aug[2][6];
	C_aug_transpose[7][0] = C_aug[0][7];	C_aug_transpose[7][1] = C_aug[1][7]; C_aug_transpose[7][2] = C_aug[2][7];
	C_aug_transpose[8][0] = C_aug[0][8];	C_aug_transpose[8][1] = C_aug[1][8]; C_aug_transpose[8][2] = C_aug[2][8];

//	CQC=np.matmul(np.transpose(C_aug),Q)
//	CQC=np.matmul(CQC,C_aug)
	double CQC[9][9]={
			{10.0, 0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 10.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 10.0, 0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0}
	};
//   CSC=np.matmul(np.transpose(C_aug),S)
//   CSC=np.matmul(CSC,C_aug)
	double CSC[9][9]={
			{20.0, 0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 20.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 20.0, 0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 0.0,  0.0, 0.0,  0.0, 0.0, 0.0, 0.0}
	};
//	QC=np.matmul(Q,C_aug)
//	SC=np.matmul(S,C_aug)
	double QC[3][9]={
			{10.0, 0.0,  0.0,  0.0,  0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 10.0,  0.0,  0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0,  0.0,  0.0, 10.0,  0.0, 0.0, 0.0, 0.0}
	};
	double SC[3][9]={
			{20.0, 0.0,  0.0,  0.0,  0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0, 20.0,  0.0,  0.0,  0.0, 0.0, 0.0, 0.0},
			{0.0,  0.0,  0.0,  0.0, 20.0,  0.0, 0.0, 0.0, 0.0}
	};
	int hz_t = *hz;
	if(hz_t == 1){
//		float Qdb[9][9]={
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
//				};
		float Qdb[9][9] = {0};
//		float Tdb[3][9]={
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
//		};
		float Tdb[3][9] = {0};
//		float Rdb[3][3]={
//				{0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0}
//		};
		float Rdb[3][3];
		for(int i=0;i<3;i++){
			for(int j=0;j<3;j++){
				Rdb[i][j] = 0.0;
			}
		}

//		float Cdb[9][3]={
//				{0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0}
//		};
		float Cdb[9][3];
		for(int i=0;i<9;i++){
			for(int j=0;j<3;j++){
				Cdb[i][j] = 0.0;
			}
		}

//		float Adc[9][9]={
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
//		};
		float Adc[9][9];
		for(int i=0;i<9;i++){
			for(int j=0;j<9;j++){
				Adc[i][j] = 0.0;
			}
		}
	}
	else if (hz_t == 2){
//		float Qdb[18][18]={
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
//				};
		float Qdb[18][18];
		for(int i=0;i<18;i++){
			for(int j=0;j<18;j++){
				Qdb[i][j] = 0.0;
			}
		}
//		float  Tdb[6][18]={
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
//		};
		float  Tdb[6][18];
		for(int i=0;i<6;i++){
			for(int j=0;j<18;j++){
				Tdb[i][j] = 0.0;
			}
		}
//		float Rdb[6][6]={
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
//		};
		float Rdb[6][6];
		for(int i=0;i<6;i++){
			for(int j=0;j<6;j++){
				Rdb[i][j] = 0.0;
			}
		}
//		float Cdb[18][6]={
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
//		};
		float Cdb[18][6];
		for(int i=0;i<18;i++){
			for(int j=0;j<6;j++){
				Cdb[i][j] = 0.0;
			}
		}
//		float Adc[18][9]={
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
//		};
		float Adc[18][9];
		for(int i=0;i<18;i++){
			for(int j=0;j<9;j++){
				Adc[i][j] = 0.0;
			}
		}
	}
	else if (hz_t == 3){
//		float Qdb[27][27]={
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
//				};
		float Qdb[27][27];
		for(int i=0;i<27;i++){
			for(int j=0;j<27;j++){
				Qdb[i][j] = 0.0;
			}
		}
//		float Tdb[9][27]={
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
//		};
		float Tdb[9][27];
		for(int i=0;i<9;i++){
			for(int j=0;j<27;j++){
				Tdb[i][j] = 0.0;
			}
		}
//		float Rdb[9][9]={
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
//		};
		float Rdb[9][9];
		for(int i=0;i<9;i++){
			for(int j=0;j<9;j++){
				Rdb[i][j] = 0.0;
			}
		}
//		float Cdb[27][9]={
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
//		};
		float Cdb[27][9];
		for(int i=0;i<27;i++){
			for(int j=0;j<9;j++){
				Cdb[i][j] = 0.0;
			}
		}
		float Adc[18][9]={
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
		};
	}
	else{

	}
	return 0;
}
