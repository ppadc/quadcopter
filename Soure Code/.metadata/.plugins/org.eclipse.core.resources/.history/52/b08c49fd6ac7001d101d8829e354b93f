/*
 * bno055.c
 *
 *  Created on: Mar 15, 2023
 *      Author: nguye
 */

#include "bno055_register_map.h"
#include <string.h>
#include <i2c.h>
#include "user_define.h"
#include "bno055.h"

/* Configurations Power Mode */
#if BNO055_POWER_MODE == 0
#define POWER_MODE_NORMAL  						0b00
#elif	BNO055_POWER_MODE == 1
#define POWER_MODE_LOW_POWER  					0b01
#elif	BNO055_POWER_MODE == 2
#define POWER_MODE_LOW_POWER  					0b1O
#endif

/* Configurations Accelerometer */

#if BNO055_ACC_G_RANGE_VALUES == 0
#define ACCEL_G_RANGE							0b00
#elif BNO055_ACC_G_RANGE_VALUES == 1
#define ACCEL_G_RANGE							0b01
#elif BNO055_ACC_G_RANGE_VALUES == 2
#define ACCEL_G_RANGE							0b10
#elif BNO055_ACC_G_RANGE_VALUES == 3
#define ACCEL_G_RANGE							0b11
#endif

#if BNO055_ACC_BANDWIDTH_VALUES == 0
#define ACCEL_BANDWIDTH							(0b000 << 2)
#elif BNO055_ACC_BANDWIDTH_VALUES == 1
#define ACCEL_BANDWIDTH							(0b001 << 2)
#elif BNO055_ACC_BANDWIDTH_VALUES == 2
#define ACCEL_BANDWIDTH							(0b010 << 2)
#elif BNO055_ACC_BANDWIDTH_VALUES == 3
#define ACCEL_BANDWIDTH							(0b011 << 2)
#elif BNO055_ACC_BANDWIDTH_VALUES == 4
#define ACCEL_BANDWIDTH							(0b100 << 2)
#elif BNO055_ACC_BANDWIDTH_VALUES == 5
#define ACCEL_BANDWIDTH							(0b101 << 2)
#elif BNO055_ACC_BANDWIDTH_VALUES == 6
#define ACCEL_BANDWIDTH							(0b110 << 2)
#elif BNO055_ACC_BANDWIDTH_VALUES == 7
#define ACCEL_BANDWIDTH							(0b111 << 2)
#endif

#if BNO055_ACC_MODE_VALUES == 0
#define ACCEL_OPERATION_MODE_NORMAL 			(0b000 << 5)
#elif BNO055_ACC_MODE_VALUES == 1
#define ACCEL_OPERATION_MODE_SUSPEND 			(0b001 << 5)
#elif BNO055_ACC_MODE_VALUES == 2
#define ACCEL_OPERATION_MODE_LOW_POWER_1 		(0b010 << 5)
#elif BNO055_ACC_MODE_VALUES == 3
#define ACCEL_OPERATION_MODE_STANDBY 			(0b011 << 5)
#elif BNO055_ACC_MODE_VALUES == 4
#define ACCEL_OPERATION_MODE_LOW_POWER_2 		(0b100 << 5)
#elif BNO055_ACC_MODE_VALUES == 5
#define ACCEL_OPERATION_MODE_DEEP_SUSPEND		(0b101 << 5)
#endif

/* Configurations Gyroscope */
/*Note: Write this value at GYR_CONFIG_0 to Configurations Gyroscope Mode*/
#if BNO055_GYR_RANGE_VALUES == 0
#define GYRO_RANGE								0b000
#elif BNO055_GYR_RANGE_VALUES == 1
#define GYRO_RANGE								0b001
#elif BNO055_GYR_RANGE_VALUES == 2
#define GYRO_RANGE								0b010
#elif BNO055_GYR_RANGE_VALUES == 3
#define GYRO_RANGE								0b011
#elif BNO055_GYR_RANGE_VALUES == 4
#define GYRO_RANGE								0b100
#endif

/*Note: Write this value at GYR_CONFIG_0 to Configurations Gyroscope Mode*/
#if BNO055_GYR_BANDWIDTH_VALUES == 0
#define GYR_BANDWIDTH							(0b000 << 3)
#elif BNO055_GYR_BANDWIDTH_VALUES == 1
#define GYR_BANDWIDTH							(0b001 << 3)
#elif BNO055_GYR_BANDWIDTH_VALUES == 2
#define GYR_BANDWIDTH							(0b010 << 3)
#elif BNO055_GYR_BANDWIDTH_VALUES == 3
#define GYR_BANDWIDTH							(0b011 << 3)
#elif BNO055_GYR_BANDWIDTH_VALUES == 4
#define GYR_BANDWIDTH							(0b100 << 3)
#elif BNO055_GYR_BANDWIDTH_VALUES == 5
#define GYR_BANDWIDTH							(0b101 << 3)
#elif BNO055_GYR_BANDWIDTH_VALUES == 6
#define GYR_BANDWIDTH							(0b110 << 3)
#elif BNO055_GYR_BANDWIDTH_VALUES == 7
#define GYR_BANDWIDTH							(0b111 << 3)
#endif

/*Note: Write this value at GYR_CONFIG_1 to Configurations Gyroscope Mode*/
#if BNO055_GYR_MODE_VALUES == 0
#define GYR_OPERATION_MODE						0b000
#elif BNO055_GYR_MODE_VALUES == 1
#define ACCEL_OPERATION_MODE 					0b001
#elif BNO055_GYR_MODE_VALUES == 2
#define ACCEL_OPERATION_MODE 					0b010
#elif BNO055_GYR_MODE_VALUES == 3
#define ACCEL_OPERATION_MODE 					0b011
#elif BNO055_GYR_MODE_VALUES == 4
#define ACCEL_OPERATION_MODE					0b100
#endif

/* Configurations Magnetometer */
#if BNO055_MAG_DATA_OUTPUT_RATE_VALUES   == 0
#define BNO055_MAG_DATA_OUTPUT_RATE 			0b000
#elif BNO055_MAG_DATA_OUTPUT_RATE_VALUES == 1
#define BNO055_MAG_DATA_OUTPUT_RATE 			0b001
#elif BNO055_MAG_DATA_OUTPUT_RATE_VALUES == 2
#define BNO055_MAG_DATA_OUTPUT_RATE 			0b010
#elif BNO055_MAG_DATA_OUTPUT_RATE_VALUES == 3
#define BNO055_MAG_DATA_OUTPUT_RATE 			0b011
#elif BNO055_MAG_DATA_OUTPUT_RATE_VALUES == 4
#define BNO055_MAG_DATA_OUTPUT_RATE 			0b100
#elif BNO055_MAG_DATA_OUTPUT_RATE_VALUES == 5
#define BNO055_MAG_DATA_OUTPUT_RATE 			0b101
#elif BNO055_MAG_DATA_OUTPUT_RATE_VALUES == 6
#define BNO055_MAG_DATA_OUTPUT_RATE 			0b110
#elif BNO055_MAG_DATA_OUTPUT_RATE_VALUES == 7
#define BNO055_MAG_DATA_OUTPUT_RATE 			0b111
#endif

#if BNO055_MAG_OPERATION_MODE_VALUES == 0
#define MAG_OPERATION_MODE						(0b00 << 3)
#elif BNO055_MAG_OPERATION_MODE_VALUES == 1
#define MAG_OPERATION_MODE						(0b01 << 3)
#elif BNO055_MAG_OPERATION_MODE_VALUES == 2
#define MAG_OPERATION_MODE						(0b10 << 3)
#elif BNO055_MAG_OPERATION_MODE_VALUES == 3
#define MAG_OPERATION_MODE						(0b11 << 3)
#endif

#if BNO055_MAG_PWR_MODE_VALUES == 0
#define MAG_PWR_MODE							(0b00 << 5)
#elif BNO055_MAG_PWR_MODE_VALUES == 1
#define MAG_PWR_MODE							(0b01 << 5)
#elif BNO055_MAG_PWR_MODE_VALUES == 2
#define MAG_PWR_MODE							(0b10 << 5)
#elif BNO055_MAG_PWR_MODE_VALUES == 3
#define MAG_PWR_MODE							(0b11 << 5)
#endif

/* Configurations Value Units */
#if BNO055_ACCEL_LINEARACC_GRAVITYVECTOR_UNITS == 0
#define BNO055_ACCEL_UNITS						 0b00
#elif BNO055_ACCEL_LINEARACC_GRAVITYVECTOR_UNITS == 1
#define BNO055_ACCEL_UNITS						 0b01
#endif

#if BNO055_ANGULAR_RATE_UNITS == 0
#define ANGULAR_RATE_UNITS				 		(0b00 << 1)
#elif BNO055_NGULAR_RATE_UNITS == 1
#define ANGULAR_RATE_UNITS				 		(0b01 << 1)
#endif

#if BNO055_EULER_ANGLES_UNITS == 0
#define EULER_ANGLES_UNITS				 		(0b00 << 2)
#elif BNO055_EULER_ANGLES_UNITS == 1
#define EULER_ANGLES_UNITS				 		(0b01 << 2)
#endif

#if BNO055_TEMPERATURE_UNITS == 0
#define TEMPERATURE_UNITS				 		(0b00 << 4)
#elif BNO055_TEMPERATURE_UNITS == 1
#define TEMPERATURE_UNITS				 		(0b01 << 4)
#endif

static int bno055_read(uint8_t addr, uint8_t *value){
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK){
		*value = 0;
		return -1;
	}
	return 0;
}

static int bno055_write(uint8_t addr, uint8_t *value){
	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK)
		return -1;
	return 0;
}

static int bno055_read_bytes(uint8_t addr, uint8_t *value, uint8_t len){
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, len, I2C_TIMEOUT_MS)!= HAL_OK){
		memset(value,0,len);
		return -1;
	}
	return 0;
}

static int bno055_write_bye(uint8_t addr, uint8_t *value, uint8_t len){
	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, len, I2C_TIMEOUT_MS)!= HAL_OK)
		return -1;
	return 0;
}

uint8_t bno055_sys_err(){
	uint8_t tmp;
	uint8_t error_sys;
	uint8_t buffer_sys_err[1] = {};
	tmp = 0x00;
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
	if(bno055_read(SYS_ERR,buffer_sys_err)<0){
			return -1;
		}
	error_sys = buffer_sys_err[0];
	return error_sys;
}

uint8_t bno055_sys_status(){
	uint8_t tmp;
	uint8_t sys_status;
	uint8_t buffer_sys_status[1] = {};
	tmp = 0x00;
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
	if(bno055_read(SYS_STATUS,buffer_sys_status)<0){
			return -1;
		}
	sys_status = buffer_sys_status[0];
	return sys_status;
}


//void bno055_setOperationMode(bno055_opr_mode_t mode){
//	bno055_write(OPR_MODE,mode);
//	if (mode == BNO055_OPERATION_CONFIG_MODE){
//		for(int i=0;i<10;i++)for(int j=0;j<10000;j++)__NOP();
//	}
//	else
//		for(int i=0;i<10;i++)for(int j=0;j<10000;j++)__NOP();
//}

void bno055_set_operation_mode(bno055_opr_mode_t opr_mode);

void bno055_set_operation_mode(bno055_opr_mode_t opr_mode){
	switch(opr_mode){
	case

	break;
	}
}

int bno055_init(){
	uint8_t tmp,err_num;
	tmp = 0x00;
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
	//Reset SYSTEM
	tmp = 0x20;
	if(bno055_write(SYS_TRIGGER,&tmp)<0) return -1;
	//Wait Time to reset (20ns)
	for(int i=0;i<10;i++)for(int j=0;j<1000;j++)__NOP();
	tmp = POWER_MODE_NORMAL;
	if(bno055_write(PWR_MODE,&tmp)<0) return -1;
	//Check System Status
	switch(bno055_sys_status()){
	case '0':
		//System Idle
		return -1;
		break;
	case '1':
		//System Error- Moving to check what error was
		err_num = bno055_sys_err();
		return err_num;
		break;
	case '2':
		//Initializing peripherals
		for(int i=0;i<10;i++)__NOP();
		break;
	case '3':
		//System Initialization
		for(int i=0;i<10;i++)__NOP();
		break;
	case '4':
		//Executing selftest
		break;
	case '5':
		//Sensor fusion algorithm running
		break;
	case '6':
		//System running without fusion algorithm
		break;
	}
	//Select Page
#if BNO055_MODE_IMU == 0
	tmp = 0x01;
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
#elif BNO055_MODE_IMU == 1
	/* Configurations Accelerometer */
	//Moving to Page 1//
	tmp = 0x01;
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
	tmp = (ACCEL_OPERATION_MODE_NORMAL | ACCEL_BANDWIDTH)| ACCEL_G_RANGE;
	if(bno055_write(ACC_CONFIG,&tmp)<0) return -1;
	/* Configurations Gyroscope */
	tmp = GYR_BANDWIDTH | GYRO_RANGE;
	if(bno055_write(GYR_CONFIG_0,&tmp)<0) return -1;
	tmp = GYR_OPERATION_MODE;
	if(bno055_write(GYR_CONFIG_1,&tmp)<0) return -1;
	/* Configurations Magnetometer */
	tmp = (MAG_PWR_MODE | MAG_OPERATION_MODE)| BNO055_MAG_DATA_OUTPUT_RATE;
	if(bno055_write(MAG_CONFIG,&tmp)<0) return -1;

	/*Configuration Sensor Unit*/
	//Moving to Page 0//
	tmp = 0x00;
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
	tmp = ((TEMPERATURE_UNITS | EULER_ANGLES_UNITS)| ANGULAR_RATE_UNITS)| BNO055_ACCEL_UNITS;
	if(bno055_write(UNIT_SEL,&tmp)<0) return -1;
	tmp = BNO055_OPERATION_MODE_NDOF;
	if(bno055_write(OPR_MODE,&tmp)<0) return -1;
	for(int i=0;i<10;i++)for(int j=0;j<10000;j++)__NOP();
#endif
	return 0;
}
int bno055_test(){
	uint8_t tmp;
	uint8_t buffer[4] ={};
	unsigned char st_acc, st_mag, st_gyr, st_mcu, seft_test;
	tmp = 0x00;
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
	if(bno055_read_bytes(ST_RESULT,buffer,4)<0){
		return -1;
	}
	st_acc = (int8_t)((int8_t)buffer[0]);
	st_mag = (int8_t)((int8_t)buffer[1])<<1;
	st_gyr = (int8_t)((int8_t)buffer[2])<<2;
	st_mcu = (int8_t)((int8_t)buffer[3])<<3;
	if((seft_test = (((st_mcu|st_gyr)|st_mag)|st_acc))!=15) return -1;
	return 0;
}


int bno055_get_accel_gyro(float *ax,float *ay,float *az ,float *gx ,float *gy ,float *gz){
	uint8_t tmp;
	uint8_t buffer_accel[6] = {};
	uint8_t buffer_gyro[6] = {};
	tmp = 0x00;
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
	if(bno055_read_bytes(ACC_DATA_X_LSB,buffer_accel,6)<0){
		return -1;
	}
	*ax = (int16_t)((int16_t)buffer_accel[1]  << 8) | buffer_accel[0];
	*ay = (int16_t)((int16_t)buffer_accel[3]  << 8) | buffer_accel[2];
	*az = (int16_t)((int16_t)buffer_accel[5]  << 8) | buffer_accel[4];
	if(bno055_read_bytes(GYR_DATA_X_LSB,buffer_gyro,6)<0){
			return -1;
		}
	*gx = (int16_t)((int16_t)buffer_gyro[1]  << 8) | buffer_gyro[0];
	*gy = (int16_t)((int16_t)buffer_gyro[3]  << 8) | buffer_gyro[2];
	*gz = (int16_t)((int16_t)buffer_gyro[5]  << 8) | buffer_gyro[4];
	return 0;
}

int bno055_get_mag(float *mx,float *my,float *mz){
	uint8_t tmp;
	uint8_t buffer_mag[6] = {};
	tmp = 0x00;
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
	if(bno055_read_bytes(MAG_DATA_X_LSB,buffer_mag,6)<0){
			return -1;
		}
	*mx = (int16_t)((int16_t)buffer_mag[1]  << 8) | buffer_mag[0];
	*my = (int16_t)((int16_t)buffer_mag[3]  << 8) | buffer_mag[2];
	*mz = (int16_t)((int16_t)buffer_mag[5]  << 8) | buffer_mag[4];
	return 0;
}

int bno055__get_temp(float *temp){
	uint8_t tmp;
	uint8_t buffer_temp[1] = {};
	tmp = 0x00;
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
	if(bno055_read_bytes(TEMP,buffer_temp,1)<0){
				return -1;
			}
	*temp = buffer_temp[0];
	return 0;
}

