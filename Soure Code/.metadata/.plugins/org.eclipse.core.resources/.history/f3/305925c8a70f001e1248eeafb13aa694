/*
 * bme_init.c
 *
 *  Created on: Jun 21, 2023
 *      Author: nguye
 */
#include "bme680.h"
#include "user_define.h"
#include "stdio.h"
#include "delay_us.h"
#include "ssd1306.h"
#include "fonts.h"

struct bme680_dev gas_sensor;
struct bme680_field_data data;

volatile char bufbme[50];
volatile char bufbme1[50];
volatile uint32_t var1 = 0;
volatile uint32_t var2 = 0;
volatile uint8_t set_required_settings;
volatile int8_t rslt = 0;
volatile uint16_t meas_period;
volatile uint32_t ii = 0;

void user_delay_ms(uint32_t period);
void BME680_Read(void);

int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data,
		uint16_t len);
int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data,
		uint16_t len);


void BME680_Read(void) {

	user_delay_ms(meas_period);
	rslt = bme680_get_sensor_data(&data, &gas_sensor);
	sprintf(bufbme1, "T: %.2f degC", data.temperature / 100.0f);
	SSD1306_GotoXY(0, 20);
	ssd1306_WriteString((char*) bufbme1, Font_7x10);

	sprintf(bufbme1, "P: %.2f hPa", data.pressure / 100.0f);
	SSD1306_GotoXY(0, 30);
	ssd1306_WriteString((char*) bufbme1, Font_7x10);

	sprintf(bufbme1, "H %.2f %%rH ", data.humidity / 1000.0f);
	SSD1306_GotoXY(0, 40);
	ssd1306_WriteString((char*) bufbme1, Font_7x10);

	if (data.status & BME680_GASM_VALID_MSK) {

		sprintf(bufbme1, "G: %.2f Kohms ", data.gas_resistance / 1000.0f);
		ssd1306_SetCursor(0, 50);
		ssd1306_WriteString((char*) bufbme1, Font_7x10);
	}

	/*  Trigger the next measurement if you would like to read data out continuously*/
	if (gas_sensor.power_mode == BME680_FORCED_MODE) {
		rslt = bme680_set_sensor_mode(&gas_sensor);
	}

}

void user_delay_ms(uint32_t period) {
	delay_ms(period);
}

int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data,
		uint16_t len) {
	int8_t rslt = 0;
	HAL_StatusTypeDef status = HAL_OK;
	status = HAL_I2C_Mem_Read(&hi2c1, dev_id, reg_addr, I2C_MEMADD_SIZE_8BIT,
			(uint8_t*) reg_data, len, I2C_TIMEOUT_MS);
	if (status != HAL_OK)
		rslt = -3;
	return rslt;
}

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data,
		uint16_t len) {
	int8_t rslt = 0;
	HAL_StatusTypeDef status = HAL_OK;
	status = HAL_I2C_Mem_Write(&hi2c1, dev_id, reg_addr, I2C_MEMADD_SIZE_8BIT,
			(uint8_t*) reg_data, len, 0x10000);
	if (status != HAL_OK)
		rslt = -3;

	return rslt;

}
