/*
 * mpc_simplification.c
 *
 *  Created on: Jun 27, 2023
 *      Author: nguye
 */

#include "params.h"
#include "../Rotational_matrix/rotational_matrix.h"
#include <complex.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include "../LPV_cont_discrete/LPV_cont_discrete.h"

int mpc_simplification(double Ad_matrix[6][6],double Bd_matrix[6][3],double Cd_matrix[3][6], double Dd_matrix[3][3],int *hz){
    /*This function creates the compact matrices for Model Predictive Control*/
	// db - double bar
	// dbt - double bar transpose
	// dc - double circumflex

	/*Create A_aug*/
	//A_aug=np.concatenate((Ad,Bd),axis=1)
	double A_aug[6][9];
	for(int i=0;i<6;i++){
		for(int j=0;j<6;j++){
			A_aug[i][j] = Ad_matrix[i][j];
		}
	}
	for(int i=0;i<6;i++){
		for(int j=6;j<9;j++){
			A_aug[i][j] = Bd_matrix[i][j-6];
		}
	}
	float temp_A[3][9] = {
	        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
	        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
	        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}
	};
	//A_aug=np.concatenate((A_aug,temp),axis=0)
	double A_aug_new[9][9];
	for(int i=0;i<6;i++){
		for(int j=0;j<9;j++){
			A_aug_new[i][j] = A_aug[i][j];
		}
	}
	for(int i=6;i<9;i++){
		for(int j=0;j<9;j++){
			A_aug_new[i][j] = temp_A[i-6][j];
		}
	}
	/*Create B_aug*/
	float temp_B[3][3] = {
		 {1.0, 0.0, 0.0},
		 {0.0, 1.0, 0.0},
		 {0.0, 0.0, 1.0}
	};
	double B_aug[9][3];
	for(int i=0;i<6;i++){
		for(int j=0;j<3;j++){
			B_aug[i][j] = Bd_matrix[i][j];
		}
	}
	for(int i=6;i<9;i++){
		for(int j=0;j<3;j++){
			B_aug[i][j] = temp_B[i-6][j];
		}
	}
	/*Create C_aug*/
	float temp_C[3][3]={
			{0.0, 0.0, 0.0},
			{0.0, 0.0, 0.0},
			{0.0, 0.0, 0.0}
	};
	double C_aug[3][9];
	for(int i=0;i<3;i++){
		for(int j=0;j<6;j++){
			C_aug[i][j] = Cd_matrix[i][j];
		}
	}
	for(int i=0;i<3;i++){
		for(int j=6;j<9;j++){
			C_aug[i][j] = temp_C[i][j-6];
		}
	}
	/*Create D_aug*/
	double D_aug[3][3];
	for(int i=0;i<3;i++){
		for(int j=0;j<3;j++){
			D_aug[i][j] = Dd_matrix[i][j];
		}
	}
	/*Calculation for CQC Matrix*/
	//transpose C_aug
	float C_aug_transpose[9][3];
	C_aug_transpose[0][0] = C_aug[0][0];	C_aug_transpose[0][1] = C_aug[1][0]; C_aug_transpose[0][2] = C_aug[2][0];
	C_aug_transpose[1][0] = C_aug[0][1];	C_aug_transpose[1][1] = C_aug[1][1]; C_aug_transpose[1][2] = C_aug[2][1];
	C_aug_transpose[2][0] = C_aug[0][2];	C_aug_transpose[2][1] = C_aug[1][2]; C_aug_transpose[2][2] = C_aug[2][2];
	C_aug_transpose[3][0] = C_aug[0][3];	C_aug_transpose[3][1] = C_aug[1][3]; C_aug_transpose[3][2] = C_aug[2][3];
	C_aug_transpose[4][0] = C_aug[0][4];	C_aug_transpose[4][1] = C_aug[1][4]; C_aug_transpose[4][2] = C_aug[2][4];
	C_aug_transpose[5][0] = C_aug[0][5];	C_aug_transpose[5][1] = C_aug[1][5]; C_aug_transpose[5][2] = C_aug[2][5];
	C_aug_transpose[6][0] = C_aug[0][6];	C_aug_transpose[6][1] = C_aug[1][6]; C_aug_transpose[6][2] = C_aug[2][6];
	C_aug_transpose[7][0] = C_aug[0][7];	C_aug_transpose[7][1] = C_aug[1][7]; C_aug_transpose[7][2] = C_aug[2][7];
	C_aug_transpose[8][0] = C_aug[0][8];	C_aug_transpose[8][1] = C_aug[1][8]; C_aug_transpose[8][2] = C_aug[2][8];

//	CQC=np.matmul(np.transpose(C_aug),Q)
	float C_aug_matmul_Q[9][3]={0};
	for(int i=0;i<9;i++){
		for(int j=0;j<3;j++){
			C_aug_matmul_Q[i][j] = 0.0;
			for(int k=0;k<3;k++){
				C_aug_matmul_Q[i][j] += C_aug_transpose[i][k]*params.MPC_Cons_Q[k][j];
			}
		}
	}
//	CQC=np.matmul(CQC,C_aug)
	float CQC[9][9]={0};
    for (int i=0;i<9; i++) {
        for (int j=0;j<9; j++) {
        	CQC[i][j] = 0;
            for (int k=0; k<3; k++) {
            	CQC[i][j] += C_aug_matmul_Q[i][k] * C_aug[k][j];
            }
        }
    }
//   CSC=np.matmul(np.transpose(C_aug),S)
	float C_aug_matmul_S[9][3]={0};
	for(int i=0;i<9;i++){
		for(int j=0;j<3;j++){
			C_aug_matmul_S[i][j] = 0.0;
			for(int k=0;k<3;k++){
				C_aug_matmul_S[i][j] += C_aug_transpose[i][k]*params.MPC_Cons_S[k][j];
			}
		}
	}
//   CSC=np.matmul(C_aug_matmul_S,C_aug)
	float CSC[9][9]={0};
    for (int i=0;i<9; i++) {
        for (int j=0;j<9; j++) {
        	CSC[i][j] = 0;
            for (int k=0; k<3; k++) {
            	CSC[i][j] += C_aug_matmul_S[i][k] * C_aug[k][j];
            }
        }
    }
//	QC=np.matmul(Q,C_aug)
	float QC[3][9]={0.0};
    for (int i=0;i<3;i++) {
        for (int j=0;j<9;j++) {
        	QC[i][j] = 0;
            for (int k=0;k<3;k++) {
            	QC[i][j] += params.MPC_Cons_Q[i][k] * C_aug[k][j];
            }
        }
    }
//	SC=np.matmul(S,C_aug)
	float SC[3][9]={0.0};
    for (int i=0;i<3;i++) {
        for (int j=0;j<9;j++) {
        	QC[i][j] = 0;
            for (int k=0;k<3;k++) {
            	QC[i][j] += params.MPC_Cons_Q[i][k] * C_aug[k][j];
            }
        }
    }

	int hz_t = *hz;
	if(hz_t == 1){
		float Qdb[9][9] = {0}; float Tdb[3][9] = {0}; float Rdb[3][3] = {0}; float Cdb[9][3] = {0}; float Adc[9][9] = {0};
	}
	else if (hz_t == 2){
		float Qdb[18][18] = {0}; float Tdb[6][18] = {0}; float Rdb[6][6] = {0}; float Cdb[18][6] = {0}; float Adc[18][9] = {0};
	}
	else if (hz_t == 3){
		float Qdb[27][27] = {0}; float Tdb[9][27] = {0}; float Rdb[9][9] = {0}; float Cdb[27][9] = {0};  float Adc[27][9]={0};
	}
	else{
		float Qdb[36][36] = {0}; float Tdb[12][36] = {0}; float Rdb[12][12] = {0}; float Cdb[36][12] = {0};  float Adc[36][9]={0};
	}

	for(int i=0;i<hz_t;i++){
		if(i == hz_t-1){
			int rows = sizeof(CSC) / sizeof(CSC[0]);
			int columns = sizeof(CSC[0]) / sizeof(CSC[0][0]);

		}
		else{

		}
		for(int j=0;j<hz_t;j++){
			if(j<=1){

			}
		}
	}
	return 0;
}
