
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007670  08007670  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007678  08007678  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800767c  0800767c  0001767c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000008d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008dc  200008dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aab3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bc0  00000000  00000000  0003aaef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0003e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001518  00000000  00000000  0003fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004a44  00000000  00000000  00041270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d8b7  00000000  00000000  00045cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6711  00000000  00000000  0006356b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139c7c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dec  00000000  00000000  00139ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007638 	.word	0x08007638

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007638 	.word	0x08007638

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <find_uart_dev_instant>:
		}
	}
	return -1;
}

static int find_uart_dev_instant(UART_HandleTypeDef *huart){
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	for(int i=0; i<MAX_UART_INSTANT; i++){
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	e00e      	b.n	80004f8 <find_uart_dev_instant+0x2c>
		if(uart_drvs[i]->huart->Instance == huart->Instance){
 80004da:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <find_uart_dev_instant+0x44>)
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d101      	bne.n	80004f2 <find_uart_dev_instant+0x26>
			return i;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	e007      	b.n	8000502 <find_uart_dev_instant+0x36>
	for(int i=0; i<MAX_UART_INSTANT; i++){
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	3301      	adds	r3, #1
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2b02      	cmp	r3, #2
 80004fc:	dded      	ble.n	80004da <find_uart_dev_instant+0xe>
		}
	}
	return -1;
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000502:	4618      	mov	r0, r3
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000028 	.word	0x20000028

08000514 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	int idx = find_uart_dev_instant(huart);
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff ffd5 	bl	80004cc <find_uart_dev_instant>
 8000522:	60f8      	str	r0, [r7, #12]
	uart_drvs[idx]->tx_completed = true;
 8000524:	4a05      	ldr	r2, [pc, #20]	; (800053c <HAL_UART_TxCpltCallback+0x28>)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052c:	2201      	movs	r2, #1
 800052e:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000028 	.word	0x20000028

08000540 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
	HAL_UART_RxCpltCallback(huart);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]

	int idx = find_uart_dev_instant(huart);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff ffbf 	bl	80004cc <find_uart_dev_instant>
 800054e:	6138      	str	r0, [r7, #16]
	uart_drv_t *uart_drv = uart_drvs[idx];
 8000550:	4a20      	ldr	r2, [pc, #128]	; (80005d4 <HAL_UART_RxCpltCallback+0x94>)
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000558:	60fb      	str	r3, [r7, #12]

	uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	817b      	strh	r3, [r7, #10]
	uint16_t length =  sizeof(uart_drv->rx_dma_buffer) - currCNDTR;
 8000564:	897b      	ldrh	r3, [r7, #10]
 8000566:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800056a:	813b      	strh	r3, [r7, #8]

	/* Copy and process new data */
	for(uint16_t i=0; i<length; i++)
 800056c:	2300      	movs	r3, #0
 800056e:	82fb      	strh	r3, [r7, #22]
 8000570:	e00d      	b.n	800058e <HAL_UART_RxCpltCallback+0x4e>
	{
		cbuf_put(&uart_drv->rx_cbuf_handle, uart_drv->rx_dma_buffer[i]);
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	f203 601c 	addw	r0, r3, #1564	; 0x61c
 8000578:	8afb      	ldrh	r3, [r7, #22]
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	4413      	add	r3, r2
 800057e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000582:	4619      	mov	r1, r3
 8000584:	f000 f828 	bl	80005d8 <cbuf_put>
	for(uint16_t i=0; i<length; i++)
 8000588:	8afb      	ldrh	r3, [r7, #22]
 800058a:	3301      	adds	r3, #1
 800058c:	82fb      	strh	r3, [r7, #22]
 800058e:	8afa      	ldrh	r2, [r7, #22]
 8000590:	893b      	ldrh	r3, [r7, #8]
 8000592:	429a      	cmp	r2, r3
 8000594:	d3ed      	bcc.n	8000572 <HAL_UART_RxCpltCallback+0x32>
	}

	__HAL_DMA_DISABLE(huart->hdmarx);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f022 0201 	bic.w	r2, r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
	huart->hdmarx->Instance->NDTR = sizeof(uart_drv->rx_dma_buffer);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b4:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(huart->hdmarx);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f042 0201 	orr.w	r2, r2, #1
 80005c8:	601a      	str	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000028 	.word	0x20000028

080005d8 <cbuf_put>:
    cbuf->tail = 0;
    cbuf->full = false;
}

int cbuf_put(circular_buf_t* cbuf, char data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]
    if(!cbuf_full(cbuf))
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f82c 	bl	8000642 <cbuf_full>
 80005ea:	4603      	mov	r3, r0
 80005ec:	f083 0301 	eor.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d01f      	beq.n	8000636 <cbuf_put+0x5e>
    {
        cbuf->buffer[cbuf->head] = data;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4413      	add	r3, r2
 8000600:	78fa      	ldrb	r2, [r7, #3]
 8000602:	701a      	strb	r2, [r3, #0]
        cbuf->head = (cbuf->head + 1) % cbuf->size;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	3301      	adds	r3, #1
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	6852      	ldr	r2, [r2, #4]
 800060e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000612:	fb01 f202 	mul.w	r2, r1, r2
 8000616:	1a9a      	subs	r2, r3, r2
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	609a      	str	r2, [r3, #8]
        cbuf->full = (cbuf->head == cbuf->tail);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	429a      	cmp	r2, r3
 8000626:	bf0c      	ite	eq
 8000628:	2301      	moveq	r3, #1
 800062a:	2300      	movne	r3, #0
 800062c:	b2da      	uxtb	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	741a      	strb	r2, [r3, #16]
        return 0;
 8000632:	2300      	movs	r3, #0
 8000634:	e001      	b.n	800063a <cbuf_put+0x62>
    }
    return -1;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <cbuf_full>:
{
    return (!cbuf->full && (cbuf->head == cbuf->tail));
}

bool cbuf_full(circular_buf_t *cbuf)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
    return cbuf->full;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	7c1b      	ldrb	r3, [r3, #16]
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
	...

0800065c <bno055_write>:
		return -1;
	}
	return 0;
}

static int bno055_write(uint8_t addr, uint8_t *value){
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af04      	add	r7, sp, #16
 8000662:	4603      	mov	r3, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	b29a      	uxth	r2, r3
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	2301      	movs	r3, #1
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2301      	movs	r3, #1
 800067a:	2150      	movs	r1, #80	; 0x50
 800067c:	4806      	ldr	r0, [pc, #24]	; (8000698 <bno055_write+0x3c>)
 800067e:	f003 fbeb 	bl	8003e58 <HAL_I2C_Mem_Write>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <bno055_write+0x32>
		return -1;
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	e000      	b.n	8000690 <bno055_write+0x34>
	return 0;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000ac 	.word	0x200000ac

0800069c <bno055_set_operation_mode>:
}

void bno055_set_operation_mode(bno055_opr_mode_t opr_mode);
void bno055_fusion_data_output_systems(fusion_data_output_systems_t data_systems);

void bno055_set_operation_mode(bno055_opr_mode_t opr_mode){
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(opr_mode){
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b0c      	cmp	r3, #12
 80006aa:	f200 8092 	bhi.w	80007d2 <bno055_set_operation_mode+0x136>
 80006ae:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <bno055_set_operation_mode+0x18>)
 80006b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b4:	080006e9 	.word	0x080006e9
 80006b8:	080006fb 	.word	0x080006fb
 80006bc:	0800070d 	.word	0x0800070d
 80006c0:	0800071f 	.word	0x0800071f
 80006c4:	08000731 	.word	0x08000731
 80006c8:	08000743 	.word	0x08000743
 80006cc:	08000755 	.word	0x08000755
 80006d0:	08000767 	.word	0x08000767
 80006d4:	08000779 	.word	0x08000779
 80006d8:	0800078b 	.word	0x0800078b
 80006dc:	0800079d 	.word	0x0800079d
 80006e0:	080007af 	.word	0x080007af
 80006e4:	080007c1 	.word	0x080007c1
	case BNO055_OPERATION_CONFIG_MODE:
		tmp = BNO055_OPERATION_CONFIG_MODE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80006ec:	f107 030f 	add.w	r3, r7, #15
 80006f0:	4619      	mov	r1, r3
 80006f2:	203d      	movs	r0, #61	; 0x3d
 80006f4:	f7ff ffb2 	bl	800065c <bno055_write>
	break;
 80006f8:	e06b      	b.n	80007d2 <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCONLY:
		tmp = BNO055_OPERATION_MODE_ACCONLY;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80006fe:	f107 030f 	add.w	r3, r7, #15
 8000702:	4619      	mov	r1, r3
 8000704:	203d      	movs	r0, #61	; 0x3d
 8000706:	f7ff ffa9 	bl	800065c <bno055_write>
	break;
 800070a:	e062      	b.n	80007d2 <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_MAGONLY:
		tmp = BNO055_OPERATION_MODE_MAGONLY;
 800070c:	2302      	movs	r3, #2
 800070e:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000710:	f107 030f 	add.w	r3, r7, #15
 8000714:	4619      	mov	r1, r3
 8000716:	203d      	movs	r0, #61	; 0x3d
 8000718:	f7ff ffa0 	bl	800065c <bno055_write>
	break;
 800071c:	e059      	b.n	80007d2 <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_GYROONLY:
		tmp = BNO055_OPERATION_MODE_GYROONLY;
 800071e:	2303      	movs	r3, #3
 8000720:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000722:	f107 030f 	add.w	r3, r7, #15
 8000726:	4619      	mov	r1, r3
 8000728:	203d      	movs	r0, #61	; 0x3d
 800072a:	f7ff ff97 	bl	800065c <bno055_write>
	break;
 800072e:	e050      	b.n	80007d2 <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCMAG:
		tmp = BNO055_OPERATION_MODE_ACCMAG;
 8000730:	2304      	movs	r3, #4
 8000732:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000734:	f107 030f 	add.w	r3, r7, #15
 8000738:	4619      	mov	r1, r3
 800073a:	203d      	movs	r0, #61	; 0x3d
 800073c:	f7ff ff8e 	bl	800065c <bno055_write>
	break;
 8000740:	e047      	b.n	80007d2 <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCGYRO:
		tmp = BNO055_OPERATION_MODE_ACCGYRO;
 8000742:	2305      	movs	r3, #5
 8000744:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000746:	f107 030f 	add.w	r3, r7, #15
 800074a:	4619      	mov	r1, r3
 800074c:	203d      	movs	r0, #61	; 0x3d
 800074e:	f7ff ff85 	bl	800065c <bno055_write>
	break;
 8000752:	e03e      	b.n	80007d2 <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_MAGGYRO:
		tmp = BNO055_OPERATION_MODE_MAGGYRO;
 8000754:	2306      	movs	r3, #6
 8000756:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000758:	f107 030f 	add.w	r3, r7, #15
 800075c:	4619      	mov	r1, r3
 800075e:	203d      	movs	r0, #61	; 0x3d
 8000760:	f7ff ff7c 	bl	800065c <bno055_write>
	break;
 8000764:	e035      	b.n	80007d2 <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_AMG:
		tmp = BNO055_OPERATION_MODE_AMG;
 8000766:	2307      	movs	r3, #7
 8000768:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 800076a:	f107 030f 	add.w	r3, r7, #15
 800076e:	4619      	mov	r1, r3
 8000770:	203d      	movs	r0, #61	; 0x3d
 8000772:	f7ff ff73 	bl	800065c <bno055_write>
	break;
 8000776:	e02c      	b.n	80007d2 <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_IMU:
		tmp = BNO055_OPERATION_MODE_IMU;
 8000778:	2308      	movs	r3, #8
 800077a:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 800077c:	f107 030f 	add.w	r3, r7, #15
 8000780:	4619      	mov	r1, r3
 8000782:	203d      	movs	r0, #61	; 0x3d
 8000784:	f7ff ff6a 	bl	800065c <bno055_write>
	break;
 8000788:	e023      	b.n	80007d2 <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_COMPASS:
		tmp = BNO055_OPERATION_MODE_COMPASS;
 800078a:	2309      	movs	r3, #9
 800078c:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 800078e:	f107 030f 	add.w	r3, r7, #15
 8000792:	4619      	mov	r1, r3
 8000794:	203d      	movs	r0, #61	; 0x3d
 8000796:	f7ff ff61 	bl	800065c <bno055_write>
	break;
 800079a:	e01a      	b.n	80007d2 <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_M4G:
		tmp = BNO055_OPERATION_MODE_M4G;
 800079c:	230a      	movs	r3, #10
 800079e:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80007a0:	f107 030f 	add.w	r3, r7, #15
 80007a4:	4619      	mov	r1, r3
 80007a6:	203d      	movs	r0, #61	; 0x3d
 80007a8:	f7ff ff58 	bl	800065c <bno055_write>
	break;
 80007ac:	e011      	b.n	80007d2 <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_NDOF_FMC_OFF:
		tmp = BNO055_OPERATION_MODE_NDOF_FMC_OFF;
 80007ae:	230b      	movs	r3, #11
 80007b0:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80007b2:	f107 030f 	add.w	r3, r7, #15
 80007b6:	4619      	mov	r1, r3
 80007b8:	203d      	movs	r0, #61	; 0x3d
 80007ba:	f7ff ff4f 	bl	800065c <bno055_write>
	break;
 80007be:	e008      	b.n	80007d2 <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_NDOF:
		tmp = BNO055_OPERATION_MODE_NDOF;
 80007c0:	230c      	movs	r3, #12
 80007c2:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80007c4:	f107 030f 	add.w	r3, r7, #15
 80007c8:	4619      	mov	r1, r3
 80007ca:	203d      	movs	r0, #61	; 0x3d
 80007cc:	f7ff ff46 	bl	800065c <bno055_write>
	break;
 80007d0:	bf00      	nop
	}
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop

080007dc <bno055_fusion_data_output_systems>:

void bno055_fusion_data_output_systems(fusion_data_output_systems_t data_systems){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(data_systems){
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <bno055_fusion_data_output_systems+0x16>
 80007ec:	2b80      	cmp	r3, #128	; 0x80
 80007ee:	d009      	beq.n	8000804 <bno055_fusion_data_output_systems+0x28>
	case ANDROID_FUSION_DATA_OUTPUT:
	tmp = ANDROID_FUSION_DATA_OUTPUT;
	bno055_write(UNIT_SEL,&tmp);
	break;
	}
}
 80007f0:	e011      	b.n	8000816 <bno055_fusion_data_output_systems+0x3a>
	tmp = WINDOWS_FUSION_DATA_OUTPUT,
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
	bno055_write(UNIT_SEL,&tmp);
 80007f6:	f107 030f 	add.w	r3, r7, #15
 80007fa:	4619      	mov	r1, r3
 80007fc:	203b      	movs	r0, #59	; 0x3b
 80007fe:	f7ff ff2d 	bl	800065c <bno055_write>
	break;
 8000802:	e008      	b.n	8000816 <bno055_fusion_data_output_systems+0x3a>
	tmp = ANDROID_FUSION_DATA_OUTPUT;
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	73fb      	strb	r3, [r7, #15]
	bno055_write(UNIT_SEL,&tmp);
 8000808:	f107 030f 	add.w	r3, r7, #15
 800080c:	4619      	mov	r1, r3
 800080e:	203b      	movs	r0, #59	; 0x3b
 8000810:	f7ff ff24 	bl	800065c <bno055_write>
	break;
 8000814:	bf00      	nop
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <bno055_axis_remap_config>:

void bno055_axis_remap_config(bno055_axis_remap_config_t axis_remap){
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(axis_remap){
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b21      	cmp	r3, #33	; 0x21
 800082c:	d002      	beq.n	8000834 <bno055_axis_remap_config+0x16>
 800082e:	2b24      	cmp	r3, #36	; 0x24
 8000830:	d009      	beq.n	8000846 <bno055_axis_remap_config+0x28>
	case REMAP_CONFIG_P1_2_4_7:
	tmp = REMAP_CONFIG_P1_2_4_7,
	bno055_write(AXIS_MAP_CONFIG,&tmp);
	break;
	}
}
 8000832:	e011      	b.n	8000858 <bno055_axis_remap_config+0x3a>
	tmp = REMAP_CONFIG_P0_3_5_6,
 8000834:	2321      	movs	r3, #33	; 0x21
 8000836:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_CONFIG,&tmp);
 8000838:	f107 030f 	add.w	r3, r7, #15
 800083c:	4619      	mov	r1, r3
 800083e:	2041      	movs	r0, #65	; 0x41
 8000840:	f7ff ff0c 	bl	800065c <bno055_write>
	break;
 8000844:	e008      	b.n	8000858 <bno055_axis_remap_config+0x3a>
	tmp = REMAP_CONFIG_P1_2_4_7,
 8000846:	2324      	movs	r3, #36	; 0x24
 8000848:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_CONFIG,&tmp);
 800084a:	f107 030f 	add.w	r3, r7, #15
 800084e:	4619      	mov	r1, r3
 8000850:	2041      	movs	r0, #65	; 0x41
 8000852:	f7ff ff03 	bl	800065c <bno055_write>
	break;
 8000856:	bf00      	nop
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <bno055_axis_remap_sign>:

void bno055_axis_remap_sign(bno055_axis_remap_sign_t axis_remap_sign){
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(axis_remap_sign){
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b07      	cmp	r3, #7
 800086e:	d85b      	bhi.n	8000928 <bno055_axis_remap_sign+0xc8>
 8000870:	a201      	add	r2, pc, #4	; (adr r2, 8000878 <bno055_axis_remap_sign+0x18>)
 8000872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000876:	bf00      	nop
 8000878:	080008ab 	.word	0x080008ab
 800087c:	080008f3 	.word	0x080008f3
 8000880:	080008cf 	.word	0x080008cf
 8000884:	080008e1 	.word	0x080008e1
 8000888:	08000899 	.word	0x08000899
 800088c:	08000917 	.word	0x08000917
 8000890:	080008bd 	.word	0x080008bd
 8000894:	08000905 	.word	0x08000905
	case REMAP_SIGN_P0:
	tmp = REMAP_SIGN_P0,
 8000898:	2304      	movs	r3, #4
 800089a:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 800089c:	f107 030f 	add.w	r3, r7, #15
 80008a0:	4619      	mov	r1, r3
 80008a2:	2042      	movs	r0, #66	; 0x42
 80008a4:	f7ff feda 	bl	800065c <bno055_write>
	break;
 80008a8:	e03e      	b.n	8000928 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P1:
	tmp = REMAP_SIGN_P1,
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 80008ae:	f107 030f 	add.w	r3, r7, #15
 80008b2:	4619      	mov	r1, r3
 80008b4:	2042      	movs	r0, #66	; 0x42
 80008b6:	f7ff fed1 	bl	800065c <bno055_write>
	break;
 80008ba:	e035      	b.n	8000928 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P2:
	tmp = REMAP_SIGN_P2,
 80008bc:	2306      	movs	r3, #6
 80008be:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 80008c0:	f107 030f 	add.w	r3, r7, #15
 80008c4:	4619      	mov	r1, r3
 80008c6:	2042      	movs	r0, #66	; 0x42
 80008c8:	f7ff fec8 	bl	800065c <bno055_write>
	break;
 80008cc:	e02c      	b.n	8000928 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P3:
	tmp = REMAP_SIGN_P3,
 80008ce:	2302      	movs	r3, #2
 80008d0:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 80008d2:	f107 030f 	add.w	r3, r7, #15
 80008d6:	4619      	mov	r1, r3
 80008d8:	2042      	movs	r0, #66	; 0x42
 80008da:	f7ff febf 	bl	800065c <bno055_write>
	break;
 80008de:	e023      	b.n	8000928 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P4:
	tmp = REMAP_SIGN_P4,
 80008e0:	2303      	movs	r3, #3
 80008e2:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 80008e4:	f107 030f 	add.w	r3, r7, #15
 80008e8:	4619      	mov	r1, r3
 80008ea:	2042      	movs	r0, #66	; 0x42
 80008ec:	f7ff feb6 	bl	800065c <bno055_write>
	break;
 80008f0:	e01a      	b.n	8000928 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P5:
	tmp = REMAP_SIGN_P5,
 80008f2:	2301      	movs	r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 80008f6:	f107 030f 	add.w	r3, r7, #15
 80008fa:	4619      	mov	r1, r3
 80008fc:	2042      	movs	r0, #66	; 0x42
 80008fe:	f7ff fead 	bl	800065c <bno055_write>
	break;
 8000902:	e011      	b.n	8000928 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P6:
	tmp = REMAP_SIGN_P6,
 8000904:	2307      	movs	r3, #7
 8000906:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000908:	f107 030f 	add.w	r3, r7, #15
 800090c:	4619      	mov	r1, r3
 800090e:	2042      	movs	r0, #66	; 0x42
 8000910:	f7ff fea4 	bl	800065c <bno055_write>
	break;
 8000914:	e008      	b.n	8000928 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P7:
	tmp = REMAP_SIGN_P7,
 8000916:	2305      	movs	r3, #5
 8000918:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 800091a:	f107 030f 	add.w	r3, r7, #15
 800091e:	4619      	mov	r1, r3
 8000920:	2042      	movs	r0, #66	; 0x42
 8000922:	f7ff fe9b 	bl	800065c <bno055_write>
	break;
 8000926:	bf00      	nop
	}
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <bno055_init>:
	*acc_radius = (int16_t)((int16_t)buffer_radius[1]) << 8 | buffer_radius[0];
	*mag_radius = (int16_t)((int16_t)buffer_radius[3]) << 8 | buffer_radius[2];
	return 0;
}

int bno055_init(){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	uint8_t tmp;
	//char  err_num = 0;
	//char sys_status;
	if(HAL_I2C_IsDeviceReady(&BNO055__I2C, BNO055_I2C_ADDR, 1, 100)!=HAL_OK){
 8000936:	2364      	movs	r3, #100	; 0x64
 8000938:	2201      	movs	r2, #1
 800093a:	2150      	movs	r1, #80	; 0x50
 800093c:	4860      	ldr	r0, [pc, #384]	; (8000ac0 <bno055_init+0x190>)
 800093e:	f003 fdab 	bl	8004498 <HAL_I2C_IsDeviceReady>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d006      	beq.n	8000956 <bno055_init+0x26>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800094e:	485d      	ldr	r0, [pc, #372]	; (8000ac4 <bno055_init+0x194>)
 8000950:	f003 f90a 	bl	8003b68 <HAL_GPIO_WritePin>
 8000954:	e005      	b.n	8000962 <bno055_init+0x32>
	}
	else{
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800095c:	4859      	ldr	r0, [pc, #356]	; (8000ac4 <bno055_init+0x194>)
 800095e:	f003 f903 	bl	8003b68 <HAL_GPIO_WritePin>
	}
	tmp = 0x00;
 8000962:	2300      	movs	r3, #0
 8000964:	71fb      	strb	r3, [r7, #7]
	//if(bno055_write(PAGE_ID,&tmp)<0) return -1;
	if(bno055_write(PAGE_ID,&tmp)==HAL_OK){
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	4619      	mov	r1, r3
 800096a:	2007      	movs	r0, #7
 800096c:	f7ff fe76 	bl	800065c <bno055_write>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d105      	bne.n	8000982 <bno055_init+0x52>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800097c:	4851      	ldr	r0, [pc, #324]	; (8000ac4 <bno055_init+0x194>)
 800097e:	f003 f8f3 	bl	8003b68 <HAL_GPIO_WritePin>
	}
	bno055_set_operation_mode(BNO055_OPERATION_CONFIG_MODE);
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff fe8a 	bl	800069c <bno055_set_operation_mode>
	//Reset SYSTEM
	tmp = 0x20;
 8000988:	2320      	movs	r3, #32
 800098a:	71fb      	strb	r3, [r7, #7]
	if(bno055_write(SYS_TRIGGER,&tmp)<0) return -1;
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	4619      	mov	r1, r3
 8000990:	203f      	movs	r0, #63	; 0x3f
 8000992:	f7ff fe63 	bl	800065c <bno055_write>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	da02      	bge.n	80009a2 <bno055_init+0x72>
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	e08a      	b.n	8000ab8 <bno055_init+0x188>
	//Wait Time to reset (20ns)
	HAL_Delay(20);
 80009a2:	2014      	movs	r0, #20
 80009a4:	f001 ff64 	bl	8002870 <HAL_Delay>
	//for(int i=0;i<10;i++)for(int j=0;j<1000;j++)__NOP();
	//delay_us(10);
	tmp = POWER_MODE_NORMAL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	71fb      	strb	r3, [r7, #7]
	if(bno055_write(PWR_MODE,&tmp)<0) return -1;
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	4619      	mov	r1, r3
 80009b0:	203e      	movs	r0, #62	; 0x3e
 80009b2:	f7ff fe53 	bl	800065c <bno055_write>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	da02      	bge.n	80009c2 <bno055_init+0x92>
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	e07a      	b.n	8000ab8 <bno055_init+0x188>
//		//System running without fusion algorithm
//		break;
//	}
	/* Configurations Accelerometer */
	//Move to Page 1//
	tmp = 0x01;
 80009c2:	2301      	movs	r3, #1
 80009c4:	71fb      	strb	r3, [r7, #7]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	4619      	mov	r1, r3
 80009ca:	2007      	movs	r0, #7
 80009cc:	f7ff fe46 	bl	800065c <bno055_write>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	da02      	bge.n	80009dc <bno055_init+0xac>
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e06d      	b.n	8000ab8 <bno055_init+0x188>
	tmp = (ACCEL_OPERATION_MODE_NORMAL | ACCEL_BANDWIDTH)| ACCEL_G_RANGE;
 80009dc:	230d      	movs	r3, #13
 80009de:	71fb      	strb	r3, [r7, #7]
	if(bno055_write(ACC_CONFIG,&tmp)<0) return -1;
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	4619      	mov	r1, r3
 80009e4:	2008      	movs	r0, #8
 80009e6:	f7ff fe39 	bl	800065c <bno055_write>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	da02      	bge.n	80009f6 <bno055_init+0xc6>
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
 80009f4:	e060      	b.n	8000ab8 <bno055_init+0x188>
	/* Configurations Gyroscope */
	tmp = GYR_BANDWIDTH | GYRO_RANGE;
 80009f6:	2338      	movs	r3, #56	; 0x38
 80009f8:	71fb      	strb	r3, [r7, #7]
	if(bno055_write(GYR_CONFIG_0,&tmp)<0) return -1;
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	4619      	mov	r1, r3
 80009fe:	200a      	movs	r0, #10
 8000a00:	f7ff fe2c 	bl	800065c <bno055_write>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	da02      	bge.n	8000a10 <bno055_init+0xe0>
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	e053      	b.n	8000ab8 <bno055_init+0x188>
	tmp = GYR_OPERATION_MODE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	71fb      	strb	r3, [r7, #7]
	if(bno055_write(GYR_CONFIG_1,&tmp)<0) return -1;
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	4619      	mov	r1, r3
 8000a18:	200b      	movs	r0, #11
 8000a1a:	f7ff fe1f 	bl	800065c <bno055_write>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	da02      	bge.n	8000a2a <bno055_init+0xfa>
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	e046      	b.n	8000ab8 <bno055_init+0x188>
	/* Configurations Magnetometer */
	tmp = (MAG_PWR_MODE | MAG_OPERATION_MODE)| BNO055_MAG_DATA_OUTPUT_RATE;
 8000a2a:	237b      	movs	r3, #123	; 0x7b
 8000a2c:	71fb      	strb	r3, [r7, #7]
	if(bno055_write(MAG_CONFIG,&tmp)<0) return -1;
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	4619      	mov	r1, r3
 8000a32:	2009      	movs	r0, #9
 8000a34:	f7ff fe12 	bl	800065c <bno055_write>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	da02      	bge.n	8000a44 <bno055_init+0x114>
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	e039      	b.n	8000ab8 <bno055_init+0x188>

	/*Configuration Sensor Unit*/
	//Move to Page 0//
	tmp = 0x00;
 8000a44:	2300      	movs	r3, #0
 8000a46:	71fb      	strb	r3, [r7, #7]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	2007      	movs	r0, #7
 8000a4e:	f7ff fe05 	bl	800065c <bno055_write>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	da02      	bge.n	8000a5e <bno055_init+0x12e>
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5c:	e02c      	b.n	8000ab8 <bno055_init+0x188>
	tmp = (((TEMPERATURE_UNITS | EULER_ANGLES_UNITS)| ANGULAR_RATE_UNITS)| BNO055_ACCEL_UNITS);
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71fb      	strb	r3, [r7, #7]
	if(bno055_write(UNIT_SEL,&tmp)<0) return -1;
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	4619      	mov	r1, r3
 8000a66:	203b      	movs	r0, #59	; 0x3b
 8000a68:	f7ff fdf8 	bl	800065c <bno055_write>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	da02      	bge.n	8000a78 <bno055_init+0x148>
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e01f      	b.n	8000ab8 <bno055_init+0x188>
	bno055_fusion_data_output_systems(WINDOWS_FUSION_DATA_OUTPUT);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff feaf 	bl	80007dc <bno055_fusion_data_output_systems>
	/* Configure axis mapping*/
	bno055_axis_remap_config(REMAP_CONFIG_P1_2_4_7);
 8000a7e:	2024      	movs	r0, #36	; 0x24
 8000a80:	f7ff fecd 	bl	800081e <bno055_axis_remap_config>
	bno055_axis_remap_sign(REMAP_SIGN_P1);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff feeb 	bl	8000860 <bno055_axis_remap_sign>
	tmp = 0x00;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	if(bno055_write(SYS_TRIGGER,&tmp)<0) return -1;
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	4619      	mov	r1, r3
 8000a92:	203f      	movs	r0, #63	; 0x3f
 8000a94:	f7ff fde2 	bl	800065c <bno055_write>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	da02      	bge.n	8000aa4 <bno055_init+0x174>
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <bno055_init+0x188>
	//Configuration Sensor's Operation Mode
	bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8000aa4:	200c      	movs	r0, #12
 8000aa6:	f7ff fdf9 	bl	800069c <bno055_set_operation_mode>
	//for(int i=0;i<10;i++)for(int j=0;j<10000;j++)__NOP();
	HAL_Delay(20);
 8000aaa:	2014      	movs	r0, #20
 8000aac:	f001 fee0 	bl	8002870 <HAL_Delay>
//				break;
//		}
//	}
	//for(int i=0;i<10;i++)for(int j=0;j<1000;j++)__NOP();
	//delay_us(10);
	HAL_Delay(20);
 8000ab0:	2014      	movs	r0, #20
 8000ab2:	f001 fedd 	bl	8002870 <HAL_Delay>
	return 0;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000ac 	.word	0x200000ac
 8000ac4:	40020800 	.word	0x40020800

08000ac8 <mpu9250_read>:
static float g_lsb_per_dpfs;
static float g_lsb_per_g;
//static float g_lsb_per_mili_gauss;
static float temp;

static int mpu9250_read(uint8_t addr, uint8_t *value){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af04      	add	r7, sp, #16
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&MPU9250_I2C, MPU9250_I2C_ADDR, addr, I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS) != HAL_OK){
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	2364      	movs	r3, #100	; 0x64
 8000ada:	9302      	str	r3, [sp, #8]
 8000adc:	2301      	movs	r3, #1
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	21d0      	movs	r1, #208	; 0xd0
 8000ae8:	4808      	ldr	r0, [pc, #32]	; (8000b0c <mpu9250_read+0x44>)
 8000aea:	f003 faaf 	bl	800404c <HAL_I2C_Mem_Read>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d005      	beq.n	8000b00 <mpu9250_read+0x38>
		*value = 0;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
		return -1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e000      	b.n	8000b02 <mpu9250_read+0x3a>
	}
	return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000ac 	.word	0x200000ac

08000b10 <mpu9250_write>:

static int mpu9250_write(uint8_t addr, uint8_t *value){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af04      	add	r7, sp, #16
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&MPU9250_I2C, MPU9250_I2C_ADDR, addr, I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS) != HAL_OK)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	2364      	movs	r3, #100	; 0x64
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	2301      	movs	r3, #1
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	21d0      	movs	r1, #208	; 0xd0
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <mpu9250_write+0x3c>)
 8000b32:	f003 f991 	bl	8003e58 <HAL_I2C_Mem_Write>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <mpu9250_write+0x32>
		return -1;
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b40:	e000      	b.n	8000b44 <mpu9250_write+0x34>
	return 0;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200000ac 	.word	0x200000ac

08000b50 <mpu9250_init>:
//		return -1;
//	return 0;
//}


int mpu9250_init(){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
//
//	Data = 0x00;
//	HAL_I2C_Mem_Write(&MPU9250_I2C, MPU9250_I2C_ADDR, 0x6A, I2C_MEMADD_SIZE_8BIT, &Data, 1, I2C_TIMEOUT_MS);
///////////////////
	// Reset mpu9250
	tmp = 0x80; // H_RESET
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	71fb      	strb	r3, [r7, #7]
	if(mpu9250_write(MPU9250_PWR_MGMT_1, &tmp) < 0) return -1;
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	206b      	movs	r0, #107	; 0x6b
 8000b60:	f7ff ffd6 	bl	8000b10 <mpu9250_write>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	da02      	bge.n	8000b70 <mpu9250_init+0x20>
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e064      	b.n	8000c3a <mpu9250_init+0xea>
	for(int i=0;i<10;i++)for(int j=0;j<1000;j++)__NOP();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e00d      	b.n	8000b92 <mpu9250_init+0x42>
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	e003      	b.n	8000b84 <mpu9250_init+0x34>
 8000b7c:	bf00      	nop
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	3301      	adds	r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b8a:	dbf7      	blt.n	8000b7c <mpu9250_init+0x2c>
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b09      	cmp	r3, #9
 8000b96:	ddee      	ble.n	8000b76 <mpu9250_init+0x26>

	// Enable I2C bypass mode
	tmp = 0x02; // BYPASS_EN
 8000b98:	2302      	movs	r3, #2
 8000b9a:	71fb      	strb	r3, [r7, #7]
	if(mpu9250_write(MPU9250_INT_PIN_CFG, &tmp) < 0) return -1;
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	2037      	movs	r0, #55	; 0x37
 8000ba2:	f7ff ffb5 	bl	8000b10 <mpu9250_write>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	da02      	bge.n	8000bb2 <mpu9250_init+0x62>
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	e043      	b.n	8000c3a <mpu9250_init+0xea>

//	// Reset AK8963
//	tmp = 0x01; // SRST
//	if(ak8963_write(AK8963_CNTL2, &tmp) < 0);

	if(mpu9250_test() < 0) return -1;
 8000bb2:	f000 f84f 	bl	8000c54 <mpu9250_test>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	da02      	bge.n	8000bc2 <mpu9250_init+0x72>
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	e03b      	b.n	8000c3a <mpu9250_init+0xea>

	// Set mpu9250 clock source
	tmp = 0x01; // CLKSEL
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	71fb      	strb	r3, [r7, #7]
	if(mpu9250_write(MPU9250_PWR_MGMT_1, &tmp) < 0) return -1;
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	4619      	mov	r1, r3
 8000bca:	206b      	movs	r0, #107	; 0x6b
 8000bcc:	f7ff ffa0 	bl	8000b10 <mpu9250_write>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	da02      	bge.n	8000bdc <mpu9250_init+0x8c>
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e02e      	b.n	8000c3a <mpu9250_init+0xea>
//	HAL_I2C_Mem_Write(&MPU9250_I2C, MPU9250_I2C_ADDR, MPU9250_SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &Data, 1, I2C_TIMEOUT_MS);
////////////////////////////////////////////


#if GFS_SEL==0
		tmp = GYRO_FS_SEL_250DPS;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	71fb      	strb	r3, [r7, #7]
		if(mpu9250_write(MPU9250_GYRO_CONFIG, &tmp) < 0) return -1;
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	4619      	mov	r1, r3
 8000be4:	201b      	movs	r0, #27
 8000be6:	f7ff ff93 	bl	8000b10 <mpu9250_write>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	da02      	bge.n	8000bf6 <mpu9250_init+0xa6>
 8000bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf4:	e021      	b.n	8000c3a <mpu9250_init+0xea>
		g_lsb_per_dpfs = 131.f;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <mpu9250_init+0xf4>)
 8000bf8:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <mpu9250_init+0xf8>)
 8000bfa:	601a      	str	r2, [r3, #0]
		if(mpu9250_write(MPU9250_GYRO_CONFIG, &tmp) < 0) return -1;
		g_lsb_per_dpfs = 16.4f;
#endif

#if ACCEL_FS_SEL==0
		tmp = ACCEL_FS_SEL_2G;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	71fb      	strb	r3, [r7, #7]
		if(mpu9250_write(MPU9250_ACCEL_CONFIG, &tmp) < 0) return -1;
 8000c00:	1dfb      	adds	r3, r7, #7
 8000c02:	4619      	mov	r1, r3
 8000c04:	201c      	movs	r0, #28
 8000c06:	f7ff ff83 	bl	8000b10 <mpu9250_write>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	da02      	bge.n	8000c16 <mpu9250_init+0xc6>
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
 8000c14:	e011      	b.n	8000c3a <mpu9250_init+0xea>
		g_lsb_per_g = 16384.f;
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <mpu9250_init+0xfc>)
 8000c18:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000c1c:	601a      	str	r2, [r3, #0]
//
//	tmp = 0x16; // Continuous measurement mode 2 + 16 bit resolution
//	if(ak8963_write(AK8963_CNTL1, &tmp) < 0);
//	g_lsb_per_mili_gauss = 32760.0f/4912.f;

	tmp = 0x01;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	71fb      	strb	r3, [r7, #7]
	mpu9250_write(MPU9250_INT_ENABLE, &tmp);
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	4619      	mov	r1, r3
 8000c26:	2038      	movs	r0, #56	; 0x38
 8000c28:	f7ff ff72 	bl	8000b10 <mpu9250_write>
//	tmp = 0x60;
//	hmc5883l_write(HMC5883L_RA_CONFIG_B, &tmp);
//	tmp = 0x00;
//	hmc5883l_write(HMC5883L_RA_MODE_REGISTER, &tmp);

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <mpu9250_init+0x100>)
 8000c34:	f002 ff98 	bl	8003b68 <HAL_GPIO_WritePin>

	return 0;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000034 	.word	0x20000034
 8000c48:	43030000 	.word	0x43030000
 8000c4c:	20000038 	.word	0x20000038
 8000c50:	40020800 	.word	0x40020800

08000c54 <mpu9250_test>:

int mpu9250_test(){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
	uint8_t tmp;

	mpu9250_read(MPU9250_WHO_AM_I, &tmp);
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	2075      	movs	r0, #117	; 0x75
 8000c60:	f7ff ff32 	bl	8000ac8 <mpu9250_read>
	if(tmp!=0x68) return -1;
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b68      	cmp	r3, #104	; 0x68
 8000c68:	d002      	beq.n	8000c70 <mpu9250_test+0x1c>
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e000      	b.n	8000c72 <mpu9250_test+0x1e>

//	ak8963_read(AK8963_WIA, &tmp);
//	if(tmp!=AK8963_WAI_RESULT);

	return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c82:	463b      	mov	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000c90:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <MX_ADC1_Init+0x9c>)
 8000c92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000c96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cbe:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <MX_ADC1_Init+0xa0>)
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cde:	f001 fdeb 	bl	80028b8 <HAL_ADC_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ce8:	f000 fb59 	bl	800139e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000cec:	230b      	movs	r3, #11
 8000cee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cfe:	f001 fe1f 	bl	8002940 <HAL_ADC_ConfigChannel>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d08:	f000 fb49 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2000003c 	.word	0x2000003c
 8000d18:	40012000 	.word	0x40012000
 8000d1c:	0f000001 	.word	0x0f000001

08000d20 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_ADC_MspInit+0x7c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d127      	bne.n	8000d92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = MCU_ADC_1_Pin|MCU_ADC_2_Pin|MCU_ADC_3_Pin;
 8000d7a:	230e      	movs	r3, #14
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_ADC_MspInit+0x84>)
 8000d8e:	f002 fd4f 	bl	8003830 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40012000 	.word	0x40012000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020800 	.word	0x40020800

08000da8 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <MX_CAN2_Init+0x60>)
 8000dae:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <MX_CAN2_Init+0x64>)
 8000db0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_CAN2_Init+0x60>)
 8000db4:	2210      	movs	r2, #16
 8000db6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_CAN2_Init+0x60>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_CAN2_Init+0x60>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <MX_CAN2_Init+0x60>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_CAN2_Init+0x60>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <MX_CAN2_Init+0x60>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_CAN2_Init+0x60>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <MX_CAN2_Init+0x60>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_CAN2_Init+0x60>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <MX_CAN2_Init+0x60>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_CAN2_Init+0x60>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_CAN2_Init+0x60>)
 8000df6:	f001 ffc1 	bl	8002d7c <HAL_CAN_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000e00:	f000 facd 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000084 	.word	0x20000084
 8000e0c:	40006800 	.word	0x40006800

08000e10 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a20      	ldr	r2, [pc, #128]	; (8000eb0 <HAL_CAN_MspInit+0xa0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d13a      	bne.n	8000ea8 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <HAL_CAN_MspInit+0xa4>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <HAL_CAN_MspInit+0xa4>)
 8000e3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_CAN_MspInit+0xa4>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_CAN_MspInit+0xa4>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <HAL_CAN_MspInit+0xa4>)
 8000e58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_CAN_MspInit+0xa4>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_CAN_MspInit+0xa4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_CAN_MspInit+0xa4>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_CAN_MspInit+0xa4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = MCU_CAN_RX_Pin|MCU_CAN_TX_Pin;
 8000e86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000e98:	2309      	movs	r3, #9
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_CAN_MspInit+0xa8>)
 8000ea4:	f002 fcc4 	bl	8003830 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40006800 	.word	0x40006800
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020400 	.word	0x40020400

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <MX_DMA_Init+0x108>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a3e      	ldr	r2, [pc, #248]	; (8000fc4 <MX_DMA_Init+0x108>)
 8000ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b3c      	ldr	r3, [pc, #240]	; (8000fc4 <MX_DMA_Init+0x108>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <MX_DMA_Init+0x108>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a37      	ldr	r2, [pc, #220]	; (8000fc4 <MX_DMA_Init+0x108>)
 8000ee8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <MX_DMA_Init+0x108>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	200b      	movs	r0, #11
 8000f00:	f002 f8f0 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f04:	200b      	movs	r0, #11
 8000f06:	f002 f909 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	200c      	movs	r0, #12
 8000f10:	f002 f8e8 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f14:	200c      	movs	r0, #12
 8000f16:	f002 f901 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	200d      	movs	r0, #13
 8000f20:	f002 f8e0 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f24:	200d      	movs	r0, #13
 8000f26:	f002 f8f9 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	200e      	movs	r0, #14
 8000f30:	f002 f8d8 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f34:	200e      	movs	r0, #14
 8000f36:	f002 f8f1 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	200f      	movs	r0, #15
 8000f40:	f002 f8d0 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f44:	200f      	movs	r0, #15
 8000f46:	f002 f8e9 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2010      	movs	r0, #16
 8000f50:	f002 f8c8 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f54:	2010      	movs	r0, #16
 8000f56:	f002 f8e1 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2011      	movs	r0, #17
 8000f60:	f002 f8c0 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f64:	2011      	movs	r0, #17
 8000f66:	f002 f8d9 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	202f      	movs	r0, #47	; 0x2f
 8000f70:	f002 f8b8 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000f74:	202f      	movs	r0, #47	; 0x2f
 8000f76:	f002 f8d1 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2039      	movs	r0, #57	; 0x39
 8000f80:	f002 f8b0 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f84:	2039      	movs	r0, #57	; 0x39
 8000f86:	f002 f8c9 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	203a      	movs	r0, #58	; 0x3a
 8000f90:	f002 f8a8 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f94:	203a      	movs	r0, #58	; 0x3a
 8000f96:	f002 f8c1 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2045      	movs	r0, #69	; 0x45
 8000fa0:	f002 f8a0 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000fa4:	2045      	movs	r0, #69	; 0x45
 8000fa6:	f002 f8b9 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2046      	movs	r0, #70	; 0x46
 8000fb0:	f002 f898 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000fb4:	2046      	movs	r0, #70	; 0x46
 8000fb6:	f002 f8b1 	bl	800311c <HAL_NVIC_EnableIRQ>

}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <MX_GPIO_Init>:
        * EXTI
     PA15   ------> S_TIM2_CH1_ETR
     PB3   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b54      	ldr	r3, [pc, #336]	; (8001134 <MX_GPIO_Init+0x16c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a53      	ldr	r2, [pc, #332]	; (8001134 <MX_GPIO_Init+0x16c>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b51      	ldr	r3, [pc, #324]	; (8001134 <MX_GPIO_Init+0x16c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b4d      	ldr	r3, [pc, #308]	; (8001134 <MX_GPIO_Init+0x16c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a4c      	ldr	r2, [pc, #304]	; (8001134 <MX_GPIO_Init+0x16c>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b4a      	ldr	r3, [pc, #296]	; (8001134 <MX_GPIO_Init+0x16c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	4b46      	ldr	r3, [pc, #280]	; (8001134 <MX_GPIO_Init+0x16c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a45      	ldr	r2, [pc, #276]	; (8001134 <MX_GPIO_Init+0x16c>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b43      	ldr	r3, [pc, #268]	; (8001134 <MX_GPIO_Init+0x16c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <MX_GPIO_Init+0x16c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a3e      	ldr	r2, [pc, #248]	; (8001134 <MX_GPIO_Init+0x16c>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b3c      	ldr	r3, [pc, #240]	; (8001134 <MX_GPIO_Init+0x16c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 800104e:	2200      	movs	r2, #0
 8001050:	f246 0131 	movw	r1, #24625	; 0x6031
 8001054:	4838      	ldr	r0, [pc, #224]	; (8001138 <MX_GPIO_Init+0x170>)
 8001056:	f002 fd87 	bl	8003b68 <HAL_GPIO_WritePin>
                          |ADD_SPI_CSn_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001060:	4836      	ldr	r0, [pc, #216]	; (800113c <MX_GPIO_Init+0x174>)
 8001062:	f002 fd81 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_LORA_RST_GPIO_Port, MCU_LORA_RST_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106c:	4834      	ldr	r0, [pc, #208]	; (8001140 <MX_GPIO_Init+0x178>)
 800106e:	f002 fd7b 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 8001072:	f246 0331 	movw	r3, #24625	; 0x6031
 8001076:	617b      	str	r3, [r7, #20]
                          |ADD_SPI_CSn_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	482b      	ldr	r0, [pc, #172]	; (8001138 <MX_GPIO_Init+0x170>)
 800108c:	f002 fbd0 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001096:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4824      	ldr	r0, [pc, #144]	; (8001138 <MX_GPIO_Init+0x170>)
 80010a8:	f002 fbc2 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin;
 80010ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	481d      	ldr	r0, [pc, #116]	; (800113c <MX_GPIO_Init+0x174>)
 80010c6:	f002 fbb3 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_LORA_RST_Pin;
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_LORA_RST_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4817      	ldr	r0, [pc, #92]	; (8001140 <MX_GPIO_Init+0x178>)
 80010e4:	f002 fba4 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR1_Pin;
 80010e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010fa:	2301      	movs	r3, #1
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR1_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	480e      	ldr	r0, [pc, #56]	; (8001140 <MX_GPIO_Init+0x178>)
 8001106:	f002 fb93 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR2_Pin;
 800110a:	2308      	movs	r3, #8
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800111a:	2301      	movs	r3, #1
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR2_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_GPIO_Init+0x174>)
 8001126:	f002 fb83 	bl	8003830 <HAL_GPIO_Init>

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40020800 	.word	0x40020800
 800113c:	40020400 	.word	0x40020400
 8001140:	40020000 	.word	0x40020000

08001144 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_I2C1_Init+0x50>)
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <MX_I2C1_Init+0x54>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_I2C1_Init+0x50>)
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_I2C1_Init+0x58>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_I2C1_Init+0x50>)
 8001162:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001166:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_I2C1_Init+0x50>)
 8001182:	f002 fd25 	bl	8003bd0 <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800118c:	f000 f907 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200000ac 	.word	0x200000ac
 8001198:	40005400 	.word	0x40005400
 800119c:	000186a0 	.word	0x000186a0

080011a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a19      	ldr	r2, [pc, #100]	; (8001224 <HAL_I2C_MspInit+0x84>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d12c      	bne.n	800121c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_I2C_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_I2C_MspInit+0x88>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_I2C_MspInit+0x88>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MCU_I2C_SCL_Pin|MCU_I2C_SDA_Pin;
 80011de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e4:	2312      	movs	r3, #18
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f0:	2304      	movs	r3, #4
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	480c      	ldr	r0, [pc, #48]	; (800122c <HAL_I2C_MspInit+0x8c>)
 80011fc:	f002 fb18 	bl	8003830 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_I2C_MspInit+0x88>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_I2C_MspInit+0x88>)
 800120a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_I2C_MspInit+0x88>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40005400 	.word	0x40005400
 8001228:	40023800 	.word	0x40023800
 800122c:	40020400 	.word	0x40020400

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001234:	f001 fada 	bl	80027ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001238:	f000 f838 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123c:	f7ff fec4 	bl	8000fc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001240:	f7ff fe3c 	bl	8000ebc <MX_DMA_Init>
  MX_ADC1_Init();
 8001244:	f7ff fd1a 	bl	8000c7c <MX_ADC1_Init>
  MX_CAN2_Init();
 8001248:	f7ff fdae 	bl	8000da8 <MX_CAN2_Init>
  MX_I2C1_Init();
 800124c:	f7ff ff7a 	bl	8001144 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001250:	f000 f8aa 	bl	80013a8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001254:	f000 fac6 	bl	80017e4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001258:	f000 fb88 	bl	800196c <MX_TIM3_Init>
  MX_TIM8_Init();
 800125c:	f000 fc22 	bl	8001aa4 <MX_TIM8_Init>
  MX_UART4_Init();
 8001260:	f000 fd94 	bl	8001d8c <MX_UART4_Init>
  MX_UART5_Init();
 8001264:	f000 fdbc 	bl	8001de0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001268:	f000 fde4 	bl	8001e34 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800126c:	f000 fe0c 	bl	8001e88 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001270:	f000 fe34 	bl	8001edc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001274:	f000 fe5c 	bl	8001f30 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8001278:	f000 fbc6 	bl	8001a08 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim5);
 800127c:	4809      	ldr	r0, [pc, #36]	; (80012a4 <main+0x74>)
 800127e:	f004 faf7 	bl	8005870 <HAL_TIM_Base_Start>
  HAL_Delay(1000);
 8001282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001286:	f001 faf3 	bl	8002870 <HAL_Delay>
  bno055_init();
 800128a:	f7ff fb51 	bl	8000930 <bno055_init>
  mpu9250_init();
 800128e:	f7ff fc5f 	bl	8000b50 <mpu9250_init>
//	  if((calib[0] == 3 && calib[1] == 3 && calib[2] == 3 && calib[3] == 3)){
//	  bno055_get_elu_data(&raw[0],&raw[1],&raw[2]);
//	  roll_read = raw[0];
//	  pitch_read = raw[1];
//	  yaw_read	= raw[2];
	  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8001292:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001296:	4804      	ldr	r0, [pc, #16]	; (80012a8 <main+0x78>)
 8001298:	f002 fc7f 	bl	8003b9a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f001 fae7 	bl	8002870 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80012a2:	e7f6      	b.n	8001292 <main+0x62>
 80012a4:	20000230 	.word	0x20000230
 80012a8:	40020800 	.word	0x40020800

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	; 0x50
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	2230      	movs	r2, #48	; 0x30
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f006 f9b4 	bl	8007628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <SystemClock_Config+0xcc>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	4a27      	ldr	r2, [pc, #156]	; (8001378 <SystemClock_Config+0xcc>)
 80012da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012de:	6413      	str	r3, [r2, #64]	; 0x40
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <SystemClock_Config+0xcc>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <SystemClock_Config+0xd0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a21      	ldr	r2, [pc, #132]	; (800137c <SystemClock_Config+0xd0>)
 80012f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b1f      	ldr	r3, [pc, #124]	; (800137c <SystemClock_Config+0xd0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001308:	2302      	movs	r3, #2
 800130a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130c:	2301      	movs	r3, #1
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001310:	2310      	movs	r3, #16
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001314:	2302      	movs	r3, #2
 8001316:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001318:	2300      	movs	r3, #0
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800131c:	2308      	movs	r3, #8
 800131e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001320:	23a8      	movs	r3, #168	; 0xa8
 8001322:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001324:	2302      	movs	r3, #2
 8001326:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001328:	2304      	movs	r3, #4
 800132a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	4618      	mov	r0, r3
 8001332:	f003 fd3b 	bl	8004dac <HAL_RCC_OscConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800133c:	f000 f82f 	bl	800139e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001340:	230f      	movs	r3, #15
 8001342:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001344:	2302      	movs	r3, #2
 8001346:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800134c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001350:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001356:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2105      	movs	r1, #5
 800135e:	4618      	mov	r0, r3
 8001360:	f003 ff9c 	bl	800529c <HAL_RCC_ClockConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800136a:	f000 f818 	bl	800139e <Error_Handler>
  }
}
 800136e:	bf00      	nop
 8001370:	3750      	adds	r7, #80	; 0x50
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40007000 	.word	0x40007000

08001380 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001390:	d101      	bne.n	8001396 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001392:	f001 fa4d 	bl	8002830 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a2:	b672      	cpsid	i
}
 80013a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <Error_Handler+0x8>

080013a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_SPI1_Init+0x64>)
 80013ae:	4a18      	ldr	r2, [pc, #96]	; (8001410 <MX_SPI1_Init+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_SPI1_Init+0x64>)
 80013b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_SPI1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_SPI1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_SPI1_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_SPI1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_SPI1_Init+0x64>)
 80013d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_SPI1_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <MX_SPI1_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_SPI1_Init+0x64>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <MX_SPI1_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_SPI1_Init+0x64>)
 80013f4:	220a      	movs	r2, #10
 80013f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_SPI1_Init+0x64>)
 80013fa:	f004 f961 	bl	80056c0 <HAL_SPI_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001404:	f7ff ffcb 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000100 	.word	0x20000100
 8001410:	40013000 	.word	0x40013000

08001414 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a19      	ldr	r2, [pc, #100]	; (8001498 <HAL_SPI_MspInit+0x84>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d12b      	bne.n	800148e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_SPI_MspInit+0x88>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a17      	ldr	r2, [pc, #92]	; (800149c <HAL_SPI_MspInit+0x88>)
 8001440:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_SPI_MspInit+0x88>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_SPI_MspInit+0x88>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <HAL_SPI_MspInit+0x88>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_SPI_MspInit+0x88>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADNS_SPI_CSn_Pin|MCU_SPI_SCK_Pin|MCU_SPI_MISO_Pin|MCU_SPI_MOSI_Pin;
 800146e:	23f0      	movs	r3, #240	; 0xf0
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147e:	2305      	movs	r3, #5
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <HAL_SPI_MspInit+0x8c>)
 800148a:	f002 f9d1 	bl	8003830 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	; 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40013000 	.word	0x40013000
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020000 	.word	0x40020000

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_MspInit+0x4c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_MspInit+0x4c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_MspInit+0x4c>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_MspInit+0x4c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	; 0x38
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	4b34      	ldr	r3, [pc, #208]	; (80015dc <HAL_InitTick+0xe8>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	4a33      	ldr	r2, [pc, #204]	; (80015dc <HAL_InitTick+0xe8>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6413      	str	r3, [r2, #64]	; 0x40
 8001514:	4b31      	ldr	r3, [pc, #196]	; (80015dc <HAL_InitTick+0xe8>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001520:	f107 0210 	add.w	r2, r7, #16
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f004 f896 	bl	800565c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	2b00      	cmp	r3, #0
 8001538:	d103      	bne.n	8001542 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800153a:	f004 f867 	bl	800560c <HAL_RCC_GetPCLK1Freq>
 800153e:	6378      	str	r0, [r7, #52]	; 0x34
 8001540:	e004      	b.n	800154c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001542:	f004 f863 	bl	800560c <HAL_RCC_GetPCLK1Freq>
 8001546:	4603      	mov	r3, r0
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800154c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154e:	4a24      	ldr	r2, [pc, #144]	; (80015e0 <HAL_InitTick+0xec>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	0c9b      	lsrs	r3, r3, #18
 8001556:	3b01      	subs	r3, #1
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_InitTick+0xf0>)
 800155c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001560:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_InitTick+0xf0>)
 8001564:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001568:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800156a:	4a1e      	ldr	r2, [pc, #120]	; (80015e4 <HAL_InitTick+0xf0>)
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <HAL_InitTick+0xf0>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_InitTick+0xf0>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_InitTick+0xf0>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001582:	4818      	ldr	r0, [pc, #96]	; (80015e4 <HAL_InitTick+0xf0>)
 8001584:	f004 f925 	bl	80057d2 <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800158e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001592:	2b00      	cmp	r3, #0
 8001594:	d11b      	bne.n	80015ce <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001596:	4813      	ldr	r0, [pc, #76]	; (80015e4 <HAL_InitTick+0xf0>)
 8001598:	f004 f9d2 	bl	8005940 <HAL_TIM_Base_Start_IT>
 800159c:	4603      	mov	r3, r0
 800159e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d111      	bne.n	80015ce <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015aa:	201c      	movs	r0, #28
 80015ac:	f001 fdb6 	bl	800311c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b0f      	cmp	r3, #15
 80015b4:	d808      	bhi.n	80015c8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80015b6:	2200      	movs	r2, #0
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	201c      	movs	r0, #28
 80015bc:	f001 fd92 	bl	80030e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c0:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_InitTick+0xf4>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e002      	b.n	80015ce <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3738      	adds	r7, #56	; 0x38
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	431bde83 	.word	0x431bde83
 80015e4:	20000158 	.word	0x20000158
 80015e8:	20000004 	.word	0x20000004

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <NMI_Handler+0x4>

080015f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <MemManage_Handler+0x4>

080015fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler+0x4>

0800160a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <DMA1_Stream0_IRQHandler+0x10>)
 800164a:	f001 feb5 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000518 	.word	0x20000518

08001658 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <DMA1_Stream1_IRQHandler+0x10>)
 800165e:	f001 feab 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000758 	.word	0x20000758

0800166c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <DMA1_Stream2_IRQHandler+0x10>)
 8001672:	f001 fea1 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000458 	.word	0x20000458

08001680 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <DMA1_Stream3_IRQHandler+0x10>)
 8001686:	f001 fe97 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200007b8 	.word	0x200007b8

08001694 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <DMA1_Stream4_IRQHandler+0x10>)
 800169a:	f001 fe8d 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200004b8 	.word	0x200004b8

080016a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <DMA1_Stream5_IRQHandler+0x10>)
 80016ae:	f001 fe83 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000698 	.word	0x20000698

080016bc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <DMA1_Stream6_IRQHandler+0x10>)
 80016c2:	f001 fe79 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200006f8 	.word	0x200006f8

080016d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <TIM2_IRQHandler+0x10>)
 80016d6:	f004 f9fc 	bl	8005ad2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000158 	.word	0x20000158

080016e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <USART1_IRQHandler+0x10>)
 80016ea:	f005 f8c7 	bl	800687c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000348 	.word	0x20000348

080016f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <USART2_IRQHandler+0x10>)
 80016fe:	f005 f8bd 	bl	800687c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000038c 	.word	0x2000038c

0800170c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <USART3_IRQHandler+0x10>)
 8001712:	f005 f8b3 	bl	800687c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200003d0 	.word	0x200003d0

08001720 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <DMA1_Stream7_IRQHandler+0x10>)
 8001726:	f001 fe47 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000578 	.word	0x20000578

08001734 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <UART4_IRQHandler+0x10>)
 800173a:	f005 f89f 	bl	800687c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200002c0 	.word	0x200002c0

08001748 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <UART5_IRQHandler+0x10>)
 800174e:	f005 f895 	bl	800687c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000304 	.word	0x20000304

0800175c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <DMA2_Stream1_IRQHandler+0x10>)
 8001762:	f001 fe29 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000818 	.word	0x20000818

08001770 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <DMA2_Stream2_IRQHandler+0x10>)
 8001776:	f001 fe1f 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200005d8 	.word	0x200005d8

08001784 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <DMA2_Stream6_IRQHandler+0x10>)
 800178a:	f001 fe15 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000878 	.word	0x20000878

08001798 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <DMA2_Stream7_IRQHandler+0x10>)
 800179e:	f001 fe0b 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000638 	.word	0x20000638

080017ac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <USART6_IRQHandler+0x10>)
 80017b2:	f005 f863 	bl	800687c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000414 	.word	0x20000414

080017c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b096      	sub	sp, #88	; 0x58
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]
 8001812:	615a      	str	r2, [r3, #20]
 8001814:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2220      	movs	r2, #32
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f005 ff03 	bl	8007628 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001822:	4b50      	ldr	r3, [pc, #320]	; (8001964 <MX_TIM1_Init+0x180>)
 8001824:	4a50      	ldr	r2, [pc, #320]	; (8001968 <MX_TIM1_Init+0x184>)
 8001826:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001828:	4b4e      	ldr	r3, [pc, #312]	; (8001964 <MX_TIM1_Init+0x180>)
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b4d      	ldr	r3, [pc, #308]	; (8001964 <MX_TIM1_Init+0x180>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001834:	4b4b      	ldr	r3, [pc, #300]	; (8001964 <MX_TIM1_Init+0x180>)
 8001836:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800183a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183c:	4b49      	ldr	r3, [pc, #292]	; (8001964 <MX_TIM1_Init+0x180>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001842:	4b48      	ldr	r3, [pc, #288]	; (8001964 <MX_TIM1_Init+0x180>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001848:	4b46      	ldr	r3, [pc, #280]	; (8001964 <MX_TIM1_Init+0x180>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800184e:	4845      	ldr	r0, [pc, #276]	; (8001964 <MX_TIM1_Init+0x180>)
 8001850:	f003 ffbf 	bl	80057d2 <HAL_TIM_Base_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800185a:	f7ff fda0 	bl	800139e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001862:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001864:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001868:	4619      	mov	r1, r3
 800186a:	483e      	ldr	r0, [pc, #248]	; (8001964 <MX_TIM1_Init+0x180>)
 800186c:	f004 fafc 	bl	8005e68 <HAL_TIM_ConfigClockSource>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001876:	f7ff fd92 	bl	800139e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800187a:	483a      	ldr	r0, [pc, #232]	; (8001964 <MX_TIM1_Init+0x180>)
 800187c:	f004 f8d0 	bl	8005a20 <HAL_TIM_PWM_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001886:	f7ff fd8a 	bl	800139e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001892:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001896:	4619      	mov	r1, r3
 8001898:	4832      	ldr	r0, [pc, #200]	; (8001964 <MX_TIM1_Init+0x180>)
 800189a:	f004 febf 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018a4:	f7ff fd7b 	bl	800139e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a8:	2360      	movs	r3, #96	; 0x60
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018b4:	2300      	movs	r3, #0
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	4825      	ldr	r0, [pc, #148]	; (8001964 <MX_TIM1_Init+0x180>)
 80018ce:	f004 fa09 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018d8:	f7ff fd61 	bl	800139e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	2204      	movs	r2, #4
 80018e2:	4619      	mov	r1, r3
 80018e4:	481f      	ldr	r0, [pc, #124]	; (8001964 <MX_TIM1_Init+0x180>)
 80018e6:	f004 f9fd 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80018f0:	f7ff fd55 	bl	800139e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f8:	2208      	movs	r2, #8
 80018fa:	4619      	mov	r1, r3
 80018fc:	4819      	ldr	r0, [pc, #100]	; (8001964 <MX_TIM1_Init+0x180>)
 80018fe:	f004 f9f1 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001908:	f7ff fd49 	bl	800139e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800190c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001910:	220c      	movs	r2, #12
 8001912:	4619      	mov	r1, r3
 8001914:	4813      	ldr	r0, [pc, #76]	; (8001964 <MX_TIM1_Init+0x180>)
 8001916:	f004 f9e5 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001920:	f7ff fd3d 	bl	800139e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	4619      	mov	r1, r3
 8001946:	4807      	ldr	r0, [pc, #28]	; (8001964 <MX_TIM1_Init+0x180>)
 8001948:	f004 fee4 	bl	8006714 <HAL_TIMEx_ConfigBreakDeadTime>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001952:	f7ff fd24 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <MX_TIM1_Init+0x180>)
 8001958:	f000 f9b4 	bl	8001cc4 <HAL_TIM_MspPostInit>

}
 800195c:	bf00      	nop
 800195e:	3758      	adds	r7, #88	; 0x58
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200001a0 	.word	0x200001a0
 8001968:	40010000 	.word	0x40010000

0800196c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001980:	463b      	mov	r3, r7
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <MX_TIM3_Init+0x94>)
 800198a:	4a1e      	ldr	r2, [pc, #120]	; (8001a04 <MX_TIM3_Init+0x98>)
 800198c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <MX_TIM3_Init+0x94>)
 8001990:	2200      	movs	r2, #0
 8001992:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_TIM3_Init+0x94>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <MX_TIM3_Init+0x94>)
 800199c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <MX_TIM3_Init+0x94>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <MX_TIM3_Init+0x94>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ae:	4814      	ldr	r0, [pc, #80]	; (8001a00 <MX_TIM3_Init+0x94>)
 80019b0:	f003 ff0f 	bl	80057d2 <HAL_TIM_Base_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80019ba:	f7ff fcf0 	bl	800139e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	4619      	mov	r1, r3
 80019ca:	480d      	ldr	r0, [pc, #52]	; (8001a00 <MX_TIM3_Init+0x94>)
 80019cc:	f004 fa4c 	bl	8005e68 <HAL_TIM_ConfigClockSource>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80019d6:	f7ff fce2 	bl	800139e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019e2:	463b      	mov	r3, r7
 80019e4:	4619      	mov	r1, r3
 80019e6:	4806      	ldr	r0, [pc, #24]	; (8001a00 <MX_TIM3_Init+0x94>)
 80019e8:	f004 fe18 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80019f2:	f7ff fcd4 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200001e8 	.word	0x200001e8
 8001a04:	40000400 	.word	0x40000400

08001a08 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_TIM5_Init+0x94>)
 8001a26:	4a1e      	ldr	r2, [pc, #120]	; (8001aa0 <MX_TIM5_Init+0x98>)
 8001a28:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <MX_TIM5_Init+0x94>)
 8001a2c:	2253      	movs	r2, #83	; 0x53
 8001a2e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_TIM5_Init+0x94>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff -1;
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <MX_TIM5_Init+0x94>)
 8001a38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a3c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <MX_TIM5_Init+0x94>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <MX_TIM5_Init+0x94>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a4a:	4814      	ldr	r0, [pc, #80]	; (8001a9c <MX_TIM5_Init+0x94>)
 8001a4c:	f003 fec1 	bl	80057d2 <HAL_TIM_Base_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001a56:	f7ff fca2 	bl	800139e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a60:	f107 0308 	add.w	r3, r7, #8
 8001a64:	4619      	mov	r1, r3
 8001a66:	480d      	ldr	r0, [pc, #52]	; (8001a9c <MX_TIM5_Init+0x94>)
 8001a68:	f004 f9fe 	bl	8005e68 <HAL_TIM_ConfigClockSource>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001a72:	f7ff fc94 	bl	800139e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a7e:	463b      	mov	r3, r7
 8001a80:	4619      	mov	r1, r3
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <MX_TIM5_Init+0x94>)
 8001a84:	f004 fdca 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001a8e:	f7ff fc86 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000230 	.word	0x20000230
 8001aa0:	40000c00 	.word	0x40000c00

08001aa4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b096      	sub	sp, #88	; 0x58
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aaa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
 8001ad2:	615a      	str	r2, [r3, #20]
 8001ad4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	2220      	movs	r2, #32
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f005 fda3 	bl	8007628 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ae2:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001ae4:	4a44      	ldr	r2, [pc, #272]	; (8001bf8 <MX_TIM8_Init+0x154>)
 8001ae6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ae8:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aee:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001af4:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afc:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b02:	4b3c      	ldr	r3, [pc, #240]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b08:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b0e:	4839      	ldr	r0, [pc, #228]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001b10:	f003 fe5f 	bl	80057d2 <HAL_TIM_Base_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001b1a:	f7ff fc40 	bl	800139e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4832      	ldr	r0, [pc, #200]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001b2c:	f004 f99c 	bl	8005e68 <HAL_TIM_ConfigClockSource>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b36:	f7ff fc32 	bl	800139e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b3a:	482e      	ldr	r0, [pc, #184]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001b3c:	f003 ff70 	bl	8005a20 <HAL_TIM_PWM_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001b46:	f7ff fc2a 	bl	800139e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b56:	4619      	mov	r1, r3
 8001b58:	4826      	ldr	r0, [pc, #152]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001b5a:	f004 fd5f 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001b64:	f7ff fc1b 	bl	800139e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b68:	2360      	movs	r3, #96	; 0x60
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b74:	2300      	movs	r3, #0
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b88:	2208      	movs	r2, #8
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4819      	ldr	r0, [pc, #100]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001b8e:	f004 f8a9 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001b98:	f7ff fc01 	bl	800139e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001ba6:	f004 f89d 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001bb0:	f7ff fbf5 	bl	800139e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4807      	ldr	r0, [pc, #28]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001bd8:	f004 fd9c 	bl	8006714 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001be2:	f7ff fbdc 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001be6:	4803      	ldr	r0, [pc, #12]	; (8001bf4 <MX_TIM8_Init+0x150>)
 8001be8:	f000 f86c 	bl	8001cc4 <HAL_TIM_MspPostInit>

}
 8001bec:	bf00      	nop
 8001bee:	3758      	adds	r7, #88	; 0x58
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000278 	.word	0x20000278
 8001bf8:	40010400 	.word	0x40010400

08001bfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <HAL_TIM_Base_MspInit+0xb4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d10e      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001c2a:	e03a      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <HAL_TIM_Base_MspInit+0xbc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d10e      	bne.n	8001c54 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
}
 8001c52:	e026      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_TIM_Base_MspInit+0xc0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d10e      	bne.n	8001c7c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
}
 8001c7a:	e012      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10d      	bne.n	8001ca2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
}
 8001ca2:	bf00      	nop
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	40000c00 	.word	0x40000c00
 8001cc0:	40010400 	.word	0x40010400

08001cc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a25      	ldr	r2, [pc, #148]	; (8001d78 <HAL_TIM_MspPostInit+0xb4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d11f      	bne.n	8001d26 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_TIM_MspPostInit+0xb8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <HAL_TIM_MspPostInit+0xb8>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <HAL_TIM_MspPostInit+0xb8>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MTR1_PWM_MCU_Pin|MTR2_PWM_MCU_Pin|MTR3_PWM_MCU_Pin|MTR4_PWM_MCU_Pin;
 8001d02:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4818      	ldr	r0, [pc, #96]	; (8001d80 <HAL_TIM_MspPostInit+0xbc>)
 8001d20:	f001 fd86 	bl	8003830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001d24:	e023      	b.n	8001d6e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <HAL_TIM_MspPostInit+0xc0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d11e      	bne.n	8001d6e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_TIM_MspPostInit+0xb8>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <HAL_TIM_MspPostInit+0xb8>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_TIM_MspPostInit+0xb8>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_PWM_TIM8_CH3_Pin|LED_5050_PWM_IN_Pin;
 8001d4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <HAL_TIM_MspPostInit+0xc4>)
 8001d6a:	f001 fd61 	bl	8003830 <HAL_GPIO_Init>
}
 8001d6e:	bf00      	nop
 8001d70:	3728      	adds	r7, #40	; 0x28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40010400 	.word	0x40010400
 8001d88:	40020800 	.word	0x40020800

08001d8c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_UART4_Init+0x4c>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <MX_UART4_Init+0x50>)
 8001d94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <MX_UART4_Init+0x4c>)
 8001d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d9c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_UART4_Init+0x4c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_UART4_Init+0x4c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <MX_UART4_Init+0x4c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_UART4_Init+0x4c>)
 8001db2:	220c      	movs	r2, #12
 8001db4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <MX_UART4_Init+0x4c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_UART4_Init+0x4c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_UART4_Init+0x4c>)
 8001dc4:	f004 fd0c 	bl	80067e0 <HAL_UART_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001dce:	f7ff fae6 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200002c0 	.word	0x200002c0
 8001ddc:	40004c00 	.word	0x40004c00

08001de0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_UART5_Init+0x4c>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <MX_UART5_Init+0x50>)
 8001de8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <MX_UART5_Init+0x4c>)
 8001dec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_UART5_Init+0x4c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <MX_UART5_Init+0x4c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <MX_UART5_Init+0x4c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <MX_UART5_Init+0x4c>)
 8001e06:	220c      	movs	r2, #12
 8001e08:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <MX_UART5_Init+0x4c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <MX_UART5_Init+0x4c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_UART5_Init+0x4c>)
 8001e18:	f004 fce2 	bl	80067e0 <HAL_UART_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001e22:	f7ff fabc 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000304 	.word	0x20000304
 8001e30:	40005000 	.word	0x40005000

08001e34 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_USART1_UART_Init+0x4c>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <MX_USART1_UART_Init+0x50>)
 8001e3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <MX_USART1_UART_Init+0x4c>)
 8001e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_USART1_UART_Init+0x4c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <MX_USART1_UART_Init+0x4c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_USART1_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MX_USART1_UART_Init+0x4c>)
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <MX_USART1_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <MX_USART1_UART_Init+0x4c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_USART1_UART_Init+0x4c>)
 8001e6c:	f004 fcb8 	bl	80067e0 <HAL_UART_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e76:	f7ff fa92 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000348 	.word	0x20000348
 8001e84:	40011000 	.word	0x40011000

08001e88 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <MX_USART2_UART_Init+0x50>)
 8001e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001eae:	220c      	movs	r2, #12
 8001eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_USART2_UART_Init+0x4c>)
 8001ec0:	f004 fc8e 	bl	80067e0 <HAL_UART_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eca:	f7ff fa68 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000038c 	.word	0x2000038c
 8001ed8:	40004400 	.word	0x40004400

08001edc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <MX_USART3_UART_Init+0x4c>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <MX_USART3_UART_Init+0x50>)
 8001ee4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <MX_USART3_UART_Init+0x4c>)
 8001ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <MX_USART3_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <MX_USART3_UART_Init+0x4c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <MX_USART3_UART_Init+0x4c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <MX_USART3_UART_Init+0x4c>)
 8001f02:	220c      	movs	r2, #12
 8001f04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <MX_USART3_UART_Init+0x4c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <MX_USART3_UART_Init+0x4c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f12:	4805      	ldr	r0, [pc, #20]	; (8001f28 <MX_USART3_UART_Init+0x4c>)
 8001f14:	f004 fc64 	bl	80067e0 <HAL_UART_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f1e:	f7ff fa3e 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200003d0 	.word	0x200003d0
 8001f2c:	40004800 	.word	0x40004800

08001f30 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <MX_USART6_UART_Init+0x4c>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <MX_USART6_UART_Init+0x50>)
 8001f38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <MX_USART6_UART_Init+0x4c>)
 8001f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <MX_USART6_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <MX_USART6_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <MX_USART6_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <MX_USART6_UART_Init+0x4c>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <MX_USART6_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <MX_USART6_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_USART6_UART_Init+0x4c>)
 8001f68:	f004 fc3a 	bl	80067e0 <HAL_UART_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f72:	f7ff fa14 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000414 	.word	0x20000414
 8001f80:	40011400 	.word	0x40011400

08001f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b094      	sub	sp, #80	; 0x50
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a4a      	ldr	r2, [pc, #296]	; (80020cc <HAL_UART_MspInit+0x148>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	f040 80a0 	bne.w	80020e8 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fac:	4b48      	ldr	r3, [pc, #288]	; (80020d0 <HAL_UART_MspInit+0x14c>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	4a47      	ldr	r2, [pc, #284]	; (80020d0 <HAL_UART_MspInit+0x14c>)
 8001fb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb8:	4b45      	ldr	r3, [pc, #276]	; (80020d0 <HAL_UART_MspInit+0x14c>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc8:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_UART_MspInit+0x14c>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	4a40      	ldr	r2, [pc, #256]	; (80020d0 <HAL_UART_MspInit+0x14c>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd4:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <HAL_UART_MspInit+0x14c>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8001fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MCU_ESP32_TX_Pin|MCU_ESP32_RX_Pin;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4836      	ldr	r0, [pc, #216]	; (80020d4 <HAL_UART_MspInit+0x150>)
 8001ffc:	f001 fc18 	bl	8003830 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002000:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <HAL_UART_MspInit+0x154>)
 8002002:	4a36      	ldr	r2, [pc, #216]	; (80020dc <HAL_UART_MspInit+0x158>)
 8002004:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002006:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <HAL_UART_MspInit+0x154>)
 8002008:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800200c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800200e:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <HAL_UART_MspInit+0x154>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002014:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <HAL_UART_MspInit+0x154>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800201a:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <HAL_UART_MspInit+0x154>)
 800201c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002020:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002022:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <HAL_UART_MspInit+0x154>)
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_UART_MspInit+0x154>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800202e:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_UART_MspInit+0x154>)
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_UART_MspInit+0x154>)
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800203a:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_UART_MspInit+0x154>)
 800203c:	2200      	movs	r2, #0
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002040:	4825      	ldr	r0, [pc, #148]	; (80020d8 <HAL_UART_MspInit+0x154>)
 8002042:	f001 f879 	bl	8003138 <HAL_DMA_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800204c:	f7ff f9a7 	bl	800139e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <HAL_UART_MspInit+0x154>)
 8002054:	639a      	str	r2, [r3, #56]	; 0x38
 8002056:	4a20      	ldr	r2, [pc, #128]	; (80020d8 <HAL_UART_MspInit+0x154>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800205c:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 800205e:	4a21      	ldr	r2, [pc, #132]	; (80020e4 <HAL_UART_MspInit+0x160>)
 8002060:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002062:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 8002064:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002068:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 800206c:	2240      	movs	r2, #64	; 0x40
 800206e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 8002078:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800207c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 8002080:	2200      	movs	r2, #0
 8002082:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 800208c:	2200      	movs	r2, #0
 800208e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 8002092:	2200      	movs	r2, #0
 8002094:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 8002098:	2200      	movs	r2, #0
 800209a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800209c:	4810      	ldr	r0, [pc, #64]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 800209e:	f001 f84b 	bl	8003138 <HAL_DMA_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80020a8:	f7ff f979 	bl	800139e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 80020b0:	635a      	str	r2, [r3, #52]	; 0x34
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <HAL_UART_MspInit+0x15c>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2034      	movs	r0, #52	; 0x34
 80020be:	f001 f811 	bl	80030e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80020c2:	2034      	movs	r0, #52	; 0x34
 80020c4:	f001 f82a 	bl	800311c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80020c8:	e34a      	b.n	8002760 <HAL_UART_MspInit+0x7dc>
 80020ca:	bf00      	nop
 80020cc:	40004c00 	.word	0x40004c00
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020000 	.word	0x40020000
 80020d8:	20000458 	.word	0x20000458
 80020dc:	40026040 	.word	0x40026040
 80020e0:	200004b8 	.word	0x200004b8
 80020e4:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a59      	ldr	r2, [pc, #356]	; (8002254 <HAL_UART_MspInit+0x2d0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	f040 80c0 	bne.w	8002274 <HAL_UART_MspInit+0x2f0>
    __HAL_RCC_UART5_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
 80020f8:	4b57      	ldr	r3, [pc, #348]	; (8002258 <HAL_UART_MspInit+0x2d4>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	4a56      	ldr	r2, [pc, #344]	; (8002258 <HAL_UART_MspInit+0x2d4>)
 80020fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002102:	6413      	str	r3, [r2, #64]	; 0x40
 8002104:	4b54      	ldr	r3, [pc, #336]	; (8002258 <HAL_UART_MspInit+0x2d4>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210c:	633b      	str	r3, [r7, #48]	; 0x30
 800210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002114:	4b50      	ldr	r3, [pc, #320]	; (8002258 <HAL_UART_MspInit+0x2d4>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	4a4f      	ldr	r2, [pc, #316]	; (8002258 <HAL_UART_MspInit+0x2d4>)
 800211a:	f043 0304 	orr.w	r3, r3, #4
 800211e:	6313      	str	r3, [r2, #48]	; 0x30
 8002120:	4b4d      	ldr	r3, [pc, #308]	; (8002258 <HAL_UART_MspInit+0x2d4>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800212a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002130:	4b49      	ldr	r3, [pc, #292]	; (8002258 <HAL_UART_MspInit+0x2d4>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	4a48      	ldr	r2, [pc, #288]	; (8002258 <HAL_UART_MspInit+0x2d4>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	6313      	str	r3, [r2, #48]	; 0x30
 800213c:	4b46      	ldr	r3, [pc, #280]	; (8002258 <HAL_UART_MspInit+0x2d4>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = MCU_UART5_TX_Pin;
 8002148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002156:	2303      	movs	r3, #3
 8002158:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800215a:	2308      	movs	r3, #8
 800215c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 800215e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002162:	4619      	mov	r1, r3
 8002164:	483d      	ldr	r0, [pc, #244]	; (800225c <HAL_UART_MspInit+0x2d8>)
 8002166:	f001 fb63 	bl	8003830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MCU_UART5_RX_Pin;
 800216a:	2304      	movs	r3, #4
 800216c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800217a:	2308      	movs	r3, #8
 800217c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002182:	4619      	mov	r1, r3
 8002184:	4836      	ldr	r0, [pc, #216]	; (8002260 <HAL_UART_MspInit+0x2dc>)
 8002186:	f001 fb53 	bl	8003830 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800218a:	4b36      	ldr	r3, [pc, #216]	; (8002264 <HAL_UART_MspInit+0x2e0>)
 800218c:	4a36      	ldr	r2, [pc, #216]	; (8002268 <HAL_UART_MspInit+0x2e4>)
 800218e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002190:	4b34      	ldr	r3, [pc, #208]	; (8002264 <HAL_UART_MspInit+0x2e0>)
 8002192:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002196:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002198:	4b32      	ldr	r3, [pc, #200]	; (8002264 <HAL_UART_MspInit+0x2e0>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <HAL_UART_MspInit+0x2e0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021a4:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <HAL_UART_MspInit+0x2e0>)
 80021a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021aa:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ac:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_UART_MspInit+0x2e0>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b2:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <HAL_UART_MspInit+0x2e0>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <HAL_UART_MspInit+0x2e0>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021be:	4b29      	ldr	r3, [pc, #164]	; (8002264 <HAL_UART_MspInit+0x2e0>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <HAL_UART_MspInit+0x2e0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80021ca:	4826      	ldr	r0, [pc, #152]	; (8002264 <HAL_UART_MspInit+0x2e0>)
 80021cc:	f000 ffb4 	bl	8003138 <HAL_DMA_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_UART_MspInit+0x256>
      Error_Handler();
 80021d6:	f7ff f8e2 	bl	800139e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a21      	ldr	r2, [pc, #132]	; (8002264 <HAL_UART_MspInit+0x2e0>)
 80021de:	639a      	str	r2, [r3, #56]	; 0x38
 80021e0:	4a20      	ldr	r2, [pc, #128]	; (8002264 <HAL_UART_MspInit+0x2e0>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80021e6:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_UART_MspInit+0x2e8>)
 80021e8:	4a21      	ldr	r2, [pc, #132]	; (8002270 <HAL_UART_MspInit+0x2ec>)
 80021ea:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <HAL_UART_MspInit+0x2e8>)
 80021ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021f2:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_UART_MspInit+0x2e8>)
 80021f6:	2240      	movs	r2, #64	; 0x40
 80021f8:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <HAL_UART_MspInit+0x2e8>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002200:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_UART_MspInit+0x2e8>)
 8002202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002206:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_UART_MspInit+0x2e8>)
 800220a:	2200      	movs	r2, #0
 800220c:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_UART_MspInit+0x2e8>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_UART_MspInit+0x2e8>)
 8002216:	2200      	movs	r2, #0
 8002218:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_UART_MspInit+0x2e8>)
 800221c:	2200      	movs	r2, #0
 800221e:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_UART_MspInit+0x2e8>)
 8002222:	2200      	movs	r2, #0
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002226:	4811      	ldr	r0, [pc, #68]	; (800226c <HAL_UART_MspInit+0x2e8>)
 8002228:	f000 ff86 	bl	8003138 <HAL_DMA_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8002232:	f7ff f8b4 	bl	800139e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a0c      	ldr	r2, [pc, #48]	; (800226c <HAL_UART_MspInit+0x2e8>)
 800223a:	635a      	str	r2, [r3, #52]	; 0x34
 800223c:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_UART_MspInit+0x2e8>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	2035      	movs	r0, #53	; 0x35
 8002248:	f000 ff4c 	bl	80030e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800224c:	2035      	movs	r0, #53	; 0x35
 800224e:	f000 ff65 	bl	800311c <HAL_NVIC_EnableIRQ>
}
 8002252:	e285      	b.n	8002760 <HAL_UART_MspInit+0x7dc>
 8002254:	40005000 	.word	0x40005000
 8002258:	40023800 	.word	0x40023800
 800225c:	40020800 	.word	0x40020800
 8002260:	40020c00 	.word	0x40020c00
 8002264:	20000518 	.word	0x20000518
 8002268:	40026010 	.word	0x40026010
 800226c:	20000578 	.word	0x20000578
 8002270:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a95      	ldr	r2, [pc, #596]	; (80024d0 <HAL_UART_MspInit+0x54c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	f040 8091 	bne.w	80023a2 <HAL_UART_MspInit+0x41e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
 8002284:	4b93      	ldr	r3, [pc, #588]	; (80024d4 <HAL_UART_MspInit+0x550>)
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	4a92      	ldr	r2, [pc, #584]	; (80024d4 <HAL_UART_MspInit+0x550>)
 800228a:	f043 0310 	orr.w	r3, r3, #16
 800228e:	6453      	str	r3, [r2, #68]	; 0x44
 8002290:	4b90      	ldr	r3, [pc, #576]	; (80024d4 <HAL_UART_MspInit+0x550>)
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229c:	2300      	movs	r3, #0
 800229e:	623b      	str	r3, [r7, #32]
 80022a0:	4b8c      	ldr	r3, [pc, #560]	; (80024d4 <HAL_UART_MspInit+0x550>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	4a8b      	ldr	r2, [pc, #556]	; (80024d4 <HAL_UART_MspInit+0x550>)
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	6313      	str	r3, [r2, #48]	; 0x30
 80022ac:	4b89      	ldr	r3, [pc, #548]	; (80024d4 <HAL_UART_MspInit+0x550>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	623b      	str	r3, [r7, #32]
 80022b6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = MCU_USART1_TX_Pin|MCU_USART1_RX_Pin;
 80022b8:	23c0      	movs	r3, #192	; 0xc0
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022c8:	2307      	movs	r3, #7
 80022ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022d0:	4619      	mov	r1, r3
 80022d2:	4881      	ldr	r0, [pc, #516]	; (80024d8 <HAL_UART_MspInit+0x554>)
 80022d4:	f001 faac 	bl	8003830 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80022d8:	4b80      	ldr	r3, [pc, #512]	; (80024dc <HAL_UART_MspInit+0x558>)
 80022da:	4a81      	ldr	r2, [pc, #516]	; (80024e0 <HAL_UART_MspInit+0x55c>)
 80022dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80022de:	4b7f      	ldr	r3, [pc, #508]	; (80024dc <HAL_UART_MspInit+0x558>)
 80022e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022e6:	4b7d      	ldr	r3, [pc, #500]	; (80024dc <HAL_UART_MspInit+0x558>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ec:	4b7b      	ldr	r3, [pc, #492]	; (80024dc <HAL_UART_MspInit+0x558>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022f2:	4b7a      	ldr	r3, [pc, #488]	; (80024dc <HAL_UART_MspInit+0x558>)
 80022f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022fa:	4b78      	ldr	r3, [pc, #480]	; (80024dc <HAL_UART_MspInit+0x558>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002300:	4b76      	ldr	r3, [pc, #472]	; (80024dc <HAL_UART_MspInit+0x558>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002306:	4b75      	ldr	r3, [pc, #468]	; (80024dc <HAL_UART_MspInit+0x558>)
 8002308:	2200      	movs	r2, #0
 800230a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800230c:	4b73      	ldr	r3, [pc, #460]	; (80024dc <HAL_UART_MspInit+0x558>)
 800230e:	2200      	movs	r2, #0
 8002310:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002312:	4b72      	ldr	r3, [pc, #456]	; (80024dc <HAL_UART_MspInit+0x558>)
 8002314:	2200      	movs	r2, #0
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002318:	4870      	ldr	r0, [pc, #448]	; (80024dc <HAL_UART_MspInit+0x558>)
 800231a:	f000 ff0d 	bl	8003138 <HAL_DMA_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 8002324:	f7ff f83b 	bl	800139e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a6c      	ldr	r2, [pc, #432]	; (80024dc <HAL_UART_MspInit+0x558>)
 800232c:	639a      	str	r2, [r3, #56]	; 0x38
 800232e:	4a6b      	ldr	r2, [pc, #428]	; (80024dc <HAL_UART_MspInit+0x558>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002334:	4b6b      	ldr	r3, [pc, #428]	; (80024e4 <HAL_UART_MspInit+0x560>)
 8002336:	4a6c      	ldr	r2, [pc, #432]	; (80024e8 <HAL_UART_MspInit+0x564>)
 8002338:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800233a:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_UART_MspInit+0x560>)
 800233c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002340:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002342:	4b68      	ldr	r3, [pc, #416]	; (80024e4 <HAL_UART_MspInit+0x560>)
 8002344:	2240      	movs	r2, #64	; 0x40
 8002346:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002348:	4b66      	ldr	r3, [pc, #408]	; (80024e4 <HAL_UART_MspInit+0x560>)
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800234e:	4b65      	ldr	r3, [pc, #404]	; (80024e4 <HAL_UART_MspInit+0x560>)
 8002350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002354:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <HAL_UART_MspInit+0x560>)
 8002358:	2200      	movs	r2, #0
 800235a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800235c:	4b61      	ldr	r3, [pc, #388]	; (80024e4 <HAL_UART_MspInit+0x560>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002362:	4b60      	ldr	r3, [pc, #384]	; (80024e4 <HAL_UART_MspInit+0x560>)
 8002364:	2200      	movs	r2, #0
 8002366:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002368:	4b5e      	ldr	r3, [pc, #376]	; (80024e4 <HAL_UART_MspInit+0x560>)
 800236a:	2200      	movs	r2, #0
 800236c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800236e:	4b5d      	ldr	r3, [pc, #372]	; (80024e4 <HAL_UART_MspInit+0x560>)
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002374:	485b      	ldr	r0, [pc, #364]	; (80024e4 <HAL_UART_MspInit+0x560>)
 8002376:	f000 fedf 	bl	8003138 <HAL_DMA_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_UART_MspInit+0x400>
      Error_Handler();
 8002380:	f7ff f80d 	bl	800139e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a57      	ldr	r2, [pc, #348]	; (80024e4 <HAL_UART_MspInit+0x560>)
 8002388:	635a      	str	r2, [r3, #52]	; 0x34
 800238a:	4a56      	ldr	r2, [pc, #344]	; (80024e4 <HAL_UART_MspInit+0x560>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	2100      	movs	r1, #0
 8002394:	2025      	movs	r0, #37	; 0x25
 8002396:	f000 fea5 	bl	80030e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800239a:	2025      	movs	r0, #37	; 0x25
 800239c:	f000 febe 	bl	800311c <HAL_NVIC_EnableIRQ>
}
 80023a0:	e1de      	b.n	8002760 <HAL_UART_MspInit+0x7dc>
  else if(uartHandle->Instance==USART2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a51      	ldr	r2, [pc, #324]	; (80024ec <HAL_UART_MspInit+0x568>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	f040 80ab 	bne.w	8002504 <HAL_UART_MspInit+0x580>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	4b48      	ldr	r3, [pc, #288]	; (80024d4 <HAL_UART_MspInit+0x550>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	4a47      	ldr	r2, [pc, #284]	; (80024d4 <HAL_UART_MspInit+0x550>)
 80023b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023bc:	6413      	str	r3, [r2, #64]	; 0x40
 80023be:	4b45      	ldr	r3, [pc, #276]	; (80024d4 <HAL_UART_MspInit+0x550>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_UART_MspInit+0x550>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a40      	ldr	r2, [pc, #256]	; (80024d4 <HAL_UART_MspInit+0x550>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <HAL_UART_MspInit+0x550>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCU_USART2_TX_Pin|MCU_USART2_RX_Pin;
 80023e6:	230c      	movs	r3, #12
 80023e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023f6:	2307      	movs	r3, #7
 80023f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023fe:	4619      	mov	r1, r3
 8002400:	483b      	ldr	r0, [pc, #236]	; (80024f0 <HAL_UART_MspInit+0x56c>)
 8002402:	f001 fa15 	bl	8003830 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002406:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_UART_MspInit+0x570>)
 8002408:	4a3b      	ldr	r2, [pc, #236]	; (80024f8 <HAL_UART_MspInit+0x574>)
 800240a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800240c:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <HAL_UART_MspInit+0x570>)
 800240e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002412:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002414:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <HAL_UART_MspInit+0x570>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241a:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <HAL_UART_MspInit+0x570>)
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002420:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <HAL_UART_MspInit+0x570>)
 8002422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002426:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002428:	4b32      	ldr	r3, [pc, #200]	; (80024f4 <HAL_UART_MspInit+0x570>)
 800242a:	2200      	movs	r2, #0
 800242c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242e:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <HAL_UART_MspInit+0x570>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002434:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <HAL_UART_MspInit+0x570>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800243a:	4b2e      	ldr	r3, [pc, #184]	; (80024f4 <HAL_UART_MspInit+0x570>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002440:	4b2c      	ldr	r3, [pc, #176]	; (80024f4 <HAL_UART_MspInit+0x570>)
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002446:	482b      	ldr	r0, [pc, #172]	; (80024f4 <HAL_UART_MspInit+0x570>)
 8002448:	f000 fe76 	bl	8003138 <HAL_DMA_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_MspInit+0x4d2>
      Error_Handler();
 8002452:	f7fe ffa4 	bl	800139e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <HAL_UART_MspInit+0x570>)
 800245a:	639a      	str	r2, [r3, #56]	; 0x38
 800245c:	4a25      	ldr	r2, [pc, #148]	; (80024f4 <HAL_UART_MspInit+0x570>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <HAL_UART_MspInit+0x578>)
 8002464:	4a26      	ldr	r2, [pc, #152]	; (8002500 <HAL_UART_MspInit+0x57c>)
 8002466:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002468:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_UART_MspInit+0x578>)
 800246a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800246e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_UART_MspInit+0x578>)
 8002472:	2240      	movs	r2, #64	; 0x40
 8002474:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002476:	4b21      	ldr	r3, [pc, #132]	; (80024fc <HAL_UART_MspInit+0x578>)
 8002478:	2200      	movs	r2, #0
 800247a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800247c:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <HAL_UART_MspInit+0x578>)
 800247e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002482:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_UART_MspInit+0x578>)
 8002486:	2200      	movs	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <HAL_UART_MspInit+0x578>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002490:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_UART_MspInit+0x578>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002496:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_UART_MspInit+0x578>)
 8002498:	2200      	movs	r2, #0
 800249a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_UART_MspInit+0x578>)
 800249e:	2200      	movs	r2, #0
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024a2:	4816      	ldr	r0, [pc, #88]	; (80024fc <HAL_UART_MspInit+0x578>)
 80024a4:	f000 fe48 	bl	8003138 <HAL_DMA_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_UART_MspInit+0x52e>
      Error_Handler();
 80024ae:	f7fe ff76 	bl	800139e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a11      	ldr	r2, [pc, #68]	; (80024fc <HAL_UART_MspInit+0x578>)
 80024b6:	635a      	str	r2, [r3, #52]	; 0x34
 80024b8:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_UART_MspInit+0x578>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	2026      	movs	r0, #38	; 0x26
 80024c4:	f000 fe0e 	bl	80030e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024c8:	2026      	movs	r0, #38	; 0x26
 80024ca:	f000 fe27 	bl	800311c <HAL_NVIC_EnableIRQ>
}
 80024ce:	e147      	b.n	8002760 <HAL_UART_MspInit+0x7dc>
 80024d0:	40011000 	.word	0x40011000
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40020400 	.word	0x40020400
 80024dc:	200005d8 	.word	0x200005d8
 80024e0:	40026440 	.word	0x40026440
 80024e4:	20000638 	.word	0x20000638
 80024e8:	400264b8 	.word	0x400264b8
 80024ec:	40004400 	.word	0x40004400
 80024f0:	40020000 	.word	0x40020000
 80024f4:	20000698 	.word	0x20000698
 80024f8:	40026088 	.word	0x40026088
 80024fc:	200006f8 	.word	0x200006f8
 8002500:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a97      	ldr	r2, [pc, #604]	; (8002768 <HAL_UART_MspInit+0x7e4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	f040 8092 	bne.w	8002634 <HAL_UART_MspInit+0x6b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	4b95      	ldr	r3, [pc, #596]	; (800276c <HAL_UART_MspInit+0x7e8>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	4a94      	ldr	r2, [pc, #592]	; (800276c <HAL_UART_MspInit+0x7e8>)
 800251a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251e:	6413      	str	r3, [r2, #64]	; 0x40
 8002520:	4b92      	ldr	r3, [pc, #584]	; (800276c <HAL_UART_MspInit+0x7e8>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	4b8e      	ldr	r3, [pc, #568]	; (800276c <HAL_UART_MspInit+0x7e8>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	4a8d      	ldr	r2, [pc, #564]	; (800276c <HAL_UART_MspInit+0x7e8>)
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	6313      	str	r3, [r2, #48]	; 0x30
 800253c:	4b8b      	ldr	r3, [pc, #556]	; (800276c <HAL_UART_MspInit+0x7e8>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MCU_HLBr_TX_Pin|MCU_HLBr_RX_Pin;
 8002548:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800254c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800255a:	2307      	movs	r3, #7
 800255c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800255e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002562:	4619      	mov	r1, r3
 8002564:	4882      	ldr	r0, [pc, #520]	; (8002770 <HAL_UART_MspInit+0x7ec>)
 8002566:	f001 f963 	bl	8003830 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800256a:	4b82      	ldr	r3, [pc, #520]	; (8002774 <HAL_UART_MspInit+0x7f0>)
 800256c:	4a82      	ldr	r2, [pc, #520]	; (8002778 <HAL_UART_MspInit+0x7f4>)
 800256e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002570:	4b80      	ldr	r3, [pc, #512]	; (8002774 <HAL_UART_MspInit+0x7f0>)
 8002572:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002576:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002578:	4b7e      	ldr	r3, [pc, #504]	; (8002774 <HAL_UART_MspInit+0x7f0>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800257e:	4b7d      	ldr	r3, [pc, #500]	; (8002774 <HAL_UART_MspInit+0x7f0>)
 8002580:	2200      	movs	r2, #0
 8002582:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002584:	4b7b      	ldr	r3, [pc, #492]	; (8002774 <HAL_UART_MspInit+0x7f0>)
 8002586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800258a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800258c:	4b79      	ldr	r3, [pc, #484]	; (8002774 <HAL_UART_MspInit+0x7f0>)
 800258e:	2200      	movs	r2, #0
 8002590:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002592:	4b78      	ldr	r3, [pc, #480]	; (8002774 <HAL_UART_MspInit+0x7f0>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002598:	4b76      	ldr	r3, [pc, #472]	; (8002774 <HAL_UART_MspInit+0x7f0>)
 800259a:	2200      	movs	r2, #0
 800259c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800259e:	4b75      	ldr	r3, [pc, #468]	; (8002774 <HAL_UART_MspInit+0x7f0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a4:	4b73      	ldr	r3, [pc, #460]	; (8002774 <HAL_UART_MspInit+0x7f0>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80025aa:	4872      	ldr	r0, [pc, #456]	; (8002774 <HAL_UART_MspInit+0x7f0>)
 80025ac:	f000 fdc4 	bl	8003138 <HAL_DMA_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_UART_MspInit+0x636>
      Error_Handler();
 80025b6:	f7fe fef2 	bl	800139e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a6d      	ldr	r2, [pc, #436]	; (8002774 <HAL_UART_MspInit+0x7f0>)
 80025be:	639a      	str	r2, [r3, #56]	; 0x38
 80025c0:	4a6c      	ldr	r2, [pc, #432]	; (8002774 <HAL_UART_MspInit+0x7f0>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80025c6:	4b6d      	ldr	r3, [pc, #436]	; (800277c <HAL_UART_MspInit+0x7f8>)
 80025c8:	4a6d      	ldr	r2, [pc, #436]	; (8002780 <HAL_UART_MspInit+0x7fc>)
 80025ca:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80025cc:	4b6b      	ldr	r3, [pc, #428]	; (800277c <HAL_UART_MspInit+0x7f8>)
 80025ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025d2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025d4:	4b69      	ldr	r3, [pc, #420]	; (800277c <HAL_UART_MspInit+0x7f8>)
 80025d6:	2240      	movs	r2, #64	; 0x40
 80025d8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025da:	4b68      	ldr	r3, [pc, #416]	; (800277c <HAL_UART_MspInit+0x7f8>)
 80025dc:	2200      	movs	r2, #0
 80025de:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025e0:	4b66      	ldr	r3, [pc, #408]	; (800277c <HAL_UART_MspInit+0x7f8>)
 80025e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025e6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025e8:	4b64      	ldr	r3, [pc, #400]	; (800277c <HAL_UART_MspInit+0x7f8>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <HAL_UART_MspInit+0x7f8>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80025f4:	4b61      	ldr	r3, [pc, #388]	; (800277c <HAL_UART_MspInit+0x7f8>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025fa:	4b60      	ldr	r3, [pc, #384]	; (800277c <HAL_UART_MspInit+0x7f8>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002600:	4b5e      	ldr	r3, [pc, #376]	; (800277c <HAL_UART_MspInit+0x7f8>)
 8002602:	2200      	movs	r2, #0
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002606:	485d      	ldr	r0, [pc, #372]	; (800277c <HAL_UART_MspInit+0x7f8>)
 8002608:	f000 fd96 	bl	8003138 <HAL_DMA_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_UART_MspInit+0x692>
      Error_Handler();
 8002612:	f7fe fec4 	bl	800139e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a58      	ldr	r2, [pc, #352]	; (800277c <HAL_UART_MspInit+0x7f8>)
 800261a:	635a      	str	r2, [r3, #52]	; 0x34
 800261c:	4a57      	ldr	r2, [pc, #348]	; (800277c <HAL_UART_MspInit+0x7f8>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	2027      	movs	r0, #39	; 0x27
 8002628:	f000 fd5c 	bl	80030e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800262c:	2027      	movs	r0, #39	; 0x27
 800262e:	f000 fd75 	bl	800311c <HAL_NVIC_EnableIRQ>
}
 8002632:	e095      	b.n	8002760 <HAL_UART_MspInit+0x7dc>
  else if(uartHandle->Instance==USART6)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a52      	ldr	r2, [pc, #328]	; (8002784 <HAL_UART_MspInit+0x800>)
 800263a:	4293      	cmp	r3, r2
 800263c:	f040 8090 	bne.w	8002760 <HAL_UART_MspInit+0x7dc>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	4b49      	ldr	r3, [pc, #292]	; (800276c <HAL_UART_MspInit+0x7e8>)
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	4a48      	ldr	r2, [pc, #288]	; (800276c <HAL_UART_MspInit+0x7e8>)
 800264a:	f043 0320 	orr.w	r3, r3, #32
 800264e:	6453      	str	r3, [r2, #68]	; 0x44
 8002650:	4b46      	ldr	r3, [pc, #280]	; (800276c <HAL_UART_MspInit+0x7e8>)
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	4b42      	ldr	r3, [pc, #264]	; (800276c <HAL_UART_MspInit+0x7e8>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4a41      	ldr	r2, [pc, #260]	; (800276c <HAL_UART_MspInit+0x7e8>)
 8002666:	f043 0304 	orr.w	r3, r3, #4
 800266a:	6313      	str	r3, [r2, #48]	; 0x30
 800266c:	4b3f      	ldr	r3, [pc, #252]	; (800276c <HAL_UART_MspInit+0x7e8>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MCU_USART6_TX_Pin|MCU_USART6_RX_Pin;
 8002678:	23c0      	movs	r3, #192	; 0xc0
 800267a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002684:	2303      	movs	r3, #3
 8002686:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002688:	2308      	movs	r3, #8
 800268a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002690:	4619      	mov	r1, r3
 8002692:	4837      	ldr	r0, [pc, #220]	; (8002770 <HAL_UART_MspInit+0x7ec>)
 8002694:	f001 f8cc 	bl	8003830 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002698:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_UART_MspInit+0x804>)
 800269a:	4a3c      	ldr	r2, [pc, #240]	; (800278c <HAL_UART_MspInit+0x808>)
 800269c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800269e:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <HAL_UART_MspInit+0x804>)
 80026a0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80026a4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026a6:	4b38      	ldr	r3, [pc, #224]	; (8002788 <HAL_UART_MspInit+0x804>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ac:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_UART_MspInit+0x804>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026b2:	4b35      	ldr	r3, [pc, #212]	; (8002788 <HAL_UART_MspInit+0x804>)
 80026b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026b8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ba:	4b33      	ldr	r3, [pc, #204]	; (8002788 <HAL_UART_MspInit+0x804>)
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c0:	4b31      	ldr	r3, [pc, #196]	; (8002788 <HAL_UART_MspInit+0x804>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80026c6:	4b30      	ldr	r3, [pc, #192]	; (8002788 <HAL_UART_MspInit+0x804>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026cc:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <HAL_UART_MspInit+0x804>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026d2:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_UART_MspInit+0x804>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80026d8:	482b      	ldr	r0, [pc, #172]	; (8002788 <HAL_UART_MspInit+0x804>)
 80026da:	f000 fd2d 	bl	8003138 <HAL_DMA_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_UART_MspInit+0x764>
      Error_Handler();
 80026e4:	f7fe fe5b 	bl	800139e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a27      	ldr	r2, [pc, #156]	; (8002788 <HAL_UART_MspInit+0x804>)
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38
 80026ee:	4a26      	ldr	r2, [pc, #152]	; (8002788 <HAL_UART_MspInit+0x804>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80026f4:	4b26      	ldr	r3, [pc, #152]	; (8002790 <HAL_UART_MspInit+0x80c>)
 80026f6:	4a27      	ldr	r2, [pc, #156]	; (8002794 <HAL_UART_MspInit+0x810>)
 80026f8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80026fa:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_UART_MspInit+0x80c>)
 80026fc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002700:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002702:	4b23      	ldr	r3, [pc, #140]	; (8002790 <HAL_UART_MspInit+0x80c>)
 8002704:	2240      	movs	r2, #64	; 0x40
 8002706:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002708:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HAL_UART_MspInit+0x80c>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_UART_MspInit+0x80c>)
 8002710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002714:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <HAL_UART_MspInit+0x80c>)
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800271c:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <HAL_UART_MspInit+0x80c>)
 800271e:	2200      	movs	r2, #0
 8002720:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002722:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_UART_MspInit+0x80c>)
 8002724:	2200      	movs	r2, #0
 8002726:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_UART_MspInit+0x80c>)
 800272a:	2200      	movs	r2, #0
 800272c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_UART_MspInit+0x80c>)
 8002730:	2200      	movs	r2, #0
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002734:	4816      	ldr	r0, [pc, #88]	; (8002790 <HAL_UART_MspInit+0x80c>)
 8002736:	f000 fcff 	bl	8003138 <HAL_DMA_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_UART_MspInit+0x7c0>
      Error_Handler();
 8002740:	f7fe fe2d 	bl	800139e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a12      	ldr	r2, [pc, #72]	; (8002790 <HAL_UART_MspInit+0x80c>)
 8002748:	635a      	str	r2, [r3, #52]	; 0x34
 800274a:	4a11      	ldr	r2, [pc, #68]	; (8002790 <HAL_UART_MspInit+0x80c>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	2047      	movs	r0, #71	; 0x47
 8002756:	f000 fcc5 	bl	80030e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800275a:	2047      	movs	r0, #71	; 0x47
 800275c:	f000 fcde 	bl	800311c <HAL_NVIC_EnableIRQ>
}
 8002760:	bf00      	nop
 8002762:	3750      	adds	r7, #80	; 0x50
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40004800 	.word	0x40004800
 800276c:	40023800 	.word	0x40023800
 8002770:	40020800 	.word	0x40020800
 8002774:	20000758 	.word	0x20000758
 8002778:	40026028 	.word	0x40026028
 800277c:	200007b8 	.word	0x200007b8
 8002780:	40026058 	.word	0x40026058
 8002784:	40011400 	.word	0x40011400
 8002788:	20000818 	.word	0x20000818
 800278c:	40026428 	.word	0x40026428
 8002790:	20000878 	.word	0x20000878
 8002794:	400264a0 	.word	0x400264a0

08002798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800279c:	480d      	ldr	r0, [pc, #52]	; (80027d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800279e:	490e      	ldr	r1, [pc, #56]	; (80027d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a4:	e002      	b.n	80027ac <LoopCopyDataInit>

080027a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027aa:	3304      	adds	r3, #4

080027ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b0:	d3f9      	bcc.n	80027a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b2:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027b4:	4c0b      	ldr	r4, [pc, #44]	; (80027e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b8:	e001      	b.n	80027be <LoopFillZerobss>

080027ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027bc:	3204      	adds	r2, #4

080027be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c0:	d3fb      	bcc.n	80027ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027c2:	f7fe fffd 	bl	80017c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027c6:	f004 ff0b 	bl	80075e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ca:	f7fe fd31 	bl	8001230 <main>
  bx  lr    
 80027ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80027dc:	08007680 	.word	0x08007680
  ldr r2, =_sbss
 80027e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80027e4:	200008dc 	.word	0x200008dc

080027e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e8:	e7fe      	b.n	80027e8 <ADC_IRQHandler>
	...

080027ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0d      	ldr	r2, [pc, #52]	; (800282c <HAL_Init+0x40>)
 80027f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <HAL_Init+0x40>)
 8002802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002806:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_Init+0x40>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a07      	ldr	r2, [pc, #28]	; (800282c <HAL_Init+0x40>)
 800280e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002814:	2003      	movs	r0, #3
 8002816:	f000 fc5a 	bl	80030ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281a:	200f      	movs	r0, #15
 800281c:	f7fe fe6a 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002820:	f7fe fe40 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023c00 	.word	0x40023c00

08002830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_IncTick+0x20>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_IncTick+0x24>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4413      	add	r3, r2
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_IncTick+0x24>)
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000008 	.word	0x20000008
 8002854:	200008d8 	.word	0x200008d8

08002858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_GetTick+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	200008d8 	.word	0x200008d8

08002870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002878:	f7ff ffee 	bl	8002858 <HAL_GetTick>
 800287c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d005      	beq.n	8002896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_Delay+0x44>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002896:	bf00      	nop
 8002898:	f7ff ffde 	bl	8002858 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d8f7      	bhi.n	8002898 <HAL_Delay+0x28>
  {
  }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000008 	.word	0x20000008

080028b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e033      	b.n	8002936 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe fa22 	bl	8000d20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d118      	bne.n	8002928 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028fe:	f023 0302 	bic.w	r3, r3, #2
 8002902:	f043 0202 	orr.w	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f93a 	bl	8002b84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f023 0303 	bic.w	r3, r3, #3
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
 8002926:	e001      	b.n	800292c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1c>
 8002958:	2302      	movs	r3, #2
 800295a:	e105      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x228>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b09      	cmp	r3, #9
 800296a:	d925      	bls.n	80029b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68d9      	ldr	r1, [r3, #12]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	3b1e      	subs	r3, #30
 8002982:	2207      	movs	r2, #7
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43da      	mvns	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	400a      	ands	r2, r1
 8002990:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68d9      	ldr	r1, [r3, #12]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	4618      	mov	r0, r3
 80029a4:	4603      	mov	r3, r0
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4403      	add	r3, r0
 80029aa:	3b1e      	subs	r3, #30
 80029ac:	409a      	lsls	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	e022      	b.n	80029fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6919      	ldr	r1, [r3, #16]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	2207      	movs	r2, #7
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43da      	mvns	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	400a      	ands	r2, r1
 80029da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6919      	ldr	r1, [r3, #16]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4618      	mov	r0, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4403      	add	r3, r0
 80029f4:	409a      	lsls	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b06      	cmp	r3, #6
 8002a04:	d824      	bhi.n	8002a50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	3b05      	subs	r3, #5
 8002a18:	221f      	movs	r2, #31
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	400a      	ands	r2, r1
 8002a26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	4618      	mov	r0, r3
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b05      	subs	r3, #5
 8002a42:	fa00 f203 	lsl.w	r2, r0, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a4e:	e04c      	b.n	8002aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	d824      	bhi.n	8002aa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	3b23      	subs	r3, #35	; 0x23
 8002a6a:	221f      	movs	r2, #31
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43da      	mvns	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	400a      	ands	r2, r1
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	3b23      	subs	r3, #35	; 0x23
 8002a94:	fa00 f203 	lsl.w	r2, r0, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002aa0:	e023      	b.n	8002aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3b41      	subs	r3, #65	; 0x41
 8002ab4:	221f      	movs	r2, #31
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	400a      	ands	r2, r1
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	3b41      	subs	r3, #65	; 0x41
 8002ade:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_ADC_ConfigChannel+0x234>)
 8002aec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a21      	ldr	r2, [pc, #132]	; (8002b78 <HAL_ADC_ConfigChannel+0x238>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d109      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1cc>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b12      	cmp	r3, #18
 8002afe:	d105      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_ADC_ConfigChannel+0x238>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d123      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x21e>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d003      	beq.n	8002b26 <HAL_ADC_ConfigChannel+0x1e6>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b11      	cmp	r3, #17
 8002b24:	d11b      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	d111      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <HAL_ADC_ConfigChannel+0x23c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a10      	ldr	r2, [pc, #64]	; (8002b80 <HAL_ADC_ConfigChannel+0x240>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	0c9a      	lsrs	r2, r3, #18
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b50:	e002      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f9      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40012300 	.word	0x40012300
 8002b78:	40012000 	.word	0x40012000
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	431bde83 	.word	0x431bde83

08002b84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b8c:	4b79      	ldr	r3, [pc, #484]	; (8002d74 <ADC_Init+0x1f0>)
 8002b8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	021a      	lsls	r2, r3, #8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <ADC_Init+0x1f4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6899      	ldr	r1, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	e00f      	b.n	8002c82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0202 	bic.w	r2, r2, #2
 8002c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6899      	ldr	r1, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7e1b      	ldrb	r3, [r3, #24]
 8002c9c:	005a      	lsls	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01b      	beq.n	8002ce8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	035a      	lsls	r2, r3, #13
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	e007      	b.n	8002cf8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cf6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	051a      	lsls	r2, r3, #20
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6899      	ldr	r1, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d3a:	025a      	lsls	r2, r3, #9
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6899      	ldr	r1, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	029a      	lsls	r2, r3, #10
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40012300 	.word	0x40012300
 8002d78:	0f000001 	.word	0x0f000001

08002d7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0ed      	b.n	8002f6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe f838 	bl	8000e10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db0:	f7ff fd52 	bl	8002858 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002db6:	e012      	b.n	8002dde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002db8:	f7ff fd4e 	bl	8002858 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b0a      	cmp	r3, #10
 8002dc4:	d90b      	bls.n	8002dde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2205      	movs	r2, #5
 8002dd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0c5      	b.n	8002f6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0e5      	beq.n	8002db8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0202 	bic.w	r2, r2, #2
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dfc:	f7ff fd2c 	bl	8002858 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e02:	e012      	b.n	8002e2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e04:	f7ff fd28 	bl	8002858 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b0a      	cmp	r3, #10
 8002e10:	d90b      	bls.n	8002e2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2205      	movs	r2, #5
 8002e22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e09f      	b.n	8002f6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e5      	bne.n	8002e04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7e1b      	ldrb	r3, [r3, #24]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d108      	bne.n	8002e52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	e007      	b.n	8002e62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7e5b      	ldrb	r3, [r3, #25]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d108      	bne.n	8002e7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	e007      	b.n	8002e8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7e9b      	ldrb	r3, [r3, #26]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d108      	bne.n	8002ea6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0220 	orr.w	r2, r2, #32
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e007      	b.n	8002eb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0220 	bic.w	r2, r2, #32
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7edb      	ldrb	r3, [r3, #27]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d108      	bne.n	8002ed0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0210 	bic.w	r2, r2, #16
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	e007      	b.n	8002ee0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0210 	orr.w	r2, r2, #16
 8002ede:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	7f1b      	ldrb	r3, [r3, #28]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d108      	bne.n	8002efa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0208 	orr.w	r2, r2, #8
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e007      	b.n	8002f0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0208 	bic.w	r2, r2, #8
 8002f08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7f5b      	ldrb	r3, [r3, #29]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d108      	bne.n	8002f24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0204 	orr.w	r2, r2, #4
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e007      	b.n	8002f34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0204 	bic.w	r2, r2, #4
 8002f32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	ea42 0103 	orr.w	r1, r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4907      	ldr	r1, [pc, #28]	; (8003010 <__NVIC_EnableIRQ+0x38>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e100 	.word	0xe000e100

08003014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db0a      	blt.n	800303e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	490c      	ldr	r1, [pc, #48]	; (8003060 <__NVIC_SetPriority+0x4c>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	440b      	add	r3, r1
 8003038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800303c:	e00a      	b.n	8003054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4908      	ldr	r1, [pc, #32]	; (8003064 <__NVIC_SetPriority+0x50>)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	3b04      	subs	r3, #4
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	440b      	add	r3, r1
 8003052:	761a      	strb	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000e100 	.word	0xe000e100
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	; 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f1c3 0307 	rsb	r3, r3, #7
 8003082:	2b04      	cmp	r3, #4
 8003084:	bf28      	it	cs
 8003086:	2304      	movcs	r3, #4
 8003088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3304      	adds	r3, #4
 800308e:	2b06      	cmp	r3, #6
 8003090:	d902      	bls.n	8003098 <NVIC_EncodePriority+0x30>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3b03      	subs	r3, #3
 8003096:	e000      	b.n	800309a <NVIC_EncodePriority+0x32>
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	f04f 32ff 	mov.w	r2, #4294967295
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	401a      	ands	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	43d9      	mvns	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	4313      	orrs	r3, r2
         );
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	; 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ff4c 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f6:	f7ff ff61 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 80030fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	6978      	ldr	r0, [r7, #20]
 8003102:	f7ff ffb1 	bl	8003068 <NVIC_EncodePriority>
 8003106:	4602      	mov	r2, r0
 8003108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff80 	bl	8003014 <__NVIC_SetPriority>
}
 8003114:	bf00      	nop
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ff54 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003144:	f7ff fb88 	bl	8002858 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e099      	b.n	8003288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003174:	e00f      	b.n	8003196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003176:	f7ff fb6f 	bl	8002858 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b05      	cmp	r3, #5
 8003182:	d908      	bls.n	8003196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2203      	movs	r2, #3
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e078      	b.n	8003288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e8      	bne.n	8003176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4b38      	ldr	r3, [pc, #224]	; (8003290 <HAL_DMA_Init+0x158>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d107      	bne.n	8003200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	4313      	orrs	r3, r2
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0307 	bic.w	r3, r3, #7
 8003216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	2b04      	cmp	r3, #4
 8003228:	d117      	bne.n	800325a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00e      	beq.n	800325a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fa7b 	bl	8003738 <DMA_CheckFifoParam>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2240      	movs	r2, #64	; 0x40
 800324c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003256:	2301      	movs	r3, #1
 8003258:	e016      	b.n	8003288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa32 	bl	80036cc <DMA_CalcBaseAndBitshift>
 8003268:	4603      	mov	r3, r0
 800326a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003270:	223f      	movs	r2, #63	; 0x3f
 8003272:	409a      	lsls	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	f010803f 	.word	0xf010803f

08003294 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032a2:	f7ff fad9 	bl	8002858 <HAL_GetTick>
 80032a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d008      	beq.n	80032c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2280      	movs	r2, #128	; 0x80
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e052      	b.n	800336c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0216 	bic.w	r2, r2, #22
 80032d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d103      	bne.n	80032f6 <HAL_DMA_Abort+0x62>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0208 	bic.w	r2, r2, #8
 8003304:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003316:	e013      	b.n	8003340 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003318:	f7ff fa9e 	bl	8002858 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b05      	cmp	r3, #5
 8003324:	d90c      	bls.n	8003340 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2203      	movs	r2, #3
 8003330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e015      	b.n	800336c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e4      	bne.n	8003318 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	223f      	movs	r2, #63	; 0x3f
 8003354:	409a      	lsls	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d004      	beq.n	8003392 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e00c      	b.n	80033ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2205      	movs	r2, #5
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033c4:	4b8e      	ldr	r3, [pc, #568]	; (8003600 <HAL_DMA_IRQHandler+0x248>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a8e      	ldr	r2, [pc, #568]	; (8003604 <HAL_DMA_IRQHandler+0x24c>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0a9b      	lsrs	r3, r3, #10
 80033d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	2208      	movs	r2, #8
 80033e4:	409a      	lsls	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01a      	beq.n	8003424 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0204 	bic.w	r2, r2, #4
 800340a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	2208      	movs	r2, #8
 8003412:	409a      	lsls	r2, r3
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	f043 0201 	orr.w	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	2201      	movs	r2, #1
 800342a:	409a      	lsls	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d012      	beq.n	800345a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	2201      	movs	r2, #1
 8003448:	409a      	lsls	r2, r3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	f043 0202 	orr.w	r2, r3, #2
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	2204      	movs	r2, #4
 8003460:	409a      	lsls	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d012      	beq.n	8003490 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00b      	beq.n	8003490 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	2204      	movs	r2, #4
 800347e:	409a      	lsls	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003488:	f043 0204 	orr.w	r2, r3, #4
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	2210      	movs	r2, #16
 8003496:	409a      	lsls	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d043      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d03c      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	2210      	movs	r2, #16
 80034b4:	409a      	lsls	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d108      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d024      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
 80034e6:	e01f      	b.n	8003528 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01b      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
 80034f8:	e016      	b.n	8003528 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d107      	bne.n	8003518 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0208 	bic.w	r2, r2, #8
 8003516:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	2220      	movs	r2, #32
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 808f 	beq.w	8003658 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8087 	beq.w	8003658 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	2220      	movs	r2, #32
 8003550:	409a      	lsls	r2, r3
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b05      	cmp	r3, #5
 8003560:	d136      	bne.n	80035d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0216 	bic.w	r2, r2, #22
 8003570:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003580:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d103      	bne.n	8003592 <HAL_DMA_IRQHandler+0x1da>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0208 	bic.w	r2, r2, #8
 80035a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	223f      	movs	r2, #63	; 0x3f
 80035a8:	409a      	lsls	r2, r3
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d07e      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
        }
        return;
 80035ce:	e079      	b.n	80036c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01d      	beq.n	800361a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10d      	bne.n	8003608 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d031      	beq.n	8003658 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
 80035fc:	e02c      	b.n	8003658 <HAL_DMA_IRQHandler+0x2a0>
 80035fe:	bf00      	nop
 8003600:	20000000 	.word	0x20000000
 8003604:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d023      	beq.n	8003658 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
 8003618:	e01e      	b.n	8003658 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10f      	bne.n	8003648 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0210 	bic.w	r2, r2, #16
 8003636:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365c:	2b00      	cmp	r3, #0
 800365e:	d032      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d022      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2205      	movs	r2, #5
 8003670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	3301      	adds	r3, #1
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	429a      	cmp	r2, r3
 800368e:	d307      	bcc.n	80036a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f2      	bne.n	8003684 <HAL_DMA_IRQHandler+0x2cc>
 800369e:	e000      	b.n	80036a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
 80036c2:	e000      	b.n	80036c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036c4:	bf00      	nop
    }
  }
}
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	3b10      	subs	r3, #16
 80036dc:	4a14      	ldr	r2, [pc, #80]	; (8003730 <DMA_CalcBaseAndBitshift+0x64>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	091b      	lsrs	r3, r3, #4
 80036e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036e6:	4a13      	ldr	r2, [pc, #76]	; (8003734 <DMA_CalcBaseAndBitshift+0x68>)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d909      	bls.n	800370e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003702:	f023 0303 	bic.w	r3, r3, #3
 8003706:	1d1a      	adds	r2, r3, #4
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	659a      	str	r2, [r3, #88]	; 0x58
 800370c:	e007      	b.n	800371e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	aaaaaaab 	.word	0xaaaaaaab
 8003734:	08007668 	.word	0x08007668

08003738 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d11f      	bne.n	8003792 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d856      	bhi.n	8003806 <DMA_CheckFifoParam+0xce>
 8003758:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <DMA_CheckFifoParam+0x28>)
 800375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375e:	bf00      	nop
 8003760:	08003771 	.word	0x08003771
 8003764:	08003783 	.word	0x08003783
 8003768:	08003771 	.word	0x08003771
 800376c:	08003807 	.word	0x08003807
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d046      	beq.n	800380a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003780:	e043      	b.n	800380a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800378a:	d140      	bne.n	800380e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003790:	e03d      	b.n	800380e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800379a:	d121      	bne.n	80037e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d837      	bhi.n	8003812 <DMA_CheckFifoParam+0xda>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <DMA_CheckFifoParam+0x70>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037b9 	.word	0x080037b9
 80037ac:	080037bf 	.word	0x080037bf
 80037b0:	080037b9 	.word	0x080037b9
 80037b4:	080037d1 	.word	0x080037d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
      break;
 80037bc:	e030      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d025      	beq.n	8003816 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ce:	e022      	b.n	8003816 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037d8:	d11f      	bne.n	800381a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037de:	e01c      	b.n	800381a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d903      	bls.n	80037ee <DMA_CheckFifoParam+0xb6>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d003      	beq.n	80037f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037ec:	e018      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
      break;
 80037f2:	e015      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00e      	beq.n	800381e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      break;
 8003804:	e00b      	b.n	800381e <DMA_CheckFifoParam+0xe6>
      break;
 8003806:	bf00      	nop
 8003808:	e00a      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
 800380c:	e008      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      break;
 800380e:	bf00      	nop
 8003810:	e006      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      break;
 8003812:	bf00      	nop
 8003814:	e004      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      break;
 8003816:	bf00      	nop
 8003818:	e002      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      break;   
 800381a:	bf00      	nop
 800381c:	e000      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      break;
 800381e:	bf00      	nop
    }
  } 
  
  return status; 
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop

08003830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	e16b      	b.n	8003b24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800384c:	2201      	movs	r2, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	429a      	cmp	r2, r3
 8003866:	f040 815a 	bne.w	8003b1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d005      	beq.n	8003882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387e:	2b02      	cmp	r3, #2
 8003880:	d130      	bne.n	80038e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	2203      	movs	r2, #3
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b8:	2201      	movs	r2, #1
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 0201 	and.w	r2, r3, #1
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d017      	beq.n	8003920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	2203      	movs	r2, #3
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d123      	bne.n	8003974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	08da      	lsrs	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3208      	adds	r2, #8
 8003934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	220f      	movs	r2, #15
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	08da      	lsrs	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3208      	adds	r2, #8
 800396e:	69b9      	ldr	r1, [r7, #24]
 8003970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	2203      	movs	r2, #3
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0203 	and.w	r2, r3, #3
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80b4 	beq.w	8003b1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b60      	ldr	r3, [pc, #384]	; (8003b3c <HAL_GPIO_Init+0x30c>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	4a5f      	ldr	r2, [pc, #380]	; (8003b3c <HAL_GPIO_Init+0x30c>)
 80039c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c4:	6453      	str	r3, [r2, #68]	; 0x44
 80039c6:	4b5d      	ldr	r3, [pc, #372]	; (8003b3c <HAL_GPIO_Init+0x30c>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d2:	4a5b      	ldr	r2, [pc, #364]	; (8003b40 <HAL_GPIO_Init+0x310>)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	220f      	movs	r2, #15
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a52      	ldr	r2, [pc, #328]	; (8003b44 <HAL_GPIO_Init+0x314>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d02b      	beq.n	8003a56 <HAL_GPIO_Init+0x226>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a51      	ldr	r2, [pc, #324]	; (8003b48 <HAL_GPIO_Init+0x318>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d025      	beq.n	8003a52 <HAL_GPIO_Init+0x222>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a50      	ldr	r2, [pc, #320]	; (8003b4c <HAL_GPIO_Init+0x31c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d01f      	beq.n	8003a4e <HAL_GPIO_Init+0x21e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4f      	ldr	r2, [pc, #316]	; (8003b50 <HAL_GPIO_Init+0x320>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d019      	beq.n	8003a4a <HAL_GPIO_Init+0x21a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a4e      	ldr	r2, [pc, #312]	; (8003b54 <HAL_GPIO_Init+0x324>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <HAL_GPIO_Init+0x216>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4d      	ldr	r2, [pc, #308]	; (8003b58 <HAL_GPIO_Init+0x328>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00d      	beq.n	8003a42 <HAL_GPIO_Init+0x212>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a4c      	ldr	r2, [pc, #304]	; (8003b5c <HAL_GPIO_Init+0x32c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d007      	beq.n	8003a3e <HAL_GPIO_Init+0x20e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a4b      	ldr	r2, [pc, #300]	; (8003b60 <HAL_GPIO_Init+0x330>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d101      	bne.n	8003a3a <HAL_GPIO_Init+0x20a>
 8003a36:	2307      	movs	r3, #7
 8003a38:	e00e      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	e00c      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a3e:	2306      	movs	r3, #6
 8003a40:	e00a      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a42:	2305      	movs	r3, #5
 8003a44:	e008      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a46:	2304      	movs	r3, #4
 8003a48:	e006      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e004      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e002      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a56:	2300      	movs	r3, #0
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	f002 0203 	and.w	r2, r2, #3
 8003a5e:	0092      	lsls	r2, r2, #2
 8003a60:	4093      	lsls	r3, r2
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a68:	4935      	ldr	r1, [pc, #212]	; (8003b40 <HAL_GPIO_Init+0x310>)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	3302      	adds	r3, #2
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a76:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <HAL_GPIO_Init+0x334>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a9a:	4a32      	ldr	r2, [pc, #200]	; (8003b64 <HAL_GPIO_Init+0x334>)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aa0:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <HAL_GPIO_Init+0x334>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ac4:	4a27      	ldr	r2, [pc, #156]	; (8003b64 <HAL_GPIO_Init+0x334>)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aca:	4b26      	ldr	r3, [pc, #152]	; (8003b64 <HAL_GPIO_Init+0x334>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aee:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <HAL_GPIO_Init+0x334>)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <HAL_GPIO_Init+0x334>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b18:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <HAL_GPIO_Init+0x334>)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3301      	adds	r3, #1
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	f67f ae90 	bls.w	800384c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	3724      	adds	r7, #36	; 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40013800 	.word	0x40013800
 8003b44:	40020000 	.word	0x40020000
 8003b48:	40020400 	.word	0x40020400
 8003b4c:	40020800 	.word	0x40020800
 8003b50:	40020c00 	.word	0x40020c00
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40021400 	.word	0x40021400
 8003b5c:	40021800 	.word	0x40021800
 8003b60:	40021c00 	.word	0x40021c00
 8003b64:	40013c00 	.word	0x40013c00

08003b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
 8003b74:	4613      	mov	r3, r2
 8003b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b78:	787b      	ldrb	r3, [r7, #1]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7e:	887a      	ldrh	r2, [r7, #2]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b84:	e003      	b.n	8003b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	041a      	lsls	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	619a      	str	r2, [r3, #24]
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bac:	887a      	ldrh	r2, [r7, #2]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	041a      	lsls	r2, r3, #16
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	43d9      	mvns	r1, r3
 8003bb8:	887b      	ldrh	r3, [r7, #2]
 8003bba:	400b      	ands	r3, r1
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	619a      	str	r2, [r3, #24]
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e12b      	b.n	8003e3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fd fad2 	bl	80011a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2224      	movs	r2, #36	; 0x24
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0201 	bic.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c34:	f001 fcea 	bl	800560c <HAL_RCC_GetPCLK1Freq>
 8003c38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4a81      	ldr	r2, [pc, #516]	; (8003e44 <HAL_I2C_Init+0x274>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d807      	bhi.n	8003c54 <HAL_I2C_Init+0x84>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4a80      	ldr	r2, [pc, #512]	; (8003e48 <HAL_I2C_Init+0x278>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	bf94      	ite	ls
 8003c4c:	2301      	movls	r3, #1
 8003c4e:	2300      	movhi	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e006      	b.n	8003c62 <HAL_I2C_Init+0x92>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a7d      	ldr	r2, [pc, #500]	; (8003e4c <HAL_I2C_Init+0x27c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	bf94      	ite	ls
 8003c5c:	2301      	movls	r3, #1
 8003c5e:	2300      	movhi	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e0e7      	b.n	8003e3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a78      	ldr	r2, [pc, #480]	; (8003e50 <HAL_I2C_Init+0x280>)
 8003c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c72:	0c9b      	lsrs	r3, r3, #18
 8003c74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4a6a      	ldr	r2, [pc, #424]	; (8003e44 <HAL_I2C_Init+0x274>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d802      	bhi.n	8003ca4 <HAL_I2C_Init+0xd4>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	e009      	b.n	8003cb8 <HAL_I2C_Init+0xe8>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	4a69      	ldr	r2, [pc, #420]	; (8003e54 <HAL_I2C_Init+0x284>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	099b      	lsrs	r3, r3, #6
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	495c      	ldr	r1, [pc, #368]	; (8003e44 <HAL_I2C_Init+0x274>)
 8003cd4:	428b      	cmp	r3, r1
 8003cd6:	d819      	bhi.n	8003d0c <HAL_I2C_Init+0x13c>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1e59      	subs	r1, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce6:	1c59      	adds	r1, r3, #1
 8003ce8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cec:	400b      	ands	r3, r1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_I2C_Init+0x138>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1e59      	subs	r1, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d06:	e051      	b.n	8003dac <HAL_I2C_Init+0x1dc>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	e04f      	b.n	8003dac <HAL_I2C_Init+0x1dc>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d111      	bne.n	8003d38 <HAL_I2C_Init+0x168>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1e58      	subs	r0, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	440b      	add	r3, r1
 8003d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d26:	3301      	adds	r3, #1
 8003d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	e012      	b.n	8003d5e <HAL_I2C_Init+0x18e>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1e58      	subs	r0, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	0099      	lsls	r1, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4e:	3301      	adds	r3, #1
 8003d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_I2C_Init+0x196>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e022      	b.n	8003dac <HAL_I2C_Init+0x1dc>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10e      	bne.n	8003d8c <HAL_I2C_Init+0x1bc>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1e58      	subs	r0, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6859      	ldr	r1, [r3, #4]
 8003d76:	460b      	mov	r3, r1
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	440b      	add	r3, r1
 8003d7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d80:	3301      	adds	r3, #1
 8003d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8a:	e00f      	b.n	8003dac <HAL_I2C_Init+0x1dc>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1e58      	subs	r0, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	0099      	lsls	r1, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da2:	3301      	adds	r3, #1
 8003da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	6809      	ldr	r1, [r1, #0]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69da      	ldr	r2, [r3, #28]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6911      	ldr	r1, [r2, #16]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68d2      	ldr	r2, [r2, #12]
 8003de6:	4311      	orrs	r1, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	000186a0 	.word	0x000186a0
 8003e48:	001e847f 	.word	0x001e847f
 8003e4c:	003d08ff 	.word	0x003d08ff
 8003e50:	431bde83 	.word	0x431bde83
 8003e54:	10624dd3 	.word	0x10624dd3

08003e58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	461a      	mov	r2, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	817b      	strh	r3, [r7, #10]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	813b      	strh	r3, [r7, #8]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e72:	f7fe fcf1 	bl	8002858 <HAL_GetTick>
 8003e76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	f040 80d9 	bne.w	8004038 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	2319      	movs	r3, #25
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	496d      	ldr	r1, [pc, #436]	; (8004044 <HAL_I2C_Mem_Write+0x1ec>)
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fdad 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e0cc      	b.n	800403a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_I2C_Mem_Write+0x56>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e0c5      	b.n	800403a <HAL_I2C_Mem_Write+0x1e2>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d007      	beq.n	8003ed4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2221      	movs	r2, #33	; 0x21
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2240      	movs	r2, #64	; 0x40
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a3a      	ldr	r2, [r7, #32]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a4d      	ldr	r2, [pc, #308]	; (8004048 <HAL_I2C_Mem_Write+0x1f0>)
 8003f14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f16:	88f8      	ldrh	r0, [r7, #6]
 8003f18:	893a      	ldrh	r2, [r7, #8]
 8003f1a:	8979      	ldrh	r1, [r7, #10]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	4603      	mov	r3, r0
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fbe4 	bl	80046f4 <I2C_RequestMemoryWrite>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d052      	beq.n	8003fd8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e081      	b.n	800403a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fe2e 	bl	8004b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d107      	bne.n	8003f5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e06b      	b.n	800403a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	781a      	ldrb	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d11b      	bne.n	8003fd8 <HAL_I2C_Mem_Write+0x180>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d017      	beq.n	8003fd8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	781a      	ldrb	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1aa      	bne.n	8003f36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fe1a 	bl	8004c1e <I2C_WaitOnBTFFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00d      	beq.n	800400c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d107      	bne.n	8004008 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004006:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e016      	b.n	800403a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	e000      	b.n	800403a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004038:	2302      	movs	r3, #2
  }
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	00100002 	.word	0x00100002
 8004048:	ffff0000 	.word	0xffff0000

0800404c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08c      	sub	sp, #48	; 0x30
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	4608      	mov	r0, r1
 8004056:	4611      	mov	r1, r2
 8004058:	461a      	mov	r2, r3
 800405a:	4603      	mov	r3, r0
 800405c:	817b      	strh	r3, [r7, #10]
 800405e:	460b      	mov	r3, r1
 8004060:	813b      	strh	r3, [r7, #8]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004066:	f7fe fbf7 	bl	8002858 <HAL_GetTick>
 800406a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b20      	cmp	r3, #32
 8004076:	f040 8208 	bne.w	800448a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	2319      	movs	r3, #25
 8004080:	2201      	movs	r2, #1
 8004082:	497b      	ldr	r1, [pc, #492]	; (8004270 <HAL_I2C_Mem_Read+0x224>)
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fcb3 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
 8004092:	e1fb      	b.n	800448c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_I2C_Mem_Read+0x56>
 800409e:	2302      	movs	r3, #2
 80040a0:	e1f4      	b.n	800448c <HAL_I2C_Mem_Read+0x440>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d007      	beq.n	80040c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2222      	movs	r2, #34	; 0x22
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2240      	movs	r2, #64	; 0x40
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80040f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4a5b      	ldr	r2, [pc, #364]	; (8004274 <HAL_I2C_Mem_Read+0x228>)
 8004108:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800410a:	88f8      	ldrh	r0, [r7, #6]
 800410c:	893a      	ldrh	r2, [r7, #8]
 800410e:	8979      	ldrh	r1, [r7, #10]
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	4603      	mov	r3, r0
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fb80 	bl	8004820 <I2C_RequestMemoryRead>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e1b0      	b.n	800448c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412e:	2b00      	cmp	r3, #0
 8004130:	d113      	bne.n	800415a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004132:	2300      	movs	r3, #0
 8004134:	623b      	str	r3, [r7, #32]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	623b      	str	r3, [r7, #32]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	623b      	str	r3, [r7, #32]
 8004146:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e184      	b.n	8004464 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415e:	2b01      	cmp	r3, #1
 8004160:	d11b      	bne.n	800419a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004170:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e164      	b.n	8004464 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d11b      	bne.n	80041da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c2:	2300      	movs	r3, #0
 80041c4:	61bb      	str	r3, [r7, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	e144      	b.n	8004464 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041f0:	e138      	b.n	8004464 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	f200 80f1 	bhi.w	80043de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004200:	2b01      	cmp	r3, #1
 8004202:	d123      	bne.n	800424c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fd49 	bl	8004ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e139      	b.n	800448c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	855a      	strh	r2, [r3, #42]	; 0x2a
 800424a:	e10b      	b.n	8004464 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004250:	2b02      	cmp	r3, #2
 8004252:	d14e      	bne.n	80042f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	2200      	movs	r2, #0
 800425c:	4906      	ldr	r1, [pc, #24]	; (8004278 <HAL_I2C_Mem_Read+0x22c>)
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fbc6 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e10e      	b.n	800448c <HAL_I2C_Mem_Read+0x440>
 800426e:	bf00      	nop
 8004270:	00100002 	.word	0x00100002
 8004274:	ffff0000 	.word	0xffff0000
 8004278:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042f0:	e0b8      	b.n	8004464 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	2200      	movs	r2, #0
 80042fa:	4966      	ldr	r1, [pc, #408]	; (8004494 <HAL_I2C_Mem_Read+0x448>)
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 fb77 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0bf      	b.n	800448c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	2200      	movs	r2, #0
 8004356:	494f      	ldr	r1, [pc, #316]	; (8004494 <HAL_I2C_Mem_Read+0x448>)
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fb49 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e091      	b.n	800448c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004376:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043dc:	e042      	b.n	8004464 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fc5c 	bl	8004ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e04c      	b.n	800448c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b04      	cmp	r3, #4
 8004430:	d118      	bne.n	8004464 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	2b00      	cmp	r3, #0
 800446a:	f47f aec2 	bne.w	80041f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	e000      	b.n	800448c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800448a:	2302      	movs	r3, #2
  }
}
 800448c:	4618      	mov	r0, r3
 800448e:	3728      	adds	r7, #40	; 0x28
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	00010004 	.word	0x00010004

08004498 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	607a      	str	r2, [r7, #4]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	460b      	mov	r3, r1
 80044a6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80044a8:	f7fe f9d6 	bl	8002858 <HAL_GetTick>
 80044ac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	f040 8111 	bne.w	80046e2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	2319      	movs	r3, #25
 80044c6:	2201      	movs	r2, #1
 80044c8:	4988      	ldr	r1, [pc, #544]	; (80046ec <HAL_I2C_IsDeviceReady+0x254>)
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fa90 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
 80044d8:	e104      	b.n	80046e4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_I2C_IsDeviceReady+0x50>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e0fd      	b.n	80046e4 <HAL_I2C_IsDeviceReady+0x24c>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d007      	beq.n	800450e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800451c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2224      	movs	r2, #36	; 0x24
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a70      	ldr	r2, [pc, #448]	; (80046f0 <HAL_I2C_IsDeviceReady+0x258>)
 8004530:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004540:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2200      	movs	r2, #0
 800454a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fa4e 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004568:	d103      	bne.n	8004572 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e0b6      	b.n	80046e4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004576:	897b      	ldrh	r3, [r7, #10]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004584:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004586:	f7fe f967 	bl	8002858 <HAL_GetTick>
 800458a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b02      	cmp	r3, #2
 8004598:	bf0c      	ite	eq
 800459a:	2301      	moveq	r3, #1
 800459c:	2300      	movne	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045ba:	e025      	b.n	8004608 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045bc:	f7fe f94c 	bl	8002858 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d302      	bcc.n	80045d2 <HAL_I2C_IsDeviceReady+0x13a>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d103      	bne.n	80045da <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	22a0      	movs	r2, #160	; 0xa0
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fe:	bf0c      	ite	eq
 8004600:	2301      	moveq	r3, #1
 8004602:	2300      	movne	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2ba0      	cmp	r3, #160	; 0xa0
 8004612:	d005      	beq.n	8004620 <HAL_I2C_IsDeviceReady+0x188>
 8004614:	7dfb      	ldrb	r3, [r7, #23]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <HAL_I2C_IsDeviceReady+0x188>
 800461a:	7dbb      	ldrb	r3, [r7, #22]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0cd      	beq.n	80045bc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d129      	bne.n	800468a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004644:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2319      	movs	r3, #25
 8004662:	2201      	movs	r2, #1
 8004664:	4921      	ldr	r1, [pc, #132]	; (80046ec <HAL_I2C_IsDeviceReady+0x254>)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f9c2 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e036      	b.n	80046e4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e02c      	b.n	80046e4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004698:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	2319      	movs	r3, #25
 80046aa:	2201      	movs	r2, #1
 80046ac:	490f      	ldr	r1, [pc, #60]	; (80046ec <HAL_I2C_IsDeviceReady+0x254>)
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f99e 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e012      	b.n	80046e4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	3301      	adds	r3, #1
 80046c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	f4ff af32 	bcc.w	8004532 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
  }
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3720      	adds	r7, #32
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	00100002 	.word	0x00100002
 80046f0:	ffff0000 	.word	0xffff0000

080046f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	4608      	mov	r0, r1
 80046fe:	4611      	mov	r1, r2
 8004700:	461a      	mov	r2, r3
 8004702:	4603      	mov	r3, r0
 8004704:	817b      	strh	r3, [r7, #10]
 8004706:	460b      	mov	r3, r1
 8004708:	813b      	strh	r3, [r7, #8]
 800470a:	4613      	mov	r3, r2
 800470c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800471c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	2200      	movs	r2, #0
 8004726:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f960 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00d      	beq.n	8004752 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004744:	d103      	bne.n	800474e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e05f      	b.n	8004812 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004752:	897b      	ldrh	r3, [r7, #10]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004760:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	6a3a      	ldr	r2, [r7, #32]
 8004766:	492d      	ldr	r1, [pc, #180]	; (800481c <I2C_RequestMemoryWrite+0x128>)
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f998 	bl	8004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e04c      	b.n	8004812 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800478e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004790:	6a39      	ldr	r1, [r7, #32]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 fa02 	bl	8004b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00d      	beq.n	80047ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d107      	bne.n	80047b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e02b      	b.n	8004812 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d105      	bne.n	80047cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047c0:	893b      	ldrh	r3, [r7, #8]
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	611a      	str	r2, [r3, #16]
 80047ca:	e021      	b.n	8004810 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047cc:	893b      	ldrh	r3, [r7, #8]
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047dc:	6a39      	ldr	r1, [r7, #32]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f9dc 	bl	8004b9c <I2C_WaitOnTXEFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00d      	beq.n	8004806 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d107      	bne.n	8004802 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004800:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e005      	b.n	8004812 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004806:	893b      	ldrh	r3, [r7, #8]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	00010002 	.word	0x00010002

08004820 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	4608      	mov	r0, r1
 800482a:	4611      	mov	r1, r2
 800482c:	461a      	mov	r2, r3
 800482e:	4603      	mov	r3, r0
 8004830:	817b      	strh	r3, [r7, #10]
 8004832:	460b      	mov	r3, r1
 8004834:	813b      	strh	r3, [r7, #8]
 8004836:	4613      	mov	r3, r2
 8004838:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004848:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004858:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	2200      	movs	r2, #0
 8004862:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f8c2 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00d      	beq.n	800488e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004880:	d103      	bne.n	800488a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004888:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0aa      	b.n	80049e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800488e:	897b      	ldrh	r3, [r7, #10]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	461a      	mov	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800489c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	6a3a      	ldr	r2, [r7, #32]
 80048a2:	4952      	ldr	r1, [pc, #328]	; (80049ec <I2C_RequestMemoryRead+0x1cc>)
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f8fa 	bl	8004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e097      	b.n	80049e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b4:	2300      	movs	r3, #0
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048cc:	6a39      	ldr	r1, [r7, #32]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f964 	bl	8004b9c <I2C_WaitOnTXEFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00d      	beq.n	80048f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d107      	bne.n	80048f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e076      	b.n	80049e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d105      	bne.n	8004908 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048fc:	893b      	ldrh	r3, [r7, #8]
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	611a      	str	r2, [r3, #16]
 8004906:	e021      	b.n	800494c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004908:	893b      	ldrh	r3, [r7, #8]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	b29b      	uxth	r3, r3
 800490e:	b2da      	uxtb	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004918:	6a39      	ldr	r1, [r7, #32]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f93e 	bl	8004b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00d      	beq.n	8004942 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	2b04      	cmp	r3, #4
 800492c:	d107      	bne.n	800493e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e050      	b.n	80049e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004942:	893b      	ldrh	r3, [r7, #8]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800494c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494e:	6a39      	ldr	r1, [r7, #32]
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f923 	bl	8004b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00d      	beq.n	8004978 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	2b04      	cmp	r3, #4
 8004962:	d107      	bne.n	8004974 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004972:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e035      	b.n	80049e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004986:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	2200      	movs	r2, #0
 8004990:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f82b 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00d      	beq.n	80049bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ae:	d103      	bne.n	80049b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e013      	b.n	80049e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049bc:	897b      	ldrh	r3, [r7, #10]
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	6a3a      	ldr	r2, [r7, #32]
 80049d0:	4906      	ldr	r1, [pc, #24]	; (80049ec <I2C_RequestMemoryRead+0x1cc>)
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f863 	bl	8004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	00010002 	.word	0x00010002

080049f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a00:	e025      	b.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d021      	beq.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0a:	f7fd ff25 	bl	8002858 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d302      	bcc.n	8004a20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d116      	bne.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e023      	b.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	0c1b      	lsrs	r3, r3, #16
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d10d      	bne.n	8004a74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	43da      	mvns	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	e00c      	b.n	8004a8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d0b6      	beq.n	8004a02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004aac:	e051      	b.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abc:	d123      	bne.n	8004b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004acc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ad6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f043 0204 	orr.w	r2, r3, #4
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e046      	b.n	8004b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d021      	beq.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0e:	f7fd fea3 	bl	8002858 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d302      	bcc.n	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d116      	bne.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f043 0220 	orr.w	r2, r3, #32
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e020      	b.n	8004b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d10c      	bne.n	8004b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	43da      	mvns	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4013      	ands	r3, r2
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bf14      	ite	ne
 8004b6e:	2301      	movne	r3, #1
 8004b70:	2300      	moveq	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e00b      	b.n	8004b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	43da      	mvns	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d18d      	bne.n	8004aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ba8:	e02d      	b.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f8ce 	bl	8004d4c <I2C_IsAcknowledgeFailed>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e02d      	b.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d021      	beq.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc2:	f7fd fe49 	bl	8002858 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d302      	bcc.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d116      	bne.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f043 0220 	orr.w	r2, r3, #32
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e007      	b.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b80      	cmp	r3, #128	; 0x80
 8004c12:	d1ca      	bne.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c2a:	e02d      	b.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f88d 	bl	8004d4c <I2C_IsAcknowledgeFailed>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e02d      	b.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d021      	beq.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c44:	f7fd fe08 	bl	8002858 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d302      	bcc.n	8004c5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d116      	bne.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	f043 0220 	orr.w	r2, r3, #32
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e007      	b.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d1ca      	bne.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cac:	e042      	b.n	8004d34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d119      	bne.n	8004cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0210 	mvn.w	r2, #16
 8004cc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e029      	b.n	8004d44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf0:	f7fd fdb2 	bl	8002858 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d302      	bcc.n	8004d06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d116      	bne.n	8004d34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f043 0220 	orr.w	r2, r3, #32
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e007      	b.n	8004d44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d1b5      	bne.n	8004cae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d62:	d11b      	bne.n	8004d9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	f043 0204 	orr.w	r2, r3, #4
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e267      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d075      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dca:	4b88      	ldr	r3, [pc, #544]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d00c      	beq.n	8004df0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dd6:	4b85      	ldr	r3, [pc, #532]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d112      	bne.n	8004e08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004de2:	4b82      	ldr	r3, [pc, #520]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dee:	d10b      	bne.n	8004e08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df0:	4b7e      	ldr	r3, [pc, #504]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d05b      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x108>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d157      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e242      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e10:	d106      	bne.n	8004e20 <HAL_RCC_OscConfig+0x74>
 8004e12:	4b76      	ldr	r3, [pc, #472]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a75      	ldr	r2, [pc, #468]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e01d      	b.n	8004e5c <HAL_RCC_OscConfig+0xb0>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x98>
 8004e2a:	4b70      	ldr	r3, [pc, #448]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a6f      	ldr	r2, [pc, #444]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	4b6d      	ldr	r3, [pc, #436]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a6c      	ldr	r2, [pc, #432]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	e00b      	b.n	8004e5c <HAL_RCC_OscConfig+0xb0>
 8004e44:	4b69      	ldr	r3, [pc, #420]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a68      	ldr	r2, [pc, #416]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	4b66      	ldr	r3, [pc, #408]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a65      	ldr	r2, [pc, #404]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d013      	beq.n	8004e8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fd fcf8 	bl	8002858 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e6c:	f7fd fcf4 	bl	8002858 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e207      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7e:	4b5b      	ldr	r3, [pc, #364]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0xc0>
 8004e8a:	e014      	b.n	8004eb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fd fce4 	bl	8002858 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e94:	f7fd fce0 	bl	8002858 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	; 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e1f3      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea6:	4b51      	ldr	r3, [pc, #324]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0xe8>
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d063      	beq.n	8004f8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ec2:	4b4a      	ldr	r3, [pc, #296]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ece:	4b47      	ldr	r3, [pc, #284]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d11c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eda:	4b44      	ldr	r3, [pc, #272]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d116      	bne.n	8004f14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee6:	4b41      	ldr	r3, [pc, #260]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <HAL_RCC_OscConfig+0x152>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d001      	beq.n	8004efe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e1c7      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efe:	4b3b      	ldr	r3, [pc, #236]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4937      	ldr	r1, [pc, #220]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f12:	e03a      	b.n	8004f8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d020      	beq.n	8004f5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f1c:	4b34      	ldr	r3, [pc, #208]	; (8004ff0 <HAL_RCC_OscConfig+0x244>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f22:	f7fd fc99 	bl	8002858 <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f2a:	f7fd fc95 	bl	8002858 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e1a8      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f3c:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0f0      	beq.n	8004f2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f48:	4b28      	ldr	r3, [pc, #160]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4925      	ldr	r1, [pc, #148]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	600b      	str	r3, [r1, #0]
 8004f5c:	e015      	b.n	8004f8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f5e:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <HAL_RCC_OscConfig+0x244>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fd fc78 	bl	8002858 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f6c:	f7fd fc74 	bl	8002858 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e187      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7e:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d036      	beq.n	8005004 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d016      	beq.n	8004fcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f9e:	4b15      	ldr	r3, [pc, #84]	; (8004ff4 <HAL_RCC_OscConfig+0x248>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa4:	f7fd fc58 	bl	8002858 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fac:	f7fd fc54 	bl	8002858 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e167      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fbe:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_RCC_OscConfig+0x240>)
 8004fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0x200>
 8004fca:	e01b      	b.n	8005004 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fcc:	4b09      	ldr	r3, [pc, #36]	; (8004ff4 <HAL_RCC_OscConfig+0x248>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd2:	f7fd fc41 	bl	8002858 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd8:	e00e      	b.n	8004ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fda:	f7fd fc3d 	bl	8002858 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d907      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e150      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	42470000 	.word	0x42470000
 8004ff4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff8:	4b88      	ldr	r3, [pc, #544]	; (800521c <HAL_RCC_OscConfig+0x470>)
 8004ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1ea      	bne.n	8004fda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8097 	beq.w	8005140 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005012:	2300      	movs	r3, #0
 8005014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005016:	4b81      	ldr	r3, [pc, #516]	; (800521c <HAL_RCC_OscConfig+0x470>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10f      	bne.n	8005042 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	4b7d      	ldr	r3, [pc, #500]	; (800521c <HAL_RCC_OscConfig+0x470>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	4a7c      	ldr	r2, [pc, #496]	; (800521c <HAL_RCC_OscConfig+0x470>)
 800502c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005030:	6413      	str	r3, [r2, #64]	; 0x40
 8005032:	4b7a      	ldr	r3, [pc, #488]	; (800521c <HAL_RCC_OscConfig+0x470>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800503e:	2301      	movs	r3, #1
 8005040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005042:	4b77      	ldr	r3, [pc, #476]	; (8005220 <HAL_RCC_OscConfig+0x474>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d118      	bne.n	8005080 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800504e:	4b74      	ldr	r3, [pc, #464]	; (8005220 <HAL_RCC_OscConfig+0x474>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a73      	ldr	r2, [pc, #460]	; (8005220 <HAL_RCC_OscConfig+0x474>)
 8005054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800505a:	f7fd fbfd 	bl	8002858 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005062:	f7fd fbf9 	bl	8002858 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e10c      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005074:	4b6a      	ldr	r3, [pc, #424]	; (8005220 <HAL_RCC_OscConfig+0x474>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0f0      	beq.n	8005062 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d106      	bne.n	8005096 <HAL_RCC_OscConfig+0x2ea>
 8005088:	4b64      	ldr	r3, [pc, #400]	; (800521c <HAL_RCC_OscConfig+0x470>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508c:	4a63      	ldr	r2, [pc, #396]	; (800521c <HAL_RCC_OscConfig+0x470>)
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	6713      	str	r3, [r2, #112]	; 0x70
 8005094:	e01c      	b.n	80050d0 <HAL_RCC_OscConfig+0x324>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b05      	cmp	r3, #5
 800509c:	d10c      	bne.n	80050b8 <HAL_RCC_OscConfig+0x30c>
 800509e:	4b5f      	ldr	r3, [pc, #380]	; (800521c <HAL_RCC_OscConfig+0x470>)
 80050a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a2:	4a5e      	ldr	r2, [pc, #376]	; (800521c <HAL_RCC_OscConfig+0x470>)
 80050a4:	f043 0304 	orr.w	r3, r3, #4
 80050a8:	6713      	str	r3, [r2, #112]	; 0x70
 80050aa:	4b5c      	ldr	r3, [pc, #368]	; (800521c <HAL_RCC_OscConfig+0x470>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	4a5b      	ldr	r2, [pc, #364]	; (800521c <HAL_RCC_OscConfig+0x470>)
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6713      	str	r3, [r2, #112]	; 0x70
 80050b6:	e00b      	b.n	80050d0 <HAL_RCC_OscConfig+0x324>
 80050b8:	4b58      	ldr	r3, [pc, #352]	; (800521c <HAL_RCC_OscConfig+0x470>)
 80050ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050bc:	4a57      	ldr	r2, [pc, #348]	; (800521c <HAL_RCC_OscConfig+0x470>)
 80050be:	f023 0301 	bic.w	r3, r3, #1
 80050c2:	6713      	str	r3, [r2, #112]	; 0x70
 80050c4:	4b55      	ldr	r3, [pc, #340]	; (800521c <HAL_RCC_OscConfig+0x470>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	4a54      	ldr	r2, [pc, #336]	; (800521c <HAL_RCC_OscConfig+0x470>)
 80050ca:	f023 0304 	bic.w	r3, r3, #4
 80050ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d015      	beq.n	8005104 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fd fbbe 	bl	8002858 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e0:	f7fd fbba 	bl	8002858 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e0cb      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f6:	4b49      	ldr	r3, [pc, #292]	; (800521c <HAL_RCC_OscConfig+0x470>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0ee      	beq.n	80050e0 <HAL_RCC_OscConfig+0x334>
 8005102:	e014      	b.n	800512e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005104:	f7fd fba8 	bl	8002858 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800510a:	e00a      	b.n	8005122 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800510c:	f7fd fba4 	bl	8002858 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e0b5      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005122:	4b3e      	ldr	r3, [pc, #248]	; (800521c <HAL_RCC_OscConfig+0x470>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1ee      	bne.n	800510c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800512e:	7dfb      	ldrb	r3, [r7, #23]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d105      	bne.n	8005140 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005134:	4b39      	ldr	r3, [pc, #228]	; (800521c <HAL_RCC_OscConfig+0x470>)
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	4a38      	ldr	r2, [pc, #224]	; (800521c <HAL_RCC_OscConfig+0x470>)
 800513a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800513e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80a1 	beq.w	800528c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800514a:	4b34      	ldr	r3, [pc, #208]	; (800521c <HAL_RCC_OscConfig+0x470>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	2b08      	cmp	r3, #8
 8005154:	d05c      	beq.n	8005210 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d141      	bne.n	80051e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515e:	4b31      	ldr	r3, [pc, #196]	; (8005224 <HAL_RCC_OscConfig+0x478>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005164:	f7fd fb78 	bl	8002858 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800516c:	f7fd fb74 	bl	8002858 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e087      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517e:	4b27      	ldr	r3, [pc, #156]	; (800521c <HAL_RCC_OscConfig+0x470>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	3b01      	subs	r3, #1
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	061b      	lsls	r3, r3, #24
 80051ae:	491b      	ldr	r1, [pc, #108]	; (800521c <HAL_RCC_OscConfig+0x470>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051b4:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <HAL_RCC_OscConfig+0x478>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ba:	f7fd fb4d 	bl	8002858 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c2:	f7fd fb49 	bl	8002858 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e05c      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d4:	4b11      	ldr	r3, [pc, #68]	; (800521c <HAL_RCC_OscConfig+0x470>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCC_OscConfig+0x416>
 80051e0:	e054      	b.n	800528c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e2:	4b10      	ldr	r3, [pc, #64]	; (8005224 <HAL_RCC_OscConfig+0x478>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fd fb36 	bl	8002858 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fd fb32 	bl	8002858 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e045      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <HAL_RCC_OscConfig+0x470>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x444>
 800520e:	e03d      	b.n	800528c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d107      	bne.n	8005228 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e038      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
 800521c:	40023800 	.word	0x40023800
 8005220:	40007000 	.word	0x40007000
 8005224:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005228:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <HAL_RCC_OscConfig+0x4ec>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d028      	beq.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005240:	429a      	cmp	r2, r3
 8005242:	d121      	bne.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524e:	429a      	cmp	r2, r3
 8005250:	d11a      	bne.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005258:	4013      	ands	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800525e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005260:	4293      	cmp	r3, r2
 8005262:	d111      	bne.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	3b01      	subs	r3, #1
 8005272:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005274:	429a      	cmp	r2, r3
 8005276:	d107      	bne.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005284:	429a      	cmp	r2, r3
 8005286:	d001      	beq.n	800528c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40023800 	.word	0x40023800

0800529c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0cc      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052b0:	4b68      	ldr	r3, [pc, #416]	; (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d90c      	bls.n	80052d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b65      	ldr	r3, [pc, #404]	; (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c6:	4b63      	ldr	r3, [pc, #396]	; (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0b8      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d020      	beq.n	8005326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f0:	4b59      	ldr	r3, [pc, #356]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	4a58      	ldr	r2, [pc, #352]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005308:	4b53      	ldr	r3, [pc, #332]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	4a52      	ldr	r2, [pc, #328]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005314:	4b50      	ldr	r3, [pc, #320]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	494d      	ldr	r1, [pc, #308]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	4313      	orrs	r3, r2
 8005324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d044      	beq.n	80053bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d107      	bne.n	800534a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533a:	4b47      	ldr	r3, [pc, #284]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d119      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e07f      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d003      	beq.n	800535a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005356:	2b03      	cmp	r3, #3
 8005358:	d107      	bne.n	800536a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535a:	4b3f      	ldr	r3, [pc, #252]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e06f      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536a:	4b3b      	ldr	r3, [pc, #236]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e067      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800537a:	4b37      	ldr	r3, [pc, #220]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f023 0203 	bic.w	r2, r3, #3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4934      	ldr	r1, [pc, #208]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 8005388:	4313      	orrs	r3, r2
 800538a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800538c:	f7fd fa64 	bl	8002858 <HAL_GetTick>
 8005390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005392:	e00a      	b.n	80053aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005394:	f7fd fa60 	bl	8002858 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e04f      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053aa:	4b2b      	ldr	r3, [pc, #172]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 020c 	and.w	r2, r3, #12
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1eb      	bne.n	8005394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053bc:	4b25      	ldr	r3, [pc, #148]	; (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d20c      	bcs.n	80053e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ca:	4b22      	ldr	r3, [pc, #136]	; (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d2:	4b20      	ldr	r3, [pc, #128]	; (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d001      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e032      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f0:	4b19      	ldr	r3, [pc, #100]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4916      	ldr	r1, [pc, #88]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800540e:	4b12      	ldr	r3, [pc, #72]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	490e      	ldr	r1, [pc, #56]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005422:	f000 f821 	bl	8005468 <HAL_RCC_GetSysClockFreq>
 8005426:	4602      	mov	r2, r0
 8005428:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	490a      	ldr	r1, [pc, #40]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 8005434:	5ccb      	ldrb	r3, [r1, r3]
 8005436:	fa22 f303 	lsr.w	r3, r2, r3
 800543a:	4a09      	ldr	r2, [pc, #36]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800543c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <HAL_RCC_ClockConfig+0x1c8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f7fc f856 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40023c00 	.word	0x40023c00
 8005458:	40023800 	.word	0x40023800
 800545c:	08007650 	.word	0x08007650
 8005460:	20000000 	.word	0x20000000
 8005464:	20000004 	.word	0x20000004

08005468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800546c:	b090      	sub	sp, #64	; 0x40
 800546e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
 8005474:	2300      	movs	r3, #0
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005478:	2300      	movs	r3, #0
 800547a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005480:	4b59      	ldr	r3, [pc, #356]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 030c 	and.w	r3, r3, #12
 8005488:	2b08      	cmp	r3, #8
 800548a:	d00d      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0x40>
 800548c:	2b08      	cmp	r3, #8
 800548e:	f200 80a1 	bhi.w	80055d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0x34>
 8005496:	2b04      	cmp	r3, #4
 8005498:	d003      	beq.n	80054a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800549a:	e09b      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800549c:	4b53      	ldr	r3, [pc, #332]	; (80055ec <HAL_RCC_GetSysClockFreq+0x184>)
 800549e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80054a0:	e09b      	b.n	80055da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054a2:	4b53      	ldr	r3, [pc, #332]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80054a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054a6:	e098      	b.n	80055da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054a8:	4b4f      	ldr	r3, [pc, #316]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054b2:	4b4d      	ldr	r3, [pc, #308]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d028      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054be:	4b4a      	ldr	r3, [pc, #296]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	099b      	lsrs	r3, r3, #6
 80054c4:	2200      	movs	r2, #0
 80054c6:	623b      	str	r3, [r7, #32]
 80054c8:	627a      	str	r2, [r7, #36]	; 0x24
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80054d0:	2100      	movs	r1, #0
 80054d2:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80054d4:	fb03 f201 	mul.w	r2, r3, r1
 80054d8:	2300      	movs	r3, #0
 80054da:	fb00 f303 	mul.w	r3, r0, r3
 80054de:	4413      	add	r3, r2
 80054e0:	4a43      	ldr	r2, [pc, #268]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80054e2:	fba0 1202 	umull	r1, r2, r0, r2
 80054e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054e8:	460a      	mov	r2, r1
 80054ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80054ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ee:	4413      	add	r3, r2
 80054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	2200      	movs	r2, #0
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	61fa      	str	r2, [r7, #28]
 80054fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005502:	f7fa fe61 	bl	80001c8 <__aeabi_uldivmod>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4613      	mov	r3, r2
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800550e:	e053      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005510:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	099b      	lsrs	r3, r3, #6
 8005516:	2200      	movs	r2, #0
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	617a      	str	r2, [r7, #20]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005522:	f04f 0b00 	mov.w	fp, #0
 8005526:	4652      	mov	r2, sl
 8005528:	465b      	mov	r3, fp
 800552a:	f04f 0000 	mov.w	r0, #0
 800552e:	f04f 0100 	mov.w	r1, #0
 8005532:	0159      	lsls	r1, r3, #5
 8005534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005538:	0150      	lsls	r0, r2, #5
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	ebb2 080a 	subs.w	r8, r2, sl
 8005542:	eb63 090b 	sbc.w	r9, r3, fp
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005552:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005556:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800555a:	ebb2 0408 	subs.w	r4, r2, r8
 800555e:	eb63 0509 	sbc.w	r5, r3, r9
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	00eb      	lsls	r3, r5, #3
 800556c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005570:	00e2      	lsls	r2, r4, #3
 8005572:	4614      	mov	r4, r2
 8005574:	461d      	mov	r5, r3
 8005576:	eb14 030a 	adds.w	r3, r4, sl
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	eb45 030b 	adc.w	r3, r5, fp
 8005580:	607b      	str	r3, [r7, #4]
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800558e:	4629      	mov	r1, r5
 8005590:	028b      	lsls	r3, r1, #10
 8005592:	4621      	mov	r1, r4
 8005594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005598:	4621      	mov	r1, r4
 800559a:	028a      	lsls	r2, r1, #10
 800559c:	4610      	mov	r0, r2
 800559e:	4619      	mov	r1, r3
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	2200      	movs	r2, #0
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	60fa      	str	r2, [r7, #12]
 80055a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055ac:	f7fa fe0c 	bl	80001c8 <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4613      	mov	r3, r2
 80055b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	3301      	adds	r3, #1
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80055c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055d2:	e002      	b.n	80055da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055d4:	4b05      	ldr	r3, [pc, #20]	; (80055ec <HAL_RCC_GetSysClockFreq+0x184>)
 80055d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3740      	adds	r7, #64	; 0x40
 80055e0:	46bd      	mov	sp, r7
 80055e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055e6:	bf00      	nop
 80055e8:	40023800 	.word	0x40023800
 80055ec:	00f42400 	.word	0x00f42400
 80055f0:	017d7840 	.word	0x017d7840

080055f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <HAL_RCC_GetHCLKFreq+0x14>)
 80055fa:	681b      	ldr	r3, [r3, #0]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20000000 	.word	0x20000000

0800560c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005610:	f7ff fff0 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8005614:	4602      	mov	r2, r0
 8005616:	4b05      	ldr	r3, [pc, #20]	; (800562c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	0a9b      	lsrs	r3, r3, #10
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	4903      	ldr	r1, [pc, #12]	; (8005630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005622:	5ccb      	ldrb	r3, [r1, r3]
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005628:	4618      	mov	r0, r3
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40023800 	.word	0x40023800
 8005630:	08007660 	.word	0x08007660

08005634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005638:	f7ff ffdc 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 800563c:	4602      	mov	r2, r0
 800563e:	4b05      	ldr	r3, [pc, #20]	; (8005654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	0b5b      	lsrs	r3, r3, #13
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	4903      	ldr	r1, [pc, #12]	; (8005658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800564a:	5ccb      	ldrb	r3, [r1, r3]
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005650:	4618      	mov	r0, r3
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40023800 	.word	0x40023800
 8005658:	08007660 	.word	0x08007660

0800565c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	220f      	movs	r2, #15
 800566a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800566c:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <HAL_RCC_GetClockConfig+0x5c>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0203 	and.w	r2, r3, #3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005678:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <HAL_RCC_GetClockConfig+0x5c>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005684:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005690:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	08db      	lsrs	r3, r3, #3
 8005696:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800569e:	4b07      	ldr	r3, [pc, #28]	; (80056bc <HAL_RCC_GetClockConfig+0x60>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0207 	and.w	r2, r3, #7
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	601a      	str	r2, [r3, #0]
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40023800 	.word	0x40023800
 80056bc:	40023c00 	.word	0x40023c00

080056c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e07b      	b.n	80057ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d108      	bne.n	80056ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056e2:	d009      	beq.n	80056f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	61da      	str	r2, [r3, #28]
 80056ea:	e005      	b.n	80056f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fb fe7e 	bl	8001414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800572e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577c:	ea42 0103 	orr.w	r1, r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005784:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	f003 0104 	and.w	r1, r3, #4
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	f003 0210 	and.w	r2, r3, #16
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e041      	b.n	8005868 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d106      	bne.n	80057fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7fc f9ff 	bl	8001bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	3304      	adds	r3, #4
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f000 fc19 	bl	8006048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	d001      	beq.n	8005888 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e046      	b.n	8005916 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a23      	ldr	r2, [pc, #140]	; (8005924 <HAL_TIM_Base_Start+0xb4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d022      	beq.n	80058e0 <HAL_TIM_Base_Start+0x70>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a2:	d01d      	beq.n	80058e0 <HAL_TIM_Base_Start+0x70>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a1f      	ldr	r2, [pc, #124]	; (8005928 <HAL_TIM_Base_Start+0xb8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d018      	beq.n	80058e0 <HAL_TIM_Base_Start+0x70>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1e      	ldr	r2, [pc, #120]	; (800592c <HAL_TIM_Base_Start+0xbc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <HAL_TIM_Base_Start+0x70>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <HAL_TIM_Base_Start+0xc0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00e      	beq.n	80058e0 <HAL_TIM_Base_Start+0x70>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1b      	ldr	r2, [pc, #108]	; (8005934 <HAL_TIM_Base_Start+0xc4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_TIM_Base_Start+0x70>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a19      	ldr	r2, [pc, #100]	; (8005938 <HAL_TIM_Base_Start+0xc8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_TIM_Base_Start+0x70>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a18      	ldr	r2, [pc, #96]	; (800593c <HAL_TIM_Base_Start+0xcc>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d111      	bne.n	8005904 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b06      	cmp	r3, #6
 80058f0:	d010      	beq.n	8005914 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	e007      	b.n	8005914 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40010000 	.word	0x40010000
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40000c00 	.word	0x40000c00
 8005934:	40010400 	.word	0x40010400
 8005938:	40014000 	.word	0x40014000
 800593c:	40001800 	.word	0x40001800

08005940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d001      	beq.n	8005958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e04e      	b.n	80059f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a23      	ldr	r2, [pc, #140]	; (8005a04 <HAL_TIM_Base_Start_IT+0xc4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d022      	beq.n	80059c0 <HAL_TIM_Base_Start_IT+0x80>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005982:	d01d      	beq.n	80059c0 <HAL_TIM_Base_Start_IT+0x80>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1f      	ldr	r2, [pc, #124]	; (8005a08 <HAL_TIM_Base_Start_IT+0xc8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d018      	beq.n	80059c0 <HAL_TIM_Base_Start_IT+0x80>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1e      	ldr	r2, [pc, #120]	; (8005a0c <HAL_TIM_Base_Start_IT+0xcc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d013      	beq.n	80059c0 <HAL_TIM_Base_Start_IT+0x80>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1c      	ldr	r2, [pc, #112]	; (8005a10 <HAL_TIM_Base_Start_IT+0xd0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00e      	beq.n	80059c0 <HAL_TIM_Base_Start_IT+0x80>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1b      	ldr	r2, [pc, #108]	; (8005a14 <HAL_TIM_Base_Start_IT+0xd4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d009      	beq.n	80059c0 <HAL_TIM_Base_Start_IT+0x80>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a19      	ldr	r2, [pc, #100]	; (8005a18 <HAL_TIM_Base_Start_IT+0xd8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d004      	beq.n	80059c0 <HAL_TIM_Base_Start_IT+0x80>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a18      	ldr	r2, [pc, #96]	; (8005a1c <HAL_TIM_Base_Start_IT+0xdc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d111      	bne.n	80059e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b06      	cmp	r3, #6
 80059d0:	d010      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e2:	e007      	b.n	80059f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40010000 	.word	0x40010000
 8005a08:	40000400 	.word	0x40000400
 8005a0c:	40000800 	.word	0x40000800
 8005a10:	40000c00 	.word	0x40000c00
 8005a14:	40010400 	.word	0x40010400
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	40001800 	.word	0x40001800

08005a20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e041      	b.n	8005ab6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f839 	bl	8005abe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4610      	mov	r0, r2
 8005a60:	f000 faf2 	bl	8006048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d122      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d11b      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f06f 0202 	mvn.w	r2, #2
 8005afe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fa78 	bl	800600a <HAL_TIM_IC_CaptureCallback>
 8005b1a:	e005      	b.n	8005b28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fa6a 	bl	8005ff6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fa7b 	bl	800601e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d122      	bne.n	8005b82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d11b      	bne.n	8005b82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f06f 0204 	mvn.w	r2, #4
 8005b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fa4e 	bl	800600a <HAL_TIM_IC_CaptureCallback>
 8005b6e:	e005      	b.n	8005b7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fa40 	bl	8005ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fa51 	bl	800601e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d122      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d11b      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f06f 0208 	mvn.w	r2, #8
 8005ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2204      	movs	r2, #4
 8005bac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fa24 	bl	800600a <HAL_TIM_IC_CaptureCallback>
 8005bc2:	e005      	b.n	8005bd0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fa16 	bl	8005ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa27 	bl	800601e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d122      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d11b      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f06f 0210 	mvn.w	r2, #16
 8005bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2208      	movs	r2, #8
 8005c00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f9fa 	bl	800600a <HAL_TIM_IC_CaptureCallback>
 8005c16:	e005      	b.n	8005c24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f9ec 	bl	8005ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f9fd 	bl	800601e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d10e      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d107      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f06f 0201 	mvn.w	r2, #1
 8005c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7fb fb95 	bl	8001380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c60:	2b80      	cmp	r3, #128	; 0x80
 8005c62:	d10e      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b80      	cmp	r3, #128	; 0x80
 8005c70:	d107      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fda5 	bl	80067cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d10e      	bne.n	8005cae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d107      	bne.n	8005cae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f9c2 	bl	8006032 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d10e      	bne.n	8005cda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d107      	bne.n	8005cda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0220 	mvn.w	r2, #32
 8005cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fd6f 	bl	80067b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e0ae      	b.n	8005e60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b0c      	cmp	r3, #12
 8005d0e:	f200 809f 	bhi.w	8005e50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d12:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d4d 	.word	0x08005d4d
 8005d1c:	08005e51 	.word	0x08005e51
 8005d20:	08005e51 	.word	0x08005e51
 8005d24:	08005e51 	.word	0x08005e51
 8005d28:	08005d8d 	.word	0x08005d8d
 8005d2c:	08005e51 	.word	0x08005e51
 8005d30:	08005e51 	.word	0x08005e51
 8005d34:	08005e51 	.word	0x08005e51
 8005d38:	08005dcf 	.word	0x08005dcf
 8005d3c:	08005e51 	.word	0x08005e51
 8005d40:	08005e51 	.word	0x08005e51
 8005d44:	08005e51 	.word	0x08005e51
 8005d48:	08005e0f 	.word	0x08005e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fa18 	bl	8006188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0208 	orr.w	r2, r2, #8
 8005d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0204 	bic.w	r2, r2, #4
 8005d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6999      	ldr	r1, [r3, #24]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	619a      	str	r2, [r3, #24]
      break;
 8005d8a:	e064      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fa68 	bl	8006268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6999      	ldr	r1, [r3, #24]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	021a      	lsls	r2, r3, #8
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	619a      	str	r2, [r3, #24]
      break;
 8005dcc:	e043      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68b9      	ldr	r1, [r7, #8]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fabd 	bl	8006354 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0208 	orr.w	r2, r2, #8
 8005de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0204 	bic.w	r2, r2, #4
 8005df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69d9      	ldr	r1, [r3, #28]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	61da      	str	r2, [r3, #28]
      break;
 8005e0c:	e023      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fb11 	bl	800643c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69da      	ldr	r2, [r3, #28]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69d9      	ldr	r1, [r3, #28]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	021a      	lsls	r2, r3, #8
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	61da      	str	r2, [r3, #28]
      break;
 8005e4e:	e002      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	75fb      	strb	r3, [r7, #23]
      break;
 8005e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_TIM_ConfigClockSource+0x1c>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e0b4      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x186>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ebc:	d03e      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0xd4>
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec2:	f200 8087 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eca:	f000 8086 	beq.w	8005fda <HAL_TIM_ConfigClockSource+0x172>
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed2:	d87f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	2b70      	cmp	r3, #112	; 0x70
 8005ed6:	d01a      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0xa6>
 8005ed8:	2b70      	cmp	r3, #112	; 0x70
 8005eda:	d87b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005edc:	2b60      	cmp	r3, #96	; 0x60
 8005ede:	d050      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x11a>
 8005ee0:	2b60      	cmp	r3, #96	; 0x60
 8005ee2:	d877      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b50      	cmp	r3, #80	; 0x50
 8005ee6:	d03c      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0xfa>
 8005ee8:	2b50      	cmp	r3, #80	; 0x50
 8005eea:	d873      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d058      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	d86f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b30      	cmp	r3, #48	; 0x30
 8005ef6:	d064      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ef8:	2b30      	cmp	r3, #48	; 0x30
 8005efa:	d86b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d060      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d867      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d05c      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d05a      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f0c:	e062      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6899      	ldr	r1, [r3, #8]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f000 fb5d 	bl	80065dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	609a      	str	r2, [r3, #8]
      break;
 8005f3a:	e04f      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	6899      	ldr	r1, [r3, #8]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f000 fb46 	bl	80065dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f5e:	609a      	str	r2, [r3, #8]
      break;
 8005f60:	e03c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f000 faba 	bl	80064e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2150      	movs	r1, #80	; 0x50
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fb13 	bl	80065a6 <TIM_ITRx_SetConfig>
      break;
 8005f80:	e02c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f000 fad9 	bl	8006546 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2160      	movs	r1, #96	; 0x60
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fb03 	bl	80065a6 <TIM_ITRx_SetConfig>
      break;
 8005fa0:	e01c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6859      	ldr	r1, [r3, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f000 fa9a 	bl	80064e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2140      	movs	r1, #64	; 0x40
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 faf3 	bl	80065a6 <TIM_ITRx_SetConfig>
      break;
 8005fc0:	e00c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f000 faea 	bl	80065a6 <TIM_ITRx_SetConfig>
      break;
 8005fd2:	e003      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd8:	e000      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
	...

08006048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a40      	ldr	r2, [pc, #256]	; (800615c <TIM_Base_SetConfig+0x114>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d013      	beq.n	8006088 <TIM_Base_SetConfig+0x40>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006066:	d00f      	beq.n	8006088 <TIM_Base_SetConfig+0x40>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a3d      	ldr	r2, [pc, #244]	; (8006160 <TIM_Base_SetConfig+0x118>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00b      	beq.n	8006088 <TIM_Base_SetConfig+0x40>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a3c      	ldr	r2, [pc, #240]	; (8006164 <TIM_Base_SetConfig+0x11c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d007      	beq.n	8006088 <TIM_Base_SetConfig+0x40>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a3b      	ldr	r2, [pc, #236]	; (8006168 <TIM_Base_SetConfig+0x120>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_Base_SetConfig+0x40>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a3a      	ldr	r2, [pc, #232]	; (800616c <TIM_Base_SetConfig+0x124>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d108      	bne.n	800609a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a2f      	ldr	r2, [pc, #188]	; (800615c <TIM_Base_SetConfig+0x114>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d02b      	beq.n	80060fa <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a8:	d027      	beq.n	80060fa <TIM_Base_SetConfig+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a2c      	ldr	r2, [pc, #176]	; (8006160 <TIM_Base_SetConfig+0x118>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d023      	beq.n	80060fa <TIM_Base_SetConfig+0xb2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a2b      	ldr	r2, [pc, #172]	; (8006164 <TIM_Base_SetConfig+0x11c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d01f      	beq.n	80060fa <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a2a      	ldr	r2, [pc, #168]	; (8006168 <TIM_Base_SetConfig+0x120>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d01b      	beq.n	80060fa <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a29      	ldr	r2, [pc, #164]	; (800616c <TIM_Base_SetConfig+0x124>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d017      	beq.n	80060fa <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a28      	ldr	r2, [pc, #160]	; (8006170 <TIM_Base_SetConfig+0x128>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d013      	beq.n	80060fa <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a27      	ldr	r2, [pc, #156]	; (8006174 <TIM_Base_SetConfig+0x12c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00f      	beq.n	80060fa <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a26      	ldr	r2, [pc, #152]	; (8006178 <TIM_Base_SetConfig+0x130>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00b      	beq.n	80060fa <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a25      	ldr	r2, [pc, #148]	; (800617c <TIM_Base_SetConfig+0x134>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d007      	beq.n	80060fa <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a24      	ldr	r2, [pc, #144]	; (8006180 <TIM_Base_SetConfig+0x138>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d003      	beq.n	80060fa <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a23      	ldr	r2, [pc, #140]	; (8006184 <TIM_Base_SetConfig+0x13c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d108      	bne.n	800610c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a0a      	ldr	r2, [pc, #40]	; (800615c <TIM_Base_SetConfig+0x114>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d003      	beq.n	8006140 <TIM_Base_SetConfig+0xf8>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a0c      	ldr	r2, [pc, #48]	; (800616c <TIM_Base_SetConfig+0x124>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d103      	bne.n	8006148 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	615a      	str	r2, [r3, #20]
}
 800614e:	bf00      	nop
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40010000 	.word	0x40010000
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40000c00 	.word	0x40000c00
 800616c:	40010400 	.word	0x40010400
 8006170:	40014000 	.word	0x40014000
 8006174:	40014400 	.word	0x40014400
 8006178:	40014800 	.word	0x40014800
 800617c:	40001800 	.word	0x40001800
 8006180:	40001c00 	.word	0x40001c00
 8006184:	40002000 	.word	0x40002000

08006188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	f023 0201 	bic.w	r2, r3, #1
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0303 	bic.w	r3, r3, #3
 80061be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 0302 	bic.w	r3, r3, #2
 80061d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a20      	ldr	r2, [pc, #128]	; (8006260 <TIM_OC1_SetConfig+0xd8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_OC1_SetConfig+0x64>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a1f      	ldr	r2, [pc, #124]	; (8006264 <TIM_OC1_SetConfig+0xdc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d10c      	bne.n	8006206 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0308 	bic.w	r3, r3, #8
 80061f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f023 0304 	bic.w	r3, r3, #4
 8006204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a15      	ldr	r2, [pc, #84]	; (8006260 <TIM_OC1_SetConfig+0xd8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_OC1_SetConfig+0x8e>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a14      	ldr	r2, [pc, #80]	; (8006264 <TIM_OC1_SetConfig+0xdc>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d111      	bne.n	800623a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800621c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	621a      	str	r2, [r3, #32]
}
 8006254:	bf00      	nop
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	40010000 	.word	0x40010000
 8006264:	40010400 	.word	0x40010400

08006268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f023 0210 	bic.w	r2, r3, #16
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f023 0320 	bic.w	r3, r3, #32
 80062b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a22      	ldr	r2, [pc, #136]	; (800634c <TIM_OC2_SetConfig+0xe4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d003      	beq.n	80062d0 <TIM_OC2_SetConfig+0x68>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a21      	ldr	r2, [pc, #132]	; (8006350 <TIM_OC2_SetConfig+0xe8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10d      	bne.n	80062ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a17      	ldr	r2, [pc, #92]	; (800634c <TIM_OC2_SetConfig+0xe4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d003      	beq.n	80062fc <TIM_OC2_SetConfig+0x94>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a16      	ldr	r2, [pc, #88]	; (8006350 <TIM_OC2_SetConfig+0xe8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d113      	bne.n	8006324 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006302:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800630a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	621a      	str	r2, [r3, #32]
}
 800633e:	bf00      	nop
 8006340:	371c      	adds	r7, #28
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400

08006354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0303 	bic.w	r3, r3, #3
 800638a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800639c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a21      	ldr	r2, [pc, #132]	; (8006434 <TIM_OC3_SetConfig+0xe0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d003      	beq.n	80063ba <TIM_OC3_SetConfig+0x66>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a20      	ldr	r2, [pc, #128]	; (8006438 <TIM_OC3_SetConfig+0xe4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d10d      	bne.n	80063d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	021b      	lsls	r3, r3, #8
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a16      	ldr	r2, [pc, #88]	; (8006434 <TIM_OC3_SetConfig+0xe0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d003      	beq.n	80063e6 <TIM_OC3_SetConfig+0x92>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a15      	ldr	r2, [pc, #84]	; (8006438 <TIM_OC3_SetConfig+0xe4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d113      	bne.n	800640e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	621a      	str	r2, [r3, #32]
}
 8006428:	bf00      	nop
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	40010000 	.word	0x40010000
 8006438:	40010400 	.word	0x40010400

0800643c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	021b      	lsls	r3, r3, #8
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4313      	orrs	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	031b      	lsls	r3, r3, #12
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a12      	ldr	r2, [pc, #72]	; (80064e0 <TIM_OC4_SetConfig+0xa4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_OC4_SetConfig+0x68>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a11      	ldr	r2, [pc, #68]	; (80064e4 <TIM_OC4_SetConfig+0xa8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d109      	bne.n	80064b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	019b      	lsls	r3, r3, #6
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	621a      	str	r2, [r3, #32]
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	40010000 	.word	0x40010000
 80064e4:	40010400 	.word	0x40010400

080064e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	f023 0201 	bic.w	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f023 030a 	bic.w	r3, r3, #10
 8006524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4313      	orrs	r3, r2
 800652c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	621a      	str	r2, [r3, #32]
}
 800653a:	bf00      	nop
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006546:	b480      	push	{r7}
 8006548:	b087      	sub	sp, #28
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	f023 0210 	bic.w	r2, r3, #16
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	031b      	lsls	r3, r3, #12
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006582:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	bf00      	nop
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f043 0307 	orr.w	r3, r3, #7
 80065c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	609a      	str	r2, [r3, #8]
}
 80065d0:	bf00      	nop
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	021a      	lsls	r2, r3, #8
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	431a      	orrs	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4313      	orrs	r3, r2
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	609a      	str	r2, [r3, #8]
}
 8006610:	bf00      	nop
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006630:	2302      	movs	r3, #2
 8006632:	e05a      	b.n	80066ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a21      	ldr	r2, [pc, #132]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d022      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006680:	d01d      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1d      	ldr	r2, [pc, #116]	; (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d018      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1b      	ldr	r2, [pc, #108]	; (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a1a      	ldr	r2, [pc, #104]	; (8006704 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00e      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a18      	ldr	r2, [pc, #96]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d009      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a17      	ldr	r2, [pc, #92]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d004      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a15      	ldr	r2, [pc, #84]	; (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d10c      	bne.n	80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40010000 	.word	0x40010000
 80066fc:	40000400 	.word	0x40000400
 8006700:	40000800 	.word	0x40000800
 8006704:	40000c00 	.word	0x40000c00
 8006708:	40010400 	.word	0x40010400
 800670c:	40014000 	.word	0x40014000
 8006710:	40001800 	.word	0x40001800

08006714 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800672c:	2302      	movs	r3, #2
 800672e:	e03d      	b.n	80067ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4313      	orrs	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e03f      	b.n	8006872 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d106      	bne.n	800680c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7fb fbbc 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2224      	movs	r2, #36	; 0x24
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006822:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fc67 	bl	80070f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006838:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695a      	ldr	r2, [r3, #20]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006848:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006858:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b0ba      	sub	sp, #232	; 0xe8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80068ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10f      	bne.n	80068e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <HAL_UART_IRQHandler+0x66>
 80068ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fb51 	bl	8006f82 <UART_Receive_IT>
      return;
 80068e0:	e256      	b.n	8006d90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 80de 	beq.w	8006aa8 <HAL_UART_IRQHandler+0x22c>
 80068ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d106      	bne.n	8006906 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80d1 	beq.w	8006aa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <HAL_UART_IRQHandler+0xae>
 8006912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f043 0201 	orr.w	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800692a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00b      	beq.n	800694e <HAL_UART_IRQHandler+0xd2>
 8006936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f043 0202 	orr.w	r2, r3, #2
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800694e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00b      	beq.n	8006972 <HAL_UART_IRQHandler+0xf6>
 800695a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f043 0204 	orr.w	r2, r3, #4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006976:	f003 0308 	and.w	r3, r3, #8
 800697a:	2b00      	cmp	r3, #0
 800697c:	d011      	beq.n	80069a2 <HAL_UART_IRQHandler+0x126>
 800697e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b00      	cmp	r3, #0
 8006988:	d105      	bne.n	8006996 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800698a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	f043 0208 	orr.w	r2, r3, #8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 81ed 	beq.w	8006d86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <HAL_UART_IRQHandler+0x14e>
 80069b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fadc 	bl	8006f82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	bf0c      	ite	eq
 80069d8:	2301      	moveq	r3, #1
 80069da:	2300      	movne	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d103      	bne.n	80069f6 <HAL_UART_IRQHandler+0x17a>
 80069ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d04f      	beq.n	8006a96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f9e4 	bl	8006dc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a06:	2b40      	cmp	r3, #64	; 0x40
 8006a08:	d141      	bne.n	8006a8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3314      	adds	r3, #20
 8006a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3314      	adds	r3, #20
 8006a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1d9      	bne.n	8006a0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d013      	beq.n	8006a86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a62:	4a7d      	ldr	r2, [pc, #500]	; (8006c58 <HAL_UART_IRQHandler+0x3dc>)
 8006a64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fc fc82 	bl	8003374 <HAL_DMA_Abort_IT>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d016      	beq.n	8006aa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a80:	4610      	mov	r0, r2
 8006a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a84:	e00e      	b.n	8006aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f986 	bl	8006d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	e00a      	b.n	8006aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f982 	bl	8006d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a94:	e006      	b.n	8006aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f97e 	bl	8006d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006aa2:	e170      	b.n	8006d86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	bf00      	nop
    return;
 8006aa6:	e16e      	b.n	8006d86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	f040 814a 	bne.w	8006d46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab6:	f003 0310 	and.w	r3, r3, #16
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 8143 	beq.w	8006d46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac4:	f003 0310 	and.w	r3, r3, #16
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 813c 	beq.w	8006d46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60bb      	str	r3, [r7, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	60bb      	str	r3, [r7, #8]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	f040 80b4 	bne.w	8006c5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8140 	beq.w	8006d8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b12:	429a      	cmp	r2, r3
 8006b14:	f080 8139 	bcs.w	8006d8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b2a:	f000 8088 	beq.w	8006c3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	330c      	adds	r3, #12
 8006b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1d9      	bne.n	8006b2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3314      	adds	r3, #20
 8006b80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3314      	adds	r3, #20
 8006b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ba6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e1      	bne.n	8006b7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3314      	adds	r3, #20
 8006bbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3314      	adds	r3, #20
 8006bd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006be0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e3      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	330c      	adds	r3, #12
 8006c02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c0e:	f023 0310 	bic.w	r3, r3, #16
 8006c12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	330c      	adds	r3, #12
 8006c1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c20:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e3      	bne.n	8006bfc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fc fb2b 	bl	8003294 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f8ac 	bl	8006dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c54:	e099      	b.n	8006d8a <HAL_UART_IRQHandler+0x50e>
 8006c56:	bf00      	nop
 8006c58:	08006e8b 	.word	0x08006e8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 808b 	beq.w	8006d8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8086 	beq.w	8006d8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	330c      	adds	r3, #12
 8006c88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ca6:	647a      	str	r2, [r7, #68]	; 0x44
 8006ca8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e3      	bne.n	8006c82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3314      	adds	r3, #20
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	f023 0301 	bic.w	r3, r3, #1
 8006cd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3314      	adds	r3, #20
 8006cda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cde:	633a      	str	r2, [r7, #48]	; 0x30
 8006ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e3      	bne.n	8006cba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0310 	bic.w	r3, r3, #16
 8006d16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	330c      	adds	r3, #12
 8006d20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d24:	61fa      	str	r2, [r7, #28]
 8006d26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	69b9      	ldr	r1, [r7, #24]
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	617b      	str	r3, [r7, #20]
   return(result);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e3      	bne.n	8006d00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f834 	bl	8006dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d44:	e023      	b.n	8006d8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d009      	beq.n	8006d66 <HAL_UART_IRQHandler+0x4ea>
 8006d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f8a7 	bl	8006eb2 <UART_Transmit_IT>
    return;
 8006d64:	e014      	b.n	8006d90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00e      	beq.n	8006d90 <HAL_UART_IRQHandler+0x514>
 8006d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d008      	beq.n	8006d90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f8e7 	bl	8006f52 <UART_EndTransmit_IT>
    return;
 8006d84:	e004      	b.n	8006d90 <HAL_UART_IRQHandler+0x514>
    return;
 8006d86:	bf00      	nop
 8006d88:	e002      	b.n	8006d90 <HAL_UART_IRQHandler+0x514>
      return;
 8006d8a:	bf00      	nop
 8006d8c:	e000      	b.n	8006d90 <HAL_UART_IRQHandler+0x514>
      return;
 8006d8e:	bf00      	nop
  }
}
 8006d90:	37e8      	adds	r7, #232	; 0xe8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop

08006d98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b095      	sub	sp, #84	; 0x54
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	330c      	adds	r3, #12
 8006dd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	330c      	adds	r3, #12
 8006dea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dec:	643a      	str	r2, [r7, #64]	; 0x40
 8006dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e5      	bne.n	8006dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3314      	adds	r3, #20
 8006e06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3314      	adds	r3, #20
 8006e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e5      	bne.n	8006e00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d119      	bne.n	8006e70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f023 0310 	bic.w	r3, r3, #16
 8006e52:	647b      	str	r3, [r7, #68]	; 0x44
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	330c      	adds	r3, #12
 8006e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e5c:	61ba      	str	r2, [r7, #24]
 8006e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6979      	ldr	r1, [r7, #20]
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e5      	bne.n	8006e3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e7e:	bf00      	nop
 8006e80:	3754      	adds	r7, #84	; 0x54
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f7ff ff77 	bl	8006d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b085      	sub	sp, #20
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b21      	cmp	r3, #33	; 0x21
 8006ec4:	d13e      	bne.n	8006f44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ece:	d114      	bne.n	8006efa <UART_Transmit_IT+0x48>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d110      	bne.n	8006efa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	1c9a      	adds	r2, r3, #2
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	621a      	str	r2, [r3, #32]
 8006ef8:	e008      	b.n	8006f0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	1c59      	adds	r1, r3, #1
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6211      	str	r1, [r2, #32]
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10f      	bne.n	8006f40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	e000      	b.n	8006f46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f44:	2302      	movs	r3, #2
  }
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b082      	sub	sp, #8
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7f9 face 	bl	8000514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b08c      	sub	sp, #48	; 0x30
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b22      	cmp	r3, #34	; 0x22
 8006f94:	f040 80ab 	bne.w	80070ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa0:	d117      	bne.n	8006fd2 <UART_Receive_IT+0x50>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d113      	bne.n	8006fd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	1c9a      	adds	r2, r3, #2
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	629a      	str	r2, [r3, #40]	; 0x28
 8006fd0:	e026      	b.n	8007020 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe4:	d007      	beq.n	8006ff6 <UART_Receive_IT+0x74>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10a      	bne.n	8007004 <UART_Receive_IT+0x82>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	e008      	b.n	8007016 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007010:	b2da      	uxtb	r2, r3
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29b      	uxth	r3, r3
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	4619      	mov	r1, r3
 800702e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007030:	2b00      	cmp	r3, #0
 8007032:	d15a      	bne.n	80070ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0220 	bic.w	r2, r2, #32
 8007042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	695a      	ldr	r2, [r3, #20]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0201 	bic.w	r2, r2, #1
 8007062:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	2b01      	cmp	r3, #1
 8007072:	d135      	bne.n	80070e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	330c      	adds	r3, #12
 8007080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	613b      	str	r3, [r7, #16]
   return(result);
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f023 0310 	bic.w	r3, r3, #16
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	330c      	adds	r3, #12
 8007098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800709a:	623a      	str	r2, [r7, #32]
 800709c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	69f9      	ldr	r1, [r7, #28]
 80070a0:	6a3a      	ldr	r2, [r7, #32]
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e5      	bne.n	800707a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0310 	and.w	r3, r3, #16
 80070b8:	2b10      	cmp	r3, #16
 80070ba:	d10a      	bne.n	80070d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070bc:	2300      	movs	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff fe67 	bl	8006dac <HAL_UARTEx_RxEventCallback>
 80070de:	e002      	b.n	80070e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7f9 fa2d 	bl	8000540 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	e002      	b.n	80070f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	e000      	b.n	80070f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80070ee:	2302      	movs	r3, #2
  }
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3730      	adds	r7, #48	; 0x30
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070fc:	b0c0      	sub	sp, #256	; 0x100
 80070fe:	af00      	add	r7, sp, #0
 8007100:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007114:	68d9      	ldr	r1, [r3, #12]
 8007116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	ea40 0301 	orr.w	r3, r0, r1
 8007120:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	431a      	orrs	r2, r3
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	431a      	orrs	r2, r3
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007150:	f021 010c 	bic.w	r1, r1, #12
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800715e:	430b      	orrs	r3, r1
 8007160:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800716e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007172:	6999      	ldr	r1, [r3, #24]
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	ea40 0301 	orr.w	r3, r0, r1
 800717e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	4b8f      	ldr	r3, [pc, #572]	; (80073c4 <UART_SetConfig+0x2cc>)
 8007188:	429a      	cmp	r2, r3
 800718a:	d005      	beq.n	8007198 <UART_SetConfig+0xa0>
 800718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b8d      	ldr	r3, [pc, #564]	; (80073c8 <UART_SetConfig+0x2d0>)
 8007194:	429a      	cmp	r2, r3
 8007196:	d104      	bne.n	80071a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007198:	f7fe fa4c 	bl	8005634 <HAL_RCC_GetPCLK2Freq>
 800719c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071a0:	e003      	b.n	80071aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071a2:	f7fe fa33 	bl	800560c <HAL_RCC_GetPCLK1Freq>
 80071a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b4:	f040 810c 	bne.w	80073d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071ca:	4622      	mov	r2, r4
 80071cc:	462b      	mov	r3, r5
 80071ce:	1891      	adds	r1, r2, r2
 80071d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80071d2:	415b      	adcs	r3, r3
 80071d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071da:	4621      	mov	r1, r4
 80071dc:	eb12 0801 	adds.w	r8, r2, r1
 80071e0:	4629      	mov	r1, r5
 80071e2:	eb43 0901 	adc.w	r9, r3, r1
 80071e6:	f04f 0200 	mov.w	r2, #0
 80071ea:	f04f 0300 	mov.w	r3, #0
 80071ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071fa:	4690      	mov	r8, r2
 80071fc:	4699      	mov	r9, r3
 80071fe:	4623      	mov	r3, r4
 8007200:	eb18 0303 	adds.w	r3, r8, r3
 8007204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007208:	462b      	mov	r3, r5
 800720a:	eb49 0303 	adc.w	r3, r9, r3
 800720e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800721e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007226:	460b      	mov	r3, r1
 8007228:	18db      	adds	r3, r3, r3
 800722a:	653b      	str	r3, [r7, #80]	; 0x50
 800722c:	4613      	mov	r3, r2
 800722e:	eb42 0303 	adc.w	r3, r2, r3
 8007232:	657b      	str	r3, [r7, #84]	; 0x54
 8007234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007238:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800723c:	f7f8 ffc4 	bl	80001c8 <__aeabi_uldivmod>
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	4b61      	ldr	r3, [pc, #388]	; (80073cc <UART_SetConfig+0x2d4>)
 8007246:	fba3 2302 	umull	r2, r3, r3, r2
 800724a:	095b      	lsrs	r3, r3, #5
 800724c:	011c      	lsls	r4, r3, #4
 800724e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007252:	2200      	movs	r2, #0
 8007254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007258:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800725c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007260:	4642      	mov	r2, r8
 8007262:	464b      	mov	r3, r9
 8007264:	1891      	adds	r1, r2, r2
 8007266:	64b9      	str	r1, [r7, #72]	; 0x48
 8007268:	415b      	adcs	r3, r3
 800726a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800726c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007270:	4641      	mov	r1, r8
 8007272:	eb12 0a01 	adds.w	sl, r2, r1
 8007276:	4649      	mov	r1, r9
 8007278:	eb43 0b01 	adc.w	fp, r3, r1
 800727c:	f04f 0200 	mov.w	r2, #0
 8007280:	f04f 0300 	mov.w	r3, #0
 8007284:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007288:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800728c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007290:	4692      	mov	sl, r2
 8007292:	469b      	mov	fp, r3
 8007294:	4643      	mov	r3, r8
 8007296:	eb1a 0303 	adds.w	r3, sl, r3
 800729a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800729e:	464b      	mov	r3, r9
 80072a0:	eb4b 0303 	adc.w	r3, fp, r3
 80072a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072bc:	460b      	mov	r3, r1
 80072be:	18db      	adds	r3, r3, r3
 80072c0:	643b      	str	r3, [r7, #64]	; 0x40
 80072c2:	4613      	mov	r3, r2
 80072c4:	eb42 0303 	adc.w	r3, r2, r3
 80072c8:	647b      	str	r3, [r7, #68]	; 0x44
 80072ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072d2:	f7f8 ff79 	bl	80001c8 <__aeabi_uldivmod>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4611      	mov	r1, r2
 80072dc:	4b3b      	ldr	r3, [pc, #236]	; (80073cc <UART_SetConfig+0x2d4>)
 80072de:	fba3 2301 	umull	r2, r3, r3, r1
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	2264      	movs	r2, #100	; 0x64
 80072e6:	fb02 f303 	mul.w	r3, r2, r3
 80072ea:	1acb      	subs	r3, r1, r3
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072f2:	4b36      	ldr	r3, [pc, #216]	; (80073cc <UART_SetConfig+0x2d4>)
 80072f4:	fba3 2302 	umull	r2, r3, r3, r2
 80072f8:	095b      	lsrs	r3, r3, #5
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007300:	441c      	add	r4, r3
 8007302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007306:	2200      	movs	r2, #0
 8007308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800730c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007310:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007314:	4642      	mov	r2, r8
 8007316:	464b      	mov	r3, r9
 8007318:	1891      	adds	r1, r2, r2
 800731a:	63b9      	str	r1, [r7, #56]	; 0x38
 800731c:	415b      	adcs	r3, r3
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007324:	4641      	mov	r1, r8
 8007326:	1851      	adds	r1, r2, r1
 8007328:	6339      	str	r1, [r7, #48]	; 0x30
 800732a:	4649      	mov	r1, r9
 800732c:	414b      	adcs	r3, r1
 800732e:	637b      	str	r3, [r7, #52]	; 0x34
 8007330:	f04f 0200 	mov.w	r2, #0
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800733c:	4659      	mov	r1, fp
 800733e:	00cb      	lsls	r3, r1, #3
 8007340:	4651      	mov	r1, sl
 8007342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007346:	4651      	mov	r1, sl
 8007348:	00ca      	lsls	r2, r1, #3
 800734a:	4610      	mov	r0, r2
 800734c:	4619      	mov	r1, r3
 800734e:	4603      	mov	r3, r0
 8007350:	4642      	mov	r2, r8
 8007352:	189b      	adds	r3, r3, r2
 8007354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007358:	464b      	mov	r3, r9
 800735a:	460a      	mov	r2, r1
 800735c:	eb42 0303 	adc.w	r3, r2, r3
 8007360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007370:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007378:	460b      	mov	r3, r1
 800737a:	18db      	adds	r3, r3, r3
 800737c:	62bb      	str	r3, [r7, #40]	; 0x28
 800737e:	4613      	mov	r3, r2
 8007380:	eb42 0303 	adc.w	r3, r2, r3
 8007384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800738a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800738e:	f7f8 ff1b 	bl	80001c8 <__aeabi_uldivmod>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4b0d      	ldr	r3, [pc, #52]	; (80073cc <UART_SetConfig+0x2d4>)
 8007398:	fba3 1302 	umull	r1, r3, r3, r2
 800739c:	095b      	lsrs	r3, r3, #5
 800739e:	2164      	movs	r1, #100	; 0x64
 80073a0:	fb01 f303 	mul.w	r3, r1, r3
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	3332      	adds	r3, #50	; 0x32
 80073aa:	4a08      	ldr	r2, [pc, #32]	; (80073cc <UART_SetConfig+0x2d4>)
 80073ac:	fba2 2303 	umull	r2, r3, r2, r3
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	f003 0207 	and.w	r2, r3, #7
 80073b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4422      	add	r2, r4
 80073be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073c0:	e105      	b.n	80075ce <UART_SetConfig+0x4d6>
 80073c2:	bf00      	nop
 80073c4:	40011000 	.word	0x40011000
 80073c8:	40011400 	.word	0x40011400
 80073cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073e2:	4642      	mov	r2, r8
 80073e4:	464b      	mov	r3, r9
 80073e6:	1891      	adds	r1, r2, r2
 80073e8:	6239      	str	r1, [r7, #32]
 80073ea:	415b      	adcs	r3, r3
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
 80073ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073f2:	4641      	mov	r1, r8
 80073f4:	1854      	adds	r4, r2, r1
 80073f6:	4649      	mov	r1, r9
 80073f8:	eb43 0501 	adc.w	r5, r3, r1
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0300 	mov.w	r3, #0
 8007404:	00eb      	lsls	r3, r5, #3
 8007406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800740a:	00e2      	lsls	r2, r4, #3
 800740c:	4614      	mov	r4, r2
 800740e:	461d      	mov	r5, r3
 8007410:	4643      	mov	r3, r8
 8007412:	18e3      	adds	r3, r4, r3
 8007414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007418:	464b      	mov	r3, r9
 800741a:	eb45 0303 	adc.w	r3, r5, r3
 800741e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800742e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007432:	f04f 0200 	mov.w	r2, #0
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800743e:	4629      	mov	r1, r5
 8007440:	008b      	lsls	r3, r1, #2
 8007442:	4621      	mov	r1, r4
 8007444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007448:	4621      	mov	r1, r4
 800744a:	008a      	lsls	r2, r1, #2
 800744c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007450:	f7f8 feba 	bl	80001c8 <__aeabi_uldivmod>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4b60      	ldr	r3, [pc, #384]	; (80075dc <UART_SetConfig+0x4e4>)
 800745a:	fba3 2302 	umull	r2, r3, r3, r2
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	011c      	lsls	r4, r3, #4
 8007462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007466:	2200      	movs	r2, #0
 8007468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800746c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007470:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007474:	4642      	mov	r2, r8
 8007476:	464b      	mov	r3, r9
 8007478:	1891      	adds	r1, r2, r2
 800747a:	61b9      	str	r1, [r7, #24]
 800747c:	415b      	adcs	r3, r3
 800747e:	61fb      	str	r3, [r7, #28]
 8007480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007484:	4641      	mov	r1, r8
 8007486:	1851      	adds	r1, r2, r1
 8007488:	6139      	str	r1, [r7, #16]
 800748a:	4649      	mov	r1, r9
 800748c:	414b      	adcs	r3, r1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	f04f 0200 	mov.w	r2, #0
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800749c:	4659      	mov	r1, fp
 800749e:	00cb      	lsls	r3, r1, #3
 80074a0:	4651      	mov	r1, sl
 80074a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074a6:	4651      	mov	r1, sl
 80074a8:	00ca      	lsls	r2, r1, #3
 80074aa:	4610      	mov	r0, r2
 80074ac:	4619      	mov	r1, r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	4642      	mov	r2, r8
 80074b2:	189b      	adds	r3, r3, r2
 80074b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074b8:	464b      	mov	r3, r9
 80074ba:	460a      	mov	r2, r1
 80074bc:	eb42 0303 	adc.w	r3, r2, r3
 80074c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80074ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074d0:	f04f 0200 	mov.w	r2, #0
 80074d4:	f04f 0300 	mov.w	r3, #0
 80074d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074dc:	4649      	mov	r1, r9
 80074de:	008b      	lsls	r3, r1, #2
 80074e0:	4641      	mov	r1, r8
 80074e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074e6:	4641      	mov	r1, r8
 80074e8:	008a      	lsls	r2, r1, #2
 80074ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074ee:	f7f8 fe6b 	bl	80001c8 <__aeabi_uldivmod>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4b39      	ldr	r3, [pc, #228]	; (80075dc <UART_SetConfig+0x4e4>)
 80074f8:	fba3 1302 	umull	r1, r3, r3, r2
 80074fc:	095b      	lsrs	r3, r3, #5
 80074fe:	2164      	movs	r1, #100	; 0x64
 8007500:	fb01 f303 	mul.w	r3, r1, r3
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	3332      	adds	r3, #50	; 0x32
 800750a:	4a34      	ldr	r2, [pc, #208]	; (80075dc <UART_SetConfig+0x4e4>)
 800750c:	fba2 2303 	umull	r2, r3, r2, r3
 8007510:	095b      	lsrs	r3, r3, #5
 8007512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007516:	441c      	add	r4, r3
 8007518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800751c:	2200      	movs	r2, #0
 800751e:	673b      	str	r3, [r7, #112]	; 0x70
 8007520:	677a      	str	r2, [r7, #116]	; 0x74
 8007522:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007526:	4642      	mov	r2, r8
 8007528:	464b      	mov	r3, r9
 800752a:	1891      	adds	r1, r2, r2
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	415b      	adcs	r3, r3
 8007530:	60fb      	str	r3, [r7, #12]
 8007532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007536:	4641      	mov	r1, r8
 8007538:	1851      	adds	r1, r2, r1
 800753a:	6039      	str	r1, [r7, #0]
 800753c:	4649      	mov	r1, r9
 800753e:	414b      	adcs	r3, r1
 8007540:	607b      	str	r3, [r7, #4]
 8007542:	f04f 0200 	mov.w	r2, #0
 8007546:	f04f 0300 	mov.w	r3, #0
 800754a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800754e:	4659      	mov	r1, fp
 8007550:	00cb      	lsls	r3, r1, #3
 8007552:	4651      	mov	r1, sl
 8007554:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007558:	4651      	mov	r1, sl
 800755a:	00ca      	lsls	r2, r1, #3
 800755c:	4610      	mov	r0, r2
 800755e:	4619      	mov	r1, r3
 8007560:	4603      	mov	r3, r0
 8007562:	4642      	mov	r2, r8
 8007564:	189b      	adds	r3, r3, r2
 8007566:	66bb      	str	r3, [r7, #104]	; 0x68
 8007568:	464b      	mov	r3, r9
 800756a:	460a      	mov	r2, r1
 800756c:	eb42 0303 	adc.w	r3, r2, r3
 8007570:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	663b      	str	r3, [r7, #96]	; 0x60
 800757c:	667a      	str	r2, [r7, #100]	; 0x64
 800757e:	f04f 0200 	mov.w	r2, #0
 8007582:	f04f 0300 	mov.w	r3, #0
 8007586:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800758a:	4649      	mov	r1, r9
 800758c:	008b      	lsls	r3, r1, #2
 800758e:	4641      	mov	r1, r8
 8007590:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007594:	4641      	mov	r1, r8
 8007596:	008a      	lsls	r2, r1, #2
 8007598:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800759c:	f7f8 fe14 	bl	80001c8 <__aeabi_uldivmod>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	4b0d      	ldr	r3, [pc, #52]	; (80075dc <UART_SetConfig+0x4e4>)
 80075a6:	fba3 1302 	umull	r1, r3, r3, r2
 80075aa:	095b      	lsrs	r3, r3, #5
 80075ac:	2164      	movs	r1, #100	; 0x64
 80075ae:	fb01 f303 	mul.w	r3, r1, r3
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	011b      	lsls	r3, r3, #4
 80075b6:	3332      	adds	r3, #50	; 0x32
 80075b8:	4a08      	ldr	r2, [pc, #32]	; (80075dc <UART_SetConfig+0x4e4>)
 80075ba:	fba2 2303 	umull	r2, r3, r2, r3
 80075be:	095b      	lsrs	r3, r3, #5
 80075c0:	f003 020f 	and.w	r2, r3, #15
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4422      	add	r2, r4
 80075cc:	609a      	str	r2, [r3, #8]
}
 80075ce:	bf00      	nop
 80075d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075d4:	46bd      	mov	sp, r7
 80075d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075da:	bf00      	nop
 80075dc:	51eb851f 	.word	0x51eb851f

080075e0 <__libc_init_array>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	4d0d      	ldr	r5, [pc, #52]	; (8007618 <__libc_init_array+0x38>)
 80075e4:	4c0d      	ldr	r4, [pc, #52]	; (800761c <__libc_init_array+0x3c>)
 80075e6:	1b64      	subs	r4, r4, r5
 80075e8:	10a4      	asrs	r4, r4, #2
 80075ea:	2600      	movs	r6, #0
 80075ec:	42a6      	cmp	r6, r4
 80075ee:	d109      	bne.n	8007604 <__libc_init_array+0x24>
 80075f0:	4d0b      	ldr	r5, [pc, #44]	; (8007620 <__libc_init_array+0x40>)
 80075f2:	4c0c      	ldr	r4, [pc, #48]	; (8007624 <__libc_init_array+0x44>)
 80075f4:	f000 f820 	bl	8007638 <_init>
 80075f8:	1b64      	subs	r4, r4, r5
 80075fa:	10a4      	asrs	r4, r4, #2
 80075fc:	2600      	movs	r6, #0
 80075fe:	42a6      	cmp	r6, r4
 8007600:	d105      	bne.n	800760e <__libc_init_array+0x2e>
 8007602:	bd70      	pop	{r4, r5, r6, pc}
 8007604:	f855 3b04 	ldr.w	r3, [r5], #4
 8007608:	4798      	blx	r3
 800760a:	3601      	adds	r6, #1
 800760c:	e7ee      	b.n	80075ec <__libc_init_array+0xc>
 800760e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007612:	4798      	blx	r3
 8007614:	3601      	adds	r6, #1
 8007616:	e7f2      	b.n	80075fe <__libc_init_array+0x1e>
 8007618:	08007678 	.word	0x08007678
 800761c:	08007678 	.word	0x08007678
 8007620:	08007678 	.word	0x08007678
 8007624:	0800767c 	.word	0x0800767c

08007628 <memset>:
 8007628:	4402      	add	r2, r0
 800762a:	4603      	mov	r3, r0
 800762c:	4293      	cmp	r3, r2
 800762e:	d100      	bne.n	8007632 <memset+0xa>
 8007630:	4770      	bx	lr
 8007632:	f803 1b01 	strb.w	r1, [r3], #1
 8007636:	e7f9      	b.n	800762c <memset+0x4>

08007638 <_init>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr

08007644 <_fini>:
 8007644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007646:	bf00      	nop
 8007648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764a:	bc08      	pop	{r3}
 800764c:	469e      	mov	lr, r3
 800764e:	4770      	bx	lr
