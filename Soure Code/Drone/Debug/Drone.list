
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008188  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002884  08008310  08008310  00018310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab94  0800ab94  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab94  0800ab94  0001ab94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab9c  0800ab9c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab9c  0800ab9c  0001ab9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aba0  0800aba0  0001aba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800aba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000ce4  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d08  20000d08  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b4bd  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ddb  00000000  00000000  0003b511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  0003f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d0  00000000  00000000  00040a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000050fc  00000000  00000000  00042030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e92b  00000000  00000000  0004712c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6341  00000000  00000000  00065a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013bd98  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061c0  00000000  00000000  0013bde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080082f8 	.word	0x080082f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080082f8 	.word	0x080082f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80004d2:	f000 fa29 	bl	8000928 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80004d6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80004da:	2201      	movs	r2, #1
 80004dc:	2178      	movs	r1, #120	; 0x78
 80004de:	485b      	ldr	r0, [pc, #364]	; (800064c <SSD1306_Init+0x180>)
 80004e0:	f004 fd5c 	bl	8004f9c <HAL_I2C_IsDeviceReady>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	e0a9      	b.n	8000642 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80004ee:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80004f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80004f4:	e002      	b.n	80004fc <SSD1306_Init+0x30>
		p--;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d1f9      	bne.n	80004f6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000502:	22ae      	movs	r2, #174	; 0xae
 8000504:	2100      	movs	r1, #0
 8000506:	2078      	movs	r0, #120	; 0x78
 8000508:	f000 fa8a 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800050c:	2220      	movs	r2, #32
 800050e:	2100      	movs	r1, #0
 8000510:	2078      	movs	r0, #120	; 0x78
 8000512:	f000 fa85 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000516:	2210      	movs	r2, #16
 8000518:	2100      	movs	r1, #0
 800051a:	2078      	movs	r0, #120	; 0x78
 800051c:	f000 fa80 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000520:	22b0      	movs	r2, #176	; 0xb0
 8000522:	2100      	movs	r1, #0
 8000524:	2078      	movs	r0, #120	; 0x78
 8000526:	f000 fa7b 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800052a:	22c8      	movs	r2, #200	; 0xc8
 800052c:	2100      	movs	r1, #0
 800052e:	2078      	movs	r0, #120	; 0x78
 8000530:	f000 fa76 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fa71 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800053e:	2210      	movs	r2, #16
 8000540:	2100      	movs	r1, #0
 8000542:	2078      	movs	r0, #120	; 0x78
 8000544:	f000 fa6c 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000548:	2240      	movs	r2, #64	; 0x40
 800054a:	2100      	movs	r1, #0
 800054c:	2078      	movs	r0, #120	; 0x78
 800054e:	f000 fa67 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000552:	2281      	movs	r2, #129	; 0x81
 8000554:	2100      	movs	r1, #0
 8000556:	2078      	movs	r0, #120	; 0x78
 8000558:	f000 fa62 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800055c:	22ff      	movs	r2, #255	; 0xff
 800055e:	2100      	movs	r1, #0
 8000560:	2078      	movs	r0, #120	; 0x78
 8000562:	f000 fa5d 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000566:	22a1      	movs	r2, #161	; 0xa1
 8000568:	2100      	movs	r1, #0
 800056a:	2078      	movs	r0, #120	; 0x78
 800056c:	f000 fa58 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000570:	22a6      	movs	r2, #166	; 0xa6
 8000572:	2100      	movs	r1, #0
 8000574:	2078      	movs	r0, #120	; 0x78
 8000576:	f000 fa53 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800057a:	22a8      	movs	r2, #168	; 0xa8
 800057c:	2100      	movs	r1, #0
 800057e:	2078      	movs	r0, #120	; 0x78
 8000580:	f000 fa4e 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000584:	223f      	movs	r2, #63	; 0x3f
 8000586:	2100      	movs	r1, #0
 8000588:	2078      	movs	r0, #120	; 0x78
 800058a:	f000 fa49 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800058e:	22a4      	movs	r2, #164	; 0xa4
 8000590:	2100      	movs	r1, #0
 8000592:	2078      	movs	r0, #120	; 0x78
 8000594:	f000 fa44 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000598:	22d3      	movs	r2, #211	; 0xd3
 800059a:	2100      	movs	r1, #0
 800059c:	2078      	movs	r0, #120	; 0x78
 800059e:	f000 fa3f 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2078      	movs	r0, #120	; 0x78
 80005a8:	f000 fa3a 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80005ac:	22d5      	movs	r2, #213	; 0xd5
 80005ae:	2100      	movs	r1, #0
 80005b0:	2078      	movs	r0, #120	; 0x78
 80005b2:	f000 fa35 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80005b6:	22f0      	movs	r2, #240	; 0xf0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2078      	movs	r0, #120	; 0x78
 80005bc:	f000 fa30 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80005c0:	22d9      	movs	r2, #217	; 0xd9
 80005c2:	2100      	movs	r1, #0
 80005c4:	2078      	movs	r0, #120	; 0x78
 80005c6:	f000 fa2b 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80005ca:	2222      	movs	r2, #34	; 0x22
 80005cc:	2100      	movs	r1, #0
 80005ce:	2078      	movs	r0, #120	; 0x78
 80005d0:	f000 fa26 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80005d4:	22da      	movs	r2, #218	; 0xda
 80005d6:	2100      	movs	r1, #0
 80005d8:	2078      	movs	r0, #120	; 0x78
 80005da:	f000 fa21 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80005de:	2212      	movs	r2, #18
 80005e0:	2100      	movs	r1, #0
 80005e2:	2078      	movs	r0, #120	; 0x78
 80005e4:	f000 fa1c 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80005e8:	22db      	movs	r2, #219	; 0xdb
 80005ea:	2100      	movs	r1, #0
 80005ec:	2078      	movs	r0, #120	; 0x78
 80005ee:	f000 fa17 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80005f2:	2220      	movs	r2, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	2078      	movs	r0, #120	; 0x78
 80005f8:	f000 fa12 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80005fc:	228d      	movs	r2, #141	; 0x8d
 80005fe:	2100      	movs	r1, #0
 8000600:	2078      	movs	r0, #120	; 0x78
 8000602:	f000 fa0d 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000606:	2214      	movs	r2, #20
 8000608:	2100      	movs	r1, #0
 800060a:	2078      	movs	r0, #120	; 0x78
 800060c:	f000 fa08 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000610:	22af      	movs	r2, #175	; 0xaf
 8000612:	2100      	movs	r1, #0
 8000614:	2078      	movs	r0, #120	; 0x78
 8000616:	f000 fa03 	bl	8000a20 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800061a:	222e      	movs	r2, #46	; 0x2e
 800061c:	2100      	movs	r1, #0
 800061e:	2078      	movs	r0, #120	; 0x78
 8000620:	f000 f9fe 	bl	8000a20 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f843 	bl	80006b0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800062a:	f000 f813 	bl	8000654 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <SSD1306_Init+0x184>)
 8000630:	2200      	movs	r2, #0
 8000632:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <SSD1306_Init+0x184>)
 8000636:	2200      	movs	r2, #0
 8000638:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <SSD1306_Init+0x184>)
 800063c:	2201      	movs	r2, #1
 800063e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000640:	2301      	movs	r3, #1
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200004c4 	.word	0x200004c4
 8000650:	20000440 	.word	0x20000440

08000654 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800065a:	2300      	movs	r3, #0
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	e01d      	b.n	800069c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	3b50      	subs	r3, #80	; 0x50
 8000664:	b2db      	uxtb	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	2078      	movs	r0, #120	; 0x78
 800066c:	f000 f9d8 	bl	8000a20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	2078      	movs	r0, #120	; 0x78
 8000676:	f000 f9d3 	bl	8000a20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800067a:	2210      	movs	r2, #16
 800067c:	2100      	movs	r1, #0
 800067e:	2078      	movs	r0, #120	; 0x78
 8000680:	f000 f9ce 	bl	8000a20 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	01db      	lsls	r3, r3, #7
 8000688:	4a08      	ldr	r2, [pc, #32]	; (80006ac <SSD1306_UpdateScreen+0x58>)
 800068a:	441a      	add	r2, r3
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	2140      	movs	r1, #64	; 0x40
 8000690:	2078      	movs	r0, #120	; 0x78
 8000692:	f000 f95f 	bl	8000954 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	3301      	adds	r3, #1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b07      	cmp	r3, #7
 80006a0:	d9de      	bls.n	8000660 <SSD1306_UpdateScreen+0xc>
	}
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000040 	.word	0x20000040

080006b0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <SSD1306_Fill+0x14>
 80006c0:	2300      	movs	r3, #0
 80006c2:	e000      	b.n	80006c6 <SSD1306_Fill+0x16>
 80006c4:	23ff      	movs	r3, #255	; 0xff
 80006c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ca:	4619      	mov	r1, r3
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <SSD1306_Fill+0x2c>)
 80006ce:	f007 fdc9 	bl	8008264 <memset>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000040 	.word	0x20000040

080006e0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
 80006ea:	460b      	mov	r3, r1
 80006ec:	80bb      	strh	r3, [r7, #4]
 80006ee:	4613      	mov	r3, r2
 80006f0:	70fb      	strb	r3, [r7, #3]
	if (
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	2b7f      	cmp	r3, #127	; 0x7f
 80006f6:	d848      	bhi.n	800078a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80006f8:	88bb      	ldrh	r3, [r7, #4]
 80006fa:	2b3f      	cmp	r3, #63	; 0x3f
 80006fc:	d845      	bhi.n	800078a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SSD1306_DrawPixel+0xb8>)
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000706:	78fb      	ldrb	r3, [r7, #3]
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf0c      	ite	eq
 800070c:	2301      	moveq	r3, #1
 800070e:	2300      	movne	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d11a      	bne.n	8000750 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800071a:	88fa      	ldrh	r2, [r7, #6]
 800071c:	88bb      	ldrh	r3, [r7, #4]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	b298      	uxth	r0, r3
 8000722:	4603      	mov	r3, r0
 8000724:	01db      	lsls	r3, r3, #7
 8000726:	4413      	add	r3, r2
 8000728:	4a1c      	ldr	r2, [pc, #112]	; (800079c <SSD1306_DrawPixel+0xbc>)
 800072a:	5cd3      	ldrb	r3, [r2, r3]
 800072c:	b25a      	sxtb	r2, r3
 800072e:	88bb      	ldrh	r3, [r7, #4]
 8000730:	f003 0307 	and.w	r3, r3, #7
 8000734:	2101      	movs	r1, #1
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	b25b      	sxtb	r3, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	b259      	sxtb	r1, r3
 8000740:	88fa      	ldrh	r2, [r7, #6]
 8000742:	4603      	mov	r3, r0
 8000744:	01db      	lsls	r3, r3, #7
 8000746:	4413      	add	r3, r2
 8000748:	b2c9      	uxtb	r1, r1
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <SSD1306_DrawPixel+0xbc>)
 800074c:	54d1      	strb	r1, [r2, r3]
 800074e:	e01d      	b.n	800078c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000750:	88fa      	ldrh	r2, [r7, #6]
 8000752:	88bb      	ldrh	r3, [r7, #4]
 8000754:	08db      	lsrs	r3, r3, #3
 8000756:	b298      	uxth	r0, r3
 8000758:	4603      	mov	r3, r0
 800075a:	01db      	lsls	r3, r3, #7
 800075c:	4413      	add	r3, r2
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <SSD1306_DrawPixel+0xbc>)
 8000760:	5cd3      	ldrb	r3, [r2, r3]
 8000762:	b25a      	sxtb	r2, r3
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	2101      	movs	r1, #1
 800076c:	fa01 f303 	lsl.w	r3, r1, r3
 8000770:	b25b      	sxtb	r3, r3
 8000772:	43db      	mvns	r3, r3
 8000774:	b25b      	sxtb	r3, r3
 8000776:	4013      	ands	r3, r2
 8000778:	b259      	sxtb	r1, r3
 800077a:	88fa      	ldrh	r2, [r7, #6]
 800077c:	4603      	mov	r3, r0
 800077e:	01db      	lsls	r3, r3, #7
 8000780:	4413      	add	r3, r2
 8000782:	b2c9      	uxtb	r1, r1
 8000784:	4a05      	ldr	r2, [pc, #20]	; (800079c <SSD1306_DrawPixel+0xbc>)
 8000786:	54d1      	strb	r1, [r2, r3]
 8000788:	e000      	b.n	800078c <SSD1306_DrawPixel+0xac>
		return;
 800078a:	bf00      	nop
	}
}
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	20000440 	.word	0x20000440
 800079c:	20000040 	.word	0x20000040

080007a0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	460a      	mov	r2, r1
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	4613      	mov	r3, r2
 80007ae:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80007b0:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <SSD1306_GotoXY+0x28>)
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <SSD1306_GotoXY+0x28>)
 80007b8:	88bb      	ldrh	r3, [r7, #4]
 80007ba:	8053      	strh	r3, [r2, #2]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	20000440 	.word	0x20000440

080007cc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	4613      	mov	r3, r2
 80007da:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80007dc:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <SSD1306_Putc+0xfc>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
	if (
 80007e8:	2b7f      	cmp	r3, #127	; 0x7f
 80007ea:	dc07      	bgt.n	80007fc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80007ec:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <SSD1306_Putc+0xfc>)
 80007ee:	885b      	ldrh	r3, [r3, #2]
 80007f0:	461a      	mov	r2, r3
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	785b      	ldrb	r3, [r3, #1]
 80007f6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80007f8:	2b3f      	cmp	r3, #63	; 0x3f
 80007fa:	dd01      	ble.n	8000800 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	e05e      	b.n	80008be <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	e04b      	b.n	800089e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	3b20      	subs	r3, #32
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	7849      	ldrb	r1, [r1, #1]
 8000812:	fb01 f303 	mul.w	r3, r1, r3
 8000816:	4619      	mov	r1, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	440b      	add	r3, r1
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	e030      	b.n	800088c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000836:	2b00      	cmp	r3, #0
 8000838:	d010      	beq.n	800085c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <SSD1306_Putc+0xfc>)
 800083c:	881a      	ldrh	r2, [r3, #0]
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	b29b      	uxth	r3, r3
 8000842:	4413      	add	r3, r2
 8000844:	b298      	uxth	r0, r3
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <SSD1306_Putc+0xfc>)
 8000848:	885a      	ldrh	r2, [r3, #2]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	b29b      	uxth	r3, r3
 800084e:	4413      	add	r3, r2
 8000850:	b29b      	uxth	r3, r3
 8000852:	79ba      	ldrb	r2, [r7, #6]
 8000854:	4619      	mov	r1, r3
 8000856:	f7ff ff43 	bl	80006e0 <SSD1306_DrawPixel>
 800085a:	e014      	b.n	8000886 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <SSD1306_Putc+0xfc>)
 800085e:	881a      	ldrh	r2, [r3, #0]
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	b29b      	uxth	r3, r3
 8000864:	4413      	add	r3, r2
 8000866:	b298      	uxth	r0, r3
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <SSD1306_Putc+0xfc>)
 800086a:	885a      	ldrh	r2, [r3, #2]
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	b29b      	uxth	r3, r3
 8000870:	4413      	add	r3, r2
 8000872:	b299      	uxth	r1, r3
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	2b00      	cmp	r3, #0
 8000878:	bf0c      	ite	eq
 800087a:	2301      	moveq	r3, #1
 800087c:	2300      	movne	r3, #0
 800087e:	b2db      	uxtb	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	f7ff ff2d 	bl	80006e0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	3301      	adds	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	4293      	cmp	r3, r2
 8000896:	d3c8      	bcc.n	800082a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	3301      	adds	r3, #1
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	785b      	ldrb	r3, [r3, #1]
 80008a2:	461a      	mov	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d3ad      	bcc.n	8000806 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <SSD1306_Putc+0xfc>)
 80008ac:	881a      	ldrh	r2, [r3, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4413      	add	r3, r2
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <SSD1306_Putc+0xfc>)
 80008ba:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000440 	.word	0x20000440

080008cc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	4613      	mov	r3, r2
 80008d8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80008da:	e012      	b.n	8000902 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	79fa      	ldrb	r2, [r7, #7]
 80008e2:	68b9      	ldr	r1, [r7, #8]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff71 	bl	80007cc <SSD1306_Putc>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d002      	beq.n	80008fc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	e008      	b.n	800090e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3301      	adds	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1e8      	bne.n	80008dc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	781b      	ldrb	r3, [r3, #0]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fec8 	bl	80006b0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000920:	f7ff fe98 	bl	8000654 <SSD1306_UpdateScreen>
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <ssd1306_I2C_Init+0x28>)
 8000930:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000932:	e002      	b.n	800093a <ssd1306_I2C_Init+0x12>
		p--;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	607b      	str	r3, [r7, #4]
	while(p>0)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1f9      	bne.n	8000934 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	0003d090 	.word	0x0003d090

08000954 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b0c7      	sub	sp, #284	; 0x11c
 8000958:	af02      	add	r7, sp, #8
 800095a:	4604      	mov	r4, r0
 800095c:	4608      	mov	r0, r1
 800095e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000962:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000966:	600a      	str	r2, [r1, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800096e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000972:	4622      	mov	r2, r4
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800097a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800097e:	4602      	mov	r2, r0
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000986:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800098a:	460a      	mov	r2, r1
 800098c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800098e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000992:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000996:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800099a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800099e:	7812      	ldrb	r2, [r2, #0]
 80009a0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009a8:	e015      	b.n	80009d6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80009aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009b2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80009b6:	6812      	ldr	r2, [r2, #0]
 80009b8:	441a      	add	r2, r3
 80009ba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009be:	3301      	adds	r3, #1
 80009c0:	7811      	ldrb	r1, [r2, #0]
 80009c2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009c6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80009ca:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80009cc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009d0:	3301      	adds	r3, #1
 80009d2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009da:	b29b      	uxth	r3, r3
 80009dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009e0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80009e4:	8812      	ldrh	r2, [r2, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d8df      	bhi.n	80009aa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&SSD1306_I2C, address, dt, count+1, 10);
 80009ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009ee:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b299      	uxth	r1, r3
 80009f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	f107 020c 	add.w	r2, r7, #12
 8000a08:	200a      	movs	r0, #10
 8000a0a:	9000      	str	r0, [sp, #0]
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <ssd1306_I2C_WriteMulti+0xc8>)
 8000a0e:	f003 fea7 	bl	8004760 <HAL_I2C_Master_Transmit>
}
 8000a12:	bf00      	nop
 8000a14:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	200004c4 	.word	0x200004c4

08000a20 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	71bb      	strb	r3, [r7, #6]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000a36:	797b      	ldrb	r3, [r7, #5]
 8000a38:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&SSD1306_I2C, address, dt, 2, 10);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	b299      	uxth	r1, r3
 8000a3e:	f107 020c 	add.w	r2, r7, #12
 8000a42:	230a      	movs	r3, #10
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2302      	movs	r3, #2
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <ssd1306_I2C_Write+0x38>)
 8000a4a:	f003 fe89 	bl	8004760 <HAL_I2C_Master_Transmit>
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200004c4 	.word	0x200004c4

08000a5c <find_uart_dev_instant>:
		}
	}
	return -1;
}

static int find_uart_dev_instant(UART_HandleTypeDef *huart){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e00e      	b.n	8000a88 <find_uart_dev_instant+0x2c>
		if(uart_drvs[i]->huart->Instance == huart->Instance){
 8000a6a:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <find_uart_dev_instant+0x44>)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d101      	bne.n	8000a82 <find_uart_dev_instant+0x26>
			return i;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	e007      	b.n	8000a92 <find_uart_dev_instant+0x36>
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3301      	adds	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	dded      	ble.n	8000a6a <find_uart_dev_instant+0xe>
		}
	}
	return -1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000448 	.word	0x20000448

08000aa4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	int idx = find_uart_dev_instant(huart);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ffd5 	bl	8000a5c <find_uart_dev_instant>
 8000ab2:	60f8      	str	r0, [r7, #12]
	uart_drvs[idx]->tx_completed = true;
 8000ab4:	4a05      	ldr	r2, [pc, #20]	; (8000acc <HAL_UART_TxCpltCallback+0x28>)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	2201      	movs	r2, #1
 8000abe:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000448 	.word	0x20000448

08000ad0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
	HAL_UART_RxCpltCallback(huart);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

	int idx = find_uart_dev_instant(huart);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ffbf 	bl	8000a5c <find_uart_dev_instant>
 8000ade:	6138      	str	r0, [r7, #16]
	uart_drv_t *uart_drv = uart_drvs[idx];
 8000ae0:	4a20      	ldr	r2, [pc, #128]	; (8000b64 <HAL_UART_RxCpltCallback+0x94>)
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	60fb      	str	r3, [r7, #12]

	uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	817b      	strh	r3, [r7, #10]
	uint16_t length =  sizeof(uart_drv->rx_dma_buffer) - currCNDTR;
 8000af4:	897b      	ldrh	r3, [r7, #10]
 8000af6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000afa:	813b      	strh	r3, [r7, #8]

	/* Copy and process new data */
	for(uint16_t i=0; i<length; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	82fb      	strh	r3, [r7, #22]
 8000b00:	e00d      	b.n	8000b1e <HAL_UART_RxCpltCallback+0x4e>
	{
		cbuf_put(&uart_drv->rx_cbuf_handle, uart_drv->rx_dma_buffer[i]);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f203 601c 	addw	r0, r3, #1564	; 0x61c
 8000b08:	8afb      	ldrh	r3, [r7, #22]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000b12:	4619      	mov	r1, r3
 8000b14:	f000 f828 	bl	8000b68 <cbuf_put>
	for(uint16_t i=0; i<length; i++)
 8000b18:	8afb      	ldrh	r3, [r7, #22]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	82fb      	strh	r3, [r7, #22]
 8000b1e:	8afa      	ldrh	r2, [r7, #22]
 8000b20:	893b      	ldrh	r3, [r7, #8]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d3ed      	bcc.n	8000b02 <HAL_UART_RxCpltCallback+0x32>
	}

	__HAL_DMA_DISABLE(huart->hdmarx);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0201 	bic.w	r2, r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
	huart->hdmarx->Instance->NDTR = sizeof(uart_drv->rx_dma_buffer);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b44:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(huart->hdmarx);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f042 0201 	orr.w	r2, r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000448 	.word	0x20000448

08000b68 <cbuf_put>:
    cbuf->tail = 0;
    cbuf->full = false;
}

int cbuf_put(circular_buf_t* cbuf, char data)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70fb      	strb	r3, [r7, #3]
    if(!cbuf_full(cbuf))
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f82c 	bl	8000bd2 <cbuf_full>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f083 0301 	eor.w	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d01f      	beq.n	8000bc6 <cbuf_put+0x5e>
    {
        cbuf->buffer[cbuf->head] = data;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	4413      	add	r3, r2
 8000b90:	78fa      	ldrb	r2, [r7, #3]
 8000b92:	701a      	strb	r2, [r3, #0]
        cbuf->head = (cbuf->head + 1) % cbuf->size;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	6852      	ldr	r2, [r2, #4]
 8000b9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ba2:	fb01 f202 	mul.w	r2, r1, r2
 8000ba6:	1a9a      	subs	r2, r3, r2
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	609a      	str	r2, [r3, #8]
        cbuf->full = (cbuf->head == cbuf->tail);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	bf0c      	ite	eq
 8000bb8:	2301      	moveq	r3, #1
 8000bba:	2300      	movne	r3, #0
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	741a      	strb	r2, [r3, #16]
        return 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e001      	b.n	8000bca <cbuf_put+0x62>
    }
    return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <cbuf_full>:
{
    return (!cbuf->full && (cbuf->head == cbuf->tail));
}

bool cbuf_full(circular_buf_t *cbuf)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
    return cbuf->full;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7c1b      	ldrb	r3, [r3, #16]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <bno055_read>:
#define TEMPERATURE_UNITS				 		(0b00 << 4)
#elif BNO055_TEMPERATURE_UNITS == 1
#define TEMPERATURE_UNITS				 		(0b01 << 4)
#endif

static int bno055_read(uint8_t addr, uint8_t *value){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af04      	add	r7, sp, #16
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK){
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	9302      	str	r3, [sp, #8]
 8000c00:	2301      	movs	r3, #1
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	2150      	movs	r1, #80	; 0x50
 8000c0c:	4808      	ldr	r0, [pc, #32]	; (8000c30 <bno055_read+0x44>)
 8000c0e:	f003 ff9f 	bl	8004b50 <HAL_I2C_Mem_Read>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d005      	beq.n	8000c24 <bno055_read+0x38>
		*value = 0;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
		return -1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	e000      	b.n	8000c26 <bno055_read+0x3a>
	}
	return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200004c4 	.word	0x200004c4

08000c34 <bno055_write>:

static int bno055_write(uint8_t addr, uint8_t *value){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af04      	add	r7, sp, #16
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	2364      	movs	r3, #100	; 0x64
 8000c46:	9302      	str	r3, [sp, #8]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2301      	movs	r3, #1
 8000c52:	2150      	movs	r1, #80	; 0x50
 8000c54:	4806      	ldr	r0, [pc, #24]	; (8000c70 <bno055_write+0x3c>)
 8000c56:	f003 fe81 	bl	800495c <HAL_I2C_Mem_Write>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d002      	beq.n	8000c66 <bno055_write+0x32>
		return -1;
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	e000      	b.n	8000c68 <bno055_write+0x34>
	return 0;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200004c4 	.word	0x200004c4

08000c74 <bno055_read_bytes>:

static int bno055_read_bytes(uint8_t addr, uint8_t *value, uint8_t len){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af04      	add	r7, sp, #16
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, len, I2C_TIMEOUT_MS)!= HAL_OK){
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	79bb      	ldrb	r3, [r7, #6]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	2164      	movs	r1, #100	; 0x64
 8000c8e:	9102      	str	r1, [sp, #8]
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2301      	movs	r3, #1
 8000c98:	2150      	movs	r1, #80	; 0x50
 8000c9a:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <bno055_read_bytes+0x50>)
 8000c9c:	f003 ff58 	bl	8004b50 <HAL_I2C_Mem_Read>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d008      	beq.n	8000cb8 <bno055_read_bytes+0x44>
		memset(value,0,len);
 8000ca6:	79bb      	ldrb	r3, [r7, #6]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	2100      	movs	r1, #0
 8000cac:	6838      	ldr	r0, [r7, #0]
 8000cae:	f007 fad9 	bl	8008264 <memset>
		return -1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	e000      	b.n	8000cba <bno055_read_bytes+0x46>
	}
	return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200004c4 	.word	0x200004c4

08000cc8 <bno055_set_operation_mode>:


void bno055_set_operation_mode(bno055_opr_mode_t opr_mode);
void bno055_fusion_data_output_systems(fusion_data_output_systems_t data_systems);

void bno055_set_operation_mode(bno055_opr_mode_t opr_mode){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(opr_mode){
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b0c      	cmp	r3, #12
 8000cd6:	f200 8092 	bhi.w	8000dfe <bno055_set_operation_mode+0x136>
 8000cda:	a201      	add	r2, pc, #4	; (adr r2, 8000ce0 <bno055_set_operation_mode+0x18>)
 8000cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce0:	08000d15 	.word	0x08000d15
 8000ce4:	08000d27 	.word	0x08000d27
 8000ce8:	08000d39 	.word	0x08000d39
 8000cec:	08000d4b 	.word	0x08000d4b
 8000cf0:	08000d5d 	.word	0x08000d5d
 8000cf4:	08000d6f 	.word	0x08000d6f
 8000cf8:	08000d81 	.word	0x08000d81
 8000cfc:	08000d93 	.word	0x08000d93
 8000d00:	08000da5 	.word	0x08000da5
 8000d04:	08000db7 	.word	0x08000db7
 8000d08:	08000dc9 	.word	0x08000dc9
 8000d0c:	08000ddb 	.word	0x08000ddb
 8000d10:	08000ded 	.word	0x08000ded
	case BNO055_OPERATION_CONFIG_MODE:
		tmp = BNO055_OPERATION_CONFIG_MODE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000d18:	f107 030f 	add.w	r3, r7, #15
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	203d      	movs	r0, #61	; 0x3d
 8000d20:	f7ff ff88 	bl	8000c34 <bno055_write>
	break;
 8000d24:	e06b      	b.n	8000dfe <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCONLY:
		tmp = BNO055_OPERATION_MODE_ACCONLY;
 8000d26:	2301      	movs	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000d2a:	f107 030f 	add.w	r3, r7, #15
 8000d2e:	4619      	mov	r1, r3
 8000d30:	203d      	movs	r0, #61	; 0x3d
 8000d32:	f7ff ff7f 	bl	8000c34 <bno055_write>
	break;
 8000d36:	e062      	b.n	8000dfe <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_MAGONLY:
		tmp = BNO055_OPERATION_MODE_MAGONLY;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000d3c:	f107 030f 	add.w	r3, r7, #15
 8000d40:	4619      	mov	r1, r3
 8000d42:	203d      	movs	r0, #61	; 0x3d
 8000d44:	f7ff ff76 	bl	8000c34 <bno055_write>
	break;
 8000d48:	e059      	b.n	8000dfe <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_GYROONLY:
		tmp = BNO055_OPERATION_MODE_GYROONLY;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000d4e:	f107 030f 	add.w	r3, r7, #15
 8000d52:	4619      	mov	r1, r3
 8000d54:	203d      	movs	r0, #61	; 0x3d
 8000d56:	f7ff ff6d 	bl	8000c34 <bno055_write>
	break;
 8000d5a:	e050      	b.n	8000dfe <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCMAG:
		tmp = BNO055_OPERATION_MODE_ACCMAG;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000d60:	f107 030f 	add.w	r3, r7, #15
 8000d64:	4619      	mov	r1, r3
 8000d66:	203d      	movs	r0, #61	; 0x3d
 8000d68:	f7ff ff64 	bl	8000c34 <bno055_write>
	break;
 8000d6c:	e047      	b.n	8000dfe <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCGYRO:
		tmp = BNO055_OPERATION_MODE_ACCGYRO;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000d72:	f107 030f 	add.w	r3, r7, #15
 8000d76:	4619      	mov	r1, r3
 8000d78:	203d      	movs	r0, #61	; 0x3d
 8000d7a:	f7ff ff5b 	bl	8000c34 <bno055_write>
	break;
 8000d7e:	e03e      	b.n	8000dfe <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_MAGGYRO:
		tmp = BNO055_OPERATION_MODE_MAGGYRO;
 8000d80:	2306      	movs	r3, #6
 8000d82:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000d84:	f107 030f 	add.w	r3, r7, #15
 8000d88:	4619      	mov	r1, r3
 8000d8a:	203d      	movs	r0, #61	; 0x3d
 8000d8c:	f7ff ff52 	bl	8000c34 <bno055_write>
	break;
 8000d90:	e035      	b.n	8000dfe <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_AMG:
		tmp = BNO055_OPERATION_MODE_AMG;
 8000d92:	2307      	movs	r3, #7
 8000d94:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000d96:	f107 030f 	add.w	r3, r7, #15
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	203d      	movs	r0, #61	; 0x3d
 8000d9e:	f7ff ff49 	bl	8000c34 <bno055_write>
	break;
 8000da2:	e02c      	b.n	8000dfe <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_IMU:
		tmp = BNO055_OPERATION_MODE_IMU;
 8000da4:	2308      	movs	r3, #8
 8000da6:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000da8:	f107 030f 	add.w	r3, r7, #15
 8000dac:	4619      	mov	r1, r3
 8000dae:	203d      	movs	r0, #61	; 0x3d
 8000db0:	f7ff ff40 	bl	8000c34 <bno055_write>
	break;
 8000db4:	e023      	b.n	8000dfe <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_COMPASS:
		tmp = BNO055_OPERATION_MODE_COMPASS;
 8000db6:	2309      	movs	r3, #9
 8000db8:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000dba:	f107 030f 	add.w	r3, r7, #15
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	203d      	movs	r0, #61	; 0x3d
 8000dc2:	f7ff ff37 	bl	8000c34 <bno055_write>
	break;
 8000dc6:	e01a      	b.n	8000dfe <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_M4G:
		tmp = BNO055_OPERATION_MODE_M4G;
 8000dc8:	230a      	movs	r3, #10
 8000dca:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000dcc:	f107 030f 	add.w	r3, r7, #15
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	203d      	movs	r0, #61	; 0x3d
 8000dd4:	f7ff ff2e 	bl	8000c34 <bno055_write>
	break;
 8000dd8:	e011      	b.n	8000dfe <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_NDOF_FMC_OFF:
		tmp = BNO055_OPERATION_MODE_NDOF_FMC_OFF;
 8000dda:	230b      	movs	r3, #11
 8000ddc:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000dde:	f107 030f 	add.w	r3, r7, #15
 8000de2:	4619      	mov	r1, r3
 8000de4:	203d      	movs	r0, #61	; 0x3d
 8000de6:	f7ff ff25 	bl	8000c34 <bno055_write>
	break;
 8000dea:	e008      	b.n	8000dfe <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_NDOF:
		tmp = BNO055_OPERATION_MODE_NDOF;
 8000dec:	230c      	movs	r3, #12
 8000dee:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000df0:	f107 030f 	add.w	r3, r7, #15
 8000df4:	4619      	mov	r1, r3
 8000df6:	203d      	movs	r0, #61	; 0x3d
 8000df8:	f7ff ff1c 	bl	8000c34 <bno055_write>
	break;
 8000dfc:	bf00      	nop
	}
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop

08000e08 <bno055_fusion_data_output_systems>:

void bno055_fusion_data_output_systems(fusion_data_output_systems_t data_systems){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(data_systems){
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <bno055_fusion_data_output_systems+0x16>
 8000e18:	2b80      	cmp	r3, #128	; 0x80
 8000e1a:	d009      	beq.n	8000e30 <bno055_fusion_data_output_systems+0x28>
	case ANDROID_FUSION_DATA_OUTPUT:
	tmp = ANDROID_FUSION_DATA_OUTPUT;
	bno055_write(UNIT_SEL,&tmp);
	break;
	}
}
 8000e1c:	e011      	b.n	8000e42 <bno055_fusion_data_output_systems+0x3a>
	tmp = WINDOWS_FUSION_DATA_OUTPUT,
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73fb      	strb	r3, [r7, #15]
	bno055_write(UNIT_SEL,&tmp);
 8000e22:	f107 030f 	add.w	r3, r7, #15
 8000e26:	4619      	mov	r1, r3
 8000e28:	203b      	movs	r0, #59	; 0x3b
 8000e2a:	f7ff ff03 	bl	8000c34 <bno055_write>
	break;
 8000e2e:	e008      	b.n	8000e42 <bno055_fusion_data_output_systems+0x3a>
	tmp = ANDROID_FUSION_DATA_OUTPUT;
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	73fb      	strb	r3, [r7, #15]
	bno055_write(UNIT_SEL,&tmp);
 8000e34:	f107 030f 	add.w	r3, r7, #15
 8000e38:	4619      	mov	r1, r3
 8000e3a:	203b      	movs	r0, #59	; 0x3b
 8000e3c:	f7ff fefa 	bl	8000c34 <bno055_write>
	break;
 8000e40:	bf00      	nop
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <bno055_axis_remap_config>:

void bno055_axis_remap_config(bno055_axis_remap_config_t axis_remap){
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(axis_remap){
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2b21      	cmp	r3, #33	; 0x21
 8000e58:	d002      	beq.n	8000e60 <bno055_axis_remap_config+0x16>
 8000e5a:	2b24      	cmp	r3, #36	; 0x24
 8000e5c:	d009      	beq.n	8000e72 <bno055_axis_remap_config+0x28>
	case REMAP_CONFIG_P1_2_4_7:
	tmp = REMAP_CONFIG_P1_2_4_7,
	bno055_write(AXIS_MAP_CONFIG,&tmp);
	break;
	}
}
 8000e5e:	e011      	b.n	8000e84 <bno055_axis_remap_config+0x3a>
	tmp = REMAP_CONFIG_P0_3_5_6,
 8000e60:	2321      	movs	r3, #33	; 0x21
 8000e62:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_CONFIG,&tmp);
 8000e64:	f107 030f 	add.w	r3, r7, #15
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2041      	movs	r0, #65	; 0x41
 8000e6c:	f7ff fee2 	bl	8000c34 <bno055_write>
	break;
 8000e70:	e008      	b.n	8000e84 <bno055_axis_remap_config+0x3a>
	tmp = REMAP_CONFIG_P1_2_4_7,
 8000e72:	2324      	movs	r3, #36	; 0x24
 8000e74:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_CONFIG,&tmp);
 8000e76:	f107 030f 	add.w	r3, r7, #15
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	2041      	movs	r0, #65	; 0x41
 8000e7e:	f7ff fed9 	bl	8000c34 <bno055_write>
	break;
 8000e82:	bf00      	nop
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <bno055_axis_remap_sign>:

void bno055_axis_remap_sign(bno055_axis_remap_sign_t axis_remap_sign){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(axis_remap_sign){
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	d85b      	bhi.n	8000f54 <bno055_axis_remap_sign+0xc8>
 8000e9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <bno055_axis_remap_sign+0x18>)
 8000e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea2:	bf00      	nop
 8000ea4:	08000ed7 	.word	0x08000ed7
 8000ea8:	08000f1f 	.word	0x08000f1f
 8000eac:	08000efb 	.word	0x08000efb
 8000eb0:	08000f0d 	.word	0x08000f0d
 8000eb4:	08000ec5 	.word	0x08000ec5
 8000eb8:	08000f43 	.word	0x08000f43
 8000ebc:	08000ee9 	.word	0x08000ee9
 8000ec0:	08000f31 	.word	0x08000f31
	case REMAP_SIGN_P0:
	tmp = REMAP_SIGN_P0,
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000ec8:	f107 030f 	add.w	r3, r7, #15
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2042      	movs	r0, #66	; 0x42
 8000ed0:	f7ff feb0 	bl	8000c34 <bno055_write>
	break;
 8000ed4:	e03e      	b.n	8000f54 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P1:
	tmp = REMAP_SIGN_P1,
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000eda:	f107 030f 	add.w	r3, r7, #15
 8000ede:	4619      	mov	r1, r3
 8000ee0:	2042      	movs	r0, #66	; 0x42
 8000ee2:	f7ff fea7 	bl	8000c34 <bno055_write>
	break;
 8000ee6:	e035      	b.n	8000f54 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P2:
	tmp = REMAP_SIGN_P2,
 8000ee8:	2306      	movs	r3, #6
 8000eea:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000eec:	f107 030f 	add.w	r3, r7, #15
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	2042      	movs	r0, #66	; 0x42
 8000ef4:	f7ff fe9e 	bl	8000c34 <bno055_write>
	break;
 8000ef8:	e02c      	b.n	8000f54 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P3:
	tmp = REMAP_SIGN_P3,
 8000efa:	2302      	movs	r3, #2
 8000efc:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000efe:	f107 030f 	add.w	r3, r7, #15
 8000f02:	4619      	mov	r1, r3
 8000f04:	2042      	movs	r0, #66	; 0x42
 8000f06:	f7ff fe95 	bl	8000c34 <bno055_write>
	break;
 8000f0a:	e023      	b.n	8000f54 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P4:
	tmp = REMAP_SIGN_P4,
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000f10:	f107 030f 	add.w	r3, r7, #15
 8000f14:	4619      	mov	r1, r3
 8000f16:	2042      	movs	r0, #66	; 0x42
 8000f18:	f7ff fe8c 	bl	8000c34 <bno055_write>
	break;
 8000f1c:	e01a      	b.n	8000f54 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P5:
	tmp = REMAP_SIGN_P5,
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000f22:	f107 030f 	add.w	r3, r7, #15
 8000f26:	4619      	mov	r1, r3
 8000f28:	2042      	movs	r0, #66	; 0x42
 8000f2a:	f7ff fe83 	bl	8000c34 <bno055_write>
	break;
 8000f2e:	e011      	b.n	8000f54 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P6:
	tmp = REMAP_SIGN_P6,
 8000f30:	2307      	movs	r3, #7
 8000f32:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000f34:	f107 030f 	add.w	r3, r7, #15
 8000f38:	4619      	mov	r1, r3
 8000f3a:	2042      	movs	r0, #66	; 0x42
 8000f3c:	f7ff fe7a 	bl	8000c34 <bno055_write>
	break;
 8000f40:	e008      	b.n	8000f54 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P7:
	tmp = REMAP_SIGN_P7,
 8000f42:	2305      	movs	r3, #5
 8000f44:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000f46:	f107 030f 	add.w	r3, r7, #15
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	2042      	movs	r0, #66	; 0x42
 8000f4e:	f7ff fe71 	bl	8000c34 <bno055_write>
	break;
 8000f52:	bf00      	nop
	}
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <bno055_calibrations_status>:

int bno055_calibrations_status(char *sys, char *gyr, char *acc, char *mag){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	603b      	str	r3, [r7, #0]
	uint8_t tmp;
	uint8_t buffer_calib_sta[1] ={};
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	753b      	strb	r3, [r7, #20]
	tmp = 0x00;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	75fb      	strb	r3, [r7, #23]
	bno055_write(PAGE_ID,&tmp);
 8000f72:	f107 0317 	add.w	r3, r7, #23
 8000f76:	4619      	mov	r1, r3
 8000f78:	2007      	movs	r0, #7
 8000f7a:	f7ff fe5b 	bl	8000c34 <bno055_write>
	if(bno055_read(CALIB_STAT,buffer_calib_sta)<0){
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	2035      	movs	r0, #53	; 0x35
 8000f86:	f7ff fe31 	bl	8000bec <bno055_read>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	da02      	bge.n	8000f96 <bno055_calibrations_status+0x3a>
		return -1;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	e012      	b.n	8000fbc <bno055_calibrations_status+0x60>
		*sys = (int8_t)((int8_t)buffer_calib_sta[0])>>6;
		*gyr = (int8_t)((int8_t)buffer_calib_sta[0])>>4 & 0b0011;
		*acc = (int8_t)((int8_t)buffer_calib_sta[0])>>2 & 0b0011;
		*mag = (int8_t)((int8_t)buffer_calib_sta[0]) & 0b0011;
	}
	if((*sys == 3 && *gyr == 3 && *acc == 3 && *mag == 3)){
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d10d      	bne.n	8000fba <bno055_calibrations_status+0x5e>
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d109      	bne.n	8000fba <bno055_calibrations_status+0x5e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d105      	bne.n	8000fba <bno055_calibrations_status+0x5e>
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d101      	bne.n	8000fba <bno055_calibrations_status+0x5e>
		return 1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <bno055_calibrations_status+0x60>
	}
	return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <bno055_initization>:
	st_mcu = (int8_t)((int8_t)buffer_test[0]) & 0b1000;
	if((seft_test = (((st_mcu|st_gyr)|st_mag)|st_acc))!=15) return -1;
	return 0;
}

int bno055_initization(){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af04      	add	r7, sp, #16
	uint8_t tmp,member;
    char i = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	71fb      	strb	r3, [r7, #7]
    char j = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	71bb      	strb	r3, [r7, #6]
    for(i=0;i<1;i++){
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	e026      	b.n	8001026 <bno055_initization+0x62>
  	  for(j=0;j<3;j++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	71bb      	strb	r3, [r7, #6]
 8000fdc:	e01d      	b.n	800101a <bno055_initization+0x56>
  		  if(HAL_I2C_IsDeviceReady(&BNO055__I2C,BNO055_I2C_ADDR, 1, 100)==HAL_OK){
 8000fde:	2364      	movs	r3, #100	; 0x64
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2150      	movs	r1, #80	; 0x50
 8000fe4:	484c      	ldr	r0, [pc, #304]	; (8001118 <bno055_initization+0x154>)
 8000fe6:	f003 ffd9 	bl	8004f9c <HAL_I2C_IsDeviceReady>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d108      	bne.n	8001002 <bno055_initization+0x3e>
  			  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8000ff0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff4:	4849      	ldr	r0, [pc, #292]	; (800111c <bno055_initization+0x158>)
 8000ff6:	f003 fa54 	bl	80044a2 <HAL_GPIO_TogglePin>
  			  HAL_Delay(80);
 8000ffa:	2050      	movs	r0, #80	; 0x50
 8000ffc:	f002 f8bc 	bl	8003178 <HAL_Delay>
 8001000:	e008      	b.n	8001014 <bno055_initization+0x50>
  		  	  }
  		  else{
  			  HAL_GPIO_WritePin(GPIOC,BUZZER_Pin, SET);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	4844      	ldr	r0, [pc, #272]	; (800111c <bno055_initization+0x158>)
 800100a:	f003 fa31 	bl	8004470 <HAL_GPIO_WritePin>
  			  HAL_Delay(100);
 800100e:	2064      	movs	r0, #100	; 0x64
 8001010:	f002 f8b2 	bl	8003178 <HAL_Delay>
  	  for(j=0;j<3;j++){
 8001014:	79bb      	ldrb	r3, [r7, #6]
 8001016:	3301      	adds	r3, #1
 8001018:	71bb      	strb	r3, [r7, #6]
 800101a:	79bb      	ldrb	r3, [r7, #6]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d9de      	bls.n	8000fde <bno055_initization+0x1a>
    for(i=0;i<1;i++){
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	3301      	adds	r3, #1
 8001024:	71fb      	strb	r3, [r7, #7]
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0d5      	beq.n	8000fd8 <bno055_initization+0x14>
  		  }
  	  }
    }
	  /*Reset System */
	  tmp = 0x20;
 800102c:	2320      	movs	r3, #32
 800102e:	717b      	strb	r3, [r7, #5]
	  bno055_write(SYS_TRIGGER,&tmp);
 8001030:	1d7b      	adds	r3, r7, #5
 8001032:	4619      	mov	r1, r3
 8001034:	203f      	movs	r0, #63	; 0x3f
 8001036:	f7ff fdfd 	bl	8000c34 <bno055_write>
      HAL_Delay(600);
 800103a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800103e:	f002 f89b 	bl	8003178 <HAL_Delay>
      member = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	713b      	strb	r3, [r7, #4]
      HAL_I2C_Mem_Read(&BNO055__I2C,BNO055_I2C_ADDR,CHIP_ID_PAGE_0, I2C_MEMADD_SIZE_8BIT, &member, 1, I2C_TIMEOUT_MS);
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	2301      	movs	r3, #1
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	2200      	movs	r2, #0
 8001056:	2150      	movs	r1, #80	; 0x50
 8001058:	482f      	ldr	r0, [pc, #188]	; (8001118 <bno055_initization+0x154>)
 800105a:	f003 fd79 	bl	8004b50 <HAL_I2C_Mem_Read>
      if(member==BNO055_ID){
 800105e:	793b      	ldrb	r3, [r7, #4]
 8001060:	2ba0      	cmp	r3, #160	; 0xa0
 8001062:	d106      	bne.n	8001072 <bno055_initization+0xae>
    	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106a:	482c      	ldr	r0, [pc, #176]	; (800111c <bno055_initization+0x158>)
 800106c:	f003 fa00 	bl	8004470 <HAL_GPIO_WritePin>
 8001070:	e005      	b.n	800107e <bno055_initization+0xba>
      }
      else{
    	  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001078:	4828      	ldr	r0, [pc, #160]	; (800111c <bno055_initization+0x158>)
 800107a:	f003 f9f9 	bl	8004470 <HAL_GPIO_WritePin>
      }
    //set operation_mode BNO055_OPERATION_CONFIG_MODE
    bno055_set_operation_mode(BNO055_OPERATION_CONFIG_MODE);
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fe22 	bl	8000cc8 <bno055_set_operation_mode>
	/* Configurations Power Mode */
	tmp = POWER_MODE_NORMAL;
 8001084:	2300      	movs	r3, #0
 8001086:	717b      	strb	r3, [r7, #5]
	bno055_write(PWR_MODE,&tmp);
 8001088:	1d7b      	adds	r3, r7, #5
 800108a:	4619      	mov	r1, r3
 800108c:	203e      	movs	r0, #62	; 0x3e
 800108e:	f7ff fdd1 	bl	8000c34 <bno055_write>
    //Move to Page 1//
	tmp = 0x01;
 8001092:	2301      	movs	r3, #1
 8001094:	717b      	strb	r3, [r7, #5]
	bno055_write(PAGE_ID,&tmp);
 8001096:	1d7b      	adds	r3, r7, #5
 8001098:	4619      	mov	r1, r3
 800109a:	2007      	movs	r0, #7
 800109c:	f7ff fdca 	bl	8000c34 <bno055_write>
    /* Configurations Accelerometer */
	tmp = (ACCEL_OPERATION_MODE_NORMAL | ACCEL_BANDWIDTH)| ACCEL_G_RANGE;
 80010a0:	230d      	movs	r3, #13
 80010a2:	717b      	strb	r3, [r7, #5]
	bno055_write(ACC_CONFIG,&tmp);
 80010a4:	1d7b      	adds	r3, r7, #5
 80010a6:	4619      	mov	r1, r3
 80010a8:	2008      	movs	r0, #8
 80010aa:	f7ff fdc3 	bl	8000c34 <bno055_write>
    /* Configurations Gyroscope */
	tmp = GYR_BANDWIDTH | GYRO_RANGE;
 80010ae:	2338      	movs	r3, #56	; 0x38
 80010b0:	717b      	strb	r3, [r7, #5]
	bno055_write(GYR_CONFIG_0,&tmp);
 80010b2:	1d7b      	adds	r3, r7, #5
 80010b4:	4619      	mov	r1, r3
 80010b6:	200a      	movs	r0, #10
 80010b8:	f7ff fdbc 	bl	8000c34 <bno055_write>
	tmp = GYR_OPERATION_MODE;
 80010bc:	2300      	movs	r3, #0
 80010be:	717b      	strb	r3, [r7, #5]
	bno055_write(GYR_CONFIG_1,&tmp);
 80010c0:	1d7b      	adds	r3, r7, #5
 80010c2:	4619      	mov	r1, r3
 80010c4:	200b      	movs	r0, #11
 80010c6:	f7ff fdb5 	bl	8000c34 <bno055_write>
    /* Configurations Magnetometer */
	tmp = (MAG_PWR_MODE | MAG_OPERATION_MODE)| BNO055_MAG_DATA_OUTPUT_RATE;
 80010ca:	237b      	movs	r3, #123	; 0x7b
 80010cc:	717b      	strb	r3, [r7, #5]
	bno055_write(MAG_CONFIG,&tmp);
 80010ce:	1d7b      	adds	r3, r7, #5
 80010d0:	4619      	mov	r1, r3
 80010d2:	2009      	movs	r0, #9
 80010d4:	f7ff fdae 	bl	8000c34 <bno055_write>
  	/*Configuration Sensor Unit*/
  	//Move to Page 0//
    tmp = 0x00;
 80010d8:	2300      	movs	r3, #0
 80010da:	717b      	strb	r3, [r7, #5]
    bno055_write(PAGE_ID,&tmp);
 80010dc:	1d7b      	adds	r3, r7, #5
 80010de:	4619      	mov	r1, r3
 80010e0:	2007      	movs	r0, #7
 80010e2:	f7ff fda7 	bl	8000c34 <bno055_write>
    tmp = (((TEMPERATURE_UNITS | EULER_ANGLES_UNITS)| ANGULAR_RATE_UNITS)| BNO055_ACCEL_UNITS);
 80010e6:	2300      	movs	r3, #0
 80010e8:	717b      	strb	r3, [r7, #5]
    bno055_write(UNIT_SEL,&tmp);
 80010ea:	1d7b      	adds	r3, r7, #5
 80010ec:	4619      	mov	r1, r3
 80010ee:	203b      	movs	r0, #59	; 0x3b
 80010f0:	f7ff fda0 	bl	8000c34 <bno055_write>
    bno055_fusion_data_output_systems(WINDOWS_FUSION_DATA_OUTPUT);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff fe87 	bl	8000e08 <bno055_fusion_data_output_systems>
    /* Configure axis mapping*/
    bno055_axis_remap_config(REMAP_CONFIG_P1_2_4_7);
 80010fa:	2024      	movs	r0, #36	; 0x24
 80010fc:	f7ff fea5 	bl	8000e4a <bno055_axis_remap_config>
    bno055_axis_remap_sign(REMAP_SIGN_P1);
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff fec3 	bl	8000e8c <bno055_axis_remap_sign>
    //set BNO055_OPERATION_MODE_NDOF
    bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8001106:	200c      	movs	r0, #12
 8001108:	f7ff fdde 	bl	8000cc8 <bno055_set_operation_mode>
	return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200004c4 	.word	0x200004c4
 800111c:	40020800 	.word	0x40020800

08001120 <bno055_get_temp>:
	*mx = (int16_t)((int16_t)buffer_mag[1]  << 8) | buffer_mag[0]; *mx /= BNO055_MAG_SCALE;
	*my = (int16_t)((int16_t)buffer_mag[3]  << 8) | buffer_mag[2]; *my /= BNO055_MAG_SCALE;
	*mz = (int16_t)((int16_t)buffer_mag[5]  << 8) | buffer_mag[4]; *mz /= BNO055_MAG_SCALE;
	return 0;
}
int bno055_get_temp(float *temp){
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_temp[1] = {};
 8001128:	2300      	movs	r3, #0
 800112a:	733b      	strb	r3, [r7, #12]
	tmp = 0x00;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8001130:	f107 030f 	add.w	r3, r7, #15
 8001134:	4619      	mov	r1, r3
 8001136:	2007      	movs	r0, #7
 8001138:	f7ff fd7c 	bl	8000c34 <bno055_write>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	da02      	bge.n	8001148 <bno055_get_temp+0x28>
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e015      	b.n	8001174 <bno055_get_temp+0x54>
	if(bno055_read_bytes(TEMP,buffer_temp,1)<0){
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2201      	movs	r2, #1
 800114e:	4619      	mov	r1, r3
 8001150:	2034      	movs	r0, #52	; 0x34
 8001152:	f7ff fd8f 	bl	8000c74 <bno055_read_bytes>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	da02      	bge.n	8001162 <bno055_get_temp+0x42>
				return -1;
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	e008      	b.n	8001174 <bno055_get_temp+0x54>
			}
	*temp = buffer_temp[0] / BNO055_TEMP_SCALE;
 8001162:	7b3b      	ldrb	r3, [r7, #12]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <bno055_get_elu_data>:
int bno055_get_elu_data(float *roll, float *pitch, float *yaw){
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_eul[6] = {};
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	2300      	movs	r3, #0
 800118e:	82bb      	strh	r3, [r7, #20]
	tmp = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	75fb      	strb	r3, [r7, #23]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8001194:	f107 0317 	add.w	r3, r7, #23
 8001198:	4619      	mov	r1, r3
 800119a:	2007      	movs	r0, #7
 800119c:	f7ff fd4a 	bl	8000c34 <bno055_write>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da02      	bge.n	80011ac <bno055_get_elu_data+0x30>
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e052      	b.n	8001252 <bno055_get_elu_data+0xd6>
	if(bno055_read_bytes(EUL_HEADING_LSB,buffer_eul,6)<0){
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2206      	movs	r2, #6
 80011b2:	4619      	mov	r1, r3
 80011b4:	201a      	movs	r0, #26
 80011b6:	f7ff fd5d 	bl	8000c74 <bno055_read_bytes>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	da02      	bge.n	80011c6 <bno055_get_elu_data+0x4a>
					return -1;
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	e045      	b.n	8001252 <bno055_get_elu_data+0xd6>
	}
	*yaw = (int16_t)((int16_t)buffer_eul[1]  << 8) | buffer_eul[0]; *yaw /= BNO055_EUL_SCALE;
 80011c6:	7c7b      	ldrb	r3, [r7, #17]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	7c3b      	ldrb	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	edc3 7a00 	vstr	s15, [r3]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	ed93 7a00 	vldr	s14, [r3]
 80011e6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80011ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edc3 7a00 	vstr	s15, [r3]
	*roll = (int16_t)((int16_t)buffer_eul[3]  << 8) | buffer_eul[2]; *roll /= BNO055_EUL_SCALE;
 80011f4:	7cfb      	ldrb	r3, [r7, #19]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	7cbb      	ldrb	r3, [r7, #18]
 80011fe:	4313      	orrs	r3, r2
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	edc3 7a00 	vstr	s15, [r3]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	ed93 7a00 	vldr	s14, [r3]
 8001214:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	edc3 7a00 	vstr	s15, [r3]
	*pitch = (int16_t)((int16_t)buffer_eul[5]  << 8) | buffer_eul[4]; *pitch /= BNO055_EUL_SCALE;
 8001222:	7d7b      	ldrb	r3, [r7, #21]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21b      	sxth	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	7d3b      	ldrb	r3, [r7, #20]
 800122c:	4313      	orrs	r3, r2
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	edc3 7a00 	vstr	s15, [r3]
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	ed93 7a00 	vldr	s14, [r3]
 8001242:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <MX_ADC1_Init+0x9c>)
 8001272:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001276:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800127a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_ADC1_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_ADC1_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <MX_ADC1_Init+0x98>)
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <MX_ADC1_Init+0xa0>)
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012be:	f001 ff7f 	bl	80031c0 <HAL_ADC_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012c8:	f000 fced 	bl	8001ca6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012cc:	230b      	movs	r3, #11
 80012ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012de:	f001 ffb3 	bl	8003248 <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012e8:	f000 fcdd 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000454 	.word	0x20000454
 80012f8:	40012000 	.word	0x40012000
 80012fc:	0f000001 	.word	0x0f000001

08001300 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_ADC_MspInit+0x7c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d127      	bne.n	8001372 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_ADC_MspInit+0x80>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a15      	ldr	r2, [pc, #84]	; (8001380 <HAL_ADC_MspInit+0x80>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_ADC_MspInit+0x80>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_ADC_MspInit+0x80>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_ADC_MspInit+0x80>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_ADC_MspInit+0x80>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = MCU_ADC_1_Pin|MCU_ADC_2_Pin|MCU_ADC_3_Pin;
 800135a:	230e      	movs	r3, #14
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135e:	2303      	movs	r3, #3
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_ADC_MspInit+0x84>)
 800136e:	f002 fee3 	bl	8004138 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40012000 	.word	0x40012000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020800 	.word	0x40020800

08001388 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_CAN2_Init+0x60>)
 800138e:	4a17      	ldr	r2, [pc, #92]	; (80013ec <MX_CAN2_Init+0x64>)
 8001390:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_CAN2_Init+0x60>)
 8001394:	2210      	movs	r2, #16
 8001396:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_CAN2_Init+0x60>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_CAN2_Init+0x60>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_CAN2_Init+0x60>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_CAN2_Init+0x60>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <MX_CAN2_Init+0x60>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_CAN2_Init+0x60>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_CAN2_Init+0x60>)
 80013be:	2200      	movs	r2, #0
 80013c0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_CAN2_Init+0x60>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_CAN2_Init+0x60>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_CAN2_Init+0x60>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_CAN2_Init+0x60>)
 80013d6:	f002 f955 	bl	8003684 <HAL_CAN_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80013e0:	f000 fc61 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000049c 	.word	0x2000049c
 80013ec:	40006800 	.word	0x40006800

080013f0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a20      	ldr	r2, [pc, #128]	; (8001490 <HAL_CAN_MspInit+0xa0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d13a      	bne.n	8001488 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <HAL_CAN_MspInit+0xa4>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <HAL_CAN_MspInit+0xa4>)
 800141c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <HAL_CAN_MspInit+0xa4>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_CAN_MspInit+0xa4>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_CAN_MspInit+0xa4>)
 8001438:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_CAN_MspInit+0xa4>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_CAN_MspInit+0xa4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_CAN_MspInit+0xa4>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_CAN_MspInit+0xa4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = MCU_CAN_RX_Pin|MCU_CAN_TX_Pin;
 8001466:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001478:	2309      	movs	r3, #9
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_CAN_MspInit+0xa8>)
 8001484:	f002 fe58 	bl	8004138 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40006800 	.word	0x40006800
 8001494:	40023800 	.word	0x40023800
 8001498:	40020400 	.word	0x40020400

0800149c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <MX_DMA_Init+0x108>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a3e      	ldr	r2, [pc, #248]	; (80015a4 <MX_DMA_Init+0x108>)
 80014ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <MX_DMA_Init+0x108>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <MX_DMA_Init+0x108>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a37      	ldr	r2, [pc, #220]	; (80015a4 <MX_DMA_Init+0x108>)
 80014c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <MX_DMA_Init+0x108>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	200b      	movs	r0, #11
 80014e0:	f002 fa84 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014e4:	200b      	movs	r0, #11
 80014e6:	f002 fa9d 	bl	8003a24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	200c      	movs	r0, #12
 80014f0:	f002 fa7c 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014f4:	200c      	movs	r0, #12
 80014f6:	f002 fa95 	bl	8003a24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	200d      	movs	r0, #13
 8001500:	f002 fa74 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001504:	200d      	movs	r0, #13
 8001506:	f002 fa8d 	bl	8003a24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	200e      	movs	r0, #14
 8001510:	f002 fa6c 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001514:	200e      	movs	r0, #14
 8001516:	f002 fa85 	bl	8003a24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	200f      	movs	r0, #15
 8001520:	f002 fa64 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001524:	200f      	movs	r0, #15
 8001526:	f002 fa7d 	bl	8003a24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2010      	movs	r0, #16
 8001530:	f002 fa5c 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001534:	2010      	movs	r0, #16
 8001536:	f002 fa75 	bl	8003a24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2011      	movs	r0, #17
 8001540:	f002 fa54 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001544:	2011      	movs	r0, #17
 8001546:	f002 fa6d 	bl	8003a24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	202f      	movs	r0, #47	; 0x2f
 8001550:	f002 fa4c 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001554:	202f      	movs	r0, #47	; 0x2f
 8001556:	f002 fa65 	bl	8003a24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2039      	movs	r0, #57	; 0x39
 8001560:	f002 fa44 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001564:	2039      	movs	r0, #57	; 0x39
 8001566:	f002 fa5d 	bl	8003a24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	203a      	movs	r0, #58	; 0x3a
 8001570:	f002 fa3c 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001574:	203a      	movs	r0, #58	; 0x3a
 8001576:	f002 fa55 	bl	8003a24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2045      	movs	r0, #69	; 0x45
 8001580:	f002 fa34 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001584:	2045      	movs	r0, #69	; 0x45
 8001586:	f002 fa4d 	bl	8003a24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2046      	movs	r0, #70	; 0x46
 8001590:	f002 fa2c 	bl	80039ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001594:	2046      	movs	r0, #70	; 0x46
 8001596:	f002 fa45 	bl	8003a24 <HAL_NVIC_EnableIRQ>

}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <MX_GPIO_Init>:
        * EXTI
     PA15   ------> S_TIM2_CH1_ETR
     PB3   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b54      	ldr	r3, [pc, #336]	; (8001714 <MX_GPIO_Init+0x16c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a53      	ldr	r2, [pc, #332]	; (8001714 <MX_GPIO_Init+0x16c>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b51      	ldr	r3, [pc, #324]	; (8001714 <MX_GPIO_Init+0x16c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <MX_GPIO_Init+0x16c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a4c      	ldr	r2, [pc, #304]	; (8001714 <MX_GPIO_Init+0x16c>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <MX_GPIO_Init+0x16c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b46      	ldr	r3, [pc, #280]	; (8001714 <MX_GPIO_Init+0x16c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a45      	ldr	r2, [pc, #276]	; (8001714 <MX_GPIO_Init+0x16c>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b43      	ldr	r3, [pc, #268]	; (8001714 <MX_GPIO_Init+0x16c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b3f      	ldr	r3, [pc, #252]	; (8001714 <MX_GPIO_Init+0x16c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a3e      	ldr	r2, [pc, #248]	; (8001714 <MX_GPIO_Init+0x16c>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b3c      	ldr	r3, [pc, #240]	; (8001714 <MX_GPIO_Init+0x16c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 800162e:	2200      	movs	r2, #0
 8001630:	f246 0131 	movw	r1, #24625	; 0x6031
 8001634:	4838      	ldr	r0, [pc, #224]	; (8001718 <MX_GPIO_Init+0x170>)
 8001636:	f002 ff1b 	bl	8004470 <HAL_GPIO_WritePin>
                          |ADD_SPI_CSn_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001640:	4836      	ldr	r0, [pc, #216]	; (800171c <MX_GPIO_Init+0x174>)
 8001642:	f002 ff15 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_LORA_RST_GPIO_Port, MCU_LORA_RST_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800164c:	4834      	ldr	r0, [pc, #208]	; (8001720 <MX_GPIO_Init+0x178>)
 800164e:	f002 ff0f 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 8001652:	f246 0331 	movw	r3, #24625	; 0x6031
 8001656:	617b      	str	r3, [r7, #20]
                          |ADD_SPI_CSn_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	482b      	ldr	r0, [pc, #172]	; (8001718 <MX_GPIO_Init+0x170>)
 800166c:	f002 fd64 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001676:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4824      	ldr	r0, [pc, #144]	; (8001718 <MX_GPIO_Init+0x170>)
 8001688:	f002 fd56 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin;
 800168c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	481d      	ldr	r0, [pc, #116]	; (800171c <MX_GPIO_Init+0x174>)
 80016a6:	f002 fd47 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_LORA_RST_Pin;
 80016aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_LORA_RST_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4817      	ldr	r0, [pc, #92]	; (8001720 <MX_GPIO_Init+0x178>)
 80016c4:	f002 fd38 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR1_Pin;
 80016c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016da:	2301      	movs	r3, #1
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR1_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	480e      	ldr	r0, [pc, #56]	; (8001720 <MX_GPIO_Init+0x178>)
 80016e6:	f002 fd27 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR2_Pin;
 80016ea:	2308      	movs	r3, #8
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016fa:	2301      	movs	r3, #1
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR2_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_GPIO_Init+0x174>)
 8001706:	f002 fd17 	bl	8004138 <HAL_GPIO_Init>

}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	40020800 	.word	0x40020800
 800171c:	40020400 	.word	0x40020400
 8001720:	40020000 	.word	0x40020000

08001724 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
	__HAL_RCC_I2C1_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_I2C1_Init+0x74>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a19      	ldr	r2, [pc, #100]	; (8001798 <MX_I2C1_Init+0x74>)
 8001734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <MX_I2C1_Init+0x74>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <MX_I2C1_Init+0x78>)
 8001748:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <MX_I2C1_Init+0x7c>)
 800174a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <MX_I2C1_Init+0x78>)
 800174e:	4a15      	ldr	r2, [pc, #84]	; (80017a4 <MX_I2C1_Init+0x80>)
 8001750:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_I2C1_Init+0x78>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <MX_I2C1_Init+0x78>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_I2C1_Init+0x78>)
 8001760:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001764:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <MX_I2C1_Init+0x78>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_I2C1_Init+0x78>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <MX_I2C1_Init+0x78>)
 8001774:	2200      	movs	r2, #0
 8001776:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_I2C1_Init+0x78>)
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800177e:	4807      	ldr	r0, [pc, #28]	; (800179c <MX_I2C1_Init+0x78>)
 8001780:	f002 feaa 	bl	80044d8 <HAL_I2C_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_I2C1_Init+0x6a>
  {
    Error_Handler();
 800178a:	f000 fa8c 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	200004c4 	.word	0x200004c4
 80017a0:	40005400 	.word	0x40005400
 80017a4:	00061a80 	.word	0x00061a80

080017a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a19      	ldr	r2, [pc, #100]	; (800182c <HAL_I2C_MspInit+0x84>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d12c      	bne.n	8001824 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <HAL_I2C_MspInit+0x88>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a17      	ldr	r2, [pc, #92]	; (8001830 <HAL_I2C_MspInit+0x88>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_I2C_MspInit+0x88>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MCU_I2C_SCL_Pin|MCU_I2C_SDA_Pin;
 80017e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ec:	2312      	movs	r3, #18
 80017ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017f8:	2304      	movs	r3, #4
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	480c      	ldr	r0, [pc, #48]	; (8001834 <HAL_I2C_MspInit+0x8c>)
 8001804:	f002 fc98 	bl	8004138 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_I2C_MspInit+0x88>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_I2C_MspInit+0x88>)
 8001812:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_I2C_MspInit+0x88>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40005400 	.word	0x40005400
 8001830:	40023800 	.word	0x40023800
 8001834:	40020400 	.word	0x40020400

08001838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b096      	sub	sp, #88	; 0x58
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800183e:	f001 fc59 	bl	80030f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001842:	f000 f9b7 	bl	8001bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001846:	f7ff feaf 	bl	80015a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800184a:	f7ff fe27 	bl	800149c <MX_DMA_Init>
  MX_ADC1_Init();
 800184e:	f7ff fd05 	bl	800125c <MX_ADC1_Init>
  MX_CAN2_Init();
 8001852:	f7ff fd99 	bl	8001388 <MX_CAN2_Init>
  MX_I2C1_Init();
 8001856:	f7ff ff65 	bl	8001724 <MX_I2C1_Init>
  MX_SPI1_Init();
 800185a:	f000 fa29 	bl	8001cb0 <MX_SPI1_Init>
  MX_TIM1_Init();
 800185e:	f000 fc45 	bl	80020ec <MX_TIM1_Init>
  MX_TIM3_Init();
 8001862:	f000 fd07 	bl	8002274 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001866:	f000 fda1 	bl	80023ac <MX_TIM8_Init>
  MX_UART4_Init();
 800186a:	f000 ff13 	bl	8002694 <MX_UART4_Init>
  MX_UART5_Init();
 800186e:	f000 ff3b 	bl	80026e8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001872:	f000 ff63 	bl	800273c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001876:	f000 ff8b 	bl	8002790 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800187a:	f000 ffb3 	bl	80027e4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800187e:	f000 ffdb 	bl	8002838 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8001882:	f000 fd45 	bl	8002310 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim5);
 8001886:	48b6      	ldr	r0, [pc, #728]	; (8001b60 <main+0x328>)
 8001888:	f004 fdf6 	bl	8006478 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */
  SSD1306_Init (); // initialize the display
 800188c:	f7fe fe1e 	bl	80004cc <SSD1306_Init>
  SSD1306_GotoXY (10,10); // goto 10, 10
 8001890:	210a      	movs	r1, #10
 8001892:	200a      	movs	r0, #10
 8001894:	f7fe ff84 	bl	80007a0 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_16x26, 1); // print Hello
 8001898:	2201      	movs	r2, #1
 800189a:	49b2      	ldr	r1, [pc, #712]	; (8001b64 <main+0x32c>)
 800189c:	48b2      	ldr	r0, [pc, #712]	; (8001b68 <main+0x330>)
 800189e:	f7ff f815 	bl	80008cc <SSD1306_Puts>
  SSD1306_GotoXY (10, 38);
 80018a2:	2126      	movs	r1, #38	; 0x26
 80018a4:	200a      	movs	r0, #10
 80018a6:	f7fe ff7b 	bl	80007a0 <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD!!", &Font_7x10, 1);
 80018aa:	2201      	movs	r2, #1
 80018ac:	49af      	ldr	r1, [pc, #700]	; (8001b6c <main+0x334>)
 80018ae:	48b0      	ldr	r0, [pc, #704]	; (8001b70 <main+0x338>)
 80018b0:	f7ff f80c 	bl	80008cc <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80018b4:	f7fe fece 	bl	8000654 <SSD1306_UpdateScreen>
  /* Infinite loop */
  bno055_initization();
 80018b8:	f7ff fb84 	bl	8000fc4 <bno055_initization>
    	HAL_Delay(1000);
 80018bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018c0:	f001 fc5a 	bl	8003178 <HAL_Delay>
    	SSD1306_Clear();
 80018c4:	f7ff f827 	bl	8000916 <SSD1306_Clear>
    	char snum_mag[10];
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  bno055_get_temp(&temp);
 80018c8:	48aa      	ldr	r0, [pc, #680]	; (8001b74 <main+0x33c>)
 80018ca:	f7ff fc29 	bl	8001120 <bno055_get_temp>
	  	  temp = temp*1;
 80018ce:	4ba9      	ldr	r3, [pc, #676]	; (8001b74 <main+0x33c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4aa8      	ldr	r2, [pc, #672]	; (8001b74 <main+0x33c>)
 80018d4:	6013      	str	r3, [r2, #0]
	  	  if(temp>20 && temp < 40){
 80018d6:	4ba7      	ldr	r3, [pc, #668]	; (8001b74 <main+0x33c>)
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80018e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	dd10      	ble.n	800190c <main+0xd4>
 80018ea:	4ba2      	ldr	r3, [pc, #648]	; (8001b74 <main+0x33c>)
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001b78 <main+0x340>
 80018f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	d506      	bpl.n	800190c <main+0xd4>
	  		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80018fe:	2201      	movs	r2, #1
 8001900:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001904:	489d      	ldr	r0, [pc, #628]	; (8001b7c <main+0x344>)
 8001906:	f002 fdb3 	bl	8004470 <HAL_GPIO_WritePin>
 800190a:	e005      	b.n	8001918 <main+0xe0>
	  	  }
	  	  else
	  		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001912:	489a      	ldr	r0, [pc, #616]	; (8001b7c <main+0x344>)
 8001914:	f002 fdac 	bl	8004470 <HAL_GPIO_WritePin>
	  	  	bno055_calibrations_status(&calib[0],&calib[1],&calib[2],&calib[3]);
 8001918:	4b99      	ldr	r3, [pc, #612]	; (8001b80 <main+0x348>)
 800191a:	4a9a      	ldr	r2, [pc, #616]	; (8001b84 <main+0x34c>)
 800191c:	499a      	ldr	r1, [pc, #616]	; (8001b88 <main+0x350>)
 800191e:	489b      	ldr	r0, [pc, #620]	; (8001b8c <main+0x354>)
 8001920:	f7ff fb1c 	bl	8000f5c <bno055_calibrations_status>
	  	  	bno055_get_elu_data(&roll, &pitch, &yaw);
 8001924:	4a9a      	ldr	r2, [pc, #616]	; (8001b90 <main+0x358>)
 8001926:	499b      	ldr	r1, [pc, #620]	; (8001b94 <main+0x35c>)
 8001928:	489b      	ldr	r0, [pc, #620]	; (8001b98 <main+0x360>)
 800192a:	f7ff fc27 	bl	800117c <bno055_get_elu_data>
	  	  	//sprintf(snum,"%f",roll);
	  	  	SSD1306_GotoXY (0, 0);
 800192e:	2100      	movs	r1, #0
 8001930:	2000      	movs	r0, #0
 8001932:	f7fe ff35 	bl	80007a0 <SSD1306_GotoXY>
	  	  	SSD1306_Puts ("ROLL: ", &Font_11x18, 1);
 8001936:	2201      	movs	r2, #1
 8001938:	4998      	ldr	r1, [pc, #608]	; (8001b9c <main+0x364>)
 800193a:	4899      	ldr	r0, [pc, #612]	; (8001ba0 <main+0x368>)
 800193c:	f7fe ffc6 	bl	80008cc <SSD1306_Puts>
	  	  	SSD1306_GotoXY (0, 20);
 8001940:	2114      	movs	r1, #20
 8001942:	2000      	movs	r0, #0
 8001944:	f7fe ff2c 	bl	80007a0 <SSD1306_GotoXY>
	  	  	SSD1306_Puts ("PITCH: ", &Font_11x18, 1);
 8001948:	2201      	movs	r2, #1
 800194a:	4994      	ldr	r1, [pc, #592]	; (8001b9c <main+0x364>)
 800194c:	4895      	ldr	r0, [pc, #596]	; (8001ba4 <main+0x36c>)
 800194e:	f7fe ffbd 	bl	80008cc <SSD1306_Puts>
	  	  	SSD1306_GotoXY (0, 40);
 8001952:	2128      	movs	r1, #40	; 0x28
 8001954:	2000      	movs	r0, #0
 8001956:	f7fe ff23 	bl	80007a0 <SSD1306_GotoXY>
	  	  	SSD1306_Puts ("YAW: ", &Font_11x18, 1);
 800195a:	2201      	movs	r2, #1
 800195c:	498f      	ldr	r1, [pc, #572]	; (8001b9c <main+0x364>)
 800195e:	4892      	ldr	r0, [pc, #584]	; (8001ba8 <main+0x370>)
 8001960:	f7fe ffb4 	bl	80008cc <SSD1306_Puts>
			itoa(roll, snum_roll, 10);
 8001964:	4b8c      	ldr	r3, [pc, #560]	; (8001b98 <main+0x360>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800196e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001972:	220a      	movs	r2, #10
 8001974:	4619      	mov	r1, r3
 8001976:	ee17 0a90 	vmov	r0, s15
 800197a:	f006 fc71 	bl	8008260 <itoa>
			itoa(pitch, snum_pitch, 10);
 800197e:	4b85      	ldr	r3, [pc, #532]	; (8001b94 <main+0x35c>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001988:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800198c:	220a      	movs	r2, #10
 800198e:	4619      	mov	r1, r3
 8001990:	ee17 0a90 	vmov	r0, s15
 8001994:	f006 fc64 	bl	8008260 <itoa>
			itoa(yaw, snum_yaw, 10);
 8001998:	4b7d      	ldr	r3, [pc, #500]	; (8001b90 <main+0x358>)
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019a6:	220a      	movs	r2, #10
 80019a8:	4619      	mov	r1, r3
 80019aa:	ee17 0a90 	vmov	r0, s15
 80019ae:	f006 fc57 	bl	8008260 <itoa>
			itoa(calib[0], snum_sys, 10);
 80019b2:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <main+0x354>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019bc:	220a      	movs	r2, #10
 80019be:	4619      	mov	r1, r3
 80019c0:	f006 fc4e 	bl	8008260 <itoa>
			itoa(calib[1], snum_gyro, 10);
 80019c4:	4b71      	ldr	r3, [pc, #452]	; (8001b8c <main+0x354>)
 80019c6:	785b      	ldrb	r3, [r3, #1]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	220a      	movs	r2, #10
 80019d0:	4619      	mov	r1, r3
 80019d2:	f006 fc45 	bl	8008260 <itoa>
			itoa(calib[2], snum_acc, 10);
 80019d6:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <main+0x354>)
 80019d8:	789b      	ldrb	r3, [r3, #2]
 80019da:	4618      	mov	r0, r3
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	220a      	movs	r2, #10
 80019e2:	4619      	mov	r1, r3
 80019e4:	f006 fc3c 	bl	8008260 <itoa>
			itoa(calib[3], snum_mag, 10);
 80019e8:	4b68      	ldr	r3, [pc, #416]	; (8001b8c <main+0x354>)
 80019ea:	78db      	ldrb	r3, [r3, #3]
 80019ec:	4618      	mov	r0, r3
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	220a      	movs	r2, #10
 80019f2:	4619      	mov	r1, r3
 80019f4:	f006 fc34 	bl	8008260 <itoa>

//			SSD1306_GotoXY (0, 0);
//			SSD1306_Puts ("             ", &Font_11x18, 1);
			SSD1306_UpdateScreen();
 80019f8:	f7fe fe2c 	bl	8000654 <SSD1306_UpdateScreen>
			if(roll < 10) {
 80019fc:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <main+0x360>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0e:	d504      	bpl.n	8001a1a <main+0x1e2>
				SSD1306_GotoXY (69, 0);  // 1 DIGIT
 8001a10:	2100      	movs	r1, #0
 8001a12:	2045      	movs	r0, #69	; 0x45
 8001a14:	f7fe fec4 	bl	80007a0 <SSD1306_GotoXY>
 8001a18:	e021      	b.n	8001a5e <main+0x226>
			}
			else if (roll < 100 ) {
 8001a1a:	4b5f      	ldr	r3, [pc, #380]	; (8001b98 <main+0x360>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001bac <main+0x374>
 8001a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2c:	d504      	bpl.n	8001a38 <main+0x200>
				SSD1306_GotoXY (61, 0);  // 2 DIGITS
 8001a2e:	2100      	movs	r1, #0
 8001a30:	203d      	movs	r0, #61	; 0x3d
 8001a32:	f7fe feb5 	bl	80007a0 <SSD1306_GotoXY>
 8001a36:	e012      	b.n	8001a5e <main+0x226>
			}
			else if (roll < 1000 ) {
 8001a38:	4b57      	ldr	r3, [pc, #348]	; (8001b98 <main+0x360>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8001bb0 <main+0x378>
 8001a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	d504      	bpl.n	8001a56 <main+0x21e>
				SSD1306_GotoXY (53, 0);  // 3 DIGITS
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2035      	movs	r0, #53	; 0x35
 8001a50:	f7fe fea6 	bl	80007a0 <SSD1306_GotoXY>
 8001a54:	e003      	b.n	8001a5e <main+0x226>
			}
			else {
				SSD1306_GotoXY (45, 0);  // 4 DIGIS
 8001a56:	2100      	movs	r1, #0
 8001a58:	202d      	movs	r0, #45	; 0x2d
 8001a5a:	f7fe fea1 	bl	80007a0 <SSD1306_GotoXY>
			}

			SSD1306_Puts (snum_roll, &Font_11x18, 1);
 8001a5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a62:	2201      	movs	r2, #1
 8001a64:	494d      	ldr	r1, [pc, #308]	; (8001b9c <main+0x364>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe ff30 	bl	80008cc <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001a6c:	f7fe fdf2 	bl	8000654 <SSD1306_UpdateScreen>

			if(pitch < 10) {
 8001a70:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <main+0x35c>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a82:	d504      	bpl.n	8001a8e <main+0x256>
				SSD1306_GotoXY (69, 20);  // 1 DIGIT
 8001a84:	2114      	movs	r1, #20
 8001a86:	2045      	movs	r0, #69	; 0x45
 8001a88:	f7fe fe8a 	bl	80007a0 <SSD1306_GotoXY>
 8001a8c:	e021      	b.n	8001ad2 <main+0x29a>
			}
			else if (pitch < 100 ) {
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <main+0x35c>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001bac <main+0x374>
 8001a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	d504      	bpl.n	8001aac <main+0x274>
				SSD1306_GotoXY (61, 20);  // 2 DIGITS
 8001aa2:	2114      	movs	r1, #20
 8001aa4:	203d      	movs	r0, #61	; 0x3d
 8001aa6:	f7fe fe7b 	bl	80007a0 <SSD1306_GotoXY>
 8001aaa:	e012      	b.n	8001ad2 <main+0x29a>
			}
			else if (pitch < 1000 ) {
 8001aac:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <main+0x35c>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001bb0 <main+0x378>
 8001ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	d504      	bpl.n	8001aca <main+0x292>
				SSD1306_GotoXY (53, 20);  // 3 DIGITS
 8001ac0:	2114      	movs	r1, #20
 8001ac2:	2035      	movs	r0, #53	; 0x35
 8001ac4:	f7fe fe6c 	bl	80007a0 <SSD1306_GotoXY>
 8001ac8:	e003      	b.n	8001ad2 <main+0x29a>
			}
			else {
				SSD1306_GotoXY (45, 20);  // 4 DIGIS
 8001aca:	2114      	movs	r1, #20
 8001acc:	202d      	movs	r0, #45	; 0x2d
 8001ace:	f7fe fe67 	bl	80007a0 <SSD1306_GotoXY>
			}

			SSD1306_Puts (snum_pitch, &Font_11x18, 1);
 8001ad2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4930      	ldr	r1, [pc, #192]	; (8001b9c <main+0x364>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fef6 	bl	80008cc <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001ae0:	f7fe fdb8 	bl	8000654 <SSD1306_UpdateScreen>

			if(yaw < 10) {
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <main+0x358>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af6:	d504      	bpl.n	8001b02 <main+0x2ca>
				SSD1306_GotoXY (69, 40);  // 1 DIGIT
 8001af8:	2128      	movs	r1, #40	; 0x28
 8001afa:	2045      	movs	r0, #69	; 0x45
 8001afc:	f7fe fe50 	bl	80007a0 <SSD1306_GotoXY>
 8001b00:	e021      	b.n	8001b46 <main+0x30e>
			}
			else if (yaw < 100 ) {
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <main+0x358>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001bac <main+0x374>
 8001b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	d504      	bpl.n	8001b20 <main+0x2e8>
				SSD1306_GotoXY (61, 40);  // 2 DIGITS
 8001b16:	2128      	movs	r1, #40	; 0x28
 8001b18:	203d      	movs	r0, #61	; 0x3d
 8001b1a:	f7fe fe41 	bl	80007a0 <SSD1306_GotoXY>
 8001b1e:	e012      	b.n	8001b46 <main+0x30e>
			}
			else if (yaw < 1000 ) {
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <main+0x358>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001bb0 <main+0x378>
 8001b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	d504      	bpl.n	8001b3e <main+0x306>
				SSD1306_GotoXY (53, 40);  // 3 DIGITS
 8001b34:	2128      	movs	r1, #40	; 0x28
 8001b36:	2035      	movs	r0, #53	; 0x35
 8001b38:	f7fe fe32 	bl	80007a0 <SSD1306_GotoXY>
 8001b3c:	e003      	b.n	8001b46 <main+0x30e>
			}
			else {
				SSD1306_GotoXY (45, 40);  // 4 DIGIS
 8001b3e:	2128      	movs	r1, #40	; 0x28
 8001b40:	202d      	movs	r0, #45	; 0x2d
 8001b42:	f7fe fe2d 	bl	80007a0 <SSD1306_GotoXY>
			}

			SSD1306_Puts (snum_yaw, &Font_11x18, 1);
 8001b46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4913      	ldr	r1, [pc, #76]	; (8001b9c <main+0x364>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe febc 	bl	80008cc <SSD1306_Puts>
//			SSD1306_Puts (snum_acc, &Font_7x10, 1);
//
//			SSD1306_GotoXY (100, 45);
//			SSD1306_Puts (snum_mag, &Font_7x10, 1);

			SSD1306_UpdateScreen();
 8001b54:	f7fe fd7e 	bl	8000654 <SSD1306_UpdateScreen>

			//SSD1306_Clear();
			HAL_Delay(100);
 8001b58:	2064      	movs	r0, #100	; 0x64
 8001b5a:	f001 fb0d 	bl	8003178 <HAL_Delay>
	  bno055_get_temp(&temp);
 8001b5e:	e6b3      	b.n	80018c8 <main+0x90>
 8001b60:	2000065c 	.word	0x2000065c
 8001b64:	20000010 	.word	0x20000010
 8001b68:	08008310 	.word	0x08008310
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	08008318 	.word	0x08008318
 8001b74:	2000051c 	.word	0x2000051c
 8001b78:	42200000 	.word	0x42200000
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	2000051b 	.word	0x2000051b
 8001b84:	2000051a 	.word	0x2000051a
 8001b88:	20000519 	.word	0x20000519
 8001b8c:	20000518 	.word	0x20000518
 8001b90:	20000528 	.word	0x20000528
 8001b94:	20000524 	.word	0x20000524
 8001b98:	20000520 	.word	0x20000520
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	08008320 	.word	0x08008320
 8001ba4:	08008328 	.word	0x08008328
 8001ba8:	08008330 	.word	0x08008330
 8001bac:	42c80000 	.word	0x42c80000
 8001bb0:	447a0000 	.word	0x447a0000

08001bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b094      	sub	sp, #80	; 0x50
 8001bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bba:	f107 0320 	add.w	r3, r7, #32
 8001bbe:	2230      	movs	r2, #48	; 0x30
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f006 fb4e 	bl	8008264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <SystemClock_Config+0xcc>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <SystemClock_Config+0xcc>)
 8001be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be6:	6413      	str	r3, [r2, #64]	; 0x40
 8001be8:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <SystemClock_Config+0xcc>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <SystemClock_Config+0xd0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <SystemClock_Config+0xd0>)
 8001bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <SystemClock_Config+0xd0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c10:	2302      	movs	r3, #2
 8001c12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c14:	2301      	movs	r3, #1
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c18:	2310      	movs	r3, #16
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c20:	2300      	movs	r3, #0
 8001c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c24:	2308      	movs	r3, #8
 8001c26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c28:	23a8      	movs	r3, #168	; 0xa8
 8001c2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c30:	2304      	movs	r3, #4
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c34:	f107 0320 	add.w	r3, r7, #32
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 febb 	bl	80059b4 <HAL_RCC_OscConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c44:	f000 f82f 	bl	8001ca6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c48:	230f      	movs	r3, #15
 8001c4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	2105      	movs	r1, #5
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 f91c 	bl	8005ea4 <HAL_RCC_ClockConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c72:	f000 f818 	bl	8001ca6 <Error_Handler>
  }
}
 8001c76:	bf00      	nop
 8001c78:	3750      	adds	r7, #80	; 0x50
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000

08001c88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c98:	d101      	bne.n	8001c9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c9a:	f001 fa4d 	bl	8003138 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001caa:	b672      	cpsid	i
}
 8001cac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cae:	e7fe      	b.n	8001cae <Error_Handler+0x8>

08001cb0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <MX_SPI1_Init+0x68>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cdc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ce0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cfc:	220a      	movs	r2, #10
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001d02:	f004 fae1 	bl	80062c8 <HAL_SPI_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d0c:	f7ff ffcb 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	2000052c 	.word	0x2000052c
 8001d18:	40013000 	.word	0x40013000

08001d1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <HAL_SPI_MspInit+0x84>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d12b      	bne.n	8001d96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_SPI_MspInit+0x88>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <HAL_SPI_MspInit+0x88>)
 8001d48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_SPI_MspInit+0x88>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_SPI_MspInit+0x88>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <HAL_SPI_MspInit+0x88>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_SPI_MspInit+0x88>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADNS_SPI_CSn_Pin|MCU_SPI_SCK_Pin|MCU_SPI_MISO_Pin|MCU_SPI_MOSI_Pin;
 8001d76:	23f0      	movs	r3, #240	; 0xf0
 8001d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d86:	2305      	movs	r3, #5
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <HAL_SPI_MspInit+0x8c>)
 8001d92:	f002 f9d1 	bl	8004138 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	; 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40013000 	.word	0x40013000
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020000 	.word	0x40020000

08001dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_MspInit+0x4c>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a0f      	ldr	r2, [pc, #60]	; (8001df8 <HAL_MspInit+0x4c>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_MspInit+0x4c>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_MspInit+0x4c>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <HAL_MspInit+0x4c>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_MspInit+0x4c>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800

08001dfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	; 0x38
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <HAL_InitTick+0xe8>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	4a33      	ldr	r2, [pc, #204]	; (8001ee4 <HAL_InitTick+0xe8>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1c:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HAL_InitTick+0xe8>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e28:	f107 0210 	add.w	r2, r7, #16
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f004 fa16 	bl	8006264 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e42:	f004 f9e7 	bl	8006214 <HAL_RCC_GetPCLK1Freq>
 8001e46:	6378      	str	r0, [r7, #52]	; 0x34
 8001e48:	e004      	b.n	8001e54 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e4a:	f004 f9e3 	bl	8006214 <HAL_RCC_GetPCLK1Freq>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e56:	4a24      	ldr	r2, [pc, #144]	; (8001ee8 <HAL_InitTick+0xec>)
 8001e58:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5c:	0c9b      	lsrs	r3, r3, #18
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <HAL_InitTick+0xf0>)
 8001e64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_InitTick+0xf0>)
 8001e6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e70:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001e72:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <HAL_InitTick+0xf0>)
 8001e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e76:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001e78:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <HAL_InitTick+0xf0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_InitTick+0xf0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_InitTick+0xf0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001e8a:	4818      	ldr	r0, [pc, #96]	; (8001eec <HAL_InitTick+0xf0>)
 8001e8c:	f004 faa5 	bl	80063da <HAL_TIM_Base_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d11b      	bne.n	8001ed6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001e9e:	4813      	ldr	r0, [pc, #76]	; (8001eec <HAL_InitTick+0xf0>)
 8001ea0:	f004 fb52 	bl	8006548 <HAL_TIM_Base_Start_IT>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001eaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d111      	bne.n	8001ed6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eb2:	201c      	movs	r0, #28
 8001eb4:	f001 fdb6 	bl	8003a24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b0f      	cmp	r3, #15
 8001ebc:	d808      	bhi.n	8001ed0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	201c      	movs	r0, #28
 8001ec4:	f001 fd92 	bl	80039ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ec8:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_InitTick+0xf4>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e002      	b.n	8001ed6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ed6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3738      	adds	r7, #56	; 0x38
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	431bde83 	.word	0x431bde83
 8001eec:	20000584 	.word	0x20000584
 8001ef0:	2000001c 	.word	0x2000001c

08001ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <NMI_Handler+0x4>

08001efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <HardFault_Handler+0x4>

08001f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <MemManage_Handler+0x4>

08001f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <DMA1_Stream0_IRQHandler+0x10>)
 8001f52:	f001 feb5 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000944 	.word	0x20000944

08001f60 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <DMA1_Stream1_IRQHandler+0x10>)
 8001f66:	f001 feab 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000b84 	.word	0x20000b84

08001f74 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <DMA1_Stream2_IRQHandler+0x10>)
 8001f7a:	f001 fea1 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000884 	.word	0x20000884

08001f88 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <DMA1_Stream3_IRQHandler+0x10>)
 8001f8e:	f001 fe97 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000be4 	.word	0x20000be4

08001f9c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <DMA1_Stream4_IRQHandler+0x10>)
 8001fa2:	f001 fe8d 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200008e4 	.word	0x200008e4

08001fb0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <DMA1_Stream5_IRQHandler+0x10>)
 8001fb6:	f001 fe83 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000ac4 	.word	0x20000ac4

08001fc4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DMA1_Stream6_IRQHandler+0x10>)
 8001fca:	f001 fe79 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000b24 	.word	0x20000b24

08001fd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <TIM2_IRQHandler+0x10>)
 8001fde:	f004 fb7c 	bl	80066da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000584 	.word	0x20000584

08001fec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <USART1_IRQHandler+0x10>)
 8001ff2:	f005 fa47 	bl	8007484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000774 	.word	0x20000774

08002000 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <USART2_IRQHandler+0x10>)
 8002006:	f005 fa3d 	bl	8007484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200007b8 	.word	0x200007b8

08002014 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <USART3_IRQHandler+0x10>)
 800201a:	f005 fa33 	bl	8007484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200007fc 	.word	0x200007fc

08002028 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <DMA1_Stream7_IRQHandler+0x10>)
 800202e:	f001 fe47 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200009a4 	.word	0x200009a4

0800203c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <UART4_IRQHandler+0x10>)
 8002042:	f005 fa1f 	bl	8007484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200006ec 	.word	0x200006ec

08002050 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <UART5_IRQHandler+0x10>)
 8002056:	f005 fa15 	bl	8007484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000730 	.word	0x20000730

08002064 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <DMA2_Stream1_IRQHandler+0x10>)
 800206a:	f001 fe29 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000c44 	.word	0x20000c44

08002078 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <DMA2_Stream2_IRQHandler+0x10>)
 800207e:	f001 fe1f 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000a04 	.word	0x20000a04

0800208c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <DMA2_Stream6_IRQHandler+0x10>)
 8002092:	f001 fe15 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000ca4 	.word	0x20000ca4

080020a0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <DMA2_Stream7_IRQHandler+0x10>)
 80020a6:	f001 fe0b 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000a64 	.word	0x20000a64

080020b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <USART6_IRQHandler+0x10>)
 80020ba:	f005 f9e3 	bl	8007484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000840 	.word	0x20000840

080020c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <SystemInit+0x20>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <SystemInit+0x20>)
 80020d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b096      	sub	sp, #88	; 0x58
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002100:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800210a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	611a      	str	r2, [r3, #16]
 800211a:	615a      	str	r2, [r3, #20]
 800211c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	2220      	movs	r2, #32
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f006 f89d 	bl	8008264 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800212a:	4b50      	ldr	r3, [pc, #320]	; (800226c <MX_TIM1_Init+0x180>)
 800212c:	4a50      	ldr	r2, [pc, #320]	; (8002270 <MX_TIM1_Init+0x184>)
 800212e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002130:	4b4e      	ldr	r3, [pc, #312]	; (800226c <MX_TIM1_Init+0x180>)
 8002132:	2200      	movs	r2, #0
 8002134:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002136:	4b4d      	ldr	r3, [pc, #308]	; (800226c <MX_TIM1_Init+0x180>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800213c:	4b4b      	ldr	r3, [pc, #300]	; (800226c <MX_TIM1_Init+0x180>)
 800213e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002142:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002144:	4b49      	ldr	r3, [pc, #292]	; (800226c <MX_TIM1_Init+0x180>)
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800214a:	4b48      	ldr	r3, [pc, #288]	; (800226c <MX_TIM1_Init+0x180>)
 800214c:	2200      	movs	r2, #0
 800214e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002150:	4b46      	ldr	r3, [pc, #280]	; (800226c <MX_TIM1_Init+0x180>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002156:	4845      	ldr	r0, [pc, #276]	; (800226c <MX_TIM1_Init+0x180>)
 8002158:	f004 f93f 	bl	80063da <HAL_TIM_Base_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002162:	f7ff fda0 	bl	8001ca6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800216c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002170:	4619      	mov	r1, r3
 8002172:	483e      	ldr	r0, [pc, #248]	; (800226c <MX_TIM1_Init+0x180>)
 8002174:	f004 fc7c 	bl	8006a70 <HAL_TIM_ConfigClockSource>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800217e:	f7ff fd92 	bl	8001ca6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002182:	483a      	ldr	r0, [pc, #232]	; (800226c <MX_TIM1_Init+0x180>)
 8002184:	f004 fa50 	bl	8006628 <HAL_TIM_PWM_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800218e:	f7ff fd8a 	bl	8001ca6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800219a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800219e:	4619      	mov	r1, r3
 80021a0:	4832      	ldr	r0, [pc, #200]	; (800226c <MX_TIM1_Init+0x180>)
 80021a2:	f005 f83f 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80021ac:	f7ff fd7b 	bl	8001ca6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b0:	2360      	movs	r3, #96	; 0x60
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021bc:	2300      	movs	r3, #0
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	2200      	movs	r2, #0
 80021d2:	4619      	mov	r1, r3
 80021d4:	4825      	ldr	r0, [pc, #148]	; (800226c <MX_TIM1_Init+0x180>)
 80021d6:	f004 fb89 	bl	80068ec <HAL_TIM_PWM_ConfigChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80021e0:	f7ff fd61 	bl	8001ca6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	2204      	movs	r2, #4
 80021ea:	4619      	mov	r1, r3
 80021ec:	481f      	ldr	r0, [pc, #124]	; (800226c <MX_TIM1_Init+0x180>)
 80021ee:	f004 fb7d 	bl	80068ec <HAL_TIM_PWM_ConfigChannel>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80021f8:	f7ff fd55 	bl	8001ca6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002200:	2208      	movs	r2, #8
 8002202:	4619      	mov	r1, r3
 8002204:	4819      	ldr	r0, [pc, #100]	; (800226c <MX_TIM1_Init+0x180>)
 8002206:	f004 fb71 	bl	80068ec <HAL_TIM_PWM_ConfigChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002210:	f7ff fd49 	bl	8001ca6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002218:	220c      	movs	r2, #12
 800221a:	4619      	mov	r1, r3
 800221c:	4813      	ldr	r0, [pc, #76]	; (800226c <MX_TIM1_Init+0x180>)
 800221e:	f004 fb65 	bl	80068ec <HAL_TIM_PWM_ConfigChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002228:	f7ff fd3d 	bl	8001ca6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002244:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	4619      	mov	r1, r3
 800224e:	4807      	ldr	r0, [pc, #28]	; (800226c <MX_TIM1_Init+0x180>)
 8002250:	f005 f864 	bl	800731c <HAL_TIMEx_ConfigBreakDeadTime>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800225a:	f7ff fd24 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800225e:	4803      	ldr	r0, [pc, #12]	; (800226c <MX_TIM1_Init+0x180>)
 8002260:	f000 f9b4 	bl	80025cc <HAL_TIM_MspPostInit>

}
 8002264:	bf00      	nop
 8002266:	3758      	adds	r7, #88	; 0x58
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200005cc 	.word	0x200005cc
 8002270:	40010000 	.word	0x40010000

08002274 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227a:	f107 0308 	add.w	r3, r7, #8
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002288:	463b      	mov	r3, r7
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <MX_TIM3_Init+0x94>)
 8002292:	4a1e      	ldr	r2, [pc, #120]	; (800230c <MX_TIM3_Init+0x98>)
 8002294:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <MX_TIM3_Init+0x94>)
 8002298:	2200      	movs	r2, #0
 800229a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <MX_TIM3_Init+0x94>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <MX_TIM3_Init+0x94>)
 80022a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <MX_TIM3_Init+0x94>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <MX_TIM3_Init+0x94>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022b6:	4814      	ldr	r0, [pc, #80]	; (8002308 <MX_TIM3_Init+0x94>)
 80022b8:	f004 f88f 	bl	80063da <HAL_TIM_Base_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80022c2:	f7ff fcf0 	bl	8001ca6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	4619      	mov	r1, r3
 80022d2:	480d      	ldr	r0, [pc, #52]	; (8002308 <MX_TIM3_Init+0x94>)
 80022d4:	f004 fbcc 	bl	8006a70 <HAL_TIM_ConfigClockSource>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80022de:	f7ff fce2 	bl	8001ca6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022ea:	463b      	mov	r3, r7
 80022ec:	4619      	mov	r1, r3
 80022ee:	4806      	ldr	r0, [pc, #24]	; (8002308 <MX_TIM3_Init+0x94>)
 80022f0:	f004 ff98 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80022fa:	f7ff fcd4 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000614 	.word	0x20000614
 800230c:	40000400 	.word	0x40000400

08002310 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002324:	463b      	mov	r3, r7
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <MX_TIM5_Init+0x94>)
 800232e:	4a1e      	ldr	r2, [pc, #120]	; (80023a8 <MX_TIM5_Init+0x98>)
 8002330:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <MX_TIM5_Init+0x94>)
 8002334:	2253      	movs	r2, #83	; 0x53
 8002336:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <MX_TIM5_Init+0x94>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff -1;
 800233e:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <MX_TIM5_Init+0x94>)
 8002340:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002344:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <MX_TIM5_Init+0x94>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <MX_TIM5_Init+0x94>)
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002352:	4814      	ldr	r0, [pc, #80]	; (80023a4 <MX_TIM5_Init+0x94>)
 8002354:	f004 f841 	bl	80063da <HAL_TIM_Base_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800235e:	f7ff fca2 	bl	8001ca6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	4619      	mov	r1, r3
 800236e:	480d      	ldr	r0, [pc, #52]	; (80023a4 <MX_TIM5_Init+0x94>)
 8002370:	f004 fb7e 	bl	8006a70 <HAL_TIM_ConfigClockSource>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800237a:	f7ff fc94 	bl	8001ca6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002386:	463b      	mov	r3, r7
 8002388:	4619      	mov	r1, r3
 800238a:	4806      	ldr	r0, [pc, #24]	; (80023a4 <MX_TIM5_Init+0x94>)
 800238c:	f004 ff4a 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002396:	f7ff fc86 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000065c 	.word	0x2000065c
 80023a8:	40000c00 	.word	0x40000c00

080023ac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b096      	sub	sp, #88	; 0x58
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]
 80023da:	615a      	str	r2, [r3, #20]
 80023dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2220      	movs	r2, #32
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f005 ff3d 	bl	8008264 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80023ea:	4b44      	ldr	r3, [pc, #272]	; (80024fc <MX_TIM8_Init+0x150>)
 80023ec:	4a44      	ldr	r2, [pc, #272]	; (8002500 <MX_TIM8_Init+0x154>)
 80023ee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80023f0:	4b42      	ldr	r3, [pc, #264]	; (80024fc <MX_TIM8_Init+0x150>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <MX_TIM8_Init+0x150>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80023fc:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <MX_TIM8_Init+0x150>)
 80023fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002402:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002404:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <MX_TIM8_Init+0x150>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800240a:	4b3c      	ldr	r3, [pc, #240]	; (80024fc <MX_TIM8_Init+0x150>)
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <MX_TIM8_Init+0x150>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002416:	4839      	ldr	r0, [pc, #228]	; (80024fc <MX_TIM8_Init+0x150>)
 8002418:	f003 ffdf 	bl	80063da <HAL_TIM_Base_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002422:	f7ff fc40 	bl	8001ca6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800242c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002430:	4619      	mov	r1, r3
 8002432:	4832      	ldr	r0, [pc, #200]	; (80024fc <MX_TIM8_Init+0x150>)
 8002434:	f004 fb1c 	bl	8006a70 <HAL_TIM_ConfigClockSource>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800243e:	f7ff fc32 	bl	8001ca6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002442:	482e      	ldr	r0, [pc, #184]	; (80024fc <MX_TIM8_Init+0x150>)
 8002444:	f004 f8f0 	bl	8006628 <HAL_TIM_PWM_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800244e:	f7ff fc2a 	bl	8001ca6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800245a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800245e:	4619      	mov	r1, r3
 8002460:	4826      	ldr	r0, [pc, #152]	; (80024fc <MX_TIM8_Init+0x150>)
 8002462:	f004 fedf 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800246c:	f7ff fc1b 	bl	8001ca6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002470:	2360      	movs	r3, #96	; 0x60
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002478:	2300      	movs	r3, #0
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800247c:	2300      	movs	r3, #0
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002488:	2300      	movs	r3, #0
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	2208      	movs	r2, #8
 8002492:	4619      	mov	r1, r3
 8002494:	4819      	ldr	r0, [pc, #100]	; (80024fc <MX_TIM8_Init+0x150>)
 8002496:	f004 fa29 	bl	80068ec <HAL_TIM_PWM_ConfigChannel>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80024a0:	f7ff fc01 	bl	8001ca6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a8:	220c      	movs	r2, #12
 80024aa:	4619      	mov	r1, r3
 80024ac:	4813      	ldr	r0, [pc, #76]	; (80024fc <MX_TIM8_Init+0x150>)
 80024ae:	f004 fa1d 	bl	80068ec <HAL_TIM_PWM_ConfigChannel>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80024b8:	f7ff fbf5 	bl	8001ca6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	4619      	mov	r1, r3
 80024de:	4807      	ldr	r0, [pc, #28]	; (80024fc <MX_TIM8_Init+0x150>)
 80024e0:	f004 ff1c 	bl	800731c <HAL_TIMEx_ConfigBreakDeadTime>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80024ea:	f7ff fbdc 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80024ee:	4803      	ldr	r0, [pc, #12]	; (80024fc <MX_TIM8_Init+0x150>)
 80024f0:	f000 f86c 	bl	80025cc <HAL_TIM_MspPostInit>

}
 80024f4:	bf00      	nop
 80024f6:	3758      	adds	r7, #88	; 0x58
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200006a4 	.word	0x200006a4
 8002500:	40010400 	.word	0x40010400

08002504 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a29      	ldr	r2, [pc, #164]	; (80025b8 <HAL_TIM_Base_MspInit+0xb4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d10e      	bne.n	8002534 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	4b28      	ldr	r3, [pc, #160]	; (80025bc <HAL_TIM_Base_MspInit+0xb8>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	4a27      	ldr	r2, [pc, #156]	; (80025bc <HAL_TIM_Base_MspInit+0xb8>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6453      	str	r3, [r2, #68]	; 0x44
 8002526:	4b25      	ldr	r3, [pc, #148]	; (80025bc <HAL_TIM_Base_MspInit+0xb8>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002532:	e03a      	b.n	80025aa <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a21      	ldr	r2, [pc, #132]	; (80025c0 <HAL_TIM_Base_MspInit+0xbc>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10e      	bne.n	800255c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <HAL_TIM_Base_MspInit+0xb8>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_TIM_Base_MspInit+0xb8>)
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_TIM_Base_MspInit+0xb8>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	693b      	ldr	r3, [r7, #16]
}
 800255a:	e026      	b.n	80025aa <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <HAL_TIM_Base_MspInit+0xc0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10e      	bne.n	8002584 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_TIM_Base_MspInit+0xb8>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a13      	ldr	r2, [pc, #76]	; (80025bc <HAL_TIM_Base_MspInit+0xb8>)
 8002570:	f043 0308 	orr.w	r3, r3, #8
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_TIM_Base_MspInit+0xb8>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
}
 8002582:	e012      	b.n	80025aa <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <HAL_TIM_Base_MspInit+0xc4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d10d      	bne.n	80025aa <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_TIM_Base_MspInit+0xb8>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	4a09      	ldr	r2, [pc, #36]	; (80025bc <HAL_TIM_Base_MspInit+0xb8>)
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_TIM_Base_MspInit+0xb8>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
}
 80025aa:	bf00      	nop
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40010000 	.word	0x40010000
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40000c00 	.word	0x40000c00
 80025c8:	40010400 	.word	0x40010400

080025cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a25      	ldr	r2, [pc, #148]	; (8002680 <HAL_TIM_MspPostInit+0xb4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d11f      	bne.n	800262e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_TIM_MspPostInit+0xb8>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a23      	ldr	r2, [pc, #140]	; (8002684 <HAL_TIM_MspPostInit+0xb8>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b21      	ldr	r3, [pc, #132]	; (8002684 <HAL_TIM_MspPostInit+0xb8>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MTR1_PWM_MCU_Pin|MTR2_PWM_MCU_Pin|MTR3_PWM_MCU_Pin|MTR4_PWM_MCU_Pin;
 800260a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800260e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800261c:	2301      	movs	r3, #1
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	4818      	ldr	r0, [pc, #96]	; (8002688 <HAL_TIM_MspPostInit+0xbc>)
 8002628:	f001 fd86 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800262c:	e023      	b.n	8002676 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a16      	ldr	r2, [pc, #88]	; (800268c <HAL_TIM_MspPostInit+0xc0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d11e      	bne.n	8002676 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_TIM_MspPostInit+0xb8>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	4a10      	ldr	r2, [pc, #64]	; (8002684 <HAL_TIM_MspPostInit+0xb8>)
 8002642:	f043 0304 	orr.w	r3, r3, #4
 8002646:	6313      	str	r3, [r2, #48]	; 0x30
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_TIM_MspPostInit+0xb8>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_PWM_TIM8_CH3_Pin|LED_5050_PWM_IN_Pin;
 8002654:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002666:	2303      	movs	r3, #3
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	4807      	ldr	r0, [pc, #28]	; (8002690 <HAL_TIM_MspPostInit+0xc4>)
 8002672:	f001 fd61 	bl	8004138 <HAL_GPIO_Init>
}
 8002676:	bf00      	nop
 8002678:	3728      	adds	r7, #40	; 0x28
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40010000 	.word	0x40010000
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000
 800268c:	40010400 	.word	0x40010400
 8002690:	40020800 	.word	0x40020800

08002694 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <MX_UART4_Init+0x4c>)
 800269a:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <MX_UART4_Init+0x50>)
 800269c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <MX_UART4_Init+0x4c>)
 80026a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <MX_UART4_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <MX_UART4_Init+0x4c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <MX_UART4_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <MX_UART4_Init+0x4c>)
 80026ba:	220c      	movs	r2, #12
 80026bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <MX_UART4_Init+0x4c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <MX_UART4_Init+0x4c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <MX_UART4_Init+0x4c>)
 80026cc:	f004 fe8c 	bl	80073e8 <HAL_UART_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80026d6:	f7ff fae6 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200006ec 	.word	0x200006ec
 80026e4:	40004c00 	.word	0x40004c00

080026e8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <MX_UART5_Init+0x4c>)
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <MX_UART5_Init+0x50>)
 80026f0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <MX_UART5_Init+0x4c>)
 80026f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026f8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <MX_UART5_Init+0x4c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <MX_UART5_Init+0x4c>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <MX_UART5_Init+0x4c>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <MX_UART5_Init+0x4c>)
 800270e:	220c      	movs	r2, #12
 8002710:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <MX_UART5_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <MX_UART5_Init+0x4c>)
 800271a:	2200      	movs	r2, #0
 800271c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800271e:	4805      	ldr	r0, [pc, #20]	; (8002734 <MX_UART5_Init+0x4c>)
 8002720:	f004 fe62 	bl	80073e8 <HAL_UART_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800272a:	f7ff fabc 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000730 	.word	0x20000730
 8002738:	40005000 	.word	0x40005000

0800273c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002742:	4a12      	ldr	r2, [pc, #72]	; (800278c <MX_USART1_UART_Init+0x50>)
 8002744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800274c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002762:	220c      	movs	r2, #12
 8002764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002772:	4805      	ldr	r0, [pc, #20]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002774:	f004 fe38 	bl	80073e8 <HAL_UART_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800277e:	f7ff fa92 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000774 	.word	0x20000774
 800278c:	40011000 	.word	0x40011000

08002790 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <MX_USART2_UART_Init+0x4c>)
 8002796:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <MX_USART2_UART_Init+0x50>)
 8002798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <MX_USART2_UART_Init+0x4c>)
 800279c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <MX_USART2_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <MX_USART2_UART_Init+0x4c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <MX_USART2_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <MX_USART2_UART_Init+0x4c>)
 80027b6:	220c      	movs	r2, #12
 80027b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <MX_USART2_UART_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <MX_USART2_UART_Init+0x4c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <MX_USART2_UART_Init+0x4c>)
 80027c8:	f004 fe0e 	bl	80073e8 <HAL_UART_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027d2:	f7ff fa68 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200007b8 	.word	0x200007b8
 80027e0:	40004400 	.word	0x40004400

080027e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <MX_USART3_UART_Init+0x4c>)
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <MX_USART3_UART_Init+0x50>)
 80027ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <MX_USART3_UART_Init+0x4c>)
 80027f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <MX_USART3_UART_Init+0x4c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <MX_USART3_UART_Init+0x4c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <MX_USART3_UART_Init+0x4c>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <MX_USART3_UART_Init+0x4c>)
 800280a:	220c      	movs	r2, #12
 800280c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280e:	4b08      	ldr	r3, [pc, #32]	; (8002830 <MX_USART3_UART_Init+0x4c>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <MX_USART3_UART_Init+0x4c>)
 8002816:	2200      	movs	r2, #0
 8002818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800281a:	4805      	ldr	r0, [pc, #20]	; (8002830 <MX_USART3_UART_Init+0x4c>)
 800281c:	f004 fde4 	bl	80073e8 <HAL_UART_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002826:	f7ff fa3e 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	200007fc 	.word	0x200007fc
 8002834:	40004800 	.word	0x40004800

08002838 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <MX_USART6_UART_Init+0x4c>)
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <MX_USART6_UART_Init+0x50>)
 8002840:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <MX_USART6_UART_Init+0x4c>)
 8002844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002848:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <MX_USART6_UART_Init+0x4c>)
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <MX_USART6_UART_Init+0x4c>)
 8002852:	2200      	movs	r2, #0
 8002854:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <MX_USART6_UART_Init+0x4c>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <MX_USART6_UART_Init+0x4c>)
 800285e:	220c      	movs	r2, #12
 8002860:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <MX_USART6_UART_Init+0x4c>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <MX_USART6_UART_Init+0x4c>)
 800286a:	2200      	movs	r2, #0
 800286c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800286e:	4805      	ldr	r0, [pc, #20]	; (8002884 <MX_USART6_UART_Init+0x4c>)
 8002870:	f004 fdba 	bl	80073e8 <HAL_UART_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800287a:	f7ff fa14 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000840 	.word	0x20000840
 8002888:	40011400 	.word	0x40011400

0800288c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b094      	sub	sp, #80	; 0x50
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a4a      	ldr	r2, [pc, #296]	; (80029d4 <HAL_UART_MspInit+0x148>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	f040 80a0 	bne.w	80029f0 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80028b0:	2300      	movs	r3, #0
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028b4:	4b48      	ldr	r3, [pc, #288]	; (80029d8 <HAL_UART_MspInit+0x14c>)
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	4a47      	ldr	r2, [pc, #284]	; (80029d8 <HAL_UART_MspInit+0x14c>)
 80028ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028be:	6413      	str	r3, [r2, #64]	; 0x40
 80028c0:	4b45      	ldr	r3, [pc, #276]	; (80029d8 <HAL_UART_MspInit+0x14c>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
 80028d0:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <HAL_UART_MspInit+0x14c>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	4a40      	ldr	r2, [pc, #256]	; (80029d8 <HAL_UART_MspInit+0x14c>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6313      	str	r3, [r2, #48]	; 0x30
 80028dc:	4b3e      	ldr	r3, [pc, #248]	; (80029d8 <HAL_UART_MspInit+0x14c>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
 80028e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MCU_ESP32_TX_Pin|MCU_ESP32_RX_Pin;
 80028e8:	2303      	movs	r3, #3
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	2303      	movs	r3, #3
 80028f6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028f8:	2308      	movs	r3, #8
 80028fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002900:	4619      	mov	r1, r3
 8002902:	4836      	ldr	r0, [pc, #216]	; (80029dc <HAL_UART_MspInit+0x150>)
 8002904:	f001 fc18 	bl	8004138 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002908:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <HAL_UART_MspInit+0x154>)
 800290a:	4a36      	ldr	r2, [pc, #216]	; (80029e4 <HAL_UART_MspInit+0x158>)
 800290c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800290e:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <HAL_UART_MspInit+0x154>)
 8002910:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002914:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002916:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <HAL_UART_MspInit+0x154>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800291c:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <HAL_UART_MspInit+0x154>)
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002922:	4b2f      	ldr	r3, [pc, #188]	; (80029e0 <HAL_UART_MspInit+0x154>)
 8002924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002928:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800292a:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <HAL_UART_MspInit+0x154>)
 800292c:	2200      	movs	r2, #0
 800292e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002930:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_UART_MspInit+0x154>)
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002936:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <HAL_UART_MspInit+0x154>)
 8002938:	2200      	movs	r2, #0
 800293a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800293c:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <HAL_UART_MspInit+0x154>)
 800293e:	2200      	movs	r2, #0
 8002940:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_UART_MspInit+0x154>)
 8002944:	2200      	movs	r2, #0
 8002946:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002948:	4825      	ldr	r0, [pc, #148]	; (80029e0 <HAL_UART_MspInit+0x154>)
 800294a:	f001 f879 	bl	8003a40 <HAL_DMA_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002954:	f7ff f9a7 	bl	8001ca6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <HAL_UART_MspInit+0x154>)
 800295c:	639a      	str	r2, [r3, #56]	; 0x38
 800295e:	4a20      	ldr	r2, [pc, #128]	; (80029e0 <HAL_UART_MspInit+0x154>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002964:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <HAL_UART_MspInit+0x15c>)
 8002966:	4a21      	ldr	r2, [pc, #132]	; (80029ec <HAL_UART_MspInit+0x160>)
 8002968:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800296a:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <HAL_UART_MspInit+0x15c>)
 800296c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002970:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_UART_MspInit+0x15c>)
 8002974:	2240      	movs	r2, #64	; 0x40
 8002976:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_UART_MspInit+0x15c>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <HAL_UART_MspInit+0x15c>)
 8002980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002984:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002986:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_UART_MspInit+0x15c>)
 8002988:	2200      	movs	r2, #0
 800298a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800298c:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <HAL_UART_MspInit+0x15c>)
 800298e:	2200      	movs	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_UART_MspInit+0x15c>)
 8002994:	2200      	movs	r2, #0
 8002996:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <HAL_UART_MspInit+0x15c>)
 800299a:	2200      	movs	r2, #0
 800299c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_UART_MspInit+0x15c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80029a4:	4810      	ldr	r0, [pc, #64]	; (80029e8 <HAL_UART_MspInit+0x15c>)
 80029a6:	f001 f84b 	bl	8003a40 <HAL_DMA_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80029b0:	f7ff f979 	bl	8001ca6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <HAL_UART_MspInit+0x15c>)
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ba:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <HAL_UART_MspInit+0x15c>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80029c0:	2200      	movs	r2, #0
 80029c2:	2100      	movs	r1, #0
 80029c4:	2034      	movs	r0, #52	; 0x34
 80029c6:	f001 f811 	bl	80039ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80029ca:	2034      	movs	r0, #52	; 0x34
 80029cc:	f001 f82a 	bl	8003a24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80029d0:	e34a      	b.n	8003068 <HAL_UART_MspInit+0x7dc>
 80029d2:	bf00      	nop
 80029d4:	40004c00 	.word	0x40004c00
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40020000 	.word	0x40020000
 80029e0:	20000884 	.word	0x20000884
 80029e4:	40026040 	.word	0x40026040
 80029e8:	200008e4 	.word	0x200008e4
 80029ec:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a59      	ldr	r2, [pc, #356]	; (8002b5c <HAL_UART_MspInit+0x2d0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	f040 80c0 	bne.w	8002b7c <HAL_UART_MspInit+0x2f0>
    __HAL_RCC_UART5_CLK_ENABLE();
 80029fc:	2300      	movs	r3, #0
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002a00:	4b57      	ldr	r3, [pc, #348]	; (8002b60 <HAL_UART_MspInit+0x2d4>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	4a56      	ldr	r2, [pc, #344]	; (8002b60 <HAL_UART_MspInit+0x2d4>)
 8002a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0c:	4b54      	ldr	r3, [pc, #336]	; (8002b60 <HAL_UART_MspInit+0x2d4>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
 8002a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1c:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <HAL_UART_MspInit+0x2d4>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	4a4f      	ldr	r2, [pc, #316]	; (8002b60 <HAL_UART_MspInit+0x2d4>)
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	6313      	str	r3, [r2, #48]	; 0x30
 8002a28:	4b4d      	ldr	r3, [pc, #308]	; (8002b60 <HAL_UART_MspInit+0x2d4>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a34:	2300      	movs	r3, #0
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a38:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <HAL_UART_MspInit+0x2d4>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	4a48      	ldr	r2, [pc, #288]	; (8002b60 <HAL_UART_MspInit+0x2d4>)
 8002a3e:	f043 0308 	orr.w	r3, r3, #8
 8002a42:	6313      	str	r3, [r2, #48]	; 0x30
 8002a44:	4b46      	ldr	r3, [pc, #280]	; (8002b60 <HAL_UART_MspInit+0x2d4>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = MCU_UART5_TX_Pin;
 8002a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a54:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a56:	2302      	movs	r3, #2
 8002a58:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a62:	2308      	movs	r3, #8
 8002a64:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8002a66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	483d      	ldr	r0, [pc, #244]	; (8002b64 <HAL_UART_MspInit+0x2d8>)
 8002a6e:	f001 fb63 	bl	8004138 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MCU_UART5_RX_Pin;
 8002a72:	2304      	movs	r3, #4
 8002a74:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a82:	2308      	movs	r3, #8
 8002a84:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4836      	ldr	r0, [pc, #216]	; (8002b68 <HAL_UART_MspInit+0x2dc>)
 8002a8e:	f001 fb53 	bl	8004138 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002a92:	4b36      	ldr	r3, [pc, #216]	; (8002b6c <HAL_UART_MspInit+0x2e0>)
 8002a94:	4a36      	ldr	r2, [pc, #216]	; (8002b70 <HAL_UART_MspInit+0x2e4>)
 8002a96:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002a98:	4b34      	ldr	r3, [pc, #208]	; (8002b6c <HAL_UART_MspInit+0x2e0>)
 8002a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a9e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa0:	4b32      	ldr	r3, [pc, #200]	; (8002b6c <HAL_UART_MspInit+0x2e0>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa6:	4b31      	ldr	r3, [pc, #196]	; (8002b6c <HAL_UART_MspInit+0x2e0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002aac:	4b2f      	ldr	r3, [pc, #188]	; (8002b6c <HAL_UART_MspInit+0x2e0>)
 8002aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ab4:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <HAL_UART_MspInit+0x2e0>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aba:	4b2c      	ldr	r3, [pc, #176]	; (8002b6c <HAL_UART_MspInit+0x2e0>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002ac0:	4b2a      	ldr	r3, [pc, #168]	; (8002b6c <HAL_UART_MspInit+0x2e0>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ac6:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <HAL_UART_MspInit+0x2e0>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_UART_MspInit+0x2e0>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002ad2:	4826      	ldr	r0, [pc, #152]	; (8002b6c <HAL_UART_MspInit+0x2e0>)
 8002ad4:	f000 ffb4 	bl	8003a40 <HAL_DMA_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8002ade:	f7ff f8e2 	bl	8001ca6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <HAL_UART_MspInit+0x2e0>)
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ae8:	4a20      	ldr	r2, [pc, #128]	; (8002b6c <HAL_UART_MspInit+0x2e0>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8002aee:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <HAL_UART_MspInit+0x2e8>)
 8002af0:	4a21      	ldr	r2, [pc, #132]	; (8002b78 <HAL_UART_MspInit+0x2ec>)
 8002af2:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002af4:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <HAL_UART_MspInit+0x2e8>)
 8002af6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002afa:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002afc:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_UART_MspInit+0x2e8>)
 8002afe:	2240      	movs	r2, #64	; 0x40
 8002b00:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b02:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <HAL_UART_MspInit+0x2e8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b08:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <HAL_UART_MspInit+0x2e8>)
 8002b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b0e:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b10:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_UART_MspInit+0x2e8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b16:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <HAL_UART_MspInit+0x2e8>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002b1c:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_UART_MspInit+0x2e8>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <HAL_UART_MspInit+0x2e8>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_UART_MspInit+0x2e8>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002b2e:	4811      	ldr	r0, [pc, #68]	; (8002b74 <HAL_UART_MspInit+0x2e8>)
 8002b30:	f000 ff86 	bl	8003a40 <HAL_DMA_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8002b3a:	f7ff f8b4 	bl	8001ca6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a0c      	ldr	r2, [pc, #48]	; (8002b74 <HAL_UART_MspInit+0x2e8>)
 8002b42:	635a      	str	r2, [r3, #52]	; 0x34
 8002b44:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <HAL_UART_MspInit+0x2e8>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2035      	movs	r0, #53	; 0x35
 8002b50:	f000 ff4c 	bl	80039ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002b54:	2035      	movs	r0, #53	; 0x35
 8002b56:	f000 ff65 	bl	8003a24 <HAL_NVIC_EnableIRQ>
}
 8002b5a:	e285      	b.n	8003068 <HAL_UART_MspInit+0x7dc>
 8002b5c:	40005000 	.word	0x40005000
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40020800 	.word	0x40020800
 8002b68:	40020c00 	.word	0x40020c00
 8002b6c:	20000944 	.word	0x20000944
 8002b70:	40026010 	.word	0x40026010
 8002b74:	200009a4 	.word	0x200009a4
 8002b78:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a95      	ldr	r2, [pc, #596]	; (8002dd8 <HAL_UART_MspInit+0x54c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	f040 8091 	bne.w	8002caa <HAL_UART_MspInit+0x41e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	4b93      	ldr	r3, [pc, #588]	; (8002ddc <HAL_UART_MspInit+0x550>)
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	4a92      	ldr	r2, [pc, #584]	; (8002ddc <HAL_UART_MspInit+0x550>)
 8002b92:	f043 0310 	orr.w	r3, r3, #16
 8002b96:	6453      	str	r3, [r2, #68]	; 0x44
 8002b98:	4b90      	ldr	r3, [pc, #576]	; (8002ddc <HAL_UART_MspInit+0x550>)
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	623b      	str	r3, [r7, #32]
 8002ba8:	4b8c      	ldr	r3, [pc, #560]	; (8002ddc <HAL_UART_MspInit+0x550>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	4a8b      	ldr	r2, [pc, #556]	; (8002ddc <HAL_UART_MspInit+0x550>)
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb4:	4b89      	ldr	r3, [pc, #548]	; (8002ddc <HAL_UART_MspInit+0x550>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	623b      	str	r3, [r7, #32]
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = MCU_USART1_TX_Pin|MCU_USART1_RX_Pin;
 8002bc0:	23c0      	movs	r3, #192	; 0xc0
 8002bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bd0:	2307      	movs	r3, #7
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4881      	ldr	r0, [pc, #516]	; (8002de0 <HAL_UART_MspInit+0x554>)
 8002bdc:	f001 faac 	bl	8004138 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002be0:	4b80      	ldr	r3, [pc, #512]	; (8002de4 <HAL_UART_MspInit+0x558>)
 8002be2:	4a81      	ldr	r2, [pc, #516]	; (8002de8 <HAL_UART_MspInit+0x55c>)
 8002be4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002be6:	4b7f      	ldr	r3, [pc, #508]	; (8002de4 <HAL_UART_MspInit+0x558>)
 8002be8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bee:	4b7d      	ldr	r3, [pc, #500]	; (8002de4 <HAL_UART_MspInit+0x558>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf4:	4b7b      	ldr	r3, [pc, #492]	; (8002de4 <HAL_UART_MspInit+0x558>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bfa:	4b7a      	ldr	r3, [pc, #488]	; (8002de4 <HAL_UART_MspInit+0x558>)
 8002bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c00:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c02:	4b78      	ldr	r3, [pc, #480]	; (8002de4 <HAL_UART_MspInit+0x558>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c08:	4b76      	ldr	r3, [pc, #472]	; (8002de4 <HAL_UART_MspInit+0x558>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c0e:	4b75      	ldr	r3, [pc, #468]	; (8002de4 <HAL_UART_MspInit+0x558>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c14:	4b73      	ldr	r3, [pc, #460]	; (8002de4 <HAL_UART_MspInit+0x558>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c1a:	4b72      	ldr	r3, [pc, #456]	; (8002de4 <HAL_UART_MspInit+0x558>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c20:	4870      	ldr	r0, [pc, #448]	; (8002de4 <HAL_UART_MspInit+0x558>)
 8002c22:	f000 ff0d 	bl	8003a40 <HAL_DMA_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 8002c2c:	f7ff f83b 	bl	8001ca6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a6c      	ldr	r2, [pc, #432]	; (8002de4 <HAL_UART_MspInit+0x558>)
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
 8002c36:	4a6b      	ldr	r2, [pc, #428]	; (8002de4 <HAL_UART_MspInit+0x558>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002c3c:	4b6b      	ldr	r3, [pc, #428]	; (8002dec <HAL_UART_MspInit+0x560>)
 8002c3e:	4a6c      	ldr	r2, [pc, #432]	; (8002df0 <HAL_UART_MspInit+0x564>)
 8002c40:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002c42:	4b6a      	ldr	r3, [pc, #424]	; (8002dec <HAL_UART_MspInit+0x560>)
 8002c44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c48:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c4a:	4b68      	ldr	r3, [pc, #416]	; (8002dec <HAL_UART_MspInit+0x560>)
 8002c4c:	2240      	movs	r2, #64	; 0x40
 8002c4e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c50:	4b66      	ldr	r3, [pc, #408]	; (8002dec <HAL_UART_MspInit+0x560>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c56:	4b65      	ldr	r3, [pc, #404]	; (8002dec <HAL_UART_MspInit+0x560>)
 8002c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c5e:	4b63      	ldr	r3, [pc, #396]	; (8002dec <HAL_UART_MspInit+0x560>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c64:	4b61      	ldr	r3, [pc, #388]	; (8002dec <HAL_UART_MspInit+0x560>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c6a:	4b60      	ldr	r3, [pc, #384]	; (8002dec <HAL_UART_MspInit+0x560>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c70:	4b5e      	ldr	r3, [pc, #376]	; (8002dec <HAL_UART_MspInit+0x560>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c76:	4b5d      	ldr	r3, [pc, #372]	; (8002dec <HAL_UART_MspInit+0x560>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c7c:	485b      	ldr	r0, [pc, #364]	; (8002dec <HAL_UART_MspInit+0x560>)
 8002c7e:	f000 fedf 	bl	8003a40 <HAL_DMA_Init>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_UART_MspInit+0x400>
      Error_Handler();
 8002c88:	f7ff f80d 	bl	8001ca6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a57      	ldr	r2, [pc, #348]	; (8002dec <HAL_UART_MspInit+0x560>)
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34
 8002c92:	4a56      	ldr	r2, [pc, #344]	; (8002dec <HAL_UART_MspInit+0x560>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	2025      	movs	r0, #37	; 0x25
 8002c9e:	f000 fea5 	bl	80039ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ca2:	2025      	movs	r0, #37	; 0x25
 8002ca4:	f000 febe 	bl	8003a24 <HAL_NVIC_EnableIRQ>
}
 8002ca8:	e1de      	b.n	8003068 <HAL_UART_MspInit+0x7dc>
  else if(uartHandle->Instance==USART2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a51      	ldr	r2, [pc, #324]	; (8002df4 <HAL_UART_MspInit+0x568>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	f040 80ab 	bne.w	8002e0c <HAL_UART_MspInit+0x580>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	4b48      	ldr	r3, [pc, #288]	; (8002ddc <HAL_UART_MspInit+0x550>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a47      	ldr	r2, [pc, #284]	; (8002ddc <HAL_UART_MspInit+0x550>)
 8002cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b45      	ldr	r3, [pc, #276]	; (8002ddc <HAL_UART_MspInit+0x550>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <HAL_UART_MspInit+0x550>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a40      	ldr	r2, [pc, #256]	; (8002ddc <HAL_UART_MspInit+0x550>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b3e      	ldr	r3, [pc, #248]	; (8002ddc <HAL_UART_MspInit+0x550>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCU_USART2_TX_Pin|MCU_USART2_RX_Pin;
 8002cee:	230c      	movs	r3, #12
 8002cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cfe:	2307      	movs	r3, #7
 8002d00:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d06:	4619      	mov	r1, r3
 8002d08:	483b      	ldr	r0, [pc, #236]	; (8002df8 <HAL_UART_MspInit+0x56c>)
 8002d0a:	f001 fa15 	bl	8004138 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <HAL_UART_MspInit+0x570>)
 8002d10:	4a3b      	ldr	r2, [pc, #236]	; (8002e00 <HAL_UART_MspInit+0x574>)
 8002d12:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d14:	4b39      	ldr	r3, [pc, #228]	; (8002dfc <HAL_UART_MspInit+0x570>)
 8002d16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d1c:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <HAL_UART_MspInit+0x570>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d22:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_UART_MspInit+0x570>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d28:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <HAL_UART_MspInit+0x570>)
 8002d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d30:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <HAL_UART_MspInit+0x570>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d36:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <HAL_UART_MspInit+0x570>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <HAL_UART_MspInit+0x570>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d42:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <HAL_UART_MspInit+0x570>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d48:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <HAL_UART_MspInit+0x570>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d4e:	482b      	ldr	r0, [pc, #172]	; (8002dfc <HAL_UART_MspInit+0x570>)
 8002d50:	f000 fe76 	bl	8003a40 <HAL_DMA_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_UART_MspInit+0x4d2>
      Error_Handler();
 8002d5a:	f7fe ffa4 	bl	8001ca6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <HAL_UART_MspInit+0x570>)
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
 8002d64:	4a25      	ldr	r2, [pc, #148]	; (8002dfc <HAL_UART_MspInit+0x570>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <HAL_UART_MspInit+0x578>)
 8002d6c:	4a26      	ldr	r2, [pc, #152]	; (8002e08 <HAL_UART_MspInit+0x57c>)
 8002d6e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002d70:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <HAL_UART_MspInit+0x578>)
 8002d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d76:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d78:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <HAL_UART_MspInit+0x578>)
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d7e:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <HAL_UART_MspInit+0x578>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d84:	4b1f      	ldr	r3, [pc, #124]	; (8002e04 <HAL_UART_MspInit+0x578>)
 8002d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d8a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d8c:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <HAL_UART_MspInit+0x578>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d92:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <HAL_UART_MspInit+0x578>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002d98:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_UART_MspInit+0x578>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d9e:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <HAL_UART_MspInit+0x578>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002da4:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <HAL_UART_MspInit+0x578>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002daa:	4816      	ldr	r0, [pc, #88]	; (8002e04 <HAL_UART_MspInit+0x578>)
 8002dac:	f000 fe48 	bl	8003a40 <HAL_DMA_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_UART_MspInit+0x52e>
      Error_Handler();
 8002db6:	f7fe ff76 	bl	8001ca6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a11      	ldr	r2, [pc, #68]	; (8002e04 <HAL_UART_MspInit+0x578>)
 8002dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8002dc0:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <HAL_UART_MspInit+0x578>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2026      	movs	r0, #38	; 0x26
 8002dcc:	f000 fe0e 	bl	80039ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002dd0:	2026      	movs	r0, #38	; 0x26
 8002dd2:	f000 fe27 	bl	8003a24 <HAL_NVIC_EnableIRQ>
}
 8002dd6:	e147      	b.n	8003068 <HAL_UART_MspInit+0x7dc>
 8002dd8:	40011000 	.word	0x40011000
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40020400 	.word	0x40020400
 8002de4:	20000a04 	.word	0x20000a04
 8002de8:	40026440 	.word	0x40026440
 8002dec:	20000a64 	.word	0x20000a64
 8002df0:	400264b8 	.word	0x400264b8
 8002df4:	40004400 	.word	0x40004400
 8002df8:	40020000 	.word	0x40020000
 8002dfc:	20000ac4 	.word	0x20000ac4
 8002e00:	40026088 	.word	0x40026088
 8002e04:	20000b24 	.word	0x20000b24
 8002e08:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a97      	ldr	r2, [pc, #604]	; (8003070 <HAL_UART_MspInit+0x7e4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	f040 8092 	bne.w	8002f3c <HAL_UART_MspInit+0x6b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	4b95      	ldr	r3, [pc, #596]	; (8003074 <HAL_UART_MspInit+0x7e8>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	4a94      	ldr	r2, [pc, #592]	; (8003074 <HAL_UART_MspInit+0x7e8>)
 8002e22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e26:	6413      	str	r3, [r2, #64]	; 0x40
 8002e28:	4b92      	ldr	r3, [pc, #584]	; (8003074 <HAL_UART_MspInit+0x7e8>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	4b8e      	ldr	r3, [pc, #568]	; (8003074 <HAL_UART_MspInit+0x7e8>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	4a8d      	ldr	r2, [pc, #564]	; (8003074 <HAL_UART_MspInit+0x7e8>)
 8002e3e:	f043 0304 	orr.w	r3, r3, #4
 8002e42:	6313      	str	r3, [r2, #48]	; 0x30
 8002e44:	4b8b      	ldr	r3, [pc, #556]	; (8003074 <HAL_UART_MspInit+0x7e8>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MCU_HLBr_TX_Pin|MCU_HLBr_RX_Pin;
 8002e50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e54:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e62:	2307      	movs	r3, #7
 8002e64:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4882      	ldr	r0, [pc, #520]	; (8003078 <HAL_UART_MspInit+0x7ec>)
 8002e6e:	f001 f963 	bl	8004138 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002e72:	4b82      	ldr	r3, [pc, #520]	; (800307c <HAL_UART_MspInit+0x7f0>)
 8002e74:	4a82      	ldr	r2, [pc, #520]	; (8003080 <HAL_UART_MspInit+0x7f4>)
 8002e76:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002e78:	4b80      	ldr	r3, [pc, #512]	; (800307c <HAL_UART_MspInit+0x7f0>)
 8002e7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e7e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e80:	4b7e      	ldr	r3, [pc, #504]	; (800307c <HAL_UART_MspInit+0x7f0>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e86:	4b7d      	ldr	r3, [pc, #500]	; (800307c <HAL_UART_MspInit+0x7f0>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e8c:	4b7b      	ldr	r3, [pc, #492]	; (800307c <HAL_UART_MspInit+0x7f0>)
 8002e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e92:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e94:	4b79      	ldr	r3, [pc, #484]	; (800307c <HAL_UART_MspInit+0x7f0>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e9a:	4b78      	ldr	r3, [pc, #480]	; (800307c <HAL_UART_MspInit+0x7f0>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002ea0:	4b76      	ldr	r3, [pc, #472]	; (800307c <HAL_UART_MspInit+0x7f0>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ea6:	4b75      	ldr	r3, [pc, #468]	; (800307c <HAL_UART_MspInit+0x7f0>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eac:	4b73      	ldr	r3, [pc, #460]	; (800307c <HAL_UART_MspInit+0x7f0>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002eb2:	4872      	ldr	r0, [pc, #456]	; (800307c <HAL_UART_MspInit+0x7f0>)
 8002eb4:	f000 fdc4 	bl	8003a40 <HAL_DMA_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_UART_MspInit+0x636>
      Error_Handler();
 8002ebe:	f7fe fef2 	bl	8001ca6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a6d      	ldr	r2, [pc, #436]	; (800307c <HAL_UART_MspInit+0x7f0>)
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ec8:	4a6c      	ldr	r2, [pc, #432]	; (800307c <HAL_UART_MspInit+0x7f0>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002ece:	4b6d      	ldr	r3, [pc, #436]	; (8003084 <HAL_UART_MspInit+0x7f8>)
 8002ed0:	4a6d      	ldr	r2, [pc, #436]	; (8003088 <HAL_UART_MspInit+0x7fc>)
 8002ed2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002ed4:	4b6b      	ldr	r3, [pc, #428]	; (8003084 <HAL_UART_MspInit+0x7f8>)
 8002ed6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eda:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002edc:	4b69      	ldr	r3, [pc, #420]	; (8003084 <HAL_UART_MspInit+0x7f8>)
 8002ede:	2240      	movs	r2, #64	; 0x40
 8002ee0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee2:	4b68      	ldr	r3, [pc, #416]	; (8003084 <HAL_UART_MspInit+0x7f8>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee8:	4b66      	ldr	r3, [pc, #408]	; (8003084 <HAL_UART_MspInit+0x7f8>)
 8002eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eee:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ef0:	4b64      	ldr	r3, [pc, #400]	; (8003084 <HAL_UART_MspInit+0x7f8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ef6:	4b63      	ldr	r3, [pc, #396]	; (8003084 <HAL_UART_MspInit+0x7f8>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002efc:	4b61      	ldr	r3, [pc, #388]	; (8003084 <HAL_UART_MspInit+0x7f8>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f02:	4b60      	ldr	r3, [pc, #384]	; (8003084 <HAL_UART_MspInit+0x7f8>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f08:	4b5e      	ldr	r3, [pc, #376]	; (8003084 <HAL_UART_MspInit+0x7f8>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002f0e:	485d      	ldr	r0, [pc, #372]	; (8003084 <HAL_UART_MspInit+0x7f8>)
 8002f10:	f000 fd96 	bl	8003a40 <HAL_DMA_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_UART_MspInit+0x692>
      Error_Handler();
 8002f1a:	f7fe fec4 	bl	8001ca6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a58      	ldr	r2, [pc, #352]	; (8003084 <HAL_UART_MspInit+0x7f8>)
 8002f22:	635a      	str	r2, [r3, #52]	; 0x34
 8002f24:	4a57      	ldr	r2, [pc, #348]	; (8003084 <HAL_UART_MspInit+0x7f8>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	2027      	movs	r0, #39	; 0x27
 8002f30:	f000 fd5c 	bl	80039ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f34:	2027      	movs	r0, #39	; 0x27
 8002f36:	f000 fd75 	bl	8003a24 <HAL_NVIC_EnableIRQ>
}
 8002f3a:	e095      	b.n	8003068 <HAL_UART_MspInit+0x7dc>
  else if(uartHandle->Instance==USART6)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_UART_MspInit+0x800>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	f040 8090 	bne.w	8003068 <HAL_UART_MspInit+0x7dc>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	4b49      	ldr	r3, [pc, #292]	; (8003074 <HAL_UART_MspInit+0x7e8>)
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f50:	4a48      	ldr	r2, [pc, #288]	; (8003074 <HAL_UART_MspInit+0x7e8>)
 8002f52:	f043 0320 	orr.w	r3, r3, #32
 8002f56:	6453      	str	r3, [r2, #68]	; 0x44
 8002f58:	4b46      	ldr	r3, [pc, #280]	; (8003074 <HAL_UART_MspInit+0x7e8>)
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f64:	2300      	movs	r3, #0
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	4b42      	ldr	r3, [pc, #264]	; (8003074 <HAL_UART_MspInit+0x7e8>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	4a41      	ldr	r2, [pc, #260]	; (8003074 <HAL_UART_MspInit+0x7e8>)
 8002f6e:	f043 0304 	orr.w	r3, r3, #4
 8002f72:	6313      	str	r3, [r2, #48]	; 0x30
 8002f74:	4b3f      	ldr	r3, [pc, #252]	; (8003074 <HAL_UART_MspInit+0x7e8>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MCU_USART6_TX_Pin|MCU_USART6_RX_Pin;
 8002f80:	23c0      	movs	r3, #192	; 0xc0
 8002f82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f84:	2302      	movs	r3, #2
 8002f86:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f90:	2308      	movs	r3, #8
 8002f92:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4837      	ldr	r0, [pc, #220]	; (8003078 <HAL_UART_MspInit+0x7ec>)
 8002f9c:	f001 f8cc 	bl	8004138 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002fa0:	4b3b      	ldr	r3, [pc, #236]	; (8003090 <HAL_UART_MspInit+0x804>)
 8002fa2:	4a3c      	ldr	r2, [pc, #240]	; (8003094 <HAL_UART_MspInit+0x808>)
 8002fa4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002fa6:	4b3a      	ldr	r3, [pc, #232]	; (8003090 <HAL_UART_MspInit+0x804>)
 8002fa8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002fac:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fae:	4b38      	ldr	r3, [pc, #224]	; (8003090 <HAL_UART_MspInit+0x804>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb4:	4b36      	ldr	r3, [pc, #216]	; (8003090 <HAL_UART_MspInit+0x804>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fba:	4b35      	ldr	r3, [pc, #212]	; (8003090 <HAL_UART_MspInit+0x804>)
 8002fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fc0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fc2:	4b33      	ldr	r3, [pc, #204]	; (8003090 <HAL_UART_MspInit+0x804>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc8:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_UART_MspInit+0x804>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <HAL_UART_MspInit+0x804>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fd4:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_UART_MspInit+0x804>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_UART_MspInit+0x804>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002fe0:	482b      	ldr	r0, [pc, #172]	; (8003090 <HAL_UART_MspInit+0x804>)
 8002fe2:	f000 fd2d 	bl	8003a40 <HAL_DMA_Init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_UART_MspInit+0x764>
      Error_Handler();
 8002fec:	f7fe fe5b 	bl	8001ca6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a27      	ldr	r2, [pc, #156]	; (8003090 <HAL_UART_MspInit+0x804>)
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ff6:	4a26      	ldr	r2, [pc, #152]	; (8003090 <HAL_UART_MspInit+0x804>)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002ffc:	4b26      	ldr	r3, [pc, #152]	; (8003098 <HAL_UART_MspInit+0x80c>)
 8002ffe:	4a27      	ldr	r2, [pc, #156]	; (800309c <HAL_UART_MspInit+0x810>)
 8003000:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003002:	4b25      	ldr	r3, [pc, #148]	; (8003098 <HAL_UART_MspInit+0x80c>)
 8003004:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003008:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800300a:	4b23      	ldr	r3, [pc, #140]	; (8003098 <HAL_UART_MspInit+0x80c>)
 800300c:	2240      	movs	r2, #64	; 0x40
 800300e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003010:	4b21      	ldr	r3, [pc, #132]	; (8003098 <HAL_UART_MspInit+0x80c>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_UART_MspInit+0x80c>)
 8003018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800301c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <HAL_UART_MspInit+0x80c>)
 8003020:	2200      	movs	r2, #0
 8003022:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003024:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <HAL_UART_MspInit+0x80c>)
 8003026:	2200      	movs	r2, #0
 8003028:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_UART_MspInit+0x80c>)
 800302c:	2200      	movs	r2, #0
 800302e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <HAL_UART_MspInit+0x80c>)
 8003032:	2200      	movs	r2, #0
 8003034:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_UART_MspInit+0x80c>)
 8003038:	2200      	movs	r2, #0
 800303a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800303c:	4816      	ldr	r0, [pc, #88]	; (8003098 <HAL_UART_MspInit+0x80c>)
 800303e:	f000 fcff 	bl	8003a40 <HAL_DMA_Init>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_UART_MspInit+0x7c0>
      Error_Handler();
 8003048:	f7fe fe2d 	bl	8001ca6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a12      	ldr	r2, [pc, #72]	; (8003098 <HAL_UART_MspInit+0x80c>)
 8003050:	635a      	str	r2, [r3, #52]	; 0x34
 8003052:	4a11      	ldr	r2, [pc, #68]	; (8003098 <HAL_UART_MspInit+0x80c>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003058:	2200      	movs	r2, #0
 800305a:	2100      	movs	r1, #0
 800305c:	2047      	movs	r0, #71	; 0x47
 800305e:	f000 fcc5 	bl	80039ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003062:	2047      	movs	r0, #71	; 0x47
 8003064:	f000 fcde 	bl	8003a24 <HAL_NVIC_EnableIRQ>
}
 8003068:	bf00      	nop
 800306a:	3750      	adds	r7, #80	; 0x50
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40004800 	.word	0x40004800
 8003074:	40023800 	.word	0x40023800
 8003078:	40020800 	.word	0x40020800
 800307c:	20000b84 	.word	0x20000b84
 8003080:	40026028 	.word	0x40026028
 8003084:	20000be4 	.word	0x20000be4
 8003088:	40026058 	.word	0x40026058
 800308c:	40011400 	.word	0x40011400
 8003090:	20000c44 	.word	0x20000c44
 8003094:	40026428 	.word	0x40026428
 8003098:	20000ca4 	.word	0x20000ca4
 800309c:	400264a0 	.word	0x400264a0

080030a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030a4:	480d      	ldr	r0, [pc, #52]	; (80030dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030a6:	490e      	ldr	r1, [pc, #56]	; (80030e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030a8:	4a0e      	ldr	r2, [pc, #56]	; (80030e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030ac:	e002      	b.n	80030b4 <LoopCopyDataInit>

080030ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030b2:	3304      	adds	r3, #4

080030b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030b8:	d3f9      	bcc.n	80030ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ba:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030bc:	4c0b      	ldr	r4, [pc, #44]	; (80030ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80030be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030c0:	e001      	b.n	80030c6 <LoopFillZerobss>

080030c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030c4:	3204      	adds	r2, #4

080030c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030c8:	d3fb      	bcc.n	80030c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030ca:	f7fe fffd 	bl	80020c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ce:	f005 f88b 	bl	80081e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030d2:	f7fe fbb1 	bl	8001838 <main>
  bx  lr    
 80030d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030e0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80030e4:	0800aba4 	.word	0x0800aba4
  ldr r2, =_sbss
 80030e8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80030ec:	20000d08 	.word	0x20000d08

080030f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030f0:	e7fe      	b.n	80030f0 <ADC_IRQHandler>
	...

080030f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <HAL_Init+0x40>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <HAL_Init+0x40>)
 80030fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_Init+0x40>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <HAL_Init+0x40>)
 800310a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800310e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003110:	4b08      	ldr	r3, [pc, #32]	; (8003134 <HAL_Init+0x40>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a07      	ldr	r2, [pc, #28]	; (8003134 <HAL_Init+0x40>)
 8003116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800311c:	2003      	movs	r0, #3
 800311e:	f000 fc5a 	bl	80039d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003122:	200f      	movs	r0, #15
 8003124:	f7fe fe6a 	bl	8001dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003128:	f7fe fe40 	bl	8001dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023c00 	.word	0x40023c00

08003138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_IncTick+0x20>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_IncTick+0x24>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4413      	add	r3, r2
 8003148:	4a04      	ldr	r2, [pc, #16]	; (800315c <HAL_IncTick+0x24>)
 800314a:	6013      	str	r3, [r2, #0]
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000020 	.word	0x20000020
 800315c:	20000d04 	.word	0x20000d04

08003160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return uwTick;
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_GetTick+0x14>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000d04 	.word	0x20000d04

08003178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003180:	f7ff ffee 	bl	8003160 <HAL_GetTick>
 8003184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d005      	beq.n	800319e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_Delay+0x44>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4413      	add	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800319e:	bf00      	nop
 80031a0:	f7ff ffde 	bl	8003160 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d8f7      	bhi.n	80031a0 <HAL_Delay+0x28>
  {
  }
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000020 	.word	0x20000020

080031c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e033      	b.n	800323e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fe f88e 	bl	8001300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d118      	bne.n	8003230 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003206:	f023 0302 	bic.w	r3, r3, #2
 800320a:	f043 0202 	orr.w	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f93a 	bl	800348c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f023 0303 	bic.w	r3, r3, #3
 8003226:	f043 0201 	orr.w	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
 800322e:	e001      	b.n	8003234 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x1c>
 8003260:	2302      	movs	r3, #2
 8003262:	e105      	b.n	8003470 <HAL_ADC_ConfigChannel+0x228>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b09      	cmp	r3, #9
 8003272:	d925      	bls.n	80032c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68d9      	ldr	r1, [r3, #12]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	3b1e      	subs	r3, #30
 800328a:	2207      	movs	r2, #7
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43da      	mvns	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	400a      	ands	r2, r1
 8003298:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68d9      	ldr	r1, [r3, #12]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	4618      	mov	r0, r3
 80032ac:	4603      	mov	r3, r0
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4403      	add	r3, r0
 80032b2:	3b1e      	subs	r3, #30
 80032b4:	409a      	lsls	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	e022      	b.n	8003306 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6919      	ldr	r1, [r3, #16]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	2207      	movs	r2, #7
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43da      	mvns	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	400a      	ands	r2, r1
 80032e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6919      	ldr	r1, [r3, #16]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	4618      	mov	r0, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4403      	add	r3, r0
 80032fc:	409a      	lsls	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b06      	cmp	r3, #6
 800330c:	d824      	bhi.n	8003358 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	3b05      	subs	r3, #5
 8003320:	221f      	movs	r2, #31
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43da      	mvns	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	400a      	ands	r2, r1
 800332e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	4618      	mov	r0, r3
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	3b05      	subs	r3, #5
 800334a:	fa00 f203 	lsl.w	r2, r0, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	635a      	str	r2, [r3, #52]	; 0x34
 8003356:	e04c      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b0c      	cmp	r3, #12
 800335e:	d824      	bhi.n	80033aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	3b23      	subs	r3, #35	; 0x23
 8003372:	221f      	movs	r2, #31
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43da      	mvns	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	400a      	ands	r2, r1
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	b29b      	uxth	r3, r3
 800338e:	4618      	mov	r0, r3
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	3b23      	subs	r3, #35	; 0x23
 800339c:	fa00 f203 	lsl.w	r2, r0, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
 80033a8:	e023      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	3b41      	subs	r3, #65	; 0x41
 80033bc:	221f      	movs	r2, #31
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43da      	mvns	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	400a      	ands	r2, r1
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	4618      	mov	r0, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	3b41      	subs	r3, #65	; 0x41
 80033e6:	fa00 f203 	lsl.w	r2, r0, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033f2:	4b22      	ldr	r3, [pc, #136]	; (800347c <HAL_ADC_ConfigChannel+0x234>)
 80033f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a21      	ldr	r2, [pc, #132]	; (8003480 <HAL_ADC_ConfigChannel+0x238>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d109      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1cc>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b12      	cmp	r3, #18
 8003406:	d105      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a19      	ldr	r2, [pc, #100]	; (8003480 <HAL_ADC_ConfigChannel+0x238>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d123      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x21e>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b10      	cmp	r3, #16
 8003424:	d003      	beq.n	800342e <HAL_ADC_ConfigChannel+0x1e6>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b11      	cmp	r3, #17
 800342c:	d11b      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b10      	cmp	r3, #16
 8003440:	d111      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_ADC_ConfigChannel+0x23c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a10      	ldr	r2, [pc, #64]	; (8003488 <HAL_ADC_ConfigChannel+0x240>)
 8003448:	fba2 2303 	umull	r2, r3, r2, r3
 800344c:	0c9a      	lsrs	r2, r3, #18
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003458:	e002      	b.n	8003460 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	3b01      	subs	r3, #1
 800345e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f9      	bne.n	800345a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	40012300 	.word	0x40012300
 8003480:	40012000 	.word	0x40012000
 8003484:	20000018 	.word	0x20000018
 8003488:	431bde83 	.word	0x431bde83

0800348c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003494:	4b79      	ldr	r3, [pc, #484]	; (800367c <ADC_Init+0x1f0>)
 8003496:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	021a      	lsls	r2, r3, #8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	4a58      	ldr	r2, [pc, #352]	; (8003680 <ADC_Init+0x1f4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d022      	beq.n	800356a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003532:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6899      	ldr	r1, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6899      	ldr	r1, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	e00f      	b.n	800358a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003588:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0202 	bic.w	r2, r2, #2
 8003598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6899      	ldr	r1, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7e1b      	ldrb	r3, [r3, #24]
 80035a4:	005a      	lsls	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01b      	beq.n	80035f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	3b01      	subs	r3, #1
 80035e4:	035a      	lsls	r2, r3, #13
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	e007      	b.n	8003600 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	3b01      	subs	r3, #1
 800361c:	051a      	lsls	r2, r3, #20
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6899      	ldr	r1, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003642:	025a      	lsls	r2, r3, #9
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800365a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6899      	ldr	r1, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	029a      	lsls	r2, r3, #10
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	40012300 	.word	0x40012300
 8003680:	0f000001 	.word	0x0f000001

08003684 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e0ed      	b.n	8003872 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd fea4 	bl	80013f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b8:	f7ff fd52 	bl	8003160 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036be:	e012      	b.n	80036e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036c0:	f7ff fd4e 	bl	8003160 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b0a      	cmp	r3, #10
 80036cc:	d90b      	bls.n	80036e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2205      	movs	r2, #5
 80036de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0c5      	b.n	8003872 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0e5      	beq.n	80036c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0202 	bic.w	r2, r2, #2
 8003702:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003704:	f7ff fd2c 	bl	8003160 <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800370a:	e012      	b.n	8003732 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800370c:	f7ff fd28 	bl	8003160 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b0a      	cmp	r3, #10
 8003718:	d90b      	bls.n	8003732 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2205      	movs	r2, #5
 800372a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e09f      	b.n	8003872 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e5      	bne.n	800370c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7e1b      	ldrb	r3, [r3, #24]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d108      	bne.n	800375a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	e007      	b.n	800376a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	7e5b      	ldrb	r3, [r3, #25]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d108      	bne.n	8003784 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e007      	b.n	8003794 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003792:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	7e9b      	ldrb	r3, [r3, #26]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d108      	bne.n	80037ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0220 	orr.w	r2, r2, #32
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e007      	b.n	80037be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0220 	bic.w	r2, r2, #32
 80037bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7edb      	ldrb	r3, [r3, #27]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d108      	bne.n	80037d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0210 	bic.w	r2, r2, #16
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e007      	b.n	80037e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0210 	orr.w	r2, r2, #16
 80037e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	7f1b      	ldrb	r3, [r3, #28]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0208 	orr.w	r2, r2, #8
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	e007      	b.n	8003812 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0208 	bic.w	r2, r2, #8
 8003810:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	7f5b      	ldrb	r3, [r3, #29]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d108      	bne.n	800382c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0204 	orr.w	r2, r2, #4
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e007      	b.n	800383c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0204 	bic.w	r2, r2, #4
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	ea42 0103 	orr.w	r1, r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	1e5a      	subs	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003898:	4013      	ands	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ae:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	60d3      	str	r3, [r2, #12]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <__NVIC_GetPriorityGrouping+0x18>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f003 0307 	and.w	r3, r3, #7
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	db0b      	blt.n	800390a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	f003 021f 	and.w	r2, r3, #31
 80038f8:	4907      	ldr	r1, [pc, #28]	; (8003918 <__NVIC_EnableIRQ+0x38>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2001      	movs	r0, #1
 8003902:	fa00 f202 	lsl.w	r2, r0, r2
 8003906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	e000e100 	.word	0xe000e100

0800391c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	6039      	str	r1, [r7, #0]
 8003926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392c:	2b00      	cmp	r3, #0
 800392e:	db0a      	blt.n	8003946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	490c      	ldr	r1, [pc, #48]	; (8003968 <__NVIC_SetPriority+0x4c>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	0112      	lsls	r2, r2, #4
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	440b      	add	r3, r1
 8003940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003944:	e00a      	b.n	800395c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	4908      	ldr	r1, [pc, #32]	; (800396c <__NVIC_SetPriority+0x50>)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	3b04      	subs	r3, #4
 8003954:	0112      	lsls	r2, r2, #4
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	440b      	add	r3, r1
 800395a:	761a      	strb	r2, [r3, #24]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000e100 	.word	0xe000e100
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	; 0x24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f1c3 0307 	rsb	r3, r3, #7
 800398a:	2b04      	cmp	r3, #4
 800398c:	bf28      	it	cs
 800398e:	2304      	movcs	r3, #4
 8003990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3304      	adds	r3, #4
 8003996:	2b06      	cmp	r3, #6
 8003998:	d902      	bls.n	80039a0 <NVIC_EncodePriority+0x30>
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3b03      	subs	r3, #3
 800399e:	e000      	b.n	80039a2 <NVIC_EncodePriority+0x32>
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	f04f 32ff 	mov.w	r2, #4294967295
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	401a      	ands	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b8:	f04f 31ff 	mov.w	r1, #4294967295
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	43d9      	mvns	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	4313      	orrs	r3, r2
         );
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3724      	adds	r7, #36	; 0x24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ff4c 	bl	800387c <__NVIC_SetPriorityGrouping>
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039fe:	f7ff ff61 	bl	80038c4 <__NVIC_GetPriorityGrouping>
 8003a02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	6978      	ldr	r0, [r7, #20]
 8003a0a:	f7ff ffb1 	bl	8003970 <NVIC_EncodePriority>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a14:	4611      	mov	r1, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff ff80 	bl	800391c <__NVIC_SetPriority>
}
 8003a1c:	bf00      	nop
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ff54 	bl	80038e0 <__NVIC_EnableIRQ>
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a4c:	f7ff fb88 	bl	8003160 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e099      	b.n	8003b90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a7c:	e00f      	b.n	8003a9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a7e:	f7ff fb6f 	bl	8003160 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d908      	bls.n	8003a9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2203      	movs	r2, #3
 8003a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e078      	b.n	8003b90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e8      	bne.n	8003a7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4b38      	ldr	r3, [pc, #224]	; (8003b98 <HAL_DMA_Init+0x158>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d107      	bne.n	8003b08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	4313      	orrs	r3, r2
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0307 	bic.w	r3, r3, #7
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d117      	bne.n	8003b62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00e      	beq.n	8003b62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fa7b 	bl	8004040 <DMA_CheckFifoParam>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2240      	movs	r2, #64	; 0x40
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e016      	b.n	8003b90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fa32 	bl	8003fd4 <DMA_CalcBaseAndBitshift>
 8003b70:	4603      	mov	r3, r0
 8003b72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b78:	223f      	movs	r2, #63	; 0x3f
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	f010803f 	.word	0xf010803f

08003b9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003baa:	f7ff fad9 	bl	8003160 <HAL_GetTick>
 8003bae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d008      	beq.n	8003bce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2280      	movs	r2, #128	; 0x80
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e052      	b.n	8003c74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0216 	bic.w	r2, r2, #22
 8003bdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <HAL_DMA_Abort+0x62>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0208 	bic.w	r2, r2, #8
 8003c0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0201 	bic.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c1e:	e013      	b.n	8003c48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c20:	f7ff fa9e 	bl	8003160 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	d90c      	bls.n	8003c48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2220      	movs	r2, #32
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2203      	movs	r2, #3
 8003c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e015      	b.n	8003c74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e4      	bne.n	8003c20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5a:	223f      	movs	r2, #63	; 0x3f
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d004      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e00c      	b.n	8003cb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2205      	movs	r2, #5
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ccc:	4b8e      	ldr	r3, [pc, #568]	; (8003f08 <HAL_DMA_IRQHandler+0x248>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a8e      	ldr	r2, [pc, #568]	; (8003f0c <HAL_DMA_IRQHandler+0x24c>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	0a9b      	lsrs	r3, r3, #10
 8003cd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	2208      	movs	r2, #8
 8003cec:	409a      	lsls	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01a      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0204 	bic.w	r2, r2, #4
 8003d12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	2208      	movs	r2, #8
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	f043 0201 	orr.w	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	2201      	movs	r2, #1
 8003d32:	409a      	lsls	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d012      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4e:	2201      	movs	r2, #1
 8003d50:	409a      	lsls	r2, r3
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f043 0202 	orr.w	r2, r3, #2
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d66:	2204      	movs	r2, #4
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d012      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d84:	2204      	movs	r2, #4
 8003d86:	409a      	lsls	r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f043 0204 	orr.w	r2, r3, #4
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d043      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d03c      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	2210      	movs	r2, #16
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d018      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d108      	bne.n	8003df0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d024      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
 8003dee:	e01f      	b.n	8003e30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01b      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
 8003e00:	e016      	b.n	8003e30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d107      	bne.n	8003e20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0208 	bic.w	r2, r2, #8
 8003e1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e34:	2220      	movs	r2, #32
 8003e36:	409a      	lsls	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 808f 	beq.w	8003f60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8087 	beq.w	8003f60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	2220      	movs	r2, #32
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d136      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0216 	bic.w	r2, r2, #22
 8003e78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <HAL_DMA_IRQHandler+0x1da>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0208 	bic.w	r2, r2, #8
 8003ea8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	223f      	movs	r2, #63	; 0x3f
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d07e      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	4798      	blx	r3
        }
        return;
 8003ed6:	e079      	b.n	8003fcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01d      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10d      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d031      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
 8003f04:	e02c      	b.n	8003f60 <HAL_DMA_IRQHandler+0x2a0>
 8003f06:	bf00      	nop
 8003f08:	20000018 	.word	0x20000018
 8003f0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d023      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
 8003f20:	e01e      	b.n	8003f60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10f      	bne.n	8003f50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0210 	bic.w	r2, r2, #16
 8003f3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d032      	beq.n	8003fce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d022      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2205      	movs	r2, #5
 8003f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0201 	bic.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d307      	bcc.n	8003fa8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f2      	bne.n	8003f8c <HAL_DMA_IRQHandler+0x2cc>
 8003fa6:	e000      	b.n	8003faa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fa8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
 8003fca:	e000      	b.n	8003fce <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fcc:	bf00      	nop
    }
  }
}
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	3b10      	subs	r3, #16
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <DMA_CalcBaseAndBitshift+0x64>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	091b      	lsrs	r3, r3, #4
 8003fec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fee:	4a13      	ldr	r2, [pc, #76]	; (800403c <DMA_CalcBaseAndBitshift+0x68>)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d909      	bls.n	8004016 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800400a:	f023 0303 	bic.w	r3, r3, #3
 800400e:	1d1a      	adds	r2, r3, #4
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	659a      	str	r2, [r3, #88]	; 0x58
 8004014:	e007      	b.n	8004026 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	aaaaaaab 	.word	0xaaaaaaab
 800403c:	0800ab64 	.word	0x0800ab64

08004040 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d11f      	bne.n	800409a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b03      	cmp	r3, #3
 800405e:	d856      	bhi.n	800410e <DMA_CheckFifoParam+0xce>
 8004060:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <DMA_CheckFifoParam+0x28>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	08004079 	.word	0x08004079
 800406c:	0800408b 	.word	0x0800408b
 8004070:	08004079 	.word	0x08004079
 8004074:	0800410f 	.word	0x0800410f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d046      	beq.n	8004112 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004088:	e043      	b.n	8004112 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004092:	d140      	bne.n	8004116 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004098:	e03d      	b.n	8004116 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a2:	d121      	bne.n	80040e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d837      	bhi.n	800411a <DMA_CheckFifoParam+0xda>
 80040aa:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <DMA_CheckFifoParam+0x70>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	080040c7 	.word	0x080040c7
 80040b8:	080040c1 	.word	0x080040c1
 80040bc:	080040d9 	.word	0x080040d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
      break;
 80040c4:	e030      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d025      	beq.n	800411e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d6:	e022      	b.n	800411e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040e0:	d11f      	bne.n	8004122 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040e6:	e01c      	b.n	8004122 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d903      	bls.n	80040f6 <DMA_CheckFifoParam+0xb6>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d003      	beq.n	80040fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040f4:	e018      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      break;
 80040fa:	e015      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00e      	beq.n	8004126 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      break;
 800410c:	e00b      	b.n	8004126 <DMA_CheckFifoParam+0xe6>
      break;
 800410e:	bf00      	nop
 8004110:	e00a      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      break;
 8004112:	bf00      	nop
 8004114:	e008      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      break;
 8004116:	bf00      	nop
 8004118:	e006      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      break;
 800411a:	bf00      	nop
 800411c:	e004      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      break;
 800411e:	bf00      	nop
 8004120:	e002      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      break;   
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      break;
 8004126:	bf00      	nop
    }
  } 
  
  return status; 
 8004128:	7bfb      	ldrb	r3, [r7, #15]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop

08004138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004138:	b480      	push	{r7}
 800413a:	b089      	sub	sp, #36	; 0x24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800414a:	2300      	movs	r3, #0
 800414c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	e16b      	b.n	800442c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004154:	2201      	movs	r2, #1
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	429a      	cmp	r2, r3
 800416e:	f040 815a 	bne.w	8004426 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d005      	beq.n	800418a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004186:	2b02      	cmp	r3, #2
 8004188:	d130      	bne.n	80041ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	2203      	movs	r2, #3
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4013      	ands	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041c0:	2201      	movs	r2, #1
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 0201 	and.w	r2, r3, #1
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d017      	beq.n	8004228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	2203      	movs	r2, #3
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4313      	orrs	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d123      	bne.n	800427c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	08da      	lsrs	r2, r3, #3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3208      	adds	r2, #8
 800423c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	220f      	movs	r2, #15
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	08da      	lsrs	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3208      	adds	r2, #8
 8004276:	69b9      	ldr	r1, [r7, #24]
 8004278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	2203      	movs	r2, #3
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	43db      	mvns	r3, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4013      	ands	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0203 	and.w	r2, r3, #3
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 80b4 	beq.w	8004426 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	4b60      	ldr	r3, [pc, #384]	; (8004444 <HAL_GPIO_Init+0x30c>)
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	4a5f      	ldr	r2, [pc, #380]	; (8004444 <HAL_GPIO_Init+0x30c>)
 80042c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042cc:	6453      	str	r3, [r2, #68]	; 0x44
 80042ce:	4b5d      	ldr	r3, [pc, #372]	; (8004444 <HAL_GPIO_Init+0x30c>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042da:	4a5b      	ldr	r2, [pc, #364]	; (8004448 <HAL_GPIO_Init+0x310>)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	089b      	lsrs	r3, r3, #2
 80042e0:	3302      	adds	r3, #2
 80042e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	220f      	movs	r2, #15
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4013      	ands	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a52      	ldr	r2, [pc, #328]	; (800444c <HAL_GPIO_Init+0x314>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d02b      	beq.n	800435e <HAL_GPIO_Init+0x226>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a51      	ldr	r2, [pc, #324]	; (8004450 <HAL_GPIO_Init+0x318>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d025      	beq.n	800435a <HAL_GPIO_Init+0x222>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a50      	ldr	r2, [pc, #320]	; (8004454 <HAL_GPIO_Init+0x31c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d01f      	beq.n	8004356 <HAL_GPIO_Init+0x21e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a4f      	ldr	r2, [pc, #316]	; (8004458 <HAL_GPIO_Init+0x320>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d019      	beq.n	8004352 <HAL_GPIO_Init+0x21a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a4e      	ldr	r2, [pc, #312]	; (800445c <HAL_GPIO_Init+0x324>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d013      	beq.n	800434e <HAL_GPIO_Init+0x216>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a4d      	ldr	r2, [pc, #308]	; (8004460 <HAL_GPIO_Init+0x328>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00d      	beq.n	800434a <HAL_GPIO_Init+0x212>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a4c      	ldr	r2, [pc, #304]	; (8004464 <HAL_GPIO_Init+0x32c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d007      	beq.n	8004346 <HAL_GPIO_Init+0x20e>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a4b      	ldr	r2, [pc, #300]	; (8004468 <HAL_GPIO_Init+0x330>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d101      	bne.n	8004342 <HAL_GPIO_Init+0x20a>
 800433e:	2307      	movs	r3, #7
 8004340:	e00e      	b.n	8004360 <HAL_GPIO_Init+0x228>
 8004342:	2308      	movs	r3, #8
 8004344:	e00c      	b.n	8004360 <HAL_GPIO_Init+0x228>
 8004346:	2306      	movs	r3, #6
 8004348:	e00a      	b.n	8004360 <HAL_GPIO_Init+0x228>
 800434a:	2305      	movs	r3, #5
 800434c:	e008      	b.n	8004360 <HAL_GPIO_Init+0x228>
 800434e:	2304      	movs	r3, #4
 8004350:	e006      	b.n	8004360 <HAL_GPIO_Init+0x228>
 8004352:	2303      	movs	r3, #3
 8004354:	e004      	b.n	8004360 <HAL_GPIO_Init+0x228>
 8004356:	2302      	movs	r3, #2
 8004358:	e002      	b.n	8004360 <HAL_GPIO_Init+0x228>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <HAL_GPIO_Init+0x228>
 800435e:	2300      	movs	r3, #0
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	f002 0203 	and.w	r2, r2, #3
 8004366:	0092      	lsls	r2, r2, #2
 8004368:	4093      	lsls	r3, r2
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4313      	orrs	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004370:	4935      	ldr	r1, [pc, #212]	; (8004448 <HAL_GPIO_Init+0x310>)
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	089b      	lsrs	r3, r3, #2
 8004376:	3302      	adds	r3, #2
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_GPIO_Init+0x334>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043a2:	4a32      	ldr	r2, [pc, #200]	; (800446c <HAL_GPIO_Init+0x334>)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043a8:	4b30      	ldr	r3, [pc, #192]	; (800446c <HAL_GPIO_Init+0x334>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043cc:	4a27      	ldr	r2, [pc, #156]	; (800446c <HAL_GPIO_Init+0x334>)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043d2:	4b26      	ldr	r3, [pc, #152]	; (800446c <HAL_GPIO_Init+0x334>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043f6:	4a1d      	ldr	r2, [pc, #116]	; (800446c <HAL_GPIO_Init+0x334>)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043fc:	4b1b      	ldr	r3, [pc, #108]	; (800446c <HAL_GPIO_Init+0x334>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004420:	4a12      	ldr	r2, [pc, #72]	; (800446c <HAL_GPIO_Init+0x334>)
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	3301      	adds	r3, #1
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b0f      	cmp	r3, #15
 8004430:	f67f ae90 	bls.w	8004154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	3724      	adds	r7, #36	; 0x24
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40023800 	.word	0x40023800
 8004448:	40013800 	.word	0x40013800
 800444c:	40020000 	.word	0x40020000
 8004450:	40020400 	.word	0x40020400
 8004454:	40020800 	.word	0x40020800
 8004458:	40020c00 	.word	0x40020c00
 800445c:	40021000 	.word	0x40021000
 8004460:	40021400 	.word	0x40021400
 8004464:	40021800 	.word	0x40021800
 8004468:	40021c00 	.word	0x40021c00
 800446c:	40013c00 	.word	0x40013c00

08004470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
 800447c:	4613      	mov	r3, r2
 800447e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004480:	787b      	ldrb	r3, [r7, #1]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004486:	887a      	ldrh	r2, [r7, #2]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800448c:	e003      	b.n	8004496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800448e:	887b      	ldrh	r3, [r7, #2]
 8004490:	041a      	lsls	r2, r3, #16
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	619a      	str	r2, [r3, #24]
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b085      	sub	sp, #20
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	460b      	mov	r3, r1
 80044ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044b4:	887a      	ldrh	r2, [r7, #2]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4013      	ands	r3, r2
 80044ba:	041a      	lsls	r2, r3, #16
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	43d9      	mvns	r1, r3
 80044c0:	887b      	ldrh	r3, [r7, #2]
 80044c2:	400b      	ands	r3, r1
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	619a      	str	r2, [r3, #24]
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e12b      	b.n	8004742 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fd f952 	bl	80017a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	; 0x24
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0201 	bic.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800452a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800453a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800453c:	f001 fe6a 	bl	8006214 <HAL_RCC_GetPCLK1Freq>
 8004540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4a81      	ldr	r2, [pc, #516]	; (800474c <HAL_I2C_Init+0x274>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d807      	bhi.n	800455c <HAL_I2C_Init+0x84>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a80      	ldr	r2, [pc, #512]	; (8004750 <HAL_I2C_Init+0x278>)
 8004550:	4293      	cmp	r3, r2
 8004552:	bf94      	ite	ls
 8004554:	2301      	movls	r3, #1
 8004556:	2300      	movhi	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	e006      	b.n	800456a <HAL_I2C_Init+0x92>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a7d      	ldr	r2, [pc, #500]	; (8004754 <HAL_I2C_Init+0x27c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	bf94      	ite	ls
 8004564:	2301      	movls	r3, #1
 8004566:	2300      	movhi	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0e7      	b.n	8004742 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a78      	ldr	r2, [pc, #480]	; (8004758 <HAL_I2C_Init+0x280>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	0c9b      	lsrs	r3, r3, #18
 800457c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4a6a      	ldr	r2, [pc, #424]	; (800474c <HAL_I2C_Init+0x274>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d802      	bhi.n	80045ac <HAL_I2C_Init+0xd4>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3301      	adds	r3, #1
 80045aa:	e009      	b.n	80045c0 <HAL_I2C_Init+0xe8>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	4a69      	ldr	r2, [pc, #420]	; (800475c <HAL_I2C_Init+0x284>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	3301      	adds	r3, #1
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	495c      	ldr	r1, [pc, #368]	; (800474c <HAL_I2C_Init+0x274>)
 80045dc:	428b      	cmp	r3, r1
 80045de:	d819      	bhi.n	8004614 <HAL_I2C_Init+0x13c>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1e59      	subs	r1, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ee:	1c59      	adds	r1, r3, #1
 80045f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045f4:	400b      	ands	r3, r1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_I2C_Init+0x138>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1e59      	subs	r1, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	fbb1 f3f3 	udiv	r3, r1, r3
 8004608:	3301      	adds	r3, #1
 800460a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460e:	e051      	b.n	80046b4 <HAL_I2C_Init+0x1dc>
 8004610:	2304      	movs	r3, #4
 8004612:	e04f      	b.n	80046b4 <HAL_I2C_Init+0x1dc>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d111      	bne.n	8004640 <HAL_I2C_Init+0x168>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1e58      	subs	r0, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6859      	ldr	r1, [r3, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	440b      	add	r3, r1
 800462a:	fbb0 f3f3 	udiv	r3, r0, r3
 800462e:	3301      	adds	r3, #1
 8004630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004634:	2b00      	cmp	r3, #0
 8004636:	bf0c      	ite	eq
 8004638:	2301      	moveq	r3, #1
 800463a:	2300      	movne	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e012      	b.n	8004666 <HAL_I2C_Init+0x18e>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1e58      	subs	r0, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6859      	ldr	r1, [r3, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	0099      	lsls	r1, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	fbb0 f3f3 	udiv	r3, r0, r3
 8004656:	3301      	adds	r3, #1
 8004658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_I2C_Init+0x196>
 800466a:	2301      	movs	r3, #1
 800466c:	e022      	b.n	80046b4 <HAL_I2C_Init+0x1dc>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10e      	bne.n	8004694 <HAL_I2C_Init+0x1bc>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1e58      	subs	r0, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	440b      	add	r3, r1
 8004684:	fbb0 f3f3 	udiv	r3, r0, r3
 8004688:	3301      	adds	r3, #1
 800468a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004692:	e00f      	b.n	80046b4 <HAL_I2C_Init+0x1dc>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1e58      	subs	r0, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6859      	ldr	r1, [r3, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	0099      	lsls	r1, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046aa:	3301      	adds	r3, #1
 80046ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	6809      	ldr	r1, [r1, #0]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6911      	ldr	r1, [r2, #16]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68d2      	ldr	r2, [r2, #12]
 80046ee:	4311      	orrs	r1, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	000186a0 	.word	0x000186a0
 8004750:	001e847f 	.word	0x001e847f
 8004754:	003d08ff 	.word	0x003d08ff
 8004758:	431bde83 	.word	0x431bde83
 800475c:	10624dd3 	.word	0x10624dd3

08004760 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	461a      	mov	r2, r3
 800476c:	460b      	mov	r3, r1
 800476e:	817b      	strh	r3, [r7, #10]
 8004770:	4613      	mov	r3, r2
 8004772:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004774:	f7fe fcf4 	bl	8003160 <HAL_GetTick>
 8004778:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b20      	cmp	r3, #32
 8004784:	f040 80e0 	bne.w	8004948 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	2319      	movs	r3, #25
 800478e:	2201      	movs	r2, #1
 8004790:	4970      	ldr	r1, [pc, #448]	; (8004954 <HAL_I2C_Master_Transmit+0x1f4>)
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 ff30 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800479e:	2302      	movs	r3, #2
 80047a0:	e0d3      	b.n	800494a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_I2C_Master_Transmit+0x50>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e0cc      	b.n	800494a <HAL_I2C_Master_Transmit+0x1ea>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d007      	beq.n	80047d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0201 	orr.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2221      	movs	r2, #33	; 0x21
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2210      	movs	r2, #16
 80047f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	893a      	ldrh	r2, [r7, #8]
 8004806:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a50      	ldr	r2, [pc, #320]	; (8004958 <HAL_I2C_Master_Transmit+0x1f8>)
 8004816:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004818:	8979      	ldrh	r1, [r7, #10]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	6a3a      	ldr	r2, [r7, #32]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fcea 	bl	80051f8 <I2C_MasterRequestWrite>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e08d      	b.n	800494a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482e:	2300      	movs	r3, #0
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004844:	e066      	b.n	8004914 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	6a39      	ldr	r1, [r7, #32]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 ffaa 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00d      	beq.n	8004872 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	2b04      	cmp	r3, #4
 800485c:	d107      	bne.n	800486e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e06b      	b.n	800494a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	781a      	ldrb	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d11b      	bne.n	80048e8 <HAL_I2C_Master_Transmit+0x188>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d017      	beq.n	80048e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	6a39      	ldr	r1, [r7, #32]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 ff9a 	bl	8005826 <I2C_WaitOnBTFFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00d      	beq.n	8004914 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d107      	bne.n	8004910 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e01a      	b.n	800494a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004918:	2b00      	cmp	r3, #0
 800491a:	d194      	bne.n	8004846 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	e000      	b.n	800494a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004948:	2302      	movs	r3, #2
  }
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	00100002 	.word	0x00100002
 8004958:	ffff0000 	.word	0xffff0000

0800495c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	461a      	mov	r2, r3
 800496a:	4603      	mov	r3, r0
 800496c:	817b      	strh	r3, [r7, #10]
 800496e:	460b      	mov	r3, r1
 8004970:	813b      	strh	r3, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004976:	f7fe fbf3 	bl	8003160 <HAL_GetTick>
 800497a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b20      	cmp	r3, #32
 8004986:	f040 80d9 	bne.w	8004b3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	2319      	movs	r3, #25
 8004990:	2201      	movs	r2, #1
 8004992:	496d      	ldr	r1, [pc, #436]	; (8004b48 <HAL_I2C_Mem_Write+0x1ec>)
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fe2f 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
 80049a2:	e0cc      	b.n	8004b3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_I2C_Mem_Write+0x56>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e0c5      	b.n	8004b3e <HAL_I2C_Mem_Write+0x1e2>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d007      	beq.n	80049d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2221      	movs	r2, #33	; 0x21
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2240      	movs	r2, #64	; 0x40
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a3a      	ldr	r2, [r7, #32]
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a4d      	ldr	r2, [pc, #308]	; (8004b4c <HAL_I2C_Mem_Write+0x1f0>)
 8004a18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a1a:	88f8      	ldrh	r0, [r7, #6]
 8004a1c:	893a      	ldrh	r2, [r7, #8]
 8004a1e:	8979      	ldrh	r1, [r7, #10]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	4603      	mov	r3, r0
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fc66 	bl	80052fc <I2C_RequestMemoryWrite>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d052      	beq.n	8004adc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e081      	b.n	8004b3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 feb0 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00d      	beq.n	8004a66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d107      	bne.n	8004a62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e06b      	b.n	8004b3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	781a      	ldrb	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d11b      	bne.n	8004adc <HAL_I2C_Mem_Write+0x180>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d017      	beq.n	8004adc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1aa      	bne.n	8004a3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fe9c 	bl	8005826 <I2C_WaitOnBTFFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00d      	beq.n	8004b10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d107      	bne.n	8004b0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e016      	b.n	8004b3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	00100002 	.word	0x00100002
 8004b4c:	ffff0000 	.word	0xffff0000

08004b50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08c      	sub	sp, #48	; 0x30
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	817b      	strh	r3, [r7, #10]
 8004b62:	460b      	mov	r3, r1
 8004b64:	813b      	strh	r3, [r7, #8]
 8004b66:	4613      	mov	r3, r2
 8004b68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b6a:	f7fe faf9 	bl	8003160 <HAL_GetTick>
 8004b6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	f040 8208 	bne.w	8004f8e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	2319      	movs	r3, #25
 8004b84:	2201      	movs	r2, #1
 8004b86:	497b      	ldr	r1, [pc, #492]	; (8004d74 <HAL_I2C_Mem_Read+0x224>)
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 fd35 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b94:	2302      	movs	r3, #2
 8004b96:	e1fb      	b.n	8004f90 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_I2C_Mem_Read+0x56>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e1f4      	b.n	8004f90 <HAL_I2C_Mem_Read+0x440>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d007      	beq.n	8004bcc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2222      	movs	r2, #34	; 0x22
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2240      	movs	r2, #64	; 0x40
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4a5b      	ldr	r2, [pc, #364]	; (8004d78 <HAL_I2C_Mem_Read+0x228>)
 8004c0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c0e:	88f8      	ldrh	r0, [r7, #6]
 8004c10:	893a      	ldrh	r2, [r7, #8]
 8004c12:	8979      	ldrh	r1, [r7, #10]
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	9301      	str	r3, [sp, #4]
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fc02 	bl	8005428 <I2C_RequestMemoryRead>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e1b0      	b.n	8004f90 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d113      	bne.n	8004c5e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	623b      	str	r3, [r7, #32]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	623b      	str	r3, [r7, #32]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	623b      	str	r3, [r7, #32]
 8004c4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	e184      	b.n	8004f68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d11b      	bne.n	8004c9e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	e164      	b.n	8004f68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d11b      	bne.n	8004cde <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	e144      	b.n	8004f68 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cf4:	e138      	b.n	8004f68 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	f200 80f1 	bhi.w	8004ee2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d123      	bne.n	8004d50 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 fdcb 	bl	80058a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e139      	b.n	8004f90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d4e:	e10b      	b.n	8004f68 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d14e      	bne.n	8004df6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	2200      	movs	r2, #0
 8004d60:	4906      	ldr	r1, [pc, #24]	; (8004d7c <HAL_I2C_Mem_Read+0x22c>)
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 fc48 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e10e      	b.n	8004f90 <HAL_I2C_Mem_Read+0x440>
 8004d72:	bf00      	nop
 8004d74:	00100002 	.word	0x00100002
 8004d78:	ffff0000 	.word	0xffff0000
 8004d7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004df4:	e0b8      	b.n	8004f68 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4966      	ldr	r1, [pc, #408]	; (8004f98 <HAL_I2C_Mem_Read+0x448>)
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fbf9 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0bf      	b.n	8004f90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	2200      	movs	r2, #0
 8004e5a:	494f      	ldr	r1, [pc, #316]	; (8004f98 <HAL_I2C_Mem_Read+0x448>)
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fbcb 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e091      	b.n	8004f90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ee0:	e042      	b.n	8004f68 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fcde 	bl	80058a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e04c      	b.n	8004f90 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d118      	bne.n	8004f68 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f47f aec2 	bne.w	8004cf6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e000      	b.n	8004f90 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f8e:	2302      	movs	r3, #2
  }
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3728      	adds	r7, #40	; 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	00010004 	.word	0x00010004

08004f9c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004fac:	f7fe f8d8 	bl	8003160 <HAL_GetTick>
 8004fb0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	f040 8111 	bne.w	80051e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	2319      	movs	r3, #25
 8004fca:	2201      	movs	r2, #1
 8004fcc:	4988      	ldr	r1, [pc, #544]	; (80051f0 <HAL_I2C_IsDeviceReady+0x254>)
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fb12 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e104      	b.n	80051e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_I2C_IsDeviceReady+0x50>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e0fd      	b.n	80051e8 <HAL_I2C_IsDeviceReady+0x24c>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d007      	beq.n	8005012 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0201 	orr.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005020:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2224      	movs	r2, #36	; 0x24
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4a70      	ldr	r2, [pc, #448]	; (80051f4 <HAL_I2C_IsDeviceReady+0x258>)
 8005034:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005044:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2200      	movs	r2, #0
 800504e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fad0 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00d      	beq.n	800507a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800506c:	d103      	bne.n	8005076 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e0b6      	b.n	80051e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800507a:	897b      	ldrh	r3, [r7, #10]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005088:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800508a:	f7fe f869 	bl	8003160 <HAL_GetTick>
 800508e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b02      	cmp	r3, #2
 800509c:	bf0c      	ite	eq
 800509e:	2301      	moveq	r3, #1
 80050a0:	2300      	movne	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b4:	bf0c      	ite	eq
 80050b6:	2301      	moveq	r3, #1
 80050b8:	2300      	movne	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80050be:	e025      	b.n	800510c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050c0:	f7fe f84e 	bl	8003160 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d302      	bcc.n	80050d6 <HAL_I2C_IsDeviceReady+0x13a>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d103      	bne.n	80050de <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	22a0      	movs	r2, #160	; 0xa0
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	bf0c      	ite	eq
 80050ec:	2301      	moveq	r3, #1
 80050ee:	2300      	movne	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2ba0      	cmp	r3, #160	; 0xa0
 8005116:	d005      	beq.n	8005124 <HAL_I2C_IsDeviceReady+0x188>
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d102      	bne.n	8005124 <HAL_I2C_IsDeviceReady+0x188>
 800511e:	7dbb      	ldrb	r3, [r7, #22]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0cd      	beq.n	80050c0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b02      	cmp	r3, #2
 8005138:	d129      	bne.n	800518e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005148:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2319      	movs	r3, #25
 8005166:	2201      	movs	r2, #1
 8005168:	4921      	ldr	r1, [pc, #132]	; (80051f0 <HAL_I2C_IsDeviceReady+0x254>)
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fa44 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e036      	b.n	80051e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	e02c      	b.n	80051e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	2319      	movs	r3, #25
 80051ae:	2201      	movs	r2, #1
 80051b0:	490f      	ldr	r1, [pc, #60]	; (80051f0 <HAL_I2C_IsDeviceReady+0x254>)
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fa20 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e012      	b.n	80051e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	3301      	adds	r3, #1
 80051c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	f4ff af32 	bcc.w	8005036 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80051e6:	2302      	movs	r3, #2
  }
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3720      	adds	r7, #32
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	00100002 	.word	0x00100002
 80051f4:	ffff0000 	.word	0xffff0000

080051f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	460b      	mov	r3, r1
 8005206:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d006      	beq.n	8005222 <I2C_MasterRequestWrite+0x2a>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d003      	beq.n	8005222 <I2C_MasterRequestWrite+0x2a>
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005220:	d108      	bne.n	8005234 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e00b      	b.n	800524c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	2b12      	cmp	r3, #18
 800523a:	d107      	bne.n	800524c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800524a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f9cd 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00d      	beq.n	8005280 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005272:	d103      	bne.n	800527c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800527a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e035      	b.n	80052ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005288:	d108      	bne.n	800529c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800528a:	897b      	ldrh	r3, [r7, #10]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005298:	611a      	str	r2, [r3, #16]
 800529a:	e01b      	b.n	80052d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800529c:	897b      	ldrh	r3, [r7, #10]
 800529e:	11db      	asrs	r3, r3, #7
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	f003 0306 	and.w	r3, r3, #6
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	f063 030f 	orn	r3, r3, #15
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	490e      	ldr	r1, [pc, #56]	; (80052f4 <I2C_MasterRequestWrite+0xfc>)
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f9f3 	bl	80056a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e010      	b.n	80052ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052ca:	897b      	ldrh	r3, [r7, #10]
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	4907      	ldr	r1, [pc, #28]	; (80052f8 <I2C_MasterRequestWrite+0x100>)
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f9e3 	bl	80056a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	00010008 	.word	0x00010008
 80052f8:	00010002 	.word	0x00010002

080052fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	4608      	mov	r0, r1
 8005306:	4611      	mov	r1, r2
 8005308:	461a      	mov	r2, r3
 800530a:	4603      	mov	r3, r0
 800530c:	817b      	strh	r3, [r7, #10]
 800530e:	460b      	mov	r3, r1
 8005310:	813b      	strh	r3, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005324:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	2200      	movs	r2, #0
 800532e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f960 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534c:	d103      	bne.n	8005356 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e05f      	b.n	800541a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800535a:	897b      	ldrh	r3, [r7, #10]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005368:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	6a3a      	ldr	r2, [r7, #32]
 800536e:	492d      	ldr	r1, [pc, #180]	; (8005424 <I2C_RequestMemoryWrite+0x128>)
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f998 	bl	80056a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e04c      	b.n	800541a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005398:	6a39      	ldr	r1, [r7, #32]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 fa02 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00d      	beq.n	80053c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d107      	bne.n	80053be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e02b      	b.n	800541a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d105      	bne.n	80053d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053c8:	893b      	ldrh	r3, [r7, #8]
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	611a      	str	r2, [r3, #16]
 80053d2:	e021      	b.n	8005418 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053d4:	893b      	ldrh	r3, [r7, #8]
 80053d6:	0a1b      	lsrs	r3, r3, #8
 80053d8:	b29b      	uxth	r3, r3
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e4:	6a39      	ldr	r1, [r7, #32]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f9dc 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d107      	bne.n	800540a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005408:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e005      	b.n	800541a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800540e:	893b      	ldrh	r3, [r7, #8]
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	00010002 	.word	0x00010002

08005428 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af02      	add	r7, sp, #8
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	4608      	mov	r0, r1
 8005432:	4611      	mov	r1, r2
 8005434:	461a      	mov	r2, r3
 8005436:	4603      	mov	r3, r0
 8005438:	817b      	strh	r3, [r7, #10]
 800543a:	460b      	mov	r3, r1
 800543c:	813b      	strh	r3, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005450:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005460:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	2200      	movs	r2, #0
 800546a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 f8c2 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00d      	beq.n	8005496 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005488:	d103      	bne.n	8005492 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005490:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e0aa      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005496:	897b      	ldrh	r3, [r7, #10]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	6a3a      	ldr	r2, [r7, #32]
 80054aa:	4952      	ldr	r1, [pc, #328]	; (80055f4 <I2C_RequestMemoryRead+0x1cc>)
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f8fa 	bl	80056a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e097      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d4:	6a39      	ldr	r1, [r7, #32]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f964 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00d      	beq.n	80054fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d107      	bne.n	80054fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e076      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d105      	bne.n	8005510 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005504:	893b      	ldrh	r3, [r7, #8]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	611a      	str	r2, [r3, #16]
 800550e:	e021      	b.n	8005554 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005510:	893b      	ldrh	r3, [r7, #8]
 8005512:	0a1b      	lsrs	r3, r3, #8
 8005514:	b29b      	uxth	r3, r3
 8005516:	b2da      	uxtb	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800551e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005520:	6a39      	ldr	r1, [r7, #32]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f93e 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00d      	beq.n	800554a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	2b04      	cmp	r3, #4
 8005534:	d107      	bne.n	8005546 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005544:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e050      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800554a:	893b      	ldrh	r3, [r7, #8]
 800554c:	b2da      	uxtb	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005556:	6a39      	ldr	r1, [r7, #32]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f923 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00d      	beq.n	8005580 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	2b04      	cmp	r3, #4
 800556a:	d107      	bne.n	800557c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e035      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800558e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	2200      	movs	r2, #0
 8005598:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f82b 	bl	80055f8 <I2C_WaitOnFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00d      	beq.n	80055c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b6:	d103      	bne.n	80055c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e013      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055c4:	897b      	ldrh	r3, [r7, #10]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f043 0301 	orr.w	r3, r3, #1
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	6a3a      	ldr	r2, [r7, #32]
 80055d8:	4906      	ldr	r1, [pc, #24]	; (80055f4 <I2C_RequestMemoryRead+0x1cc>)
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 f863 	bl	80056a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	00010002 	.word	0x00010002

080055f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	4613      	mov	r3, r2
 8005606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005608:	e025      	b.n	8005656 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005610:	d021      	beq.n	8005656 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005612:	f7fd fda5 	bl	8003160 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d116      	bne.n	8005656 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f043 0220 	orr.w	r2, r3, #32
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e023      	b.n	800569e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	0c1b      	lsrs	r3, r3, #16
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	d10d      	bne.n	800567c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	43da      	mvns	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4013      	ands	r3, r2
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	bf0c      	ite	eq
 8005672:	2301      	moveq	r3, #1
 8005674:	2300      	movne	r3, #0
 8005676:	b2db      	uxtb	r3, r3
 8005678:	461a      	mov	r2, r3
 800567a:	e00c      	b.n	8005696 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	43da      	mvns	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4013      	ands	r3, r2
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	bf0c      	ite	eq
 800568e:	2301      	moveq	r3, #1
 8005690:	2300      	movne	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	429a      	cmp	r2, r3
 800569a:	d0b6      	beq.n	800560a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056b4:	e051      	b.n	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c4:	d123      	bne.n	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f043 0204 	orr.w	r2, r3, #4
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e046      	b.n	800579c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d021      	beq.n	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005716:	f7fd fd23 	bl	8003160 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	429a      	cmp	r2, r3
 8005724:	d302      	bcc.n	800572c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d116      	bne.n	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f043 0220 	orr.w	r2, r3, #32
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e020      	b.n	800579c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	0c1b      	lsrs	r3, r3, #16
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d10c      	bne.n	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	43da      	mvns	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4013      	ands	r3, r2
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf14      	ite	ne
 8005776:	2301      	movne	r3, #1
 8005778:	2300      	moveq	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	e00b      	b.n	8005796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	43da      	mvns	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	4013      	ands	r3, r2
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	bf14      	ite	ne
 8005790:	2301      	movne	r3, #1
 8005792:	2300      	moveq	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d18d      	bne.n	80056b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057b0:	e02d      	b.n	800580e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 f8ce 	bl	8005954 <I2C_IsAcknowledgeFailed>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e02d      	b.n	800581e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c8:	d021      	beq.n	800580e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ca:	f7fd fcc9 	bl	8003160 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d302      	bcc.n	80057e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d116      	bne.n	800580e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	f043 0220 	orr.w	r2, r3, #32
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e007      	b.n	800581e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005818:	2b80      	cmp	r3, #128	; 0x80
 800581a:	d1ca      	bne.n	80057b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005832:	e02d      	b.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f88d 	bl	8005954 <I2C_IsAcknowledgeFailed>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e02d      	b.n	80058a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d021      	beq.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584c:	f7fd fc88 	bl	8003160 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	429a      	cmp	r2, r3
 800585a:	d302      	bcc.n	8005862 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d116      	bne.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	f043 0220 	orr.w	r2, r3, #32
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e007      	b.n	80058a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b04      	cmp	r3, #4
 800589c:	d1ca      	bne.n	8005834 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058b4:	e042      	b.n	800593c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d119      	bne.n	80058f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0210 	mvn.w	r2, #16
 80058cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e029      	b.n	800594c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f8:	f7fd fc32 	bl	8003160 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d116      	bne.n	800593c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	f043 0220 	orr.w	r2, r3, #32
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e007      	b.n	800594c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005946:	2b40      	cmp	r3, #64	; 0x40
 8005948:	d1b5      	bne.n	80058b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596a:	d11b      	bne.n	80059a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005974:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	f043 0204 	orr.w	r2, r3, #4
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
	...

080059b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e267      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d075      	beq.n	8005abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059d2:	4b88      	ldr	r3, [pc, #544]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 030c 	and.w	r3, r3, #12
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d00c      	beq.n	80059f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059de:	4b85      	ldr	r3, [pc, #532]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d112      	bne.n	8005a10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ea:	4b82      	ldr	r3, [pc, #520]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059f6:	d10b      	bne.n	8005a10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f8:	4b7e      	ldr	r3, [pc, #504]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d05b      	beq.n	8005abc <HAL_RCC_OscConfig+0x108>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d157      	bne.n	8005abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e242      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a18:	d106      	bne.n	8005a28 <HAL_RCC_OscConfig+0x74>
 8005a1a:	4b76      	ldr	r3, [pc, #472]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a75      	ldr	r2, [pc, #468]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	e01d      	b.n	8005a64 <HAL_RCC_OscConfig+0xb0>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a30:	d10c      	bne.n	8005a4c <HAL_RCC_OscConfig+0x98>
 8005a32:	4b70      	ldr	r3, [pc, #448]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a6f      	ldr	r2, [pc, #444]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a3c:	6013      	str	r3, [r2, #0]
 8005a3e:	4b6d      	ldr	r3, [pc, #436]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a6c      	ldr	r2, [pc, #432]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	e00b      	b.n	8005a64 <HAL_RCC_OscConfig+0xb0>
 8005a4c:	4b69      	ldr	r3, [pc, #420]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a68      	ldr	r2, [pc, #416]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	4b66      	ldr	r3, [pc, #408]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a65      	ldr	r2, [pc, #404]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d013      	beq.n	8005a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a6c:	f7fd fb78 	bl	8003160 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a74:	f7fd fb74 	bl	8003160 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b64      	cmp	r3, #100	; 0x64
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e207      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a86:	4b5b      	ldr	r3, [pc, #364]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0f0      	beq.n	8005a74 <HAL_RCC_OscConfig+0xc0>
 8005a92:	e014      	b.n	8005abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a94:	f7fd fb64 	bl	8003160 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a9c:	f7fd fb60 	bl	8003160 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b64      	cmp	r3, #100	; 0x64
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e1f3      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aae:	4b51      	ldr	r3, [pc, #324]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f0      	bne.n	8005a9c <HAL_RCC_OscConfig+0xe8>
 8005aba:	e000      	b.n	8005abe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d063      	beq.n	8005b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aca:	4b4a      	ldr	r3, [pc, #296]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 030c 	and.w	r3, r3, #12
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00b      	beq.n	8005aee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ad6:	4b47      	ldr	r3, [pc, #284]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d11c      	bne.n	8005b1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ae2:	4b44      	ldr	r3, [pc, #272]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d116      	bne.n	8005b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aee:	4b41      	ldr	r3, [pc, #260]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d005      	beq.n	8005b06 <HAL_RCC_OscConfig+0x152>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d001      	beq.n	8005b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e1c7      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b06:	4b3b      	ldr	r3, [pc, #236]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	4937      	ldr	r1, [pc, #220]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b1a:	e03a      	b.n	8005b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d020      	beq.n	8005b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b24:	4b34      	ldr	r3, [pc, #208]	; (8005bf8 <HAL_RCC_OscConfig+0x244>)
 8005b26:	2201      	movs	r2, #1
 8005b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2a:	f7fd fb19 	bl	8003160 <HAL_GetTick>
 8005b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b30:	e008      	b.n	8005b44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b32:	f7fd fb15 	bl	8003160 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e1a8      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b44:	4b2b      	ldr	r3, [pc, #172]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0f0      	beq.n	8005b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b50:	4b28      	ldr	r3, [pc, #160]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	4925      	ldr	r1, [pc, #148]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	600b      	str	r3, [r1, #0]
 8005b64:	e015      	b.n	8005b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b66:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <HAL_RCC_OscConfig+0x244>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6c:	f7fd faf8 	bl	8003160 <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b74:	f7fd faf4 	bl	8003160 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e187      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b86:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1f0      	bne.n	8005b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d036      	beq.n	8005c0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d016      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ba6:	4b15      	ldr	r3, [pc, #84]	; (8005bfc <HAL_RCC_OscConfig+0x248>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bac:	f7fd fad8 	bl	8003160 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bb4:	f7fd fad4 	bl	8003160 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e167      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bc6:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <HAL_RCC_OscConfig+0x240>)
 8005bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x200>
 8005bd2:	e01b      	b.n	8005c0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bd4:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <HAL_RCC_OscConfig+0x248>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bda:	f7fd fac1 	bl	8003160 <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005be0:	e00e      	b.n	8005c00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005be2:	f7fd fabd 	bl	8003160 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d907      	bls.n	8005c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e150      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	42470000 	.word	0x42470000
 8005bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c00:	4b88      	ldr	r3, [pc, #544]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1ea      	bne.n	8005be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 8097 	beq.w	8005d48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c1e:	4b81      	ldr	r3, [pc, #516]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10f      	bne.n	8005c4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60bb      	str	r3, [r7, #8]
 8005c2e:	4b7d      	ldr	r3, [pc, #500]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	4a7c      	ldr	r2, [pc, #496]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c38:	6413      	str	r3, [r2, #64]	; 0x40
 8005c3a:	4b7a      	ldr	r3, [pc, #488]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c42:	60bb      	str	r3, [r7, #8]
 8005c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c46:	2301      	movs	r3, #1
 8005c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c4a:	4b77      	ldr	r3, [pc, #476]	; (8005e28 <HAL_RCC_OscConfig+0x474>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d118      	bne.n	8005c88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c56:	4b74      	ldr	r3, [pc, #464]	; (8005e28 <HAL_RCC_OscConfig+0x474>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a73      	ldr	r2, [pc, #460]	; (8005e28 <HAL_RCC_OscConfig+0x474>)
 8005c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c62:	f7fd fa7d 	bl	8003160 <HAL_GetTick>
 8005c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c68:	e008      	b.n	8005c7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c6a:	f7fd fa79 	bl	8003160 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e10c      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c7c:	4b6a      	ldr	r3, [pc, #424]	; (8005e28 <HAL_RCC_OscConfig+0x474>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0f0      	beq.n	8005c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d106      	bne.n	8005c9e <HAL_RCC_OscConfig+0x2ea>
 8005c90:	4b64      	ldr	r3, [pc, #400]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c94:	4a63      	ldr	r2, [pc, #396]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005c96:	f043 0301 	orr.w	r3, r3, #1
 8005c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c9c:	e01c      	b.n	8005cd8 <HAL_RCC_OscConfig+0x324>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2b05      	cmp	r3, #5
 8005ca4:	d10c      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x30c>
 8005ca6:	4b5f      	ldr	r3, [pc, #380]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005caa:	4a5e      	ldr	r2, [pc, #376]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005cac:	f043 0304 	orr.w	r3, r3, #4
 8005cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb2:	4b5c      	ldr	r3, [pc, #368]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	4a5b      	ldr	r2, [pc, #364]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cbe:	e00b      	b.n	8005cd8 <HAL_RCC_OscConfig+0x324>
 8005cc0:	4b58      	ldr	r3, [pc, #352]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc4:	4a57      	ldr	r2, [pc, #348]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	6713      	str	r3, [r2, #112]	; 0x70
 8005ccc:	4b55      	ldr	r3, [pc, #340]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd0:	4a54      	ldr	r2, [pc, #336]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005cd2:	f023 0304 	bic.w	r3, r3, #4
 8005cd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d015      	beq.n	8005d0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce0:	f7fd fa3e 	bl	8003160 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce6:	e00a      	b.n	8005cfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ce8:	f7fd fa3a 	bl	8003160 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e0cb      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cfe:	4b49      	ldr	r3, [pc, #292]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0ee      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x334>
 8005d0a:	e014      	b.n	8005d36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d0c:	f7fd fa28 	bl	8003160 <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d12:	e00a      	b.n	8005d2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d14:	f7fd fa24 	bl	8003160 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e0b5      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d2a:	4b3e      	ldr	r3, [pc, #248]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1ee      	bne.n	8005d14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d105      	bne.n	8005d48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d3c:	4b39      	ldr	r3, [pc, #228]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	4a38      	ldr	r2, [pc, #224]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80a1 	beq.w	8005e94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d52:	4b34      	ldr	r3, [pc, #208]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 030c 	and.w	r3, r3, #12
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d05c      	beq.n	8005e18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d141      	bne.n	8005dea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d66:	4b31      	ldr	r3, [pc, #196]	; (8005e2c <HAL_RCC_OscConfig+0x478>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6c:	f7fd f9f8 	bl	8003160 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d74:	f7fd f9f4 	bl	8003160 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e087      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d86:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f0      	bne.n	8005d74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69da      	ldr	r2, [r3, #28]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	019b      	lsls	r3, r3, #6
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	3b01      	subs	r3, #1
 8005dac:	041b      	lsls	r3, r3, #16
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	061b      	lsls	r3, r3, #24
 8005db6:	491b      	ldr	r1, [pc, #108]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dbc:	4b1b      	ldr	r3, [pc, #108]	; (8005e2c <HAL_RCC_OscConfig+0x478>)
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc2:	f7fd f9cd 	bl	8003160 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dca:	f7fd f9c9 	bl	8003160 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e05c      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ddc:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0f0      	beq.n	8005dca <HAL_RCC_OscConfig+0x416>
 8005de8:	e054      	b.n	8005e94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dea:	4b10      	ldr	r3, [pc, #64]	; (8005e2c <HAL_RCC_OscConfig+0x478>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df0:	f7fd f9b6 	bl	8003160 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005df8:	f7fd f9b2 	bl	8003160 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e045      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0a:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <HAL_RCC_OscConfig+0x470>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0x444>
 8005e16:	e03d      	b.n	8005e94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d107      	bne.n	8005e30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e038      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
 8005e24:	40023800 	.word	0x40023800
 8005e28:	40007000 	.word	0x40007000
 8005e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e30:	4b1b      	ldr	r3, [pc, #108]	; (8005ea0 <HAL_RCC_OscConfig+0x4ec>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d028      	beq.n	8005e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d121      	bne.n	8005e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d11a      	bne.n	8005e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e60:	4013      	ands	r3, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d111      	bne.n	8005e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	085b      	lsrs	r3, r3, #1
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d107      	bne.n	8005e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d001      	beq.n	8005e94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40023800 	.word	0x40023800

08005ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e0cc      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005eb8:	4b68      	ldr	r3, [pc, #416]	; (800605c <HAL_RCC_ClockConfig+0x1b8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d90c      	bls.n	8005ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ec6:	4b65      	ldr	r3, [pc, #404]	; (800605c <HAL_RCC_ClockConfig+0x1b8>)
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ece:	4b63      	ldr	r3, [pc, #396]	; (800605c <HAL_RCC_ClockConfig+0x1b8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d001      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e0b8      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d020      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ef8:	4b59      	ldr	r3, [pc, #356]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	4a58      	ldr	r2, [pc, #352]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f10:	4b53      	ldr	r3, [pc, #332]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	4a52      	ldr	r2, [pc, #328]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f1c:	4b50      	ldr	r3, [pc, #320]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	494d      	ldr	r1, [pc, #308]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d044      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d107      	bne.n	8005f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f42:	4b47      	ldr	r3, [pc, #284]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d119      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e07f      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d003      	beq.n	8005f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d107      	bne.n	8005f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f62:	4b3f      	ldr	r3, [pc, #252]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d109      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e06f      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f72:	4b3b      	ldr	r3, [pc, #236]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e067      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f82:	4b37      	ldr	r3, [pc, #220]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f023 0203 	bic.w	r2, r3, #3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	4934      	ldr	r1, [pc, #208]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f94:	f7fd f8e4 	bl	8003160 <HAL_GetTick>
 8005f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f9a:	e00a      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f9c:	f7fd f8e0 	bl	8003160 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e04f      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb2:	4b2b      	ldr	r3, [pc, #172]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 020c 	and.w	r2, r3, #12
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d1eb      	bne.n	8005f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fc4:	4b25      	ldr	r3, [pc, #148]	; (800605c <HAL_RCC_ClockConfig+0x1b8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d20c      	bcs.n	8005fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd2:	4b22      	ldr	r3, [pc, #136]	; (800605c <HAL_RCC_ClockConfig+0x1b8>)
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fda:	4b20      	ldr	r3, [pc, #128]	; (800605c <HAL_RCC_ClockConfig+0x1b8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d001      	beq.n	8005fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e032      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ff8:	4b19      	ldr	r3, [pc, #100]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4916      	ldr	r1, [pc, #88]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	4313      	orrs	r3, r2
 8006008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006016:	4b12      	ldr	r3, [pc, #72]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	490e      	ldr	r1, [pc, #56]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8006026:	4313      	orrs	r3, r2
 8006028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800602a:	f000 f821 	bl	8006070 <HAL_RCC_GetSysClockFreq>
 800602e:	4602      	mov	r2, r0
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	091b      	lsrs	r3, r3, #4
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	490a      	ldr	r1, [pc, #40]	; (8006064 <HAL_RCC_ClockConfig+0x1c0>)
 800603c:	5ccb      	ldrb	r3, [r1, r3]
 800603e:	fa22 f303 	lsr.w	r3, r2, r3
 8006042:	4a09      	ldr	r2, [pc, #36]	; (8006068 <HAL_RCC_ClockConfig+0x1c4>)
 8006044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006046:	4b09      	ldr	r3, [pc, #36]	; (800606c <HAL_RCC_ClockConfig+0x1c8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f7fb fed6 	bl	8001dfc <HAL_InitTick>

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	40023c00 	.word	0x40023c00
 8006060:	40023800 	.word	0x40023800
 8006064:	0800ab4c 	.word	0x0800ab4c
 8006068:	20000018 	.word	0x20000018
 800606c:	2000001c 	.word	0x2000001c

08006070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006074:	b090      	sub	sp, #64	; 0x40
 8006076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	637b      	str	r3, [r7, #52]	; 0x34
 800607c:	2300      	movs	r3, #0
 800607e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006080:	2300      	movs	r3, #0
 8006082:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006088:	4b59      	ldr	r3, [pc, #356]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 030c 	and.w	r3, r3, #12
 8006090:	2b08      	cmp	r3, #8
 8006092:	d00d      	beq.n	80060b0 <HAL_RCC_GetSysClockFreq+0x40>
 8006094:	2b08      	cmp	r3, #8
 8006096:	f200 80a1 	bhi.w	80061dc <HAL_RCC_GetSysClockFreq+0x16c>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <HAL_RCC_GetSysClockFreq+0x34>
 800609e:	2b04      	cmp	r3, #4
 80060a0:	d003      	beq.n	80060aa <HAL_RCC_GetSysClockFreq+0x3a>
 80060a2:	e09b      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060a4:	4b53      	ldr	r3, [pc, #332]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80060a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80060a8:	e09b      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060aa:	4b53      	ldr	r3, [pc, #332]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80060ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060ae:	e098      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060b0:	4b4f      	ldr	r3, [pc, #316]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060ba:	4b4d      	ldr	r3, [pc, #308]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d028      	beq.n	8006118 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060c6:	4b4a      	ldr	r3, [pc, #296]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	099b      	lsrs	r3, r3, #6
 80060cc:	2200      	movs	r2, #0
 80060ce:	623b      	str	r3, [r7, #32]
 80060d0:	627a      	str	r2, [r7, #36]	; 0x24
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060d8:	2100      	movs	r1, #0
 80060da:	4b47      	ldr	r3, [pc, #284]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80060dc:	fb03 f201 	mul.w	r2, r3, r1
 80060e0:	2300      	movs	r3, #0
 80060e2:	fb00 f303 	mul.w	r3, r0, r3
 80060e6:	4413      	add	r3, r2
 80060e8:	4a43      	ldr	r2, [pc, #268]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80060ea:	fba0 1202 	umull	r1, r2, r0, r2
 80060ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060f0:	460a      	mov	r2, r1
 80060f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80060f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f6:	4413      	add	r3, r2
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fc:	2200      	movs	r2, #0
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	61fa      	str	r2, [r7, #28]
 8006102:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006106:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800610a:	f7fa f85d 	bl	80001c8 <__aeabi_uldivmod>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4613      	mov	r3, r2
 8006114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006116:	e053      	b.n	80061c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006118:	4b35      	ldr	r3, [pc, #212]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	099b      	lsrs	r3, r3, #6
 800611e:	2200      	movs	r2, #0
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	617a      	str	r2, [r7, #20]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800612a:	f04f 0b00 	mov.w	fp, #0
 800612e:	4652      	mov	r2, sl
 8006130:	465b      	mov	r3, fp
 8006132:	f04f 0000 	mov.w	r0, #0
 8006136:	f04f 0100 	mov.w	r1, #0
 800613a:	0159      	lsls	r1, r3, #5
 800613c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006140:	0150      	lsls	r0, r2, #5
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	ebb2 080a 	subs.w	r8, r2, sl
 800614a:	eb63 090b 	sbc.w	r9, r3, fp
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800615a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800615e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006162:	ebb2 0408 	subs.w	r4, r2, r8
 8006166:	eb63 0509 	sbc.w	r5, r3, r9
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	00eb      	lsls	r3, r5, #3
 8006174:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006178:	00e2      	lsls	r2, r4, #3
 800617a:	4614      	mov	r4, r2
 800617c:	461d      	mov	r5, r3
 800617e:	eb14 030a 	adds.w	r3, r4, sl
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	eb45 030b 	adc.w	r3, r5, fp
 8006188:	607b      	str	r3, [r7, #4]
 800618a:	f04f 0200 	mov.w	r2, #0
 800618e:	f04f 0300 	mov.w	r3, #0
 8006192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006196:	4629      	mov	r1, r5
 8006198:	028b      	lsls	r3, r1, #10
 800619a:	4621      	mov	r1, r4
 800619c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061a0:	4621      	mov	r1, r4
 80061a2:	028a      	lsls	r2, r1, #10
 80061a4:	4610      	mov	r0, r2
 80061a6:	4619      	mov	r1, r3
 80061a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061aa:	2200      	movs	r2, #0
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	60fa      	str	r2, [r7, #12]
 80061b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061b4:	f7fa f808 	bl	80001c8 <__aeabi_uldivmod>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4613      	mov	r3, r2
 80061be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	0c1b      	lsrs	r3, r3, #16
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	3301      	adds	r3, #1
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80061d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061da:	e002      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061dc:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80061de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3740      	adds	r7, #64	; 0x40
 80061e8:	46bd      	mov	sp, r7
 80061ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ee:	bf00      	nop
 80061f0:	40023800 	.word	0x40023800
 80061f4:	00f42400 	.word	0x00f42400
 80061f8:	017d7840 	.word	0x017d7840

080061fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006200:	4b03      	ldr	r3, [pc, #12]	; (8006210 <HAL_RCC_GetHCLKFreq+0x14>)
 8006202:	681b      	ldr	r3, [r3, #0]
}
 8006204:	4618      	mov	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	20000018 	.word	0x20000018

08006214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006218:	f7ff fff0 	bl	80061fc <HAL_RCC_GetHCLKFreq>
 800621c:	4602      	mov	r2, r0
 800621e:	4b05      	ldr	r3, [pc, #20]	; (8006234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	0a9b      	lsrs	r3, r3, #10
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	4903      	ldr	r1, [pc, #12]	; (8006238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800622a:	5ccb      	ldrb	r3, [r1, r3]
 800622c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006230:	4618      	mov	r0, r3
 8006232:	bd80      	pop	{r7, pc}
 8006234:	40023800 	.word	0x40023800
 8006238:	0800ab5c 	.word	0x0800ab5c

0800623c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006240:	f7ff ffdc 	bl	80061fc <HAL_RCC_GetHCLKFreq>
 8006244:	4602      	mov	r2, r0
 8006246:	4b05      	ldr	r3, [pc, #20]	; (800625c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	0b5b      	lsrs	r3, r3, #13
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	4903      	ldr	r1, [pc, #12]	; (8006260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006252:	5ccb      	ldrb	r3, [r1, r3]
 8006254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006258:	4618      	mov	r0, r3
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40023800 	.word	0x40023800
 8006260:	0800ab5c 	.word	0x0800ab5c

08006264 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	220f      	movs	r2, #15
 8006272:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006274:	4b12      	ldr	r3, [pc, #72]	; (80062c0 <HAL_RCC_GetClockConfig+0x5c>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0203 	and.w	r2, r3, #3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006280:	4b0f      	ldr	r3, [pc, #60]	; (80062c0 <HAL_RCC_GetClockConfig+0x5c>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800628c:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <HAL_RCC_GetClockConfig+0x5c>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006298:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <HAL_RCC_GetClockConfig+0x5c>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	08db      	lsrs	r3, r3, #3
 800629e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062a6:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <HAL_RCC_GetClockConfig+0x60>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0207 	and.w	r2, r3, #7
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	601a      	str	r2, [r3, #0]
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40023800 	.word	0x40023800
 80062c4:	40023c00 	.word	0x40023c00

080062c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e07b      	b.n	80063d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d108      	bne.n	80062f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ea:	d009      	beq.n	8006300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	61da      	str	r2, [r3, #28]
 80062f2:	e005      	b.n	8006300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fb fcfe 	bl	8001d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006336:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	431a      	orrs	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006370:	431a      	orrs	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006384:	ea42 0103 	orr.w	r1, r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	0c1b      	lsrs	r3, r3, #16
 800639e:	f003 0104 	and.w	r1, r3, #4
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	f003 0210 	and.w	r2, r3, #16
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e041      	b.n	8006470 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d106      	bne.n	8006406 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7fc f87f 	bl	8002504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2202      	movs	r2, #2
 800640a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3304      	adds	r3, #4
 8006416:	4619      	mov	r1, r3
 8006418:	4610      	mov	r0, r2
 800641a:	f000 fc19 	bl	8006c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b01      	cmp	r3, #1
 800648a:	d001      	beq.n	8006490 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e046      	b.n	800651e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a23      	ldr	r2, [pc, #140]	; (800652c <HAL_TIM_Base_Start+0xb4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d022      	beq.n	80064e8 <HAL_TIM_Base_Start+0x70>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064aa:	d01d      	beq.n	80064e8 <HAL_TIM_Base_Start+0x70>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1f      	ldr	r2, [pc, #124]	; (8006530 <HAL_TIM_Base_Start+0xb8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d018      	beq.n	80064e8 <HAL_TIM_Base_Start+0x70>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1e      	ldr	r2, [pc, #120]	; (8006534 <HAL_TIM_Base_Start+0xbc>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d013      	beq.n	80064e8 <HAL_TIM_Base_Start+0x70>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1c      	ldr	r2, [pc, #112]	; (8006538 <HAL_TIM_Base_Start+0xc0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00e      	beq.n	80064e8 <HAL_TIM_Base_Start+0x70>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1b      	ldr	r2, [pc, #108]	; (800653c <HAL_TIM_Base_Start+0xc4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d009      	beq.n	80064e8 <HAL_TIM_Base_Start+0x70>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a19      	ldr	r2, [pc, #100]	; (8006540 <HAL_TIM_Base_Start+0xc8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d004      	beq.n	80064e8 <HAL_TIM_Base_Start+0x70>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a18      	ldr	r2, [pc, #96]	; (8006544 <HAL_TIM_Base_Start+0xcc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d111      	bne.n	800650c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b06      	cmp	r3, #6
 80064f8:	d010      	beq.n	800651c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0201 	orr.w	r2, r2, #1
 8006508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650a:	e007      	b.n	800651c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0201 	orr.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40010000 	.word	0x40010000
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800
 8006538:	40000c00 	.word	0x40000c00
 800653c:	40010400 	.word	0x40010400
 8006540:	40014000 	.word	0x40014000
 8006544:	40001800 	.word	0x40001800

08006548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	d001      	beq.n	8006560 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e04e      	b.n	80065fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a23      	ldr	r2, [pc, #140]	; (800660c <HAL_TIM_Base_Start_IT+0xc4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d022      	beq.n	80065c8 <HAL_TIM_Base_Start_IT+0x80>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800658a:	d01d      	beq.n	80065c8 <HAL_TIM_Base_Start_IT+0x80>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1f      	ldr	r2, [pc, #124]	; (8006610 <HAL_TIM_Base_Start_IT+0xc8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d018      	beq.n	80065c8 <HAL_TIM_Base_Start_IT+0x80>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <HAL_TIM_Base_Start_IT+0xcc>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d013      	beq.n	80065c8 <HAL_TIM_Base_Start_IT+0x80>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1c      	ldr	r2, [pc, #112]	; (8006618 <HAL_TIM_Base_Start_IT+0xd0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00e      	beq.n	80065c8 <HAL_TIM_Base_Start_IT+0x80>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1b      	ldr	r2, [pc, #108]	; (800661c <HAL_TIM_Base_Start_IT+0xd4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d009      	beq.n	80065c8 <HAL_TIM_Base_Start_IT+0x80>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a19      	ldr	r2, [pc, #100]	; (8006620 <HAL_TIM_Base_Start_IT+0xd8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d004      	beq.n	80065c8 <HAL_TIM_Base_Start_IT+0x80>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a18      	ldr	r2, [pc, #96]	; (8006624 <HAL_TIM_Base_Start_IT+0xdc>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d111      	bne.n	80065ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b06      	cmp	r3, #6
 80065d8:	d010      	beq.n	80065fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f042 0201 	orr.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ea:	e007      	b.n	80065fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	40010000 	.word	0x40010000
 8006610:	40000400 	.word	0x40000400
 8006614:	40000800 	.word	0x40000800
 8006618:	40000c00 	.word	0x40000c00
 800661c:	40010400 	.word	0x40010400
 8006620:	40014000 	.word	0x40014000
 8006624:	40001800 	.word	0x40001800

08006628 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e041      	b.n	80066be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f839 	bl	80066c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3304      	adds	r3, #4
 8006664:	4619      	mov	r1, r3
 8006666:	4610      	mov	r0, r2
 8006668:	f000 faf2 	bl	8006c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d122      	bne.n	8006736 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d11b      	bne.n	8006736 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f06f 0202 	mvn.w	r2, #2
 8006706:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fa78 	bl	8006c12 <HAL_TIM_IC_CaptureCallback>
 8006722:	e005      	b.n	8006730 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fa6a 	bl	8006bfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa7b 	bl	8006c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b04      	cmp	r3, #4
 8006742:	d122      	bne.n	800678a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	2b04      	cmp	r3, #4
 8006750:	d11b      	bne.n	800678a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f06f 0204 	mvn.w	r2, #4
 800675a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fa4e 	bl	8006c12 <HAL_TIM_IC_CaptureCallback>
 8006776:	e005      	b.n	8006784 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fa40 	bl	8006bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fa51 	bl	8006c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f003 0308 	and.w	r3, r3, #8
 8006794:	2b08      	cmp	r3, #8
 8006796:	d122      	bne.n	80067de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	d11b      	bne.n	80067de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f06f 0208 	mvn.w	r2, #8
 80067ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2204      	movs	r2, #4
 80067b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	f003 0303 	and.w	r3, r3, #3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fa24 	bl	8006c12 <HAL_TIM_IC_CaptureCallback>
 80067ca:	e005      	b.n	80067d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fa16 	bl	8006bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fa27 	bl	8006c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b10      	cmp	r3, #16
 80067ea:	d122      	bne.n	8006832 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f003 0310 	and.w	r3, r3, #16
 80067f6:	2b10      	cmp	r3, #16
 80067f8:	d11b      	bne.n	8006832 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f06f 0210 	mvn.w	r2, #16
 8006802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2208      	movs	r2, #8
 8006808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f9fa 	bl	8006c12 <HAL_TIM_IC_CaptureCallback>
 800681e:	e005      	b.n	800682c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f9ec 	bl	8006bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f9fd 	bl	8006c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b01      	cmp	r3, #1
 800683e:	d10e      	bne.n	800685e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b01      	cmp	r3, #1
 800684c:	d107      	bne.n	800685e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f06f 0201 	mvn.w	r2, #1
 8006856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7fb fa15 	bl	8001c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006868:	2b80      	cmp	r3, #128	; 0x80
 800686a:	d10e      	bne.n	800688a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006876:	2b80      	cmp	r3, #128	; 0x80
 8006878:	d107      	bne.n	800688a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fda5 	bl	80073d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	d10e      	bne.n	80068b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a2:	2b40      	cmp	r3, #64	; 0x40
 80068a4:	d107      	bne.n	80068b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f9c2 	bl	8006c3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d10e      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	d107      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f06f 0220 	mvn.w	r2, #32
 80068da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fd6f 	bl	80073c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006906:	2302      	movs	r3, #2
 8006908:	e0ae      	b.n	8006a68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b0c      	cmp	r3, #12
 8006916:	f200 809f 	bhi.w	8006a58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006955 	.word	0x08006955
 8006924:	08006a59 	.word	0x08006a59
 8006928:	08006a59 	.word	0x08006a59
 800692c:	08006a59 	.word	0x08006a59
 8006930:	08006995 	.word	0x08006995
 8006934:	08006a59 	.word	0x08006a59
 8006938:	08006a59 	.word	0x08006a59
 800693c:	08006a59 	.word	0x08006a59
 8006940:	080069d7 	.word	0x080069d7
 8006944:	08006a59 	.word	0x08006a59
 8006948:	08006a59 	.word	0x08006a59
 800694c:	08006a59 	.word	0x08006a59
 8006950:	08006a17 	.word	0x08006a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68b9      	ldr	r1, [r7, #8]
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fa18 	bl	8006d90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0208 	orr.w	r2, r2, #8
 800696e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0204 	bic.w	r2, r2, #4
 800697e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6999      	ldr	r1, [r3, #24]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	691a      	ldr	r2, [r3, #16]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	619a      	str	r2, [r3, #24]
      break;
 8006992:	e064      	b.n	8006a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fa68 	bl	8006e70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699a      	ldr	r2, [r3, #24]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6999      	ldr	r1, [r3, #24]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	021a      	lsls	r2, r3, #8
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	619a      	str	r2, [r3, #24]
      break;
 80069d4:	e043      	b.n	8006a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68b9      	ldr	r1, [r7, #8]
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fabd 	bl	8006f5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69da      	ldr	r2, [r3, #28]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0208 	orr.w	r2, r2, #8
 80069f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69da      	ldr	r2, [r3, #28]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0204 	bic.w	r2, r2, #4
 8006a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69d9      	ldr	r1, [r3, #28]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	61da      	str	r2, [r3, #28]
      break;
 8006a14:	e023      	b.n	8006a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68b9      	ldr	r1, [r7, #8]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fb11 	bl	8007044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	69da      	ldr	r2, [r3, #28]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69da      	ldr	r2, [r3, #28]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69d9      	ldr	r1, [r3, #28]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	021a      	lsls	r2, r3, #8
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	61da      	str	r2, [r3, #28]
      break;
 8006a56:	e002      	b.n	8006a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d101      	bne.n	8006a8c <HAL_TIM_ConfigClockSource+0x1c>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e0b4      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x186>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ac4:	d03e      	beq.n	8006b44 <HAL_TIM_ConfigClockSource+0xd4>
 8006ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aca:	f200 8087 	bhi.w	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad2:	f000 8086 	beq.w	8006be2 <HAL_TIM_ConfigClockSource+0x172>
 8006ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ada:	d87f      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006adc:	2b70      	cmp	r3, #112	; 0x70
 8006ade:	d01a      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0xa6>
 8006ae0:	2b70      	cmp	r3, #112	; 0x70
 8006ae2:	d87b      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006ae4:	2b60      	cmp	r3, #96	; 0x60
 8006ae6:	d050      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x11a>
 8006ae8:	2b60      	cmp	r3, #96	; 0x60
 8006aea:	d877      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006aec:	2b50      	cmp	r3, #80	; 0x50
 8006aee:	d03c      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0xfa>
 8006af0:	2b50      	cmp	r3, #80	; 0x50
 8006af2:	d873      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006af4:	2b40      	cmp	r3, #64	; 0x40
 8006af6:	d058      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0x13a>
 8006af8:	2b40      	cmp	r3, #64	; 0x40
 8006afa:	d86f      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006afc:	2b30      	cmp	r3, #48	; 0x30
 8006afe:	d064      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x15a>
 8006b00:	2b30      	cmp	r3, #48	; 0x30
 8006b02:	d86b      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d060      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x15a>
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d867      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d05c      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x15a>
 8006b10:	2b10      	cmp	r3, #16
 8006b12:	d05a      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x15a>
 8006b14:	e062      	b.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6899      	ldr	r1, [r3, #8]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f000 fb5d 	bl	80071e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	609a      	str	r2, [r3, #8]
      break;
 8006b42:	e04f      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	6899      	ldr	r1, [r3, #8]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f000 fb46 	bl	80071e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b66:	609a      	str	r2, [r3, #8]
      break;
 8006b68:	e03c      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6859      	ldr	r1, [r3, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f000 faba 	bl	80070f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2150      	movs	r1, #80	; 0x50
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fb13 	bl	80071ae <TIM_ITRx_SetConfig>
      break;
 8006b88:	e02c      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6859      	ldr	r1, [r3, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	461a      	mov	r2, r3
 8006b98:	f000 fad9 	bl	800714e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2160      	movs	r1, #96	; 0x60
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fb03 	bl	80071ae <TIM_ITRx_SetConfig>
      break;
 8006ba8:	e01c      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6859      	ldr	r1, [r3, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f000 fa9a 	bl	80070f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2140      	movs	r1, #64	; 0x40
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 faf3 	bl	80071ae <TIM_ITRx_SetConfig>
      break;
 8006bc8:	e00c      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f000 faea 	bl	80071ae <TIM_ITRx_SetConfig>
      break;
 8006bda:	e003      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
      break;
 8006be0:	e000      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
	...

08006c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a40      	ldr	r2, [pc, #256]	; (8006d64 <TIM_Base_SetConfig+0x114>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <TIM_Base_SetConfig+0x40>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6e:	d00f      	beq.n	8006c90 <TIM_Base_SetConfig+0x40>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a3d      	ldr	r2, [pc, #244]	; (8006d68 <TIM_Base_SetConfig+0x118>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00b      	beq.n	8006c90 <TIM_Base_SetConfig+0x40>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a3c      	ldr	r2, [pc, #240]	; (8006d6c <TIM_Base_SetConfig+0x11c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d007      	beq.n	8006c90 <TIM_Base_SetConfig+0x40>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a3b      	ldr	r2, [pc, #236]	; (8006d70 <TIM_Base_SetConfig+0x120>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <TIM_Base_SetConfig+0x40>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a3a      	ldr	r2, [pc, #232]	; (8006d74 <TIM_Base_SetConfig+0x124>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d108      	bne.n	8006ca2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a2f      	ldr	r2, [pc, #188]	; (8006d64 <TIM_Base_SetConfig+0x114>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d02b      	beq.n	8006d02 <TIM_Base_SetConfig+0xb2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb0:	d027      	beq.n	8006d02 <TIM_Base_SetConfig+0xb2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a2c      	ldr	r2, [pc, #176]	; (8006d68 <TIM_Base_SetConfig+0x118>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d023      	beq.n	8006d02 <TIM_Base_SetConfig+0xb2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a2b      	ldr	r2, [pc, #172]	; (8006d6c <TIM_Base_SetConfig+0x11c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d01f      	beq.n	8006d02 <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a2a      	ldr	r2, [pc, #168]	; (8006d70 <TIM_Base_SetConfig+0x120>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d01b      	beq.n	8006d02 <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a29      	ldr	r2, [pc, #164]	; (8006d74 <TIM_Base_SetConfig+0x124>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d017      	beq.n	8006d02 <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a28      	ldr	r2, [pc, #160]	; (8006d78 <TIM_Base_SetConfig+0x128>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d013      	beq.n	8006d02 <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a27      	ldr	r2, [pc, #156]	; (8006d7c <TIM_Base_SetConfig+0x12c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00f      	beq.n	8006d02 <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a26      	ldr	r2, [pc, #152]	; (8006d80 <TIM_Base_SetConfig+0x130>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00b      	beq.n	8006d02 <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a25      	ldr	r2, [pc, #148]	; (8006d84 <TIM_Base_SetConfig+0x134>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d007      	beq.n	8006d02 <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a24      	ldr	r2, [pc, #144]	; (8006d88 <TIM_Base_SetConfig+0x138>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d003      	beq.n	8006d02 <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a23      	ldr	r2, [pc, #140]	; (8006d8c <TIM_Base_SetConfig+0x13c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d108      	bne.n	8006d14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a0a      	ldr	r2, [pc, #40]	; (8006d64 <TIM_Base_SetConfig+0x114>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d003      	beq.n	8006d48 <TIM_Base_SetConfig+0xf8>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a0c      	ldr	r2, [pc, #48]	; (8006d74 <TIM_Base_SetConfig+0x124>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d103      	bne.n	8006d50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	615a      	str	r2, [r3, #20]
}
 8006d56:	bf00      	nop
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	40000c00 	.word	0x40000c00
 8006d74:	40010400 	.word	0x40010400
 8006d78:	40014000 	.word	0x40014000
 8006d7c:	40014400 	.word	0x40014400
 8006d80:	40014800 	.word	0x40014800
 8006d84:	40001800 	.word	0x40001800
 8006d88:	40001c00 	.word	0x40001c00
 8006d8c:	40002000 	.word	0x40002000

08006d90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	f023 0201 	bic.w	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0303 	bic.w	r3, r3, #3
 8006dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f023 0302 	bic.w	r3, r3, #2
 8006dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a20      	ldr	r2, [pc, #128]	; (8006e68 <TIM_OC1_SetConfig+0xd8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d003      	beq.n	8006df4 <TIM_OC1_SetConfig+0x64>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a1f      	ldr	r2, [pc, #124]	; (8006e6c <TIM_OC1_SetConfig+0xdc>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d10c      	bne.n	8006e0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f023 0308 	bic.w	r3, r3, #8
 8006dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f023 0304 	bic.w	r3, r3, #4
 8006e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a15      	ldr	r2, [pc, #84]	; (8006e68 <TIM_OC1_SetConfig+0xd8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d003      	beq.n	8006e1e <TIM_OC1_SetConfig+0x8e>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a14      	ldr	r2, [pc, #80]	; (8006e6c <TIM_OC1_SetConfig+0xdc>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d111      	bne.n	8006e42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	621a      	str	r2, [r3, #32]
}
 8006e5c:	bf00      	nop
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40010400 	.word	0x40010400

08006e70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	f023 0210 	bic.w	r2, r3, #16
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f023 0320 	bic.w	r3, r3, #32
 8006eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	011b      	lsls	r3, r3, #4
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a22      	ldr	r2, [pc, #136]	; (8006f54 <TIM_OC2_SetConfig+0xe4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_OC2_SetConfig+0x68>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a21      	ldr	r2, [pc, #132]	; (8006f58 <TIM_OC2_SetConfig+0xe8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d10d      	bne.n	8006ef4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <TIM_OC2_SetConfig+0xe4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d003      	beq.n	8006f04 <TIM_OC2_SetConfig+0x94>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a16      	ldr	r2, [pc, #88]	; (8006f58 <TIM_OC2_SetConfig+0xe8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d113      	bne.n	8006f2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	621a      	str	r2, [r3, #32]
}
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40010000 	.word	0x40010000
 8006f58:	40010400 	.word	0x40010400

08006f5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 0303 	bic.w	r3, r3, #3
 8006f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	021b      	lsls	r3, r3, #8
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a21      	ldr	r2, [pc, #132]	; (800703c <TIM_OC3_SetConfig+0xe0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d003      	beq.n	8006fc2 <TIM_OC3_SetConfig+0x66>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a20      	ldr	r2, [pc, #128]	; (8007040 <TIM_OC3_SetConfig+0xe4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d10d      	bne.n	8006fde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	021b      	lsls	r3, r3, #8
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a16      	ldr	r2, [pc, #88]	; (800703c <TIM_OC3_SetConfig+0xe0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_OC3_SetConfig+0x92>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a15      	ldr	r2, [pc, #84]	; (8007040 <TIM_OC3_SetConfig+0xe4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d113      	bne.n	8007016 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	621a      	str	r2, [r3, #32]
}
 8007030:	bf00      	nop
 8007032:	371c      	adds	r7, #28
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	40010000 	.word	0x40010000
 8007040:	40010400 	.word	0x40010400

08007044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800707a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800708e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	031b      	lsls	r3, r3, #12
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4313      	orrs	r3, r2
 800709a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a12      	ldr	r2, [pc, #72]	; (80070e8 <TIM_OC4_SetConfig+0xa4>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d003      	beq.n	80070ac <TIM_OC4_SetConfig+0x68>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a11      	ldr	r2, [pc, #68]	; (80070ec <TIM_OC4_SetConfig+0xa8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d109      	bne.n	80070c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	019b      	lsls	r3, r3, #6
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4313      	orrs	r3, r2
 80070be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	bf00      	nop
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	40010000 	.word	0x40010000
 80070ec:	40010400 	.word	0x40010400

080070f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	f023 0201 	bic.w	r2, r3, #1
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800711a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4313      	orrs	r3, r2
 8007124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f023 030a 	bic.w	r3, r3, #10
 800712c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	4313      	orrs	r3, r2
 8007134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	621a      	str	r2, [r3, #32]
}
 8007142:	bf00      	nop
 8007144:	371c      	adds	r7, #28
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800714e:	b480      	push	{r7}
 8007150:	b087      	sub	sp, #28
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	f023 0210 	bic.w	r2, r3, #16
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	031b      	lsls	r3, r3, #12
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800718a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	011b      	lsls	r3, r3, #4
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	4313      	orrs	r3, r2
 8007194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	621a      	str	r2, [r3, #32]
}
 80071a2:	bf00      	nop
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f043 0307 	orr.w	r3, r3, #7
 80071d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	609a      	str	r2, [r3, #8]
}
 80071d8:	bf00      	nop
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	021a      	lsls	r2, r3, #8
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	431a      	orrs	r2, r3
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4313      	orrs	r3, r2
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	609a      	str	r2, [r3, #8]
}
 8007218:	bf00      	nop
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007238:	2302      	movs	r3, #2
 800723a:	e05a      	b.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a21      	ldr	r2, [pc, #132]	; (8007300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d022      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007288:	d01d      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d018      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a1b      	ldr	r2, [pc, #108]	; (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d013      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1a      	ldr	r2, [pc, #104]	; (800730c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00e      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a18      	ldr	r2, [pc, #96]	; (8007310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d009      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a17      	ldr	r2, [pc, #92]	; (8007314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d004      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a15      	ldr	r2, [pc, #84]	; (8007318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d10c      	bne.n	80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	40010000 	.word	0x40010000
 8007304:	40000400 	.word	0x40000400
 8007308:	40000800 	.word	0x40000800
 800730c:	40000c00 	.word	0x40000c00
 8007310:	40010400 	.word	0x40010400
 8007314:	40014000 	.word	0x40014000
 8007318:	40001800 	.word	0x40001800

0800731c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007334:	2302      	movs	r3, #2
 8007336:	e03d      	b.n	80073b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4313      	orrs	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e03f      	b.n	800747a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d106      	bne.n	8007414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fb fa3c 	bl	800288c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2224      	movs	r2, #36	; 0x24
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800742a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fc67 	bl	8007d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	691a      	ldr	r2, [r3, #16]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	695a      	ldr	r2, [r3, #20]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2220      	movs	r2, #32
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b0ba      	sub	sp, #232	; 0xe8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80074c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10f      	bne.n	80074ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ce:	f003 0320 	and.w	r3, r3, #32
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <HAL_UART_IRQHandler+0x66>
 80074d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fb51 	bl	8007b8a <UART_Receive_IT>
      return;
 80074e8:	e256      	b.n	8007998 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80074ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 80de 	beq.w	80076b0 <HAL_UART_IRQHandler+0x22c>
 80074f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d106      	bne.n	800750e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007504:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 80d1 	beq.w	80076b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800750e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00b      	beq.n	8007532 <HAL_UART_IRQHandler+0xae>
 800751a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800751e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007522:	2b00      	cmp	r3, #0
 8007524:	d005      	beq.n	8007532 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	f043 0201 	orr.w	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <HAL_UART_IRQHandler+0xd2>
 800753e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d005      	beq.n	8007556 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	f043 0202 	orr.w	r2, r3, #2
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <HAL_UART_IRQHandler+0xf6>
 8007562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	f043 0204 	orr.w	r2, r3, #4
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800757a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b00      	cmp	r3, #0
 8007584:	d011      	beq.n	80075aa <HAL_UART_IRQHandler+0x126>
 8007586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	2b00      	cmp	r3, #0
 8007590:	d105      	bne.n	800759e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d005      	beq.n	80075aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	f043 0208 	orr.w	r2, r3, #8
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 81ed 	beq.w	800798e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d008      	beq.n	80075d2 <HAL_UART_IRQHandler+0x14e>
 80075c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c4:	f003 0320 	and.w	r3, r3, #32
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fadc 	bl	8007b8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075dc:	2b40      	cmp	r3, #64	; 0x40
 80075de:	bf0c      	ite	eq
 80075e0:	2301      	moveq	r3, #1
 80075e2:	2300      	movne	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	f003 0308 	and.w	r3, r3, #8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d103      	bne.n	80075fe <HAL_UART_IRQHandler+0x17a>
 80075f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d04f      	beq.n	800769e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f9e4 	bl	80079cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760e:	2b40      	cmp	r3, #64	; 0x40
 8007610:	d141      	bne.n	8007696 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3314      	adds	r3, #20
 8007618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800762c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3314      	adds	r3, #20
 800763a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800763e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800764a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1d9      	bne.n	8007612 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007662:	2b00      	cmp	r3, #0
 8007664:	d013      	beq.n	800768e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766a:	4a7d      	ldr	r2, [pc, #500]	; (8007860 <HAL_UART_IRQHandler+0x3dc>)
 800766c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	4618      	mov	r0, r3
 8007674:	f7fc fb02 	bl	8003c7c <HAL_DMA_Abort_IT>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d016      	beq.n	80076ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800768c:	e00e      	b.n	80076ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f986 	bl	80079a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007694:	e00a      	b.n	80076ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f982 	bl	80079a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769c:	e006      	b.n	80076ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f97e 	bl	80079a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80076aa:	e170      	b.n	800798e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ac:	bf00      	nop
    return;
 80076ae:	e16e      	b.n	800798e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	f040 814a 	bne.w	800794e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 8143 	beq.w	800794e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 813c 	beq.w	800794e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076d6:	2300      	movs	r3, #0
 80076d8:	60bb      	str	r3, [r7, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	60bb      	str	r3, [r7, #8]
 80076ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f6:	2b40      	cmp	r3, #64	; 0x40
 80076f8:	f040 80b4 	bne.w	8007864 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007708:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 8140 	beq.w	8007992 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800771a:	429a      	cmp	r2, r3
 800771c:	f080 8139 	bcs.w	8007992 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007726:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007732:	f000 8088 	beq.w	8007846 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800774c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	330c      	adds	r3, #12
 800775e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007762:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800776e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800777a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1d9      	bne.n	8007736 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3314      	adds	r3, #20
 8007788:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800778c:	e853 3f00 	ldrex	r3, [r3]
 8007790:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3314      	adds	r3, #20
 80077a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e1      	bne.n	8007782 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3314      	adds	r3, #20
 80077c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3314      	adds	r3, #20
 80077de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e3      	bne.n	80077be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	330c      	adds	r3, #12
 800780a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007816:	f023 0310 	bic.w	r3, r3, #16
 800781a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	330c      	adds	r3, #12
 8007824:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007828:	65ba      	str	r2, [r7, #88]	; 0x58
 800782a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800782e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e3      	bne.n	8007804 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007840:	4618      	mov	r0, r3
 8007842:	f7fc f9ab 	bl	8003b9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800784e:	b29b      	uxth	r3, r3
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	b29b      	uxth	r3, r3
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f8ac 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800785c:	e099      	b.n	8007992 <HAL_UART_IRQHandler+0x50e>
 800785e:	bf00      	nop
 8007860:	08007a93 	.word	0x08007a93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800786c:	b29b      	uxth	r3, r3
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007878:	b29b      	uxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 808b 	beq.w	8007996 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007880:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 8086 	beq.w	8007996 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	330c      	adds	r3, #12
 8007890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800789a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800789c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	330c      	adds	r3, #12
 80078aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80078ae:	647a      	str	r2, [r7, #68]	; 0x44
 80078b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e3      	bne.n	800788a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3314      	adds	r3, #20
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	623b      	str	r3, [r7, #32]
   return(result);
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	f023 0301 	bic.w	r3, r3, #1
 80078d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3314      	adds	r3, #20
 80078e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078e6:	633a      	str	r2, [r7, #48]	; 0x30
 80078e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e3      	bne.n	80078c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	330c      	adds	r3, #12
 800790e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	60fb      	str	r3, [r7, #12]
   return(result);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f023 0310 	bic.w	r3, r3, #16
 800791e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	330c      	adds	r3, #12
 8007928:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800792c:	61fa      	str	r2, [r7, #28]
 800792e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	69b9      	ldr	r1, [r7, #24]
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	617b      	str	r3, [r7, #20]
   return(result);
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e3      	bne.n	8007908 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f834 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800794c:	e023      	b.n	8007996 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800794e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007956:	2b00      	cmp	r3, #0
 8007958:	d009      	beq.n	800796e <HAL_UART_IRQHandler+0x4ea>
 800795a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800795e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f8a7 	bl	8007aba <UART_Transmit_IT>
    return;
 800796c:	e014      	b.n	8007998 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800796e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00e      	beq.n	8007998 <HAL_UART_IRQHandler+0x514>
 800797a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800797e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007982:	2b00      	cmp	r3, #0
 8007984:	d008      	beq.n	8007998 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f8e7 	bl	8007b5a <UART_EndTransmit_IT>
    return;
 800798c:	e004      	b.n	8007998 <HAL_UART_IRQHandler+0x514>
    return;
 800798e:	bf00      	nop
 8007990:	e002      	b.n	8007998 <HAL_UART_IRQHandler+0x514>
      return;
 8007992:	bf00      	nop
 8007994:	e000      	b.n	8007998 <HAL_UART_IRQHandler+0x514>
      return;
 8007996:	bf00      	nop
  }
}
 8007998:	37e8      	adds	r7, #232	; 0xe8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop

080079a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b095      	sub	sp, #84	; 0x54
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	330c      	adds	r3, #12
 80079da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	330c      	adds	r3, #12
 80079f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079f4:	643a      	str	r2, [r7, #64]	; 0x40
 80079f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e5      	bne.n	80079d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3314      	adds	r3, #20
 8007a0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	f023 0301 	bic.w	r3, r3, #1
 8007a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3314      	adds	r3, #20
 8007a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e5      	bne.n	8007a08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d119      	bne.n	8007a78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	330c      	adds	r3, #12
 8007a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f023 0310 	bic.w	r3, r3, #16
 8007a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	330c      	adds	r3, #12
 8007a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a64:	61ba      	str	r2, [r7, #24]
 8007a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	6979      	ldr	r1, [r7, #20]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	e841 2300 	strex	r3, r2, [r1]
 8007a70:	613b      	str	r3, [r7, #16]
   return(result);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e5      	bne.n	8007a44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a86:	bf00      	nop
 8007a88:	3754      	adds	r7, #84	; 0x54
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b084      	sub	sp, #16
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f7ff ff77 	bl	80079a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ab2:	bf00      	nop
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b085      	sub	sp, #20
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b21      	cmp	r3, #33	; 0x21
 8007acc:	d13e      	bne.n	8007b4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad6:	d114      	bne.n	8007b02 <UART_Transmit_IT+0x48>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d110      	bne.n	8007b02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007af4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	1c9a      	adds	r2, r3, #2
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	621a      	str	r2, [r3, #32]
 8007b00:	e008      	b.n	8007b14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	1c59      	adds	r1, r3, #1
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6211      	str	r1, [r2, #32]
 8007b0c:	781a      	ldrb	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	4619      	mov	r1, r3
 8007b22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10f      	bne.n	8007b48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	e000      	b.n	8007b4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b4c:	2302      	movs	r3, #2
  }
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2220      	movs	r2, #32
 8007b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7f8 ff92 	bl	8000aa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b08c      	sub	sp, #48	; 0x30
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b22      	cmp	r3, #34	; 0x22
 8007b9c:	f040 80ab 	bne.w	8007cf6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba8:	d117      	bne.n	8007bda <UART_Receive_IT+0x50>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d113      	bne.n	8007bda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd2:	1c9a      	adds	r2, r3, #2
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	629a      	str	r2, [r3, #40]	; 0x28
 8007bd8:	e026      	b.n	8007c28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007be0:	2300      	movs	r3, #0
 8007be2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bec:	d007      	beq.n	8007bfe <UART_Receive_IT+0x74>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <UART_Receive_IT+0x82>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	e008      	b.n	8007c1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	4619      	mov	r1, r3
 8007c36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d15a      	bne.n	8007cf2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0220 	bic.w	r2, r2, #32
 8007c4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	695a      	ldr	r2, [r3, #20]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0201 	bic.w	r2, r2, #1
 8007c6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d135      	bne.n	8007ce8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	330c      	adds	r3, #12
 8007c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	613b      	str	r3, [r7, #16]
   return(result);
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f023 0310 	bic.w	r3, r3, #16
 8007c98:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca2:	623a      	str	r2, [r7, #32]
 8007ca4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	69f9      	ldr	r1, [r7, #28]
 8007ca8:	6a3a      	ldr	r2, [r7, #32]
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e5      	bne.n	8007c82 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0310 	and.w	r3, r3, #16
 8007cc0:	2b10      	cmp	r3, #16
 8007cc2:	d10a      	bne.n	8007cda <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7ff fe67 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
 8007ce6:	e002      	b.n	8007cee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7f8 fef1 	bl	8000ad0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e002      	b.n	8007cf8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	e000      	b.n	8007cf8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007cf6:	2302      	movs	r3, #2
  }
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3730      	adds	r7, #48	; 0x30
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d04:	b0c0      	sub	sp, #256	; 0x100
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1c:	68d9      	ldr	r1, [r3, #12]
 8007d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	ea40 0301 	orr.w	r3, r0, r1
 8007d28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	431a      	orrs	r2, r3
 8007d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d58:	f021 010c 	bic.w	r1, r1, #12
 8007d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d66:	430b      	orrs	r3, r1
 8007d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7a:	6999      	ldr	r1, [r3, #24]
 8007d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	ea40 0301 	orr.w	r3, r0, r1
 8007d86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	4b8f      	ldr	r3, [pc, #572]	; (8007fcc <UART_SetConfig+0x2cc>)
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d005      	beq.n	8007da0 <UART_SetConfig+0xa0>
 8007d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	4b8d      	ldr	r3, [pc, #564]	; (8007fd0 <UART_SetConfig+0x2d0>)
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d104      	bne.n	8007daa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007da0:	f7fe fa4c 	bl	800623c <HAL_RCC_GetPCLK2Freq>
 8007da4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007da8:	e003      	b.n	8007db2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007daa:	f7fe fa33 	bl	8006214 <HAL_RCC_GetPCLK1Freq>
 8007dae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dbc:	f040 810c 	bne.w	8007fd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007dce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007dd2:	4622      	mov	r2, r4
 8007dd4:	462b      	mov	r3, r5
 8007dd6:	1891      	adds	r1, r2, r2
 8007dd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8007dda:	415b      	adcs	r3, r3
 8007ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007de2:	4621      	mov	r1, r4
 8007de4:	eb12 0801 	adds.w	r8, r2, r1
 8007de8:	4629      	mov	r1, r5
 8007dea:	eb43 0901 	adc.w	r9, r3, r1
 8007dee:	f04f 0200 	mov.w	r2, #0
 8007df2:	f04f 0300 	mov.w	r3, #0
 8007df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e02:	4690      	mov	r8, r2
 8007e04:	4699      	mov	r9, r3
 8007e06:	4623      	mov	r3, r4
 8007e08:	eb18 0303 	adds.w	r3, r8, r3
 8007e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e10:	462b      	mov	r3, r5
 8007e12:	eb49 0303 	adc.w	r3, r9, r3
 8007e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e2e:	460b      	mov	r3, r1
 8007e30:	18db      	adds	r3, r3, r3
 8007e32:	653b      	str	r3, [r7, #80]	; 0x50
 8007e34:	4613      	mov	r3, r2
 8007e36:	eb42 0303 	adc.w	r3, r2, r3
 8007e3a:	657b      	str	r3, [r7, #84]	; 0x54
 8007e3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e44:	f7f8 f9c0 	bl	80001c8 <__aeabi_uldivmod>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4b61      	ldr	r3, [pc, #388]	; (8007fd4 <UART_SetConfig+0x2d4>)
 8007e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e52:	095b      	lsrs	r3, r3, #5
 8007e54:	011c      	lsls	r4, r3, #4
 8007e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e68:	4642      	mov	r2, r8
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	1891      	adds	r1, r2, r2
 8007e6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e70:	415b      	adcs	r3, r3
 8007e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e78:	4641      	mov	r1, r8
 8007e7a:	eb12 0a01 	adds.w	sl, r2, r1
 8007e7e:	4649      	mov	r1, r9
 8007e80:	eb43 0b01 	adc.w	fp, r3, r1
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e98:	4692      	mov	sl, r2
 8007e9a:	469b      	mov	fp, r3
 8007e9c:	4643      	mov	r3, r8
 8007e9e:	eb1a 0303 	adds.w	r3, sl, r3
 8007ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ea6:	464b      	mov	r3, r9
 8007ea8:	eb4b 0303 	adc.w	r3, fp, r3
 8007eac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ebc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ec0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	18db      	adds	r3, r3, r3
 8007ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8007eca:	4613      	mov	r3, r2
 8007ecc:	eb42 0303 	adc.w	r3, r2, r3
 8007ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ed2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ed6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007eda:	f7f8 f975 	bl	80001c8 <__aeabi_uldivmod>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	4b3b      	ldr	r3, [pc, #236]	; (8007fd4 <UART_SetConfig+0x2d4>)
 8007ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8007eea:	095b      	lsrs	r3, r3, #5
 8007eec:	2264      	movs	r2, #100	; 0x64
 8007eee:	fb02 f303 	mul.w	r3, r2, r3
 8007ef2:	1acb      	subs	r3, r1, r3
 8007ef4:	00db      	lsls	r3, r3, #3
 8007ef6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007efa:	4b36      	ldr	r3, [pc, #216]	; (8007fd4 <UART_SetConfig+0x2d4>)
 8007efc:	fba3 2302 	umull	r2, r3, r3, r2
 8007f00:	095b      	lsrs	r3, r3, #5
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f08:	441c      	add	r4, r3
 8007f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f1c:	4642      	mov	r2, r8
 8007f1e:	464b      	mov	r3, r9
 8007f20:	1891      	adds	r1, r2, r2
 8007f22:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f24:	415b      	adcs	r3, r3
 8007f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f2c:	4641      	mov	r1, r8
 8007f2e:	1851      	adds	r1, r2, r1
 8007f30:	6339      	str	r1, [r7, #48]	; 0x30
 8007f32:	4649      	mov	r1, r9
 8007f34:	414b      	adcs	r3, r1
 8007f36:	637b      	str	r3, [r7, #52]	; 0x34
 8007f38:	f04f 0200 	mov.w	r2, #0
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f44:	4659      	mov	r1, fp
 8007f46:	00cb      	lsls	r3, r1, #3
 8007f48:	4651      	mov	r1, sl
 8007f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f4e:	4651      	mov	r1, sl
 8007f50:	00ca      	lsls	r2, r1, #3
 8007f52:	4610      	mov	r0, r2
 8007f54:	4619      	mov	r1, r3
 8007f56:	4603      	mov	r3, r0
 8007f58:	4642      	mov	r2, r8
 8007f5a:	189b      	adds	r3, r3, r2
 8007f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f60:	464b      	mov	r3, r9
 8007f62:	460a      	mov	r2, r1
 8007f64:	eb42 0303 	adc.w	r3, r2, r3
 8007f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f80:	460b      	mov	r3, r1
 8007f82:	18db      	adds	r3, r3, r3
 8007f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f86:	4613      	mov	r3, r2
 8007f88:	eb42 0303 	adc.w	r3, r2, r3
 8007f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f96:	f7f8 f917 	bl	80001c8 <__aeabi_uldivmod>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <UART_SetConfig+0x2d4>)
 8007fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8007fa4:	095b      	lsrs	r3, r3, #5
 8007fa6:	2164      	movs	r1, #100	; 0x64
 8007fa8:	fb01 f303 	mul.w	r3, r1, r3
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	00db      	lsls	r3, r3, #3
 8007fb0:	3332      	adds	r3, #50	; 0x32
 8007fb2:	4a08      	ldr	r2, [pc, #32]	; (8007fd4 <UART_SetConfig+0x2d4>)
 8007fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb8:	095b      	lsrs	r3, r3, #5
 8007fba:	f003 0207 	and.w	r2, r3, #7
 8007fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4422      	add	r2, r4
 8007fc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fc8:	e105      	b.n	80081d6 <UART_SetConfig+0x4d6>
 8007fca:	bf00      	nop
 8007fcc:	40011000 	.word	0x40011000
 8007fd0:	40011400 	.word	0x40011400
 8007fd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fe2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007fe6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007fea:	4642      	mov	r2, r8
 8007fec:	464b      	mov	r3, r9
 8007fee:	1891      	adds	r1, r2, r2
 8007ff0:	6239      	str	r1, [r7, #32]
 8007ff2:	415b      	adcs	r3, r3
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ff6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ffa:	4641      	mov	r1, r8
 8007ffc:	1854      	adds	r4, r2, r1
 8007ffe:	4649      	mov	r1, r9
 8008000:	eb43 0501 	adc.w	r5, r3, r1
 8008004:	f04f 0200 	mov.w	r2, #0
 8008008:	f04f 0300 	mov.w	r3, #0
 800800c:	00eb      	lsls	r3, r5, #3
 800800e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008012:	00e2      	lsls	r2, r4, #3
 8008014:	4614      	mov	r4, r2
 8008016:	461d      	mov	r5, r3
 8008018:	4643      	mov	r3, r8
 800801a:	18e3      	adds	r3, r4, r3
 800801c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008020:	464b      	mov	r3, r9
 8008022:	eb45 0303 	adc.w	r3, r5, r3
 8008026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800802a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008036:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800803a:	f04f 0200 	mov.w	r2, #0
 800803e:	f04f 0300 	mov.w	r3, #0
 8008042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008046:	4629      	mov	r1, r5
 8008048:	008b      	lsls	r3, r1, #2
 800804a:	4621      	mov	r1, r4
 800804c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008050:	4621      	mov	r1, r4
 8008052:	008a      	lsls	r2, r1, #2
 8008054:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008058:	f7f8 f8b6 	bl	80001c8 <__aeabi_uldivmod>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4b60      	ldr	r3, [pc, #384]	; (80081e4 <UART_SetConfig+0x4e4>)
 8008062:	fba3 2302 	umull	r2, r3, r3, r2
 8008066:	095b      	lsrs	r3, r3, #5
 8008068:	011c      	lsls	r4, r3, #4
 800806a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800806e:	2200      	movs	r2, #0
 8008070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008074:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008078:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800807c:	4642      	mov	r2, r8
 800807e:	464b      	mov	r3, r9
 8008080:	1891      	adds	r1, r2, r2
 8008082:	61b9      	str	r1, [r7, #24]
 8008084:	415b      	adcs	r3, r3
 8008086:	61fb      	str	r3, [r7, #28]
 8008088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800808c:	4641      	mov	r1, r8
 800808e:	1851      	adds	r1, r2, r1
 8008090:	6139      	str	r1, [r7, #16]
 8008092:	4649      	mov	r1, r9
 8008094:	414b      	adcs	r3, r1
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080a4:	4659      	mov	r1, fp
 80080a6:	00cb      	lsls	r3, r1, #3
 80080a8:	4651      	mov	r1, sl
 80080aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080ae:	4651      	mov	r1, sl
 80080b0:	00ca      	lsls	r2, r1, #3
 80080b2:	4610      	mov	r0, r2
 80080b4:	4619      	mov	r1, r3
 80080b6:	4603      	mov	r3, r0
 80080b8:	4642      	mov	r2, r8
 80080ba:	189b      	adds	r3, r3, r2
 80080bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080c0:	464b      	mov	r3, r9
 80080c2:	460a      	mov	r2, r1
 80080c4:	eb42 0303 	adc.w	r3, r2, r3
 80080c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80080d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80080d8:	f04f 0200 	mov.w	r2, #0
 80080dc:	f04f 0300 	mov.w	r3, #0
 80080e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80080e4:	4649      	mov	r1, r9
 80080e6:	008b      	lsls	r3, r1, #2
 80080e8:	4641      	mov	r1, r8
 80080ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080ee:	4641      	mov	r1, r8
 80080f0:	008a      	lsls	r2, r1, #2
 80080f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80080f6:	f7f8 f867 	bl	80001c8 <__aeabi_uldivmod>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	4b39      	ldr	r3, [pc, #228]	; (80081e4 <UART_SetConfig+0x4e4>)
 8008100:	fba3 1302 	umull	r1, r3, r3, r2
 8008104:	095b      	lsrs	r3, r3, #5
 8008106:	2164      	movs	r1, #100	; 0x64
 8008108:	fb01 f303 	mul.w	r3, r1, r3
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	3332      	adds	r3, #50	; 0x32
 8008112:	4a34      	ldr	r2, [pc, #208]	; (80081e4 <UART_SetConfig+0x4e4>)
 8008114:	fba2 2303 	umull	r2, r3, r2, r3
 8008118:	095b      	lsrs	r3, r3, #5
 800811a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800811e:	441c      	add	r4, r3
 8008120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008124:	2200      	movs	r2, #0
 8008126:	673b      	str	r3, [r7, #112]	; 0x70
 8008128:	677a      	str	r2, [r7, #116]	; 0x74
 800812a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800812e:	4642      	mov	r2, r8
 8008130:	464b      	mov	r3, r9
 8008132:	1891      	adds	r1, r2, r2
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	415b      	adcs	r3, r3
 8008138:	60fb      	str	r3, [r7, #12]
 800813a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800813e:	4641      	mov	r1, r8
 8008140:	1851      	adds	r1, r2, r1
 8008142:	6039      	str	r1, [r7, #0]
 8008144:	4649      	mov	r1, r9
 8008146:	414b      	adcs	r3, r1
 8008148:	607b      	str	r3, [r7, #4]
 800814a:	f04f 0200 	mov.w	r2, #0
 800814e:	f04f 0300 	mov.w	r3, #0
 8008152:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008156:	4659      	mov	r1, fp
 8008158:	00cb      	lsls	r3, r1, #3
 800815a:	4651      	mov	r1, sl
 800815c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008160:	4651      	mov	r1, sl
 8008162:	00ca      	lsls	r2, r1, #3
 8008164:	4610      	mov	r0, r2
 8008166:	4619      	mov	r1, r3
 8008168:	4603      	mov	r3, r0
 800816a:	4642      	mov	r2, r8
 800816c:	189b      	adds	r3, r3, r2
 800816e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008170:	464b      	mov	r3, r9
 8008172:	460a      	mov	r2, r1
 8008174:	eb42 0303 	adc.w	r3, r2, r3
 8008178:	66fb      	str	r3, [r7, #108]	; 0x6c
 800817a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	663b      	str	r3, [r7, #96]	; 0x60
 8008184:	667a      	str	r2, [r7, #100]	; 0x64
 8008186:	f04f 0200 	mov.w	r2, #0
 800818a:	f04f 0300 	mov.w	r3, #0
 800818e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008192:	4649      	mov	r1, r9
 8008194:	008b      	lsls	r3, r1, #2
 8008196:	4641      	mov	r1, r8
 8008198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800819c:	4641      	mov	r1, r8
 800819e:	008a      	lsls	r2, r1, #2
 80081a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80081a4:	f7f8 f810 	bl	80001c8 <__aeabi_uldivmod>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4b0d      	ldr	r3, [pc, #52]	; (80081e4 <UART_SetConfig+0x4e4>)
 80081ae:	fba3 1302 	umull	r1, r3, r3, r2
 80081b2:	095b      	lsrs	r3, r3, #5
 80081b4:	2164      	movs	r1, #100	; 0x64
 80081b6:	fb01 f303 	mul.w	r3, r1, r3
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	3332      	adds	r3, #50	; 0x32
 80081c0:	4a08      	ldr	r2, [pc, #32]	; (80081e4 <UART_SetConfig+0x4e4>)
 80081c2:	fba2 2303 	umull	r2, r3, r2, r3
 80081c6:	095b      	lsrs	r3, r3, #5
 80081c8:	f003 020f 	and.w	r2, r3, #15
 80081cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4422      	add	r2, r4
 80081d4:	609a      	str	r2, [r3, #8]
}
 80081d6:	bf00      	nop
 80081d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80081dc:	46bd      	mov	sp, r7
 80081de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081e2:	bf00      	nop
 80081e4:	51eb851f 	.word	0x51eb851f

080081e8 <__libc_init_array>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	4d0d      	ldr	r5, [pc, #52]	; (8008220 <__libc_init_array+0x38>)
 80081ec:	4c0d      	ldr	r4, [pc, #52]	; (8008224 <__libc_init_array+0x3c>)
 80081ee:	1b64      	subs	r4, r4, r5
 80081f0:	10a4      	asrs	r4, r4, #2
 80081f2:	2600      	movs	r6, #0
 80081f4:	42a6      	cmp	r6, r4
 80081f6:	d109      	bne.n	800820c <__libc_init_array+0x24>
 80081f8:	4d0b      	ldr	r5, [pc, #44]	; (8008228 <__libc_init_array+0x40>)
 80081fa:	4c0c      	ldr	r4, [pc, #48]	; (800822c <__libc_init_array+0x44>)
 80081fc:	f000 f87c 	bl	80082f8 <_init>
 8008200:	1b64      	subs	r4, r4, r5
 8008202:	10a4      	asrs	r4, r4, #2
 8008204:	2600      	movs	r6, #0
 8008206:	42a6      	cmp	r6, r4
 8008208:	d105      	bne.n	8008216 <__libc_init_array+0x2e>
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008210:	4798      	blx	r3
 8008212:	3601      	adds	r6, #1
 8008214:	e7ee      	b.n	80081f4 <__libc_init_array+0xc>
 8008216:	f855 3b04 	ldr.w	r3, [r5], #4
 800821a:	4798      	blx	r3
 800821c:	3601      	adds	r6, #1
 800821e:	e7f2      	b.n	8008206 <__libc_init_array+0x1e>
 8008220:	0800ab9c 	.word	0x0800ab9c
 8008224:	0800ab9c 	.word	0x0800ab9c
 8008228:	0800ab9c 	.word	0x0800ab9c
 800822c:	0800aba0 	.word	0x0800aba0

08008230 <__itoa>:
 8008230:	1e93      	subs	r3, r2, #2
 8008232:	2b22      	cmp	r3, #34	; 0x22
 8008234:	b510      	push	{r4, lr}
 8008236:	460c      	mov	r4, r1
 8008238:	d904      	bls.n	8008244 <__itoa+0x14>
 800823a:	2300      	movs	r3, #0
 800823c:	700b      	strb	r3, [r1, #0]
 800823e:	461c      	mov	r4, r3
 8008240:	4620      	mov	r0, r4
 8008242:	bd10      	pop	{r4, pc}
 8008244:	2a0a      	cmp	r2, #10
 8008246:	d109      	bne.n	800825c <__itoa+0x2c>
 8008248:	2800      	cmp	r0, #0
 800824a:	da07      	bge.n	800825c <__itoa+0x2c>
 800824c:	232d      	movs	r3, #45	; 0x2d
 800824e:	700b      	strb	r3, [r1, #0]
 8008250:	4240      	negs	r0, r0
 8008252:	2101      	movs	r1, #1
 8008254:	4421      	add	r1, r4
 8008256:	f000 f80d 	bl	8008274 <__utoa>
 800825a:	e7f1      	b.n	8008240 <__itoa+0x10>
 800825c:	2100      	movs	r1, #0
 800825e:	e7f9      	b.n	8008254 <__itoa+0x24>

08008260 <itoa>:
 8008260:	f7ff bfe6 	b.w	8008230 <__itoa>

08008264 <memset>:
 8008264:	4402      	add	r2, r0
 8008266:	4603      	mov	r3, r0
 8008268:	4293      	cmp	r3, r2
 800826a:	d100      	bne.n	800826e <memset+0xa>
 800826c:	4770      	bx	lr
 800826e:	f803 1b01 	strb.w	r1, [r3], #1
 8008272:	e7f9      	b.n	8008268 <memset+0x4>

08008274 <__utoa>:
 8008274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008276:	4c1f      	ldr	r4, [pc, #124]	; (80082f4 <__utoa+0x80>)
 8008278:	b08b      	sub	sp, #44	; 0x2c
 800827a:	4605      	mov	r5, r0
 800827c:	460b      	mov	r3, r1
 800827e:	466e      	mov	r6, sp
 8008280:	f104 0c20 	add.w	ip, r4, #32
 8008284:	6820      	ldr	r0, [r4, #0]
 8008286:	6861      	ldr	r1, [r4, #4]
 8008288:	4637      	mov	r7, r6
 800828a:	c703      	stmia	r7!, {r0, r1}
 800828c:	3408      	adds	r4, #8
 800828e:	4564      	cmp	r4, ip
 8008290:	463e      	mov	r6, r7
 8008292:	d1f7      	bne.n	8008284 <__utoa+0x10>
 8008294:	7921      	ldrb	r1, [r4, #4]
 8008296:	7139      	strb	r1, [r7, #4]
 8008298:	1e91      	subs	r1, r2, #2
 800829a:	6820      	ldr	r0, [r4, #0]
 800829c:	6038      	str	r0, [r7, #0]
 800829e:	2922      	cmp	r1, #34	; 0x22
 80082a0:	f04f 0100 	mov.w	r1, #0
 80082a4:	d904      	bls.n	80082b0 <__utoa+0x3c>
 80082a6:	7019      	strb	r1, [r3, #0]
 80082a8:	460b      	mov	r3, r1
 80082aa:	4618      	mov	r0, r3
 80082ac:	b00b      	add	sp, #44	; 0x2c
 80082ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b0:	1e58      	subs	r0, r3, #1
 80082b2:	4684      	mov	ip, r0
 80082b4:	fbb5 f7f2 	udiv	r7, r5, r2
 80082b8:	fb02 5617 	mls	r6, r2, r7, r5
 80082bc:	3628      	adds	r6, #40	; 0x28
 80082be:	446e      	add	r6, sp
 80082c0:	460c      	mov	r4, r1
 80082c2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80082c6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80082ca:	462e      	mov	r6, r5
 80082cc:	42b2      	cmp	r2, r6
 80082ce:	f101 0101 	add.w	r1, r1, #1
 80082d2:	463d      	mov	r5, r7
 80082d4:	d9ee      	bls.n	80082b4 <__utoa+0x40>
 80082d6:	2200      	movs	r2, #0
 80082d8:	545a      	strb	r2, [r3, r1]
 80082da:	1919      	adds	r1, r3, r4
 80082dc:	1aa5      	subs	r5, r4, r2
 80082de:	42aa      	cmp	r2, r5
 80082e0:	dae3      	bge.n	80082aa <__utoa+0x36>
 80082e2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80082e6:	780e      	ldrb	r6, [r1, #0]
 80082e8:	7006      	strb	r6, [r0, #0]
 80082ea:	3201      	adds	r2, #1
 80082ec:	f801 5901 	strb.w	r5, [r1], #-1
 80082f0:	e7f4      	b.n	80082dc <__utoa+0x68>
 80082f2:	bf00      	nop
 80082f4:	0800ab6c 	.word	0x0800ab6c

080082f8 <_init>:
 80082f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fa:	bf00      	nop
 80082fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fe:	bc08      	pop	{r3}
 8008300:	469e      	mov	lr, r3
 8008302:	4770      	bx	lr

08008304 <_fini>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	bf00      	nop
 8008308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830a:	bc08      	pop	{r3}
 800830c:	469e      	mov	lr, r3
 800830e:	4770      	bx	lr
