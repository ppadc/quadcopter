
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000828c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c84  08008414  08008414  00018414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b098  0800b098  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800b098  0800b098  0001b098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0a0  0800b0a0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0a0  0800b0a0  0001b0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0a4  0800b0a4  0001b0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800b0a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000ce4  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d08  20000d08  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b534  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003df9  00000000  00000000  0003b588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  0003f388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d0  00000000  00000000  00040af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005102  00000000  00000000  000420c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e93a  00000000  00000000  000471ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6364  00000000  00000000  00065b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013be68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061c0  00000000  00000000  0013beb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080083fc 	.word	0x080083fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080083fc 	.word	0x080083fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60ba      	str	r2, [r7, #8]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4603      	mov	r3, r0
 80004d8:	81fb      	strh	r3, [r7, #14]
 80004da:	460b      	mov	r3, r1
 80004dc:	81bb      	strh	r3, [r7, #12]
 80004de:	4613      	mov	r3, r2
 80004e0:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80004e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004e6:	3307      	adds	r3, #7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <SSD1306_DrawBitmap+0x22>
 80004ec:	3307      	adds	r3, #7
 80004ee:	10db      	asrs	r3, r3, #3
 80004f0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	82bb      	strh	r3, [r7, #20]
 80004fa:	e044      	b.n	8000586 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80004fc:	2300      	movs	r3, #0
 80004fe:	827b      	strh	r3, [r7, #18]
 8000500:	e02f      	b.n	8000562 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000502:	8a7b      	ldrh	r3, [r7, #18]
 8000504:	f003 0307 	and.w	r3, r3, #7
 8000508:	2b00      	cmp	r3, #0
 800050a:	d003      	beq.n	8000514 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800050c:	7dfb      	ldrb	r3, [r7, #23]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	75fb      	strb	r3, [r7, #23]
 8000512:	e012      	b.n	800053a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000514:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000518:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800051c:	fb03 f202 	mul.w	r2, r3, r2
 8000520:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000524:	2b00      	cmp	r3, #0
 8000526:	da00      	bge.n	800052a <SSD1306_DrawBitmap+0x5e>
 8000528:	3307      	adds	r3, #7
 800052a:	10db      	asrs	r3, r3, #3
 800052c:	b21b      	sxth	r3, r3
 800052e:	4413      	add	r3, r2
 8000530:	461a      	mov	r2, r3
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4413      	add	r3, r2
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800053a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800053e:	2b00      	cmp	r3, #0
 8000540:	da09      	bge.n	8000556 <SSD1306_DrawBitmap+0x8a>
 8000542:	89fa      	ldrh	r2, [r7, #14]
 8000544:	8a7b      	ldrh	r3, [r7, #18]
 8000546:	4413      	add	r3, r2
 8000548:	b29b      	uxth	r3, r3
 800054a:	89b9      	ldrh	r1, [r7, #12]
 800054c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f92d 	bl	80007b0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000556:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800055a:	b29b      	uxth	r3, r3
 800055c:	3301      	adds	r3, #1
 800055e:	b29b      	uxth	r3, r3
 8000560:	827b      	strh	r3, [r7, #18]
 8000562:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800056a:	429a      	cmp	r2, r3
 800056c:	dbc9      	blt.n	8000502 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800056e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000572:	b29b      	uxth	r3, r3
 8000574:	3301      	adds	r3, #1
 8000576:	b29b      	uxth	r3, r3
 8000578:	82bb      	strh	r3, [r7, #20]
 800057a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800057e:	b29b      	uxth	r3, r3
 8000580:	3301      	adds	r3, #1
 8000582:	b29b      	uxth	r3, r3
 8000584:	81bb      	strh	r3, [r7, #12]
 8000586:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800058a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800058e:	429a      	cmp	r2, r3
 8000590:	dbb4      	blt.n	80004fc <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80005a2:	f000 fa29 	bl	80009f8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80005aa:	2201      	movs	r2, #1
 80005ac:	2178      	movs	r1, #120	; 0x78
 80005ae:	485b      	ldr	r0, [pc, #364]	; (800071c <SSD1306_Init+0x180>)
 80005b0:	f004 fd76 	bl	80050a0 <HAL_I2C_IsDeviceReady>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e0a9      	b.n	8000712 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80005be:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80005c2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005c4:	e002      	b.n	80005cc <SSD1306_Init+0x30>
		p--;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f9      	bne.n	80005c6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80005d2:	22ae      	movs	r2, #174	; 0xae
 80005d4:	2100      	movs	r1, #0
 80005d6:	2078      	movs	r0, #120	; 0x78
 80005d8:	f000 fa8a 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80005dc:	2220      	movs	r2, #32
 80005de:	2100      	movs	r1, #0
 80005e0:	2078      	movs	r0, #120	; 0x78
 80005e2:	f000 fa85 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80005e6:	2210      	movs	r2, #16
 80005e8:	2100      	movs	r1, #0
 80005ea:	2078      	movs	r0, #120	; 0x78
 80005ec:	f000 fa80 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005f0:	22b0      	movs	r2, #176	; 0xb0
 80005f2:	2100      	movs	r1, #0
 80005f4:	2078      	movs	r0, #120	; 0x78
 80005f6:	f000 fa7b 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80005fa:	22c8      	movs	r2, #200	; 0xc8
 80005fc:	2100      	movs	r1, #0
 80005fe:	2078      	movs	r0, #120	; 0x78
 8000600:	f000 fa76 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	2078      	movs	r0, #120	; 0x78
 800060a:	f000 fa71 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800060e:	2210      	movs	r2, #16
 8000610:	2100      	movs	r1, #0
 8000612:	2078      	movs	r0, #120	; 0x78
 8000614:	f000 fa6c 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000618:	2240      	movs	r2, #64	; 0x40
 800061a:	2100      	movs	r1, #0
 800061c:	2078      	movs	r0, #120	; 0x78
 800061e:	f000 fa67 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000622:	2281      	movs	r2, #129	; 0x81
 8000624:	2100      	movs	r1, #0
 8000626:	2078      	movs	r0, #120	; 0x78
 8000628:	f000 fa62 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800062c:	22ff      	movs	r2, #255	; 0xff
 800062e:	2100      	movs	r1, #0
 8000630:	2078      	movs	r0, #120	; 0x78
 8000632:	f000 fa5d 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000636:	22a1      	movs	r2, #161	; 0xa1
 8000638:	2100      	movs	r1, #0
 800063a:	2078      	movs	r0, #120	; 0x78
 800063c:	f000 fa58 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000640:	22a6      	movs	r2, #166	; 0xa6
 8000642:	2100      	movs	r1, #0
 8000644:	2078      	movs	r0, #120	; 0x78
 8000646:	f000 fa53 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800064a:	22a8      	movs	r2, #168	; 0xa8
 800064c:	2100      	movs	r1, #0
 800064e:	2078      	movs	r0, #120	; 0x78
 8000650:	f000 fa4e 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000654:	223f      	movs	r2, #63	; 0x3f
 8000656:	2100      	movs	r1, #0
 8000658:	2078      	movs	r0, #120	; 0x78
 800065a:	f000 fa49 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800065e:	22a4      	movs	r2, #164	; 0xa4
 8000660:	2100      	movs	r1, #0
 8000662:	2078      	movs	r0, #120	; 0x78
 8000664:	f000 fa44 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000668:	22d3      	movs	r2, #211	; 0xd3
 800066a:	2100      	movs	r1, #0
 800066c:	2078      	movs	r0, #120	; 0x78
 800066e:	f000 fa3f 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	2078      	movs	r0, #120	; 0x78
 8000678:	f000 fa3a 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800067c:	22d5      	movs	r2, #213	; 0xd5
 800067e:	2100      	movs	r1, #0
 8000680:	2078      	movs	r0, #120	; 0x78
 8000682:	f000 fa35 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000686:	22f0      	movs	r2, #240	; 0xf0
 8000688:	2100      	movs	r1, #0
 800068a:	2078      	movs	r0, #120	; 0x78
 800068c:	f000 fa30 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000690:	22d9      	movs	r2, #217	; 0xd9
 8000692:	2100      	movs	r1, #0
 8000694:	2078      	movs	r0, #120	; 0x78
 8000696:	f000 fa2b 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800069a:	2222      	movs	r2, #34	; 0x22
 800069c:	2100      	movs	r1, #0
 800069e:	2078      	movs	r0, #120	; 0x78
 80006a0:	f000 fa26 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80006a4:	22da      	movs	r2, #218	; 0xda
 80006a6:	2100      	movs	r1, #0
 80006a8:	2078      	movs	r0, #120	; 0x78
 80006aa:	f000 fa21 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80006ae:	2212      	movs	r2, #18
 80006b0:	2100      	movs	r1, #0
 80006b2:	2078      	movs	r0, #120	; 0x78
 80006b4:	f000 fa1c 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80006b8:	22db      	movs	r2, #219	; 0xdb
 80006ba:	2100      	movs	r1, #0
 80006bc:	2078      	movs	r0, #120	; 0x78
 80006be:	f000 fa17 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80006c2:	2220      	movs	r2, #32
 80006c4:	2100      	movs	r1, #0
 80006c6:	2078      	movs	r0, #120	; 0x78
 80006c8:	f000 fa12 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80006cc:	228d      	movs	r2, #141	; 0x8d
 80006ce:	2100      	movs	r1, #0
 80006d0:	2078      	movs	r0, #120	; 0x78
 80006d2:	f000 fa0d 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80006d6:	2214      	movs	r2, #20
 80006d8:	2100      	movs	r1, #0
 80006da:	2078      	movs	r0, #120	; 0x78
 80006dc:	f000 fa08 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80006e0:	22af      	movs	r2, #175	; 0xaf
 80006e2:	2100      	movs	r1, #0
 80006e4:	2078      	movs	r0, #120	; 0x78
 80006e6:	f000 fa03 	bl	8000af0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80006ea:	222e      	movs	r2, #46	; 0x2e
 80006ec:	2100      	movs	r1, #0
 80006ee:	2078      	movs	r0, #120	; 0x78
 80006f0:	f000 f9fe 	bl	8000af0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 f843 	bl	8000780 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80006fa:	f000 f813 	bl	8000724 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <SSD1306_Init+0x184>)
 8000700:	2200      	movs	r2, #0
 8000702:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <SSD1306_Init+0x184>)
 8000706:	2200      	movs	r2, #0
 8000708:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <SSD1306_Init+0x184>)
 800070c:	2201      	movs	r2, #1
 800070e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000710:	2301      	movs	r3, #1
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200004c4 	.word	0x200004c4
 8000720:	20000440 	.word	0x20000440

08000724 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	e01d      	b.n	800076c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	3b50      	subs	r3, #80	; 0x50
 8000734:	b2db      	uxtb	r3, r3
 8000736:	461a      	mov	r2, r3
 8000738:	2100      	movs	r1, #0
 800073a:	2078      	movs	r0, #120	; 0x78
 800073c:	f000 f9d8 	bl	8000af0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2078      	movs	r0, #120	; 0x78
 8000746:	f000 f9d3 	bl	8000af0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800074a:	2210      	movs	r2, #16
 800074c:	2100      	movs	r1, #0
 800074e:	2078      	movs	r0, #120	; 0x78
 8000750:	f000 f9ce 	bl	8000af0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	01db      	lsls	r3, r3, #7
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <SSD1306_UpdateScreen+0x58>)
 800075a:	441a      	add	r2, r3
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	2078      	movs	r0, #120	; 0x78
 8000762:	f000 f95f 	bl	8000a24 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	3301      	adds	r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b07      	cmp	r3, #7
 8000770:	d9de      	bls.n	8000730 <SSD1306_UpdateScreen+0xc>
	}
}
 8000772:	bf00      	nop
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000040 	.word	0x20000040

08000780 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d101      	bne.n	8000794 <SSD1306_Fill+0x14>
 8000790:	2300      	movs	r3, #0
 8000792:	e000      	b.n	8000796 <SSD1306_Fill+0x16>
 8000794:	23ff      	movs	r3, #255	; 0xff
 8000796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079a:	4619      	mov	r1, r3
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <SSD1306_Fill+0x2c>)
 800079e:	f007 fde3 	bl	8008368 <memset>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000040 	.word	0x20000040

080007b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	80fb      	strh	r3, [r7, #6]
 80007ba:	460b      	mov	r3, r1
 80007bc:	80bb      	strh	r3, [r7, #4]
 80007be:	4613      	mov	r3, r2
 80007c0:	70fb      	strb	r3, [r7, #3]
	if (
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	2b7f      	cmp	r3, #127	; 0x7f
 80007c6:	d848      	bhi.n	800085a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80007c8:	88bb      	ldrh	r3, [r7, #4]
 80007ca:	2b3f      	cmp	r3, #63	; 0x3f
 80007cc:	d845      	bhi.n	800085a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <SSD1306_DrawPixel+0xb8>)
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d006      	beq.n	80007e4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf0c      	ite	eq
 80007dc:	2301      	moveq	r3, #1
 80007de:	2300      	movne	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d11a      	bne.n	8000820 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80007ea:	88fa      	ldrh	r2, [r7, #6]
 80007ec:	88bb      	ldrh	r3, [r7, #4]
 80007ee:	08db      	lsrs	r3, r3, #3
 80007f0:	b298      	uxth	r0, r3
 80007f2:	4603      	mov	r3, r0
 80007f4:	01db      	lsls	r3, r3, #7
 80007f6:	4413      	add	r3, r2
 80007f8:	4a1c      	ldr	r2, [pc, #112]	; (800086c <SSD1306_DrawPixel+0xbc>)
 80007fa:	5cd3      	ldrb	r3, [r2, r3]
 80007fc:	b25a      	sxtb	r2, r3
 80007fe:	88bb      	ldrh	r3, [r7, #4]
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	2101      	movs	r1, #1
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	b25b      	sxtb	r3, r3
 800080c:	4313      	orrs	r3, r2
 800080e:	b259      	sxtb	r1, r3
 8000810:	88fa      	ldrh	r2, [r7, #6]
 8000812:	4603      	mov	r3, r0
 8000814:	01db      	lsls	r3, r3, #7
 8000816:	4413      	add	r3, r2
 8000818:	b2c9      	uxtb	r1, r1
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <SSD1306_DrawPixel+0xbc>)
 800081c:	54d1      	strb	r1, [r2, r3]
 800081e:	e01d      	b.n	800085c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000820:	88fa      	ldrh	r2, [r7, #6]
 8000822:	88bb      	ldrh	r3, [r7, #4]
 8000824:	08db      	lsrs	r3, r3, #3
 8000826:	b298      	uxth	r0, r3
 8000828:	4603      	mov	r3, r0
 800082a:	01db      	lsls	r3, r3, #7
 800082c:	4413      	add	r3, r2
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <SSD1306_DrawPixel+0xbc>)
 8000830:	5cd3      	ldrb	r3, [r2, r3]
 8000832:	b25a      	sxtb	r2, r3
 8000834:	88bb      	ldrh	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	2101      	movs	r1, #1
 800083c:	fa01 f303 	lsl.w	r3, r1, r3
 8000840:	b25b      	sxtb	r3, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	b25b      	sxtb	r3, r3
 8000846:	4013      	ands	r3, r2
 8000848:	b259      	sxtb	r1, r3
 800084a:	88fa      	ldrh	r2, [r7, #6]
 800084c:	4603      	mov	r3, r0
 800084e:	01db      	lsls	r3, r3, #7
 8000850:	4413      	add	r3, r2
 8000852:	b2c9      	uxtb	r1, r1
 8000854:	4a05      	ldr	r2, [pc, #20]	; (800086c <SSD1306_DrawPixel+0xbc>)
 8000856:	54d1      	strb	r1, [r2, r3]
 8000858:	e000      	b.n	800085c <SSD1306_DrawPixel+0xac>
		return;
 800085a:	bf00      	nop
	}
}
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000440 	.word	0x20000440
 800086c:	20000040 	.word	0x20000040

08000870 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	460a      	mov	r2, r1
 800087a:	80fb      	strh	r3, [r7, #6]
 800087c:	4613      	mov	r3, r2
 800087e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000880:	4a05      	ldr	r2, [pc, #20]	; (8000898 <SSD1306_GotoXY+0x28>)
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <SSD1306_GotoXY+0x28>)
 8000888:	88bb      	ldrh	r3, [r7, #4]
 800088a:	8053      	strh	r3, [r2, #2]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	20000440 	.word	0x20000440

0800089c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008ac:	4b3a      	ldr	r3, [pc, #232]	; (8000998 <SSD1306_Putc+0xfc>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
	if (
 80008b8:	2b7f      	cmp	r3, #127	; 0x7f
 80008ba:	dc07      	bgt.n	80008cc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80008bc:	4b36      	ldr	r3, [pc, #216]	; (8000998 <SSD1306_Putc+0xfc>)
 80008be:	885b      	ldrh	r3, [r3, #2]
 80008c0:	461a      	mov	r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008c8:	2b3f      	cmp	r3, #63	; 0x3f
 80008ca:	dd01      	ble.n	80008d0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	e05e      	b.n	800098e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e04b      	b.n	800096e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	3b20      	subs	r3, #32
 80008de:	6839      	ldr	r1, [r7, #0]
 80008e0:	7849      	ldrb	r1, [r1, #1]
 80008e2:	fb01 f303 	mul.w	r3, r1, r3
 80008e6:	4619      	mov	r1, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	440b      	add	r3, r1
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	4413      	add	r3, r2
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	e030      	b.n	800095c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d010      	beq.n	800092c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800090a:	4b23      	ldr	r3, [pc, #140]	; (8000998 <SSD1306_Putc+0xfc>)
 800090c:	881a      	ldrh	r2, [r3, #0]
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	b29b      	uxth	r3, r3
 8000912:	4413      	add	r3, r2
 8000914:	b298      	uxth	r0, r3
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <SSD1306_Putc+0xfc>)
 8000918:	885a      	ldrh	r2, [r3, #2]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	b29b      	uxth	r3, r3
 800091e:	4413      	add	r3, r2
 8000920:	b29b      	uxth	r3, r3
 8000922:	79ba      	ldrb	r2, [r7, #6]
 8000924:	4619      	mov	r1, r3
 8000926:	f7ff ff43 	bl	80007b0 <SSD1306_DrawPixel>
 800092a:	e014      	b.n	8000956 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <SSD1306_Putc+0xfc>)
 800092e:	881a      	ldrh	r2, [r3, #0]
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	b29b      	uxth	r3, r3
 8000934:	4413      	add	r3, r2
 8000936:	b298      	uxth	r0, r3
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <SSD1306_Putc+0xfc>)
 800093a:	885a      	ldrh	r2, [r3, #2]
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	b29b      	uxth	r3, r3
 8000940:	4413      	add	r3, r2
 8000942:	b299      	uxth	r1, r3
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	2b00      	cmp	r3, #0
 8000948:	bf0c      	ite	eq
 800094a:	2301      	moveq	r3, #1
 800094c:	2300      	movne	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	461a      	mov	r2, r3
 8000952:	f7ff ff2d 	bl	80007b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	3301      	adds	r3, #1
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	4293      	cmp	r3, r2
 8000966:	d3c8      	bcc.n	80008fa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	3301      	adds	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	785b      	ldrb	r3, [r3, #1]
 8000972:	461a      	mov	r2, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	4293      	cmp	r3, r2
 8000978:	d3ad      	bcc.n	80008d6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <SSD1306_Putc+0xfc>)
 800097c:	881a      	ldrh	r2, [r3, #0]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b29b      	uxth	r3, r3
 8000984:	4413      	add	r3, r2
 8000986:	b29a      	uxth	r2, r3
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <SSD1306_Putc+0xfc>)
 800098a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800098c:	79fb      	ldrb	r3, [r7, #7]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000440 	.word	0x20000440

0800099c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	4613      	mov	r3, r2
 80009a8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80009aa:	e012      	b.n	80009d2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	68b9      	ldr	r1, [r7, #8]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff71 	bl	800089c <SSD1306_Putc>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d002      	beq.n	80009cc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	e008      	b.n	80009de <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3301      	adds	r3, #1
 80009d0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d1e8      	bne.n	80009ac <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	781b      	ldrb	r3, [r3, #0]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff fec8 	bl	8000780 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80009f0:	f7ff fe98 	bl	8000724 <SSD1306_UpdateScreen>
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <ssd1306_I2C_Init+0x28>)
 8000a00:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a02:	e002      	b.n	8000a0a <ssd1306_I2C_Init+0x12>
		p--;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1f9      	bne.n	8000a04 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	0003d090 	.word	0x0003d090

08000a24 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b0c7      	sub	sp, #284	; 0x11c
 8000a28:	af02      	add	r7, sp, #8
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	4608      	mov	r0, r1
 8000a2e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000a32:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000a36:	600a      	str	r2, [r1, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a3e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000a42:	4622      	mov	r2, r4
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a4a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000a4e:	4602      	mov	r2, r0
 8000a50:	701a      	strb	r2, [r3, #0]
 8000a52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a5a:	460a      	mov	r2, r1
 8000a5c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a66:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a6a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000a6e:	7812      	ldrb	r2, [r2, #0]
 8000a70:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000a78:	e015      	b.n	8000aa6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000a7a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a7e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a82:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000a86:	6812      	ldr	r2, [r2, #0]
 8000a88:	441a      	add	r2, r3
 8000a8a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a8e:	3301      	adds	r3, #1
 8000a90:	7811      	ldrb	r1, [r2, #0]
 8000a92:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a96:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000a9a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a9c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000aa6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ab0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ab4:	8812      	ldrh	r2, [r2, #0]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d8df      	bhi.n	8000a7a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&SSD1306_I2C, address, dt, count+1, 10);
 8000aba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000abe:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b299      	uxth	r1, r3
 8000ac6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	f107 020c 	add.w	r2, r7, #12
 8000ad8:	200a      	movs	r0, #10
 8000ada:	9000      	str	r0, [sp, #0]
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <ssd1306_I2C_WriteMulti+0xc8>)
 8000ade:	f003 fec1 	bl	8004864 <HAL_I2C_Master_Transmit>
}
 8000ae2:	bf00      	nop
 8000ae4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	200004c4 	.word	0x200004c4

08000af0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
 8000afa:	460b      	mov	r3, r1
 8000afc:	71bb      	strb	r3, [r7, #6]
 8000afe:	4613      	mov	r3, r2
 8000b00:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b06:	797b      	ldrb	r3, [r7, #5]
 8000b08:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&SSD1306_I2C, address, dt, 2, 10);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	b299      	uxth	r1, r3
 8000b0e:	f107 020c 	add.w	r2, r7, #12
 8000b12:	230a      	movs	r3, #10
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2302      	movs	r3, #2
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <ssd1306_I2C_Write+0x38>)
 8000b1a:	f003 fea3 	bl	8004864 <HAL_I2C_Master_Transmit>
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200004c4 	.word	0x200004c4

08000b2c <find_uart_dev_instant>:
		}
	}
	return -1;
}

static int find_uart_dev_instant(UART_HandleTypeDef *huart){
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e00e      	b.n	8000b58 <find_uart_dev_instant+0x2c>
		if(uart_drvs[i]->huart->Instance == huart->Instance){
 8000b3a:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <find_uart_dev_instant+0x44>)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d101      	bne.n	8000b52 <find_uart_dev_instant+0x26>
			return i;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	e007      	b.n	8000b62 <find_uart_dev_instant+0x36>
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	dded      	ble.n	8000b3a <find_uart_dev_instant+0xe>
		}
	}
	return -1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000448 	.word	0x20000448

08000b74 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	int idx = find_uart_dev_instant(huart);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ffd5 	bl	8000b2c <find_uart_dev_instant>
 8000b82:	60f8      	str	r0, [r7, #12]
	uart_drvs[idx]->tx_completed = true;
 8000b84:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <HAL_UART_TxCpltCallback+0x28>)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000448 	.word	0x20000448

08000ba0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
	HAL_UART_RxCpltCallback(huart);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

	int idx = find_uart_dev_instant(huart);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ffbf 	bl	8000b2c <find_uart_dev_instant>
 8000bae:	6138      	str	r0, [r7, #16]
	uart_drv_t *uart_drv = uart_drvs[idx];
 8000bb0:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <HAL_UART_RxCpltCallback+0x94>)
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	60fb      	str	r3, [r7, #12]

	uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	817b      	strh	r3, [r7, #10]
	uint16_t length =  sizeof(uart_drv->rx_dma_buffer) - currCNDTR;
 8000bc4:	897b      	ldrh	r3, [r7, #10]
 8000bc6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000bca:	813b      	strh	r3, [r7, #8]

	/* Copy and process new data */
	for(uint16_t i=0; i<length; i++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	82fb      	strh	r3, [r7, #22]
 8000bd0:	e00d      	b.n	8000bee <HAL_UART_RxCpltCallback+0x4e>
	{
		cbuf_put(&uart_drv->rx_cbuf_handle, uart_drv->rx_dma_buffer[i]);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f203 601c 	addw	r0, r3, #1564	; 0x61c
 8000bd8:	8afb      	ldrh	r3, [r7, #22]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4413      	add	r3, r2
 8000bde:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000be2:	4619      	mov	r1, r3
 8000be4:	f000 f828 	bl	8000c38 <cbuf_put>
	for(uint16_t i=0; i<length; i++)
 8000be8:	8afb      	ldrh	r3, [r7, #22]
 8000bea:	3301      	adds	r3, #1
 8000bec:	82fb      	strh	r3, [r7, #22]
 8000bee:	8afa      	ldrh	r2, [r7, #22]
 8000bf0:	893b      	ldrh	r3, [r7, #8]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d3ed      	bcc.n	8000bd2 <HAL_UART_RxCpltCallback+0x32>
	}

	__HAL_DMA_DISABLE(huart->hdmarx);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0201 	bic.w	r2, r2, #1
 8000c08:	601a      	str	r2, [r3, #0]
	huart->hdmarx->Instance->NDTR = sizeof(uart_drv->rx_dma_buffer);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c14:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(huart->hdmarx);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f042 0201 	orr.w	r2, r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000448 	.word	0x20000448

08000c38 <cbuf_put>:
    cbuf->tail = 0;
    cbuf->full = false;
}

int cbuf_put(circular_buf_t* cbuf, char data)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
    if(!cbuf_full(cbuf))
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 f82c 	bl	8000ca2 <cbuf_full>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f083 0301 	eor.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d01f      	beq.n	8000c96 <cbuf_put+0x5e>
    {
        cbuf->buffer[cbuf->head] = data;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	4413      	add	r3, r2
 8000c60:	78fa      	ldrb	r2, [r7, #3]
 8000c62:	701a      	strb	r2, [r3, #0]
        cbuf->head = (cbuf->head + 1) % cbuf->size;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	6852      	ldr	r2, [r2, #4]
 8000c6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c72:	fb01 f202 	mul.w	r2, r1, r2
 8000c76:	1a9a      	subs	r2, r3, r2
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
        cbuf->full = (cbuf->head == cbuf->tail);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	bf0c      	ite	eq
 8000c88:	2301      	moveq	r3, #1
 8000c8a:	2300      	movne	r3, #0
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	741a      	strb	r2, [r3, #16]
        return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e001      	b.n	8000c9a <cbuf_put+0x62>
    }
    return -1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <cbuf_full>:
{
    return (!cbuf->full && (cbuf->head == cbuf->tail));
}

bool cbuf_full(circular_buf_t *cbuf)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
    return cbuf->full;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7c1b      	ldrb	r3, [r3, #16]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <bno055_read>:
#define TEMPERATURE_UNITS				 		(0b00 << 4)
#elif BNO055_TEMPERATURE_UNITS == 1
#define TEMPERATURE_UNITS				 		(0b01 << 4)
#endif

static int bno055_read(uint8_t addr, uint8_t *value){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af04      	add	r7, sp, #16
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK){
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	2364      	movs	r3, #100	; 0x64
 8000cce:	9302      	str	r3, [sp, #8]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	2150      	movs	r1, #80	; 0x50
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <bno055_read+0x44>)
 8000cde:	f003 ffb9 	bl	8004c54 <HAL_I2C_Mem_Read>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <bno055_read+0x38>
		*value = 0;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
		return -1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	e000      	b.n	8000cf6 <bno055_read+0x3a>
	}
	return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200004c4 	.word	0x200004c4

08000d04 <bno055_write>:

static int bno055_write(uint8_t addr, uint8_t *value){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af04      	add	r7, sp, #16
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	2150      	movs	r1, #80	; 0x50
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <bno055_write+0x3c>)
 8000d26:	f003 fe9b 	bl	8004a60 <HAL_I2C_Mem_Write>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <bno055_write+0x32>
		return -1;
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	e000      	b.n	8000d38 <bno055_write+0x34>
	return 0;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200004c4 	.word	0x200004c4

08000d44 <bno055_read_bytes>:

static int bno055_read_bytes(uint8_t addr, uint8_t *value, uint8_t len){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af04      	add	r7, sp, #16
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, len, I2C_TIMEOUT_MS)!= HAL_OK){
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	2164      	movs	r1, #100	; 0x64
 8000d5e:	9102      	str	r1, [sp, #8]
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2301      	movs	r3, #1
 8000d68:	2150      	movs	r1, #80	; 0x50
 8000d6a:	480a      	ldr	r0, [pc, #40]	; (8000d94 <bno055_read_bytes+0x50>)
 8000d6c:	f003 ff72 	bl	8004c54 <HAL_I2C_Mem_Read>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d008      	beq.n	8000d88 <bno055_read_bytes+0x44>
		memset(value,0,len);
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	6838      	ldr	r0, [r7, #0]
 8000d7e:	f007 faf3 	bl	8008368 <memset>
		return -1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	e000      	b.n	8000d8a <bno055_read_bytes+0x46>
	}
	return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200004c4 	.word	0x200004c4

08000d98 <bno055_set_operation_mode>:


void bno055_set_operation_mode(bno055_opr_mode_t opr_mode);
void bno055_fusion_data_output_systems(fusion_data_output_systems_t data_systems);

void bno055_set_operation_mode(bno055_opr_mode_t opr_mode){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(opr_mode){
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b0c      	cmp	r3, #12
 8000da6:	f200 8092 	bhi.w	8000ece <bno055_set_operation_mode+0x136>
 8000daa:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <bno055_set_operation_mode+0x18>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000de5 	.word	0x08000de5
 8000db4:	08000df7 	.word	0x08000df7
 8000db8:	08000e09 	.word	0x08000e09
 8000dbc:	08000e1b 	.word	0x08000e1b
 8000dc0:	08000e2d 	.word	0x08000e2d
 8000dc4:	08000e3f 	.word	0x08000e3f
 8000dc8:	08000e51 	.word	0x08000e51
 8000dcc:	08000e63 	.word	0x08000e63
 8000dd0:	08000e75 	.word	0x08000e75
 8000dd4:	08000e87 	.word	0x08000e87
 8000dd8:	08000e99 	.word	0x08000e99
 8000ddc:	08000eab 	.word	0x08000eab
 8000de0:	08000ebd 	.word	0x08000ebd
	case BNO055_OPERATION_CONFIG_MODE:
		tmp = BNO055_OPERATION_CONFIG_MODE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000de8:	f107 030f 	add.w	r3, r7, #15
 8000dec:	4619      	mov	r1, r3
 8000dee:	203d      	movs	r0, #61	; 0x3d
 8000df0:	f7ff ff88 	bl	8000d04 <bno055_write>
	break;
 8000df4:	e06b      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCONLY:
		tmp = BNO055_OPERATION_MODE_ACCONLY;
 8000df6:	2301      	movs	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000dfa:	f107 030f 	add.w	r3, r7, #15
 8000dfe:	4619      	mov	r1, r3
 8000e00:	203d      	movs	r0, #61	; 0x3d
 8000e02:	f7ff ff7f 	bl	8000d04 <bno055_write>
	break;
 8000e06:	e062      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_MAGONLY:
		tmp = BNO055_OPERATION_MODE_MAGONLY;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e0c:	f107 030f 	add.w	r3, r7, #15
 8000e10:	4619      	mov	r1, r3
 8000e12:	203d      	movs	r0, #61	; 0x3d
 8000e14:	f7ff ff76 	bl	8000d04 <bno055_write>
	break;
 8000e18:	e059      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_GYROONLY:
		tmp = BNO055_OPERATION_MODE_GYROONLY;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e1e:	f107 030f 	add.w	r3, r7, #15
 8000e22:	4619      	mov	r1, r3
 8000e24:	203d      	movs	r0, #61	; 0x3d
 8000e26:	f7ff ff6d 	bl	8000d04 <bno055_write>
	break;
 8000e2a:	e050      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCMAG:
		tmp = BNO055_OPERATION_MODE_ACCMAG;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e30:	f107 030f 	add.w	r3, r7, #15
 8000e34:	4619      	mov	r1, r3
 8000e36:	203d      	movs	r0, #61	; 0x3d
 8000e38:	f7ff ff64 	bl	8000d04 <bno055_write>
	break;
 8000e3c:	e047      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCGYRO:
		tmp = BNO055_OPERATION_MODE_ACCGYRO;
 8000e3e:	2305      	movs	r3, #5
 8000e40:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e42:	f107 030f 	add.w	r3, r7, #15
 8000e46:	4619      	mov	r1, r3
 8000e48:	203d      	movs	r0, #61	; 0x3d
 8000e4a:	f7ff ff5b 	bl	8000d04 <bno055_write>
	break;
 8000e4e:	e03e      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_MAGGYRO:
		tmp = BNO055_OPERATION_MODE_MAGGYRO;
 8000e50:	2306      	movs	r3, #6
 8000e52:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e54:	f107 030f 	add.w	r3, r7, #15
 8000e58:	4619      	mov	r1, r3
 8000e5a:	203d      	movs	r0, #61	; 0x3d
 8000e5c:	f7ff ff52 	bl	8000d04 <bno055_write>
	break;
 8000e60:	e035      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_AMG:
		tmp = BNO055_OPERATION_MODE_AMG;
 8000e62:	2307      	movs	r3, #7
 8000e64:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e66:	f107 030f 	add.w	r3, r7, #15
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	203d      	movs	r0, #61	; 0x3d
 8000e6e:	f7ff ff49 	bl	8000d04 <bno055_write>
	break;
 8000e72:	e02c      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_IMU:
		tmp = BNO055_OPERATION_MODE_IMU;
 8000e74:	2308      	movs	r3, #8
 8000e76:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e78:	f107 030f 	add.w	r3, r7, #15
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	203d      	movs	r0, #61	; 0x3d
 8000e80:	f7ff ff40 	bl	8000d04 <bno055_write>
	break;
 8000e84:	e023      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_COMPASS:
		tmp = BNO055_OPERATION_MODE_COMPASS;
 8000e86:	2309      	movs	r3, #9
 8000e88:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e8a:	f107 030f 	add.w	r3, r7, #15
 8000e8e:	4619      	mov	r1, r3
 8000e90:	203d      	movs	r0, #61	; 0x3d
 8000e92:	f7ff ff37 	bl	8000d04 <bno055_write>
	break;
 8000e96:	e01a      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_M4G:
		tmp = BNO055_OPERATION_MODE_M4G;
 8000e98:	230a      	movs	r3, #10
 8000e9a:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e9c:	f107 030f 	add.w	r3, r7, #15
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	203d      	movs	r0, #61	; 0x3d
 8000ea4:	f7ff ff2e 	bl	8000d04 <bno055_write>
	break;
 8000ea8:	e011      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_NDOF_FMC_OFF:
		tmp = BNO055_OPERATION_MODE_NDOF_FMC_OFF;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000eae:	f107 030f 	add.w	r3, r7, #15
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	203d      	movs	r0, #61	; 0x3d
 8000eb6:	f7ff ff25 	bl	8000d04 <bno055_write>
	break;
 8000eba:	e008      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_NDOF:
		tmp = BNO055_OPERATION_MODE_NDOF;
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000ec0:	f107 030f 	add.w	r3, r7, #15
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	203d      	movs	r0, #61	; 0x3d
 8000ec8:	f7ff ff1c 	bl	8000d04 <bno055_write>
	break;
 8000ecc:	bf00      	nop
	}
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop

08000ed8 <bno055_fusion_data_output_systems>:

void bno055_fusion_data_output_systems(fusion_data_output_systems_t data_systems){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(data_systems){
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <bno055_fusion_data_output_systems+0x16>
 8000ee8:	2b80      	cmp	r3, #128	; 0x80
 8000eea:	d009      	beq.n	8000f00 <bno055_fusion_data_output_systems+0x28>
	case ANDROID_FUSION_DATA_OUTPUT:
	tmp = ANDROID_FUSION_DATA_OUTPUT;
	bno055_write(UNIT_SEL,&tmp);
	break;
	}
}
 8000eec:	e011      	b.n	8000f12 <bno055_fusion_data_output_systems+0x3a>
	tmp = WINDOWS_FUSION_DATA_OUTPUT,
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
	bno055_write(UNIT_SEL,&tmp);
 8000ef2:	f107 030f 	add.w	r3, r7, #15
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	203b      	movs	r0, #59	; 0x3b
 8000efa:	f7ff ff03 	bl	8000d04 <bno055_write>
	break;
 8000efe:	e008      	b.n	8000f12 <bno055_fusion_data_output_systems+0x3a>
	tmp = ANDROID_FUSION_DATA_OUTPUT;
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	73fb      	strb	r3, [r7, #15]
	bno055_write(UNIT_SEL,&tmp);
 8000f04:	f107 030f 	add.w	r3, r7, #15
 8000f08:	4619      	mov	r1, r3
 8000f0a:	203b      	movs	r0, #59	; 0x3b
 8000f0c:	f7ff fefa 	bl	8000d04 <bno055_write>
	break;
 8000f10:	bf00      	nop
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <bno055_axis_remap_config>:

void bno055_axis_remap_config(bno055_axis_remap_config_t axis_remap){
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b084      	sub	sp, #16
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(axis_remap){
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b21      	cmp	r3, #33	; 0x21
 8000f28:	d002      	beq.n	8000f30 <bno055_axis_remap_config+0x16>
 8000f2a:	2b24      	cmp	r3, #36	; 0x24
 8000f2c:	d009      	beq.n	8000f42 <bno055_axis_remap_config+0x28>
	case REMAP_CONFIG_P1_2_4_7:
	tmp = REMAP_CONFIG_P1_2_4_7,
	bno055_write(AXIS_MAP_CONFIG,&tmp);
	break;
	}
}
 8000f2e:	e011      	b.n	8000f54 <bno055_axis_remap_config+0x3a>
	tmp = REMAP_CONFIG_P0_3_5_6,
 8000f30:	2321      	movs	r3, #33	; 0x21
 8000f32:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_CONFIG,&tmp);
 8000f34:	f107 030f 	add.w	r3, r7, #15
 8000f38:	4619      	mov	r1, r3
 8000f3a:	2041      	movs	r0, #65	; 0x41
 8000f3c:	f7ff fee2 	bl	8000d04 <bno055_write>
	break;
 8000f40:	e008      	b.n	8000f54 <bno055_axis_remap_config+0x3a>
	tmp = REMAP_CONFIG_P1_2_4_7,
 8000f42:	2324      	movs	r3, #36	; 0x24
 8000f44:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_CONFIG,&tmp);
 8000f46:	f107 030f 	add.w	r3, r7, #15
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	2041      	movs	r0, #65	; 0x41
 8000f4e:	f7ff fed9 	bl	8000d04 <bno055_write>
	break;
 8000f52:	bf00      	nop
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <bno055_axis_remap_sign>:

void bno055_axis_remap_sign(bno055_axis_remap_sign_t axis_remap_sign){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(axis_remap_sign){
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b07      	cmp	r3, #7
 8000f6a:	d85b      	bhi.n	8001024 <bno055_axis_remap_sign+0xc8>
 8000f6c:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <bno055_axis_remap_sign+0x18>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08000fa7 	.word	0x08000fa7
 8000f78:	08000fef 	.word	0x08000fef
 8000f7c:	08000fcb 	.word	0x08000fcb
 8000f80:	08000fdd 	.word	0x08000fdd
 8000f84:	08000f95 	.word	0x08000f95
 8000f88:	08001013 	.word	0x08001013
 8000f8c:	08000fb9 	.word	0x08000fb9
 8000f90:	08001001 	.word	0x08001001
	case REMAP_SIGN_P0:
	tmp = REMAP_SIGN_P0,
 8000f94:	2304      	movs	r3, #4
 8000f96:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000f98:	f107 030f 	add.w	r3, r7, #15
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	2042      	movs	r0, #66	; 0x42
 8000fa0:	f7ff feb0 	bl	8000d04 <bno055_write>
	break;
 8000fa4:	e03e      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P1:
	tmp = REMAP_SIGN_P1,
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000faa:	f107 030f 	add.w	r3, r7, #15
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2042      	movs	r0, #66	; 0x42
 8000fb2:	f7ff fea7 	bl	8000d04 <bno055_write>
	break;
 8000fb6:	e035      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P2:
	tmp = REMAP_SIGN_P2,
 8000fb8:	2306      	movs	r3, #6
 8000fba:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000fbc:	f107 030f 	add.w	r3, r7, #15
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	2042      	movs	r0, #66	; 0x42
 8000fc4:	f7ff fe9e 	bl	8000d04 <bno055_write>
	break;
 8000fc8:	e02c      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P3:
	tmp = REMAP_SIGN_P3,
 8000fca:	2302      	movs	r3, #2
 8000fcc:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000fce:	f107 030f 	add.w	r3, r7, #15
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	2042      	movs	r0, #66	; 0x42
 8000fd6:	f7ff fe95 	bl	8000d04 <bno055_write>
	break;
 8000fda:	e023      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P4:
	tmp = REMAP_SIGN_P4,
 8000fdc:	2303      	movs	r3, #3
 8000fde:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000fe0:	f107 030f 	add.w	r3, r7, #15
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	2042      	movs	r0, #66	; 0x42
 8000fe8:	f7ff fe8c 	bl	8000d04 <bno055_write>
	break;
 8000fec:	e01a      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P5:
	tmp = REMAP_SIGN_P5,
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000ff2:	f107 030f 	add.w	r3, r7, #15
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2042      	movs	r0, #66	; 0x42
 8000ffa:	f7ff fe83 	bl	8000d04 <bno055_write>
	break;
 8000ffe:	e011      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P6:
	tmp = REMAP_SIGN_P6,
 8001000:	2307      	movs	r3, #7
 8001002:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8001004:	f107 030f 	add.w	r3, r7, #15
 8001008:	4619      	mov	r1, r3
 800100a:	2042      	movs	r0, #66	; 0x42
 800100c:	f7ff fe7a 	bl	8000d04 <bno055_write>
	break;
 8001010:	e008      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P7:
	tmp = REMAP_SIGN_P7,
 8001012:	2305      	movs	r3, #5
 8001014:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8001016:	f107 030f 	add.w	r3, r7, #15
 800101a:	4619      	mov	r1, r3
 800101c:	2042      	movs	r0, #66	; 0x42
 800101e:	f7ff fe71 	bl	8000d04 <bno055_write>
	break;
 8001022:	bf00      	nop
	}
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <bno055_calibrations_status>:

int bno055_calibrations_status(char *sys, char *gyr, char *acc, char *mag){
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
	uint8_t tmp;
	uint8_t buffer_calib_sta[1] ={};
 800103a:	2300      	movs	r3, #0
 800103c:	753b      	strb	r3, [r7, #20]
	tmp = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	75fb      	strb	r3, [r7, #23]
	bno055_write(PAGE_ID,&tmp);
 8001042:	f107 0317 	add.w	r3, r7, #23
 8001046:	4619      	mov	r1, r3
 8001048:	2007      	movs	r0, #7
 800104a:	f7ff fe5b 	bl	8000d04 <bno055_write>
	if(bno055_read(CALIB_STAT,buffer_calib_sta)<0){
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	2035      	movs	r0, #53	; 0x35
 8001056:	f7ff fe31 	bl	8000cbc <bno055_read>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	da02      	bge.n	8001066 <bno055_calibrations_status+0x3a>
		return -1;
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	e012      	b.n	800108c <bno055_calibrations_status+0x60>
		*sys = (int8_t)((int8_t)buffer_calib_sta[0])>>6;
		*gyr = (int8_t)((int8_t)buffer_calib_sta[0])>>4 & 0b0011;
		*acc = (int8_t)((int8_t)buffer_calib_sta[0])>>2 & 0b0011;
		*mag = (int8_t)((int8_t)buffer_calib_sta[0]) & 0b0011;
	}
	if((*sys == 3 && *gyr == 3 && *acc == 3 && *mag == 3)){
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d10d      	bne.n	800108a <bno055_calibrations_status+0x5e>
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d109      	bne.n	800108a <bno055_calibrations_status+0x5e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b03      	cmp	r3, #3
 800107c:	d105      	bne.n	800108a <bno055_calibrations_status+0x5e>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d101      	bne.n	800108a <bno055_calibrations_status+0x5e>
		return 1;
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <bno055_calibrations_status+0x60>
	}
	return 0;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <bno055_initization>:
	st_mcu = (int8_t)((int8_t)buffer_test[0]) & 0b1000;
	if((seft_test = (((st_mcu|st_gyr)|st_mag)|st_acc))!=15) return -1;
	return 0;
}

int bno055_initization(){
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af04      	add	r7, sp, #16
	uint8_t tmp,member;
    char i = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	71fb      	strb	r3, [r7, #7]
    char j = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	71bb      	strb	r3, [r7, #6]
    for(i=0;i<1;i++){
 80010a2:	2300      	movs	r3, #0
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	e026      	b.n	80010f6 <bno055_initization+0x62>
  	  for(j=0;j<3;j++){
 80010a8:	2300      	movs	r3, #0
 80010aa:	71bb      	strb	r3, [r7, #6]
 80010ac:	e01d      	b.n	80010ea <bno055_initization+0x56>
  		  if(HAL_I2C_IsDeviceReady(&BNO055__I2C,BNO055_I2C_ADDR, 1, 100)==HAL_OK){
 80010ae:	2364      	movs	r3, #100	; 0x64
 80010b0:	2201      	movs	r2, #1
 80010b2:	2150      	movs	r1, #80	; 0x50
 80010b4:	484c      	ldr	r0, [pc, #304]	; (80011e8 <bno055_initization+0x154>)
 80010b6:	f003 fff3 	bl	80050a0 <HAL_I2C_IsDeviceReady>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d108      	bne.n	80010d2 <bno055_initization+0x3e>
  			  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80010c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c4:	4849      	ldr	r0, [pc, #292]	; (80011ec <bno055_initization+0x158>)
 80010c6:	f003 fa6e 	bl	80045a6 <HAL_GPIO_TogglePin>
  			  HAL_Delay(80);
 80010ca:	2050      	movs	r0, #80	; 0x50
 80010cc:	f002 f8d6 	bl	800327c <HAL_Delay>
 80010d0:	e008      	b.n	80010e4 <bno055_initization+0x50>
  		  	  }
  		  else{
  			  HAL_GPIO_WritePin(GPIOC,BUZZER_Pin, SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d8:	4844      	ldr	r0, [pc, #272]	; (80011ec <bno055_initization+0x158>)
 80010da:	f003 fa4b 	bl	8004574 <HAL_GPIO_WritePin>
  			  HAL_Delay(100);
 80010de:	2064      	movs	r0, #100	; 0x64
 80010e0:	f002 f8cc 	bl	800327c <HAL_Delay>
  	  for(j=0;j<3;j++){
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	3301      	adds	r3, #1
 80010e8:	71bb      	strb	r3, [r7, #6]
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d9de      	bls.n	80010ae <bno055_initization+0x1a>
    for(i=0;i<1;i++){
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	3301      	adds	r3, #1
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0d5      	beq.n	80010a8 <bno055_initization+0x14>
  		  }
  	  }
    }
	  /*Reset System */
	  tmp = 0x20;
 80010fc:	2320      	movs	r3, #32
 80010fe:	717b      	strb	r3, [r7, #5]
	  bno055_write(SYS_TRIGGER,&tmp);
 8001100:	1d7b      	adds	r3, r7, #5
 8001102:	4619      	mov	r1, r3
 8001104:	203f      	movs	r0, #63	; 0x3f
 8001106:	f7ff fdfd 	bl	8000d04 <bno055_write>
      HAL_Delay(600);
 800110a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800110e:	f002 f8b5 	bl	800327c <HAL_Delay>
      member = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	713b      	strb	r3, [r7, #4]
      HAL_I2C_Mem_Read(&BNO055__I2C,BNO055_I2C_ADDR,CHIP_ID_PAGE_0, I2C_MEMADD_SIZE_8BIT, &member, 1, I2C_TIMEOUT_MS);
 8001116:	2364      	movs	r3, #100	; 0x64
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2200      	movs	r2, #0
 8001126:	2150      	movs	r1, #80	; 0x50
 8001128:	482f      	ldr	r0, [pc, #188]	; (80011e8 <bno055_initization+0x154>)
 800112a:	f003 fd93 	bl	8004c54 <HAL_I2C_Mem_Read>
      if(member==BNO055_ID){
 800112e:	793b      	ldrb	r3, [r7, #4]
 8001130:	2ba0      	cmp	r3, #160	; 0xa0
 8001132:	d106      	bne.n	8001142 <bno055_initization+0xae>
    	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001134:	2201      	movs	r2, #1
 8001136:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113a:	482c      	ldr	r0, [pc, #176]	; (80011ec <bno055_initization+0x158>)
 800113c:	f003 fa1a 	bl	8004574 <HAL_GPIO_WritePin>
 8001140:	e005      	b.n	800114e <bno055_initization+0xba>
      }
      else{
    	  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001148:	4828      	ldr	r0, [pc, #160]	; (80011ec <bno055_initization+0x158>)
 800114a:	f003 fa13 	bl	8004574 <HAL_GPIO_WritePin>
      }
    //set operation_mode BNO055_OPERATION_CONFIG_MODE
    bno055_set_operation_mode(BNO055_OPERATION_CONFIG_MODE);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff fe22 	bl	8000d98 <bno055_set_operation_mode>
	/* Configurations Power Mode */
	tmp = POWER_MODE_NORMAL;
 8001154:	2300      	movs	r3, #0
 8001156:	717b      	strb	r3, [r7, #5]
	bno055_write(PWR_MODE,&tmp);
 8001158:	1d7b      	adds	r3, r7, #5
 800115a:	4619      	mov	r1, r3
 800115c:	203e      	movs	r0, #62	; 0x3e
 800115e:	f7ff fdd1 	bl	8000d04 <bno055_write>
    //Move to Page 1//
	tmp = 0x01;
 8001162:	2301      	movs	r3, #1
 8001164:	717b      	strb	r3, [r7, #5]
	bno055_write(PAGE_ID,&tmp);
 8001166:	1d7b      	adds	r3, r7, #5
 8001168:	4619      	mov	r1, r3
 800116a:	2007      	movs	r0, #7
 800116c:	f7ff fdca 	bl	8000d04 <bno055_write>
    /* Configurations Accelerometer */
	tmp = (ACCEL_OPERATION_MODE_NORMAL | ACCEL_BANDWIDTH)| ACCEL_G_RANGE;
 8001170:	230d      	movs	r3, #13
 8001172:	717b      	strb	r3, [r7, #5]
	bno055_write(ACC_CONFIG,&tmp);
 8001174:	1d7b      	adds	r3, r7, #5
 8001176:	4619      	mov	r1, r3
 8001178:	2008      	movs	r0, #8
 800117a:	f7ff fdc3 	bl	8000d04 <bno055_write>
    /* Configurations Gyroscope */
	tmp = GYR_BANDWIDTH | GYRO_RANGE;
 800117e:	2338      	movs	r3, #56	; 0x38
 8001180:	717b      	strb	r3, [r7, #5]
	bno055_write(GYR_CONFIG_0,&tmp);
 8001182:	1d7b      	adds	r3, r7, #5
 8001184:	4619      	mov	r1, r3
 8001186:	200a      	movs	r0, #10
 8001188:	f7ff fdbc 	bl	8000d04 <bno055_write>
	tmp = GYR_OPERATION_MODE;
 800118c:	2300      	movs	r3, #0
 800118e:	717b      	strb	r3, [r7, #5]
	bno055_write(GYR_CONFIG_1,&tmp);
 8001190:	1d7b      	adds	r3, r7, #5
 8001192:	4619      	mov	r1, r3
 8001194:	200b      	movs	r0, #11
 8001196:	f7ff fdb5 	bl	8000d04 <bno055_write>
    /* Configurations Magnetometer */
	tmp = (MAG_PWR_MODE | MAG_OPERATION_MODE)| BNO055_MAG_DATA_OUTPUT_RATE;
 800119a:	237b      	movs	r3, #123	; 0x7b
 800119c:	717b      	strb	r3, [r7, #5]
	bno055_write(MAG_CONFIG,&tmp);
 800119e:	1d7b      	adds	r3, r7, #5
 80011a0:	4619      	mov	r1, r3
 80011a2:	2009      	movs	r0, #9
 80011a4:	f7ff fdae 	bl	8000d04 <bno055_write>
  	/*Configuration Sensor Unit*/
  	//Move to Page 0//
    tmp = 0x00;
 80011a8:	2300      	movs	r3, #0
 80011aa:	717b      	strb	r3, [r7, #5]
    bno055_write(PAGE_ID,&tmp);
 80011ac:	1d7b      	adds	r3, r7, #5
 80011ae:	4619      	mov	r1, r3
 80011b0:	2007      	movs	r0, #7
 80011b2:	f7ff fda7 	bl	8000d04 <bno055_write>
    tmp = (((TEMPERATURE_UNITS | EULER_ANGLES_UNITS)| ANGULAR_RATE_UNITS)| BNO055_ACCEL_UNITS);
 80011b6:	2300      	movs	r3, #0
 80011b8:	717b      	strb	r3, [r7, #5]
    bno055_write(UNIT_SEL,&tmp);
 80011ba:	1d7b      	adds	r3, r7, #5
 80011bc:	4619      	mov	r1, r3
 80011be:	203b      	movs	r0, #59	; 0x3b
 80011c0:	f7ff fda0 	bl	8000d04 <bno055_write>
    bno055_fusion_data_output_systems(WINDOWS_FUSION_DATA_OUTPUT);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff fe87 	bl	8000ed8 <bno055_fusion_data_output_systems>
    /* Configure axis mapping*/
    bno055_axis_remap_config(REMAP_CONFIG_P1_2_4_7);
 80011ca:	2024      	movs	r0, #36	; 0x24
 80011cc:	f7ff fea5 	bl	8000f1a <bno055_axis_remap_config>
    bno055_axis_remap_sign(REMAP_SIGN_P1);
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff fec3 	bl	8000f5c <bno055_axis_remap_sign>
    //set BNO055_OPERATION_MODE_NDOF
    bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 80011d6:	200c      	movs	r0, #12
 80011d8:	f7ff fdde 	bl	8000d98 <bno055_set_operation_mode>
	return 0;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200004c4 	.word	0x200004c4
 80011ec:	40020800 	.word	0x40020800

080011f0 <bno055_get_temp>:
	*mx = (int16_t)((int16_t)buffer_mag[1]  << 8) | buffer_mag[0]; *mx /= BNO055_MAG_SCALE;
	*my = (int16_t)((int16_t)buffer_mag[3]  << 8) | buffer_mag[2]; *my /= BNO055_MAG_SCALE;
	*mz = (int16_t)((int16_t)buffer_mag[5]  << 8) | buffer_mag[4]; *mz /= BNO055_MAG_SCALE;
	return 0;
}
int bno055_get_temp(float *temp){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_temp[1] = {};
 80011f8:	2300      	movs	r3, #0
 80011fa:	733b      	strb	r3, [r7, #12]
	tmp = 0x00;
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8001200:	f107 030f 	add.w	r3, r7, #15
 8001204:	4619      	mov	r1, r3
 8001206:	2007      	movs	r0, #7
 8001208:	f7ff fd7c 	bl	8000d04 <bno055_write>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	da02      	bge.n	8001218 <bno055_get_temp+0x28>
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	e015      	b.n	8001244 <bno055_get_temp+0x54>
	if(bno055_read_bytes(TEMP,buffer_temp,1)<0){
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2201      	movs	r2, #1
 800121e:	4619      	mov	r1, r3
 8001220:	2034      	movs	r0, #52	; 0x34
 8001222:	f7ff fd8f 	bl	8000d44 <bno055_read_bytes>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	da02      	bge.n	8001232 <bno055_get_temp+0x42>
				return -1;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	e008      	b.n	8001244 <bno055_get_temp+0x54>
			}
	*temp = buffer_temp[0] / BNO055_TEMP_SCALE;
 8001232:	7b3b      	ldrb	r3, [r7, #12]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <bno055_get_elu_data>:
int bno055_get_elu_data(float *roll, float *pitch, float *yaw){
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_eul[6] = {};
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	2300      	movs	r3, #0
 800125e:	82bb      	strh	r3, [r7, #20]
	tmp = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	75fb      	strb	r3, [r7, #23]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8001264:	f107 0317 	add.w	r3, r7, #23
 8001268:	4619      	mov	r1, r3
 800126a:	2007      	movs	r0, #7
 800126c:	f7ff fd4a 	bl	8000d04 <bno055_write>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	da02      	bge.n	800127c <bno055_get_elu_data+0x30>
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e052      	b.n	8001322 <bno055_get_elu_data+0xd6>
	if(bno055_read_bytes(EUL_HEADING_LSB,buffer_eul,6)<0){
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2206      	movs	r2, #6
 8001282:	4619      	mov	r1, r3
 8001284:	201a      	movs	r0, #26
 8001286:	f7ff fd5d 	bl	8000d44 <bno055_read_bytes>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	da02      	bge.n	8001296 <bno055_get_elu_data+0x4a>
					return -1;
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	e045      	b.n	8001322 <bno055_get_elu_data+0xd6>
	}
	*yaw = (int16_t)((int16_t)buffer_eul[1]  << 8) | buffer_eul[0]; *yaw /= BNO055_EUL_SCALE;
 8001296:	7c7b      	ldrb	r3, [r7, #17]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21b      	sxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	7c3b      	ldrb	r3, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edc3 7a00 	vstr	s15, [r3]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a00 	vldr	s14, [r3]
 80012b6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80012ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	edc3 7a00 	vstr	s15, [r3]
	*roll = (int16_t)((int16_t)buffer_eul[3]  << 8) | buffer_eul[2]; *roll /= BNO055_EUL_SCALE;
 80012c4:	7cfb      	ldrb	r3, [r7, #19]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	7cbb      	ldrb	r3, [r7, #18]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	edc3 7a00 	vstr	s15, [r3]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	ed93 7a00 	vldr	s14, [r3]
 80012e4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80012e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	edc3 7a00 	vstr	s15, [r3]
	*pitch = (int16_t)((int16_t)buffer_eul[5]  << 8) | buffer_eul[4]; *pitch /= BNO055_EUL_SCALE;
 80012f2:	7d7b      	ldrb	r3, [r7, #21]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	7d3b      	ldrb	r3, [r7, #20]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	edc3 7a00 	vstr	s15, [r3]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	ed93 7a00 	vldr	s14, [r3]
 8001312:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001332:	463b      	mov	r3, r7
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800133e:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001340:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <MX_ADC1_Init+0x9c>)
 8001342:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001346:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800134a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_ADC1_Init+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_ADC1_Init+0x98>)
 800135a:	2200      	movs	r2, #0
 800135c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800135e:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_ADC1_Init+0x98>)
 800136e:	4a17      	ldr	r2, [pc, #92]	; (80013cc <MX_ADC1_Init+0xa0>)
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_ADC1_Init+0x98>)
 800137a:	2201      	movs	r2, #1
 800137c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001388:	2201      	movs	r2, #1
 800138a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <MX_ADC1_Init+0x98>)
 800138e:	f001 ff99 	bl	80032c4 <HAL_ADC_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001398:	f000 fd07 	bl	8001daa <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800139c:	230b      	movs	r3, #11
 800139e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_ADC1_Init+0x98>)
 80013ae:	f001 ffcd 	bl	800334c <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013b8:	f000 fcf7 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000454 	.word	0x20000454
 80013c8:	40012000 	.word	0x40012000
 80013cc:	0f000001 	.word	0x0f000001

080013d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a17      	ldr	r2, [pc, #92]	; (800144c <HAL_ADC_MspInit+0x7c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d127      	bne.n	8001442 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_ADC_MspInit+0x80>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a15      	ldr	r2, [pc, #84]	; (8001450 <HAL_ADC_MspInit+0x80>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_ADC_MspInit+0x80>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_ADC_MspInit+0x80>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_ADC_MspInit+0x80>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_ADC_MspInit+0x80>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = MCU_ADC_1_Pin|MCU_ADC_2_Pin|MCU_ADC_3_Pin;
 800142a:	230e      	movs	r3, #14
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142e:	2303      	movs	r3, #3
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <HAL_ADC_MspInit+0x84>)
 800143e:	f002 fefd 	bl	800423c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40012000 	.word	0x40012000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020800 	.word	0x40020800

08001458 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_CAN2_Init+0x60>)
 800145e:	4a17      	ldr	r2, [pc, #92]	; (80014bc <MX_CAN2_Init+0x64>)
 8001460:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_CAN2_Init+0x60>)
 8001464:	2210      	movs	r2, #16
 8001466:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_CAN2_Init+0x60>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_CAN2_Init+0x60>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <MX_CAN2_Init+0x60>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_CAN2_Init+0x60>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <MX_CAN2_Init+0x60>)
 8001482:	2200      	movs	r2, #0
 8001484:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_CAN2_Init+0x60>)
 8001488:	2200      	movs	r2, #0
 800148a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MX_CAN2_Init+0x60>)
 800148e:	2200      	movs	r2, #0
 8001490:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_CAN2_Init+0x60>)
 8001494:	2200      	movs	r2, #0
 8001496:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <MX_CAN2_Init+0x60>)
 800149a:	2200      	movs	r2, #0
 800149c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_CAN2_Init+0x60>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_CAN2_Init+0x60>)
 80014a6:	f002 f96f 	bl	8003788 <HAL_CAN_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80014b0:	f000 fc7b 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000049c 	.word	0x2000049c
 80014bc:	40006800 	.word	0x40006800

080014c0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a20      	ldr	r2, [pc, #128]	; (8001560 <HAL_CAN_MspInit+0xa0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d13a      	bne.n	8001558 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <HAL_CAN_MspInit+0xa4>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <HAL_CAN_MspInit+0xa4>)
 80014ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <HAL_CAN_MspInit+0xa4>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <HAL_CAN_MspInit+0xa4>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a17      	ldr	r2, [pc, #92]	; (8001564 <HAL_CAN_MspInit+0xa4>)
 8001508:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_CAN_MspInit+0xa4>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_CAN_MspInit+0xa4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a10      	ldr	r2, [pc, #64]	; (8001564 <HAL_CAN_MspInit+0xa4>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_CAN_MspInit+0xa4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = MCU_CAN_RX_Pin|MCU_CAN_TX_Pin;
 8001536:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001548:	2309      	movs	r3, #9
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <HAL_CAN_MspInit+0xa8>)
 8001554:	f002 fe72 	bl	800423c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	; 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40006800 	.word	0x40006800
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400

0800156c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <MX_DMA_Init+0x108>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a3e      	ldr	r2, [pc, #248]	; (8001674 <MX_DMA_Init+0x108>)
 800157c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b3c      	ldr	r3, [pc, #240]	; (8001674 <MX_DMA_Init+0x108>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b38      	ldr	r3, [pc, #224]	; (8001674 <MX_DMA_Init+0x108>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a37      	ldr	r2, [pc, #220]	; (8001674 <MX_DMA_Init+0x108>)
 8001598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b35      	ldr	r3, [pc, #212]	; (8001674 <MX_DMA_Init+0x108>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	200b      	movs	r0, #11
 80015b0:	f002 fa9e 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015b4:	200b      	movs	r0, #11
 80015b6:	f002 fab7 	bl	8003b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	200c      	movs	r0, #12
 80015c0:	f002 fa96 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015c4:	200c      	movs	r0, #12
 80015c6:	f002 faaf 	bl	8003b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	200d      	movs	r0, #13
 80015d0:	f002 fa8e 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80015d4:	200d      	movs	r0, #13
 80015d6:	f002 faa7 	bl	8003b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	200e      	movs	r0, #14
 80015e0:	f002 fa86 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80015e4:	200e      	movs	r0, #14
 80015e6:	f002 fa9f 	bl	8003b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	200f      	movs	r0, #15
 80015f0:	f002 fa7e 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80015f4:	200f      	movs	r0, #15
 80015f6:	f002 fa97 	bl	8003b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2010      	movs	r0, #16
 8001600:	f002 fa76 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001604:	2010      	movs	r0, #16
 8001606:	f002 fa8f 	bl	8003b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2011      	movs	r0, #17
 8001610:	f002 fa6e 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001614:	2011      	movs	r0, #17
 8001616:	f002 fa87 	bl	8003b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	202f      	movs	r0, #47	; 0x2f
 8001620:	f002 fa66 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001624:	202f      	movs	r0, #47	; 0x2f
 8001626:	f002 fa7f 	bl	8003b28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	2039      	movs	r0, #57	; 0x39
 8001630:	f002 fa5e 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001634:	2039      	movs	r0, #57	; 0x39
 8001636:	f002 fa77 	bl	8003b28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	203a      	movs	r0, #58	; 0x3a
 8001640:	f002 fa56 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001644:	203a      	movs	r0, #58	; 0x3a
 8001646:	f002 fa6f 	bl	8003b28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2045      	movs	r0, #69	; 0x45
 8001650:	f002 fa4e 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001654:	2045      	movs	r0, #69	; 0x45
 8001656:	f002 fa67 	bl	8003b28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2046      	movs	r0, #70	; 0x46
 8001660:	f002 fa46 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001664:	2046      	movs	r0, #70	; 0x46
 8001666:	f002 fa5f 	bl	8003b28 <HAL_NVIC_EnableIRQ>

}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800

08001678 <MX_GPIO_Init>:
        * EXTI
     PA15   ------> S_TIM2_CH1_ETR
     PB3   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <MX_GPIO_Init+0x16c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a53      	ldr	r2, [pc, #332]	; (80017e4 <MX_GPIO_Init+0x16c>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b51      	ldr	r3, [pc, #324]	; (80017e4 <MX_GPIO_Init+0x16c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b4d      	ldr	r3, [pc, #308]	; (80017e4 <MX_GPIO_Init+0x16c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a4c      	ldr	r2, [pc, #304]	; (80017e4 <MX_GPIO_Init+0x16c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <MX_GPIO_Init+0x16c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <MX_GPIO_Init+0x16c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a45      	ldr	r2, [pc, #276]	; (80017e4 <MX_GPIO_Init+0x16c>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <MX_GPIO_Init+0x16c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <MX_GPIO_Init+0x16c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a3e      	ldr	r2, [pc, #248]	; (80017e4 <MX_GPIO_Init+0x16c>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <MX_GPIO_Init+0x16c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 80016fe:	2200      	movs	r2, #0
 8001700:	f246 0131 	movw	r1, #24625	; 0x6031
 8001704:	4838      	ldr	r0, [pc, #224]	; (80017e8 <MX_GPIO_Init+0x170>)
 8001706:	f002 ff35 	bl	8004574 <HAL_GPIO_WritePin>
                          |ADD_SPI_CSn_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001710:	4836      	ldr	r0, [pc, #216]	; (80017ec <MX_GPIO_Init+0x174>)
 8001712:	f002 ff2f 	bl	8004574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_LORA_RST_GPIO_Port, MCU_LORA_RST_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171c:	4834      	ldr	r0, [pc, #208]	; (80017f0 <MX_GPIO_Init+0x178>)
 800171e:	f002 ff29 	bl	8004574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 8001722:	f246 0331 	movw	r3, #24625	; 0x6031
 8001726:	617b      	str	r3, [r7, #20]
                          |ADD_SPI_CSn_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	482b      	ldr	r0, [pc, #172]	; (80017e8 <MX_GPIO_Init+0x170>)
 800173c:	f002 fd7e 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001746:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4824      	ldr	r0, [pc, #144]	; (80017e8 <MX_GPIO_Init+0x170>)
 8001758:	f002 fd70 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin;
 800175c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	481d      	ldr	r0, [pc, #116]	; (80017ec <MX_GPIO_Init+0x174>)
 8001776:	f002 fd61 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_LORA_RST_Pin;
 800177a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_LORA_RST_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	4817      	ldr	r0, [pc, #92]	; (80017f0 <MX_GPIO_Init+0x178>)
 8001794:	f002 fd52 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR1_Pin;
 8001798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017aa:	2301      	movs	r3, #1
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR1_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	480e      	ldr	r0, [pc, #56]	; (80017f0 <MX_GPIO_Init+0x178>)
 80017b6:	f002 fd41 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR2_Pin;
 80017ba:	2308      	movs	r3, #8
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ca:	2301      	movs	r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR2_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_GPIO_Init+0x174>)
 80017d6:	f002 fd31 	bl	800423c <HAL_GPIO_Init>

}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020000 	.word	0x40020000

080017f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
	__HAL_RCC_I2C1_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <MX_I2C1_Init+0x74>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a19      	ldr	r2, [pc, #100]	; (8001868 <MX_I2C1_Init+0x74>)
 8001804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <MX_I2C1_Init+0x74>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_I2C1_Init+0x78>)
 8001818:	4a15      	ldr	r2, [pc, #84]	; (8001870 <MX_I2C1_Init+0x7c>)
 800181a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <MX_I2C1_Init+0x78>)
 800181e:	4a15      	ldr	r2, [pc, #84]	; (8001874 <MX_I2C1_Init+0x80>)
 8001820:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <MX_I2C1_Init+0x78>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <MX_I2C1_Init+0x78>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_I2C1_Init+0x78>)
 8001830:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001834:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <MX_I2C1_Init+0x78>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <MX_I2C1_Init+0x78>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <MX_I2C1_Init+0x78>)
 8001844:	2200      	movs	r2, #0
 8001846:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <MX_I2C1_Init+0x78>)
 800184a:	2200      	movs	r2, #0
 800184c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800184e:	4807      	ldr	r0, [pc, #28]	; (800186c <MX_I2C1_Init+0x78>)
 8001850:	f002 fec4 	bl	80045dc <HAL_I2C_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_I2C1_Init+0x6a>
  {
    Error_Handler();
 800185a:	f000 faa6 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	200004c4 	.word	0x200004c4
 8001870:	40005400 	.word	0x40005400
 8001874:	00061a80 	.word	0x00061a80

08001878 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a19      	ldr	r2, [pc, #100]	; (80018fc <HAL_I2C_MspInit+0x84>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d12c      	bne.n	80018f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_I2C_MspInit+0x88>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a17      	ldr	r2, [pc, #92]	; (8001900 <HAL_I2C_MspInit+0x88>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_I2C_MspInit+0x88>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MCU_I2C_SCL_Pin|MCU_I2C_SDA_Pin;
 80018b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018bc:	2312      	movs	r3, #18
 80018be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018c8:	2304      	movs	r3, #4
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	480c      	ldr	r0, [pc, #48]	; (8001904 <HAL_I2C_MspInit+0x8c>)
 80018d4:	f002 fcb2 	bl	800423c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_I2C_MspInit+0x88>)
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	4a07      	ldr	r2, [pc, #28]	; (8001900 <HAL_I2C_MspInit+0x88>)
 80018e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018e6:	6413      	str	r3, [r2, #64]	; 0x40
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_I2C_MspInit+0x88>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	; 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40005400 	.word	0x40005400
 8001900:	40023800 	.word	0x40023800
 8001904:	40020400 	.word	0x40020400

08001908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b098      	sub	sp, #96	; 0x60
 800190c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190e:	f001 fc73 	bl	80031f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001912:	f000 f9d1 	bl	8001cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001916:	f7ff feaf 	bl	8001678 <MX_GPIO_Init>
  MX_DMA_Init();
 800191a:	f7ff fe27 	bl	800156c <MX_DMA_Init>
  MX_ADC1_Init();
 800191e:	f7ff fd05 	bl	800132c <MX_ADC1_Init>
  MX_CAN2_Init();
 8001922:	f7ff fd99 	bl	8001458 <MX_CAN2_Init>
  MX_I2C1_Init();
 8001926:	f7ff ff65 	bl	80017f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800192a:	f000 fa43 	bl	8001db4 <MX_SPI1_Init>
  MX_TIM1_Init();
 800192e:	f000 fc5f 	bl	80021f0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001932:	f000 fd21 	bl	8002378 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001936:	f000 fdbb 	bl	80024b0 <MX_TIM8_Init>
  MX_UART4_Init();
 800193a:	f000 ff2d 	bl	8002798 <MX_UART4_Init>
  MX_UART5_Init();
 800193e:	f000 ff55 	bl	80027ec <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001942:	f000 ff7d 	bl	8002840 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001946:	f000 ffa5 	bl	8002894 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800194a:	f000 ffcd 	bl	80028e8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800194e:	f000 fff5 	bl	800293c <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8001952:	f000 fd5f 	bl	8002414 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim5);
 8001956:	48c2      	ldr	r0, [pc, #776]	; (8001c60 <main+0x358>)
 8001958:	f004 fe10 	bl	800657c <HAL_TIM_Base_Start>
  /* USER CODE END 2 */
  SSD1306_Init (); // initialize the display
 800195c:	f7fe fe1e 	bl	800059c <SSD1306_Init>
  SSD1306_GotoXY (10,10); // goto 10, 10
 8001960:	210a      	movs	r1, #10
 8001962:	200a      	movs	r0, #10
 8001964:	f7fe ff84 	bl	8000870 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_16x26, 1); // print Hello
 8001968:	2201      	movs	r2, #1
 800196a:	49be      	ldr	r1, [pc, #760]	; (8001c64 <main+0x35c>)
 800196c:	48be      	ldr	r0, [pc, #760]	; (8001c68 <main+0x360>)
 800196e:	f7ff f815 	bl	800099c <SSD1306_Puts>
  SSD1306_GotoXY (10, 38);
 8001972:	2126      	movs	r1, #38	; 0x26
 8001974:	200a      	movs	r0, #10
 8001976:	f7fe ff7b 	bl	8000870 <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD!!", &Font_7x10, 1);
 800197a:	2201      	movs	r2, #1
 800197c:	49bb      	ldr	r1, [pc, #748]	; (8001c6c <main+0x364>)
 800197e:	48bc      	ldr	r0, [pc, #752]	; (8001c70 <main+0x368>)
 8001980:	f7ff f80c 	bl	800099c <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8001984:	f7fe fece 	bl	8000724 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8001988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800198c:	f001 fc76 	bl	800327c <HAL_Delay>

  SSD1306_Clear();
 8001990:	f7ff f829 	bl	80009e6 <SSD1306_Clear>

  SSD1306_DrawBitmap(0, 0,drone_logo,128, 64, 1);
 8001994:	2301      	movs	r3, #1
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	4ab5      	ldr	r2, [pc, #724]	; (8001c74 <main+0x36c>)
 80019a0:	2100      	movs	r1, #0
 80019a2:	2000      	movs	r0, #0
 80019a4:	f7fe fd92 	bl	80004cc <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen();
 80019a8:	f7fe febc 	bl	8000724 <SSD1306_UpdateScreen>
  HAL_Delay(5000);
 80019ac:	f241 3088 	movw	r0, #5000	; 0x1388
 80019b0:	f001 fc64 	bl	800327c <HAL_Delay>
  /* Infinite loop */
  bno055_initization();
 80019b4:	f7ff fb6e 	bl	8001094 <bno055_initization>
    	HAL_Delay(1000);
 80019b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019bc:	f001 fc5e 	bl	800327c <HAL_Delay>
    	SSD1306_Clear();
 80019c0:	f7ff f811 	bl	80009e6 <SSD1306_Clear>
    	char snum_mag[10];
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  bno055_get_temp(&temp);
 80019c4:	48ac      	ldr	r0, [pc, #688]	; (8001c78 <main+0x370>)
 80019c6:	f7ff fc13 	bl	80011f0 <bno055_get_temp>
	  	  temp = temp*1;
 80019ca:	4bab      	ldr	r3, [pc, #684]	; (8001c78 <main+0x370>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4aaa      	ldr	r2, [pc, #680]	; (8001c78 <main+0x370>)
 80019d0:	6013      	str	r3, [r2, #0]
	  	  if(temp>20 && temp < 40){
 80019d2:	4ba9      	ldr	r3, [pc, #676]	; (8001c78 <main+0x370>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80019dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e4:	dd10      	ble.n	8001a08 <main+0x100>
 80019e6:	4ba4      	ldr	r3, [pc, #656]	; (8001c78 <main+0x370>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8001c7c <main+0x374>
 80019f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	d506      	bpl.n	8001a08 <main+0x100>
	  		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a00:	489f      	ldr	r0, [pc, #636]	; (8001c80 <main+0x378>)
 8001a02:	f002 fdb7 	bl	8004574 <HAL_GPIO_WritePin>
 8001a06:	e005      	b.n	8001a14 <main+0x10c>
	  	  }
	  	  else
	  		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a0e:	489c      	ldr	r0, [pc, #624]	; (8001c80 <main+0x378>)
 8001a10:	f002 fdb0 	bl	8004574 <HAL_GPIO_WritePin>
	  	  	bno055_calibrations_status(&calib[0],&calib[1],&calib[2],&calib[3]);
 8001a14:	4b9b      	ldr	r3, [pc, #620]	; (8001c84 <main+0x37c>)
 8001a16:	4a9c      	ldr	r2, [pc, #624]	; (8001c88 <main+0x380>)
 8001a18:	499c      	ldr	r1, [pc, #624]	; (8001c8c <main+0x384>)
 8001a1a:	489d      	ldr	r0, [pc, #628]	; (8001c90 <main+0x388>)
 8001a1c:	f7ff fb06 	bl	800102c <bno055_calibrations_status>
	  	  	bno055_get_elu_data(&roll, &pitch, &yaw);
 8001a20:	4a9c      	ldr	r2, [pc, #624]	; (8001c94 <main+0x38c>)
 8001a22:	499d      	ldr	r1, [pc, #628]	; (8001c98 <main+0x390>)
 8001a24:	489d      	ldr	r0, [pc, #628]	; (8001c9c <main+0x394>)
 8001a26:	f7ff fc11 	bl	800124c <bno055_get_elu_data>
	  	  	//sprintf(snum,"%f",roll);
	  	  	SSD1306_GotoXY (0, 0);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7fe ff1f 	bl	8000870 <SSD1306_GotoXY>
	  	  	SSD1306_Puts ("ROLL: ", &Font_11x18, 1);
 8001a32:	2201      	movs	r2, #1
 8001a34:	499a      	ldr	r1, [pc, #616]	; (8001ca0 <main+0x398>)
 8001a36:	489b      	ldr	r0, [pc, #620]	; (8001ca4 <main+0x39c>)
 8001a38:	f7fe ffb0 	bl	800099c <SSD1306_Puts>
	  	  	SSD1306_GotoXY (0, 20);
 8001a3c:	2114      	movs	r1, #20
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7fe ff16 	bl	8000870 <SSD1306_GotoXY>
	  	  	SSD1306_Puts ("PITCH: ", &Font_11x18, 1);
 8001a44:	2201      	movs	r2, #1
 8001a46:	4996      	ldr	r1, [pc, #600]	; (8001ca0 <main+0x398>)
 8001a48:	4897      	ldr	r0, [pc, #604]	; (8001ca8 <main+0x3a0>)
 8001a4a:	f7fe ffa7 	bl	800099c <SSD1306_Puts>
	  	  	SSD1306_GotoXY (0, 40);
 8001a4e:	2128      	movs	r1, #40	; 0x28
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7fe ff0d 	bl	8000870 <SSD1306_GotoXY>
	  	  	SSD1306_Puts ("YAW: ", &Font_11x18, 1);
 8001a56:	2201      	movs	r2, #1
 8001a58:	4991      	ldr	r1, [pc, #580]	; (8001ca0 <main+0x398>)
 8001a5a:	4894      	ldr	r0, [pc, #592]	; (8001cac <main+0x3a4>)
 8001a5c:	f7fe ff9e 	bl	800099c <SSD1306_Puts>
			itoa(roll, snum_roll, 10);
 8001a60:	4b8e      	ldr	r3, [pc, #568]	; (8001c9c <main+0x394>)
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a6e:	220a      	movs	r2, #10
 8001a70:	4619      	mov	r1, r3
 8001a72:	ee17 0a90 	vmov	r0, s15
 8001a76:	f006 fc75 	bl	8008364 <itoa>
			itoa(pitch, snum_pitch, 10);
 8001a7a:	4b87      	ldr	r3, [pc, #540]	; (8001c98 <main+0x390>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a88:	220a      	movs	r2, #10
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	ee17 0a90 	vmov	r0, s15
 8001a90:	f006 fc68 	bl	8008364 <itoa>
			itoa(yaw, snum_yaw, 10);
 8001a94:	4b7f      	ldr	r3, [pc, #508]	; (8001c94 <main+0x38c>)
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aa2:	220a      	movs	r2, #10
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	ee17 0a90 	vmov	r0, s15
 8001aaa:	f006 fc5b 	bl	8008364 <itoa>
			itoa(calib[0], snum_sys, 10);
 8001aae:	4b78      	ldr	r3, [pc, #480]	; (8001c90 <main+0x388>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab8:	220a      	movs	r2, #10
 8001aba:	4619      	mov	r1, r3
 8001abc:	f006 fc52 	bl	8008364 <itoa>
			itoa(calib[1], snum_gyro, 10);
 8001ac0:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <main+0x388>)
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	220a      	movs	r2, #10
 8001acc:	4619      	mov	r1, r3
 8001ace:	f006 fc49 	bl	8008364 <itoa>
			itoa(calib[2], snum_acc, 10);
 8001ad2:	4b6f      	ldr	r3, [pc, #444]	; (8001c90 <main+0x388>)
 8001ad4:	789b      	ldrb	r3, [r3, #2]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	220a      	movs	r2, #10
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f006 fc40 	bl	8008364 <itoa>
			itoa(calib[3], snum_mag, 10);
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <main+0x388>)
 8001ae6:	78db      	ldrb	r3, [r3, #3]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	220a      	movs	r2, #10
 8001aee:	4619      	mov	r1, r3
 8001af0:	f006 fc38 	bl	8008364 <itoa>

//			SSD1306_GotoXY (0, 0);
//			SSD1306_Puts ("             ", &Font_11x18, 1);
			SSD1306_UpdateScreen();
 8001af4:	f7fe fe16 	bl	8000724 <SSD1306_UpdateScreen>
			if(roll < 10) {
 8001af8:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <main+0x394>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	d504      	bpl.n	8001b16 <main+0x20e>
				SSD1306_GotoXY (69, 0);  // 1 DIGIT
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2045      	movs	r0, #69	; 0x45
 8001b10:	f7fe feae 	bl	8000870 <SSD1306_GotoXY>
 8001b14:	e021      	b.n	8001b5a <main+0x252>
			}
			else if (roll < 100 ) {
 8001b16:	4b61      	ldr	r3, [pc, #388]	; (8001c9c <main+0x394>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001cb0 <main+0x3a8>
 8001b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	d504      	bpl.n	8001b34 <main+0x22c>
				SSD1306_GotoXY (61, 0);  // 2 DIGITS
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	203d      	movs	r0, #61	; 0x3d
 8001b2e:	f7fe fe9f 	bl	8000870 <SSD1306_GotoXY>
 8001b32:	e012      	b.n	8001b5a <main+0x252>
			}
			else if (roll < 1000 ) {
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <main+0x394>)
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001cb4 <main+0x3ac>
 8001b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	d504      	bpl.n	8001b52 <main+0x24a>
				SSD1306_GotoXY (53, 0);  // 3 DIGITS
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2035      	movs	r0, #53	; 0x35
 8001b4c:	f7fe fe90 	bl	8000870 <SSD1306_GotoXY>
 8001b50:	e003      	b.n	8001b5a <main+0x252>
			}
			else {
				SSD1306_GotoXY (45, 0);  // 4 DIGIS
 8001b52:	2100      	movs	r1, #0
 8001b54:	202d      	movs	r0, #45	; 0x2d
 8001b56:	f7fe fe8b 	bl	8000870 <SSD1306_GotoXY>
			}

			SSD1306_Puts (snum_roll, &Font_11x18, 1);
 8001b5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b5e:	2201      	movs	r2, #1
 8001b60:	494f      	ldr	r1, [pc, #316]	; (8001ca0 <main+0x398>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe ff1a 	bl	800099c <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001b68:	f7fe fddc 	bl	8000724 <SSD1306_UpdateScreen>

			if(pitch < 10) {
 8001b6c:	4b4a      	ldr	r3, [pc, #296]	; (8001c98 <main+0x390>)
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7e:	d504      	bpl.n	8001b8a <main+0x282>
				SSD1306_GotoXY (69, 20);  // 1 DIGIT
 8001b80:	2114      	movs	r1, #20
 8001b82:	2045      	movs	r0, #69	; 0x45
 8001b84:	f7fe fe74 	bl	8000870 <SSD1306_GotoXY>
 8001b88:	e021      	b.n	8001bce <main+0x2c6>
			}
			else if (pitch < 100 ) {
 8001b8a:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <main+0x390>)
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001cb0 <main+0x3a8>
 8001b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9c:	d504      	bpl.n	8001ba8 <main+0x2a0>
				SSD1306_GotoXY (61, 20);  // 2 DIGITS
 8001b9e:	2114      	movs	r1, #20
 8001ba0:	203d      	movs	r0, #61	; 0x3d
 8001ba2:	f7fe fe65 	bl	8000870 <SSD1306_GotoXY>
 8001ba6:	e012      	b.n	8001bce <main+0x2c6>
			}
			else if (pitch < 1000 ) {
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <main+0x390>)
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001cb4 <main+0x3ac>
 8001bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	d504      	bpl.n	8001bc6 <main+0x2be>
				SSD1306_GotoXY (53, 20);  // 3 DIGITS
 8001bbc:	2114      	movs	r1, #20
 8001bbe:	2035      	movs	r0, #53	; 0x35
 8001bc0:	f7fe fe56 	bl	8000870 <SSD1306_GotoXY>
 8001bc4:	e003      	b.n	8001bce <main+0x2c6>
			}
			else {
				SSD1306_GotoXY (45, 20);  // 4 DIGIS
 8001bc6:	2114      	movs	r1, #20
 8001bc8:	202d      	movs	r0, #45	; 0x2d
 8001bca:	f7fe fe51 	bl	8000870 <SSD1306_GotoXY>
			}

			SSD1306_Puts (snum_pitch, &Font_11x18, 1);
 8001bce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4932      	ldr	r1, [pc, #200]	; (8001ca0 <main+0x398>)
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fee0 	bl	800099c <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001bdc:	f7fe fda2 	bl	8000724 <SSD1306_UpdateScreen>

			if(yaw < 10) {
 8001be0:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <main+0x38c>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf2:	d504      	bpl.n	8001bfe <main+0x2f6>
				SSD1306_GotoXY (69, 40);  // 1 DIGIT
 8001bf4:	2128      	movs	r1, #40	; 0x28
 8001bf6:	2045      	movs	r0, #69	; 0x45
 8001bf8:	f7fe fe3a 	bl	8000870 <SSD1306_GotoXY>
 8001bfc:	e021      	b.n	8001c42 <main+0x33a>
			}
			else if (yaw < 100 ) {
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <main+0x38c>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001cb0 <main+0x3a8>
 8001c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	d504      	bpl.n	8001c1c <main+0x314>
				SSD1306_GotoXY (61, 40);  // 2 DIGITS
 8001c12:	2128      	movs	r1, #40	; 0x28
 8001c14:	203d      	movs	r0, #61	; 0x3d
 8001c16:	f7fe fe2b 	bl	8000870 <SSD1306_GotoXY>
 8001c1a:	e012      	b.n	8001c42 <main+0x33a>
			}
			else if (yaw < 1000 ) {
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <main+0x38c>)
 8001c1e:	edd3 7a00 	vldr	s15, [r3]
 8001c22:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001cb4 <main+0x3ac>
 8001c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	d504      	bpl.n	8001c3a <main+0x332>
				SSD1306_GotoXY (53, 40);  // 3 DIGITS
 8001c30:	2128      	movs	r1, #40	; 0x28
 8001c32:	2035      	movs	r0, #53	; 0x35
 8001c34:	f7fe fe1c 	bl	8000870 <SSD1306_GotoXY>
 8001c38:	e003      	b.n	8001c42 <main+0x33a>
			}
			else {
				SSD1306_GotoXY (45, 40);  // 4 DIGIS
 8001c3a:	2128      	movs	r1, #40	; 0x28
 8001c3c:	202d      	movs	r0, #45	; 0x2d
 8001c3e:	f7fe fe17 	bl	8000870 <SSD1306_GotoXY>
			}

			SSD1306_Puts (snum_yaw, &Font_11x18, 1);
 8001c42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c46:	2201      	movs	r2, #1
 8001c48:	4915      	ldr	r1, [pc, #84]	; (8001ca0 <main+0x398>)
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fea6 	bl	800099c <SSD1306_Puts>
//			SSD1306_Puts (snum_acc, &Font_7x10, 1);
//
//			SSD1306_GotoXY (100, 45);
//			SSD1306_Puts (snum_mag, &Font_7x10, 1);

			SSD1306_UpdateScreen();
 8001c50:	f7fe fd68 	bl	8000724 <SSD1306_UpdateScreen>
			SSD1306_Clear();
 8001c54:	f7fe fec7 	bl	80009e6 <SSD1306_Clear>
			HAL_Delay(100);
 8001c58:	2064      	movs	r0, #100	; 0x64
 8001c5a:	f001 fb0f 	bl	800327c <HAL_Delay>
	  bno055_get_temp(&temp);
 8001c5e:	e6b1      	b.n	80019c4 <main+0xbc>
 8001c60:	2000065c 	.word	0x2000065c
 8001c64:	20000010 	.word	0x20000010
 8001c68:	08008414 	.word	0x08008414
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	0800841c 	.word	0x0800841c
 8001c74:	0800ac50 	.word	0x0800ac50
 8001c78:	2000051c 	.word	0x2000051c
 8001c7c:	42200000 	.word	0x42200000
 8001c80:	40020800 	.word	0x40020800
 8001c84:	2000051b 	.word	0x2000051b
 8001c88:	2000051a 	.word	0x2000051a
 8001c8c:	20000519 	.word	0x20000519
 8001c90:	20000518 	.word	0x20000518
 8001c94:	20000528 	.word	0x20000528
 8001c98:	20000524 	.word	0x20000524
 8001c9c:	20000520 	.word	0x20000520
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	08008424 	.word	0x08008424
 8001ca8:	0800842c 	.word	0x0800842c
 8001cac:	08008434 	.word	0x08008434
 8001cb0:	42c80000 	.word	0x42c80000
 8001cb4:	447a0000 	.word	0x447a0000

08001cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b094      	sub	sp, #80	; 0x50
 8001cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cbe:	f107 0320 	add.w	r3, r7, #32
 8001cc2:	2230      	movs	r2, #48	; 0x30
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f006 fb4e 	bl	8008368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <SystemClock_Config+0xcc>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <SystemClock_Config+0xcc>)
 8001ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cea:	6413      	str	r3, [r2, #64]	; 0x40
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <SystemClock_Config+0xcc>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <SystemClock_Config+0xd0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <SystemClock_Config+0xd0>)
 8001d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <SystemClock_Config+0xd0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d14:	2302      	movs	r3, #2
 8001d16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d20:	2302      	movs	r3, #2
 8001d22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d24:	2300      	movs	r3, #0
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d2c:	23a8      	movs	r3, #168	; 0xa8
 8001d2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d30:	2302      	movs	r3, #2
 8001d32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d34:	2304      	movs	r3, #4
 8001d36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d38:	f107 0320 	add.w	r3, r7, #32
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 febb 	bl	8005ab8 <HAL_RCC_OscConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d48:	f000 f82f 	bl	8001daa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d50:	2302      	movs	r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	2105      	movs	r1, #5
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f004 f91c 	bl	8005fa8 <HAL_RCC_ClockConfig>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d76:	f000 f818 	bl	8001daa <Error_Handler>
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3750      	adds	r7, #80	; 0x50
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40007000 	.word	0x40007000

08001d8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9c:	d101      	bne.n	8001da2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d9e:	f001 fa4d 	bl	800323c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dae:	b672      	cpsid	i
}
 8001db0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <Error_Handler+0x8>

08001db4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dba:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <MX_SPI1_Init+0x68>)
 8001dbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001de0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001de4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001e00:	220a      	movs	r2, #10
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001e06:	f004 fae1 	bl	80063cc <HAL_SPI_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e10:	f7ff ffcb 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2000052c 	.word	0x2000052c
 8001e1c:	40013000 	.word	0x40013000

08001e20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_SPI_MspInit+0x84>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d12b      	bne.n	8001e9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_SPI_MspInit+0x88>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <HAL_SPI_MspInit+0x88>)
 8001e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e50:	6453      	str	r3, [r2, #68]	; 0x44
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_SPI_MspInit+0x88>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_SPI_MspInit+0x88>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_SPI_MspInit+0x88>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_SPI_MspInit+0x88>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADNS_SPI_CSn_Pin|MCU_SPI_SCK_Pin|MCU_SPI_MISO_Pin|MCU_SPI_MOSI_Pin;
 8001e7a:	23f0      	movs	r3, #240	; 0xf0
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	4805      	ldr	r0, [pc, #20]	; (8001eac <HAL_SPI_MspInit+0x8c>)
 8001e96:	f002 f9d1 	bl	800423c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3728      	adds	r7, #40	; 0x28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40013000 	.word	0x40013000
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000

08001eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_MspInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <HAL_MspInit+0x4c>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <HAL_MspInit+0x4c>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_MspInit+0x4c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a08      	ldr	r2, [pc, #32]	; (8001efc <HAL_MspInit+0x4c>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_MspInit+0x4c>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800

08001f00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08e      	sub	sp, #56	; 0x38
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <HAL_InitTick+0xe8>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	4a33      	ldr	r2, [pc, #204]	; (8001fe8 <HAL_InitTick+0xe8>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_InitTick+0xe8>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f2c:	f107 0210 	add.w	r2, r7, #16
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fa16 	bl	8006368 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f46:	f004 f9e7 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8001f4a:	6378      	str	r0, [r7, #52]	; 0x34
 8001f4c:	e004      	b.n	8001f58 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f4e:	f004 f9e3 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8001f52:	4603      	mov	r3, r0
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	4a24      	ldr	r2, [pc, #144]	; (8001fec <HAL_InitTick+0xec>)
 8001f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f60:	0c9b      	lsrs	r3, r3, #18
 8001f62:	3b01      	subs	r3, #1
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001f66:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <HAL_InitTick+0xf0>)
 8001f68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_InitTick+0xf0>)
 8001f70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f74:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001f76:	4a1e      	ldr	r2, [pc, #120]	; (8001ff0 <HAL_InitTick+0xf0>)
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <HAL_InitTick+0xf0>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_InitTick+0xf0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_InitTick+0xf0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001f8e:	4818      	ldr	r0, [pc, #96]	; (8001ff0 <HAL_InitTick+0xf0>)
 8001f90:	f004 faa5 	bl	80064de <HAL_TIM_Base_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d11b      	bne.n	8001fda <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001fa2:	4813      	ldr	r0, [pc, #76]	; (8001ff0 <HAL_InitTick+0xf0>)
 8001fa4:	f004 fb52 	bl	800664c <HAL_TIM_Base_Start_IT>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001fae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d111      	bne.n	8001fda <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fb6:	201c      	movs	r0, #28
 8001fb8:	f001 fdb6 	bl	8003b28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	d808      	bhi.n	8001fd4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	201c      	movs	r0, #28
 8001fc8:	f001 fd92 	bl	8003af0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fcc:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <HAL_InitTick+0xf4>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e002      	b.n	8001fda <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3738      	adds	r7, #56	; 0x38
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	431bde83 	.word	0x431bde83
 8001ff0:	20000584 	.word	0x20000584
 8001ff4:	2000001c 	.word	0x2000001c

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <NMI_Handler+0x4>

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <DMA1_Stream0_IRQHandler+0x10>)
 8002056:	f001 feb5 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000944 	.word	0x20000944

08002064 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <DMA1_Stream1_IRQHandler+0x10>)
 800206a:	f001 feab 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000b84 	.word	0x20000b84

08002078 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <DMA1_Stream2_IRQHandler+0x10>)
 800207e:	f001 fea1 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000884 	.word	0x20000884

0800208c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <DMA1_Stream3_IRQHandler+0x10>)
 8002092:	f001 fe97 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000be4 	.word	0x20000be4

080020a0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <DMA1_Stream4_IRQHandler+0x10>)
 80020a6:	f001 fe8d 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200008e4 	.word	0x200008e4

080020b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <DMA1_Stream5_IRQHandler+0x10>)
 80020ba:	f001 fe83 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000ac4 	.word	0x20000ac4

080020c8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <DMA1_Stream6_IRQHandler+0x10>)
 80020ce:	f001 fe79 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000b24 	.word	0x20000b24

080020dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <TIM2_IRQHandler+0x10>)
 80020e2:	f004 fb7c 	bl	80067de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000584 	.word	0x20000584

080020f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <USART1_IRQHandler+0x10>)
 80020f6:	f005 fa47 	bl	8007588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000774 	.word	0x20000774

08002104 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <USART2_IRQHandler+0x10>)
 800210a:	f005 fa3d 	bl	8007588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200007b8 	.word	0x200007b8

08002118 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <USART3_IRQHandler+0x10>)
 800211e:	f005 fa33 	bl	8007588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200007fc 	.word	0x200007fc

0800212c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <DMA1_Stream7_IRQHandler+0x10>)
 8002132:	f001 fe47 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200009a4 	.word	0x200009a4

08002140 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <UART4_IRQHandler+0x10>)
 8002146:	f005 fa1f 	bl	8007588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200006ec 	.word	0x200006ec

08002154 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <UART5_IRQHandler+0x10>)
 800215a:	f005 fa15 	bl	8007588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000730 	.word	0x20000730

08002168 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <DMA2_Stream1_IRQHandler+0x10>)
 800216e:	f001 fe29 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000c44 	.word	0x20000c44

0800217c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <DMA2_Stream2_IRQHandler+0x10>)
 8002182:	f001 fe1f 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000a04 	.word	0x20000a04

08002190 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <DMA2_Stream6_IRQHandler+0x10>)
 8002196:	f001 fe15 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000ca4 	.word	0x20000ca4

080021a4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <DMA2_Stream7_IRQHandler+0x10>)
 80021aa:	f001 fe0b 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000a64 	.word	0x20000a64

080021b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <USART6_IRQHandler+0x10>)
 80021be:	f005 f9e3 	bl	8007588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000840 	.word	0x20000840

080021cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b096      	sub	sp, #88	; 0x58
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002204:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]
 800221e:	615a      	str	r2, [r3, #20]
 8002220:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	2220      	movs	r2, #32
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f006 f89d 	bl	8008368 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800222e:	4b50      	ldr	r3, [pc, #320]	; (8002370 <MX_TIM1_Init+0x180>)
 8002230:	4a50      	ldr	r2, [pc, #320]	; (8002374 <MX_TIM1_Init+0x184>)
 8002232:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002234:	4b4e      	ldr	r3, [pc, #312]	; (8002370 <MX_TIM1_Init+0x180>)
 8002236:	2200      	movs	r2, #0
 8002238:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	4b4d      	ldr	r3, [pc, #308]	; (8002370 <MX_TIM1_Init+0x180>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8002240:	4b4b      	ldr	r3, [pc, #300]	; (8002370 <MX_TIM1_Init+0x180>)
 8002242:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002246:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002248:	4b49      	ldr	r3, [pc, #292]	; (8002370 <MX_TIM1_Init+0x180>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800224e:	4b48      	ldr	r3, [pc, #288]	; (8002370 <MX_TIM1_Init+0x180>)
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002254:	4b46      	ldr	r3, [pc, #280]	; (8002370 <MX_TIM1_Init+0x180>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800225a:	4845      	ldr	r0, [pc, #276]	; (8002370 <MX_TIM1_Init+0x180>)
 800225c:	f004 f93f 	bl	80064de <HAL_TIM_Base_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002266:	f7ff fda0 	bl	8001daa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002270:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002274:	4619      	mov	r1, r3
 8002276:	483e      	ldr	r0, [pc, #248]	; (8002370 <MX_TIM1_Init+0x180>)
 8002278:	f004 fc7c 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002282:	f7ff fd92 	bl	8001daa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002286:	483a      	ldr	r0, [pc, #232]	; (8002370 <MX_TIM1_Init+0x180>)
 8002288:	f004 fa50 	bl	800672c <HAL_TIM_PWM_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002292:	f7ff fd8a 	bl	8001daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800229e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022a2:	4619      	mov	r1, r3
 80022a4:	4832      	ldr	r0, [pc, #200]	; (8002370 <MX_TIM1_Init+0x180>)
 80022a6:	f005 f83f 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80022b0:	f7ff fd7b 	bl	8001daa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022b4:	2360      	movs	r3, #96	; 0x60
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022bc:	2300      	movs	r3, #0
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022c0:	2300      	movs	r3, #0
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022c8:	2300      	movs	r3, #0
 80022ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022cc:	2300      	movs	r3, #0
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d4:	2200      	movs	r2, #0
 80022d6:	4619      	mov	r1, r3
 80022d8:	4825      	ldr	r0, [pc, #148]	; (8002370 <MX_TIM1_Init+0x180>)
 80022da:	f004 fb89 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80022e4:	f7ff fd61 	bl	8001daa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ec:	2204      	movs	r2, #4
 80022ee:	4619      	mov	r1, r3
 80022f0:	481f      	ldr	r0, [pc, #124]	; (8002370 <MX_TIM1_Init+0x180>)
 80022f2:	f004 fb7d 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80022fc:	f7ff fd55 	bl	8001daa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002304:	2208      	movs	r2, #8
 8002306:	4619      	mov	r1, r3
 8002308:	4819      	ldr	r0, [pc, #100]	; (8002370 <MX_TIM1_Init+0x180>)
 800230a:	f004 fb71 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002314:	f7ff fd49 	bl	8001daa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231c:	220c      	movs	r2, #12
 800231e:	4619      	mov	r1, r3
 8002320:	4813      	ldr	r0, [pc, #76]	; (8002370 <MX_TIM1_Init+0x180>)
 8002322:	f004 fb65 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800232c:	f7ff fd3d 	bl	8001daa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002348:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	4619      	mov	r1, r3
 8002352:	4807      	ldr	r0, [pc, #28]	; (8002370 <MX_TIM1_Init+0x180>)
 8002354:	f005 f864 	bl	8007420 <HAL_TIMEx_ConfigBreakDeadTime>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800235e:	f7ff fd24 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002362:	4803      	ldr	r0, [pc, #12]	; (8002370 <MX_TIM1_Init+0x180>)
 8002364:	f000 f9b4 	bl	80026d0 <HAL_TIM_MspPostInit>

}
 8002368:	bf00      	nop
 800236a:	3758      	adds	r7, #88	; 0x58
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200005cc 	.word	0x200005cc
 8002374:	40010000 	.word	0x40010000

08002378 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237e:	f107 0308 	add.w	r3, r7, #8
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238c:	463b      	mov	r3, r7
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <MX_TIM3_Init+0x94>)
 8002396:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <MX_TIM3_Init+0x98>)
 8002398:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <MX_TIM3_Init+0x94>)
 800239c:	2200      	movs	r2, #0
 800239e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <MX_TIM3_Init+0x94>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <MX_TIM3_Init+0x94>)
 80023a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ae:	4b17      	ldr	r3, [pc, #92]	; (800240c <MX_TIM3_Init+0x94>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <MX_TIM3_Init+0x94>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023ba:	4814      	ldr	r0, [pc, #80]	; (800240c <MX_TIM3_Init+0x94>)
 80023bc:	f004 f88f 	bl	80064de <HAL_TIM_Base_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80023c6:	f7ff fcf0 	bl	8001daa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	4619      	mov	r1, r3
 80023d6:	480d      	ldr	r0, [pc, #52]	; (800240c <MX_TIM3_Init+0x94>)
 80023d8:	f004 fbcc 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80023e2:	f7ff fce2 	bl	8001daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023ee:	463b      	mov	r3, r7
 80023f0:	4619      	mov	r1, r3
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <MX_TIM3_Init+0x94>)
 80023f4:	f004 ff98 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80023fe:	f7ff fcd4 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000614 	.word	0x20000614
 8002410:	40000400 	.word	0x40000400

08002414 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800241a:	f107 0308 	add.w	r3, r7, #8
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002428:	463b      	mov	r3, r7
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <MX_TIM5_Init+0x94>)
 8002432:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <MX_TIM5_Init+0x98>)
 8002434:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8002436:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <MX_TIM5_Init+0x94>)
 8002438:	2253      	movs	r2, #83	; 0x53
 800243a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <MX_TIM5_Init+0x94>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff -1;
 8002442:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <MX_TIM5_Init+0x94>)
 8002444:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002448:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <MX_TIM5_Init+0x94>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <MX_TIM5_Init+0x94>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002456:	4814      	ldr	r0, [pc, #80]	; (80024a8 <MX_TIM5_Init+0x94>)
 8002458:	f004 f841 	bl	80064de <HAL_TIM_Base_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002462:	f7ff fca2 	bl	8001daa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800246c:	f107 0308 	add.w	r3, r7, #8
 8002470:	4619      	mov	r1, r3
 8002472:	480d      	ldr	r0, [pc, #52]	; (80024a8 <MX_TIM5_Init+0x94>)
 8002474:	f004 fb7e 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800247e:	f7ff fc94 	bl	8001daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800248a:	463b      	mov	r3, r7
 800248c:	4619      	mov	r1, r3
 800248e:	4806      	ldr	r0, [pc, #24]	; (80024a8 <MX_TIM5_Init+0x94>)
 8002490:	f004 ff4a 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800249a:	f7ff fc86 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000065c 	.word	0x2000065c
 80024ac:	40000c00 	.word	0x40000c00

080024b0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b096      	sub	sp, #88	; 0x58
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	611a      	str	r2, [r3, #16]
 80024de:	615a      	str	r2, [r3, #20]
 80024e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2220      	movs	r2, #32
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f005 ff3d 	bl	8008368 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80024ee:	4b44      	ldr	r3, [pc, #272]	; (8002600 <MX_TIM8_Init+0x150>)
 80024f0:	4a44      	ldr	r2, [pc, #272]	; (8002604 <MX_TIM8_Init+0x154>)
 80024f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80024f4:	4b42      	ldr	r3, [pc, #264]	; (8002600 <MX_TIM8_Init+0x150>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fa:	4b41      	ldr	r3, [pc, #260]	; (8002600 <MX_TIM8_Init+0x150>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002500:	4b3f      	ldr	r3, [pc, #252]	; (8002600 <MX_TIM8_Init+0x150>)
 8002502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002506:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002508:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <MX_TIM8_Init+0x150>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800250e:	4b3c      	ldr	r3, [pc, #240]	; (8002600 <MX_TIM8_Init+0x150>)
 8002510:	2200      	movs	r2, #0
 8002512:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002514:	4b3a      	ldr	r3, [pc, #232]	; (8002600 <MX_TIM8_Init+0x150>)
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800251a:	4839      	ldr	r0, [pc, #228]	; (8002600 <MX_TIM8_Init+0x150>)
 800251c:	f003 ffdf 	bl	80064de <HAL_TIM_Base_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002526:	f7ff fc40 	bl	8001daa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800252e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002530:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002534:	4619      	mov	r1, r3
 8002536:	4832      	ldr	r0, [pc, #200]	; (8002600 <MX_TIM8_Init+0x150>)
 8002538:	f004 fb1c 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002542:	f7ff fc32 	bl	8001daa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002546:	482e      	ldr	r0, [pc, #184]	; (8002600 <MX_TIM8_Init+0x150>)
 8002548:	f004 f8f0 	bl	800672c <HAL_TIM_PWM_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002552:	f7ff fc2a 	bl	8001daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255a:	2300      	movs	r3, #0
 800255c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800255e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002562:	4619      	mov	r1, r3
 8002564:	4826      	ldr	r0, [pc, #152]	; (8002600 <MX_TIM8_Init+0x150>)
 8002566:	f004 fedf 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002570:	f7ff fc1b 	bl	8001daa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002574:	2360      	movs	r3, #96	; 0x60
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800257c:	2300      	movs	r3, #0
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002580:	2300      	movs	r3, #0
 8002582:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002588:	2300      	movs	r3, #0
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002594:	2208      	movs	r2, #8
 8002596:	4619      	mov	r1, r3
 8002598:	4819      	ldr	r0, [pc, #100]	; (8002600 <MX_TIM8_Init+0x150>)
 800259a:	f004 fa29 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80025a4:	f7ff fc01 	bl	8001daa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ac:	220c      	movs	r2, #12
 80025ae:	4619      	mov	r1, r3
 80025b0:	4813      	ldr	r0, [pc, #76]	; (8002600 <MX_TIM8_Init+0x150>)
 80025b2:	f004 fa1d 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80025bc:	f7ff fbf5 	bl	8001daa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	4807      	ldr	r0, [pc, #28]	; (8002600 <MX_TIM8_Init+0x150>)
 80025e4:	f004 ff1c 	bl	8007420 <HAL_TIMEx_ConfigBreakDeadTime>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80025ee:	f7ff fbdc 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80025f2:	4803      	ldr	r0, [pc, #12]	; (8002600 <MX_TIM8_Init+0x150>)
 80025f4:	f000 f86c 	bl	80026d0 <HAL_TIM_MspPostInit>

}
 80025f8:	bf00      	nop
 80025fa:	3758      	adds	r7, #88	; 0x58
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200006a4 	.word	0x200006a4
 8002604:	40010400 	.word	0x40010400

08002608 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a29      	ldr	r2, [pc, #164]	; (80026bc <HAL_TIM_Base_MspInit+0xb4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10e      	bne.n	8002638 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6453      	str	r3, [r2, #68]	; 0x44
 800262a:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <HAL_TIM_Base_MspInit+0xb8>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002636:	e03a      	b.n	80026ae <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <HAL_TIM_Base_MspInit+0xbc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <HAL_TIM_Base_MspInit+0xb8>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	6413      	str	r3, [r2, #64]	; 0x40
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]
}
 800265e:	e026      	b.n	80026ae <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a18      	ldr	r2, [pc, #96]	; (80026c8 <HAL_TIM_Base_MspInit+0xc0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10e      	bne.n	8002688 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002674:	f043 0308 	orr.w	r3, r3, #8
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_TIM_Base_MspInit+0xb8>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
}
 8002686:	e012      	b.n	80026ae <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <HAL_TIM_Base_MspInit+0xc4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10d      	bne.n	80026ae <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <HAL_TIM_Base_MspInit+0xb8>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	6453      	str	r3, [r2, #68]	; 0x44
 80026a2:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <HAL_TIM_Base_MspInit+0xb8>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
}
 80026ae:	bf00      	nop
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40010000 	.word	0x40010000
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000c00 	.word	0x40000c00
 80026cc:	40010400 	.word	0x40010400

080026d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a25      	ldr	r2, [pc, #148]	; (8002784 <HAL_TIM_MspPostInit+0xb4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d11f      	bne.n	8002732 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	4b24      	ldr	r3, [pc, #144]	; (8002788 <HAL_TIM_MspPostInit+0xb8>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a23      	ldr	r2, [pc, #140]	; (8002788 <HAL_TIM_MspPostInit+0xb8>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_TIM_MspPostInit+0xb8>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MTR1_PWM_MCU_Pin|MTR2_PWM_MCU_Pin|MTR3_PWM_MCU_Pin|MTR4_PWM_MCU_Pin;
 800270e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002720:	2301      	movs	r3, #1
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	4619      	mov	r1, r3
 800272a:	4818      	ldr	r0, [pc, #96]	; (800278c <HAL_TIM_MspPostInit+0xbc>)
 800272c:	f001 fd86 	bl	800423c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002730:	e023      	b.n	800277a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a16      	ldr	r2, [pc, #88]	; (8002790 <HAL_TIM_MspPostInit+0xc0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d11e      	bne.n	800277a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_TIM_MspPostInit+0xb8>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	4a10      	ldr	r2, [pc, #64]	; (8002788 <HAL_TIM_MspPostInit+0xb8>)
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6313      	str	r3, [r2, #48]	; 0x30
 800274c:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <HAL_TIM_MspPostInit+0xb8>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_PWM_TIM8_CH3_Pin|LED_5050_PWM_IN_Pin;
 8002758:	f44f 7340 	mov.w	r3, #768	; 0x300
 800275c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800276a:	2303      	movs	r3, #3
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800276e:	f107 0314 	add.w	r3, r7, #20
 8002772:	4619      	mov	r1, r3
 8002774:	4807      	ldr	r0, [pc, #28]	; (8002794 <HAL_TIM_MspPostInit+0xc4>)
 8002776:	f001 fd61 	bl	800423c <HAL_GPIO_Init>
}
 800277a:	bf00      	nop
 800277c:	3728      	adds	r7, #40	; 0x28
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40010000 	.word	0x40010000
 8002788:	40023800 	.word	0x40023800
 800278c:	40020000 	.word	0x40020000
 8002790:	40010400 	.word	0x40010400
 8002794:	40020800 	.word	0x40020800

08002798 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <MX_UART4_Init+0x4c>)
 800279e:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <MX_UART4_Init+0x50>)
 80027a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <MX_UART4_Init+0x4c>)
 80027a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <MX_UART4_Init+0x4c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <MX_UART4_Init+0x4c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <MX_UART4_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <MX_UART4_Init+0x4c>)
 80027be:	220c      	movs	r2, #12
 80027c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c2:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <MX_UART4_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <MX_UART4_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80027ce:	4805      	ldr	r0, [pc, #20]	; (80027e4 <MX_UART4_Init+0x4c>)
 80027d0:	f004 fe8c 	bl	80074ec <HAL_UART_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80027da:	f7ff fae6 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200006ec 	.word	0x200006ec
 80027e8:	40004c00 	.word	0x40004c00

080027ec <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <MX_UART5_Init+0x4c>)
 80027f2:	4a12      	ldr	r2, [pc, #72]	; (800283c <MX_UART5_Init+0x50>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <MX_UART5_Init+0x4c>)
 80027f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <MX_UART5_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <MX_UART5_Init+0x4c>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <MX_UART5_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <MX_UART5_Init+0x4c>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <MX_UART5_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <MX_UART5_Init+0x4c>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002822:	4805      	ldr	r0, [pc, #20]	; (8002838 <MX_UART5_Init+0x4c>)
 8002824:	f004 fe62 	bl	80074ec <HAL_UART_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800282e:	f7ff fabc 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000730 	.word	0x20000730
 800283c:	40005000 	.word	0x40005000

08002840 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_USART1_UART_Init+0x4c>)
 8002846:	4a12      	ldr	r2, [pc, #72]	; (8002890 <MX_USART1_UART_Init+0x50>)
 8002848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <MX_USART1_UART_Init+0x4c>)
 800284c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <MX_USART1_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <MX_USART1_UART_Init+0x4c>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <MX_USART1_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <MX_USART1_UART_Init+0x4c>)
 8002866:	220c      	movs	r2, #12
 8002868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <MX_USART1_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <MX_USART1_UART_Init+0x4c>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002876:	4805      	ldr	r0, [pc, #20]	; (800288c <MX_USART1_UART_Init+0x4c>)
 8002878:	f004 fe38 	bl	80074ec <HAL_UART_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002882:	f7ff fa92 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000774 	.word	0x20000774
 8002890:	40011000 	.word	0x40011000

08002894 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <MX_USART2_UART_Init+0x4c>)
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <MX_USART2_UART_Init+0x50>)
 800289c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <MX_USART2_UART_Init+0x4c>)
 80028a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028a6:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <MX_USART2_UART_Init+0x4c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <MX_USART2_UART_Init+0x4c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <MX_USART2_UART_Init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <MX_USART2_UART_Init+0x4c>)
 80028ba:	220c      	movs	r2, #12
 80028bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <MX_USART2_UART_Init+0x4c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <MX_USART2_UART_Init+0x4c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <MX_USART2_UART_Init+0x4c>)
 80028cc:	f004 fe0e 	bl	80074ec <HAL_UART_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028d6:	f7ff fa68 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	200007b8 	.word	0x200007b8
 80028e4:	40004400 	.word	0x40004400

080028e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <MX_USART3_UART_Init+0x4c>)
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <MX_USART3_UART_Init+0x50>)
 80028f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <MX_USART3_UART_Init+0x4c>)
 80028f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <MX_USART3_UART_Init+0x4c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <MX_USART3_UART_Init+0x4c>)
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <MX_USART3_UART_Init+0x4c>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <MX_USART3_UART_Init+0x4c>)
 800290e:	220c      	movs	r2, #12
 8002910:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <MX_USART3_UART_Init+0x4c>)
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <MX_USART3_UART_Init+0x4c>)
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800291e:	4805      	ldr	r0, [pc, #20]	; (8002934 <MX_USART3_UART_Init+0x4c>)
 8002920:	f004 fde4 	bl	80074ec <HAL_UART_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800292a:	f7ff fa3e 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200007fc 	.word	0x200007fc
 8002938:	40004800 	.word	0x40004800

0800293c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <MX_USART6_UART_Init+0x4c>)
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <MX_USART6_UART_Init+0x50>)
 8002944:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <MX_USART6_UART_Init+0x4c>)
 8002948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800294c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <MX_USART6_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <MX_USART6_UART_Init+0x4c>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <MX_USART6_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <MX_USART6_UART_Init+0x4c>)
 8002962:	220c      	movs	r2, #12
 8002964:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <MX_USART6_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <MX_USART6_UART_Init+0x4c>)
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002972:	4805      	ldr	r0, [pc, #20]	; (8002988 <MX_USART6_UART_Init+0x4c>)
 8002974:	f004 fdba 	bl	80074ec <HAL_UART_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800297e:	f7ff fa14 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000840 	.word	0x20000840
 800298c:	40011400 	.word	0x40011400

08002990 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b094      	sub	sp, #80	; 0x50
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a4a      	ldr	r2, [pc, #296]	; (8002ad8 <HAL_UART_MspInit+0x148>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	f040 80a0 	bne.w	8002af4 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029b4:	2300      	movs	r3, #0
 80029b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80029b8:	4b48      	ldr	r3, [pc, #288]	; (8002adc <HAL_UART_MspInit+0x14c>)
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	4a47      	ldr	r2, [pc, #284]	; (8002adc <HAL_UART_MspInit+0x14c>)
 80029be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029c2:	6413      	str	r3, [r2, #64]	; 0x40
 80029c4:	4b45      	ldr	r3, [pc, #276]	; (8002adc <HAL_UART_MspInit+0x14c>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d0:	2300      	movs	r3, #0
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
 80029d4:	4b41      	ldr	r3, [pc, #260]	; (8002adc <HAL_UART_MspInit+0x14c>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	4a40      	ldr	r2, [pc, #256]	; (8002adc <HAL_UART_MspInit+0x14c>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6313      	str	r3, [r2, #48]	; 0x30
 80029e0:	4b3e      	ldr	r3, [pc, #248]	; (8002adc <HAL_UART_MspInit+0x14c>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	637b      	str	r3, [r7, #52]	; 0x34
 80029ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MCU_ESP32_TX_Pin|MCU_ESP32_RX_Pin;
 80029ec:	2303      	movs	r3, #3
 80029ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029fc:	2308      	movs	r3, #8
 80029fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a04:	4619      	mov	r1, r3
 8002a06:	4836      	ldr	r0, [pc, #216]	; (8002ae0 <HAL_UART_MspInit+0x150>)
 8002a08:	f001 fc18 	bl	800423c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002a0c:	4b35      	ldr	r3, [pc, #212]	; (8002ae4 <HAL_UART_MspInit+0x154>)
 8002a0e:	4a36      	ldr	r2, [pc, #216]	; (8002ae8 <HAL_UART_MspInit+0x158>)
 8002a10:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002a12:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <HAL_UART_MspInit+0x154>)
 8002a14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a18:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a1a:	4b32      	ldr	r3, [pc, #200]	; (8002ae4 <HAL_UART_MspInit+0x154>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a20:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <HAL_UART_MspInit+0x154>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a26:	4b2f      	ldr	r3, [pc, #188]	; (8002ae4 <HAL_UART_MspInit+0x154>)
 8002a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a2c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ae4 <HAL_UART_MspInit+0x154>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a34:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <HAL_UART_MspInit+0x154>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <HAL_UART_MspInit+0x154>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a40:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <HAL_UART_MspInit+0x154>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_UART_MspInit+0x154>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002a4c:	4825      	ldr	r0, [pc, #148]	; (8002ae4 <HAL_UART_MspInit+0x154>)
 8002a4e:	f001 f879 	bl	8003b44 <HAL_DMA_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002a58:	f7ff f9a7 	bl	8001daa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a21      	ldr	r2, [pc, #132]	; (8002ae4 <HAL_UART_MspInit+0x154>)
 8002a60:	639a      	str	r2, [r3, #56]	; 0x38
 8002a62:	4a20      	ldr	r2, [pc, #128]	; (8002ae4 <HAL_UART_MspInit+0x154>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_UART_MspInit+0x15c>)
 8002a6a:	4a21      	ldr	r2, [pc, #132]	; (8002af0 <HAL_UART_MspInit+0x160>)
 8002a6c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002a6e:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <HAL_UART_MspInit+0x15c>)
 8002a70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a74:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_UART_MspInit+0x15c>)
 8002a78:	2240      	movs	r2, #64	; 0x40
 8002a7a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_UART_MspInit+0x15c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a82:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <HAL_UART_MspInit+0x15c>)
 8002a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a88:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_UART_MspInit+0x15c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <HAL_UART_MspInit+0x15c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_UART_MspInit+0x15c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a9c:	4b13      	ldr	r3, [pc, #76]	; (8002aec <HAL_UART_MspInit+0x15c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_UART_MspInit+0x15c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002aa8:	4810      	ldr	r0, [pc, #64]	; (8002aec <HAL_UART_MspInit+0x15c>)
 8002aaa:	f001 f84b 	bl	8003b44 <HAL_DMA_Init>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002ab4:	f7ff f979 	bl	8001daa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <HAL_UART_MspInit+0x15c>)
 8002abc:	635a      	str	r2, [r3, #52]	; 0x34
 8002abe:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <HAL_UART_MspInit+0x15c>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	2034      	movs	r0, #52	; 0x34
 8002aca:	f001 f811 	bl	8003af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002ace:	2034      	movs	r0, #52	; 0x34
 8002ad0:	f001 f82a 	bl	8003b28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002ad4:	e34a      	b.n	800316c <HAL_UART_MspInit+0x7dc>
 8002ad6:	bf00      	nop
 8002ad8:	40004c00 	.word	0x40004c00
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	20000884 	.word	0x20000884
 8002ae8:	40026040 	.word	0x40026040
 8002aec:	200008e4 	.word	0x200008e4
 8002af0:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a59      	ldr	r2, [pc, #356]	; (8002c60 <HAL_UART_MspInit+0x2d0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	f040 80c0 	bne.w	8002c80 <HAL_UART_MspInit+0x2f0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b00:	2300      	movs	r3, #0
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
 8002b04:	4b57      	ldr	r3, [pc, #348]	; (8002c64 <HAL_UART_MspInit+0x2d4>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	4a56      	ldr	r2, [pc, #344]	; (8002c64 <HAL_UART_MspInit+0x2d4>)
 8002b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b10:	4b54      	ldr	r3, [pc, #336]	; (8002c64 <HAL_UART_MspInit+0x2d4>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b20:	4b50      	ldr	r3, [pc, #320]	; (8002c64 <HAL_UART_MspInit+0x2d4>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4a4f      	ldr	r2, [pc, #316]	; (8002c64 <HAL_UART_MspInit+0x2d4>)
 8002b26:	f043 0304 	orr.w	r3, r3, #4
 8002b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2c:	4b4d      	ldr	r3, [pc, #308]	; (8002c64 <HAL_UART_MspInit+0x2d4>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3c:	4b49      	ldr	r3, [pc, #292]	; (8002c64 <HAL_UART_MspInit+0x2d4>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	4a48      	ldr	r2, [pc, #288]	; (8002c64 <HAL_UART_MspInit+0x2d4>)
 8002b42:	f043 0308 	orr.w	r3, r3, #8
 8002b46:	6313      	str	r3, [r2, #48]	; 0x30
 8002b48:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <HAL_UART_MspInit+0x2d4>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = MCU_UART5_TX_Pin;
 8002b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b58:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b62:	2303      	movs	r3, #3
 8002b64:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b66:	2308      	movs	r3, #8
 8002b68:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8002b6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b6e:	4619      	mov	r1, r3
 8002b70:	483d      	ldr	r0, [pc, #244]	; (8002c68 <HAL_UART_MspInit+0x2d8>)
 8002b72:	f001 fb63 	bl	800423c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MCU_UART5_RX_Pin;
 8002b76:	2304      	movs	r3, #4
 8002b78:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b82:	2303      	movs	r3, #3
 8002b84:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b86:	2308      	movs	r3, #8
 8002b88:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8002b8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4836      	ldr	r0, [pc, #216]	; (8002c6c <HAL_UART_MspInit+0x2dc>)
 8002b92:	f001 fb53 	bl	800423c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002b96:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <HAL_UART_MspInit+0x2e0>)
 8002b98:	4a36      	ldr	r2, [pc, #216]	; (8002c74 <HAL_UART_MspInit+0x2e4>)
 8002b9a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002b9c:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_UART_MspInit+0x2e0>)
 8002b9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ba2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ba4:	4b32      	ldr	r3, [pc, #200]	; (8002c70 <HAL_UART_MspInit+0x2e0>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_UART_MspInit+0x2e0>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bb0:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <HAL_UART_MspInit+0x2e0>)
 8002bb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bb6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <HAL_UART_MspInit+0x2e0>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <HAL_UART_MspInit+0x2e0>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <HAL_UART_MspInit+0x2e0>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bca:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <HAL_UART_MspInit+0x2e0>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bd0:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <HAL_UART_MspInit+0x2e0>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002bd6:	4826      	ldr	r0, [pc, #152]	; (8002c70 <HAL_UART_MspInit+0x2e0>)
 8002bd8:	f000 ffb4 	bl	8003b44 <HAL_DMA_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8002be2:	f7ff f8e2 	bl	8001daa <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <HAL_UART_MspInit+0x2e0>)
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38
 8002bec:	4a20      	ldr	r2, [pc, #128]	; (8002c70 <HAL_UART_MspInit+0x2e0>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8002bf2:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <HAL_UART_MspInit+0x2e8>)
 8002bf4:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <HAL_UART_MspInit+0x2ec>)
 8002bf6:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <HAL_UART_MspInit+0x2e8>)
 8002bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bfe:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_UART_MspInit+0x2e8>)
 8002c02:	2240      	movs	r2, #64	; 0x40
 8002c04:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <HAL_UART_MspInit+0x2e8>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_UART_MspInit+0x2e8>)
 8002c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c12:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c14:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <HAL_UART_MspInit+0x2e8>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <HAL_UART_MspInit+0x2e8>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <HAL_UART_MspInit+0x2e8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <HAL_UART_MspInit+0x2e8>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_UART_MspInit+0x2e8>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002c32:	4811      	ldr	r0, [pc, #68]	; (8002c78 <HAL_UART_MspInit+0x2e8>)
 8002c34:	f000 ff86 	bl	8003b44 <HAL_DMA_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8002c3e:	f7ff f8b4 	bl	8001daa <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <HAL_UART_MspInit+0x2e8>)
 8002c46:	635a      	str	r2, [r3, #52]	; 0x34
 8002c48:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <HAL_UART_MspInit+0x2e8>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2100      	movs	r1, #0
 8002c52:	2035      	movs	r0, #53	; 0x35
 8002c54:	f000 ff4c 	bl	8003af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002c58:	2035      	movs	r0, #53	; 0x35
 8002c5a:	f000 ff65 	bl	8003b28 <HAL_NVIC_EnableIRQ>
}
 8002c5e:	e285      	b.n	800316c <HAL_UART_MspInit+0x7dc>
 8002c60:	40005000 	.word	0x40005000
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020c00 	.word	0x40020c00
 8002c70:	20000944 	.word	0x20000944
 8002c74:	40026010 	.word	0x40026010
 8002c78:	200009a4 	.word	0x200009a4
 8002c7c:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a95      	ldr	r2, [pc, #596]	; (8002edc <HAL_UART_MspInit+0x54c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	f040 8091 	bne.w	8002dae <HAL_UART_MspInit+0x41e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	4b93      	ldr	r3, [pc, #588]	; (8002ee0 <HAL_UART_MspInit+0x550>)
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	4a92      	ldr	r2, [pc, #584]	; (8002ee0 <HAL_UART_MspInit+0x550>)
 8002c96:	f043 0310 	orr.w	r3, r3, #16
 8002c9a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9c:	4b90      	ldr	r3, [pc, #576]	; (8002ee0 <HAL_UART_MspInit+0x550>)
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca8:	2300      	movs	r3, #0
 8002caa:	623b      	str	r3, [r7, #32]
 8002cac:	4b8c      	ldr	r3, [pc, #560]	; (8002ee0 <HAL_UART_MspInit+0x550>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	4a8b      	ldr	r2, [pc, #556]	; (8002ee0 <HAL_UART_MspInit+0x550>)
 8002cb2:	f043 0302 	orr.w	r3, r3, #2
 8002cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb8:	4b89      	ldr	r3, [pc, #548]	; (8002ee0 <HAL_UART_MspInit+0x550>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	623b      	str	r3, [r7, #32]
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = MCU_USART1_TX_Pin|MCU_USART1_RX_Pin;
 8002cc4:	23c0      	movs	r3, #192	; 0xc0
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cd4:	2307      	movs	r3, #7
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4881      	ldr	r0, [pc, #516]	; (8002ee4 <HAL_UART_MspInit+0x554>)
 8002ce0:	f001 faac 	bl	800423c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002ce4:	4b80      	ldr	r3, [pc, #512]	; (8002ee8 <HAL_UART_MspInit+0x558>)
 8002ce6:	4a81      	ldr	r2, [pc, #516]	; (8002eec <HAL_UART_MspInit+0x55c>)
 8002ce8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002cea:	4b7f      	ldr	r3, [pc, #508]	; (8002ee8 <HAL_UART_MspInit+0x558>)
 8002cec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cf0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cf2:	4b7d      	ldr	r3, [pc, #500]	; (8002ee8 <HAL_UART_MspInit+0x558>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cf8:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <HAL_UART_MspInit+0x558>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cfe:	4b7a      	ldr	r3, [pc, #488]	; (8002ee8 <HAL_UART_MspInit+0x558>)
 8002d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d04:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d06:	4b78      	ldr	r3, [pc, #480]	; (8002ee8 <HAL_UART_MspInit+0x558>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d0c:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_UART_MspInit+0x558>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d12:	4b75      	ldr	r3, [pc, #468]	; (8002ee8 <HAL_UART_MspInit+0x558>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d18:	4b73      	ldr	r3, [pc, #460]	; (8002ee8 <HAL_UART_MspInit+0x558>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d1e:	4b72      	ldr	r3, [pc, #456]	; (8002ee8 <HAL_UART_MspInit+0x558>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d24:	4870      	ldr	r0, [pc, #448]	; (8002ee8 <HAL_UART_MspInit+0x558>)
 8002d26:	f000 ff0d 	bl	8003b44 <HAL_DMA_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 8002d30:	f7ff f83b 	bl	8001daa <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a6c      	ldr	r2, [pc, #432]	; (8002ee8 <HAL_UART_MspInit+0x558>)
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
 8002d3a:	4a6b      	ldr	r2, [pc, #428]	; (8002ee8 <HAL_UART_MspInit+0x558>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d40:	4b6b      	ldr	r3, [pc, #428]	; (8002ef0 <HAL_UART_MspInit+0x560>)
 8002d42:	4a6c      	ldr	r2, [pc, #432]	; (8002ef4 <HAL_UART_MspInit+0x564>)
 8002d44:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d46:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <HAL_UART_MspInit+0x560>)
 8002d48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d4e:	4b68      	ldr	r3, [pc, #416]	; (8002ef0 <HAL_UART_MspInit+0x560>)
 8002d50:	2240      	movs	r2, #64	; 0x40
 8002d52:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d54:	4b66      	ldr	r3, [pc, #408]	; (8002ef0 <HAL_UART_MspInit+0x560>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d5a:	4b65      	ldr	r3, [pc, #404]	; (8002ef0 <HAL_UART_MspInit+0x560>)
 8002d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d60:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d62:	4b63      	ldr	r3, [pc, #396]	; (8002ef0 <HAL_UART_MspInit+0x560>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d68:	4b61      	ldr	r3, [pc, #388]	; (8002ef0 <HAL_UART_MspInit+0x560>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d6e:	4b60      	ldr	r3, [pc, #384]	; (8002ef0 <HAL_UART_MspInit+0x560>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d74:	4b5e      	ldr	r3, [pc, #376]	; (8002ef0 <HAL_UART_MspInit+0x560>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d7a:	4b5d      	ldr	r3, [pc, #372]	; (8002ef0 <HAL_UART_MspInit+0x560>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d80:	485b      	ldr	r0, [pc, #364]	; (8002ef0 <HAL_UART_MspInit+0x560>)
 8002d82:	f000 fedf 	bl	8003b44 <HAL_DMA_Init>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_UART_MspInit+0x400>
      Error_Handler();
 8002d8c:	f7ff f80d 	bl	8001daa <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a57      	ldr	r2, [pc, #348]	; (8002ef0 <HAL_UART_MspInit+0x560>)
 8002d94:	635a      	str	r2, [r3, #52]	; 0x34
 8002d96:	4a56      	ldr	r2, [pc, #344]	; (8002ef0 <HAL_UART_MspInit+0x560>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2100      	movs	r1, #0
 8002da0:	2025      	movs	r0, #37	; 0x25
 8002da2:	f000 fea5 	bl	8003af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002da6:	2025      	movs	r0, #37	; 0x25
 8002da8:	f000 febe 	bl	8003b28 <HAL_NVIC_EnableIRQ>
}
 8002dac:	e1de      	b.n	800316c <HAL_UART_MspInit+0x7dc>
  else if(uartHandle->Instance==USART2)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a51      	ldr	r2, [pc, #324]	; (8002ef8 <HAL_UART_MspInit+0x568>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	f040 80ab 	bne.w	8002f10 <HAL_UART_MspInit+0x580>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	4b48      	ldr	r3, [pc, #288]	; (8002ee0 <HAL_UART_MspInit+0x550>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a47      	ldr	r2, [pc, #284]	; (8002ee0 <HAL_UART_MspInit+0x550>)
 8002dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b45      	ldr	r3, [pc, #276]	; (8002ee0 <HAL_UART_MspInit+0x550>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_UART_MspInit+0x550>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a40      	ldr	r2, [pc, #256]	; (8002ee0 <HAL_UART_MspInit+0x550>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b3e      	ldr	r3, [pc, #248]	; (8002ee0 <HAL_UART_MspInit+0x550>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCU_USART2_TX_Pin|MCU_USART2_RX_Pin;
 8002df2:	230c      	movs	r3, #12
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e02:	2307      	movs	r3, #7
 8002e04:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	483b      	ldr	r0, [pc, #236]	; (8002efc <HAL_UART_MspInit+0x56c>)
 8002e0e:	f001 fa15 	bl	800423c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002e12:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <HAL_UART_MspInit+0x570>)
 8002e14:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <HAL_UART_MspInit+0x574>)
 8002e16:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002e18:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <HAL_UART_MspInit+0x570>)
 8002e1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e20:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <HAL_UART_MspInit+0x570>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e26:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <HAL_UART_MspInit+0x570>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e2c:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <HAL_UART_MspInit+0x570>)
 8002e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e32:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e34:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <HAL_UART_MspInit+0x570>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e3a:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <HAL_UART_MspInit+0x570>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002e40:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <HAL_UART_MspInit+0x570>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e46:	4b2e      	ldr	r3, [pc, #184]	; (8002f00 <HAL_UART_MspInit+0x570>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e4c:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <HAL_UART_MspInit+0x570>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e52:	482b      	ldr	r0, [pc, #172]	; (8002f00 <HAL_UART_MspInit+0x570>)
 8002e54:	f000 fe76 	bl	8003b44 <HAL_DMA_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_UART_MspInit+0x4d2>
      Error_Handler();
 8002e5e:	f7fe ffa4 	bl	8001daa <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <HAL_UART_MspInit+0x570>)
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38
 8002e68:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <HAL_UART_MspInit+0x570>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002e6e:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <HAL_UART_MspInit+0x578>)
 8002e70:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <HAL_UART_MspInit+0x57c>)
 8002e72:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002e74:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <HAL_UART_MspInit+0x578>)
 8002e76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e7a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e7c:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <HAL_UART_MspInit+0x578>)
 8002e7e:	2240      	movs	r2, #64	; 0x40
 8002e80:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e82:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <HAL_UART_MspInit+0x578>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e88:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <HAL_UART_MspInit+0x578>)
 8002e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e90:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_UART_MspInit+0x578>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e96:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <HAL_UART_MspInit+0x578>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <HAL_UART_MspInit+0x578>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ea2:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_UART_MspInit+0x578>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ea8:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <HAL_UART_MspInit+0x578>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002eae:	4816      	ldr	r0, [pc, #88]	; (8002f08 <HAL_UART_MspInit+0x578>)
 8002eb0:	f000 fe48 	bl	8003b44 <HAL_DMA_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_UART_MspInit+0x52e>
      Error_Handler();
 8002eba:	f7fe ff76 	bl	8001daa <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a11      	ldr	r2, [pc, #68]	; (8002f08 <HAL_UART_MspInit+0x578>)
 8002ec2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec4:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <HAL_UART_MspInit+0x578>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2026      	movs	r0, #38	; 0x26
 8002ed0:	f000 fe0e 	bl	8003af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ed4:	2026      	movs	r0, #38	; 0x26
 8002ed6:	f000 fe27 	bl	8003b28 <HAL_NVIC_EnableIRQ>
}
 8002eda:	e147      	b.n	800316c <HAL_UART_MspInit+0x7dc>
 8002edc:	40011000 	.word	0x40011000
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	20000a04 	.word	0x20000a04
 8002eec:	40026440 	.word	0x40026440
 8002ef0:	20000a64 	.word	0x20000a64
 8002ef4:	400264b8 	.word	0x400264b8
 8002ef8:	40004400 	.word	0x40004400
 8002efc:	40020000 	.word	0x40020000
 8002f00:	20000ac4 	.word	0x20000ac4
 8002f04:	40026088 	.word	0x40026088
 8002f08:	20000b24 	.word	0x20000b24
 8002f0c:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a97      	ldr	r2, [pc, #604]	; (8003174 <HAL_UART_MspInit+0x7e4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	f040 8092 	bne.w	8003040 <HAL_UART_MspInit+0x6b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	4b95      	ldr	r3, [pc, #596]	; (8003178 <HAL_UART_MspInit+0x7e8>)
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	4a94      	ldr	r2, [pc, #592]	; (8003178 <HAL_UART_MspInit+0x7e8>)
 8002f26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2c:	4b92      	ldr	r3, [pc, #584]	; (8003178 <HAL_UART_MspInit+0x7e8>)
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	4b8e      	ldr	r3, [pc, #568]	; (8003178 <HAL_UART_MspInit+0x7e8>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	4a8d      	ldr	r2, [pc, #564]	; (8003178 <HAL_UART_MspInit+0x7e8>)
 8002f42:	f043 0304 	orr.w	r3, r3, #4
 8002f46:	6313      	str	r3, [r2, #48]	; 0x30
 8002f48:	4b8b      	ldr	r3, [pc, #556]	; (8003178 <HAL_UART_MspInit+0x7e8>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MCU_HLBr_TX_Pin|MCU_HLBr_RX_Pin;
 8002f54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f58:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f62:	2303      	movs	r3, #3
 8002f64:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f66:	2307      	movs	r3, #7
 8002f68:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4882      	ldr	r0, [pc, #520]	; (800317c <HAL_UART_MspInit+0x7ec>)
 8002f72:	f001 f963 	bl	800423c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002f76:	4b82      	ldr	r3, [pc, #520]	; (8003180 <HAL_UART_MspInit+0x7f0>)
 8002f78:	4a82      	ldr	r2, [pc, #520]	; (8003184 <HAL_UART_MspInit+0x7f4>)
 8002f7a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002f7c:	4b80      	ldr	r3, [pc, #512]	; (8003180 <HAL_UART_MspInit+0x7f0>)
 8002f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f82:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f84:	4b7e      	ldr	r3, [pc, #504]	; (8003180 <HAL_UART_MspInit+0x7f0>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f8a:	4b7d      	ldr	r3, [pc, #500]	; (8003180 <HAL_UART_MspInit+0x7f0>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f90:	4b7b      	ldr	r3, [pc, #492]	; (8003180 <HAL_UART_MspInit+0x7f0>)
 8002f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f96:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f98:	4b79      	ldr	r3, [pc, #484]	; (8003180 <HAL_UART_MspInit+0x7f0>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f9e:	4b78      	ldr	r3, [pc, #480]	; (8003180 <HAL_UART_MspInit+0x7f0>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002fa4:	4b76      	ldr	r3, [pc, #472]	; (8003180 <HAL_UART_MspInit+0x7f0>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002faa:	4b75      	ldr	r3, [pc, #468]	; (8003180 <HAL_UART_MspInit+0x7f0>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fb0:	4b73      	ldr	r3, [pc, #460]	; (8003180 <HAL_UART_MspInit+0x7f0>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002fb6:	4872      	ldr	r0, [pc, #456]	; (8003180 <HAL_UART_MspInit+0x7f0>)
 8002fb8:	f000 fdc4 	bl	8003b44 <HAL_DMA_Init>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_UART_MspInit+0x636>
      Error_Handler();
 8002fc2:	f7fe fef2 	bl	8001daa <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a6d      	ldr	r2, [pc, #436]	; (8003180 <HAL_UART_MspInit+0x7f0>)
 8002fca:	639a      	str	r2, [r3, #56]	; 0x38
 8002fcc:	4a6c      	ldr	r2, [pc, #432]	; (8003180 <HAL_UART_MspInit+0x7f0>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002fd2:	4b6d      	ldr	r3, [pc, #436]	; (8003188 <HAL_UART_MspInit+0x7f8>)
 8002fd4:	4a6d      	ldr	r2, [pc, #436]	; (800318c <HAL_UART_MspInit+0x7fc>)
 8002fd6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002fd8:	4b6b      	ldr	r3, [pc, #428]	; (8003188 <HAL_UART_MspInit+0x7f8>)
 8002fda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fde:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fe0:	4b69      	ldr	r3, [pc, #420]	; (8003188 <HAL_UART_MspInit+0x7f8>)
 8002fe2:	2240      	movs	r2, #64	; 0x40
 8002fe4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe6:	4b68      	ldr	r3, [pc, #416]	; (8003188 <HAL_UART_MspInit+0x7f8>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fec:	4b66      	ldr	r3, [pc, #408]	; (8003188 <HAL_UART_MspInit+0x7f8>)
 8002fee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ff4:	4b64      	ldr	r3, [pc, #400]	; (8003188 <HAL_UART_MspInit+0x7f8>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ffa:	4b63      	ldr	r3, [pc, #396]	; (8003188 <HAL_UART_MspInit+0x7f8>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003000:	4b61      	ldr	r3, [pc, #388]	; (8003188 <HAL_UART_MspInit+0x7f8>)
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003006:	4b60      	ldr	r3, [pc, #384]	; (8003188 <HAL_UART_MspInit+0x7f8>)
 8003008:	2200      	movs	r2, #0
 800300a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800300c:	4b5e      	ldr	r3, [pc, #376]	; (8003188 <HAL_UART_MspInit+0x7f8>)
 800300e:	2200      	movs	r2, #0
 8003010:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003012:	485d      	ldr	r0, [pc, #372]	; (8003188 <HAL_UART_MspInit+0x7f8>)
 8003014:	f000 fd96 	bl	8003b44 <HAL_DMA_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_UART_MspInit+0x692>
      Error_Handler();
 800301e:	f7fe fec4 	bl	8001daa <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a58      	ldr	r2, [pc, #352]	; (8003188 <HAL_UART_MspInit+0x7f8>)
 8003026:	635a      	str	r2, [r3, #52]	; 0x34
 8003028:	4a57      	ldr	r2, [pc, #348]	; (8003188 <HAL_UART_MspInit+0x7f8>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	2100      	movs	r1, #0
 8003032:	2027      	movs	r0, #39	; 0x27
 8003034:	f000 fd5c 	bl	8003af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003038:	2027      	movs	r0, #39	; 0x27
 800303a:	f000 fd75 	bl	8003b28 <HAL_NVIC_EnableIRQ>
}
 800303e:	e095      	b.n	800316c <HAL_UART_MspInit+0x7dc>
  else if(uartHandle->Instance==USART6)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a52      	ldr	r2, [pc, #328]	; (8003190 <HAL_UART_MspInit+0x800>)
 8003046:	4293      	cmp	r3, r2
 8003048:	f040 8090 	bne.w	800316c <HAL_UART_MspInit+0x7dc>
    __HAL_RCC_USART6_CLK_ENABLE();
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	4b49      	ldr	r3, [pc, #292]	; (8003178 <HAL_UART_MspInit+0x7e8>)
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	4a48      	ldr	r2, [pc, #288]	; (8003178 <HAL_UART_MspInit+0x7e8>)
 8003056:	f043 0320 	orr.w	r3, r3, #32
 800305a:	6453      	str	r3, [r2, #68]	; 0x44
 800305c:	4b46      	ldr	r3, [pc, #280]	; (8003178 <HAL_UART_MspInit+0x7e8>)
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003068:	2300      	movs	r3, #0
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	4b42      	ldr	r3, [pc, #264]	; (8003178 <HAL_UART_MspInit+0x7e8>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	4a41      	ldr	r2, [pc, #260]	; (8003178 <HAL_UART_MspInit+0x7e8>)
 8003072:	f043 0304 	orr.w	r3, r3, #4
 8003076:	6313      	str	r3, [r2, #48]	; 0x30
 8003078:	4b3f      	ldr	r3, [pc, #252]	; (8003178 <HAL_UART_MspInit+0x7e8>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MCU_USART6_TX_Pin|MCU_USART6_RX_Pin;
 8003084:	23c0      	movs	r3, #192	; 0xc0
 8003086:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003088:	2302      	movs	r3, #2
 800308a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003090:	2303      	movs	r3, #3
 8003092:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003094:	2308      	movs	r3, #8
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003098:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800309c:	4619      	mov	r1, r3
 800309e:	4837      	ldr	r0, [pc, #220]	; (800317c <HAL_UART_MspInit+0x7ec>)
 80030a0:	f001 f8cc 	bl	800423c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80030a4:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <HAL_UART_MspInit+0x804>)
 80030a6:	4a3c      	ldr	r2, [pc, #240]	; (8003198 <HAL_UART_MspInit+0x808>)
 80030a8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80030aa:	4b3a      	ldr	r3, [pc, #232]	; (8003194 <HAL_UART_MspInit+0x804>)
 80030ac:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80030b0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030b2:	4b38      	ldr	r3, [pc, #224]	; (8003194 <HAL_UART_MspInit+0x804>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b8:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_UART_MspInit+0x804>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030be:	4b35      	ldr	r3, [pc, #212]	; (8003194 <HAL_UART_MspInit+0x804>)
 80030c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030c4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030c6:	4b33      	ldr	r3, [pc, #204]	; (8003194 <HAL_UART_MspInit+0x804>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030cc:	4b31      	ldr	r3, [pc, #196]	; (8003194 <HAL_UART_MspInit+0x804>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80030d2:	4b30      	ldr	r3, [pc, #192]	; (8003194 <HAL_UART_MspInit+0x804>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030d8:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <HAL_UART_MspInit+0x804>)
 80030da:	2200      	movs	r2, #0
 80030dc:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <HAL_UART_MspInit+0x804>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80030e4:	482b      	ldr	r0, [pc, #172]	; (8003194 <HAL_UART_MspInit+0x804>)
 80030e6:	f000 fd2d 	bl	8003b44 <HAL_DMA_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_UART_MspInit+0x764>
      Error_Handler();
 80030f0:	f7fe fe5b 	bl	8001daa <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a27      	ldr	r2, [pc, #156]	; (8003194 <HAL_UART_MspInit+0x804>)
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38
 80030fa:	4a26      	ldr	r2, [pc, #152]	; (8003194 <HAL_UART_MspInit+0x804>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003100:	4b26      	ldr	r3, [pc, #152]	; (800319c <HAL_UART_MspInit+0x80c>)
 8003102:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <HAL_UART_MspInit+0x810>)
 8003104:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003106:	4b25      	ldr	r3, [pc, #148]	; (800319c <HAL_UART_MspInit+0x80c>)
 8003108:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800310c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <HAL_UART_MspInit+0x80c>)
 8003110:	2240      	movs	r2, #64	; 0x40
 8003112:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003114:	4b21      	ldr	r3, [pc, #132]	; (800319c <HAL_UART_MspInit+0x80c>)
 8003116:	2200      	movs	r2, #0
 8003118:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <HAL_UART_MspInit+0x80c>)
 800311c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003120:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003122:	4b1e      	ldr	r3, [pc, #120]	; (800319c <HAL_UART_MspInit+0x80c>)
 8003124:	2200      	movs	r2, #0
 8003126:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003128:	4b1c      	ldr	r3, [pc, #112]	; (800319c <HAL_UART_MspInit+0x80c>)
 800312a:	2200      	movs	r2, #0
 800312c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800312e:	4b1b      	ldr	r3, [pc, #108]	; (800319c <HAL_UART_MspInit+0x80c>)
 8003130:	2200      	movs	r2, #0
 8003132:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003134:	4b19      	ldr	r3, [pc, #100]	; (800319c <HAL_UART_MspInit+0x80c>)
 8003136:	2200      	movs	r2, #0
 8003138:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <HAL_UART_MspInit+0x80c>)
 800313c:	2200      	movs	r2, #0
 800313e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003140:	4816      	ldr	r0, [pc, #88]	; (800319c <HAL_UART_MspInit+0x80c>)
 8003142:	f000 fcff 	bl	8003b44 <HAL_DMA_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_UART_MspInit+0x7c0>
      Error_Handler();
 800314c:	f7fe fe2d 	bl	8001daa <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a12      	ldr	r2, [pc, #72]	; (800319c <HAL_UART_MspInit+0x80c>)
 8003154:	635a      	str	r2, [r3, #52]	; 0x34
 8003156:	4a11      	ldr	r2, [pc, #68]	; (800319c <HAL_UART_MspInit+0x80c>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800315c:	2200      	movs	r2, #0
 800315e:	2100      	movs	r1, #0
 8003160:	2047      	movs	r0, #71	; 0x47
 8003162:	f000 fcc5 	bl	8003af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003166:	2047      	movs	r0, #71	; 0x47
 8003168:	f000 fcde 	bl	8003b28 <HAL_NVIC_EnableIRQ>
}
 800316c:	bf00      	nop
 800316e:	3750      	adds	r7, #80	; 0x50
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40004800 	.word	0x40004800
 8003178:	40023800 	.word	0x40023800
 800317c:	40020800 	.word	0x40020800
 8003180:	20000b84 	.word	0x20000b84
 8003184:	40026028 	.word	0x40026028
 8003188:	20000be4 	.word	0x20000be4
 800318c:	40026058 	.word	0x40026058
 8003190:	40011400 	.word	0x40011400
 8003194:	20000c44 	.word	0x20000c44
 8003198:	40026428 	.word	0x40026428
 800319c:	20000ca4 	.word	0x20000ca4
 80031a0:	400264a0 	.word	0x400264a0

080031a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031a8:	480d      	ldr	r0, [pc, #52]	; (80031e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031aa:	490e      	ldr	r1, [pc, #56]	; (80031e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031ac:	4a0e      	ldr	r2, [pc, #56]	; (80031e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b0:	e002      	b.n	80031b8 <LoopCopyDataInit>

080031b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031b6:	3304      	adds	r3, #4

080031b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031bc:	d3f9      	bcc.n	80031b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031c0:	4c0b      	ldr	r4, [pc, #44]	; (80031f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c4:	e001      	b.n	80031ca <LoopFillZerobss>

080031c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c8:	3204      	adds	r2, #4

080031ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031cc:	d3fb      	bcc.n	80031c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ce:	f7fe fffd 	bl	80021cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031d2:	f005 f88b 	bl	80082ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031d6:	f7fe fb97 	bl	8001908 <main>
  bx  lr    
 80031da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80031e8:	0800b0a8 	.word	0x0800b0a8
  ldr r2, =_sbss
 80031ec:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80031f0:	20000d08 	.word	0x20000d08

080031f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f4:	e7fe      	b.n	80031f4 <ADC_IRQHandler>
	...

080031f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_Init+0x40>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_Init+0x40>)
 8003202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_Init+0x40>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_Init+0x40>)
 800320e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_Init+0x40>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_Init+0x40>)
 800321a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003220:	2003      	movs	r0, #3
 8003222:	f000 fc5a 	bl	8003ada <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003226:	200f      	movs	r0, #15
 8003228:	f7fe fe6a 	bl	8001f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800322c:	f7fe fe40 	bl	8001eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023c00 	.word	0x40023c00

0800323c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_IncTick+0x20>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <HAL_IncTick+0x24>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4413      	add	r3, r2
 800324c:	4a04      	ldr	r2, [pc, #16]	; (8003260 <HAL_IncTick+0x24>)
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000020 	.word	0x20000020
 8003260:	20000d04 	.word	0x20000d04

08003264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return uwTick;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_GetTick+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000d04 	.word	0x20000d04

0800327c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff ffee 	bl	8003264 <HAL_GetTick>
 8003288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d005      	beq.n	80032a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_Delay+0x44>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032a2:	bf00      	nop
 80032a4:	f7ff ffde 	bl	8003264 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d8f7      	bhi.n	80032a4 <HAL_Delay+0x28>
  {
  }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000020 	.word	0x20000020

080032c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e033      	b.n	8003342 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fe f874 	bl	80013d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d118      	bne.n	8003334 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800330a:	f023 0302 	bic.w	r3, r3, #2
 800330e:	f043 0202 	orr.w	r2, r3, #2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f93a 	bl	8003590 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f023 0303 	bic.w	r3, r3, #3
 800332a:	f043 0201 	orr.w	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
 8003332:	e001      	b.n	8003338 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1c>
 8003364:	2302      	movs	r3, #2
 8003366:	e105      	b.n	8003574 <HAL_ADC_ConfigChannel+0x228>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b09      	cmp	r3, #9
 8003376:	d925      	bls.n	80033c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68d9      	ldr	r1, [r3, #12]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	b29b      	uxth	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	3b1e      	subs	r3, #30
 800338e:	2207      	movs	r2, #7
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43da      	mvns	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	400a      	ands	r2, r1
 800339c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68d9      	ldr	r1, [r3, #12]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	4618      	mov	r0, r3
 80033b0:	4603      	mov	r3, r0
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	4403      	add	r3, r0
 80033b6:	3b1e      	subs	r3, #30
 80033b8:	409a      	lsls	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	e022      	b.n	800340a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6919      	ldr	r1, [r3, #16]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	4613      	mov	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	2207      	movs	r2, #7
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43da      	mvns	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	400a      	ands	r2, r1
 80033e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6919      	ldr	r1, [r3, #16]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	4618      	mov	r0, r3
 80033fa:	4603      	mov	r3, r0
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4403      	add	r3, r0
 8003400:	409a      	lsls	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b06      	cmp	r3, #6
 8003410:	d824      	bhi.n	800345c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	3b05      	subs	r3, #5
 8003424:	221f      	movs	r2, #31
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	400a      	ands	r2, r1
 8003432:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	4618      	mov	r0, r3
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	3b05      	subs	r3, #5
 800344e:	fa00 f203 	lsl.w	r2, r0, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	635a      	str	r2, [r3, #52]	; 0x34
 800345a:	e04c      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b0c      	cmp	r3, #12
 8003462:	d824      	bhi.n	80034ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	3b23      	subs	r3, #35	; 0x23
 8003476:	221f      	movs	r2, #31
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43da      	mvns	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	400a      	ands	r2, r1
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	4618      	mov	r0, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	3b23      	subs	r3, #35	; 0x23
 80034a0:	fa00 f203 	lsl.w	r2, r0, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
 80034ac:	e023      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	3b41      	subs	r3, #65	; 0x41
 80034c0:	221f      	movs	r2, #31
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	400a      	ands	r2, r1
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	4618      	mov	r0, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	3b41      	subs	r3, #65	; 0x41
 80034ea:	fa00 f203 	lsl.w	r2, r0, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034f6:	4b22      	ldr	r3, [pc, #136]	; (8003580 <HAL_ADC_ConfigChannel+0x234>)
 80034f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a21      	ldr	r2, [pc, #132]	; (8003584 <HAL_ADC_ConfigChannel+0x238>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d109      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x1cc>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b12      	cmp	r3, #18
 800350a:	d105      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a19      	ldr	r2, [pc, #100]	; (8003584 <HAL_ADC_ConfigChannel+0x238>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d123      	bne.n	800356a <HAL_ADC_ConfigChannel+0x21e>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b10      	cmp	r3, #16
 8003528:	d003      	beq.n	8003532 <HAL_ADC_ConfigChannel+0x1e6>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b11      	cmp	r3, #17
 8003530:	d11b      	bne.n	800356a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b10      	cmp	r3, #16
 8003544:	d111      	bne.n	800356a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <HAL_ADC_ConfigChannel+0x23c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a10      	ldr	r2, [pc, #64]	; (800358c <HAL_ADC_ConfigChannel+0x240>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	0c9a      	lsrs	r2, r3, #18
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800355c:	e002      	b.n	8003564 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	3b01      	subs	r3, #1
 8003562:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f9      	bne.n	800355e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	40012300 	.word	0x40012300
 8003584:	40012000 	.word	0x40012000
 8003588:	20000018 	.word	0x20000018
 800358c:	431bde83 	.word	0x431bde83

08003590 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003598:	4b79      	ldr	r3, [pc, #484]	; (8003780 <ADC_Init+0x1f0>)
 800359a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	021a      	lsls	r2, r3, #8
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6859      	ldr	r1, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800360a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6899      	ldr	r1, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	4a58      	ldr	r2, [pc, #352]	; (8003784 <ADC_Init+0x1f4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d022      	beq.n	800366e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003636:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6899      	ldr	r1, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003658:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6899      	ldr	r1, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	e00f      	b.n	800368e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800367c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800368c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0202 	bic.w	r2, r2, #2
 800369c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6899      	ldr	r1, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	7e1b      	ldrb	r3, [r3, #24]
 80036a8:	005a      	lsls	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01b      	beq.n	80036f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	3b01      	subs	r3, #1
 80036e8:	035a      	lsls	r2, r3, #13
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	e007      	b.n	8003704 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003702:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003712:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	3b01      	subs	r3, #1
 8003720:	051a      	lsls	r2, r3, #20
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003738:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6899      	ldr	r1, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003746:	025a      	lsls	r2, r3, #9
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6899      	ldr	r1, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	029a      	lsls	r2, r3, #10
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40012300 	.word	0x40012300
 8003784:	0f000001 	.word	0x0f000001

08003788 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0ed      	b.n	8003976 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d102      	bne.n	80037ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fd fe8a 	bl	80014c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037bc:	f7ff fd52 	bl	8003264 <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037c2:	e012      	b.n	80037ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037c4:	f7ff fd4e 	bl	8003264 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b0a      	cmp	r3, #10
 80037d0:	d90b      	bls.n	80037ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2205      	movs	r2, #5
 80037e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0c5      	b.n	8003976 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0e5      	beq.n	80037c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0202 	bic.w	r2, r2, #2
 8003806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003808:	f7ff fd2c 	bl	8003264 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800380e:	e012      	b.n	8003836 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003810:	f7ff fd28 	bl	8003264 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b0a      	cmp	r3, #10
 800381c:	d90b      	bls.n	8003836 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2205      	movs	r2, #5
 800382e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e09f      	b.n	8003976 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e5      	bne.n	8003810 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7e1b      	ldrb	r3, [r3, #24]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d108      	bne.n	800385e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e007      	b.n	800386e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800386c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7e5b      	ldrb	r3, [r3, #25]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d108      	bne.n	8003888 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e007      	b.n	8003898 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003896:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7e9b      	ldrb	r3, [r3, #26]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d108      	bne.n	80038b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0220 	orr.w	r2, r2, #32
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e007      	b.n	80038c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0220 	bic.w	r2, r2, #32
 80038c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7edb      	ldrb	r3, [r3, #27]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d108      	bne.n	80038dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0210 	bic.w	r2, r2, #16
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	e007      	b.n	80038ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0210 	orr.w	r2, r2, #16
 80038ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	7f1b      	ldrb	r3, [r3, #28]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d108      	bne.n	8003906 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0208 	orr.w	r2, r2, #8
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	e007      	b.n	8003916 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0208 	bic.w	r2, r2, #8
 8003914:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	7f5b      	ldrb	r3, [r3, #29]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d108      	bne.n	8003930 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0204 	orr.w	r2, r2, #4
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	e007      	b.n	8003940 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0204 	bic.w	r2, r2, #4
 800393e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	ea42 0103 	orr.w	r1, r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	1e5a      	subs	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800399c:	4013      	ands	r3, r2
 800399e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b2:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <__NVIC_SetPriorityGrouping+0x44>)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	60d3      	str	r3, [r2, #12]
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <__NVIC_GetPriorityGrouping+0x18>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	f003 0307 	and.w	r3, r3, #7
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	db0b      	blt.n	8003a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	f003 021f 	and.w	r2, r3, #31
 80039fc:	4907      	ldr	r1, [pc, #28]	; (8003a1c <__NVIC_EnableIRQ+0x38>)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2001      	movs	r0, #1
 8003a06:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000e100 	.word	0xe000e100

08003a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	db0a      	blt.n	8003a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	490c      	ldr	r1, [pc, #48]	; (8003a6c <__NVIC_SetPriority+0x4c>)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	440b      	add	r3, r1
 8003a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a48:	e00a      	b.n	8003a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4908      	ldr	r1, [pc, #32]	; (8003a70 <__NVIC_SetPriority+0x50>)
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	3b04      	subs	r3, #4
 8003a58:	0112      	lsls	r2, r2, #4
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	761a      	strb	r2, [r3, #24]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	e000e100 	.word	0xe000e100
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b089      	sub	sp, #36	; 0x24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f1c3 0307 	rsb	r3, r3, #7
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	bf28      	it	cs
 8003a92:	2304      	movcs	r3, #4
 8003a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2b06      	cmp	r3, #6
 8003a9c:	d902      	bls.n	8003aa4 <NVIC_EncodePriority+0x30>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3b03      	subs	r3, #3
 8003aa2:	e000      	b.n	8003aa6 <NVIC_EncodePriority+0x32>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003abc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	43d9      	mvns	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003acc:	4313      	orrs	r3, r2
         );
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3724      	adds	r7, #36	; 0x24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff ff4c 	bl	8003980 <__NVIC_SetPriorityGrouping>
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b02:	f7ff ff61 	bl	80039c8 <__NVIC_GetPriorityGrouping>
 8003b06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	6978      	ldr	r0, [r7, #20]
 8003b0e:	f7ff ffb1 	bl	8003a74 <NVIC_EncodePriority>
 8003b12:	4602      	mov	r2, r0
 8003b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff ff80 	bl	8003a20 <__NVIC_SetPriority>
}
 8003b20:	bf00      	nop
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff ff54 	bl	80039e4 <__NVIC_EnableIRQ>
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b50:	f7ff fb88 	bl	8003264 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e099      	b.n	8003c94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b80:	e00f      	b.n	8003ba2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b82:	f7ff fb6f 	bl	8003264 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b05      	cmp	r3, #5
 8003b8e:	d908      	bls.n	8003ba2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e078      	b.n	8003c94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e8      	bne.n	8003b82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4b38      	ldr	r3, [pc, #224]	; (8003c9c <HAL_DMA_Init+0x158>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d107      	bne.n	8003c0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	4313      	orrs	r3, r2
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f023 0307 	bic.w	r3, r3, #7
 8003c22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d117      	bne.n	8003c66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00e      	beq.n	8003c66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fa7b 	bl	8004144 <DMA_CheckFifoParam>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c62:	2301      	movs	r3, #1
 8003c64:	e016      	b.n	8003c94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fa32 	bl	80040d8 <DMA_CalcBaseAndBitshift>
 8003c74:	4603      	mov	r3, r0
 8003c76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7c:	223f      	movs	r2, #63	; 0x3f
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	f010803f 	.word	0xf010803f

08003ca0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cae:	f7ff fad9 	bl	8003264 <HAL_GetTick>
 8003cb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d008      	beq.n	8003cd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2280      	movs	r2, #128	; 0x80
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e052      	b.n	8003d78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0216 	bic.w	r2, r2, #22
 8003ce0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cf0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d103      	bne.n	8003d02 <HAL_DMA_Abort+0x62>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0208 	bic.w	r2, r2, #8
 8003d10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0201 	bic.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d22:	e013      	b.n	8003d4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d24:	f7ff fa9e 	bl	8003264 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b05      	cmp	r3, #5
 8003d30:	d90c      	bls.n	8003d4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e015      	b.n	8003d78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e4      	bne.n	8003d24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5e:	223f      	movs	r2, #63	; 0x3f
 8003d60:	409a      	lsls	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d004      	beq.n	8003d9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2280      	movs	r2, #128	; 0x80
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e00c      	b.n	8003db8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2205      	movs	r2, #5
 8003da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dd0:	4b8e      	ldr	r3, [pc, #568]	; (800400c <HAL_DMA_IRQHandler+0x248>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a8e      	ldr	r2, [pc, #568]	; (8004010 <HAL_DMA_IRQHandler+0x24c>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	0a9b      	lsrs	r3, r3, #10
 8003ddc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dee:	2208      	movs	r2, #8
 8003df0:	409a      	lsls	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01a      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d013      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0204 	bic.w	r2, r2, #4
 8003e16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	f043 0201 	orr.w	r2, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e34:	2201      	movs	r2, #1
 8003e36:	409a      	lsls	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d012      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e52:	2201      	movs	r2, #1
 8003e54:	409a      	lsls	r2, r3
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	f043 0202 	orr.w	r2, r3, #2
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d012      	beq.n	8003e9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00b      	beq.n	8003e9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e88:	2204      	movs	r2, #4
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	f043 0204 	orr.w	r2, r3, #4
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea0:	2210      	movs	r2, #16
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d043      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d03c      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d018      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d108      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d024      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	4798      	blx	r3
 8003ef2:	e01f      	b.n	8003f34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01b      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
 8003f04:	e016      	b.n	8003f34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d107      	bne.n	8003f24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0208 	bic.w	r2, r2, #8
 8003f22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f38:	2220      	movs	r2, #32
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 808f 	beq.w	8004064 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8087 	beq.w	8004064 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b05      	cmp	r3, #5
 8003f6c:	d136      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0216 	bic.w	r2, r2, #22
 8003f7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d103      	bne.n	8003f9e <HAL_DMA_IRQHandler+0x1da>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0208 	bic.w	r2, r2, #8
 8003fac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb2:	223f      	movs	r2, #63	; 0x3f
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d07e      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	4798      	blx	r3
        }
        return;
 8003fda:	e079      	b.n	80040d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01d      	beq.n	8004026 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10d      	bne.n	8004014 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d031      	beq.n	8004064 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
 8004008:	e02c      	b.n	8004064 <HAL_DMA_IRQHandler+0x2a0>
 800400a:	bf00      	nop
 800400c:	20000018 	.word	0x20000018
 8004010:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d023      	beq.n	8004064 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4798      	blx	r3
 8004024:	e01e      	b.n	8004064 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10f      	bne.n	8004054 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0210 	bic.w	r2, r2, #16
 8004042:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004068:	2b00      	cmp	r3, #0
 800406a:	d032      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d022      	beq.n	80040be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2205      	movs	r2, #5
 800407c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	3301      	adds	r3, #1
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	429a      	cmp	r2, r3
 800409a:	d307      	bcc.n	80040ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f2      	bne.n	8004090 <HAL_DMA_IRQHandler+0x2cc>
 80040aa:	e000      	b.n	80040ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4798      	blx	r3
 80040ce:	e000      	b.n	80040d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80040d0:	bf00      	nop
    }
  }
}
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	3b10      	subs	r3, #16
 80040e8:	4a14      	ldr	r2, [pc, #80]	; (800413c <DMA_CalcBaseAndBitshift+0x64>)
 80040ea:	fba2 2303 	umull	r2, r3, r2, r3
 80040ee:	091b      	lsrs	r3, r3, #4
 80040f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040f2:	4a13      	ldr	r2, [pc, #76]	; (8004140 <DMA_CalcBaseAndBitshift+0x68>)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b03      	cmp	r3, #3
 8004104:	d909      	bls.n	800411a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	1d1a      	adds	r2, r3, #4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	659a      	str	r2, [r3, #88]	; 0x58
 8004118:	e007      	b.n	800412a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004122:	f023 0303 	bic.w	r3, r3, #3
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	aaaaaaab 	.word	0xaaaaaaab
 8004140:	0800b068 	.word	0x0800b068

08004144 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11f      	bne.n	800419e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d856      	bhi.n	8004212 <DMA_CheckFifoParam+0xce>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <DMA_CheckFifoParam+0x28>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	0800417d 	.word	0x0800417d
 8004170:	0800418f 	.word	0x0800418f
 8004174:	0800417d 	.word	0x0800417d
 8004178:	08004213 	.word	0x08004213
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d046      	beq.n	8004216 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418c:	e043      	b.n	8004216 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004196:	d140      	bne.n	800421a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800419c:	e03d      	b.n	800421a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a6:	d121      	bne.n	80041ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d837      	bhi.n	800421e <DMA_CheckFifoParam+0xda>
 80041ae:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <DMA_CheckFifoParam+0x70>)
 80041b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041cb 	.word	0x080041cb
 80041bc:	080041c5 	.word	0x080041c5
 80041c0:	080041dd 	.word	0x080041dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
      break;
 80041c8:	e030      	b.n	800422c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d025      	beq.n	8004222 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041da:	e022      	b.n	8004222 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041e4:	d11f      	bne.n	8004226 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041ea:	e01c      	b.n	8004226 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d903      	bls.n	80041fa <DMA_CheckFifoParam+0xb6>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d003      	beq.n	8004200 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041f8:	e018      	b.n	800422c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
      break;
 80041fe:	e015      	b.n	800422c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00e      	beq.n	800422a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
      break;
 8004210:	e00b      	b.n	800422a <DMA_CheckFifoParam+0xe6>
      break;
 8004212:	bf00      	nop
 8004214:	e00a      	b.n	800422c <DMA_CheckFifoParam+0xe8>
      break;
 8004216:	bf00      	nop
 8004218:	e008      	b.n	800422c <DMA_CheckFifoParam+0xe8>
      break;
 800421a:	bf00      	nop
 800421c:	e006      	b.n	800422c <DMA_CheckFifoParam+0xe8>
      break;
 800421e:	bf00      	nop
 8004220:	e004      	b.n	800422c <DMA_CheckFifoParam+0xe8>
      break;
 8004222:	bf00      	nop
 8004224:	e002      	b.n	800422c <DMA_CheckFifoParam+0xe8>
      break;   
 8004226:	bf00      	nop
 8004228:	e000      	b.n	800422c <DMA_CheckFifoParam+0xe8>
      break;
 800422a:	bf00      	nop
    }
  } 
  
  return status; 
 800422c:	7bfb      	ldrb	r3, [r7, #15]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop

0800423c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	; 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800424e:	2300      	movs	r3, #0
 8004250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	e16b      	b.n	8004530 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004258:	2201      	movs	r2, #1
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4013      	ands	r3, r2
 800426a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	429a      	cmp	r2, r3
 8004272:	f040 815a 	bne.w	800452a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d005      	beq.n	800428e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800428a:	2b02      	cmp	r3, #2
 800428c:	d130      	bne.n	80042f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	2203      	movs	r2, #3
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042c4:	2201      	movs	r2, #1
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f003 0201 	and.w	r2, r3, #1
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d017      	beq.n	800432c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	2203      	movs	r2, #3
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d123      	bne.n	8004380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	08da      	lsrs	r2, r3, #3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3208      	adds	r2, #8
 8004340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	220f      	movs	r2, #15
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4013      	ands	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	08da      	lsrs	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3208      	adds	r2, #8
 800437a:	69b9      	ldr	r1, [r7, #24]
 800437c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	2203      	movs	r2, #3
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 0203 	and.w	r2, r3, #3
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80b4 	beq.w	800452a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	4b60      	ldr	r3, [pc, #384]	; (8004548 <HAL_GPIO_Init+0x30c>)
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	4a5f      	ldr	r2, [pc, #380]	; (8004548 <HAL_GPIO_Init+0x30c>)
 80043cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043d0:	6453      	str	r3, [r2, #68]	; 0x44
 80043d2:	4b5d      	ldr	r3, [pc, #372]	; (8004548 <HAL_GPIO_Init+0x30c>)
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043de:	4a5b      	ldr	r2, [pc, #364]	; (800454c <HAL_GPIO_Init+0x310>)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	089b      	lsrs	r3, r3, #2
 80043e4:	3302      	adds	r3, #2
 80043e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	220f      	movs	r2, #15
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43db      	mvns	r3, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4013      	ands	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a52      	ldr	r2, [pc, #328]	; (8004550 <HAL_GPIO_Init+0x314>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d02b      	beq.n	8004462 <HAL_GPIO_Init+0x226>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a51      	ldr	r2, [pc, #324]	; (8004554 <HAL_GPIO_Init+0x318>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d025      	beq.n	800445e <HAL_GPIO_Init+0x222>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a50      	ldr	r2, [pc, #320]	; (8004558 <HAL_GPIO_Init+0x31c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01f      	beq.n	800445a <HAL_GPIO_Init+0x21e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a4f      	ldr	r2, [pc, #316]	; (800455c <HAL_GPIO_Init+0x320>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d019      	beq.n	8004456 <HAL_GPIO_Init+0x21a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a4e      	ldr	r2, [pc, #312]	; (8004560 <HAL_GPIO_Init+0x324>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_GPIO_Init+0x216>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a4d      	ldr	r2, [pc, #308]	; (8004564 <HAL_GPIO_Init+0x328>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00d      	beq.n	800444e <HAL_GPIO_Init+0x212>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a4c      	ldr	r2, [pc, #304]	; (8004568 <HAL_GPIO_Init+0x32c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <HAL_GPIO_Init+0x20e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a4b      	ldr	r2, [pc, #300]	; (800456c <HAL_GPIO_Init+0x330>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_GPIO_Init+0x20a>
 8004442:	2307      	movs	r3, #7
 8004444:	e00e      	b.n	8004464 <HAL_GPIO_Init+0x228>
 8004446:	2308      	movs	r3, #8
 8004448:	e00c      	b.n	8004464 <HAL_GPIO_Init+0x228>
 800444a:	2306      	movs	r3, #6
 800444c:	e00a      	b.n	8004464 <HAL_GPIO_Init+0x228>
 800444e:	2305      	movs	r3, #5
 8004450:	e008      	b.n	8004464 <HAL_GPIO_Init+0x228>
 8004452:	2304      	movs	r3, #4
 8004454:	e006      	b.n	8004464 <HAL_GPIO_Init+0x228>
 8004456:	2303      	movs	r3, #3
 8004458:	e004      	b.n	8004464 <HAL_GPIO_Init+0x228>
 800445a:	2302      	movs	r3, #2
 800445c:	e002      	b.n	8004464 <HAL_GPIO_Init+0x228>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <HAL_GPIO_Init+0x228>
 8004462:	2300      	movs	r3, #0
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	f002 0203 	and.w	r2, r2, #3
 800446a:	0092      	lsls	r2, r2, #2
 800446c:	4093      	lsls	r3, r2
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4313      	orrs	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004474:	4935      	ldr	r1, [pc, #212]	; (800454c <HAL_GPIO_Init+0x310>)
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	089b      	lsrs	r3, r3, #2
 800447a:	3302      	adds	r3, #2
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004482:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <HAL_GPIO_Init+0x334>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044a6:	4a32      	ldr	r2, [pc, #200]	; (8004570 <HAL_GPIO_Init+0x334>)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044ac:	4b30      	ldr	r3, [pc, #192]	; (8004570 <HAL_GPIO_Init+0x334>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d0:	4a27      	ldr	r2, [pc, #156]	; (8004570 <HAL_GPIO_Init+0x334>)
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044d6:	4b26      	ldr	r3, [pc, #152]	; (8004570 <HAL_GPIO_Init+0x334>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044fa:	4a1d      	ldr	r2, [pc, #116]	; (8004570 <HAL_GPIO_Init+0x334>)
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_GPIO_Init+0x334>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	43db      	mvns	r3, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4013      	ands	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004524:	4a12      	ldr	r2, [pc, #72]	; (8004570 <HAL_GPIO_Init+0x334>)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	3301      	adds	r3, #1
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	2b0f      	cmp	r3, #15
 8004534:	f67f ae90 	bls.w	8004258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	3724      	adds	r7, #36	; 0x24
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40023800 	.word	0x40023800
 800454c:	40013800 	.word	0x40013800
 8004550:	40020000 	.word	0x40020000
 8004554:	40020400 	.word	0x40020400
 8004558:	40020800 	.word	0x40020800
 800455c:	40020c00 	.word	0x40020c00
 8004560:	40021000 	.word	0x40021000
 8004564:	40021400 	.word	0x40021400
 8004568:	40021800 	.word	0x40021800
 800456c:	40021c00 	.word	0x40021c00
 8004570:	40013c00 	.word	0x40013c00

08004574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	807b      	strh	r3, [r7, #2]
 8004580:	4613      	mov	r3, r2
 8004582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004584:	787b      	ldrb	r3, [r7, #1]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800458a:	887a      	ldrh	r2, [r7, #2]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004590:	e003      	b.n	800459a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004592:	887b      	ldrh	r3, [r7, #2]
 8004594:	041a      	lsls	r2, r3, #16
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	619a      	str	r2, [r3, #24]
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b085      	sub	sp, #20
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	460b      	mov	r3, r1
 80045b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045b8:	887a      	ldrh	r2, [r7, #2]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4013      	ands	r3, r2
 80045be:	041a      	lsls	r2, r3, #16
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	43d9      	mvns	r1, r3
 80045c4:	887b      	ldrh	r3, [r7, #2]
 80045c6:	400b      	ands	r3, r1
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	619a      	str	r2, [r3, #24]
}
 80045ce:	bf00      	nop
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
	...

080045dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e12b      	b.n	8004846 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fd f938 	bl	8001878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2224      	movs	r2, #36	; 0x24
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800462e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800463e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004640:	f001 fe6a 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8004644:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4a81      	ldr	r2, [pc, #516]	; (8004850 <HAL_I2C_Init+0x274>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d807      	bhi.n	8004660 <HAL_I2C_Init+0x84>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a80      	ldr	r2, [pc, #512]	; (8004854 <HAL_I2C_Init+0x278>)
 8004654:	4293      	cmp	r3, r2
 8004656:	bf94      	ite	ls
 8004658:	2301      	movls	r3, #1
 800465a:	2300      	movhi	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e006      	b.n	800466e <HAL_I2C_Init+0x92>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a7d      	ldr	r2, [pc, #500]	; (8004858 <HAL_I2C_Init+0x27c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	bf94      	ite	ls
 8004668:	2301      	movls	r3, #1
 800466a:	2300      	movhi	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e0e7      	b.n	8004846 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4a78      	ldr	r2, [pc, #480]	; (800485c <HAL_I2C_Init+0x280>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	0c9b      	lsrs	r3, r3, #18
 8004680:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4a6a      	ldr	r2, [pc, #424]	; (8004850 <HAL_I2C_Init+0x274>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d802      	bhi.n	80046b0 <HAL_I2C_Init+0xd4>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3301      	adds	r3, #1
 80046ae:	e009      	b.n	80046c4 <HAL_I2C_Init+0xe8>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	4a69      	ldr	r2, [pc, #420]	; (8004860 <HAL_I2C_Init+0x284>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	099b      	lsrs	r3, r3, #6
 80046c2:	3301      	adds	r3, #1
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	495c      	ldr	r1, [pc, #368]	; (8004850 <HAL_I2C_Init+0x274>)
 80046e0:	428b      	cmp	r3, r1
 80046e2:	d819      	bhi.n	8004718 <HAL_I2C_Init+0x13c>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1e59      	subs	r1, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046f8:	400b      	ands	r3, r1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_I2C_Init+0x138>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	1e59      	subs	r1, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	fbb1 f3f3 	udiv	r3, r1, r3
 800470c:	3301      	adds	r3, #1
 800470e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004712:	e051      	b.n	80047b8 <HAL_I2C_Init+0x1dc>
 8004714:	2304      	movs	r3, #4
 8004716:	e04f      	b.n	80047b8 <HAL_I2C_Init+0x1dc>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d111      	bne.n	8004744 <HAL_I2C_Init+0x168>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1e58      	subs	r0, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6859      	ldr	r1, [r3, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	440b      	add	r3, r1
 800472e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004732:	3301      	adds	r3, #1
 8004734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e012      	b.n	800476a <HAL_I2C_Init+0x18e>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1e58      	subs	r0, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6859      	ldr	r1, [r3, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	0099      	lsls	r1, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	fbb0 f3f3 	udiv	r3, r0, r3
 800475a:	3301      	adds	r3, #1
 800475c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_I2C_Init+0x196>
 800476e:	2301      	movs	r3, #1
 8004770:	e022      	b.n	80047b8 <HAL_I2C_Init+0x1dc>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10e      	bne.n	8004798 <HAL_I2C_Init+0x1bc>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1e58      	subs	r0, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6859      	ldr	r1, [r3, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	440b      	add	r3, r1
 8004788:	fbb0 f3f3 	udiv	r3, r0, r3
 800478c:	3301      	adds	r3, #1
 800478e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004796:	e00f      	b.n	80047b8 <HAL_I2C_Init+0x1dc>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1e58      	subs	r0, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6859      	ldr	r1, [r3, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	0099      	lsls	r1, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ae:	3301      	adds	r3, #1
 80047b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	6809      	ldr	r1, [r1, #0]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6911      	ldr	r1, [r2, #16]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68d2      	ldr	r2, [r2, #12]
 80047f2:	4311      	orrs	r1, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	000186a0 	.word	0x000186a0
 8004854:	001e847f 	.word	0x001e847f
 8004858:	003d08ff 	.word	0x003d08ff
 800485c:	431bde83 	.word	0x431bde83
 8004860:	10624dd3 	.word	0x10624dd3

08004864 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	461a      	mov	r2, r3
 8004870:	460b      	mov	r3, r1
 8004872:	817b      	strh	r3, [r7, #10]
 8004874:	4613      	mov	r3, r2
 8004876:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004878:	f7fe fcf4 	bl	8003264 <HAL_GetTick>
 800487c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b20      	cmp	r3, #32
 8004888:	f040 80e0 	bne.w	8004a4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	2319      	movs	r3, #25
 8004892:	2201      	movs	r2, #1
 8004894:	4970      	ldr	r1, [pc, #448]	; (8004a58 <HAL_I2C_Master_Transmit+0x1f4>)
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 ff30 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048a2:	2302      	movs	r3, #2
 80048a4:	e0d3      	b.n	8004a4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_I2C_Master_Transmit+0x50>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e0cc      	b.n	8004a4e <HAL_I2C_Master_Transmit+0x1ea>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d007      	beq.n	80048da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2221      	movs	r2, #33	; 0x21
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2210      	movs	r2, #16
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	893a      	ldrh	r2, [r7, #8]
 800490a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a50      	ldr	r2, [pc, #320]	; (8004a5c <HAL_I2C_Master_Transmit+0x1f8>)
 800491a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800491c:	8979      	ldrh	r1, [r7, #10]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	6a3a      	ldr	r2, [r7, #32]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fcea 	bl	80052fc <I2C_MasterRequestWrite>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e08d      	b.n	8004a4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004932:	2300      	movs	r3, #0
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004948:	e066      	b.n	8004a18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	6a39      	ldr	r1, [r7, #32]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 ffaa 	bl	80058a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00d      	beq.n	8004976 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	2b04      	cmp	r3, #4
 8004960:	d107      	bne.n	8004972 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004970:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e06b      	b.n	8004a4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	781a      	ldrb	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d11b      	bne.n	80049ec <HAL_I2C_Master_Transmit+0x188>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d017      	beq.n	80049ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	781a      	ldrb	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	6a39      	ldr	r1, [r7, #32]
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 ff9a 	bl	800592a <I2C_WaitOnBTFFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00d      	beq.n	8004a18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d107      	bne.n	8004a14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e01a      	b.n	8004a4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d194      	bne.n	800494a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e000      	b.n	8004a4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a4c:	2302      	movs	r3, #2
  }
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	00100002 	.word	0x00100002
 8004a5c:	ffff0000 	.word	0xffff0000

08004a60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	4608      	mov	r0, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	817b      	strh	r3, [r7, #10]
 8004a72:	460b      	mov	r3, r1
 8004a74:	813b      	strh	r3, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a7a:	f7fe fbf3 	bl	8003264 <HAL_GetTick>
 8004a7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	f040 80d9 	bne.w	8004c40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	2319      	movs	r3, #25
 8004a94:	2201      	movs	r2, #1
 8004a96:	496d      	ldr	r1, [pc, #436]	; (8004c4c <HAL_I2C_Mem_Write+0x1ec>)
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fe2f 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e0cc      	b.n	8004c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_I2C_Mem_Write+0x56>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e0c5      	b.n	8004c42 <HAL_I2C_Mem_Write+0x1e2>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d007      	beq.n	8004adc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2221      	movs	r2, #33	; 0x21
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2240      	movs	r2, #64	; 0x40
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4a4d      	ldr	r2, [pc, #308]	; (8004c50 <HAL_I2C_Mem_Write+0x1f0>)
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b1e:	88f8      	ldrh	r0, [r7, #6]
 8004b20:	893a      	ldrh	r2, [r7, #8]
 8004b22:	8979      	ldrh	r1, [r7, #10]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fc66 	bl	8005400 <I2C_RequestMemoryWrite>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d052      	beq.n	8004be0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e081      	b.n	8004c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 feb0 	bl	80058a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00d      	beq.n	8004b6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d107      	bne.n	8004b66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e06b      	b.n	8004c42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	781a      	ldrb	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d11b      	bne.n	8004be0 <HAL_I2C_Mem_Write+0x180>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d017      	beq.n	8004be0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1aa      	bne.n	8004b3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fe9c 	bl	800592a <I2C_WaitOnBTFFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00d      	beq.n	8004c14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d107      	bne.n	8004c10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e016      	b.n	8004c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e000      	b.n	8004c42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	00100002 	.word	0x00100002
 8004c50:	ffff0000 	.word	0xffff0000

08004c54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	; 0x30
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	4611      	mov	r1, r2
 8004c60:	461a      	mov	r2, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	817b      	strh	r3, [r7, #10]
 8004c66:	460b      	mov	r3, r1
 8004c68:	813b      	strh	r3, [r7, #8]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c6e:	f7fe faf9 	bl	8003264 <HAL_GetTick>
 8004c72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	f040 8208 	bne.w	8005092 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	2319      	movs	r3, #25
 8004c88:	2201      	movs	r2, #1
 8004c8a:	497b      	ldr	r1, [pc, #492]	; (8004e78 <HAL_I2C_Mem_Read+0x224>)
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fd35 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e1fb      	b.n	8005094 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_I2C_Mem_Read+0x56>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e1f4      	b.n	8005094 <HAL_I2C_Mem_Read+0x440>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d007      	beq.n	8004cd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2222      	movs	r2, #34	; 0x22
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2240      	movs	r2, #64	; 0x40
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4a5b      	ldr	r2, [pc, #364]	; (8004e7c <HAL_I2C_Mem_Read+0x228>)
 8004d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d12:	88f8      	ldrh	r0, [r7, #6]
 8004d14:	893a      	ldrh	r2, [r7, #8]
 8004d16:	8979      	ldrh	r1, [r7, #10]
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	9301      	str	r3, [sp, #4]
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	4603      	mov	r3, r0
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fc02 	bl	800552c <I2C_RequestMemoryRead>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e1b0      	b.n	8005094 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d113      	bne.n	8004d62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	623b      	str	r3, [r7, #32]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	623b      	str	r3, [r7, #32]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	623b      	str	r3, [r7, #32]
 8004d4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	e184      	b.n	800506c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d11b      	bne.n	8004da2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e164      	b.n	800506c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d11b      	bne.n	8004de2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	e144      	b.n	800506c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004df8:	e138      	b.n	800506c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	f200 80f1 	bhi.w	8004fe6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d123      	bne.n	8004e54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 fdcb 	bl	80059ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e139      	b.n	8005094 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e52:	e10b      	b.n	800506c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d14e      	bne.n	8004efa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	2200      	movs	r2, #0
 8004e64:	4906      	ldr	r1, [pc, #24]	; (8004e80 <HAL_I2C_Mem_Read+0x22c>)
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fc48 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d008      	beq.n	8004e84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e10e      	b.n	8005094 <HAL_I2C_Mem_Read+0x440>
 8004e76:	bf00      	nop
 8004e78:	00100002 	.word	0x00100002
 8004e7c:	ffff0000 	.word	0xffff0000
 8004e80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ef8:	e0b8      	b.n	800506c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2200      	movs	r2, #0
 8004f02:	4966      	ldr	r1, [pc, #408]	; (800509c <HAL_I2C_Mem_Read+0x448>)
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 fbf9 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0bf      	b.n	8005094 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	494f      	ldr	r1, [pc, #316]	; (800509c <HAL_I2C_Mem_Read+0x448>)
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 fbcb 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e091      	b.n	8005094 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fe4:	e042      	b.n	800506c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fcde 	bl	80059ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e04c      	b.n	8005094 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005022:	b29b      	uxth	r3, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b04      	cmp	r3, #4
 8005038:	d118      	bne.n	800506c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005070:	2b00      	cmp	r3, #0
 8005072:	f47f aec2 	bne.w	8004dfa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	e000      	b.n	8005094 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005092:	2302      	movs	r3, #2
  }
}
 8005094:	4618      	mov	r0, r3
 8005096:	3728      	adds	r7, #40	; 0x28
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	00010004 	.word	0x00010004

080050a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	; 0x28
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	607a      	str	r2, [r7, #4]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	460b      	mov	r3, r1
 80050ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80050b0:	f7fe f8d8 	bl	8003264 <HAL_GetTick>
 80050b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	f040 8111 	bne.w	80052ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	2319      	movs	r3, #25
 80050ce:	2201      	movs	r2, #1
 80050d0:	4988      	ldr	r1, [pc, #544]	; (80052f4 <HAL_I2C_IsDeviceReady+0x254>)
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fb12 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80050de:	2302      	movs	r3, #2
 80050e0:	e104      	b.n	80052ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_I2C_IsDeviceReady+0x50>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e0fd      	b.n	80052ec <HAL_I2C_IsDeviceReady+0x24c>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b01      	cmp	r3, #1
 8005104:	d007      	beq.n	8005116 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0201 	orr.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005124:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2224      	movs	r2, #36	; 0x24
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4a70      	ldr	r2, [pc, #448]	; (80052f8 <HAL_I2C_IsDeviceReady+0x258>)
 8005138:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005148:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2200      	movs	r2, #0
 8005152:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fad0 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00d      	beq.n	800517e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005170:	d103      	bne.n	800517a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005178:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e0b6      	b.n	80052ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800517e:	897b      	ldrh	r3, [r7, #10]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	461a      	mov	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800518c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800518e:	f7fe f869 	bl	8003264 <HAL_GetTick>
 8005192:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b02      	cmp	r3, #2
 80051a0:	bf0c      	ite	eq
 80051a2:	2301      	moveq	r3, #1
 80051a4:	2300      	movne	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b8:	bf0c      	ite	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	2300      	movne	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80051c2:	e025      	b.n	8005210 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051c4:	f7fe f84e 	bl	8003264 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d302      	bcc.n	80051da <HAL_I2C_IsDeviceReady+0x13a>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d103      	bne.n	80051e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	22a0      	movs	r2, #160	; 0xa0
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	bf0c      	ite	eq
 80051f0:	2301      	moveq	r3, #1
 80051f2:	2300      	movne	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2ba0      	cmp	r3, #160	; 0xa0
 800521a:	d005      	beq.n	8005228 <HAL_I2C_IsDeviceReady+0x188>
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d102      	bne.n	8005228 <HAL_I2C_IsDeviceReady+0x188>
 8005222:	7dbb      	ldrb	r3, [r7, #22]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0cd      	beq.n	80051c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b02      	cmp	r3, #2
 800523c:	d129      	bne.n	8005292 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800524e:	2300      	movs	r3, #0
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	2319      	movs	r3, #25
 800526a:	2201      	movs	r2, #1
 800526c:	4921      	ldr	r1, [pc, #132]	; (80052f4 <HAL_I2C_IsDeviceReady+0x254>)
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 fa44 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e036      	b.n	80052ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	e02c      	b.n	80052ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	2319      	movs	r3, #25
 80052b2:	2201      	movs	r2, #1
 80052b4:	490f      	ldr	r1, [pc, #60]	; (80052f4 <HAL_I2C_IsDeviceReady+0x254>)
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 fa20 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e012      	b.n	80052ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	3301      	adds	r3, #1
 80052ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	f4ff af32 	bcc.w	800513a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
  }
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	00100002 	.word	0x00100002
 80052f8:	ffff0000 	.word	0xffff0000

080052fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	607a      	str	r2, [r7, #4]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	460b      	mov	r3, r1
 800530a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d006      	beq.n	8005326 <I2C_MasterRequestWrite+0x2a>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d003      	beq.n	8005326 <I2C_MasterRequestWrite+0x2a>
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005324:	d108      	bne.n	8005338 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	e00b      	b.n	8005350 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	2b12      	cmp	r3, #18
 800533e:	d107      	bne.n	8005350 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800534e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f9cd 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00d      	beq.n	8005384 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005376:	d103      	bne.n	8005380 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800537e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e035      	b.n	80053f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800538c:	d108      	bne.n	80053a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800538e:	897b      	ldrh	r3, [r7, #10]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	461a      	mov	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800539c:	611a      	str	r2, [r3, #16]
 800539e:	e01b      	b.n	80053d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053a0:	897b      	ldrh	r3, [r7, #10]
 80053a2:	11db      	asrs	r3, r3, #7
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	f003 0306 	and.w	r3, r3, #6
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f063 030f 	orn	r3, r3, #15
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	490e      	ldr	r1, [pc, #56]	; (80053f8 <I2C_MasterRequestWrite+0xfc>)
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f9f3 	bl	80057aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e010      	b.n	80053f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053ce:	897b      	ldrh	r3, [r7, #10]
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	4907      	ldr	r1, [pc, #28]	; (80053fc <I2C_MasterRequestWrite+0x100>)
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f9e3 	bl	80057aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	00010008 	.word	0x00010008
 80053fc:	00010002 	.word	0x00010002

08005400 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af02      	add	r7, sp, #8
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	461a      	mov	r2, r3
 800540e:	4603      	mov	r3, r0
 8005410:	817b      	strh	r3, [r7, #10]
 8005412:	460b      	mov	r3, r1
 8005414:	813b      	strh	r3, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005428:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	2200      	movs	r2, #0
 8005432:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f960 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00d      	beq.n	800545e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005450:	d103      	bne.n	800545a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005458:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e05f      	b.n	800551e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800545e:	897b      	ldrh	r3, [r7, #10]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800546c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	6a3a      	ldr	r2, [r7, #32]
 8005472:	492d      	ldr	r1, [pc, #180]	; (8005528 <I2C_RequestMemoryWrite+0x128>)
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f998 	bl	80057aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e04c      	b.n	800551e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800549a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549c:	6a39      	ldr	r1, [r7, #32]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fa02 	bl	80058a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00d      	beq.n	80054c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d107      	bne.n	80054c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e02b      	b.n	800551e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d105      	bne.n	80054d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054cc:	893b      	ldrh	r3, [r7, #8]
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	611a      	str	r2, [r3, #16]
 80054d6:	e021      	b.n	800551c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054d8:	893b      	ldrh	r3, [r7, #8]
 80054da:	0a1b      	lsrs	r3, r3, #8
 80054dc:	b29b      	uxth	r3, r3
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	6a39      	ldr	r1, [r7, #32]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f9dc 	bl	80058a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00d      	beq.n	8005512 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d107      	bne.n	800550e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e005      	b.n	800551e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005512:	893b      	ldrh	r3, [r7, #8]
 8005514:	b2da      	uxtb	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	00010002 	.word	0x00010002

0800552c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af02      	add	r7, sp, #8
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	4608      	mov	r0, r1
 8005536:	4611      	mov	r1, r2
 8005538:	461a      	mov	r2, r3
 800553a:	4603      	mov	r3, r0
 800553c:	817b      	strh	r3, [r7, #10]
 800553e:	460b      	mov	r3, r1
 8005540:	813b      	strh	r3, [r7, #8]
 8005542:	4613      	mov	r3, r2
 8005544:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005554:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005564:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	2200      	movs	r2, #0
 800556e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f8c2 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00d      	beq.n	800559a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558c:	d103      	bne.n	8005596 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005594:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e0aa      	b.n	80056f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800559a:	897b      	ldrh	r3, [r7, #10]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	4952      	ldr	r1, [pc, #328]	; (80056f8 <I2C_RequestMemoryRead+0x1cc>)
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f8fa 	bl	80057aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e097      	b.n	80056f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c0:	2300      	movs	r3, #0
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d8:	6a39      	ldr	r1, [r7, #32]
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 f964 	bl	80058a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00d      	beq.n	8005602 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d107      	bne.n	80055fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e076      	b.n	80056f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005602:	88fb      	ldrh	r3, [r7, #6]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d105      	bne.n	8005614 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005608:	893b      	ldrh	r3, [r7, #8]
 800560a:	b2da      	uxtb	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	611a      	str	r2, [r3, #16]
 8005612:	e021      	b.n	8005658 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005614:	893b      	ldrh	r3, [r7, #8]
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	b29b      	uxth	r3, r3
 800561a:	b2da      	uxtb	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005624:	6a39      	ldr	r1, [r7, #32]
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f93e 	bl	80058a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00d      	beq.n	800564e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	2b04      	cmp	r3, #4
 8005638:	d107      	bne.n	800564a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005648:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e050      	b.n	80056f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800564e:	893b      	ldrh	r3, [r7, #8]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565a:	6a39      	ldr	r1, [r7, #32]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f923 	bl	80058a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00d      	beq.n	8005684 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	2b04      	cmp	r3, #4
 800566e:	d107      	bne.n	8005680 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e035      	b.n	80056f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005692:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	2200      	movs	r2, #0
 800569c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f82b 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00d      	beq.n	80056c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ba:	d103      	bne.n	80056c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e013      	b.n	80056f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056c8:	897b      	ldrh	r3, [r7, #10]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	6a3a      	ldr	r2, [r7, #32]
 80056dc:	4906      	ldr	r1, [pc, #24]	; (80056f8 <I2C_RequestMemoryRead+0x1cc>)
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f863 	bl	80057aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	00010002 	.word	0x00010002

080056fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800570c:	e025      	b.n	800575a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d021      	beq.n	800575a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005716:	f7fd fda5 	bl	8003264 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d302      	bcc.n	800572c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d116      	bne.n	800575a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f043 0220 	orr.w	r2, r3, #32
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e023      	b.n	80057a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	0c1b      	lsrs	r3, r3, #16
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d10d      	bne.n	8005780 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	43da      	mvns	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4013      	ands	r3, r2
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf0c      	ite	eq
 8005776:	2301      	moveq	r3, #1
 8005778:	2300      	movne	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	e00c      	b.n	800579a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	43da      	mvns	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4013      	ands	r3, r2
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	bf0c      	ite	eq
 8005792:	2301      	moveq	r3, #1
 8005794:	2300      	movne	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	461a      	mov	r2, r3
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	429a      	cmp	r2, r3
 800579e:	d0b6      	beq.n	800570e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057b8:	e051      	b.n	800585e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c8:	d123      	bne.n	8005812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f043 0204 	orr.w	r2, r3, #4
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e046      	b.n	80058a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005818:	d021      	beq.n	800585e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800581a:	f7fd fd23 	bl	8003264 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	429a      	cmp	r2, r3
 8005828:	d302      	bcc.n	8005830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d116      	bne.n	800585e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f043 0220 	orr.w	r2, r3, #32
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e020      	b.n	80058a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	0c1b      	lsrs	r3, r3, #16
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	d10c      	bne.n	8005882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	43da      	mvns	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4013      	ands	r3, r2
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	bf14      	ite	ne
 800587a:	2301      	movne	r3, #1
 800587c:	2300      	moveq	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	e00b      	b.n	800589a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	43da      	mvns	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4013      	ands	r3, r2
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	bf14      	ite	ne
 8005894:	2301      	movne	r3, #1
 8005896:	2300      	moveq	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d18d      	bne.n	80057ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058b4:	e02d      	b.n	8005912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f8ce 	bl	8005a58 <I2C_IsAcknowledgeFailed>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e02d      	b.n	8005922 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d021      	beq.n	8005912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ce:	f7fd fcc9 	bl	8003264 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d302      	bcc.n	80058e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d116      	bne.n	8005912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e007      	b.n	8005922 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591c:	2b80      	cmp	r3, #128	; 0x80
 800591e:	d1ca      	bne.n	80058b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005936:	e02d      	b.n	8005994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 f88d 	bl	8005a58 <I2C_IsAcknowledgeFailed>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e02d      	b.n	80059a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594e:	d021      	beq.n	8005994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005950:	f7fd fc88 	bl	8003264 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	429a      	cmp	r2, r3
 800595e:	d302      	bcc.n	8005966 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d116      	bne.n	8005994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	f043 0220 	orr.w	r2, r3, #32
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e007      	b.n	80059a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d1ca      	bne.n	8005938 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059b8:	e042      	b.n	8005a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d119      	bne.n	80059fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0210 	mvn.w	r2, #16
 80059d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e029      	b.n	8005a50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fc:	f7fd fc32 	bl	8003264 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d302      	bcc.n	8005a12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d116      	bne.n	8005a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	f043 0220 	orr.w	r2, r3, #32
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e007      	b.n	8005a50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4a:	2b40      	cmp	r3, #64	; 0x40
 8005a4c:	d1b5      	bne.n	80059ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6e:	d11b      	bne.n	8005aa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	f043 0204 	orr.w	r2, r3, #4
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e267      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d075      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ad6:	4b88      	ldr	r3, [pc, #544]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 030c 	and.w	r3, r3, #12
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d00c      	beq.n	8005afc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ae2:	4b85      	ldr	r3, [pc, #532]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d112      	bne.n	8005b14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aee:	4b82      	ldr	r3, [pc, #520]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005afa:	d10b      	bne.n	8005b14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005afc:	4b7e      	ldr	r3, [pc, #504]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d05b      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x108>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d157      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e242      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1c:	d106      	bne.n	8005b2c <HAL_RCC_OscConfig+0x74>
 8005b1e:	4b76      	ldr	r3, [pc, #472]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a75      	ldr	r2, [pc, #468]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	e01d      	b.n	8005b68 <HAL_RCC_OscConfig+0xb0>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b34:	d10c      	bne.n	8005b50 <HAL_RCC_OscConfig+0x98>
 8005b36:	4b70      	ldr	r3, [pc, #448]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a6f      	ldr	r2, [pc, #444]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	4b6d      	ldr	r3, [pc, #436]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a6c      	ldr	r2, [pc, #432]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	e00b      	b.n	8005b68 <HAL_RCC_OscConfig+0xb0>
 8005b50:	4b69      	ldr	r3, [pc, #420]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a68      	ldr	r2, [pc, #416]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	4b66      	ldr	r3, [pc, #408]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a65      	ldr	r2, [pc, #404]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d013      	beq.n	8005b98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b70:	f7fd fb78 	bl	8003264 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b78:	f7fd fb74 	bl	8003264 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b64      	cmp	r3, #100	; 0x64
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e207      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b8a:	4b5b      	ldr	r3, [pc, #364]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0f0      	beq.n	8005b78 <HAL_RCC_OscConfig+0xc0>
 8005b96:	e014      	b.n	8005bc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b98:	f7fd fb64 	bl	8003264 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ba0:	f7fd fb60 	bl	8003264 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b64      	cmp	r3, #100	; 0x64
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e1f3      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bb2:	4b51      	ldr	r3, [pc, #324]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1f0      	bne.n	8005ba0 <HAL_RCC_OscConfig+0xe8>
 8005bbe:	e000      	b.n	8005bc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d063      	beq.n	8005c96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bce:	4b4a      	ldr	r3, [pc, #296]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 030c 	and.w	r3, r3, #12
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00b      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bda:	4b47      	ldr	r3, [pc, #284]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005be2:	2b08      	cmp	r3, #8
 8005be4:	d11c      	bne.n	8005c20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005be6:	4b44      	ldr	r3, [pc, #272]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d116      	bne.n	8005c20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bf2:	4b41      	ldr	r3, [pc, #260]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <HAL_RCC_OscConfig+0x152>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d001      	beq.n	8005c0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e1c7      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c0a:	4b3b      	ldr	r3, [pc, #236]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	4937      	ldr	r1, [pc, #220]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c1e:	e03a      	b.n	8005c96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d020      	beq.n	8005c6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c28:	4b34      	ldr	r3, [pc, #208]	; (8005cfc <HAL_RCC_OscConfig+0x244>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2e:	f7fd fb19 	bl	8003264 <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c34:	e008      	b.n	8005c48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c36:	f7fd fb15 	bl	8003264 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e1a8      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c48:	4b2b      	ldr	r3, [pc, #172]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0f0      	beq.n	8005c36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c54:	4b28      	ldr	r3, [pc, #160]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	4925      	ldr	r1, [pc, #148]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	600b      	str	r3, [r1, #0]
 8005c68:	e015      	b.n	8005c96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c6a:	4b24      	ldr	r3, [pc, #144]	; (8005cfc <HAL_RCC_OscConfig+0x244>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c70:	f7fd faf8 	bl	8003264 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c78:	f7fd faf4 	bl	8003264 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e187      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c8a:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1f0      	bne.n	8005c78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d036      	beq.n	8005d10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d016      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005caa:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <HAL_RCC_OscConfig+0x248>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb0:	f7fd fad8 	bl	8003264 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cb8:	f7fd fad4 	bl	8003264 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e167      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cca:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0f0      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x200>
 8005cd6:	e01b      	b.n	8005d10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cd8:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <HAL_RCC_OscConfig+0x248>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cde:	f7fd fac1 	bl	8003264 <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ce4:	e00e      	b.n	8005d04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ce6:	f7fd fabd 	bl	8003264 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d907      	bls.n	8005d04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e150      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	42470000 	.word	0x42470000
 8005d00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d04:	4b88      	ldr	r3, [pc, #544]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1ea      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 8097 	beq.w	8005e4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d22:	4b81      	ldr	r3, [pc, #516]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10f      	bne.n	8005d4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60bb      	str	r3, [r7, #8]
 8005d32:	4b7d      	ldr	r3, [pc, #500]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	4a7c      	ldr	r2, [pc, #496]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d3e:	4b7a      	ldr	r3, [pc, #488]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d46:	60bb      	str	r3, [r7, #8]
 8005d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d4e:	4b77      	ldr	r3, [pc, #476]	; (8005f2c <HAL_RCC_OscConfig+0x474>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d118      	bne.n	8005d8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d5a:	4b74      	ldr	r3, [pc, #464]	; (8005f2c <HAL_RCC_OscConfig+0x474>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a73      	ldr	r2, [pc, #460]	; (8005f2c <HAL_RCC_OscConfig+0x474>)
 8005d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d66:	f7fd fa7d 	bl	8003264 <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d6e:	f7fd fa79 	bl	8003264 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e10c      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d80:	4b6a      	ldr	r3, [pc, #424]	; (8005f2c <HAL_RCC_OscConfig+0x474>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d106      	bne.n	8005da2 <HAL_RCC_OscConfig+0x2ea>
 8005d94:	4b64      	ldr	r3, [pc, #400]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d98:	4a63      	ldr	r2, [pc, #396]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005da0:	e01c      	b.n	8005ddc <HAL_RCC_OscConfig+0x324>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b05      	cmp	r3, #5
 8005da8:	d10c      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x30c>
 8005daa:	4b5f      	ldr	r3, [pc, #380]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	4a5e      	ldr	r2, [pc, #376]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005db0:	f043 0304 	orr.w	r3, r3, #4
 8005db4:	6713      	str	r3, [r2, #112]	; 0x70
 8005db6:	4b5c      	ldr	r3, [pc, #368]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dba:	4a5b      	ldr	r2, [pc, #364]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005dbc:	f043 0301 	orr.w	r3, r3, #1
 8005dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc2:	e00b      	b.n	8005ddc <HAL_RCC_OscConfig+0x324>
 8005dc4:	4b58      	ldr	r3, [pc, #352]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc8:	4a57      	ldr	r2, [pc, #348]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005dca:	f023 0301 	bic.w	r3, r3, #1
 8005dce:	6713      	str	r3, [r2, #112]	; 0x70
 8005dd0:	4b55      	ldr	r3, [pc, #340]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd4:	4a54      	ldr	r2, [pc, #336]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005dd6:	f023 0304 	bic.w	r3, r3, #4
 8005dda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d015      	beq.n	8005e10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de4:	f7fd fa3e 	bl	8003264 <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dea:	e00a      	b.n	8005e02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dec:	f7fd fa3a 	bl	8003264 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e0cb      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e02:	4b49      	ldr	r3, [pc, #292]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0ee      	beq.n	8005dec <HAL_RCC_OscConfig+0x334>
 8005e0e:	e014      	b.n	8005e3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e10:	f7fd fa28 	bl	8003264 <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e16:	e00a      	b.n	8005e2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e18:	f7fd fa24 	bl	8003264 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e0b5      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e2e:	4b3e      	ldr	r3, [pc, #248]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1ee      	bne.n	8005e18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d105      	bne.n	8005e4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e40:	4b39      	ldr	r3, [pc, #228]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e44:	4a38      	ldr	r2, [pc, #224]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 80a1 	beq.w	8005f98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e56:	4b34      	ldr	r3, [pc, #208]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d05c      	beq.n	8005f1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d141      	bne.n	8005eee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e6a:	4b31      	ldr	r3, [pc, #196]	; (8005f30 <HAL_RCC_OscConfig+0x478>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e70:	f7fd f9f8 	bl	8003264 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e78:	f7fd f9f4 	bl	8003264 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e087      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8a:	4b27      	ldr	r3, [pc, #156]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69da      	ldr	r2, [r3, #28]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	019b      	lsls	r3, r3, #6
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	085b      	lsrs	r3, r3, #1
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	041b      	lsls	r3, r3, #16
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	061b      	lsls	r3, r3, #24
 8005eba:	491b      	ldr	r1, [pc, #108]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ec0:	4b1b      	ldr	r3, [pc, #108]	; (8005f30 <HAL_RCC_OscConfig+0x478>)
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec6:	f7fd f9cd 	bl	8003264 <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ece:	f7fd f9c9 	bl	8003264 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e05c      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ee0:	4b11      	ldr	r3, [pc, #68]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0f0      	beq.n	8005ece <HAL_RCC_OscConfig+0x416>
 8005eec:	e054      	b.n	8005f98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eee:	4b10      	ldr	r3, [pc, #64]	; (8005f30 <HAL_RCC_OscConfig+0x478>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef4:	f7fd f9b6 	bl	8003264 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005efc:	f7fd f9b2 	bl	8003264 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e045      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0e:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <HAL_RCC_OscConfig+0x470>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f0      	bne.n	8005efc <HAL_RCC_OscConfig+0x444>
 8005f1a:	e03d      	b.n	8005f98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d107      	bne.n	8005f34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e038      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	40007000 	.word	0x40007000
 8005f30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f34:	4b1b      	ldr	r3, [pc, #108]	; (8005fa4 <HAL_RCC_OscConfig+0x4ec>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d028      	beq.n	8005f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d121      	bne.n	8005f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d11a      	bne.n	8005f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f64:	4013      	ands	r3, r2
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d111      	bne.n	8005f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7a:	085b      	lsrs	r3, r3, #1
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d107      	bne.n	8005f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d001      	beq.n	8005f98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40023800 	.word	0x40023800

08005fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e0cc      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fbc:	4b68      	ldr	r3, [pc, #416]	; (8006160 <HAL_RCC_ClockConfig+0x1b8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d90c      	bls.n	8005fe4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fca:	4b65      	ldr	r3, [pc, #404]	; (8006160 <HAL_RCC_ClockConfig+0x1b8>)
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd2:	4b63      	ldr	r3, [pc, #396]	; (8006160 <HAL_RCC_ClockConfig+0x1b8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d001      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e0b8      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d020      	beq.n	8006032 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ffc:	4b59      	ldr	r3, [pc, #356]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	4a58      	ldr	r2, [pc, #352]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 8006002:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006006:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d005      	beq.n	8006020 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006014:	4b53      	ldr	r3, [pc, #332]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	4a52      	ldr	r2, [pc, #328]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 800601a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800601e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006020:	4b50      	ldr	r3, [pc, #320]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	494d      	ldr	r1, [pc, #308]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 800602e:	4313      	orrs	r3, r2
 8006030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d044      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d107      	bne.n	8006056 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006046:	4b47      	ldr	r3, [pc, #284]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d119      	bne.n	8006086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e07f      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b02      	cmp	r3, #2
 800605c:	d003      	beq.n	8006066 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006062:	2b03      	cmp	r3, #3
 8006064:	d107      	bne.n	8006076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006066:	4b3f      	ldr	r3, [pc, #252]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e06f      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006076:	4b3b      	ldr	r3, [pc, #236]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e067      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006086:	4b37      	ldr	r3, [pc, #220]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f023 0203 	bic.w	r2, r3, #3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	4934      	ldr	r1, [pc, #208]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 8006094:	4313      	orrs	r3, r2
 8006096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006098:	f7fd f8e4 	bl	8003264 <HAL_GetTick>
 800609c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609e:	e00a      	b.n	80060b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a0:	f7fd f8e0 	bl	8003264 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e04f      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b6:	4b2b      	ldr	r3, [pc, #172]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 020c 	and.w	r2, r3, #12
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d1eb      	bne.n	80060a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060c8:	4b25      	ldr	r3, [pc, #148]	; (8006160 <HAL_RCC_ClockConfig+0x1b8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d20c      	bcs.n	80060f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060d6:	4b22      	ldr	r3, [pc, #136]	; (8006160 <HAL_RCC_ClockConfig+0x1b8>)
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060de:	4b20      	ldr	r3, [pc, #128]	; (8006160 <HAL_RCC_ClockConfig+0x1b8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d001      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e032      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d008      	beq.n	800610e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060fc:	4b19      	ldr	r3, [pc, #100]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	4916      	ldr	r1, [pc, #88]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	4313      	orrs	r3, r2
 800610c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800611a:	4b12      	ldr	r3, [pc, #72]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	490e      	ldr	r1, [pc, #56]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	4313      	orrs	r3, r2
 800612c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800612e:	f000 f821 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 8006132:	4602      	mov	r2, r0
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <HAL_RCC_ClockConfig+0x1bc>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	091b      	lsrs	r3, r3, #4
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	490a      	ldr	r1, [pc, #40]	; (8006168 <HAL_RCC_ClockConfig+0x1c0>)
 8006140:	5ccb      	ldrb	r3, [r1, r3]
 8006142:	fa22 f303 	lsr.w	r3, r2, r3
 8006146:	4a09      	ldr	r2, [pc, #36]	; (800616c <HAL_RCC_ClockConfig+0x1c4>)
 8006148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <HAL_RCC_ClockConfig+0x1c8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f7fb fed6 	bl	8001f00 <HAL_InitTick>

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40023c00 	.word	0x40023c00
 8006164:	40023800 	.word	0x40023800
 8006168:	0800b050 	.word	0x0800b050
 800616c:	20000018 	.word	0x20000018
 8006170:	2000001c 	.word	0x2000001c

08006174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006178:	b090      	sub	sp, #64	; 0x40
 800617a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	637b      	str	r3, [r7, #52]	; 0x34
 8006180:	2300      	movs	r3, #0
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006184:	2300      	movs	r3, #0
 8006186:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800618c:	4b59      	ldr	r3, [pc, #356]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 030c 	and.w	r3, r3, #12
 8006194:	2b08      	cmp	r3, #8
 8006196:	d00d      	beq.n	80061b4 <HAL_RCC_GetSysClockFreq+0x40>
 8006198:	2b08      	cmp	r3, #8
 800619a:	f200 80a1 	bhi.w	80062e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <HAL_RCC_GetSysClockFreq+0x34>
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d003      	beq.n	80061ae <HAL_RCC_GetSysClockFreq+0x3a>
 80061a6:	e09b      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061a8:	4b53      	ldr	r3, [pc, #332]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80061aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80061ac:	e09b      	b.n	80062e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061ae:	4b53      	ldr	r3, [pc, #332]	; (80062fc <HAL_RCC_GetSysClockFreq+0x188>)
 80061b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061b2:	e098      	b.n	80062e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061b4:	4b4f      	ldr	r3, [pc, #316]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061be:	4b4d      	ldr	r3, [pc, #308]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d028      	beq.n	800621c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061ca:	4b4a      	ldr	r3, [pc, #296]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	099b      	lsrs	r3, r3, #6
 80061d0:	2200      	movs	r2, #0
 80061d2:	623b      	str	r3, [r7, #32]
 80061d4:	627a      	str	r2, [r7, #36]	; 0x24
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80061dc:	2100      	movs	r1, #0
 80061de:	4b47      	ldr	r3, [pc, #284]	; (80062fc <HAL_RCC_GetSysClockFreq+0x188>)
 80061e0:	fb03 f201 	mul.w	r2, r3, r1
 80061e4:	2300      	movs	r3, #0
 80061e6:	fb00 f303 	mul.w	r3, r0, r3
 80061ea:	4413      	add	r3, r2
 80061ec:	4a43      	ldr	r2, [pc, #268]	; (80062fc <HAL_RCC_GetSysClockFreq+0x188>)
 80061ee:	fba0 1202 	umull	r1, r2, r0, r2
 80061f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061f4:	460a      	mov	r2, r1
 80061f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80061f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061fa:	4413      	add	r3, r2
 80061fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006200:	2200      	movs	r2, #0
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	61fa      	str	r2, [r7, #28]
 8006206:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800620a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800620e:	f7f9 ffdb 	bl	80001c8 <__aeabi_uldivmod>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4613      	mov	r3, r2
 8006218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800621a:	e053      	b.n	80062c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800621c:	4b35      	ldr	r3, [pc, #212]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	099b      	lsrs	r3, r3, #6
 8006222:	2200      	movs	r2, #0
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	617a      	str	r2, [r7, #20]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800622e:	f04f 0b00 	mov.w	fp, #0
 8006232:	4652      	mov	r2, sl
 8006234:	465b      	mov	r3, fp
 8006236:	f04f 0000 	mov.w	r0, #0
 800623a:	f04f 0100 	mov.w	r1, #0
 800623e:	0159      	lsls	r1, r3, #5
 8006240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006244:	0150      	lsls	r0, r2, #5
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	ebb2 080a 	subs.w	r8, r2, sl
 800624e:	eb63 090b 	sbc.w	r9, r3, fp
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	f04f 0300 	mov.w	r3, #0
 800625a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800625e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006262:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006266:	ebb2 0408 	subs.w	r4, r2, r8
 800626a:	eb63 0509 	sbc.w	r5, r3, r9
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	00eb      	lsls	r3, r5, #3
 8006278:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800627c:	00e2      	lsls	r2, r4, #3
 800627e:	4614      	mov	r4, r2
 8006280:	461d      	mov	r5, r3
 8006282:	eb14 030a 	adds.w	r3, r4, sl
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	eb45 030b 	adc.w	r3, r5, fp
 800628c:	607b      	str	r3, [r7, #4]
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	f04f 0300 	mov.w	r3, #0
 8006296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800629a:	4629      	mov	r1, r5
 800629c:	028b      	lsls	r3, r1, #10
 800629e:	4621      	mov	r1, r4
 80062a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062a4:	4621      	mov	r1, r4
 80062a6:	028a      	lsls	r2, r1, #10
 80062a8:	4610      	mov	r0, r2
 80062aa:	4619      	mov	r1, r3
 80062ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ae:	2200      	movs	r2, #0
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	60fa      	str	r2, [r7, #12]
 80062b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062b8:	f7f9 ff86 	bl	80001c8 <__aeabi_uldivmod>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4613      	mov	r3, r2
 80062c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062c4:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	0c1b      	lsrs	r3, r3, #16
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	3301      	adds	r3, #1
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80062d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062de:	e002      	b.n	80062e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062e0:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80062e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3740      	adds	r7, #64	; 0x40
 80062ec:	46bd      	mov	sp, r7
 80062ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062f2:	bf00      	nop
 80062f4:	40023800 	.word	0x40023800
 80062f8:	00f42400 	.word	0x00f42400
 80062fc:	017d7840 	.word	0x017d7840

08006300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006304:	4b03      	ldr	r3, [pc, #12]	; (8006314 <HAL_RCC_GetHCLKFreq+0x14>)
 8006306:	681b      	ldr	r3, [r3, #0]
}
 8006308:	4618      	mov	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	20000018 	.word	0x20000018

08006318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800631c:	f7ff fff0 	bl	8006300 <HAL_RCC_GetHCLKFreq>
 8006320:	4602      	mov	r2, r0
 8006322:	4b05      	ldr	r3, [pc, #20]	; (8006338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	0a9b      	lsrs	r3, r3, #10
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	4903      	ldr	r1, [pc, #12]	; (800633c <HAL_RCC_GetPCLK1Freq+0x24>)
 800632e:	5ccb      	ldrb	r3, [r1, r3]
 8006330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006334:	4618      	mov	r0, r3
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40023800 	.word	0x40023800
 800633c:	0800b060 	.word	0x0800b060

08006340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006344:	f7ff ffdc 	bl	8006300 <HAL_RCC_GetHCLKFreq>
 8006348:	4602      	mov	r2, r0
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	0b5b      	lsrs	r3, r3, #13
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	4903      	ldr	r1, [pc, #12]	; (8006364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006356:	5ccb      	ldrb	r3, [r1, r3]
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800635c:	4618      	mov	r0, r3
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40023800 	.word	0x40023800
 8006364:	0800b060 	.word	0x0800b060

08006368 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	220f      	movs	r2, #15
 8006376:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006378:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <HAL_RCC_GetClockConfig+0x5c>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 0203 	and.w	r2, r3, #3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006384:	4b0f      	ldr	r3, [pc, #60]	; (80063c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006390:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800639c:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <HAL_RCC_GetClockConfig+0x5c>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	08db      	lsrs	r3, r3, #3
 80063a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <HAL_RCC_GetClockConfig+0x60>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0207 	and.w	r2, r3, #7
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	601a      	str	r2, [r3, #0]
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40023800 	.word	0x40023800
 80063c8:	40023c00 	.word	0x40023c00

080063cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e07b      	b.n	80064d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d108      	bne.n	80063f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ee:	d009      	beq.n	8006404 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	61da      	str	r2, [r3, #28]
 80063f6:	e005      	b.n	8006404 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fb fcfe 	bl	8001e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800643a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006474:	431a      	orrs	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006488:	ea42 0103 	orr.w	r1, r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006490:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	0c1b      	lsrs	r3, r3, #16
 80064a2:	f003 0104 	and.w	r1, r3, #4
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	f003 0210 	and.w	r2, r3, #16
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b082      	sub	sp, #8
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e041      	b.n	8006574 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d106      	bne.n	800650a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7fc f87f 	bl	8002608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2202      	movs	r2, #2
 800650e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3304      	adds	r3, #4
 800651a:	4619      	mov	r1, r3
 800651c:	4610      	mov	r0, r2
 800651e:	f000 fc19 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d001      	beq.n	8006594 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e046      	b.n	8006622 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a23      	ldr	r2, [pc, #140]	; (8006630 <HAL_TIM_Base_Start+0xb4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d022      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ae:	d01d      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1f      	ldr	r2, [pc, #124]	; (8006634 <HAL_TIM_Base_Start+0xb8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d018      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1e      	ldr	r2, [pc, #120]	; (8006638 <HAL_TIM_Base_Start+0xbc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1c      	ldr	r2, [pc, #112]	; (800663c <HAL_TIM_Base_Start+0xc0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00e      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <HAL_TIM_Base_Start+0xc4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d009      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a19      	ldr	r2, [pc, #100]	; (8006644 <HAL_TIM_Base_Start+0xc8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d004      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a18      	ldr	r2, [pc, #96]	; (8006648 <HAL_TIM_Base_Start+0xcc>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d111      	bne.n	8006610 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b06      	cmp	r3, #6
 80065fc:	d010      	beq.n	8006620 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0201 	orr.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660e:	e007      	b.n	8006620 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40010000 	.word	0x40010000
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40000c00 	.word	0x40000c00
 8006640:	40010400 	.word	0x40010400
 8006644:	40014000 	.word	0x40014000
 8006648:	40001800 	.word	0x40001800

0800664c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	d001      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e04e      	b.n	8006702 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a23      	ldr	r2, [pc, #140]	; (8006710 <HAL_TIM_Base_Start_IT+0xc4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d022      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668e:	d01d      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <HAL_TIM_Base_Start_IT+0xc8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d018      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <HAL_TIM_Base_Start_IT+0xcc>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d013      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1c      	ldr	r2, [pc, #112]	; (800671c <HAL_TIM_Base_Start_IT+0xd0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00e      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <HAL_TIM_Base_Start_IT+0xd4>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d009      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a19      	ldr	r2, [pc, #100]	; (8006724 <HAL_TIM_Base_Start_IT+0xd8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a18      	ldr	r2, [pc, #96]	; (8006728 <HAL_TIM_Base_Start_IT+0xdc>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d111      	bne.n	80066f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b06      	cmp	r3, #6
 80066dc:	d010      	beq.n	8006700 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0201 	orr.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ee:	e007      	b.n	8006700 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40010000 	.word	0x40010000
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	40010400 	.word	0x40010400
 8006724:	40014000 	.word	0x40014000
 8006728:	40001800 	.word	0x40001800

0800672c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e041      	b.n	80067c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f839 	bl	80067ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3304      	adds	r3, #4
 8006768:	4619      	mov	r1, r3
 800676a:	4610      	mov	r0, r2
 800676c:	f000 faf2 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d122      	bne.n	800683a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d11b      	bne.n	800683a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f06f 0202 	mvn.w	r2, #2
 800680a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa78 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006826:	e005      	b.n	8006834 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fa6a 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa7b 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	2b04      	cmp	r3, #4
 8006846:	d122      	bne.n	800688e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b04      	cmp	r3, #4
 8006854:	d11b      	bne.n	800688e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f06f 0204 	mvn.w	r2, #4
 800685e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fa4e 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 800687a:	e005      	b.n	8006888 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fa40 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa51 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b08      	cmp	r3, #8
 800689a:	d122      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d11b      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f06f 0208 	mvn.w	r2, #8
 80068b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2204      	movs	r2, #4
 80068b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fa24 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 80068ce:	e005      	b.n	80068dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fa16 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa27 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f003 0310 	and.w	r3, r3, #16
 80068ec:	2b10      	cmp	r3, #16
 80068ee:	d122      	bne.n	8006936 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d11b      	bne.n	8006936 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f06f 0210 	mvn.w	r2, #16
 8006906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2208      	movs	r2, #8
 800690c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f9fa 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006922:	e005      	b.n	8006930 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f9ec 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f9fd 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b01      	cmp	r3, #1
 8006942:	d10e      	bne.n	8006962 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b01      	cmp	r3, #1
 8006950:	d107      	bne.n	8006962 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f06f 0201 	mvn.w	r2, #1
 800695a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7fb fa15 	bl	8001d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696c:	2b80      	cmp	r3, #128	; 0x80
 800696e:	d10e      	bne.n	800698e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	d107      	bne.n	800698e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fda5 	bl	80074d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006998:	2b40      	cmp	r3, #64	; 0x40
 800699a:	d10e      	bne.n	80069ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d107      	bne.n	80069ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f9c2 	bl	8006d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d10e      	bne.n	80069e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d107      	bne.n	80069e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f06f 0220 	mvn.w	r2, #32
 80069de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fd6f 	bl	80074c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e0ae      	b.n	8006b6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b0c      	cmp	r3, #12
 8006a1a:	f200 809f 	bhi.w	8006b5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a1e:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a24:	08006a59 	.word	0x08006a59
 8006a28:	08006b5d 	.word	0x08006b5d
 8006a2c:	08006b5d 	.word	0x08006b5d
 8006a30:	08006b5d 	.word	0x08006b5d
 8006a34:	08006a99 	.word	0x08006a99
 8006a38:	08006b5d 	.word	0x08006b5d
 8006a3c:	08006b5d 	.word	0x08006b5d
 8006a40:	08006b5d 	.word	0x08006b5d
 8006a44:	08006adb 	.word	0x08006adb
 8006a48:	08006b5d 	.word	0x08006b5d
 8006a4c:	08006b5d 	.word	0x08006b5d
 8006a50:	08006b5d 	.word	0x08006b5d
 8006a54:	08006b1b 	.word	0x08006b1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fa18 	bl	8006e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0208 	orr.w	r2, r2, #8
 8006a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0204 	bic.w	r2, r2, #4
 8006a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6999      	ldr	r1, [r3, #24]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	691a      	ldr	r2, [r3, #16]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	619a      	str	r2, [r3, #24]
      break;
 8006a96:	e064      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fa68 	bl	8006f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699a      	ldr	r2, [r3, #24]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6999      	ldr	r1, [r3, #24]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	021a      	lsls	r2, r3, #8
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	619a      	str	r2, [r3, #24]
      break;
 8006ad8:	e043      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fabd 	bl	8007060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69da      	ldr	r2, [r3, #28]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0208 	orr.w	r2, r2, #8
 8006af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69da      	ldr	r2, [r3, #28]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0204 	bic.w	r2, r2, #4
 8006b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69d9      	ldr	r1, [r3, #28]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	61da      	str	r2, [r3, #28]
      break;
 8006b18:	e023      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68b9      	ldr	r1, [r7, #8]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fb11 	bl	8007148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69d9      	ldr	r1, [r3, #28]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	021a      	lsls	r2, r3, #8
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	61da      	str	r2, [r3, #28]
      break;
 8006b5a:	e002      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_TIM_ConfigClockSource+0x1c>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e0b4      	b.n	8006cfa <HAL_TIM_ConfigClockSource+0x186>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc8:	d03e      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0xd4>
 8006bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bce:	f200 8087 	bhi.w	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd6:	f000 8086 	beq.w	8006ce6 <HAL_TIM_ConfigClockSource+0x172>
 8006bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bde:	d87f      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b70      	cmp	r3, #112	; 0x70
 8006be2:	d01a      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0xa6>
 8006be4:	2b70      	cmp	r3, #112	; 0x70
 8006be6:	d87b      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b60      	cmp	r3, #96	; 0x60
 8006bea:	d050      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0x11a>
 8006bec:	2b60      	cmp	r3, #96	; 0x60
 8006bee:	d877      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf0:	2b50      	cmp	r3, #80	; 0x50
 8006bf2:	d03c      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0xfa>
 8006bf4:	2b50      	cmp	r3, #80	; 0x50
 8006bf6:	d873      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf8:	2b40      	cmp	r3, #64	; 0x40
 8006bfa:	d058      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x13a>
 8006bfc:	2b40      	cmp	r3, #64	; 0x40
 8006bfe:	d86f      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c00:	2b30      	cmp	r3, #48	; 0x30
 8006c02:	d064      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c04:	2b30      	cmp	r3, #48	; 0x30
 8006c06:	d86b      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d060      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d867      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d05c      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c14:	2b10      	cmp	r3, #16
 8006c16:	d05a      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c18:	e062      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6899      	ldr	r1, [r3, #8]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f000 fb5d 	bl	80072e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	609a      	str	r2, [r3, #8]
      break;
 8006c46:	e04f      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	6899      	ldr	r1, [r3, #8]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f000 fb46 	bl	80072e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c6a:	609a      	str	r2, [r3, #8]
      break;
 8006c6c:	e03c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6859      	ldr	r1, [r3, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f000 faba 	bl	80071f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2150      	movs	r1, #80	; 0x50
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fb13 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006c8c:	e02c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6859      	ldr	r1, [r3, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f000 fad9 	bl	8007252 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2160      	movs	r1, #96	; 0x60
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fb03 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006cac:	e01c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6859      	ldr	r1, [r3, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f000 fa9a 	bl	80071f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2140      	movs	r1, #64	; 0x40
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 faf3 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006ccc:	e00c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f000 faea 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006cde:	e003      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce4:	e000      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d32:	bf00      	nop
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a40      	ldr	r2, [pc, #256]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d013      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d00f      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a3d      	ldr	r2, [pc, #244]	; (8006e6c <TIM_Base_SetConfig+0x118>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00b      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a3c      	ldr	r2, [pc, #240]	; (8006e70 <TIM_Base_SetConfig+0x11c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d007      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a3b      	ldr	r2, [pc, #236]	; (8006e74 <TIM_Base_SetConfig+0x120>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a3a      	ldr	r2, [pc, #232]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d108      	bne.n	8006da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2f      	ldr	r2, [pc, #188]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d02b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db4:	d027      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2c      	ldr	r2, [pc, #176]	; (8006e6c <TIM_Base_SetConfig+0x118>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d023      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a2b      	ldr	r2, [pc, #172]	; (8006e70 <TIM_Base_SetConfig+0x11c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d01f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a2a      	ldr	r2, [pc, #168]	; (8006e74 <TIM_Base_SetConfig+0x120>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a29      	ldr	r2, [pc, #164]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d017      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a28      	ldr	r2, [pc, #160]	; (8006e7c <TIM_Base_SetConfig+0x128>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a27      	ldr	r2, [pc, #156]	; (8006e80 <TIM_Base_SetConfig+0x12c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a26      	ldr	r2, [pc, #152]	; (8006e84 <TIM_Base_SetConfig+0x130>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a25      	ldr	r2, [pc, #148]	; (8006e88 <TIM_Base_SetConfig+0x134>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a24      	ldr	r2, [pc, #144]	; (8006e8c <TIM_Base_SetConfig+0x138>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a23      	ldr	r2, [pc, #140]	; (8006e90 <TIM_Base_SetConfig+0x13c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_Base_SetConfig+0xf8>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d103      	bne.n	8006e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	615a      	str	r2, [r3, #20]
}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40000800 	.word	0x40000800
 8006e74:	40000c00 	.word	0x40000c00
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800
 8006e88:	40001800 	.word	0x40001800
 8006e8c:	40001c00 	.word	0x40001c00
 8006e90:	40002000 	.word	0x40002000

08006e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f023 0201 	bic.w	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f023 0302 	bic.w	r3, r3, #2
 8006edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a20      	ldr	r2, [pc, #128]	; (8006f6c <TIM_OC1_SetConfig+0xd8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d003      	beq.n	8006ef8 <TIM_OC1_SetConfig+0x64>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <TIM_OC1_SetConfig+0xdc>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d10c      	bne.n	8006f12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f023 0308 	bic.w	r3, r3, #8
 8006efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f023 0304 	bic.w	r3, r3, #4
 8006f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <TIM_OC1_SetConfig+0xd8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d003      	beq.n	8006f22 <TIM_OC1_SetConfig+0x8e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a14      	ldr	r2, [pc, #80]	; (8006f70 <TIM_OC1_SetConfig+0xdc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d111      	bne.n	8006f46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	621a      	str	r2, [r3, #32]
}
 8006f60:	bf00      	nop
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	40010000 	.word	0x40010000
 8006f70:	40010400 	.word	0x40010400

08006f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f023 0210 	bic.w	r2, r3, #16
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f023 0320 	bic.w	r3, r3, #32
 8006fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a22      	ldr	r2, [pc, #136]	; (8007058 <TIM_OC2_SetConfig+0xe4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <TIM_OC2_SetConfig+0x68>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a21      	ldr	r2, [pc, #132]	; (800705c <TIM_OC2_SetConfig+0xe8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d10d      	bne.n	8006ff8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a17      	ldr	r2, [pc, #92]	; (8007058 <TIM_OC2_SetConfig+0xe4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <TIM_OC2_SetConfig+0x94>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a16      	ldr	r2, [pc, #88]	; (800705c <TIM_OC2_SetConfig+0xe8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d113      	bne.n	8007030 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800700e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40010000 	.word	0x40010000
 800705c:	40010400 	.word	0x40010400

08007060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0303 	bic.w	r3, r3, #3
 8007096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a21      	ldr	r2, [pc, #132]	; (8007140 <TIM_OC3_SetConfig+0xe0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d003      	beq.n	80070c6 <TIM_OC3_SetConfig+0x66>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a20      	ldr	r2, [pc, #128]	; (8007144 <TIM_OC3_SetConfig+0xe4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d10d      	bne.n	80070e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	021b      	lsls	r3, r3, #8
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a16      	ldr	r2, [pc, #88]	; (8007140 <TIM_OC3_SetConfig+0xe0>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d003      	beq.n	80070f2 <TIM_OC3_SetConfig+0x92>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a15      	ldr	r2, [pc, #84]	; (8007144 <TIM_OC3_SetConfig+0xe4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d113      	bne.n	800711a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	621a      	str	r2, [r3, #32]
}
 8007134:	bf00      	nop
 8007136:	371c      	adds	r7, #28
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	40010000 	.word	0x40010000
 8007144:	40010400 	.word	0x40010400

08007148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	031b      	lsls	r3, r3, #12
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a12      	ldr	r2, [pc, #72]	; (80071ec <TIM_OC4_SetConfig+0xa4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <TIM_OC4_SetConfig+0x68>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a11      	ldr	r2, [pc, #68]	; (80071f0 <TIM_OC4_SetConfig+0xa8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d109      	bne.n	80071c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	019b      	lsls	r3, r3, #6
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40010400 	.word	0x40010400

080071f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f023 0201 	bic.w	r2, r3, #1
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800721e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f023 030a 	bic.w	r3, r3, #10
 8007230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007252:	b480      	push	{r7}
 8007254:	b087      	sub	sp, #28
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f023 0210 	bic.w	r2, r3, #16
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800727c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	031b      	lsls	r3, r3, #12
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800728e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f043 0307 	orr.w	r3, r3, #7
 80072d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	609a      	str	r2, [r3, #8]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	021a      	lsls	r2, r3, #8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	431a      	orrs	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4313      	orrs	r3, r2
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	609a      	str	r2, [r3, #8]
}
 800731c:	bf00      	nop
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007338:	2b01      	cmp	r3, #1
 800733a:	d101      	bne.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800733c:	2302      	movs	r3, #2
 800733e:	e05a      	b.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a21      	ldr	r2, [pc, #132]	; (8007404 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d022      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738c:	d01d      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1d      	ldr	r2, [pc, #116]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d018      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a1b      	ldr	r2, [pc, #108]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d013      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1a      	ldr	r2, [pc, #104]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00e      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a18      	ldr	r2, [pc, #96]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d009      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a17      	ldr	r2, [pc, #92]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d004      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a15      	ldr	r2, [pc, #84]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d10c      	bne.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	40010000 	.word	0x40010000
 8007408:	40000400 	.word	0x40000400
 800740c:	40000800 	.word	0x40000800
 8007410:	40000c00 	.word	0x40000c00
 8007414:	40010400 	.word	0x40010400
 8007418:	40014000 	.word	0x40014000
 800741c:	40001800 	.word	0x40001800

08007420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007438:	2302      	movs	r3, #2
 800743a:	e03d      	b.n	80074b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e03f      	b.n	800757e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7fb fa3c 	bl	8002990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2224      	movs	r2, #36	; 0x24
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800752e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fc67 	bl	8007e04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	695a      	ldr	r2, [r3, #20]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68da      	ldr	r2, [r3, #12]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2220      	movs	r2, #32
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b0ba      	sub	sp, #232	; 0xe8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80075ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80075c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10f      	bne.n	80075ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d2:	f003 0320 	and.w	r3, r3, #32
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d009      	beq.n	80075ee <HAL_UART_IRQHandler+0x66>
 80075da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fb51 	bl	8007c8e <UART_Receive_IT>
      return;
 80075ec:	e256      	b.n	8007a9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80075ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 80de 	beq.w	80077b4 <HAL_UART_IRQHandler+0x22c>
 80075f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d106      	bne.n	8007612 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007608:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 80d1 	beq.w	80077b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <HAL_UART_IRQHandler+0xae>
 800761e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007626:	2b00      	cmp	r3, #0
 8007628:	d005      	beq.n	8007636 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	f043 0201 	orr.w	r2, r3, #1
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800763a:	f003 0304 	and.w	r3, r3, #4
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00b      	beq.n	800765a <HAL_UART_IRQHandler+0xd2>
 8007642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	f043 0202 	orr.w	r2, r3, #2
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800765a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00b      	beq.n	800767e <HAL_UART_IRQHandler+0xf6>
 8007666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d005      	beq.n	800767e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	f043 0204 	orr.w	r2, r3, #4
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800767e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007682:	f003 0308 	and.w	r3, r3, #8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d011      	beq.n	80076ae <HAL_UART_IRQHandler+0x126>
 800768a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d105      	bne.n	80076a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d005      	beq.n	80076ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a6:	f043 0208 	orr.w	r2, r3, #8
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 81ed 	beq.w	8007a92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076bc:	f003 0320 	and.w	r3, r3, #32
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d008      	beq.n	80076d6 <HAL_UART_IRQHandler+0x14e>
 80076c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fadc 	bl	8007c8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e0:	2b40      	cmp	r3, #64	; 0x40
 80076e2:	bf0c      	ite	eq
 80076e4:	2301      	moveq	r3, #1
 80076e6:	2300      	movne	r3, #0
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d103      	bne.n	8007702 <HAL_UART_IRQHandler+0x17a>
 80076fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d04f      	beq.n	80077a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f9e4 	bl	8007ad0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d141      	bne.n	800779a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3314      	adds	r3, #20
 800771c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007724:	e853 3f00 	ldrex	r3, [r3]
 8007728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800772c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3314      	adds	r3, #20
 800773e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800774e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007752:	e841 2300 	strex	r3, r2, [r1]
 8007756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800775a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1d9      	bne.n	8007716 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007766:	2b00      	cmp	r3, #0
 8007768:	d013      	beq.n	8007792 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776e:	4a7d      	ldr	r2, [pc, #500]	; (8007964 <HAL_UART_IRQHandler+0x3dc>)
 8007770:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007776:	4618      	mov	r0, r3
 8007778:	f7fc fb02 	bl	8003d80 <HAL_DMA_Abort_IT>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d016      	beq.n	80077b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800778c:	4610      	mov	r0, r2
 800778e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007790:	e00e      	b.n	80077b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f986 	bl	8007aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007798:	e00a      	b.n	80077b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f982 	bl	8007aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a0:	e006      	b.n	80077b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f97e 	bl	8007aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077ae:	e170      	b.n	8007a92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b0:	bf00      	nop
    return;
 80077b2:	e16e      	b.n	8007a92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	f040 814a 	bne.w	8007a52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80077be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c2:	f003 0310 	and.w	r3, r3, #16
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f000 8143 	beq.w	8007a52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80077cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 813c 	beq.w	8007a52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077da:	2300      	movs	r3, #0
 80077dc:	60bb      	str	r3, [r7, #8]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	60bb      	str	r3, [r7, #8]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	60bb      	str	r3, [r7, #8]
 80077ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fa:	2b40      	cmp	r3, #64	; 0x40
 80077fc:	f040 80b4 	bne.w	8007968 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800780c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 8140 	beq.w	8007a96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800781a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800781e:	429a      	cmp	r2, r3
 8007820:	f080 8139 	bcs.w	8007a96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800782a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007836:	f000 8088 	beq.w	800794a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	330c      	adds	r3, #12
 8007840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	330c      	adds	r3, #12
 8007862:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007866:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800786a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007872:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800787e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1d9      	bne.n	800783a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3314      	adds	r3, #20
 800788c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007898:	f023 0301 	bic.w	r3, r3, #1
 800789c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3314      	adds	r3, #20
 80078a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e1      	bne.n	8007886 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3314      	adds	r3, #20
 80078c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3314      	adds	r3, #20
 80078e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e3      	bne.n	80078c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	330c      	adds	r3, #12
 800790e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800791a:	f023 0310 	bic.w	r3, r3, #16
 800791e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	330c      	adds	r3, #12
 8007928:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800792c:	65ba      	str	r2, [r7, #88]	; 0x58
 800792e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800793a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e3      	bne.n	8007908 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007944:	4618      	mov	r0, r3
 8007946:	f7fc f9ab 	bl	8003ca0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007952:	b29b      	uxth	r3, r3
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	b29b      	uxth	r3, r3
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f8ac 	bl	8007ab8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007960:	e099      	b.n	8007a96 <HAL_UART_IRQHandler+0x50e>
 8007962:	bf00      	nop
 8007964:	08007b97 	.word	0x08007b97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007970:	b29b      	uxth	r3, r3
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 808b 	beq.w	8007a9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 8086 	beq.w	8007a9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	330c      	adds	r3, #12
 8007994:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800799e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	330c      	adds	r3, #12
 80079ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80079b2:	647a      	str	r2, [r7, #68]	; 0x44
 80079b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e3      	bne.n	800798e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3314      	adds	r3, #20
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	623b      	str	r3, [r7, #32]
   return(result);
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	f023 0301 	bic.w	r3, r3, #1
 80079dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3314      	adds	r3, #20
 80079e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079ea:	633a      	str	r2, [r7, #48]	; 0x30
 80079ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e3      	bne.n	80079c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	330c      	adds	r3, #12
 8007a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	e853 3f00 	ldrex	r3, [r3]
 8007a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0310 	bic.w	r3, r3, #16
 8007a22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a30:	61fa      	str	r2, [r7, #28]
 8007a32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	69b9      	ldr	r1, [r7, #24]
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e3      	bne.n	8007a0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f834 	bl	8007ab8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a50:	e023      	b.n	8007a9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d009      	beq.n	8007a72 <HAL_UART_IRQHandler+0x4ea>
 8007a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f8a7 	bl	8007bbe <UART_Transmit_IT>
    return;
 8007a70:	e014      	b.n	8007a9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00e      	beq.n	8007a9c <HAL_UART_IRQHandler+0x514>
 8007a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d008      	beq.n	8007a9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f8e7 	bl	8007c5e <UART_EndTransmit_IT>
    return;
 8007a90:	e004      	b.n	8007a9c <HAL_UART_IRQHandler+0x514>
    return;
 8007a92:	bf00      	nop
 8007a94:	e002      	b.n	8007a9c <HAL_UART_IRQHandler+0x514>
      return;
 8007a96:	bf00      	nop
 8007a98:	e000      	b.n	8007a9c <HAL_UART_IRQHandler+0x514>
      return;
 8007a9a:	bf00      	nop
  }
}
 8007a9c:	37e8      	adds	r7, #232	; 0xe8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop

08007aa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b095      	sub	sp, #84	; 0x54
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	330c      	adds	r3, #12
 8007ade:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	330c      	adds	r3, #12
 8007af6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007af8:	643a      	str	r2, [r7, #64]	; 0x40
 8007afa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007afe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e5      	bne.n	8007ad8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3314      	adds	r3, #20
 8007b12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	e853 3f00 	ldrex	r3, [r3]
 8007b1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	f023 0301 	bic.w	r3, r3, #1
 8007b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3314      	adds	r3, #20
 8007b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b34:	e841 2300 	strex	r3, r2, [r1]
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e5      	bne.n	8007b0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d119      	bne.n	8007b7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	330c      	adds	r3, #12
 8007b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f023 0310 	bic.w	r3, r3, #16
 8007b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	330c      	adds	r3, #12
 8007b66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b68:	61ba      	str	r2, [r7, #24]
 8007b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	6979      	ldr	r1, [r7, #20]
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	613b      	str	r3, [r7, #16]
   return(result);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e5      	bne.n	8007b48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b8a:	bf00      	nop
 8007b8c:	3754      	adds	r7, #84	; 0x54
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f7ff ff77 	bl	8007aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bb6:	bf00      	nop
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b085      	sub	sp, #20
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b21      	cmp	r3, #33	; 0x21
 8007bd0:	d13e      	bne.n	8007c50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bda:	d114      	bne.n	8007c06 <UART_Transmit_IT+0x48>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d110      	bne.n	8007c06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	1c9a      	adds	r2, r3, #2
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	621a      	str	r2, [r3, #32]
 8007c04:	e008      	b.n	8007c18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	1c59      	adds	r1, r3, #1
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	6211      	str	r1, [r2, #32]
 8007c10:	781a      	ldrb	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	4619      	mov	r1, r3
 8007c26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10f      	bne.n	8007c4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e000      	b.n	8007c52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c50:	2302      	movs	r3, #2
  }
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68da      	ldr	r2, [r3, #12]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7f8 ff78 	bl	8000b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b08c      	sub	sp, #48	; 0x30
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b22      	cmp	r3, #34	; 0x22
 8007ca0:	f040 80ab 	bne.w	8007dfa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cac:	d117      	bne.n	8007cde <UART_Receive_IT+0x50>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d113      	bne.n	8007cde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd6:	1c9a      	adds	r2, r3, #2
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	629a      	str	r2, [r3, #40]	; 0x28
 8007cdc:	e026      	b.n	8007d2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf0:	d007      	beq.n	8007d02 <UART_Receive_IT+0x74>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10a      	bne.n	8007d10 <UART_Receive_IT+0x82>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d106      	bne.n	8007d10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	701a      	strb	r2, [r3, #0]
 8007d0e:	e008      	b.n	8007d22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d15a      	bne.n	8007df6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 0220 	bic.w	r2, r2, #32
 8007d4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	695a      	ldr	r2, [r3, #20]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0201 	bic.w	r2, r2, #1
 8007d6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d135      	bne.n	8007dec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	330c      	adds	r3, #12
 8007d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	613b      	str	r3, [r7, #16]
   return(result);
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f023 0310 	bic.w	r3, r3, #16
 8007d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	330c      	adds	r3, #12
 8007da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da6:	623a      	str	r2, [r7, #32]
 8007da8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	69f9      	ldr	r1, [r7, #28]
 8007dac:	6a3a      	ldr	r2, [r7, #32]
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e5      	bne.n	8007d86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	2b10      	cmp	r3, #16
 8007dc6:	d10a      	bne.n	8007dde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff fe67 	bl	8007ab8 <HAL_UARTEx_RxEventCallback>
 8007dea:	e002      	b.n	8007df2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7f8 fed7 	bl	8000ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	e002      	b.n	8007dfc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	e000      	b.n	8007dfc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007dfa:	2302      	movs	r3, #2
  }
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3730      	adds	r7, #48	; 0x30
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e08:	b0c0      	sub	sp, #256	; 0x100
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e20:	68d9      	ldr	r1, [r3, #12]
 8007e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	ea40 0301 	orr.w	r3, r0, r1
 8007e2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e32:	689a      	ldr	r2, [r3, #8]
 8007e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	431a      	orrs	r2, r3
 8007e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e5c:	f021 010c 	bic.w	r1, r1, #12
 8007e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e6a:	430b      	orrs	r3, r1
 8007e6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e7e:	6999      	ldr	r1, [r3, #24]
 8007e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	ea40 0301 	orr.w	r3, r0, r1
 8007e8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b8f      	ldr	r3, [pc, #572]	; (80080d0 <UART_SetConfig+0x2cc>)
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d005      	beq.n	8007ea4 <UART_SetConfig+0xa0>
 8007e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4b8d      	ldr	r3, [pc, #564]	; (80080d4 <UART_SetConfig+0x2d0>)
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d104      	bne.n	8007eae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ea4:	f7fe fa4c 	bl	8006340 <HAL_RCC_GetPCLK2Freq>
 8007ea8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007eac:	e003      	b.n	8007eb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eae:	f7fe fa33 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8007eb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec0:	f040 810c 	bne.w	80080dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ece:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007ed2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007ed6:	4622      	mov	r2, r4
 8007ed8:	462b      	mov	r3, r5
 8007eda:	1891      	adds	r1, r2, r2
 8007edc:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ede:	415b      	adcs	r3, r3
 8007ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ee2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	eb12 0801 	adds.w	r8, r2, r1
 8007eec:	4629      	mov	r1, r5
 8007eee:	eb43 0901 	adc.w	r9, r3, r1
 8007ef2:	f04f 0200 	mov.w	r2, #0
 8007ef6:	f04f 0300 	mov.w	r3, #0
 8007efa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007efe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f06:	4690      	mov	r8, r2
 8007f08:	4699      	mov	r9, r3
 8007f0a:	4623      	mov	r3, r4
 8007f0c:	eb18 0303 	adds.w	r3, r8, r3
 8007f10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f14:	462b      	mov	r3, r5
 8007f16:	eb49 0303 	adc.w	r3, r9, r3
 8007f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f32:	460b      	mov	r3, r1
 8007f34:	18db      	adds	r3, r3, r3
 8007f36:	653b      	str	r3, [r7, #80]	; 0x50
 8007f38:	4613      	mov	r3, r2
 8007f3a:	eb42 0303 	adc.w	r3, r2, r3
 8007f3e:	657b      	str	r3, [r7, #84]	; 0x54
 8007f40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f48:	f7f8 f93e 	bl	80001c8 <__aeabi_uldivmod>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4b61      	ldr	r3, [pc, #388]	; (80080d8 <UART_SetConfig+0x2d4>)
 8007f52:	fba3 2302 	umull	r2, r3, r3, r2
 8007f56:	095b      	lsrs	r3, r3, #5
 8007f58:	011c      	lsls	r4, r3, #4
 8007f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007f68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	464b      	mov	r3, r9
 8007f70:	1891      	adds	r1, r2, r2
 8007f72:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f74:	415b      	adcs	r3, r3
 8007f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f7c:	4641      	mov	r1, r8
 8007f7e:	eb12 0a01 	adds.w	sl, r2, r1
 8007f82:	4649      	mov	r1, r9
 8007f84:	eb43 0b01 	adc.w	fp, r3, r1
 8007f88:	f04f 0200 	mov.w	r2, #0
 8007f8c:	f04f 0300 	mov.w	r3, #0
 8007f90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f9c:	4692      	mov	sl, r2
 8007f9e:	469b      	mov	fp, r3
 8007fa0:	4643      	mov	r3, r8
 8007fa2:	eb1a 0303 	adds.w	r3, sl, r3
 8007fa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007faa:	464b      	mov	r3, r9
 8007fac:	eb4b 0303 	adc.w	r3, fp, r3
 8007fb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007fc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	18db      	adds	r3, r3, r3
 8007fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8007fce:	4613      	mov	r3, r2
 8007fd0:	eb42 0303 	adc.w	r3, r2, r3
 8007fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8007fd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007fde:	f7f8 f8f3 	bl	80001c8 <__aeabi_uldivmod>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	4b3b      	ldr	r3, [pc, #236]	; (80080d8 <UART_SetConfig+0x2d4>)
 8007fea:	fba3 2301 	umull	r2, r3, r3, r1
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	2264      	movs	r2, #100	; 0x64
 8007ff2:	fb02 f303 	mul.w	r3, r2, r3
 8007ff6:	1acb      	subs	r3, r1, r3
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ffe:	4b36      	ldr	r3, [pc, #216]	; (80080d8 <UART_SetConfig+0x2d4>)
 8008000:	fba3 2302 	umull	r2, r3, r3, r2
 8008004:	095b      	lsrs	r3, r3, #5
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800800c:	441c      	add	r4, r3
 800800e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008012:	2200      	movs	r2, #0
 8008014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008018:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800801c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008020:	4642      	mov	r2, r8
 8008022:	464b      	mov	r3, r9
 8008024:	1891      	adds	r1, r2, r2
 8008026:	63b9      	str	r1, [r7, #56]	; 0x38
 8008028:	415b      	adcs	r3, r3
 800802a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800802c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008030:	4641      	mov	r1, r8
 8008032:	1851      	adds	r1, r2, r1
 8008034:	6339      	str	r1, [r7, #48]	; 0x30
 8008036:	4649      	mov	r1, r9
 8008038:	414b      	adcs	r3, r1
 800803a:	637b      	str	r3, [r7, #52]	; 0x34
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	f04f 0300 	mov.w	r3, #0
 8008044:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008048:	4659      	mov	r1, fp
 800804a:	00cb      	lsls	r3, r1, #3
 800804c:	4651      	mov	r1, sl
 800804e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008052:	4651      	mov	r1, sl
 8008054:	00ca      	lsls	r2, r1, #3
 8008056:	4610      	mov	r0, r2
 8008058:	4619      	mov	r1, r3
 800805a:	4603      	mov	r3, r0
 800805c:	4642      	mov	r2, r8
 800805e:	189b      	adds	r3, r3, r2
 8008060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008064:	464b      	mov	r3, r9
 8008066:	460a      	mov	r2, r1
 8008068:	eb42 0303 	adc.w	r3, r2, r3
 800806c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800807c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008080:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008084:	460b      	mov	r3, r1
 8008086:	18db      	adds	r3, r3, r3
 8008088:	62bb      	str	r3, [r7, #40]	; 0x28
 800808a:	4613      	mov	r3, r2
 800808c:	eb42 0303 	adc.w	r3, r2, r3
 8008090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008092:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008096:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800809a:	f7f8 f895 	bl	80001c8 <__aeabi_uldivmod>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4b0d      	ldr	r3, [pc, #52]	; (80080d8 <UART_SetConfig+0x2d4>)
 80080a4:	fba3 1302 	umull	r1, r3, r3, r2
 80080a8:	095b      	lsrs	r3, r3, #5
 80080aa:	2164      	movs	r1, #100	; 0x64
 80080ac:	fb01 f303 	mul.w	r3, r1, r3
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	3332      	adds	r3, #50	; 0x32
 80080b6:	4a08      	ldr	r2, [pc, #32]	; (80080d8 <UART_SetConfig+0x2d4>)
 80080b8:	fba2 2303 	umull	r2, r3, r2, r3
 80080bc:	095b      	lsrs	r3, r3, #5
 80080be:	f003 0207 	and.w	r2, r3, #7
 80080c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4422      	add	r2, r4
 80080ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080cc:	e105      	b.n	80082da <UART_SetConfig+0x4d6>
 80080ce:	bf00      	nop
 80080d0:	40011000 	.word	0x40011000
 80080d4:	40011400 	.word	0x40011400
 80080d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080e0:	2200      	movs	r2, #0
 80080e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80080ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80080ee:	4642      	mov	r2, r8
 80080f0:	464b      	mov	r3, r9
 80080f2:	1891      	adds	r1, r2, r2
 80080f4:	6239      	str	r1, [r7, #32]
 80080f6:	415b      	adcs	r3, r3
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
 80080fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080fe:	4641      	mov	r1, r8
 8008100:	1854      	adds	r4, r2, r1
 8008102:	4649      	mov	r1, r9
 8008104:	eb43 0501 	adc.w	r5, r3, r1
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	f04f 0300 	mov.w	r3, #0
 8008110:	00eb      	lsls	r3, r5, #3
 8008112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008116:	00e2      	lsls	r2, r4, #3
 8008118:	4614      	mov	r4, r2
 800811a:	461d      	mov	r5, r3
 800811c:	4643      	mov	r3, r8
 800811e:	18e3      	adds	r3, r4, r3
 8008120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008124:	464b      	mov	r3, r9
 8008126:	eb45 0303 	adc.w	r3, r5, r3
 800812a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800812e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800813a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800813e:	f04f 0200 	mov.w	r2, #0
 8008142:	f04f 0300 	mov.w	r3, #0
 8008146:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800814a:	4629      	mov	r1, r5
 800814c:	008b      	lsls	r3, r1, #2
 800814e:	4621      	mov	r1, r4
 8008150:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008154:	4621      	mov	r1, r4
 8008156:	008a      	lsls	r2, r1, #2
 8008158:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800815c:	f7f8 f834 	bl	80001c8 <__aeabi_uldivmod>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4b60      	ldr	r3, [pc, #384]	; (80082e8 <UART_SetConfig+0x4e4>)
 8008166:	fba3 2302 	umull	r2, r3, r3, r2
 800816a:	095b      	lsrs	r3, r3, #5
 800816c:	011c      	lsls	r4, r3, #4
 800816e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008172:	2200      	movs	r2, #0
 8008174:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008178:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800817c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008180:	4642      	mov	r2, r8
 8008182:	464b      	mov	r3, r9
 8008184:	1891      	adds	r1, r2, r2
 8008186:	61b9      	str	r1, [r7, #24]
 8008188:	415b      	adcs	r3, r3
 800818a:	61fb      	str	r3, [r7, #28]
 800818c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008190:	4641      	mov	r1, r8
 8008192:	1851      	adds	r1, r2, r1
 8008194:	6139      	str	r1, [r7, #16]
 8008196:	4649      	mov	r1, r9
 8008198:	414b      	adcs	r3, r1
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	f04f 0200 	mov.w	r2, #0
 80081a0:	f04f 0300 	mov.w	r3, #0
 80081a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081a8:	4659      	mov	r1, fp
 80081aa:	00cb      	lsls	r3, r1, #3
 80081ac:	4651      	mov	r1, sl
 80081ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081b2:	4651      	mov	r1, sl
 80081b4:	00ca      	lsls	r2, r1, #3
 80081b6:	4610      	mov	r0, r2
 80081b8:	4619      	mov	r1, r3
 80081ba:	4603      	mov	r3, r0
 80081bc:	4642      	mov	r2, r8
 80081be:	189b      	adds	r3, r3, r2
 80081c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081c4:	464b      	mov	r3, r9
 80081c6:	460a      	mov	r2, r1
 80081c8:	eb42 0303 	adc.w	r3, r2, r3
 80081cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80081da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80081dc:	f04f 0200 	mov.w	r2, #0
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80081e8:	4649      	mov	r1, r9
 80081ea:	008b      	lsls	r3, r1, #2
 80081ec:	4641      	mov	r1, r8
 80081ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081f2:	4641      	mov	r1, r8
 80081f4:	008a      	lsls	r2, r1, #2
 80081f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80081fa:	f7f7 ffe5 	bl	80001c8 <__aeabi_uldivmod>
 80081fe:	4602      	mov	r2, r0
 8008200:	460b      	mov	r3, r1
 8008202:	4b39      	ldr	r3, [pc, #228]	; (80082e8 <UART_SetConfig+0x4e4>)
 8008204:	fba3 1302 	umull	r1, r3, r3, r2
 8008208:	095b      	lsrs	r3, r3, #5
 800820a:	2164      	movs	r1, #100	; 0x64
 800820c:	fb01 f303 	mul.w	r3, r1, r3
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	3332      	adds	r3, #50	; 0x32
 8008216:	4a34      	ldr	r2, [pc, #208]	; (80082e8 <UART_SetConfig+0x4e4>)
 8008218:	fba2 2303 	umull	r2, r3, r2, r3
 800821c:	095b      	lsrs	r3, r3, #5
 800821e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008222:	441c      	add	r4, r3
 8008224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008228:	2200      	movs	r2, #0
 800822a:	673b      	str	r3, [r7, #112]	; 0x70
 800822c:	677a      	str	r2, [r7, #116]	; 0x74
 800822e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008232:	4642      	mov	r2, r8
 8008234:	464b      	mov	r3, r9
 8008236:	1891      	adds	r1, r2, r2
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	415b      	adcs	r3, r3
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008242:	4641      	mov	r1, r8
 8008244:	1851      	adds	r1, r2, r1
 8008246:	6039      	str	r1, [r7, #0]
 8008248:	4649      	mov	r1, r9
 800824a:	414b      	adcs	r3, r1
 800824c:	607b      	str	r3, [r7, #4]
 800824e:	f04f 0200 	mov.w	r2, #0
 8008252:	f04f 0300 	mov.w	r3, #0
 8008256:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800825a:	4659      	mov	r1, fp
 800825c:	00cb      	lsls	r3, r1, #3
 800825e:	4651      	mov	r1, sl
 8008260:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008264:	4651      	mov	r1, sl
 8008266:	00ca      	lsls	r2, r1, #3
 8008268:	4610      	mov	r0, r2
 800826a:	4619      	mov	r1, r3
 800826c:	4603      	mov	r3, r0
 800826e:	4642      	mov	r2, r8
 8008270:	189b      	adds	r3, r3, r2
 8008272:	66bb      	str	r3, [r7, #104]	; 0x68
 8008274:	464b      	mov	r3, r9
 8008276:	460a      	mov	r2, r1
 8008278:	eb42 0303 	adc.w	r3, r2, r3
 800827c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800827e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	663b      	str	r3, [r7, #96]	; 0x60
 8008288:	667a      	str	r2, [r7, #100]	; 0x64
 800828a:	f04f 0200 	mov.w	r2, #0
 800828e:	f04f 0300 	mov.w	r3, #0
 8008292:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008296:	4649      	mov	r1, r9
 8008298:	008b      	lsls	r3, r1, #2
 800829a:	4641      	mov	r1, r8
 800829c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082a0:	4641      	mov	r1, r8
 80082a2:	008a      	lsls	r2, r1, #2
 80082a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80082a8:	f7f7 ff8e 	bl	80001c8 <__aeabi_uldivmod>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4b0d      	ldr	r3, [pc, #52]	; (80082e8 <UART_SetConfig+0x4e4>)
 80082b2:	fba3 1302 	umull	r1, r3, r3, r2
 80082b6:	095b      	lsrs	r3, r3, #5
 80082b8:	2164      	movs	r1, #100	; 0x64
 80082ba:	fb01 f303 	mul.w	r3, r1, r3
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	3332      	adds	r3, #50	; 0x32
 80082c4:	4a08      	ldr	r2, [pc, #32]	; (80082e8 <UART_SetConfig+0x4e4>)
 80082c6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ca:	095b      	lsrs	r3, r3, #5
 80082cc:	f003 020f 	and.w	r2, r3, #15
 80082d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4422      	add	r2, r4
 80082d8:	609a      	str	r2, [r3, #8]
}
 80082da:	bf00      	nop
 80082dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80082e0:	46bd      	mov	sp, r7
 80082e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082e6:	bf00      	nop
 80082e8:	51eb851f 	.word	0x51eb851f

080082ec <__libc_init_array>:
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	4d0d      	ldr	r5, [pc, #52]	; (8008324 <__libc_init_array+0x38>)
 80082f0:	4c0d      	ldr	r4, [pc, #52]	; (8008328 <__libc_init_array+0x3c>)
 80082f2:	1b64      	subs	r4, r4, r5
 80082f4:	10a4      	asrs	r4, r4, #2
 80082f6:	2600      	movs	r6, #0
 80082f8:	42a6      	cmp	r6, r4
 80082fa:	d109      	bne.n	8008310 <__libc_init_array+0x24>
 80082fc:	4d0b      	ldr	r5, [pc, #44]	; (800832c <__libc_init_array+0x40>)
 80082fe:	4c0c      	ldr	r4, [pc, #48]	; (8008330 <__libc_init_array+0x44>)
 8008300:	f000 f87c 	bl	80083fc <_init>
 8008304:	1b64      	subs	r4, r4, r5
 8008306:	10a4      	asrs	r4, r4, #2
 8008308:	2600      	movs	r6, #0
 800830a:	42a6      	cmp	r6, r4
 800830c:	d105      	bne.n	800831a <__libc_init_array+0x2e>
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	f855 3b04 	ldr.w	r3, [r5], #4
 8008314:	4798      	blx	r3
 8008316:	3601      	adds	r6, #1
 8008318:	e7ee      	b.n	80082f8 <__libc_init_array+0xc>
 800831a:	f855 3b04 	ldr.w	r3, [r5], #4
 800831e:	4798      	blx	r3
 8008320:	3601      	adds	r6, #1
 8008322:	e7f2      	b.n	800830a <__libc_init_array+0x1e>
 8008324:	0800b0a0 	.word	0x0800b0a0
 8008328:	0800b0a0 	.word	0x0800b0a0
 800832c:	0800b0a0 	.word	0x0800b0a0
 8008330:	0800b0a4 	.word	0x0800b0a4

08008334 <__itoa>:
 8008334:	1e93      	subs	r3, r2, #2
 8008336:	2b22      	cmp	r3, #34	; 0x22
 8008338:	b510      	push	{r4, lr}
 800833a:	460c      	mov	r4, r1
 800833c:	d904      	bls.n	8008348 <__itoa+0x14>
 800833e:	2300      	movs	r3, #0
 8008340:	700b      	strb	r3, [r1, #0]
 8008342:	461c      	mov	r4, r3
 8008344:	4620      	mov	r0, r4
 8008346:	bd10      	pop	{r4, pc}
 8008348:	2a0a      	cmp	r2, #10
 800834a:	d109      	bne.n	8008360 <__itoa+0x2c>
 800834c:	2800      	cmp	r0, #0
 800834e:	da07      	bge.n	8008360 <__itoa+0x2c>
 8008350:	232d      	movs	r3, #45	; 0x2d
 8008352:	700b      	strb	r3, [r1, #0]
 8008354:	4240      	negs	r0, r0
 8008356:	2101      	movs	r1, #1
 8008358:	4421      	add	r1, r4
 800835a:	f000 f80d 	bl	8008378 <__utoa>
 800835e:	e7f1      	b.n	8008344 <__itoa+0x10>
 8008360:	2100      	movs	r1, #0
 8008362:	e7f9      	b.n	8008358 <__itoa+0x24>

08008364 <itoa>:
 8008364:	f7ff bfe6 	b.w	8008334 <__itoa>

08008368 <memset>:
 8008368:	4402      	add	r2, r0
 800836a:	4603      	mov	r3, r0
 800836c:	4293      	cmp	r3, r2
 800836e:	d100      	bne.n	8008372 <memset+0xa>
 8008370:	4770      	bx	lr
 8008372:	f803 1b01 	strb.w	r1, [r3], #1
 8008376:	e7f9      	b.n	800836c <memset+0x4>

08008378 <__utoa>:
 8008378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800837a:	4c1f      	ldr	r4, [pc, #124]	; (80083f8 <__utoa+0x80>)
 800837c:	b08b      	sub	sp, #44	; 0x2c
 800837e:	4605      	mov	r5, r0
 8008380:	460b      	mov	r3, r1
 8008382:	466e      	mov	r6, sp
 8008384:	f104 0c20 	add.w	ip, r4, #32
 8008388:	6820      	ldr	r0, [r4, #0]
 800838a:	6861      	ldr	r1, [r4, #4]
 800838c:	4637      	mov	r7, r6
 800838e:	c703      	stmia	r7!, {r0, r1}
 8008390:	3408      	adds	r4, #8
 8008392:	4564      	cmp	r4, ip
 8008394:	463e      	mov	r6, r7
 8008396:	d1f7      	bne.n	8008388 <__utoa+0x10>
 8008398:	7921      	ldrb	r1, [r4, #4]
 800839a:	7139      	strb	r1, [r7, #4]
 800839c:	1e91      	subs	r1, r2, #2
 800839e:	6820      	ldr	r0, [r4, #0]
 80083a0:	6038      	str	r0, [r7, #0]
 80083a2:	2922      	cmp	r1, #34	; 0x22
 80083a4:	f04f 0100 	mov.w	r1, #0
 80083a8:	d904      	bls.n	80083b4 <__utoa+0x3c>
 80083aa:	7019      	strb	r1, [r3, #0]
 80083ac:	460b      	mov	r3, r1
 80083ae:	4618      	mov	r0, r3
 80083b0:	b00b      	add	sp, #44	; 0x2c
 80083b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083b4:	1e58      	subs	r0, r3, #1
 80083b6:	4684      	mov	ip, r0
 80083b8:	fbb5 f7f2 	udiv	r7, r5, r2
 80083bc:	fb02 5617 	mls	r6, r2, r7, r5
 80083c0:	3628      	adds	r6, #40	; 0x28
 80083c2:	446e      	add	r6, sp
 80083c4:	460c      	mov	r4, r1
 80083c6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80083ca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80083ce:	462e      	mov	r6, r5
 80083d0:	42b2      	cmp	r2, r6
 80083d2:	f101 0101 	add.w	r1, r1, #1
 80083d6:	463d      	mov	r5, r7
 80083d8:	d9ee      	bls.n	80083b8 <__utoa+0x40>
 80083da:	2200      	movs	r2, #0
 80083dc:	545a      	strb	r2, [r3, r1]
 80083de:	1919      	adds	r1, r3, r4
 80083e0:	1aa5      	subs	r5, r4, r2
 80083e2:	42aa      	cmp	r2, r5
 80083e4:	dae3      	bge.n	80083ae <__utoa+0x36>
 80083e6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80083ea:	780e      	ldrb	r6, [r1, #0]
 80083ec:	7006      	strb	r6, [r0, #0]
 80083ee:	3201      	adds	r2, #1
 80083f0:	f801 5901 	strb.w	r5, [r1], #-1
 80083f4:	e7f4      	b.n	80083e0 <__utoa+0x68>
 80083f6:	bf00      	nop
 80083f8:	0800b070 	.word	0x0800b070

080083fc <_init>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	bf00      	nop
 8008400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008402:	bc08      	pop	{r3}
 8008404:	469e      	mov	lr, r3
 8008406:	4770      	bx	lr

08008408 <_fini>:
 8008408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840a:	bf00      	nop
 800840c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840e:	bc08      	pop	{r3}
 8008410:	469e      	mov	lr, r3
 8008412:	4770      	bx	lr
