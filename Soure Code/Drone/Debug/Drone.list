
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000801c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002110  080081a4  080081a4  000181a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2b4  0800a2b4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2b4  0800a2b4  0001a2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2bc  0800a2bc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2bc  0800a2bc  0001a2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2c0  0800a2c0  0001a2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800a2c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000ce4  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d00  20000d00  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ba8c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dba  00000000  00000000  0003bad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  0003f898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d0  00000000  00000000  00041008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000050fc  00000000  00000000  000425d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e9e5  00000000  00000000  000476d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6309  00000000  00000000  000660b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c3c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061bc  00000000  00000000  0013c414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800818c 	.word	0x0800818c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	0800818c 	.word	0x0800818c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80004d2:	f000 fa29 	bl	8000928 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80004d6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80004da:	2201      	movs	r2, #1
 80004dc:	2178      	movs	r1, #120	; 0x78
 80004de:	485b      	ldr	r0, [pc, #364]	; (800064c <SSD1306_Init+0x180>)
 80004e0:	f004 fd0e 	bl	8004f00 <HAL_I2C_IsDeviceReady>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	e0a9      	b.n	8000642 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80004ee:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80004f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80004f4:	e002      	b.n	80004fc <SSD1306_Init+0x30>
		p--;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d1f9      	bne.n	80004f6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000502:	22ae      	movs	r2, #174	; 0xae
 8000504:	2100      	movs	r1, #0
 8000506:	2078      	movs	r0, #120	; 0x78
 8000508:	f000 fa8a 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800050c:	2220      	movs	r2, #32
 800050e:	2100      	movs	r1, #0
 8000510:	2078      	movs	r0, #120	; 0x78
 8000512:	f000 fa85 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000516:	2210      	movs	r2, #16
 8000518:	2100      	movs	r1, #0
 800051a:	2078      	movs	r0, #120	; 0x78
 800051c:	f000 fa80 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000520:	22b0      	movs	r2, #176	; 0xb0
 8000522:	2100      	movs	r1, #0
 8000524:	2078      	movs	r0, #120	; 0x78
 8000526:	f000 fa7b 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800052a:	22c8      	movs	r2, #200	; 0xc8
 800052c:	2100      	movs	r1, #0
 800052e:	2078      	movs	r0, #120	; 0x78
 8000530:	f000 fa76 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fa71 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800053e:	2210      	movs	r2, #16
 8000540:	2100      	movs	r1, #0
 8000542:	2078      	movs	r0, #120	; 0x78
 8000544:	f000 fa6c 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000548:	2240      	movs	r2, #64	; 0x40
 800054a:	2100      	movs	r1, #0
 800054c:	2078      	movs	r0, #120	; 0x78
 800054e:	f000 fa67 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000552:	2281      	movs	r2, #129	; 0x81
 8000554:	2100      	movs	r1, #0
 8000556:	2078      	movs	r0, #120	; 0x78
 8000558:	f000 fa62 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800055c:	22ff      	movs	r2, #255	; 0xff
 800055e:	2100      	movs	r1, #0
 8000560:	2078      	movs	r0, #120	; 0x78
 8000562:	f000 fa5d 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000566:	22a1      	movs	r2, #161	; 0xa1
 8000568:	2100      	movs	r1, #0
 800056a:	2078      	movs	r0, #120	; 0x78
 800056c:	f000 fa58 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000570:	22a6      	movs	r2, #166	; 0xa6
 8000572:	2100      	movs	r1, #0
 8000574:	2078      	movs	r0, #120	; 0x78
 8000576:	f000 fa53 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800057a:	22a8      	movs	r2, #168	; 0xa8
 800057c:	2100      	movs	r1, #0
 800057e:	2078      	movs	r0, #120	; 0x78
 8000580:	f000 fa4e 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000584:	223f      	movs	r2, #63	; 0x3f
 8000586:	2100      	movs	r1, #0
 8000588:	2078      	movs	r0, #120	; 0x78
 800058a:	f000 fa49 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800058e:	22a4      	movs	r2, #164	; 0xa4
 8000590:	2100      	movs	r1, #0
 8000592:	2078      	movs	r0, #120	; 0x78
 8000594:	f000 fa44 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000598:	22d3      	movs	r2, #211	; 0xd3
 800059a:	2100      	movs	r1, #0
 800059c:	2078      	movs	r0, #120	; 0x78
 800059e:	f000 fa3f 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2078      	movs	r0, #120	; 0x78
 80005a8:	f000 fa3a 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80005ac:	22d5      	movs	r2, #213	; 0xd5
 80005ae:	2100      	movs	r1, #0
 80005b0:	2078      	movs	r0, #120	; 0x78
 80005b2:	f000 fa35 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80005b6:	22f0      	movs	r2, #240	; 0xf0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2078      	movs	r0, #120	; 0x78
 80005bc:	f000 fa30 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80005c0:	22d9      	movs	r2, #217	; 0xd9
 80005c2:	2100      	movs	r1, #0
 80005c4:	2078      	movs	r0, #120	; 0x78
 80005c6:	f000 fa2b 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80005ca:	2222      	movs	r2, #34	; 0x22
 80005cc:	2100      	movs	r1, #0
 80005ce:	2078      	movs	r0, #120	; 0x78
 80005d0:	f000 fa26 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80005d4:	22da      	movs	r2, #218	; 0xda
 80005d6:	2100      	movs	r1, #0
 80005d8:	2078      	movs	r0, #120	; 0x78
 80005da:	f000 fa21 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80005de:	2212      	movs	r2, #18
 80005e0:	2100      	movs	r1, #0
 80005e2:	2078      	movs	r0, #120	; 0x78
 80005e4:	f000 fa1c 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80005e8:	22db      	movs	r2, #219	; 0xdb
 80005ea:	2100      	movs	r1, #0
 80005ec:	2078      	movs	r0, #120	; 0x78
 80005ee:	f000 fa17 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80005f2:	2220      	movs	r2, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	2078      	movs	r0, #120	; 0x78
 80005f8:	f000 fa12 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80005fc:	228d      	movs	r2, #141	; 0x8d
 80005fe:	2100      	movs	r1, #0
 8000600:	2078      	movs	r0, #120	; 0x78
 8000602:	f000 fa0d 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000606:	2214      	movs	r2, #20
 8000608:	2100      	movs	r1, #0
 800060a:	2078      	movs	r0, #120	; 0x78
 800060c:	f000 fa08 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000610:	22af      	movs	r2, #175	; 0xaf
 8000612:	2100      	movs	r1, #0
 8000614:	2078      	movs	r0, #120	; 0x78
 8000616:	f000 fa03 	bl	8000a20 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800061a:	222e      	movs	r2, #46	; 0x2e
 800061c:	2100      	movs	r1, #0
 800061e:	2078      	movs	r0, #120	; 0x78
 8000620:	f000 f9fe 	bl	8000a20 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f843 	bl	80006b0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800062a:	f000 f813 	bl	8000654 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <SSD1306_Init+0x184>)
 8000630:	2200      	movs	r2, #0
 8000632:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <SSD1306_Init+0x184>)
 8000636:	2200      	movs	r2, #0
 8000638:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <SSD1306_Init+0x184>)
 800063c:	2201      	movs	r2, #1
 800063e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000640:	2301      	movs	r3, #1
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200004bc 	.word	0x200004bc
 8000650:	20000438 	.word	0x20000438

08000654 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800065a:	2300      	movs	r3, #0
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	e01d      	b.n	800069c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	3b50      	subs	r3, #80	; 0x50
 8000664:	b2db      	uxtb	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	2078      	movs	r0, #120	; 0x78
 800066c:	f000 f9d8 	bl	8000a20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	2078      	movs	r0, #120	; 0x78
 8000676:	f000 f9d3 	bl	8000a20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800067a:	2210      	movs	r2, #16
 800067c:	2100      	movs	r1, #0
 800067e:	2078      	movs	r0, #120	; 0x78
 8000680:	f000 f9ce 	bl	8000a20 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	01db      	lsls	r3, r3, #7
 8000688:	4a08      	ldr	r2, [pc, #32]	; (80006ac <SSD1306_UpdateScreen+0x58>)
 800068a:	441a      	add	r2, r3
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	2140      	movs	r1, #64	; 0x40
 8000690:	2078      	movs	r0, #120	; 0x78
 8000692:	f000 f95f 	bl	8000954 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	3301      	adds	r3, #1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b07      	cmp	r3, #7
 80006a0:	d9de      	bls.n	8000660 <SSD1306_UpdateScreen+0xc>
	}
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000038 	.word	0x20000038

080006b0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <SSD1306_Fill+0x14>
 80006c0:	2300      	movs	r3, #0
 80006c2:	e000      	b.n	80006c6 <SSD1306_Fill+0x16>
 80006c4:	23ff      	movs	r3, #255	; 0xff
 80006c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ca:	4619      	mov	r1, r3
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <SSD1306_Fill+0x2c>)
 80006ce:	f007 fd13 	bl	80080f8 <memset>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000038 	.word	0x20000038

080006e0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
 80006ea:	460b      	mov	r3, r1
 80006ec:	80bb      	strh	r3, [r7, #4]
 80006ee:	4613      	mov	r3, r2
 80006f0:	70fb      	strb	r3, [r7, #3]
	if (
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	2b7f      	cmp	r3, #127	; 0x7f
 80006f6:	d848      	bhi.n	800078a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80006f8:	88bb      	ldrh	r3, [r7, #4]
 80006fa:	2b3f      	cmp	r3, #63	; 0x3f
 80006fc:	d845      	bhi.n	800078a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SSD1306_DrawPixel+0xb8>)
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000706:	78fb      	ldrb	r3, [r7, #3]
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf0c      	ite	eq
 800070c:	2301      	moveq	r3, #1
 800070e:	2300      	movne	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d11a      	bne.n	8000750 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800071a:	88fa      	ldrh	r2, [r7, #6]
 800071c:	88bb      	ldrh	r3, [r7, #4]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	b298      	uxth	r0, r3
 8000722:	4603      	mov	r3, r0
 8000724:	01db      	lsls	r3, r3, #7
 8000726:	4413      	add	r3, r2
 8000728:	4a1c      	ldr	r2, [pc, #112]	; (800079c <SSD1306_DrawPixel+0xbc>)
 800072a:	5cd3      	ldrb	r3, [r2, r3]
 800072c:	b25a      	sxtb	r2, r3
 800072e:	88bb      	ldrh	r3, [r7, #4]
 8000730:	f003 0307 	and.w	r3, r3, #7
 8000734:	2101      	movs	r1, #1
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	b25b      	sxtb	r3, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	b259      	sxtb	r1, r3
 8000740:	88fa      	ldrh	r2, [r7, #6]
 8000742:	4603      	mov	r3, r0
 8000744:	01db      	lsls	r3, r3, #7
 8000746:	4413      	add	r3, r2
 8000748:	b2c9      	uxtb	r1, r1
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <SSD1306_DrawPixel+0xbc>)
 800074c:	54d1      	strb	r1, [r2, r3]
 800074e:	e01d      	b.n	800078c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000750:	88fa      	ldrh	r2, [r7, #6]
 8000752:	88bb      	ldrh	r3, [r7, #4]
 8000754:	08db      	lsrs	r3, r3, #3
 8000756:	b298      	uxth	r0, r3
 8000758:	4603      	mov	r3, r0
 800075a:	01db      	lsls	r3, r3, #7
 800075c:	4413      	add	r3, r2
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <SSD1306_DrawPixel+0xbc>)
 8000760:	5cd3      	ldrb	r3, [r2, r3]
 8000762:	b25a      	sxtb	r2, r3
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	2101      	movs	r1, #1
 800076c:	fa01 f303 	lsl.w	r3, r1, r3
 8000770:	b25b      	sxtb	r3, r3
 8000772:	43db      	mvns	r3, r3
 8000774:	b25b      	sxtb	r3, r3
 8000776:	4013      	ands	r3, r2
 8000778:	b259      	sxtb	r1, r3
 800077a:	88fa      	ldrh	r2, [r7, #6]
 800077c:	4603      	mov	r3, r0
 800077e:	01db      	lsls	r3, r3, #7
 8000780:	4413      	add	r3, r2
 8000782:	b2c9      	uxtb	r1, r1
 8000784:	4a05      	ldr	r2, [pc, #20]	; (800079c <SSD1306_DrawPixel+0xbc>)
 8000786:	54d1      	strb	r1, [r2, r3]
 8000788:	e000      	b.n	800078c <SSD1306_DrawPixel+0xac>
		return;
 800078a:	bf00      	nop
	}
}
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	20000438 	.word	0x20000438
 800079c:	20000038 	.word	0x20000038

080007a0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	460a      	mov	r2, r1
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	4613      	mov	r3, r2
 80007ae:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80007b0:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <SSD1306_GotoXY+0x28>)
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <SSD1306_GotoXY+0x28>)
 80007b8:	88bb      	ldrh	r3, [r7, #4]
 80007ba:	8053      	strh	r3, [r2, #2]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	20000438 	.word	0x20000438

080007cc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	4613      	mov	r3, r2
 80007da:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80007dc:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <SSD1306_Putc+0xfc>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
	if (
 80007e8:	2b7f      	cmp	r3, #127	; 0x7f
 80007ea:	dc07      	bgt.n	80007fc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80007ec:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <SSD1306_Putc+0xfc>)
 80007ee:	885b      	ldrh	r3, [r3, #2]
 80007f0:	461a      	mov	r2, r3
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	785b      	ldrb	r3, [r3, #1]
 80007f6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80007f8:	2b3f      	cmp	r3, #63	; 0x3f
 80007fa:	dd01      	ble.n	8000800 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	e05e      	b.n	80008be <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	e04b      	b.n	800089e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	3b20      	subs	r3, #32
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	7849      	ldrb	r1, [r1, #1]
 8000812:	fb01 f303 	mul.w	r3, r1, r3
 8000816:	4619      	mov	r1, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	440b      	add	r3, r1
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	e030      	b.n	800088c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000836:	2b00      	cmp	r3, #0
 8000838:	d010      	beq.n	800085c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <SSD1306_Putc+0xfc>)
 800083c:	881a      	ldrh	r2, [r3, #0]
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	b29b      	uxth	r3, r3
 8000842:	4413      	add	r3, r2
 8000844:	b298      	uxth	r0, r3
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <SSD1306_Putc+0xfc>)
 8000848:	885a      	ldrh	r2, [r3, #2]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	b29b      	uxth	r3, r3
 800084e:	4413      	add	r3, r2
 8000850:	b29b      	uxth	r3, r3
 8000852:	79ba      	ldrb	r2, [r7, #6]
 8000854:	4619      	mov	r1, r3
 8000856:	f7ff ff43 	bl	80006e0 <SSD1306_DrawPixel>
 800085a:	e014      	b.n	8000886 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <SSD1306_Putc+0xfc>)
 800085e:	881a      	ldrh	r2, [r3, #0]
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	b29b      	uxth	r3, r3
 8000864:	4413      	add	r3, r2
 8000866:	b298      	uxth	r0, r3
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <SSD1306_Putc+0xfc>)
 800086a:	885a      	ldrh	r2, [r3, #2]
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	b29b      	uxth	r3, r3
 8000870:	4413      	add	r3, r2
 8000872:	b299      	uxth	r1, r3
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	2b00      	cmp	r3, #0
 8000878:	bf0c      	ite	eq
 800087a:	2301      	moveq	r3, #1
 800087c:	2300      	movne	r3, #0
 800087e:	b2db      	uxtb	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	f7ff ff2d 	bl	80006e0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	3301      	adds	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	4293      	cmp	r3, r2
 8000896:	d3c8      	bcc.n	800082a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	3301      	adds	r3, #1
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	785b      	ldrb	r3, [r3, #1]
 80008a2:	461a      	mov	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d3ad      	bcc.n	8000806 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <SSD1306_Putc+0xfc>)
 80008ac:	881a      	ldrh	r2, [r3, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4413      	add	r3, r2
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <SSD1306_Putc+0xfc>)
 80008ba:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000438 	.word	0x20000438

080008cc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	4613      	mov	r3, r2
 80008d8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80008da:	e012      	b.n	8000902 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	79fa      	ldrb	r2, [r7, #7]
 80008e2:	68b9      	ldr	r1, [r7, #8]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff71 	bl	80007cc <SSD1306_Putc>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d002      	beq.n	80008fc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	e008      	b.n	800090e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3301      	adds	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1e8      	bne.n	80008dc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	781b      	ldrb	r3, [r3, #0]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fec8 	bl	80006b0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000920:	f7ff fe98 	bl	8000654 <SSD1306_UpdateScreen>
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <ssd1306_I2C_Init+0x28>)
 8000930:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000932:	e002      	b.n	800093a <ssd1306_I2C_Init+0x12>
		p--;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	607b      	str	r3, [r7, #4]
	while(p>0)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1f9      	bne.n	8000934 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	0003d090 	.word	0x0003d090

08000954 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b0c7      	sub	sp, #284	; 0x11c
 8000958:	af02      	add	r7, sp, #8
 800095a:	4604      	mov	r4, r0
 800095c:	4608      	mov	r0, r1
 800095e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000962:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000966:	600a      	str	r2, [r1, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800096e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000972:	4622      	mov	r2, r4
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800097a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800097e:	4602      	mov	r2, r0
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000986:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800098a:	460a      	mov	r2, r1
 800098c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800098e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000992:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000996:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800099a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800099e:	7812      	ldrb	r2, [r2, #0]
 80009a0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009a8:	e015      	b.n	80009d6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80009aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009b2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80009b6:	6812      	ldr	r2, [r2, #0]
 80009b8:	441a      	add	r2, r3
 80009ba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009be:	3301      	adds	r3, #1
 80009c0:	7811      	ldrb	r1, [r2, #0]
 80009c2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009c6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80009ca:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80009cc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009d0:	3301      	adds	r3, #1
 80009d2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009da:	b29b      	uxth	r3, r3
 80009dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009e0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80009e4:	8812      	ldrh	r2, [r2, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d8df      	bhi.n	80009aa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&SSD1306_I2C, address, dt, count+1, 10);
 80009ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009ee:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b299      	uxth	r1, r3
 80009f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	f107 020c 	add.w	r2, r7, #12
 8000a08:	200a      	movs	r0, #10
 8000a0a:	9000      	str	r0, [sp, #0]
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <ssd1306_I2C_WriteMulti+0xc8>)
 8000a0e:	f003 fe59 	bl	80046c4 <HAL_I2C_Master_Transmit>
}
 8000a12:	bf00      	nop
 8000a14:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	200004bc 	.word	0x200004bc

08000a20 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	71bb      	strb	r3, [r7, #6]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000a36:	797b      	ldrb	r3, [r7, #5]
 8000a38:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&SSD1306_I2C, address, dt, 2, 10);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	b299      	uxth	r1, r3
 8000a3e:	f107 020c 	add.w	r2, r7, #12
 8000a42:	230a      	movs	r3, #10
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2302      	movs	r3, #2
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <ssd1306_I2C_Write+0x38>)
 8000a4a:	f003 fe3b 	bl	80046c4 <HAL_I2C_Master_Transmit>
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200004bc 	.word	0x200004bc

08000a5c <find_uart_dev_instant>:
		}
	}
	return -1;
}

static int find_uart_dev_instant(UART_HandleTypeDef *huart){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e00e      	b.n	8000a88 <find_uart_dev_instant+0x2c>
		if(uart_drvs[i]->huart->Instance == huart->Instance){
 8000a6a:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <find_uart_dev_instant+0x44>)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d101      	bne.n	8000a82 <find_uart_dev_instant+0x26>
			return i;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	e007      	b.n	8000a92 <find_uart_dev_instant+0x36>
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3301      	adds	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	dded      	ble.n	8000a6a <find_uart_dev_instant+0xe>
		}
	}
	return -1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000440 	.word	0x20000440

08000aa4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	int idx = find_uart_dev_instant(huart);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ffd5 	bl	8000a5c <find_uart_dev_instant>
 8000ab2:	60f8      	str	r0, [r7, #12]
	uart_drvs[idx]->tx_completed = true;
 8000ab4:	4a05      	ldr	r2, [pc, #20]	; (8000acc <HAL_UART_TxCpltCallback+0x28>)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	2201      	movs	r2, #1
 8000abe:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000440 	.word	0x20000440

08000ad0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
	HAL_UART_RxCpltCallback(huart);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

	int idx = find_uart_dev_instant(huart);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ffbf 	bl	8000a5c <find_uart_dev_instant>
 8000ade:	6138      	str	r0, [r7, #16]
	uart_drv_t *uart_drv = uart_drvs[idx];
 8000ae0:	4a20      	ldr	r2, [pc, #128]	; (8000b64 <HAL_UART_RxCpltCallback+0x94>)
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	60fb      	str	r3, [r7, #12]

	uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	817b      	strh	r3, [r7, #10]
	uint16_t length =  sizeof(uart_drv->rx_dma_buffer) - currCNDTR;
 8000af4:	897b      	ldrh	r3, [r7, #10]
 8000af6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000afa:	813b      	strh	r3, [r7, #8]

	/* Copy and process new data */
	for(uint16_t i=0; i<length; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	82fb      	strh	r3, [r7, #22]
 8000b00:	e00d      	b.n	8000b1e <HAL_UART_RxCpltCallback+0x4e>
	{
		cbuf_put(&uart_drv->rx_cbuf_handle, uart_drv->rx_dma_buffer[i]);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f203 601c 	addw	r0, r3, #1564	; 0x61c
 8000b08:	8afb      	ldrh	r3, [r7, #22]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000b12:	4619      	mov	r1, r3
 8000b14:	f000 f828 	bl	8000b68 <cbuf_put>
	for(uint16_t i=0; i<length; i++)
 8000b18:	8afb      	ldrh	r3, [r7, #22]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	82fb      	strh	r3, [r7, #22]
 8000b1e:	8afa      	ldrh	r2, [r7, #22]
 8000b20:	893b      	ldrh	r3, [r7, #8]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d3ed      	bcc.n	8000b02 <HAL_UART_RxCpltCallback+0x32>
	}

	__HAL_DMA_DISABLE(huart->hdmarx);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0201 	bic.w	r2, r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
	huart->hdmarx->Instance->NDTR = sizeof(uart_drv->rx_dma_buffer);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b44:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(huart->hdmarx);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f042 0201 	orr.w	r2, r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000440 	.word	0x20000440

08000b68 <cbuf_put>:
    cbuf->tail = 0;
    cbuf->full = false;
}

int cbuf_put(circular_buf_t* cbuf, char data)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70fb      	strb	r3, [r7, #3]
    if(!cbuf_full(cbuf))
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f82c 	bl	8000bd2 <cbuf_full>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f083 0301 	eor.w	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d01f      	beq.n	8000bc6 <cbuf_put+0x5e>
    {
        cbuf->buffer[cbuf->head] = data;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	4413      	add	r3, r2
 8000b90:	78fa      	ldrb	r2, [r7, #3]
 8000b92:	701a      	strb	r2, [r3, #0]
        cbuf->head = (cbuf->head + 1) % cbuf->size;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	6852      	ldr	r2, [r2, #4]
 8000b9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ba2:	fb01 f202 	mul.w	r2, r1, r2
 8000ba6:	1a9a      	subs	r2, r3, r2
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	609a      	str	r2, [r3, #8]
        cbuf->full = (cbuf->head == cbuf->tail);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	bf0c      	ite	eq
 8000bb8:	2301      	moveq	r3, #1
 8000bba:	2300      	movne	r3, #0
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	741a      	strb	r2, [r3, #16]
        return 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e001      	b.n	8000bca <cbuf_put+0x62>
    }
    return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <cbuf_full>:
{
    return (!cbuf->full && (cbuf->head == cbuf->tail));
}

bool cbuf_full(circular_buf_t *cbuf)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
    return cbuf->full;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7c1b      	ldrb	r3, [r3, #16]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <bno055_write>:
		return -1;
	}
	return 0;
}

static int bno055_write(uint8_t addr, uint8_t *value){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af04      	add	r7, sp, #16
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	9302      	str	r3, [sp, #8]
 8000c00:	2301      	movs	r3, #1
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	2150      	movs	r1, #80	; 0x50
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <bno055_write+0x3c>)
 8000c0e:	f003 fe57 	bl	80048c0 <HAL_I2C_Mem_Write>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <bno055_write+0x32>
		return -1;
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	e000      	b.n	8000c20 <bno055_write+0x34>
	return 0;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200004bc 	.word	0x200004bc

08000c2c <bno055_read_bytes>:

static int bno055_read_bytes(uint8_t addr, uint8_t *value, uint8_t len){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af04      	add	r7, sp, #16
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, len, I2C_TIMEOUT_MS)!= HAL_OK){
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	2164      	movs	r1, #100	; 0x64
 8000c46:	9102      	str	r1, [sp, #8]
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	2150      	movs	r1, #80	; 0x50
 8000c52:	480a      	ldr	r0, [pc, #40]	; (8000c7c <bno055_read_bytes+0x50>)
 8000c54:	f003 ff2e 	bl	8004ab4 <HAL_I2C_Mem_Read>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d008      	beq.n	8000c70 <bno055_read_bytes+0x44>
		memset(value,0,len);
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	461a      	mov	r2, r3
 8000c62:	2100      	movs	r1, #0
 8000c64:	6838      	ldr	r0, [r7, #0]
 8000c66:	f007 fa47 	bl	80080f8 <memset>
		return -1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e000      	b.n	8000c72 <bno055_read_bytes+0x46>
	}
	return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200004bc 	.word	0x200004bc

08000c80 <bno055_get_temp>:
	*mx = (int16_t)((int16_t)buffer_mag[1]  << 8) | buffer_mag[0]; *mx /= BNO055_MAG_SCALE;
	*my = (int16_t)((int16_t)buffer_mag[3]  << 8) | buffer_mag[2]; *my /= BNO055_MAG_SCALE;
	*mz = (int16_t)((int16_t)buffer_mag[5]  << 8) | buffer_mag[4]; *mz /= BNO055_MAG_SCALE;
	return 0;
}
int bno055_get_temp(float *temp){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_temp[1] = {};
 8000c88:	2300      	movs	r3, #0
 8000c8a:	733b      	strb	r3, [r7, #12]
	tmp = 0x00;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8000c90:	f107 030f 	add.w	r3, r7, #15
 8000c94:	4619      	mov	r1, r3
 8000c96:	2007      	movs	r0, #7
 8000c98:	f7ff ffa8 	bl	8000bec <bno055_write>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da02      	bge.n	8000ca8 <bno055_get_temp+0x28>
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	e015      	b.n	8000cd4 <bno055_get_temp+0x54>
	if(bno055_read_bytes(TEMP,buffer_temp,1)<0){
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2201      	movs	r2, #1
 8000cae:	4619      	mov	r1, r3
 8000cb0:	2034      	movs	r0, #52	; 0x34
 8000cb2:	f7ff ffbb 	bl	8000c2c <bno055_read_bytes>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	da02      	bge.n	8000cc2 <bno055_get_temp+0x42>
				return -1;
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	e008      	b.n	8000cd4 <bno055_get_temp+0x54>
			}
	*temp = buffer_temp[0] / BNO055_TEMP_SCALE;
 8000cc2:	7b3b      	ldrb	r3, [r7, #12]
 8000cc4:	ee07 3a90 	vmov	s15, r3
 8000cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <bno055_get_elu_data>:
int bno055_get_elu_data(float *roll, float *pitch, float *yaw){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_eul[6] = {};
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	2300      	movs	r3, #0
 8000cee:	82bb      	strh	r3, [r7, #20]
	tmp = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	75fb      	strb	r3, [r7, #23]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8000cf4:	f107 0317 	add.w	r3, r7, #23
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2007      	movs	r0, #7
 8000cfc:	f7ff ff76 	bl	8000bec <bno055_write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	da02      	bge.n	8000d0c <bno055_get_elu_data+0x30>
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e052      	b.n	8000db2 <bno055_get_elu_data+0xd6>
	if(bno055_read_bytes(EUL_HEADING_LSB,buffer_eul,6)<0){
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	2206      	movs	r2, #6
 8000d12:	4619      	mov	r1, r3
 8000d14:	201a      	movs	r0, #26
 8000d16:	f7ff ff89 	bl	8000c2c <bno055_read_bytes>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	da02      	bge.n	8000d26 <bno055_get_elu_data+0x4a>
					return -1;
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	e045      	b.n	8000db2 <bno055_get_elu_data+0xd6>
	}
	*yaw = (int16_t)((int16_t)buffer_eul[1]  << 8) | buffer_eul[0]; *yaw /= BNO055_EUL_SCALE;
 8000d26:	7c7b      	ldrb	r3, [r7, #17]
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	7c3b      	ldrb	r3, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	edc3 7a00 	vstr	s15, [r3]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	ed93 7a00 	vldr	s14, [r3]
 8000d46:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	edc3 7a00 	vstr	s15, [r3]
	*roll = (int16_t)((int16_t)buffer_eul[3]  << 8) | buffer_eul[2]; *roll /= BNO055_EUL_SCALE;
 8000d54:	7cfb      	ldrb	r3, [r7, #19]
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	7cbb      	ldrb	r3, [r7, #18]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	ee07 3a90 	vmov	s15, r3
 8000d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	edc3 7a00 	vstr	s15, [r3]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	ed93 7a00 	vldr	s14, [r3]
 8000d74:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000d78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	edc3 7a00 	vstr	s15, [r3]
	*pitch = (int16_t)((int16_t)buffer_eul[5]  << 8) | buffer_eul[4]; *pitch /= BNO055_EUL_SCALE;
 8000d82:	7d7b      	ldrb	r3, [r7, #21]
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	7d3b      	ldrb	r3, [r7, #20]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	ee07 3a90 	vmov	s15, r3
 8000d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	edc3 7a00 	vstr	s15, [r3]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	ed93 7a00 	vldr	s14, [r3]
 8000da2:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000dd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <MX_ADC1_Init+0xa0>)
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e1e:	f002 f981 	bl	8003124 <HAL_ADC_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e28:	f000 feef 	bl	8001c0a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e2c:	230b      	movs	r3, #11
 8000e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e3e:	f002 f9b5 	bl	80031ac <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e48:	f000 fedf 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000044c 	.word	0x2000044c
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	0f000001 	.word	0x0f000001

08000e60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a17      	ldr	r2, [pc, #92]	; (8000edc <HAL_ADC_MspInit+0x7c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d127      	bne.n	8000ed2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_ADC_MspInit+0x80>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <HAL_ADC_MspInit+0x80>)
 8000e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <HAL_ADC_MspInit+0x80>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_ADC_MspInit+0x80>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_ADC_MspInit+0x80>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_ADC_MspInit+0x80>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = MCU_ADC_1_Pin|MCU_ADC_2_Pin|MCU_ADC_3_Pin;
 8000eba:	230e      	movs	r3, #14
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_ADC_MspInit+0x84>)
 8000ece:	f003 f8e5 	bl	800409c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40012000 	.word	0x40012000
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000eee:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <MX_CAN2_Init+0x64>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000ef4:	2210      	movs	r2, #16
 8000ef6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f36:	f002 fb57 	bl	80035e8 <HAL_CAN_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000f40:	f000 fe63 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000494 	.word	0x20000494
 8000f4c:	40006800 	.word	0x40006800

08000f50 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <HAL_CAN_MspInit+0xa0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d13a      	bne.n	8000fe8 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000f7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000f98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = MCU_CAN_RX_Pin|MCU_CAN_TX_Pin;
 8000fc6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000fd8:	2309      	movs	r3, #9
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <HAL_CAN_MspInit+0xa8>)
 8000fe4:	f003 f85a 	bl	800409c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	; 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40006800 	.word	0x40006800
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020400 	.word	0x40020400

08000ffc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <MX_DMA_Init+0x108>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a3e      	ldr	r2, [pc, #248]	; (8001104 <MX_DMA_Init+0x108>)
 800100c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b3c      	ldr	r3, [pc, #240]	; (8001104 <MX_DMA_Init+0x108>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	4b38      	ldr	r3, [pc, #224]	; (8001104 <MX_DMA_Init+0x108>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a37      	ldr	r2, [pc, #220]	; (8001104 <MX_DMA_Init+0x108>)
 8001028:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b35      	ldr	r3, [pc, #212]	; (8001104 <MX_DMA_Init+0x108>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	200b      	movs	r0, #11
 8001040:	f002 fc86 	bl	8003950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001044:	200b      	movs	r0, #11
 8001046:	f002 fc9f 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	200c      	movs	r0, #12
 8001050:	f002 fc7e 	bl	8003950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001054:	200c      	movs	r0, #12
 8001056:	f002 fc97 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	200d      	movs	r0, #13
 8001060:	f002 fc76 	bl	8003950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001064:	200d      	movs	r0, #13
 8001066:	f002 fc8f 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	200e      	movs	r0, #14
 8001070:	f002 fc6e 	bl	8003950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001074:	200e      	movs	r0, #14
 8001076:	f002 fc87 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	200f      	movs	r0, #15
 8001080:	f002 fc66 	bl	8003950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001084:	200f      	movs	r0, #15
 8001086:	f002 fc7f 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2010      	movs	r0, #16
 8001090:	f002 fc5e 	bl	8003950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001094:	2010      	movs	r0, #16
 8001096:	f002 fc77 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2011      	movs	r0, #17
 80010a0:	f002 fc56 	bl	8003950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010a4:	2011      	movs	r0, #17
 80010a6:	f002 fc6f 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	202f      	movs	r0, #47	; 0x2f
 80010b0:	f002 fc4e 	bl	8003950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80010b4:	202f      	movs	r0, #47	; 0x2f
 80010b6:	f002 fc67 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2039      	movs	r0, #57	; 0x39
 80010c0:	f002 fc46 	bl	8003950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010c4:	2039      	movs	r0, #57	; 0x39
 80010c6:	f002 fc5f 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	203a      	movs	r0, #58	; 0x3a
 80010d0:	f002 fc3e 	bl	8003950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010d4:	203a      	movs	r0, #58	; 0x3a
 80010d6:	f002 fc57 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2045      	movs	r0, #69	; 0x45
 80010e0:	f002 fc36 	bl	8003950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80010e4:	2045      	movs	r0, #69	; 0x45
 80010e6:	f002 fc4f 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2046      	movs	r0, #70	; 0x46
 80010f0:	f002 fc2e 	bl	8003950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80010f4:	2046      	movs	r0, #70	; 0x46
 80010f6:	f002 fc47 	bl	8003988 <HAL_NVIC_EnableIRQ>

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <MX_GPIO_Init>:
        * EXTI
     PA15   ------> S_TIM2_CH1_ETR
     PB3   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b54      	ldr	r3, [pc, #336]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a53      	ldr	r2, [pc, #332]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b51      	ldr	r3, [pc, #324]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b4d      	ldr	r3, [pc, #308]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <MX_GPIO_Init+0x16c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b46      	ldr	r3, [pc, #280]	; (8001274 <MX_GPIO_Init+0x16c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a45      	ldr	r2, [pc, #276]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b43      	ldr	r3, [pc, #268]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a3e      	ldr	r2, [pc, #248]	; (8001274 <MX_GPIO_Init+0x16c>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 800118e:	2200      	movs	r2, #0
 8001190:	f246 0131 	movw	r1, #24625	; 0x6031
 8001194:	4838      	ldr	r0, [pc, #224]	; (8001278 <MX_GPIO_Init+0x170>)
 8001196:	f003 f91d 	bl	80043d4 <HAL_GPIO_WritePin>
                          |ADD_SPI_CSn_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80011a0:	4836      	ldr	r0, [pc, #216]	; (800127c <MX_GPIO_Init+0x174>)
 80011a2:	f003 f917 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_LORA_RST_GPIO_Port, MCU_LORA_RST_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ac:	4834      	ldr	r0, [pc, #208]	; (8001280 <MX_GPIO_Init+0x178>)
 80011ae:	f003 f911 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 80011b2:	f246 0331 	movw	r3, #24625	; 0x6031
 80011b6:	617b      	str	r3, [r7, #20]
                          |ADD_SPI_CSn_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	482b      	ldr	r0, [pc, #172]	; (8001278 <MX_GPIO_Init+0x170>)
 80011cc:	f002 ff66 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80011d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4824      	ldr	r0, [pc, #144]	; (8001278 <MX_GPIO_Init+0x170>)
 80011e8:	f002 ff58 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin;
 80011ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	481d      	ldr	r0, [pc, #116]	; (800127c <MX_GPIO_Init+0x174>)
 8001206:	f002 ff49 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_LORA_RST_Pin;
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_LORA_RST_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4817      	ldr	r0, [pc, #92]	; (8001280 <MX_GPIO_Init+0x178>)
 8001224:	f002 ff3a 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR1_Pin;
 8001228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800123a:	2301      	movs	r3, #1
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR1_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	480e      	ldr	r0, [pc, #56]	; (8001280 <MX_GPIO_Init+0x178>)
 8001246:	f002 ff29 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR2_Pin;
 800124a:	2308      	movs	r3, #8
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800125a:	2301      	movs	r3, #1
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR2_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_GPIO_Init+0x174>)
 8001266:	f002 ff19 	bl	800409c <HAL_GPIO_Init>

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40020800 	.word	0x40020800
 800127c:	40020400 	.word	0x40020400
 8001280:	40020000 	.word	0x40020000

08001284 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
	__HAL_RCC_I2C1_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_I2C1_Init+0x74>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <MX_I2C1_Init+0x74>)
 8001294:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_I2C1_Init+0x74>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_I2C1_Init+0x78>)
 80012a8:	4a15      	ldr	r2, [pc, #84]	; (8001300 <MX_I2C1_Init+0x7c>)
 80012aa:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_I2C1_Init+0x78>)
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <MX_I2C1_Init+0x80>)
 80012b0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_I2C1_Init+0x78>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_I2C1_Init+0x78>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_I2C1_Init+0x78>)
 80012c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <MX_I2C1_Init+0x78>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_I2C1_Init+0x78>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_I2C1_Init+0x78>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_I2C1_Init+0x78>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012de:	4807      	ldr	r0, [pc, #28]	; (80012fc <MX_I2C1_Init+0x78>)
 80012e0:	f003 f8ac 	bl	800443c <HAL_I2C_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_I2C1_Init+0x6a>
  {
    Error_Handler();
 80012ea:	f000 fc8e 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	200004bc 	.word	0x200004bc
 8001300:	40005400 	.word	0x40005400
 8001304:	00061a80 	.word	0x00061a80

08001308 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_I2C_MspInit+0x84>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12c      	bne.n	8001384 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_I2C_MspInit+0x88>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_I2C_MspInit+0x88>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_I2C_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MCU_I2C_SCL_Pin|MCU_I2C_SDA_Pin;
 8001346:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134c:	2312      	movs	r3, #18
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001358:	2304      	movs	r3, #4
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	480c      	ldr	r0, [pc, #48]	; (8001394 <HAL_I2C_MspInit+0x8c>)
 8001364:	f002 fe9a 	bl	800409c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_I2C_MspInit+0x88>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_I2C_MspInit+0x88>)
 8001372:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_I2C_MspInit+0x88>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40005400 	.word	0x40005400
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08e      	sub	sp, #56	; 0x38
 800139c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139e:	f001 fe5b 	bl	8003058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a2:	f000 fbb9 	bl	8001b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a6:	f7ff feaf 	bl	8001108 <MX_GPIO_Init>
  MX_DMA_Init();
 80013aa:	f7ff fe27 	bl	8000ffc <MX_DMA_Init>
  MX_ADC1_Init();
 80013ae:	f7ff fd05 	bl	8000dbc <MX_ADC1_Init>
  MX_CAN2_Init();
 80013b2:	f7ff fd99 	bl	8000ee8 <MX_CAN2_Init>
  MX_I2C1_Init();
 80013b6:	f7ff ff65 	bl	8001284 <MX_I2C1_Init>
  MX_SPI1_Init();
 80013ba:	f000 fc2b 	bl	8001c14 <MX_SPI1_Init>
  MX_TIM1_Init();
 80013be:	f000 fe47 	bl	8002050 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013c2:	f000 ff09 	bl	80021d8 <MX_TIM3_Init>
  MX_TIM8_Init();
 80013c6:	f000 ffa3 	bl	8002310 <MX_TIM8_Init>
  MX_UART4_Init();
 80013ca:	f001 f915 	bl	80025f8 <MX_UART4_Init>
  MX_UART5_Init();
 80013ce:	f001 f93d 	bl	800264c <MX_UART5_Init>
  MX_USART1_UART_Init();
 80013d2:	f001 f965 	bl	80026a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80013d6:	f001 f98d 	bl	80026f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80013da:	f001 f9b5 	bl	8002748 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80013de:	f001 f9dd 	bl	800279c <MX_USART6_UART_Init>
  MX_TIM5_Init();
 80013e2:	f000 ff47 	bl	8002274 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim5);
  /* USER CODE END 2 */

  SSD1306_Init (); // initialize the display
 80013e6:	f7ff f871 	bl	80004cc <SSD1306_Init>
  SSD1306_GotoXY (10,10); // goto 10, 10
 80013ea:	210a      	movs	r1, #10
 80013ec:	200a      	movs	r0, #10
 80013ee:	f7ff f9d7 	bl	80007a0 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_16x26, 1); // print Hello
 80013f2:	2201      	movs	r2, #1
 80013f4:	49b9      	ldr	r1, [pc, #740]	; (80016dc <main+0x344>)
 80013f6:	48ba      	ldr	r0, [pc, #744]	; (80016e0 <main+0x348>)
 80013f8:	f7ff fa68 	bl	80008cc <SSD1306_Puts>
//  SSD1306_GotoXY (10, 38);
//  SSD1306_Puts ("WORLD!!", &Font_7x10, 1);
  SSD1306_UpdateScreen(); // update screen
 80013fc:	f7ff f92a 	bl	8000654 <SSD1306_UpdateScreen>
  /* Infinite loop */
  //bno055_initization();
    i = 0;
 8001400:	4bb8      	ldr	r3, [pc, #736]	; (80016e4 <main+0x34c>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
    j = 0;
 8001406:	4bb8      	ldr	r3, [pc, #736]	; (80016e8 <main+0x350>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    for(i=0;i<1;i++){
 800140c:	4bb5      	ldr	r3, [pc, #724]	; (80016e4 <main+0x34c>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	e02f      	b.n	8001474 <main+0xdc>
  	  for(j=0;j<3;j++){
 8001414:	4bb4      	ldr	r3, [pc, #720]	; (80016e8 <main+0x350>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	e021      	b.n	8001460 <main+0xc8>
  		  if(HAL_I2C_IsDeviceReady(&BNO055__I2C,BNO055_I2C_ADDR, 1, 100)==HAL_OK){
 800141c:	2364      	movs	r3, #100	; 0x64
 800141e:	2201      	movs	r2, #1
 8001420:	2150      	movs	r1, #80	; 0x50
 8001422:	48b2      	ldr	r0, [pc, #712]	; (80016ec <main+0x354>)
 8001424:	f003 fd6c 	bl	8004f00 <HAL_I2C_IsDeviceReady>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d109      	bne.n	8001442 <main+0xaa>
  			  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 800142e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001432:	48af      	ldr	r0, [pc, #700]	; (80016f0 <main+0x358>)
 8001434:	f002 ffe7 	bl	8004406 <HAL_GPIO_TogglePin>
  			  HAL_Delay(500);
 8001438:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800143c:	f001 fe4e 	bl	80030dc <HAL_Delay>
 8001440:	e008      	b.n	8001454 <main+0xbc>
  		  	  }
  		  else{
  			  HAL_GPIO_WritePin(GPIOC,BUZZER_Pin, SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001448:	48a9      	ldr	r0, [pc, #676]	; (80016f0 <main+0x358>)
 800144a:	f002 ffc3 	bl	80043d4 <HAL_GPIO_WritePin>
  			  HAL_Delay(100);
 800144e:	2064      	movs	r0, #100	; 0x64
 8001450:	f001 fe44 	bl	80030dc <HAL_Delay>
  	  for(j=0;j<3;j++){
 8001454:	4ba4      	ldr	r3, [pc, #656]	; (80016e8 <main+0x350>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4ba2      	ldr	r3, [pc, #648]	; (80016e8 <main+0x350>)
 800145e:	701a      	strb	r2, [r3, #0]
 8001460:	4ba1      	ldr	r3, [pc, #644]	; (80016e8 <main+0x350>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d9d9      	bls.n	800141c <main+0x84>
    for(i=0;i<1;i++){
 8001468:	4b9e      	ldr	r3, [pc, #632]	; (80016e4 <main+0x34c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b9c      	ldr	r3, [pc, #624]	; (80016e4 <main+0x34c>)
 8001472:	701a      	strb	r2, [r3, #0]
 8001474:	4b9b      	ldr	r3, [pc, #620]	; (80016e4 <main+0x34c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0cb      	beq.n	8001414 <main+0x7c>
  		  }
  	  }
    }
    HAL_GPIO_WritePin(GPIOC,BUZZER_Pin, SET);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	489b      	ldr	r0, [pc, #620]	; (80016f0 <main+0x358>)
 8001484:	f002 ffa6 	bl	80043d4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001488:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800148c:	f001 fe26 	bl	80030dc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC,BUZZER_Pin, RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001496:	4896      	ldr	r0, [pc, #600]	; (80016f0 <main+0x358>)
 8001498:	f002 ff9c 	bl	80043d4 <HAL_GPIO_WritePin>

      tmp = 0x20;
 800149c:	4b95      	ldr	r3, [pc, #596]	; (80016f4 <main+0x35c>)
 800149e:	2220      	movs	r2, #32
 80014a0:	701a      	strb	r2, [r3, #0]
      if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,SYS_TRIGGER, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 80014a2:	2364      	movs	r3, #100	; 0x64
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2301      	movs	r3, #1
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	4b92      	ldr	r3, [pc, #584]	; (80016f4 <main+0x35c>)
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	223f      	movs	r2, #63	; 0x3f
 80014b2:	2150      	movs	r1, #80	; 0x50
 80014b4:	488d      	ldr	r0, [pc, #564]	; (80016ec <main+0x354>)
 80014b6:	f003 fa03 	bl	80048c0 <HAL_I2C_Mem_Write>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d106      	bne.n	80014ce <main+0x136>
    	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c6:	488a      	ldr	r0, [pc, #552]	; (80016f0 <main+0x358>)
 80014c8:	f002 ff84 	bl	80043d4 <HAL_GPIO_WritePin>
 80014cc:	e00b      	b.n	80014e6 <main+0x14e>
      }
      else{
    	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d4:	4886      	ldr	r0, [pc, #536]	; (80016f0 <main+0x358>)
 80014d6:	f002 ff7d 	bl	80043d4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOC,BUZZER_Pin, SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e0:	4883      	ldr	r0, [pc, #524]	; (80016f0 <main+0x358>)
 80014e2:	f002 ff77 	bl	80043d4 <HAL_GPIO_WritePin>
      }
      HAL_Delay(510);
 80014e6:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 80014ea:	f001 fdf7 	bl	80030dc <HAL_Delay>
      member = 0;
 80014ee:	4b82      	ldr	r3, [pc, #520]	; (80016f8 <main+0x360>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
      if(HAL_I2C_Mem_Read(&BNO055__I2C,BNO055_I2C_ADDR,CHIP_ID_PAGE_0, I2C_MEMADD_SIZE_8BIT, &member, 1, I2C_TIMEOUT_MS)==HAL_OK){
 80014f4:	2364      	movs	r3, #100	; 0x64
 80014f6:	9302      	str	r3, [sp, #8]
 80014f8:	2301      	movs	r3, #1
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	4b7e      	ldr	r3, [pc, #504]	; (80016f8 <main+0x360>)
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2301      	movs	r3, #1
 8001502:	2200      	movs	r2, #0
 8001504:	2150      	movs	r1, #80	; 0x50
 8001506:	4879      	ldr	r0, [pc, #484]	; (80016ec <main+0x354>)
 8001508:	f003 fad4 	bl	8004ab4 <HAL_I2C_Mem_Read>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d109      	bne.n	8001526 <main+0x18e>
      	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001518:	4875      	ldr	r0, [pc, #468]	; (80016f0 <main+0x358>)
 800151a:	f002 ff5b 	bl	80043d4 <HAL_GPIO_WritePin>
      	  HAL_Delay(100);
 800151e:	2064      	movs	r0, #100	; 0x64
 8001520:	f001 fddc 	bl	80030dc <HAL_Delay>
 8001524:	e014      	b.n	8001550 <main+0x1b8>
      }
      else{
      	HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, SET);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152c:	4870      	ldr	r0, [pc, #448]	; (80016f0 <main+0x358>)
 800152e:	f002 ff51 	bl	80043d4 <HAL_GPIO_WritePin>
      	HAL_Delay(100);
 8001532:	2064      	movs	r0, #100	; 0x64
 8001534:	f001 fdd2 	bl	80030dc <HAL_Delay>
      	HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153e:	486c      	ldr	r0, [pc, #432]	; (80016f0 <main+0x358>)
 8001540:	f002 ff48 	bl	80043d4 <HAL_GPIO_WritePin>
      	HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154a:	4869      	ldr	r0, [pc, #420]	; (80016f0 <main+0x358>)
 800154c:	f002 ff42 	bl	80043d4 <HAL_GPIO_WritePin>
      }
    if(member==BNO055_ID){
 8001550:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <main+0x360>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2ba0      	cmp	r3, #160	; 0xa0
 8001556:	d106      	bne.n	8001566 <main+0x1ce>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800155e:	4864      	ldr	r0, [pc, #400]	; (80016f0 <main+0x358>)
 8001560:	f002 ff38 	bl	80043d4 <HAL_GPIO_WritePin>
 8001564:	e005      	b.n	8001572 <main+0x1da>
    }
    else{
  	 HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, SET);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156c:	4860      	ldr	r0, [pc, #384]	; (80016f0 <main+0x358>)
 800156e:	f002 ff31 	bl	80043d4 <HAL_GPIO_WritePin>
    }

    //set operation_mode BNO055_OPERATION_CONFIG_MODE
    tmp = BNO055_OPERATION_CONFIG_MODE;
 8001572:	4b60      	ldr	r3, [pc, #384]	; (80016f4 <main+0x35c>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,OPR_MODE, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2301      	movs	r3, #1
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <main+0x35c>)
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	223d      	movs	r2, #61	; 0x3d
 8001588:	2150      	movs	r1, #80	; 0x50
 800158a:	4858      	ldr	r0, [pc, #352]	; (80016ec <main+0x354>)
 800158c:	f003 f998 	bl	80048c0 <HAL_I2C_Mem_Write>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d106      	bne.n	80015a4 <main+0x20c>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159c:	4854      	ldr	r0, [pc, #336]	; (80016f0 <main+0x358>)
 800159e:	f002 ff19 	bl	80043d4 <HAL_GPIO_WritePin>
 80015a2:	e005      	b.n	80015b0 <main+0x218>
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015aa:	4851      	ldr	r0, [pc, #324]	; (80016f0 <main+0x358>)
 80015ac:	f002 ff12 	bl	80043d4 <HAL_GPIO_WritePin>
    }

    tmp = 0b00;
 80015b0:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <main+0x35c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,PWR_MODE, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 80015b6:	2364      	movs	r3, #100	; 0x64
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	2301      	movs	r3, #1
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	4b4d      	ldr	r3, [pc, #308]	; (80016f4 <main+0x35c>)
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2301      	movs	r3, #1
 80015c4:	223e      	movs	r2, #62	; 0x3e
 80015c6:	2150      	movs	r1, #80	; 0x50
 80015c8:	4848      	ldr	r0, [pc, #288]	; (80016ec <main+0x354>)
 80015ca:	f003 f979 	bl	80048c0 <HAL_I2C_Mem_Write>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d106      	bne.n	80015e2 <main+0x24a>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015da:	4845      	ldr	r0, [pc, #276]	; (80016f0 <main+0x358>)
 80015dc:	f002 fefa 	bl	80043d4 <HAL_GPIO_WritePin>
 80015e0:	e005      	b.n	80015ee <main+0x256>
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e8:	4841      	ldr	r0, [pc, #260]	; (80016f0 <main+0x358>)
 80015ea:	f002 fef3 	bl	80043d4 <HAL_GPIO_WritePin>
    }

    //Move to Page 1//
    tmp = 0x01;
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <main+0x35c>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,PAGE_ID, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 80015f4:	2364      	movs	r3, #100	; 0x64
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	2301      	movs	r3, #1
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <main+0x35c>)
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2301      	movs	r3, #1
 8001602:	2207      	movs	r2, #7
 8001604:	2150      	movs	r1, #80	; 0x50
 8001606:	4839      	ldr	r0, [pc, #228]	; (80016ec <main+0x354>)
 8001608:	f003 f95a 	bl	80048c0 <HAL_I2C_Mem_Write>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <main+0x288>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001612:	2201      	movs	r2, #1
 8001614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001618:	4835      	ldr	r0, [pc, #212]	; (80016f0 <main+0x358>)
 800161a:	f002 fedb 	bl	80043d4 <HAL_GPIO_WritePin>
 800161e:	e005      	b.n	800162c <main+0x294>
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001626:	4832      	ldr	r0, [pc, #200]	; (80016f0 <main+0x358>)
 8001628:	f002 fed4 	bl	80043d4 <HAL_GPIO_WritePin>
    }
    /* Configurations Accelerometer */
    tmp = ( 0b000<<5 | 0b011<<2 ) | 0b01;
 800162c:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <main+0x35c>)
 800162e:	220d      	movs	r2, #13
 8001630:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,ACC_CONFIG, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 8001632:	2364      	movs	r3, #100	; 0x64
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	2301      	movs	r3, #1
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <main+0x35c>)
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2301      	movs	r3, #1
 8001640:	2208      	movs	r2, #8
 8001642:	2150      	movs	r1, #80	; 0x50
 8001644:	4829      	ldr	r0, [pc, #164]	; (80016ec <main+0x354>)
 8001646:	f003 f93b 	bl	80048c0 <HAL_I2C_Mem_Write>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d106      	bne.n	800165e <main+0x2c6>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001656:	4826      	ldr	r0, [pc, #152]	; (80016f0 <main+0x358>)
 8001658:	f002 febc 	bl	80043d4 <HAL_GPIO_WritePin>
 800165c:	e005      	b.n	800166a <main+0x2d2>
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001664:	4822      	ldr	r0, [pc, #136]	; (80016f0 <main+0x358>)
 8001666:	f002 feb5 	bl	80043d4 <HAL_GPIO_WritePin>
    }

    /* Configurations Gyroscope */
    tmp = 0b111<<3 | 0b000;
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <main+0x35c>)
 800166c:	2238      	movs	r2, #56	; 0x38
 800166e:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,GYR_CONFIG_0, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	9302      	str	r3, [sp, #8]
 8001674:	2301      	movs	r3, #1
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <main+0x35c>)
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2301      	movs	r3, #1
 800167e:	220a      	movs	r2, #10
 8001680:	2150      	movs	r1, #80	; 0x50
 8001682:	481a      	ldr	r0, [pc, #104]	; (80016ec <main+0x354>)
 8001684:	f003 f91c 	bl	80048c0 <HAL_I2C_Mem_Write>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d106      	bne.n	800169c <main+0x304>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 800168e:	2201      	movs	r2, #1
 8001690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001694:	4816      	ldr	r0, [pc, #88]	; (80016f0 <main+0x358>)
 8001696:	f002 fe9d 	bl	80043d4 <HAL_GPIO_WritePin>
 800169a:	e005      	b.n	80016a8 <main+0x310>
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a2:	4813      	ldr	r0, [pc, #76]	; (80016f0 <main+0x358>)
 80016a4:	f002 fe96 	bl	80043d4 <HAL_GPIO_WritePin>
    }
    tmp = 0b000;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <main+0x35c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,GYR_CONFIG_1, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 80016ae:	2364      	movs	r3, #100	; 0x64
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	2301      	movs	r3, #1
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <main+0x35c>)
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	220b      	movs	r2, #11
 80016be:	2150      	movs	r1, #80	; 0x50
 80016c0:	480a      	ldr	r0, [pc, #40]	; (80016ec <main+0x354>)
 80016c2:	f003 f8fd 	bl	80048c0 <HAL_I2C_Mem_Write>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d117      	bne.n	80016fc <main+0x364>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d2:	4807      	ldr	r0, [pc, #28]	; (80016f0 <main+0x358>)
 80016d4:	f002 fe7e 	bl	80043d4 <HAL_GPIO_WritePin>
 80016d8:	e016      	b.n	8001708 <main+0x370>
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	080081a4 	.word	0x080081a4
 80016e4:	20000511 	.word	0x20000511
 80016e8:	20000512 	.word	0x20000512
 80016ec:	200004bc 	.word	0x200004bc
 80016f0:	40020800 	.word	0x40020800
 80016f4:	20000510 	.word	0x20000510
 80016f8:	20000513 	.word	0x20000513
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001702:	48be      	ldr	r0, [pc, #760]	; (80019fc <main+0x664>)
 8001704:	f002 fe66 	bl	80043d4 <HAL_GPIO_WritePin>
    }

    /* Configurations Magnetometer */
    tmp = (0b11<<5 | 0b11<<3)| 0b011;
 8001708:	4bbd      	ldr	r3, [pc, #756]	; (8001a00 <main+0x668>)
 800170a:	227b      	movs	r2, #123	; 0x7b
 800170c:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,MAG_CONFIG, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 800170e:	2364      	movs	r3, #100	; 0x64
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	2301      	movs	r3, #1
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	4bba      	ldr	r3, [pc, #744]	; (8001a00 <main+0x668>)
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2301      	movs	r3, #1
 800171c:	2209      	movs	r2, #9
 800171e:	2150      	movs	r1, #80	; 0x50
 8001720:	48b8      	ldr	r0, [pc, #736]	; (8001a04 <main+0x66c>)
 8001722:	f003 f8cd 	bl	80048c0 <HAL_I2C_Mem_Write>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d106      	bne.n	800173a <main+0x3a2>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001732:	48b2      	ldr	r0, [pc, #712]	; (80019fc <main+0x664>)
 8001734:	f002 fe4e 	bl	80043d4 <HAL_GPIO_WritePin>
 8001738:	e005      	b.n	8001746 <main+0x3ae>
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001740:	48ae      	ldr	r0, [pc, #696]	; (80019fc <main+0x664>)
 8001742:	f002 fe47 	bl	80043d4 <HAL_GPIO_WritePin>
    }

  	/*Configuration Sensor Unit*/
  	//Move to Page 0//
    	tmp = 0x00;
 8001746:	4bae      	ldr	r3, [pc, #696]	; (8001a00 <main+0x668>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
    	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,PAGE_ID, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 800174c:	2364      	movs	r3, #100	; 0x64
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	2301      	movs	r3, #1
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	4baa      	ldr	r3, [pc, #680]	; (8001a00 <main+0x668>)
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	2207      	movs	r2, #7
 800175c:	2150      	movs	r1, #80	; 0x50
 800175e:	48a9      	ldr	r0, [pc, #676]	; (8001a04 <main+0x66c>)
 8001760:	f003 f8ae 	bl	80048c0 <HAL_I2C_Mem_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <main+0x3e0>
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001770:	48a2      	ldr	r0, [pc, #648]	; (80019fc <main+0x664>)
 8001772:	f002 fe2f 	bl	80043d4 <HAL_GPIO_WritePin>
 8001776:	e005      	b.n	8001784 <main+0x3ec>
    	}
    	else{
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800177e:	489f      	ldr	r0, [pc, #636]	; (80019fc <main+0x664>)
 8001780:	f002 fe28 	bl	80043d4 <HAL_GPIO_WritePin>
    	}

    	//tmp = (((0b00<<4 | 0b00<<2)| 0b00<<1)| 0b00);
    	tmp = 0b0000000;
 8001784:	4b9e      	ldr	r3, [pc, #632]	; (8001a00 <main+0x668>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
    	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,UNIT_SEL, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 800178a:	2364      	movs	r3, #100	; 0x64
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2301      	movs	r3, #1
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	4b9b      	ldr	r3, [pc, #620]	; (8001a00 <main+0x668>)
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	223b      	movs	r2, #59	; 0x3b
 800179a:	2150      	movs	r1, #80	; 0x50
 800179c:	4899      	ldr	r0, [pc, #612]	; (8001a04 <main+0x66c>)
 800179e:	f003 f88f 	bl	80048c0 <HAL_I2C_Mem_Write>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d106      	bne.n	80017b6 <main+0x41e>
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ae:	4893      	ldr	r0, [pc, #588]	; (80019fc <main+0x664>)
 80017b0:	f002 fe10 	bl	80043d4 <HAL_GPIO_WritePin>
 80017b4:	e005      	b.n	80017c2 <main+0x42a>
    	}
    	else{
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017bc:	488f      	ldr	r0, [pc, #572]	; (80019fc <main+0x664>)
 80017be:	f002 fe09 	bl	80043d4 <HAL_GPIO_WritePin>
    	}
    	/* Configure axis mapping*/
    	tmp = REMAP_CONFIG_P1_2_4_7;
 80017c2:	4b8f      	ldr	r3, [pc, #572]	; (8001a00 <main+0x668>)
 80017c4:	2224      	movs	r2, #36	; 0x24
 80017c6:	701a      	strb	r2, [r3, #0]
    	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,AXIS_MAP_CONFIG, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 80017c8:	2364      	movs	r3, #100	; 0x64
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	2301      	movs	r3, #1
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	4b8b      	ldr	r3, [pc, #556]	; (8001a00 <main+0x668>)
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2301      	movs	r3, #1
 80017d6:	2241      	movs	r2, #65	; 0x41
 80017d8:	2150      	movs	r1, #80	; 0x50
 80017da:	488a      	ldr	r0, [pc, #552]	; (8001a04 <main+0x66c>)
 80017dc:	f003 f870 	bl	80048c0 <HAL_I2C_Mem_Write>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <main+0x45c>
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ec:	4883      	ldr	r0, [pc, #524]	; (80019fc <main+0x664>)
 80017ee:	f002 fdf1 	bl	80043d4 <HAL_GPIO_WritePin>
 80017f2:	e005      	b.n	8001800 <main+0x468>
    	}
    	else{
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017fa:	4880      	ldr	r0, [pc, #512]	; (80019fc <main+0x664>)
 80017fc:	f002 fdea 	bl	80043d4 <HAL_GPIO_WritePin>
    	}

    	tmp = REMAP_SIGN_P1;
 8001800:	4b7f      	ldr	r3, [pc, #508]	; (8001a00 <main+0x668>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
    	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,AXIS_MAP_CONFIG, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2301      	movs	r3, #1
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	4b7c      	ldr	r3, [pc, #496]	; (8001a00 <main+0x668>)
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	2241      	movs	r2, #65	; 0x41
 8001816:	2150      	movs	r1, #80	; 0x50
 8001818:	487a      	ldr	r0, [pc, #488]	; (8001a04 <main+0x66c>)
 800181a:	f003 f851 	bl	80048c0 <HAL_I2C_Mem_Write>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d106      	bne.n	8001832 <main+0x49a>
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800182a:	4874      	ldr	r0, [pc, #464]	; (80019fc <main+0x664>)
 800182c:	f002 fdd2 	bl	80043d4 <HAL_GPIO_WritePin>
 8001830:	e005      	b.n	800183e <main+0x4a6>
    	}
    	else{
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001838:	4870      	ldr	r0, [pc, #448]	; (80019fc <main+0x664>)
 800183a:	f002 fdcb 	bl	80043d4 <HAL_GPIO_WritePin>
    	}
    //set BNO055_OPERATION_MODE_NDOF
    	tmp = BNO055_OPERATION_MODE_NDOF;
 800183e:	4b70      	ldr	r3, [pc, #448]	; (8001a00 <main+0x668>)
 8001840:	220c      	movs	r2, #12
 8001842:	701a      	strb	r2, [r3, #0]
    	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,OPR_MODE, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	2301      	movs	r3, #1
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	4b6c      	ldr	r3, [pc, #432]	; (8001a00 <main+0x668>)
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	223d      	movs	r2, #61	; 0x3d
 8001854:	2150      	movs	r1, #80	; 0x50
 8001856:	486b      	ldr	r0, [pc, #428]	; (8001a04 <main+0x66c>)
 8001858:	f003 f832 	bl	80048c0 <HAL_I2C_Mem_Write>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d106      	bne.n	8001870 <main+0x4d8>
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001862:	2201      	movs	r2, #1
 8001864:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001868:	4864      	ldr	r0, [pc, #400]	; (80019fc <main+0x664>)
 800186a:	f002 fdb3 	bl	80043d4 <HAL_GPIO_WritePin>
 800186e:	e005      	b.n	800187c <main+0x4e4>
    	}
    	else{
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001876:	4861      	ldr	r0, [pc, #388]	; (80019fc <main+0x664>)
 8001878:	f002 fdac 	bl	80043d4 <HAL_GPIO_WritePin>
    	}
    	HAL_Delay(1000);
 800187c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001880:	f001 fc2c 	bl	80030dc <HAL_Delay>
    	SSD1306_Clear();
 8001884:	f7ff f847 	bl	8000916 <SSD1306_Clear>
    	char snum_yaw[10];
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  bno055_get_temp(&temp);
 8001888:	485f      	ldr	r0, [pc, #380]	; (8001a08 <main+0x670>)
 800188a:	f7ff f9f9 	bl	8000c80 <bno055_get_temp>
	  	  temp = temp*1;
 800188e:	4b5e      	ldr	r3, [pc, #376]	; (8001a08 <main+0x670>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a5d      	ldr	r2, [pc, #372]	; (8001a08 <main+0x670>)
 8001894:	6013      	str	r3, [r2, #0]
	  	  if(temp>20 && temp < 40){
 8001896:	4b5c      	ldr	r3, [pc, #368]	; (8001a08 <main+0x670>)
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80018a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	dd10      	ble.n	80018cc <main+0x534>
 80018aa:	4b57      	ldr	r3, [pc, #348]	; (8001a08 <main+0x670>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001a0c <main+0x674>
 80018b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	d506      	bpl.n	80018cc <main+0x534>
	  		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80018be:	2201      	movs	r2, #1
 80018c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018c4:	484d      	ldr	r0, [pc, #308]	; (80019fc <main+0x664>)
 80018c6:	f002 fd85 	bl	80043d4 <HAL_GPIO_WritePin>
 80018ca:	e005      	b.n	80018d8 <main+0x540>
	  	  }
	  	  else
	  		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d2:	484a      	ldr	r0, [pc, #296]	; (80019fc <main+0x664>)
 80018d4:	f002 fd7e 	bl	80043d4 <HAL_GPIO_WritePin>

	  	  	bno055_get_elu_data(&roll, &pitch, &yaw);
 80018d8:	4a4d      	ldr	r2, [pc, #308]	; (8001a10 <main+0x678>)
 80018da:	494e      	ldr	r1, [pc, #312]	; (8001a14 <main+0x67c>)
 80018dc:	484e      	ldr	r0, [pc, #312]	; (8001a18 <main+0x680>)
 80018de:	f7ff f9fd 	bl	8000cdc <bno055_get_elu_data>
	  	  	//sprintf(snum,"%f",roll);
	  	  	SSD1306_GotoXY (0, 0);
 80018e2:	2100      	movs	r1, #0
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7fe ff5b 	bl	80007a0 <SSD1306_GotoXY>
	  	  	SSD1306_Puts ("ROLL: ", &Font_11x18, 1);
 80018ea:	2201      	movs	r2, #1
 80018ec:	494b      	ldr	r1, [pc, #300]	; (8001a1c <main+0x684>)
 80018ee:	484c      	ldr	r0, [pc, #304]	; (8001a20 <main+0x688>)
 80018f0:	f7fe ffec 	bl	80008cc <SSD1306_Puts>
	  	  	SSD1306_GotoXY (0, 20);
 80018f4:	2114      	movs	r1, #20
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7fe ff52 	bl	80007a0 <SSD1306_GotoXY>
	  	  	SSD1306_Puts ("PITCH: ", &Font_11x18, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	4947      	ldr	r1, [pc, #284]	; (8001a1c <main+0x684>)
 8001900:	4848      	ldr	r0, [pc, #288]	; (8001a24 <main+0x68c>)
 8001902:	f7fe ffe3 	bl	80008cc <SSD1306_Puts>
	  	  	SSD1306_GotoXY (0, 40);
 8001906:	2128      	movs	r1, #40	; 0x28
 8001908:	2000      	movs	r0, #0
 800190a:	f7fe ff49 	bl	80007a0 <SSD1306_GotoXY>
	  	  	SSD1306_Puts ("YAW: ", &Font_11x18, 1);
 800190e:	2201      	movs	r2, #1
 8001910:	4942      	ldr	r1, [pc, #264]	; (8001a1c <main+0x684>)
 8001912:	4845      	ldr	r0, [pc, #276]	; (8001a28 <main+0x690>)
 8001914:	f7fe ffda 	bl	80008cc <SSD1306_Puts>
			itoa(roll, snum_roll, 10);
 8001918:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <main+0x680>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001922:	f107 031c 	add.w	r3, r7, #28
 8001926:	220a      	movs	r2, #10
 8001928:	4619      	mov	r1, r3
 800192a:	ee17 0a90 	vmov	r0, s15
 800192e:	f006 fbe1 	bl	80080f4 <itoa>
			itoa(pitch, snum_pitch, 10);
 8001932:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <main+0x67c>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	220a      	movs	r2, #10
 8001942:	4619      	mov	r1, r3
 8001944:	ee17 0a90 	vmov	r0, s15
 8001948:	f006 fbd4 	bl	80080f4 <itoa>
			itoa(yaw, snum_yaw, 10);
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <main+0x678>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	220a      	movs	r2, #10
 800195a:	4619      	mov	r1, r3
 800195c:	ee17 0a90 	vmov	r0, s15
 8001960:	f006 fbc8 	bl	80080f4 <itoa>
//			SSD1306_GotoXY (0, 0);
//			SSD1306_Puts ("             ", &Font_11x18, 1);
			SSD1306_UpdateScreen();
 8001964:	f7fe fe76 	bl	8000654 <SSD1306_UpdateScreen>
			if(roll < 10) {
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <main+0x680>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	d504      	bpl.n	8001986 <main+0x5ee>
				SSD1306_GotoXY (69, 0);  // 1 DIGIT
 800197c:	2100      	movs	r1, #0
 800197e:	2045      	movs	r0, #69	; 0x45
 8001980:	f7fe ff0e 	bl	80007a0 <SSD1306_GotoXY>
 8001984:	e021      	b.n	80019ca <main+0x632>
			}
			else if (roll < 100 ) {
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <main+0x680>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001a2c <main+0x694>
 8001990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001998:	d504      	bpl.n	80019a4 <main+0x60c>
				SSD1306_GotoXY (61, 0);  // 2 DIGITS
 800199a:	2100      	movs	r1, #0
 800199c:	203d      	movs	r0, #61	; 0x3d
 800199e:	f7fe feff 	bl	80007a0 <SSD1306_GotoXY>
 80019a2:	e012      	b.n	80019ca <main+0x632>
			}
			else if (roll < 1000 ) {
 80019a4:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <main+0x680>)
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001a30 <main+0x698>
 80019ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	d504      	bpl.n	80019c2 <main+0x62a>
				SSD1306_GotoXY (53, 0);  // 3 DIGITS
 80019b8:	2100      	movs	r1, #0
 80019ba:	2035      	movs	r0, #53	; 0x35
 80019bc:	f7fe fef0 	bl	80007a0 <SSD1306_GotoXY>
 80019c0:	e003      	b.n	80019ca <main+0x632>
			}
			else {
				SSD1306_GotoXY (45, 0);  // 4 DIGIS
 80019c2:	2100      	movs	r1, #0
 80019c4:	202d      	movs	r0, #45	; 0x2d
 80019c6:	f7fe feeb 	bl	80007a0 <SSD1306_GotoXY>
			}

			SSD1306_Puts (snum_roll, &Font_11x18, 1);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	2201      	movs	r2, #1
 80019d0:	4912      	ldr	r1, [pc, #72]	; (8001a1c <main+0x684>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe ff7a 	bl	80008cc <SSD1306_Puts>
			SSD1306_UpdateScreen();
 80019d8:	f7fe fe3c 	bl	8000654 <SSD1306_UpdateScreen>

			if(pitch < 10) {
 80019dc:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <main+0x67c>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	d521      	bpl.n	8001a34 <main+0x69c>
				SSD1306_GotoXY (69, 20);  // 1 DIGIT
 80019f0:	2114      	movs	r1, #20
 80019f2:	2045      	movs	r0, #69	; 0x45
 80019f4:	f7fe fed4 	bl	80007a0 <SSD1306_GotoXY>
 80019f8:	e03e      	b.n	8001a78 <main+0x6e0>
 80019fa:	bf00      	nop
 80019fc:	40020800 	.word	0x40020800
 8001a00:	20000510 	.word	0x20000510
 8001a04:	200004bc 	.word	0x200004bc
 8001a08:	20000514 	.word	0x20000514
 8001a0c:	42200000 	.word	0x42200000
 8001a10:	20000520 	.word	0x20000520
 8001a14:	2000051c 	.word	0x2000051c
 8001a18:	20000518 	.word	0x20000518
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	080081ac 	.word	0x080081ac
 8001a24:	080081b4 	.word	0x080081b4
 8001a28:	080081bc 	.word	0x080081bc
 8001a2c:	42c80000 	.word	0x42c80000
 8001a30:	447a0000 	.word	0x447a0000
			}
			else if (pitch < 100 ) {
 8001a34:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <main+0x76c>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001b08 <main+0x770>
 8001a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a46:	d504      	bpl.n	8001a52 <main+0x6ba>
				SSD1306_GotoXY (61, 20);  // 2 DIGITS
 8001a48:	2114      	movs	r1, #20
 8001a4a:	203d      	movs	r0, #61	; 0x3d
 8001a4c:	f7fe fea8 	bl	80007a0 <SSD1306_GotoXY>
 8001a50:	e012      	b.n	8001a78 <main+0x6e0>
			}
			else if (pitch < 1000 ) {
 8001a52:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <main+0x76c>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001b0c <main+0x774>
 8001a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	d504      	bpl.n	8001a70 <main+0x6d8>
				SSD1306_GotoXY (53, 20);  // 3 DIGITS
 8001a66:	2114      	movs	r1, #20
 8001a68:	2035      	movs	r0, #53	; 0x35
 8001a6a:	f7fe fe99 	bl	80007a0 <SSD1306_GotoXY>
 8001a6e:	e003      	b.n	8001a78 <main+0x6e0>
			}
			else {
				SSD1306_GotoXY (45, 20);  // 4 DIGIS
 8001a70:	2114      	movs	r1, #20
 8001a72:	202d      	movs	r0, #45	; 0x2d
 8001a74:	f7fe fe94 	bl	80007a0 <SSD1306_GotoXY>
			}

			SSD1306_Puts (snum_pitch, &Font_11x18, 1);
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4924      	ldr	r1, [pc, #144]	; (8001b10 <main+0x778>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe ff23 	bl	80008cc <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001a86:	f7fe fde5 	bl	8000654 <SSD1306_UpdateScreen>

			if(yaw < 10) {
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <main+0x77c>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9c:	d504      	bpl.n	8001aa8 <main+0x710>
				SSD1306_GotoXY (69, 40);  // 1 DIGIT
 8001a9e:	2128      	movs	r1, #40	; 0x28
 8001aa0:	2045      	movs	r0, #69	; 0x45
 8001aa2:	f7fe fe7d 	bl	80007a0 <SSD1306_GotoXY>
 8001aa6:	e021      	b.n	8001aec <main+0x754>
			}
			else if (yaw < 100 ) {
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <main+0x77c>)
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001b08 <main+0x770>
 8001ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aba:	d504      	bpl.n	8001ac6 <main+0x72e>
				SSD1306_GotoXY (61, 40);  // 2 DIGITS
 8001abc:	2128      	movs	r1, #40	; 0x28
 8001abe:	203d      	movs	r0, #61	; 0x3d
 8001ac0:	f7fe fe6e 	bl	80007a0 <SSD1306_GotoXY>
 8001ac4:	e012      	b.n	8001aec <main+0x754>
			}
			else if (yaw < 1000 ) {
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <main+0x77c>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001b0c <main+0x774>
 8001ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad8:	d504      	bpl.n	8001ae4 <main+0x74c>
				SSD1306_GotoXY (53, 40);  // 3 DIGITS
 8001ada:	2128      	movs	r1, #40	; 0x28
 8001adc:	2035      	movs	r0, #53	; 0x35
 8001ade:	f7fe fe5f 	bl	80007a0 <SSD1306_GotoXY>
 8001ae2:	e003      	b.n	8001aec <main+0x754>
			}
			else {
				SSD1306_GotoXY (45, 40);  // 4 DIGIS
 8001ae4:	2128      	movs	r1, #40	; 0x28
 8001ae6:	202d      	movs	r0, #45	; 0x2d
 8001ae8:	f7fe fe5a 	bl	80007a0 <SSD1306_GotoXY>
			}

			SSD1306_Puts (snum_yaw, &Font_11x18, 1);
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2201      	movs	r2, #1
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <main+0x778>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe feea 	bl	80008cc <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001af8:	f7fe fdac 	bl	8000654 <SSD1306_UpdateScreen>

			//SSD1306_Clear();
			HAL_Delay (100);
 8001afc:	2064      	movs	r0, #100	; 0x64
 8001afe:	f001 faed 	bl	80030dc <HAL_Delay>
	  bno055_get_temp(&temp);
 8001b02:	e6c1      	b.n	8001888 <main+0x4f0>
 8001b04:	2000051c 	.word	0x2000051c
 8001b08:	42c80000 	.word	0x42c80000
 8001b0c:	447a0000 	.word	0x447a0000
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000520 	.word	0x20000520

08001b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b094      	sub	sp, #80	; 0x50
 8001b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1e:	f107 0320 	add.w	r3, r7, #32
 8001b22:	2230      	movs	r2, #48	; 0x30
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f006 fae6 	bl	80080f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <SystemClock_Config+0xcc>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	4a27      	ldr	r2, [pc, #156]	; (8001be4 <SystemClock_Config+0xcc>)
 8001b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4c:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <SystemClock_Config+0xcc>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <SystemClock_Config+0xd0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <SystemClock_Config+0xd0>)
 8001b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <SystemClock_Config+0xd0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b74:	2302      	movs	r3, #2
 8001b76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b7c:	2310      	movs	r3, #16
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b80:	2302      	movs	r3, #2
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b84:	2300      	movs	r3, #0
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b8c:	23a8      	movs	r3, #168	; 0xa8
 8001b8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b90:	2302      	movs	r3, #2
 8001b92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b94:	2304      	movs	r3, #4
 8001b96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b98:	f107 0320 	add.w	r3, r7, #32
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 febb 	bl	8005918 <HAL_RCC_OscConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ba8:	f000 f82f 	bl	8001c0a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bac:	230f      	movs	r3, #15
 8001bae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	2105      	movs	r1, #5
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f004 f91c 	bl	8005e08 <HAL_RCC_ClockConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bd6:	f000 f818 	bl	8001c0a <Error_Handler>
  }
}
 8001bda:	bf00      	nop
 8001bdc:	3750      	adds	r7, #80	; 0x50
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40007000 	.word	0x40007000

08001bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d101      	bne.n	8001c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bfe:	f001 fa4d 	bl	800309c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0e:	b672      	cpsid	i
}
 8001c10:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <Error_Handler+0x8>

08001c14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <MX_SPI1_Init+0x64>)
 8001c1a:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <MX_SPI1_Init+0x64>)
 8001c20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_SPI1_Init+0x64>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <MX_SPI1_Init+0x64>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_SPI1_Init+0x64>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_SPI1_Init+0x64>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_SPI1_Init+0x64>)
 8001c40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_SPI1_Init+0x64>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <MX_SPI1_Init+0x64>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_SPI1_Init+0x64>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <MX_SPI1_Init+0x64>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_SPI1_Init+0x64>)
 8001c60:	220a      	movs	r2, #10
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c64:	4804      	ldr	r0, [pc, #16]	; (8001c78 <MX_SPI1_Init+0x64>)
 8001c66:	f004 fae1 	bl	800622c <HAL_SPI_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c70:	f7ff ffcb 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000524 	.word	0x20000524
 8001c7c:	40013000 	.word	0x40013000

08001c80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_SPI_MspInit+0x84>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d12b      	bne.n	8001cfa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_SPI_MspInit+0x88>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <HAL_SPI_MspInit+0x88>)
 8001cac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_SPI_MspInit+0x88>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_SPI_MspInit+0x88>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_SPI_MspInit+0x88>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_SPI_MspInit+0x88>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADNS_SPI_CSn_Pin|MCU_SPI_SCK_Pin|MCU_SPI_MISO_Pin|MCU_SPI_MOSI_Pin;
 8001cda:	23f0      	movs	r3, #240	; 0xf0
 8001cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cea:	2305      	movs	r3, #5
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4805      	ldr	r0, [pc, #20]	; (8001d0c <HAL_SPI_MspInit+0x8c>)
 8001cf6:	f002 f9d1 	bl	800409c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	3728      	adds	r7, #40	; 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40013000 	.word	0x40013000
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020000 	.word	0x40020000

08001d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800

08001d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08e      	sub	sp, #56	; 0x38
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <HAL_InitTick+0xe8>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a33      	ldr	r2, [pc, #204]	; (8001e48 <HAL_InitTick+0xe8>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_InitTick+0xe8>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d8c:	f107 0210 	add.w	r2, r7, #16
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 fa16 	bl	80061c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001da6:	f004 f9e7 	bl	8006178 <HAL_RCC_GetPCLK1Freq>
 8001daa:	6378      	str	r0, [r7, #52]	; 0x34
 8001dac:	e004      	b.n	8001db8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001dae:	f004 f9e3 	bl	8006178 <HAL_RCC_GetPCLK1Freq>
 8001db2:	4603      	mov	r3, r0
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dba:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <HAL_InitTick+0xec>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	0c9b      	lsrs	r3, r3, #18
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_InitTick+0xf0>)
 8001dc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <HAL_InitTick+0xf0>)
 8001dd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dd4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <HAL_InitTick+0xf0>)
 8001dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dda:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_InitTick+0xf0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_InitTick+0xf0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_InitTick+0xf0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001dee:	4818      	ldr	r0, [pc, #96]	; (8001e50 <HAL_InitTick+0xf0>)
 8001df0:	f004 faa5 	bl	800633e <HAL_TIM_Base_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001dfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d11b      	bne.n	8001e3a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001e02:	4813      	ldr	r0, [pc, #76]	; (8001e50 <HAL_InitTick+0xf0>)
 8001e04:	f004 faea 	bl	80063dc <HAL_TIM_Base_Start_IT>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d111      	bne.n	8001e3a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e16:	201c      	movs	r0, #28
 8001e18:	f001 fdb6 	bl	8003988 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b0f      	cmp	r3, #15
 8001e20:	d808      	bhi.n	8001e34 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001e22:	2200      	movs	r2, #0
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	201c      	movs	r0, #28
 8001e28:	f001 fd92 	bl	8003950 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e2c:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_InitTick+0xf4>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e002      	b.n	8001e3a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3738      	adds	r7, #56	; 0x38
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	2000057c 	.word	0x2000057c
 8001e54:	20000014 	.word	0x20000014

08001e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <NMI_Handler+0x4>

08001e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <HardFault_Handler+0x4>

08001e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <MemManage_Handler+0x4>

08001e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <DMA1_Stream0_IRQHandler+0x10>)
 8001eb6:	f001 feb5 	bl	8003c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000093c 	.word	0x2000093c

08001ec4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <DMA1_Stream1_IRQHandler+0x10>)
 8001eca:	f001 feab 	bl	8003c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000b7c 	.word	0x20000b7c

08001ed8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <DMA1_Stream2_IRQHandler+0x10>)
 8001ede:	f001 fea1 	bl	8003c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000087c 	.word	0x2000087c

08001eec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <DMA1_Stream3_IRQHandler+0x10>)
 8001ef2:	f001 fe97 	bl	8003c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000bdc 	.word	0x20000bdc

08001f00 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <DMA1_Stream4_IRQHandler+0x10>)
 8001f06:	f001 fe8d 	bl	8003c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200008dc 	.word	0x200008dc

08001f14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <DMA1_Stream5_IRQHandler+0x10>)
 8001f1a:	f001 fe83 	bl	8003c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000abc 	.word	0x20000abc

08001f28 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <DMA1_Stream6_IRQHandler+0x10>)
 8001f2e:	f001 fe79 	bl	8003c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000b1c 	.word	0x20000b1c

08001f3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <TIM2_IRQHandler+0x10>)
 8001f42:	f004 fb14 	bl	800656e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000057c 	.word	0x2000057c

08001f50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <USART1_IRQHandler+0x10>)
 8001f56:	f005 f9df 	bl	8007318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000076c 	.word	0x2000076c

08001f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <USART2_IRQHandler+0x10>)
 8001f6a:	f005 f9d5 	bl	8007318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200007b0 	.word	0x200007b0

08001f78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <USART3_IRQHandler+0x10>)
 8001f7e:	f005 f9cb 	bl	8007318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200007f4 	.word	0x200007f4

08001f8c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <DMA1_Stream7_IRQHandler+0x10>)
 8001f92:	f001 fe47 	bl	8003c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	2000099c 	.word	0x2000099c

08001fa0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <UART4_IRQHandler+0x10>)
 8001fa6:	f005 f9b7 	bl	8007318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200006e4 	.word	0x200006e4

08001fb4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <UART5_IRQHandler+0x10>)
 8001fba:	f005 f9ad 	bl	8007318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000728 	.word	0x20000728

08001fc8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <DMA2_Stream1_IRQHandler+0x10>)
 8001fce:	f001 fe29 	bl	8003c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000c3c 	.word	0x20000c3c

08001fdc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <DMA2_Stream2_IRQHandler+0x10>)
 8001fe2:	f001 fe1f 	bl	8003c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200009fc 	.word	0x200009fc

08001ff0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <DMA2_Stream6_IRQHandler+0x10>)
 8001ff6:	f001 fe15 	bl	8003c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000c9c 	.word	0x20000c9c

08002004 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <DMA2_Stream7_IRQHandler+0x10>)
 800200a:	f001 fe0b 	bl	8003c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000a5c 	.word	0x20000a5c

08002018 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <USART6_IRQHandler+0x10>)
 800201e:	f005 f97b 	bl	8007318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000838 	.word	0x20000838

0800202c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <SystemInit+0x20>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	4a05      	ldr	r2, [pc, #20]	; (800204c <SystemInit+0x20>)
 8002038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800203c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b096      	sub	sp, #88	; 0x58
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002056:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002064:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800206e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	615a      	str	r2, [r3, #20]
 8002080:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2220      	movs	r2, #32
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f006 f835 	bl	80080f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800208e:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <MX_TIM1_Init+0x180>)
 8002090:	4a50      	ldr	r2, [pc, #320]	; (80021d4 <MX_TIM1_Init+0x184>)
 8002092:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002094:	4b4e      	ldr	r3, [pc, #312]	; (80021d0 <MX_TIM1_Init+0x180>)
 8002096:	2200      	movs	r2, #0
 8002098:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209a:	4b4d      	ldr	r3, [pc, #308]	; (80021d0 <MX_TIM1_Init+0x180>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80020a0:	4b4b      	ldr	r3, [pc, #300]	; (80021d0 <MX_TIM1_Init+0x180>)
 80020a2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80020a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a8:	4b49      	ldr	r3, [pc, #292]	; (80021d0 <MX_TIM1_Init+0x180>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020ae:	4b48      	ldr	r3, [pc, #288]	; (80021d0 <MX_TIM1_Init+0x180>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b4:	4b46      	ldr	r3, [pc, #280]	; (80021d0 <MX_TIM1_Init+0x180>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020ba:	4845      	ldr	r0, [pc, #276]	; (80021d0 <MX_TIM1_Init+0x180>)
 80020bc:	f004 f93f 	bl	800633e <HAL_TIM_Base_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80020c6:	f7ff fda0 	bl	8001c0a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020d4:	4619      	mov	r1, r3
 80020d6:	483e      	ldr	r0, [pc, #248]	; (80021d0 <MX_TIM1_Init+0x180>)
 80020d8:	f004 fc14 	bl	8006904 <HAL_TIM_ConfigClockSource>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80020e2:	f7ff fd92 	bl	8001c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020e6:	483a      	ldr	r0, [pc, #232]	; (80021d0 <MX_TIM1_Init+0x180>)
 80020e8:	f004 f9e8 	bl	80064bc <HAL_TIM_PWM_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020f2:	f7ff fd8a 	bl	8001c0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002102:	4619      	mov	r1, r3
 8002104:	4832      	ldr	r0, [pc, #200]	; (80021d0 <MX_TIM1_Init+0x180>)
 8002106:	f004 ffd7 	bl	80070b8 <HAL_TIMEx_MasterConfigSynchronization>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002110:	f7ff fd7b 	bl	8001c0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002114:	2360      	movs	r3, #96	; 0x60
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211c:	2300      	movs	r3, #0
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002120:	2300      	movs	r3, #0
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002128:	2300      	movs	r3, #0
 800212a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800212c:	2300      	movs	r3, #0
 800212e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	2200      	movs	r2, #0
 8002136:	4619      	mov	r1, r3
 8002138:	4825      	ldr	r0, [pc, #148]	; (80021d0 <MX_TIM1_Init+0x180>)
 800213a:	f004 fb21 	bl	8006780 <HAL_TIM_PWM_ConfigChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002144:	f7ff fd61 	bl	8001c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214c:	2204      	movs	r2, #4
 800214e:	4619      	mov	r1, r3
 8002150:	481f      	ldr	r0, [pc, #124]	; (80021d0 <MX_TIM1_Init+0x180>)
 8002152:	f004 fb15 	bl	8006780 <HAL_TIM_PWM_ConfigChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800215c:	f7ff fd55 	bl	8001c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002164:	2208      	movs	r2, #8
 8002166:	4619      	mov	r1, r3
 8002168:	4819      	ldr	r0, [pc, #100]	; (80021d0 <MX_TIM1_Init+0x180>)
 800216a:	f004 fb09 	bl	8006780 <HAL_TIM_PWM_ConfigChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002174:	f7ff fd49 	bl	8001c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217c:	220c      	movs	r2, #12
 800217e:	4619      	mov	r1, r3
 8002180:	4813      	ldr	r0, [pc, #76]	; (80021d0 <MX_TIM1_Init+0x180>)
 8002182:	f004 fafd 	bl	8006780 <HAL_TIM_PWM_ConfigChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800218c:	f7ff fd3d 	bl	8001c0a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	4619      	mov	r1, r3
 80021b2:	4807      	ldr	r0, [pc, #28]	; (80021d0 <MX_TIM1_Init+0x180>)
 80021b4:	f004 fffc 	bl	80071b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80021be:	f7ff fd24 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <MX_TIM1_Init+0x180>)
 80021c4:	f000 f9b4 	bl	8002530 <HAL_TIM_MspPostInit>

}
 80021c8:	bf00      	nop
 80021ca:	3758      	adds	r7, #88	; 0x58
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200005c4 	.word	0x200005c4
 80021d4:	40010000 	.word	0x40010000

080021d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ec:	463b      	mov	r3, r7
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <MX_TIM3_Init+0x94>)
 80021f6:	4a1e      	ldr	r2, [pc, #120]	; (8002270 <MX_TIM3_Init+0x98>)
 80021f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <MX_TIM3_Init+0x94>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002200:	4b1a      	ldr	r3, [pc, #104]	; (800226c <MX_TIM3_Init+0x94>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <MX_TIM3_Init+0x94>)
 8002208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800220c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <MX_TIM3_Init+0x94>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <MX_TIM3_Init+0x94>)
 8002216:	2200      	movs	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800221a:	4814      	ldr	r0, [pc, #80]	; (800226c <MX_TIM3_Init+0x94>)
 800221c:	f004 f88f 	bl	800633e <HAL_TIM_Base_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002226:	f7ff fcf0 	bl	8001c0a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800222a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002230:	f107 0308 	add.w	r3, r7, #8
 8002234:	4619      	mov	r1, r3
 8002236:	480d      	ldr	r0, [pc, #52]	; (800226c <MX_TIM3_Init+0x94>)
 8002238:	f004 fb64 	bl	8006904 <HAL_TIM_ConfigClockSource>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002242:	f7ff fce2 	bl	8001c0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800224e:	463b      	mov	r3, r7
 8002250:	4619      	mov	r1, r3
 8002252:	4806      	ldr	r0, [pc, #24]	; (800226c <MX_TIM3_Init+0x94>)
 8002254:	f004 ff30 	bl	80070b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800225e:	f7ff fcd4 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000060c 	.word	0x2000060c
 8002270:	40000400 	.word	0x40000400

08002274 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227a:	f107 0308 	add.w	r3, r7, #8
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002288:	463b      	mov	r3, r7
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <MX_TIM5_Init+0x94>)
 8002292:	4a1e      	ldr	r2, [pc, #120]	; (800230c <MX_TIM5_Init+0x98>)
 8002294:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <MX_TIM5_Init+0x94>)
 8002298:	2253      	movs	r2, #83	; 0x53
 800229a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <MX_TIM5_Init+0x94>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff -1;
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <MX_TIM5_Init+0x94>)
 80022a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80022a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <MX_TIM5_Init+0x94>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <MX_TIM5_Init+0x94>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022b6:	4814      	ldr	r0, [pc, #80]	; (8002308 <MX_TIM5_Init+0x94>)
 80022b8:	f004 f841 	bl	800633e <HAL_TIM_Base_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80022c2:	f7ff fca2 	bl	8001c0a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	4619      	mov	r1, r3
 80022d2:	480d      	ldr	r0, [pc, #52]	; (8002308 <MX_TIM5_Init+0x94>)
 80022d4:	f004 fb16 	bl	8006904 <HAL_TIM_ConfigClockSource>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80022de:	f7ff fc94 	bl	8001c0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022ea:	463b      	mov	r3, r7
 80022ec:	4619      	mov	r1, r3
 80022ee:	4806      	ldr	r0, [pc, #24]	; (8002308 <MX_TIM5_Init+0x94>)
 80022f0:	f004 fee2 	bl	80070b8 <HAL_TIMEx_MasterConfigSynchronization>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80022fa:	f7ff fc86 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000654 	.word	0x20000654
 800230c:	40000c00 	.word	0x40000c00

08002310 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b096      	sub	sp, #88	; 0x58
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002316:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002324:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800232e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	611a      	str	r2, [r3, #16]
 800233e:	615a      	str	r2, [r3, #20]
 8002340:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	2220      	movs	r2, #32
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f005 fed5 	bl	80080f8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800234e:	4b44      	ldr	r3, [pc, #272]	; (8002460 <MX_TIM8_Init+0x150>)
 8002350:	4a44      	ldr	r2, [pc, #272]	; (8002464 <MX_TIM8_Init+0x154>)
 8002352:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002354:	4b42      	ldr	r3, [pc, #264]	; (8002460 <MX_TIM8_Init+0x150>)
 8002356:	2200      	movs	r2, #0
 8002358:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <MX_TIM8_Init+0x150>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002360:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <MX_TIM8_Init+0x150>)
 8002362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002366:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002368:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <MX_TIM8_Init+0x150>)
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800236e:	4b3c      	ldr	r3, [pc, #240]	; (8002460 <MX_TIM8_Init+0x150>)
 8002370:	2200      	movs	r2, #0
 8002372:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002374:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <MX_TIM8_Init+0x150>)
 8002376:	2200      	movs	r2, #0
 8002378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800237a:	4839      	ldr	r0, [pc, #228]	; (8002460 <MX_TIM8_Init+0x150>)
 800237c:	f003 ffdf 	bl	800633e <HAL_TIM_Base_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002386:	f7ff fc40 	bl	8001c0a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800238a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002390:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002394:	4619      	mov	r1, r3
 8002396:	4832      	ldr	r0, [pc, #200]	; (8002460 <MX_TIM8_Init+0x150>)
 8002398:	f004 fab4 	bl	8006904 <HAL_TIM_ConfigClockSource>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80023a2:	f7ff fc32 	bl	8001c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80023a6:	482e      	ldr	r0, [pc, #184]	; (8002460 <MX_TIM8_Init+0x150>)
 80023a8:	f004 f888 	bl	80064bc <HAL_TIM_PWM_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80023b2:	f7ff fc2a 	bl	8001c0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023c2:	4619      	mov	r1, r3
 80023c4:	4826      	ldr	r0, [pc, #152]	; (8002460 <MX_TIM8_Init+0x150>)
 80023c6:	f004 fe77 	bl	80070b8 <HAL_TIMEx_MasterConfigSynchronization>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80023d0:	f7ff fc1b 	bl	8001c0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d4:	2360      	movs	r3, #96	; 0x60
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023e0:	2300      	movs	r3, #0
 80023e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023e8:	2300      	movs	r3, #0
 80023ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ec:	2300      	movs	r3, #0
 80023ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f4:	2208      	movs	r2, #8
 80023f6:	4619      	mov	r1, r3
 80023f8:	4819      	ldr	r0, [pc, #100]	; (8002460 <MX_TIM8_Init+0x150>)
 80023fa:	f004 f9c1 	bl	8006780 <HAL_TIM_PWM_ConfigChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002404:	f7ff fc01 	bl	8001c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240c:	220c      	movs	r2, #12
 800240e:	4619      	mov	r1, r3
 8002410:	4813      	ldr	r0, [pc, #76]	; (8002460 <MX_TIM8_Init+0x150>)
 8002412:	f004 f9b5 	bl	8006780 <HAL_TIM_PWM_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800241c:	f7ff fbf5 	bl	8001c0a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002438:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4807      	ldr	r0, [pc, #28]	; (8002460 <MX_TIM8_Init+0x150>)
 8002444:	f004 feb4 	bl	80071b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800244e:	f7ff fbdc 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002452:	4803      	ldr	r0, [pc, #12]	; (8002460 <MX_TIM8_Init+0x150>)
 8002454:	f000 f86c 	bl	8002530 <HAL_TIM_MspPostInit>

}
 8002458:	bf00      	nop
 800245a:	3758      	adds	r7, #88	; 0x58
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	2000069c 	.word	0x2000069c
 8002464:	40010400 	.word	0x40010400

08002468 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a29      	ldr	r2, [pc, #164]	; (800251c <HAL_TIM_Base_MspInit+0xb4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d10e      	bne.n	8002498 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HAL_TIM_Base_MspInit+0xb8>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a27      	ldr	r2, [pc, #156]	; (8002520 <HAL_TIM_Base_MspInit+0xb8>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_TIM_Base_MspInit+0xb8>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002496:	e03a      	b.n	800250e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a21      	ldr	r2, [pc, #132]	; (8002524 <HAL_TIM_Base_MspInit+0xbc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HAL_TIM_Base_MspInit+0xb8>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <HAL_TIM_Base_MspInit+0xb8>)
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_TIM_Base_MspInit+0xb8>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]
}
 80024be:	e026      	b.n	800250e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a18      	ldr	r2, [pc, #96]	; (8002528 <HAL_TIM_Base_MspInit+0xc0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d10e      	bne.n	80024e8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HAL_TIM_Base_MspInit+0xb8>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	4a13      	ldr	r2, [pc, #76]	; (8002520 <HAL_TIM_Base_MspInit+0xb8>)
 80024d4:	f043 0308 	orr.w	r3, r3, #8
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <HAL_TIM_Base_MspInit+0xb8>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
}
 80024e6:	e012      	b.n	800250e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0f      	ldr	r2, [pc, #60]	; (800252c <HAL_TIM_Base_MspInit+0xc4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d10d      	bne.n	800250e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_TIM_Base_MspInit+0xb8>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_TIM_Base_MspInit+0xb8>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <HAL_TIM_Base_MspInit+0xb8>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40010000 	.word	0x40010000
 8002520:	40023800 	.word	0x40023800
 8002524:	40000400 	.word	0x40000400
 8002528:	40000c00 	.word	0x40000c00
 800252c:	40010400 	.word	0x40010400

08002530 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a25      	ldr	r2, [pc, #148]	; (80025e4 <HAL_TIM_MspPostInit+0xb4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d11f      	bne.n	8002592 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <HAL_TIM_MspPostInit+0xb8>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <HAL_TIM_MspPostInit+0xb8>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <HAL_TIM_MspPostInit+0xb8>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MTR1_PWM_MCU_Pin|MTR2_PWM_MCU_Pin|MTR3_PWM_MCU_Pin|MTR4_PWM_MCU_Pin;
 800256e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002580:	2301      	movs	r3, #1
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4619      	mov	r1, r3
 800258a:	4818      	ldr	r0, [pc, #96]	; (80025ec <HAL_TIM_MspPostInit+0xbc>)
 800258c:	f001 fd86 	bl	800409c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002590:	e023      	b.n	80025da <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a16      	ldr	r2, [pc, #88]	; (80025f0 <HAL_TIM_MspPostInit+0xc0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d11e      	bne.n	80025da <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_TIM_MspPostInit+0xb8>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <HAL_TIM_MspPostInit+0xb8>)
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	6313      	str	r3, [r2, #48]	; 0x30
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_TIM_MspPostInit+0xb8>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_PWM_TIM8_CH3_Pin|LED_5050_PWM_IN_Pin;
 80025b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	2300      	movs	r3, #0
 80025c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025ca:	2303      	movs	r3, #3
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	4619      	mov	r1, r3
 80025d4:	4807      	ldr	r0, [pc, #28]	; (80025f4 <HAL_TIM_MspPostInit+0xc4>)
 80025d6:	f001 fd61 	bl	800409c <HAL_GPIO_Init>
}
 80025da:	bf00      	nop
 80025dc:	3728      	adds	r7, #40	; 0x28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40010000 	.word	0x40010000
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020000 	.word	0x40020000
 80025f0:	40010400 	.word	0x40010400
 80025f4:	40020800 	.word	0x40020800

080025f8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_UART4_Init+0x4c>)
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <MX_UART4_Init+0x50>)
 8002600:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <MX_UART4_Init+0x4c>)
 8002604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002608:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_UART4_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_UART4_Init+0x4c>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <MX_UART4_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <MX_UART4_Init+0x4c>)
 800261e:	220c      	movs	r2, #12
 8002620:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MX_UART4_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <MX_UART4_Init+0x4c>)
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_UART4_Init+0x4c>)
 8002630:	f004 fe24 	bl	800727c <HAL_UART_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800263a:	f7ff fae6 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	200006e4 	.word	0x200006e4
 8002648:	40004c00 	.word	0x40004c00

0800264c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MX_UART5_Init+0x4c>)
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <MX_UART5_Init+0x50>)
 8002654:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <MX_UART5_Init+0x4c>)
 8002658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800265c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_UART5_Init+0x4c>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <MX_UART5_Init+0x4c>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <MX_UART5_Init+0x4c>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_UART5_Init+0x4c>)
 8002672:	220c      	movs	r2, #12
 8002674:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <MX_UART5_Init+0x4c>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_UART5_Init+0x4c>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <MX_UART5_Init+0x4c>)
 8002684:	f004 fdfa 	bl	800727c <HAL_UART_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800268e:	f7ff fabc 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000728 	.word	0x20000728
 800269c:	40005000 	.word	0x40005000

080026a0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <MX_USART1_UART_Init+0x50>)
 80026a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026c6:	220c      	movs	r2, #12
 80026c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026d6:	4805      	ldr	r0, [pc, #20]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026d8:	f004 fdd0 	bl	800727c <HAL_UART_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026e2:	f7ff fa92 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000076c 	.word	0x2000076c
 80026f0:	40011000 	.word	0x40011000

080026f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <MX_USART2_UART_Init+0x4c>)
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <MX_USART2_UART_Init+0x50>)
 80026fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <MX_USART2_UART_Init+0x4c>)
 8002700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <MX_USART2_UART_Init+0x4c>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <MX_USART2_UART_Init+0x4c>)
 800270e:	2200      	movs	r2, #0
 8002710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <MX_USART2_UART_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <MX_USART2_UART_Init+0x4c>)
 800271a:	220c      	movs	r2, #12
 800271c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <MX_USART2_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <MX_USART2_UART_Init+0x4c>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800272a:	4805      	ldr	r0, [pc, #20]	; (8002740 <MX_USART2_UART_Init+0x4c>)
 800272c:	f004 fda6 	bl	800727c <HAL_UART_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002736:	f7ff fa68 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200007b0 	.word	0x200007b0
 8002744:	40004400 	.word	0x40004400

08002748 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <MX_USART3_UART_Init+0x4c>)
 800274e:	4a12      	ldr	r2, [pc, #72]	; (8002798 <MX_USART3_UART_Init+0x50>)
 8002750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <MX_USART3_UART_Init+0x4c>)
 8002754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <MX_USART3_UART_Init+0x4c>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <MX_USART3_UART_Init+0x4c>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <MX_USART3_UART_Init+0x4c>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <MX_USART3_UART_Init+0x4c>)
 800276e:	220c      	movs	r2, #12
 8002770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <MX_USART3_UART_Init+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <MX_USART3_UART_Init+0x4c>)
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <MX_USART3_UART_Init+0x4c>)
 8002780:	f004 fd7c 	bl	800727c <HAL_UART_Init>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800278a:	f7ff fa3e 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200007f4 	.word	0x200007f4
 8002798:	40004800 	.word	0x40004800

0800279c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_USART6_UART_Init+0x4c>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <MX_USART6_UART_Init+0x50>)
 80027a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <MX_USART6_UART_Init+0x4c>)
 80027a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <MX_USART6_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <MX_USART6_UART_Init+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <MX_USART6_UART_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <MX_USART6_UART_Init+0x4c>)
 80027c2:	220c      	movs	r2, #12
 80027c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <MX_USART6_UART_Init+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <MX_USART6_UART_Init+0x4c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <MX_USART6_UART_Init+0x4c>)
 80027d4:	f004 fd52 	bl	800727c <HAL_UART_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80027de:	f7ff fa14 	bl	8001c0a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000838 	.word	0x20000838
 80027ec:	40011400 	.word	0x40011400

080027f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b094      	sub	sp, #80	; 0x50
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a4a      	ldr	r2, [pc, #296]	; (8002938 <HAL_UART_MspInit+0x148>)
 800280e:	4293      	cmp	r3, r2
 8002810:	f040 80a0 	bne.w	8002954 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002814:	2300      	movs	r3, #0
 8002816:	63bb      	str	r3, [r7, #56]	; 0x38
 8002818:	4b48      	ldr	r3, [pc, #288]	; (800293c <HAL_UART_MspInit+0x14c>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	4a47      	ldr	r2, [pc, #284]	; (800293c <HAL_UART_MspInit+0x14c>)
 800281e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002822:	6413      	str	r3, [r2, #64]	; 0x40
 8002824:	4b45      	ldr	r3, [pc, #276]	; (800293c <HAL_UART_MspInit+0x14c>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002830:	2300      	movs	r3, #0
 8002832:	637b      	str	r3, [r7, #52]	; 0x34
 8002834:	4b41      	ldr	r3, [pc, #260]	; (800293c <HAL_UART_MspInit+0x14c>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	4a40      	ldr	r2, [pc, #256]	; (800293c <HAL_UART_MspInit+0x14c>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6313      	str	r3, [r2, #48]	; 0x30
 8002840:	4b3e      	ldr	r3, [pc, #248]	; (800293c <HAL_UART_MspInit+0x14c>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MCU_ESP32_TX_Pin|MCU_ESP32_RX_Pin;
 800284c:	2303      	movs	r3, #3
 800284e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800285c:	2308      	movs	r3, #8
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002860:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002864:	4619      	mov	r1, r3
 8002866:	4836      	ldr	r0, [pc, #216]	; (8002940 <HAL_UART_MspInit+0x150>)
 8002868:	f001 fc18 	bl	800409c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800286c:	4b35      	ldr	r3, [pc, #212]	; (8002944 <HAL_UART_MspInit+0x154>)
 800286e:	4a36      	ldr	r2, [pc, #216]	; (8002948 <HAL_UART_MspInit+0x158>)
 8002870:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002872:	4b34      	ldr	r3, [pc, #208]	; (8002944 <HAL_UART_MspInit+0x154>)
 8002874:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002878:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800287a:	4b32      	ldr	r3, [pc, #200]	; (8002944 <HAL_UART_MspInit+0x154>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002880:	4b30      	ldr	r3, [pc, #192]	; (8002944 <HAL_UART_MspInit+0x154>)
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002886:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <HAL_UART_MspInit+0x154>)
 8002888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800288c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800288e:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <HAL_UART_MspInit+0x154>)
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002894:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <HAL_UART_MspInit+0x154>)
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800289a:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <HAL_UART_MspInit+0x154>)
 800289c:	2200      	movs	r2, #0
 800289e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <HAL_UART_MspInit+0x154>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_UART_MspInit+0x154>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80028ac:	4825      	ldr	r0, [pc, #148]	; (8002944 <HAL_UART_MspInit+0x154>)
 80028ae:	f001 f879 	bl	80039a4 <HAL_DMA_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80028b8:	f7ff f9a7 	bl	8001c0a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a21      	ldr	r2, [pc, #132]	; (8002944 <HAL_UART_MspInit+0x154>)
 80028c0:	639a      	str	r2, [r3, #56]	; 0x38
 80028c2:	4a20      	ldr	r2, [pc, #128]	; (8002944 <HAL_UART_MspInit+0x154>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80028c8:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_UART_MspInit+0x15c>)
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <HAL_UART_MspInit+0x160>)
 80028cc:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80028ce:	4b1f      	ldr	r3, [pc, #124]	; (800294c <HAL_UART_MspInit+0x15c>)
 80028d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028d4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028d6:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_UART_MspInit+0x15c>)
 80028d8:	2240      	movs	r2, #64	; 0x40
 80028da:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_UART_MspInit+0x15c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <HAL_UART_MspInit+0x15c>)
 80028e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028e8:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ea:	4b18      	ldr	r3, [pc, #96]	; (800294c <HAL_UART_MspInit+0x15c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_UART_MspInit+0x15c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_UART_MspInit+0x15c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_UART_MspInit+0x15c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_UART_MspInit+0x15c>)
 8002904:	2200      	movs	r2, #0
 8002906:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002908:	4810      	ldr	r0, [pc, #64]	; (800294c <HAL_UART_MspInit+0x15c>)
 800290a:	f001 f84b 	bl	80039a4 <HAL_DMA_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002914:	f7ff f979 	bl	8001c0a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a0c      	ldr	r2, [pc, #48]	; (800294c <HAL_UART_MspInit+0x15c>)
 800291c:	635a      	str	r2, [r3, #52]	; 0x34
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_UART_MspInit+0x15c>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	2034      	movs	r0, #52	; 0x34
 800292a:	f001 f811 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800292e:	2034      	movs	r0, #52	; 0x34
 8002930:	f001 f82a 	bl	8003988 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002934:	e34a      	b.n	8002fcc <HAL_UART_MspInit+0x7dc>
 8002936:	bf00      	nop
 8002938:	40004c00 	.word	0x40004c00
 800293c:	40023800 	.word	0x40023800
 8002940:	40020000 	.word	0x40020000
 8002944:	2000087c 	.word	0x2000087c
 8002948:	40026040 	.word	0x40026040
 800294c:	200008dc 	.word	0x200008dc
 8002950:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a59      	ldr	r2, [pc, #356]	; (8002ac0 <HAL_UART_MspInit+0x2d0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	f040 80c0 	bne.w	8002ae0 <HAL_UART_MspInit+0x2f0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	633b      	str	r3, [r7, #48]	; 0x30
 8002964:	4b57      	ldr	r3, [pc, #348]	; (8002ac4 <HAL_UART_MspInit+0x2d4>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4a56      	ldr	r2, [pc, #344]	; (8002ac4 <HAL_UART_MspInit+0x2d4>)
 800296a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800296e:	6413      	str	r3, [r2, #64]	; 0x40
 8002970:	4b54      	ldr	r3, [pc, #336]	; (8002ac4 <HAL_UART_MspInit+0x2d4>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002980:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_UART_MspInit+0x2d4>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	4a4f      	ldr	r2, [pc, #316]	; (8002ac4 <HAL_UART_MspInit+0x2d4>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6313      	str	r3, [r2, #48]	; 0x30
 800298c:	4b4d      	ldr	r3, [pc, #308]	; (8002ac4 <HAL_UART_MspInit+0x2d4>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
 800299c:	4b49      	ldr	r3, [pc, #292]	; (8002ac4 <HAL_UART_MspInit+0x2d4>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	4a48      	ldr	r2, [pc, #288]	; (8002ac4 <HAL_UART_MspInit+0x2d4>)
 80029a2:	f043 0308 	orr.w	r3, r3, #8
 80029a6:	6313      	str	r3, [r2, #48]	; 0x30
 80029a8:	4b46      	ldr	r3, [pc, #280]	; (8002ac4 <HAL_UART_MspInit+0x2d4>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = MCU_UART5_TX_Pin;
 80029b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ba:	2302      	movs	r3, #2
 80029bc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c2:	2303      	movs	r3, #3
 80029c4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80029c6:	2308      	movs	r3, #8
 80029c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 80029ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ce:	4619      	mov	r1, r3
 80029d0:	483d      	ldr	r0, [pc, #244]	; (8002ac8 <HAL_UART_MspInit+0x2d8>)
 80029d2:	f001 fb63 	bl	800409c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MCU_UART5_RX_Pin;
 80029d6:	2304      	movs	r3, #4
 80029d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e2:	2303      	movs	r3, #3
 80029e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80029e6:	2308      	movs	r3, #8
 80029e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80029ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ee:	4619      	mov	r1, r3
 80029f0:	4836      	ldr	r0, [pc, #216]	; (8002acc <HAL_UART_MspInit+0x2dc>)
 80029f2:	f001 fb53 	bl	800409c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80029f6:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <HAL_UART_MspInit+0x2e0>)
 80029f8:	4a36      	ldr	r2, [pc, #216]	; (8002ad4 <HAL_UART_MspInit+0x2e4>)
 80029fa:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80029fc:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <HAL_UART_MspInit+0x2e0>)
 80029fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a02:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a04:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_UART_MspInit+0x2e0>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0a:	4b31      	ldr	r3, [pc, #196]	; (8002ad0 <HAL_UART_MspInit+0x2e0>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a10:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <HAL_UART_MspInit+0x2e0>)
 8002a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a16:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a18:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <HAL_UART_MspInit+0x2e0>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <HAL_UART_MspInit+0x2e0>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002a24:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <HAL_UART_MspInit+0x2e0>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_UART_MspInit+0x2e0>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a30:	4b27      	ldr	r3, [pc, #156]	; (8002ad0 <HAL_UART_MspInit+0x2e0>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002a36:	4826      	ldr	r0, [pc, #152]	; (8002ad0 <HAL_UART_MspInit+0x2e0>)
 8002a38:	f000 ffb4 	bl	80039a4 <HAL_DMA_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8002a42:	f7ff f8e2 	bl	8001c0a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a21      	ldr	r2, [pc, #132]	; (8002ad0 <HAL_UART_MspInit+0x2e0>)
 8002a4a:	639a      	str	r2, [r3, #56]	; 0x38
 8002a4c:	4a20      	ldr	r2, [pc, #128]	; (8002ad0 <HAL_UART_MspInit+0x2e0>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8002a52:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <HAL_UART_MspInit+0x2e8>)
 8002a54:	4a21      	ldr	r2, [pc, #132]	; (8002adc <HAL_UART_MspInit+0x2ec>)
 8002a56:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <HAL_UART_MspInit+0x2e8>)
 8002a5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a5e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_UART_MspInit+0x2e8>)
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a66:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <HAL_UART_MspInit+0x2e8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <HAL_UART_MspInit+0x2e8>)
 8002a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a72:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a74:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <HAL_UART_MspInit+0x2e8>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_UART_MspInit+0x2e8>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_UART_MspInit+0x2e8>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <HAL_UART_MspInit+0x2e8>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_UART_MspInit+0x2e8>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002a92:	4811      	ldr	r0, [pc, #68]	; (8002ad8 <HAL_UART_MspInit+0x2e8>)
 8002a94:	f000 ff86 	bl	80039a4 <HAL_DMA_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8002a9e:	f7ff f8b4 	bl	8001c0a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <HAL_UART_MspInit+0x2e8>)
 8002aa6:	635a      	str	r2, [r3, #52]	; 0x34
 8002aa8:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <HAL_UART_MspInit+0x2e8>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	2035      	movs	r0, #53	; 0x35
 8002ab4:	f000 ff4c 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002ab8:	2035      	movs	r0, #53	; 0x35
 8002aba:	f000 ff65 	bl	8003988 <HAL_NVIC_EnableIRQ>
}
 8002abe:	e285      	b.n	8002fcc <HAL_UART_MspInit+0x7dc>
 8002ac0:	40005000 	.word	0x40005000
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40020800 	.word	0x40020800
 8002acc:	40020c00 	.word	0x40020c00
 8002ad0:	2000093c 	.word	0x2000093c
 8002ad4:	40026010 	.word	0x40026010
 8002ad8:	2000099c 	.word	0x2000099c
 8002adc:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a95      	ldr	r2, [pc, #596]	; (8002d3c <HAL_UART_MspInit+0x54c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	f040 8091 	bne.w	8002c0e <HAL_UART_MspInit+0x41e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aec:	2300      	movs	r3, #0
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	4b93      	ldr	r3, [pc, #588]	; (8002d40 <HAL_UART_MspInit+0x550>)
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	4a92      	ldr	r2, [pc, #584]	; (8002d40 <HAL_UART_MspInit+0x550>)
 8002af6:	f043 0310 	orr.w	r3, r3, #16
 8002afa:	6453      	str	r3, [r2, #68]	; 0x44
 8002afc:	4b90      	ldr	r3, [pc, #576]	; (8002d40 <HAL_UART_MspInit+0x550>)
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
 8002b0c:	4b8c      	ldr	r3, [pc, #560]	; (8002d40 <HAL_UART_MspInit+0x550>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	4a8b      	ldr	r2, [pc, #556]	; (8002d40 <HAL_UART_MspInit+0x550>)
 8002b12:	f043 0302 	orr.w	r3, r3, #2
 8002b16:	6313      	str	r3, [r2, #48]	; 0x30
 8002b18:	4b89      	ldr	r3, [pc, #548]	; (8002d40 <HAL_UART_MspInit+0x550>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = MCU_USART1_TX_Pin|MCU_USART1_RX_Pin;
 8002b24:	23c0      	movs	r3, #192	; 0xc0
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b30:	2303      	movs	r3, #3
 8002b32:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b34:	2307      	movs	r3, #7
 8002b36:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4881      	ldr	r0, [pc, #516]	; (8002d44 <HAL_UART_MspInit+0x554>)
 8002b40:	f001 faac 	bl	800409c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002b44:	4b80      	ldr	r3, [pc, #512]	; (8002d48 <HAL_UART_MspInit+0x558>)
 8002b46:	4a81      	ldr	r2, [pc, #516]	; (8002d4c <HAL_UART_MspInit+0x55c>)
 8002b48:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002b4a:	4b7f      	ldr	r3, [pc, #508]	; (8002d48 <HAL_UART_MspInit+0x558>)
 8002b4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b50:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b52:	4b7d      	ldr	r3, [pc, #500]	; (8002d48 <HAL_UART_MspInit+0x558>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b58:	4b7b      	ldr	r3, [pc, #492]	; (8002d48 <HAL_UART_MspInit+0x558>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b5e:	4b7a      	ldr	r3, [pc, #488]	; (8002d48 <HAL_UART_MspInit+0x558>)
 8002b60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b64:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b66:	4b78      	ldr	r3, [pc, #480]	; (8002d48 <HAL_UART_MspInit+0x558>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b6c:	4b76      	ldr	r3, [pc, #472]	; (8002d48 <HAL_UART_MspInit+0x558>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002b72:	4b75      	ldr	r3, [pc, #468]	; (8002d48 <HAL_UART_MspInit+0x558>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b78:	4b73      	ldr	r3, [pc, #460]	; (8002d48 <HAL_UART_MspInit+0x558>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b7e:	4b72      	ldr	r3, [pc, #456]	; (8002d48 <HAL_UART_MspInit+0x558>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b84:	4870      	ldr	r0, [pc, #448]	; (8002d48 <HAL_UART_MspInit+0x558>)
 8002b86:	f000 ff0d 	bl	80039a4 <HAL_DMA_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 8002b90:	f7ff f83b 	bl	8001c0a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a6c      	ldr	r2, [pc, #432]	; (8002d48 <HAL_UART_MspInit+0x558>)
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38
 8002b9a:	4a6b      	ldr	r2, [pc, #428]	; (8002d48 <HAL_UART_MspInit+0x558>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002ba0:	4b6b      	ldr	r3, [pc, #428]	; (8002d50 <HAL_UART_MspInit+0x560>)
 8002ba2:	4a6c      	ldr	r2, [pc, #432]	; (8002d54 <HAL_UART_MspInit+0x564>)
 8002ba4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002ba6:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <HAL_UART_MspInit+0x560>)
 8002ba8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bac:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bae:	4b68      	ldr	r3, [pc, #416]	; (8002d50 <HAL_UART_MspInit+0x560>)
 8002bb0:	2240      	movs	r2, #64	; 0x40
 8002bb2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bb4:	4b66      	ldr	r3, [pc, #408]	; (8002d50 <HAL_UART_MspInit+0x560>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bba:	4b65      	ldr	r3, [pc, #404]	; (8002d50 <HAL_UART_MspInit+0x560>)
 8002bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bc0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_UART_MspInit+0x560>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bc8:	4b61      	ldr	r3, [pc, #388]	; (8002d50 <HAL_UART_MspInit+0x560>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002bce:	4b60      	ldr	r3, [pc, #384]	; (8002d50 <HAL_UART_MspInit+0x560>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bd4:	4b5e      	ldr	r3, [pc, #376]	; (8002d50 <HAL_UART_MspInit+0x560>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bda:	4b5d      	ldr	r3, [pc, #372]	; (8002d50 <HAL_UART_MspInit+0x560>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002be0:	485b      	ldr	r0, [pc, #364]	; (8002d50 <HAL_UART_MspInit+0x560>)
 8002be2:	f000 fedf 	bl	80039a4 <HAL_DMA_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_UART_MspInit+0x400>
      Error_Handler();
 8002bec:	f7ff f80d 	bl	8001c0a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a57      	ldr	r2, [pc, #348]	; (8002d50 <HAL_UART_MspInit+0x560>)
 8002bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bf6:	4a56      	ldr	r2, [pc, #344]	; (8002d50 <HAL_UART_MspInit+0x560>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2025      	movs	r0, #37	; 0x25
 8002c02:	f000 fea5 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c06:	2025      	movs	r0, #37	; 0x25
 8002c08:	f000 febe 	bl	8003988 <HAL_NVIC_EnableIRQ>
}
 8002c0c:	e1de      	b.n	8002fcc <HAL_UART_MspInit+0x7dc>
  else if(uartHandle->Instance==USART2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a51      	ldr	r2, [pc, #324]	; (8002d58 <HAL_UART_MspInit+0x568>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	f040 80ab 	bne.w	8002d70 <HAL_UART_MspInit+0x580>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	4b48      	ldr	r3, [pc, #288]	; (8002d40 <HAL_UART_MspInit+0x550>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a47      	ldr	r2, [pc, #284]	; (8002d40 <HAL_UART_MspInit+0x550>)
 8002c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2a:	4b45      	ldr	r3, [pc, #276]	; (8002d40 <HAL_UART_MspInit+0x550>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	4b41      	ldr	r3, [pc, #260]	; (8002d40 <HAL_UART_MspInit+0x550>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a40      	ldr	r2, [pc, #256]	; (8002d40 <HAL_UART_MspInit+0x550>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b3e      	ldr	r3, [pc, #248]	; (8002d40 <HAL_UART_MspInit+0x550>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCU_USART2_TX_Pin|MCU_USART2_RX_Pin;
 8002c52:	230c      	movs	r3, #12
 8002c54:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c62:	2307      	movs	r3, #7
 8002c64:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	483b      	ldr	r0, [pc, #236]	; (8002d5c <HAL_UART_MspInit+0x56c>)
 8002c6e:	f001 fa15 	bl	800409c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002c72:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_UART_MspInit+0x570>)
 8002c74:	4a3b      	ldr	r2, [pc, #236]	; (8002d64 <HAL_UART_MspInit+0x574>)
 8002c76:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002c78:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <HAL_UART_MspInit+0x570>)
 8002c7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c7e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c80:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <HAL_UART_MspInit+0x570>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c86:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <HAL_UART_MspInit+0x570>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c8c:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <HAL_UART_MspInit+0x570>)
 8002c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c92:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c94:	4b32      	ldr	r3, [pc, #200]	; (8002d60 <HAL_UART_MspInit+0x570>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c9a:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_UART_MspInit+0x570>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002ca0:	4b2f      	ldr	r3, [pc, #188]	; (8002d60 <HAL_UART_MspInit+0x570>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ca6:	4b2e      	ldr	r3, [pc, #184]	; (8002d60 <HAL_UART_MspInit+0x570>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cac:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <HAL_UART_MspInit+0x570>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002cb2:	482b      	ldr	r0, [pc, #172]	; (8002d60 <HAL_UART_MspInit+0x570>)
 8002cb4:	f000 fe76 	bl	80039a4 <HAL_DMA_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_UART_MspInit+0x4d2>
      Error_Handler();
 8002cbe:	f7fe ffa4 	bl	8001c0a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a26      	ldr	r2, [pc, #152]	; (8002d60 <HAL_UART_MspInit+0x570>)
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8002cc8:	4a25      	ldr	r2, [pc, #148]	; (8002d60 <HAL_UART_MspInit+0x570>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002cce:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <HAL_UART_MspInit+0x578>)
 8002cd0:	4a26      	ldr	r2, [pc, #152]	; (8002d6c <HAL_UART_MspInit+0x57c>)
 8002cd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_UART_MspInit+0x578>)
 8002cd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cda:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cdc:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <HAL_UART_MspInit+0x578>)
 8002cde:	2240      	movs	r2, #64	; 0x40
 8002ce0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <HAL_UART_MspInit+0x578>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <HAL_UART_MspInit+0x578>)
 8002cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_UART_MspInit+0x578>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <HAL_UART_MspInit+0x578>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_UART_MspInit+0x578>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d02:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_UART_MspInit+0x578>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_UART_MspInit+0x578>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d0e:	4816      	ldr	r0, [pc, #88]	; (8002d68 <HAL_UART_MspInit+0x578>)
 8002d10:	f000 fe48 	bl	80039a4 <HAL_DMA_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_UART_MspInit+0x52e>
      Error_Handler();
 8002d1a:	f7fe ff76 	bl	8001c0a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a11      	ldr	r2, [pc, #68]	; (8002d68 <HAL_UART_MspInit+0x578>)
 8002d22:	635a      	str	r2, [r3, #52]	; 0x34
 8002d24:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <HAL_UART_MspInit+0x578>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	2026      	movs	r0, #38	; 0x26
 8002d30:	f000 fe0e 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d34:	2026      	movs	r0, #38	; 0x26
 8002d36:	f000 fe27 	bl	8003988 <HAL_NVIC_EnableIRQ>
}
 8002d3a:	e147      	b.n	8002fcc <HAL_UART_MspInit+0x7dc>
 8002d3c:	40011000 	.word	0x40011000
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40020400 	.word	0x40020400
 8002d48:	200009fc 	.word	0x200009fc
 8002d4c:	40026440 	.word	0x40026440
 8002d50:	20000a5c 	.word	0x20000a5c
 8002d54:	400264b8 	.word	0x400264b8
 8002d58:	40004400 	.word	0x40004400
 8002d5c:	40020000 	.word	0x40020000
 8002d60:	20000abc 	.word	0x20000abc
 8002d64:	40026088 	.word	0x40026088
 8002d68:	20000b1c 	.word	0x20000b1c
 8002d6c:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a97      	ldr	r2, [pc, #604]	; (8002fd4 <HAL_UART_MspInit+0x7e4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	f040 8092 	bne.w	8002ea0 <HAL_UART_MspInit+0x6b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	4b95      	ldr	r3, [pc, #596]	; (8002fd8 <HAL_UART_MspInit+0x7e8>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	4a94      	ldr	r2, [pc, #592]	; (8002fd8 <HAL_UART_MspInit+0x7e8>)
 8002d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8c:	4b92      	ldr	r3, [pc, #584]	; (8002fd8 <HAL_UART_MspInit+0x7e8>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d98:	2300      	movs	r3, #0
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	4b8e      	ldr	r3, [pc, #568]	; (8002fd8 <HAL_UART_MspInit+0x7e8>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	4a8d      	ldr	r2, [pc, #564]	; (8002fd8 <HAL_UART_MspInit+0x7e8>)
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	6313      	str	r3, [r2, #48]	; 0x30
 8002da8:	4b8b      	ldr	r3, [pc, #556]	; (8002fd8 <HAL_UART_MspInit+0x7e8>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MCU_HLBr_TX_Pin|MCU_HLBr_RX_Pin;
 8002db4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002db8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4882      	ldr	r0, [pc, #520]	; (8002fdc <HAL_UART_MspInit+0x7ec>)
 8002dd2:	f001 f963 	bl	800409c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002dd6:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <HAL_UART_MspInit+0x7f0>)
 8002dd8:	4a82      	ldr	r2, [pc, #520]	; (8002fe4 <HAL_UART_MspInit+0x7f4>)
 8002dda:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002ddc:	4b80      	ldr	r3, [pc, #512]	; (8002fe0 <HAL_UART_MspInit+0x7f0>)
 8002dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002de2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002de4:	4b7e      	ldr	r3, [pc, #504]	; (8002fe0 <HAL_UART_MspInit+0x7f0>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dea:	4b7d      	ldr	r3, [pc, #500]	; (8002fe0 <HAL_UART_MspInit+0x7f0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002df0:	4b7b      	ldr	r3, [pc, #492]	; (8002fe0 <HAL_UART_MspInit+0x7f0>)
 8002df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002df8:	4b79      	ldr	r3, [pc, #484]	; (8002fe0 <HAL_UART_MspInit+0x7f0>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dfe:	4b78      	ldr	r3, [pc, #480]	; (8002fe0 <HAL_UART_MspInit+0x7f0>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002e04:	4b76      	ldr	r3, [pc, #472]	; (8002fe0 <HAL_UART_MspInit+0x7f0>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e0a:	4b75      	ldr	r3, [pc, #468]	; (8002fe0 <HAL_UART_MspInit+0x7f0>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e10:	4b73      	ldr	r3, [pc, #460]	; (8002fe0 <HAL_UART_MspInit+0x7f0>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e16:	4872      	ldr	r0, [pc, #456]	; (8002fe0 <HAL_UART_MspInit+0x7f0>)
 8002e18:	f000 fdc4 	bl	80039a4 <HAL_DMA_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_UART_MspInit+0x636>
      Error_Handler();
 8002e22:	f7fe fef2 	bl	8001c0a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a6d      	ldr	r2, [pc, #436]	; (8002fe0 <HAL_UART_MspInit+0x7f0>)
 8002e2a:	639a      	str	r2, [r3, #56]	; 0x38
 8002e2c:	4a6c      	ldr	r2, [pc, #432]	; (8002fe0 <HAL_UART_MspInit+0x7f0>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002e32:	4b6d      	ldr	r3, [pc, #436]	; (8002fe8 <HAL_UART_MspInit+0x7f8>)
 8002e34:	4a6d      	ldr	r2, [pc, #436]	; (8002fec <HAL_UART_MspInit+0x7fc>)
 8002e36:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002e38:	4b6b      	ldr	r3, [pc, #428]	; (8002fe8 <HAL_UART_MspInit+0x7f8>)
 8002e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e3e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e40:	4b69      	ldr	r3, [pc, #420]	; (8002fe8 <HAL_UART_MspInit+0x7f8>)
 8002e42:	2240      	movs	r2, #64	; 0x40
 8002e44:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e46:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <HAL_UART_MspInit+0x7f8>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e4c:	4b66      	ldr	r3, [pc, #408]	; (8002fe8 <HAL_UART_MspInit+0x7f8>)
 8002e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e52:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e54:	4b64      	ldr	r3, [pc, #400]	; (8002fe8 <HAL_UART_MspInit+0x7f8>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e5a:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_UART_MspInit+0x7f8>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002e60:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <HAL_UART_MspInit+0x7f8>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e66:	4b60      	ldr	r3, [pc, #384]	; (8002fe8 <HAL_UART_MspInit+0x7f8>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e6c:	4b5e      	ldr	r3, [pc, #376]	; (8002fe8 <HAL_UART_MspInit+0x7f8>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002e72:	485d      	ldr	r0, [pc, #372]	; (8002fe8 <HAL_UART_MspInit+0x7f8>)
 8002e74:	f000 fd96 	bl	80039a4 <HAL_DMA_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_UART_MspInit+0x692>
      Error_Handler();
 8002e7e:	f7fe fec4 	bl	8001c0a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a58      	ldr	r2, [pc, #352]	; (8002fe8 <HAL_UART_MspInit+0x7f8>)
 8002e86:	635a      	str	r2, [r3, #52]	; 0x34
 8002e88:	4a57      	ldr	r2, [pc, #348]	; (8002fe8 <HAL_UART_MspInit+0x7f8>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2100      	movs	r1, #0
 8002e92:	2027      	movs	r0, #39	; 0x27
 8002e94:	f000 fd5c 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e98:	2027      	movs	r0, #39	; 0x27
 8002e9a:	f000 fd75 	bl	8003988 <HAL_NVIC_EnableIRQ>
}
 8002e9e:	e095      	b.n	8002fcc <HAL_UART_MspInit+0x7dc>
  else if(uartHandle->Instance==USART6)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	; (8002ff0 <HAL_UART_MspInit+0x800>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	f040 8090 	bne.w	8002fcc <HAL_UART_MspInit+0x7dc>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	4b49      	ldr	r3, [pc, #292]	; (8002fd8 <HAL_UART_MspInit+0x7e8>)
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	4a48      	ldr	r2, [pc, #288]	; (8002fd8 <HAL_UART_MspInit+0x7e8>)
 8002eb6:	f043 0320 	orr.w	r3, r3, #32
 8002eba:	6453      	str	r3, [r2, #68]	; 0x44
 8002ebc:	4b46      	ldr	r3, [pc, #280]	; (8002fd8 <HAL_UART_MspInit+0x7e8>)
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	4b42      	ldr	r3, [pc, #264]	; (8002fd8 <HAL_UART_MspInit+0x7e8>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	4a41      	ldr	r2, [pc, #260]	; (8002fd8 <HAL_UART_MspInit+0x7e8>)
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed8:	4b3f      	ldr	r3, [pc, #252]	; (8002fd8 <HAL_UART_MspInit+0x7e8>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MCU_USART6_TX_Pin|MCU_USART6_RX_Pin;
 8002ee4:	23c0      	movs	r3, #192	; 0xc0
 8002ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002efc:	4619      	mov	r1, r3
 8002efe:	4837      	ldr	r0, [pc, #220]	; (8002fdc <HAL_UART_MspInit+0x7ec>)
 8002f00:	f001 f8cc 	bl	800409c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002f04:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <HAL_UART_MspInit+0x804>)
 8002f06:	4a3c      	ldr	r2, [pc, #240]	; (8002ff8 <HAL_UART_MspInit+0x808>)
 8002f08:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002f0a:	4b3a      	ldr	r3, [pc, #232]	; (8002ff4 <HAL_UART_MspInit+0x804>)
 8002f0c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002f10:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f12:	4b38      	ldr	r3, [pc, #224]	; (8002ff4 <HAL_UART_MspInit+0x804>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f18:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <HAL_UART_MspInit+0x804>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f1e:	4b35      	ldr	r3, [pc, #212]	; (8002ff4 <HAL_UART_MspInit+0x804>)
 8002f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f24:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f26:	4b33      	ldr	r3, [pc, #204]	; (8002ff4 <HAL_UART_MspInit+0x804>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f2c:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <HAL_UART_MspInit+0x804>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002f32:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <HAL_UART_MspInit+0x804>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f38:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <HAL_UART_MspInit+0x804>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_UART_MspInit+0x804>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002f44:	482b      	ldr	r0, [pc, #172]	; (8002ff4 <HAL_UART_MspInit+0x804>)
 8002f46:	f000 fd2d 	bl	80039a4 <HAL_DMA_Init>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_UART_MspInit+0x764>
      Error_Handler();
 8002f50:	f7fe fe5b 	bl	8001c0a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a27      	ldr	r2, [pc, #156]	; (8002ff4 <HAL_UART_MspInit+0x804>)
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
 8002f5a:	4a26      	ldr	r2, [pc, #152]	; (8002ff4 <HAL_UART_MspInit+0x804>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002f60:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <HAL_UART_MspInit+0x80c>)
 8002f62:	4a27      	ldr	r2, [pc, #156]	; (8003000 <HAL_UART_MspInit+0x810>)
 8002f64:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002f66:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <HAL_UART_MspInit+0x80c>)
 8002f68:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002f6c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_UART_MspInit+0x80c>)
 8002f70:	2240      	movs	r2, #64	; 0x40
 8002f72:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f74:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <HAL_UART_MspInit+0x80c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_UART_MspInit+0x80c>)
 8002f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f80:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f82:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <HAL_UART_MspInit+0x80c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <HAL_UART_MspInit+0x80c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_UART_MspInit+0x80c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_UART_MspInit+0x80c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_UART_MspInit+0x80c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002fa0:	4816      	ldr	r0, [pc, #88]	; (8002ffc <HAL_UART_MspInit+0x80c>)
 8002fa2:	f000 fcff 	bl	80039a4 <HAL_DMA_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_UART_MspInit+0x7c0>
      Error_Handler();
 8002fac:	f7fe fe2d 	bl	8001c0a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <HAL_UART_MspInit+0x80c>)
 8002fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb6:	4a11      	ldr	r2, [pc, #68]	; (8002ffc <HAL_UART_MspInit+0x80c>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	2047      	movs	r0, #71	; 0x47
 8002fc2:	f000 fcc5 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002fc6:	2047      	movs	r0, #71	; 0x47
 8002fc8:	f000 fcde 	bl	8003988 <HAL_NVIC_EnableIRQ>
}
 8002fcc:	bf00      	nop
 8002fce:	3750      	adds	r7, #80	; 0x50
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40004800 	.word	0x40004800
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	20000b7c 	.word	0x20000b7c
 8002fe4:	40026028 	.word	0x40026028
 8002fe8:	20000bdc 	.word	0x20000bdc
 8002fec:	40026058 	.word	0x40026058
 8002ff0:	40011400 	.word	0x40011400
 8002ff4:	20000c3c 	.word	0x20000c3c
 8002ff8:	40026428 	.word	0x40026428
 8002ffc:	20000c9c 	.word	0x20000c9c
 8003000:	400264a0 	.word	0x400264a0

08003004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800303c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003008:	480d      	ldr	r0, [pc, #52]	; (8003040 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800300a:	490e      	ldr	r1, [pc, #56]	; (8003044 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800300c:	4a0e      	ldr	r2, [pc, #56]	; (8003048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800300e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003010:	e002      	b.n	8003018 <LoopCopyDataInit>

08003012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003016:	3304      	adds	r3, #4

08003018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800301a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800301c:	d3f9      	bcc.n	8003012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800301e:	4a0b      	ldr	r2, [pc, #44]	; (800304c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003020:	4c0b      	ldr	r4, [pc, #44]	; (8003050 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003024:	e001      	b.n	800302a <LoopFillZerobss>

08003026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003028:	3204      	adds	r2, #4

0800302a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800302a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800302c:	d3fb      	bcc.n	8003026 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800302e:	f7fe fffd 	bl	800202c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003032:	f005 f823 	bl	800807c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003036:	f7fe f9af 	bl	8001398 <main>
  bx  lr    
 800303a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800303c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003044:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8003048:	0800a2c4 	.word	0x0800a2c4
  ldr r2, =_sbss
 800304c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8003050:	20000d00 	.word	0x20000d00

08003054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003054:	e7fe      	b.n	8003054 <ADC_IRQHandler>
	...

08003058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_Init+0x40>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0d      	ldr	r2, [pc, #52]	; (8003098 <HAL_Init+0x40>)
 8003062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_Init+0x40>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <HAL_Init+0x40>)
 800306e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <HAL_Init+0x40>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a07      	ldr	r2, [pc, #28]	; (8003098 <HAL_Init+0x40>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003080:	2003      	movs	r0, #3
 8003082:	f000 fc5a 	bl	800393a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003086:	200f      	movs	r0, #15
 8003088:	f7fe fe6a 	bl	8001d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800308c:	f7fe fe40 	bl	8001d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023c00 	.word	0x40023c00

0800309c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_IncTick+0x20>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_IncTick+0x24>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4413      	add	r3, r2
 80030ac:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <HAL_IncTick+0x24>)
 80030ae:	6013      	str	r3, [r2, #0]
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000018 	.word	0x20000018
 80030c0:	20000cfc 	.word	0x20000cfc

080030c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return uwTick;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_GetTick+0x14>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000cfc 	.word	0x20000cfc

080030dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e4:	f7ff ffee 	bl	80030c4 <HAL_GetTick>
 80030e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d005      	beq.n	8003102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <HAL_Delay+0x44>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003102:	bf00      	nop
 8003104:	f7ff ffde 	bl	80030c4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	429a      	cmp	r2, r3
 8003112:	d8f7      	bhi.n	8003104 <HAL_Delay+0x28>
  {
  }
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000018 	.word	0x20000018

08003124 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e033      	b.n	80031a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fe8c 	bl	8000e60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	d118      	bne.n	8003194 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800316a:	f023 0302 	bic.w	r3, r3, #2
 800316e:	f043 0202 	orr.w	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f93a 	bl	80033f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
 8003192:	e001      	b.n	8003198 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x1c>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e105      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x228>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b09      	cmp	r3, #9
 80031d6:	d925      	bls.n	8003224 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68d9      	ldr	r1, [r3, #12]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	3b1e      	subs	r3, #30
 80031ee:	2207      	movs	r2, #7
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43da      	mvns	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	400a      	ands	r2, r1
 80031fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68d9      	ldr	r1, [r3, #12]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	4618      	mov	r0, r3
 8003210:	4603      	mov	r3, r0
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4403      	add	r3, r0
 8003216:	3b1e      	subs	r3, #30
 8003218:	409a      	lsls	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	e022      	b.n	800326a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6919      	ldr	r1, [r3, #16]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	4613      	mov	r3, r2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	4413      	add	r3, r2
 8003238:	2207      	movs	r2, #7
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	400a      	ands	r2, r1
 8003246:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6919      	ldr	r1, [r3, #16]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	b29b      	uxth	r3, r3
 8003258:	4618      	mov	r0, r3
 800325a:	4603      	mov	r3, r0
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4403      	add	r3, r0
 8003260:	409a      	lsls	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b06      	cmp	r3, #6
 8003270:	d824      	bhi.n	80032bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	3b05      	subs	r3, #5
 8003284:	221f      	movs	r2, #31
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43da      	mvns	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	400a      	ands	r2, r1
 8003292:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	4618      	mov	r0, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	3b05      	subs	r3, #5
 80032ae:	fa00 f203 	lsl.w	r2, r0, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ba:	e04c      	b.n	8003356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b0c      	cmp	r3, #12
 80032c2:	d824      	bhi.n	800330e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	3b23      	subs	r3, #35	; 0x23
 80032d6:	221f      	movs	r2, #31
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43da      	mvns	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	400a      	ands	r2, r1
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	4618      	mov	r0, r3
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	3b23      	subs	r3, #35	; 0x23
 8003300:	fa00 f203 	lsl.w	r2, r0, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
 800330c:	e023      	b.n	8003356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	3b41      	subs	r3, #65	; 0x41
 8003320:	221f      	movs	r2, #31
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43da      	mvns	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	400a      	ands	r2, r1
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	4618      	mov	r0, r3
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	3b41      	subs	r3, #65	; 0x41
 800334a:	fa00 f203 	lsl.w	r2, r0, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003356:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <HAL_ADC_ConfigChannel+0x234>)
 8003358:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a21      	ldr	r2, [pc, #132]	; (80033e4 <HAL_ADC_ConfigChannel+0x238>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d109      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x1cc>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b12      	cmp	r3, #18
 800336a:	d105      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a19      	ldr	r2, [pc, #100]	; (80033e4 <HAL_ADC_ConfigChannel+0x238>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d123      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x21e>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b10      	cmp	r3, #16
 8003388:	d003      	beq.n	8003392 <HAL_ADC_ConfigChannel+0x1e6>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b11      	cmp	r3, #17
 8003390:	d11b      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b10      	cmp	r3, #16
 80033a4:	d111      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <HAL_ADC_ConfigChannel+0x23c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a10      	ldr	r2, [pc, #64]	; (80033ec <HAL_ADC_ConfigChannel+0x240>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	0c9a      	lsrs	r2, r3, #18
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033bc:	e002      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f9      	bne.n	80033be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	40012300 	.word	0x40012300
 80033e4:	40012000 	.word	0x40012000
 80033e8:	20000010 	.word	0x20000010
 80033ec:	431bde83 	.word	0x431bde83

080033f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033f8:	4b79      	ldr	r3, [pc, #484]	; (80035e0 <ADC_Init+0x1f0>)
 80033fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	431a      	orrs	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	021a      	lsls	r2, r3, #8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6899      	ldr	r1, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	4a58      	ldr	r2, [pc, #352]	; (80035e4 <ADC_Init+0x1f4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d022      	beq.n	80034ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003496:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6899      	ldr	r1, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6899      	ldr	r1, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	e00f      	b.n	80034ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0202 	bic.w	r2, r2, #2
 80034fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6899      	ldr	r1, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7e1b      	ldrb	r3, [r3, #24]
 8003508:	005a      	lsls	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01b      	beq.n	8003554 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800352a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800353a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6859      	ldr	r1, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	3b01      	subs	r3, #1
 8003548:	035a      	lsls	r2, r3, #13
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	e007      	b.n	8003564 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003562:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	3b01      	subs	r3, #1
 8003580:	051a      	lsls	r2, r3, #20
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6899      	ldr	r1, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035a6:	025a      	lsls	r2, r3, #9
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6899      	ldr	r1, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	029a      	lsls	r2, r3, #10
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	609a      	str	r2, [r3, #8]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40012300 	.word	0x40012300
 80035e4:	0f000001 	.word	0x0f000001

080035e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0ed      	b.n	80037d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fd fca2 	bl	8000f50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800361c:	f7ff fd52 	bl	80030c4 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003622:	e012      	b.n	800364a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003624:	f7ff fd4e 	bl	80030c4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b0a      	cmp	r3, #10
 8003630:	d90b      	bls.n	800364a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2205      	movs	r2, #5
 8003642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0c5      	b.n	80037d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0e5      	beq.n	8003624 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0202 	bic.w	r2, r2, #2
 8003666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003668:	f7ff fd2c 	bl	80030c4 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800366e:	e012      	b.n	8003696 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003670:	f7ff fd28 	bl	80030c4 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b0a      	cmp	r3, #10
 800367c:	d90b      	bls.n	8003696 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2205      	movs	r2, #5
 800368e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e09f      	b.n	80037d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e5      	bne.n	8003670 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	7e1b      	ldrb	r3, [r3, #24]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d108      	bne.n	80036be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e007      	b.n	80036ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7e5b      	ldrb	r3, [r3, #25]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d108      	bne.n	80036e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e007      	b.n	80036f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7e9b      	ldrb	r3, [r3, #26]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d108      	bne.n	8003712 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0220 	orr.w	r2, r2, #32
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e007      	b.n	8003722 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0220 	bic.w	r2, r2, #32
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7edb      	ldrb	r3, [r3, #27]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d108      	bne.n	800373c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0210 	bic.w	r2, r2, #16
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e007      	b.n	800374c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0210 	orr.w	r2, r2, #16
 800374a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7f1b      	ldrb	r3, [r3, #28]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d108      	bne.n	8003766 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0208 	orr.w	r2, r2, #8
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e007      	b.n	8003776 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0208 	bic.w	r2, r2, #8
 8003774:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7f5b      	ldrb	r3, [r3, #29]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d108      	bne.n	8003790 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0204 	orr.w	r2, r2, #4
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e007      	b.n	80037a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0204 	bic.w	r2, r2, #4
 800379e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	ea42 0103 	orr.w	r1, r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	1e5a      	subs	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <__NVIC_SetPriorityGrouping+0x44>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037fc:	4013      	ands	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800380c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003812:	4a04      	ldr	r2, [pc, #16]	; (8003824 <__NVIC_SetPriorityGrouping+0x44>)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	60d3      	str	r3, [r2, #12]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800382c:	4b04      	ldr	r3, [pc, #16]	; (8003840 <__NVIC_GetPriorityGrouping+0x18>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	f003 0307 	and.w	r3, r3, #7
}
 8003836:	4618      	mov	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	2b00      	cmp	r3, #0
 8003854:	db0b      	blt.n	800386e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	f003 021f 	and.w	r2, r3, #31
 800385c:	4907      	ldr	r1, [pc, #28]	; (800387c <__NVIC_EnableIRQ+0x38>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2001      	movs	r0, #1
 8003866:	fa00 f202 	lsl.w	r2, r0, r2
 800386a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	e000e100 	.word	0xe000e100

08003880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	6039      	str	r1, [r7, #0]
 800388a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003890:	2b00      	cmp	r3, #0
 8003892:	db0a      	blt.n	80038aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	b2da      	uxtb	r2, r3
 8003898:	490c      	ldr	r1, [pc, #48]	; (80038cc <__NVIC_SetPriority+0x4c>)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	0112      	lsls	r2, r2, #4
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	440b      	add	r3, r1
 80038a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038a8:	e00a      	b.n	80038c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4908      	ldr	r1, [pc, #32]	; (80038d0 <__NVIC_SetPriority+0x50>)
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	3b04      	subs	r3, #4
 80038b8:	0112      	lsls	r2, r2, #4
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	440b      	add	r3, r1
 80038be:	761a      	strb	r2, [r3, #24]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000e100 	.word	0xe000e100
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b089      	sub	sp, #36	; 0x24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f1c3 0307 	rsb	r3, r3, #7
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	bf28      	it	cs
 80038f2:	2304      	movcs	r3, #4
 80038f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3304      	adds	r3, #4
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	d902      	bls.n	8003904 <NVIC_EncodePriority+0x30>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3b03      	subs	r3, #3
 8003902:	e000      	b.n	8003906 <NVIC_EncodePriority+0x32>
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003908:	f04f 32ff 	mov.w	r2, #4294967295
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43da      	mvns	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	401a      	ands	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800391c:	f04f 31ff 	mov.w	r1, #4294967295
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	fa01 f303 	lsl.w	r3, r1, r3
 8003926:	43d9      	mvns	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	4313      	orrs	r3, r2
         );
}
 800392e:	4618      	mov	r0, r3
 8003930:	3724      	adds	r7, #36	; 0x24
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ff4c 	bl	80037e0 <__NVIC_SetPriorityGrouping>
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003962:	f7ff ff61 	bl	8003828 <__NVIC_GetPriorityGrouping>
 8003966:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	6978      	ldr	r0, [r7, #20]
 800396e:	f7ff ffb1 	bl	80038d4 <NVIC_EncodePriority>
 8003972:	4602      	mov	r2, r0
 8003974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff ff80 	bl	8003880 <__NVIC_SetPriority>
}
 8003980:	bf00      	nop
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ff54 	bl	8003844 <__NVIC_EnableIRQ>
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039b0:	f7ff fb88 	bl	80030c4 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e099      	b.n	8003af4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0201 	bic.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039e0:	e00f      	b.n	8003a02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039e2:	f7ff fb6f 	bl	80030c4 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b05      	cmp	r3, #5
 80039ee:	d908      	bls.n	8003a02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2203      	movs	r2, #3
 80039fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e078      	b.n	8003af4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e8      	bne.n	80039e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4b38      	ldr	r3, [pc, #224]	; (8003afc <HAL_DMA_Init+0x158>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d107      	bne.n	8003a6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	4313      	orrs	r3, r2
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0307 	bic.w	r3, r3, #7
 8003a82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d117      	bne.n	8003ac6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fa7b 	bl	8003fa4 <DMA_CheckFifoParam>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2240      	movs	r2, #64	; 0x40
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e016      	b.n	8003af4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa32 	bl	8003f38 <DMA_CalcBaseAndBitshift>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	223f      	movs	r2, #63	; 0x3f
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	f010803f 	.word	0xf010803f

08003b00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b0e:	f7ff fad9 	bl	80030c4 <HAL_GetTick>
 8003b12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d008      	beq.n	8003b32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2280      	movs	r2, #128	; 0x80
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e052      	b.n	8003bd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0216 	bic.w	r2, r2, #22
 8003b40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <HAL_DMA_Abort+0x62>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0208 	bic.w	r2, r2, #8
 8003b70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b82:	e013      	b.n	8003bac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b84:	f7ff fa9e 	bl	80030c4 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d90c      	bls.n	8003bac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e015      	b.n	8003bd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e4      	bne.n	8003b84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	223f      	movs	r2, #63	; 0x3f
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d004      	beq.n	8003bfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e00c      	b.n	8003c18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2205      	movs	r2, #5
 8003c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c30:	4b8e      	ldr	r3, [pc, #568]	; (8003e6c <HAL_DMA_IRQHandler+0x248>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a8e      	ldr	r2, [pc, #568]	; (8003e70 <HAL_DMA_IRQHandler+0x24c>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	0a9b      	lsrs	r3, r3, #10
 8003c3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4e:	2208      	movs	r2, #8
 8003c50:	409a      	lsls	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d01a      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0204 	bic.w	r2, r2, #4
 8003c76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	f043 0201 	orr.w	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c94:	2201      	movs	r2, #1
 8003c96:	409a      	lsls	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d012      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f043 0202 	orr.w	r2, r3, #2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	2204      	movs	r2, #4
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d012      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00b      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	2204      	movs	r2, #4
 8003cea:	409a      	lsls	r2, r3
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	f043 0204 	orr.w	r2, r3, #4
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d00:	2210      	movs	r2, #16
 8003d02:	409a      	lsls	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d043      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d03c      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1e:	2210      	movs	r2, #16
 8003d20:	409a      	lsls	r2, r3
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d018      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d108      	bne.n	8003d54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d024      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
 8003d52:	e01f      	b.n	8003d94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01b      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	4798      	blx	r3
 8003d64:	e016      	b.n	8003d94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d107      	bne.n	8003d84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0208 	bic.w	r2, r2, #8
 8003d82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	2220      	movs	r2, #32
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 808f 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8087 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	2220      	movs	r2, #32
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d136      	bne.n	8003e3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0216 	bic.w	r2, r2, #22
 8003ddc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d103      	bne.n	8003dfe <HAL_DMA_IRQHandler+0x1da>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0208 	bic.w	r2, r2, #8
 8003e0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e12:	223f      	movs	r2, #63	; 0x3f
 8003e14:	409a      	lsls	r2, r3
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d07e      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
        }
        return;
 8003e3a:	e079      	b.n	8003f30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01d      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10d      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d031      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	4798      	blx	r3
 8003e68:	e02c      	b.n	8003ec4 <HAL_DMA_IRQHandler+0x2a0>
 8003e6a:	bf00      	nop
 8003e6c:	20000010 	.word	0x20000010
 8003e70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d023      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
 8003e84:	e01e      	b.n	8003ec4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10f      	bne.n	8003eb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0210 	bic.w	r2, r2, #16
 8003ea2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d032      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d022      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2205      	movs	r2, #5
 8003edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0201 	bic.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d307      	bcc.n	8003f0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f2      	bne.n	8003ef0 <HAL_DMA_IRQHandler+0x2cc>
 8003f0a:	e000      	b.n	8003f0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
 8003f2e:	e000      	b.n	8003f32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f30:	bf00      	nop
    }
  }
}
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	3b10      	subs	r3, #16
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <DMA_CalcBaseAndBitshift+0x64>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	091b      	lsrs	r3, r3, #4
 8003f50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f52:	4a13      	ldr	r2, [pc, #76]	; (8003fa0 <DMA_CalcBaseAndBitshift+0x68>)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d909      	bls.n	8003f7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f6e:	f023 0303 	bic.w	r3, r3, #3
 8003f72:	1d1a      	adds	r2, r3, #4
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	659a      	str	r2, [r3, #88]	; 0x58
 8003f78:	e007      	b.n	8003f8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	aaaaaaab 	.word	0xaaaaaaab
 8003fa0:	0800a284 	.word	0x0800a284

08003fa4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d11f      	bne.n	8003ffe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d856      	bhi.n	8004072 <DMA_CheckFifoParam+0xce>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <DMA_CheckFifoParam+0x28>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08003fdd 	.word	0x08003fdd
 8003fd0:	08003fef 	.word	0x08003fef
 8003fd4:	08003fdd 	.word	0x08003fdd
 8003fd8:	08004073 	.word	0x08004073
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d046      	beq.n	8004076 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fec:	e043      	b.n	8004076 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ff6:	d140      	bne.n	800407a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ffc:	e03d      	b.n	800407a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004006:	d121      	bne.n	800404c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b03      	cmp	r3, #3
 800400c:	d837      	bhi.n	800407e <DMA_CheckFifoParam+0xda>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <DMA_CheckFifoParam+0x70>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004025 	.word	0x08004025
 8004018:	0800402b 	.word	0x0800402b
 800401c:	08004025 	.word	0x08004025
 8004020:	0800403d 	.word	0x0800403d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
      break;
 8004028:	e030      	b.n	800408c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d025      	beq.n	8004082 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800403a:	e022      	b.n	8004082 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004044:	d11f      	bne.n	8004086 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800404a:	e01c      	b.n	8004086 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d903      	bls.n	800405a <DMA_CheckFifoParam+0xb6>
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d003      	beq.n	8004060 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004058:	e018      	b.n	800408c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
      break;
 800405e:	e015      	b.n	800408c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00e      	beq.n	800408a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
      break;
 8004070:	e00b      	b.n	800408a <DMA_CheckFifoParam+0xe6>
      break;
 8004072:	bf00      	nop
 8004074:	e00a      	b.n	800408c <DMA_CheckFifoParam+0xe8>
      break;
 8004076:	bf00      	nop
 8004078:	e008      	b.n	800408c <DMA_CheckFifoParam+0xe8>
      break;
 800407a:	bf00      	nop
 800407c:	e006      	b.n	800408c <DMA_CheckFifoParam+0xe8>
      break;
 800407e:	bf00      	nop
 8004080:	e004      	b.n	800408c <DMA_CheckFifoParam+0xe8>
      break;
 8004082:	bf00      	nop
 8004084:	e002      	b.n	800408c <DMA_CheckFifoParam+0xe8>
      break;   
 8004086:	bf00      	nop
 8004088:	e000      	b.n	800408c <DMA_CheckFifoParam+0xe8>
      break;
 800408a:	bf00      	nop
    }
  } 
  
  return status; 
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop

0800409c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800409c:	b480      	push	{r7}
 800409e:	b089      	sub	sp, #36	; 0x24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	e16b      	b.n	8004390 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040b8:	2201      	movs	r2, #1
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4013      	ands	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	f040 815a 	bne.w	800438a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d005      	beq.n	80040ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d130      	bne.n	8004150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	2203      	movs	r2, #3
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43db      	mvns	r3, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4013      	ands	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004124:	2201      	movs	r2, #1
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 0201 	and.w	r2, r3, #1
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b03      	cmp	r3, #3
 800415a:	d017      	beq.n	800418c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	2203      	movs	r2, #3
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4313      	orrs	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d123      	bne.n	80041e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	08da      	lsrs	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3208      	adds	r2, #8
 80041a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	220f      	movs	r2, #15
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	08da      	lsrs	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3208      	adds	r2, #8
 80041da:	69b9      	ldr	r1, [r7, #24]
 80041dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2203      	movs	r2, #3
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 0203 	and.w	r2, r3, #3
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80b4 	beq.w	800438a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	4b60      	ldr	r3, [pc, #384]	; (80043a8 <HAL_GPIO_Init+0x30c>)
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	4a5f      	ldr	r2, [pc, #380]	; (80043a8 <HAL_GPIO_Init+0x30c>)
 800422c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004230:	6453      	str	r3, [r2, #68]	; 0x44
 8004232:	4b5d      	ldr	r3, [pc, #372]	; (80043a8 <HAL_GPIO_Init+0x30c>)
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800423e:	4a5b      	ldr	r2, [pc, #364]	; (80043ac <HAL_GPIO_Init+0x310>)
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	089b      	lsrs	r3, r3, #2
 8004244:	3302      	adds	r3, #2
 8004246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	220f      	movs	r2, #15
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a52      	ldr	r2, [pc, #328]	; (80043b0 <HAL_GPIO_Init+0x314>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d02b      	beq.n	80042c2 <HAL_GPIO_Init+0x226>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a51      	ldr	r2, [pc, #324]	; (80043b4 <HAL_GPIO_Init+0x318>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d025      	beq.n	80042be <HAL_GPIO_Init+0x222>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a50      	ldr	r2, [pc, #320]	; (80043b8 <HAL_GPIO_Init+0x31c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01f      	beq.n	80042ba <HAL_GPIO_Init+0x21e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a4f      	ldr	r2, [pc, #316]	; (80043bc <HAL_GPIO_Init+0x320>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d019      	beq.n	80042b6 <HAL_GPIO_Init+0x21a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a4e      	ldr	r2, [pc, #312]	; (80043c0 <HAL_GPIO_Init+0x324>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_GPIO_Init+0x216>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a4d      	ldr	r2, [pc, #308]	; (80043c4 <HAL_GPIO_Init+0x328>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00d      	beq.n	80042ae <HAL_GPIO_Init+0x212>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a4c      	ldr	r2, [pc, #304]	; (80043c8 <HAL_GPIO_Init+0x32c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d007      	beq.n	80042aa <HAL_GPIO_Init+0x20e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a4b      	ldr	r2, [pc, #300]	; (80043cc <HAL_GPIO_Init+0x330>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <HAL_GPIO_Init+0x20a>
 80042a2:	2307      	movs	r3, #7
 80042a4:	e00e      	b.n	80042c4 <HAL_GPIO_Init+0x228>
 80042a6:	2308      	movs	r3, #8
 80042a8:	e00c      	b.n	80042c4 <HAL_GPIO_Init+0x228>
 80042aa:	2306      	movs	r3, #6
 80042ac:	e00a      	b.n	80042c4 <HAL_GPIO_Init+0x228>
 80042ae:	2305      	movs	r3, #5
 80042b0:	e008      	b.n	80042c4 <HAL_GPIO_Init+0x228>
 80042b2:	2304      	movs	r3, #4
 80042b4:	e006      	b.n	80042c4 <HAL_GPIO_Init+0x228>
 80042b6:	2303      	movs	r3, #3
 80042b8:	e004      	b.n	80042c4 <HAL_GPIO_Init+0x228>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e002      	b.n	80042c4 <HAL_GPIO_Init+0x228>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <HAL_GPIO_Init+0x228>
 80042c2:	2300      	movs	r3, #0
 80042c4:	69fa      	ldr	r2, [r7, #28]
 80042c6:	f002 0203 	and.w	r2, r2, #3
 80042ca:	0092      	lsls	r2, r2, #2
 80042cc:	4093      	lsls	r3, r2
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042d4:	4935      	ldr	r1, [pc, #212]	; (80043ac <HAL_GPIO_Init+0x310>)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	089b      	lsrs	r3, r3, #2
 80042da:	3302      	adds	r3, #2
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042e2:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <HAL_GPIO_Init+0x334>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	43db      	mvns	r3, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4013      	ands	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004306:	4a32      	ldr	r2, [pc, #200]	; (80043d0 <HAL_GPIO_Init+0x334>)
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800430c:	4b30      	ldr	r3, [pc, #192]	; (80043d0 <HAL_GPIO_Init+0x334>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	43db      	mvns	r3, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004330:	4a27      	ldr	r2, [pc, #156]	; (80043d0 <HAL_GPIO_Init+0x334>)
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004336:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <HAL_GPIO_Init+0x334>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800435a:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <HAL_GPIO_Init+0x334>)
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004360:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <HAL_GPIO_Init+0x334>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004384:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <HAL_GPIO_Init+0x334>)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3301      	adds	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	2b0f      	cmp	r3, #15
 8004394:	f67f ae90 	bls.w	80040b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	3724      	adds	r7, #36	; 0x24
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800
 80043ac:	40013800 	.word	0x40013800
 80043b0:	40020000 	.word	0x40020000
 80043b4:	40020400 	.word	0x40020400
 80043b8:	40020800 	.word	0x40020800
 80043bc:	40020c00 	.word	0x40020c00
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40021400 	.word	0x40021400
 80043c8:	40021800 	.word	0x40021800
 80043cc:	40021c00 	.word	0x40021c00
 80043d0:	40013c00 	.word	0x40013c00

080043d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	807b      	strh	r3, [r7, #2]
 80043e0:	4613      	mov	r3, r2
 80043e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043e4:	787b      	ldrb	r3, [r7, #1]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ea:	887a      	ldrh	r2, [r7, #2]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043f0:	e003      	b.n	80043fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043f2:	887b      	ldrh	r3, [r7, #2]
 80043f4:	041a      	lsls	r2, r3, #16
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	619a      	str	r2, [r3, #24]
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004418:	887a      	ldrh	r2, [r7, #2]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4013      	ands	r3, r2
 800441e:	041a      	lsls	r2, r3, #16
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	43d9      	mvns	r1, r3
 8004424:	887b      	ldrh	r3, [r7, #2]
 8004426:	400b      	ands	r3, r1
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	619a      	str	r2, [r3, #24]
}
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
	...

0800443c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e12b      	b.n	80046a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc ff50 	bl	8001308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2224      	movs	r2, #36	; 0x24
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800448e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800449e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044a0:	f001 fe6a 	bl	8006178 <HAL_RCC_GetPCLK1Freq>
 80044a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4a81      	ldr	r2, [pc, #516]	; (80046b0 <HAL_I2C_Init+0x274>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d807      	bhi.n	80044c0 <HAL_I2C_Init+0x84>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a80      	ldr	r2, [pc, #512]	; (80046b4 <HAL_I2C_Init+0x278>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	bf94      	ite	ls
 80044b8:	2301      	movls	r3, #1
 80044ba:	2300      	movhi	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	e006      	b.n	80044ce <HAL_I2C_Init+0x92>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a7d      	ldr	r2, [pc, #500]	; (80046b8 <HAL_I2C_Init+0x27c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	bf94      	ite	ls
 80044c8:	2301      	movls	r3, #1
 80044ca:	2300      	movhi	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e0e7      	b.n	80046a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a78      	ldr	r2, [pc, #480]	; (80046bc <HAL_I2C_Init+0x280>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	0c9b      	lsrs	r3, r3, #18
 80044e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4a6a      	ldr	r2, [pc, #424]	; (80046b0 <HAL_I2C_Init+0x274>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d802      	bhi.n	8004510 <HAL_I2C_Init+0xd4>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	3301      	adds	r3, #1
 800450e:	e009      	b.n	8004524 <HAL_I2C_Init+0xe8>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	4a69      	ldr	r2, [pc, #420]	; (80046c0 <HAL_I2C_Init+0x284>)
 800451c:	fba2 2303 	umull	r2, r3, r2, r3
 8004520:	099b      	lsrs	r3, r3, #6
 8004522:	3301      	adds	r3, #1
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	430b      	orrs	r3, r1
 800452a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004536:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	495c      	ldr	r1, [pc, #368]	; (80046b0 <HAL_I2C_Init+0x274>)
 8004540:	428b      	cmp	r3, r1
 8004542:	d819      	bhi.n	8004578 <HAL_I2C_Init+0x13c>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1e59      	subs	r1, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004552:	1c59      	adds	r1, r3, #1
 8004554:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004558:	400b      	ands	r3, r1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <HAL_I2C_Init+0x138>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1e59      	subs	r1, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	fbb1 f3f3 	udiv	r3, r1, r3
 800456c:	3301      	adds	r3, #1
 800456e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004572:	e051      	b.n	8004618 <HAL_I2C_Init+0x1dc>
 8004574:	2304      	movs	r3, #4
 8004576:	e04f      	b.n	8004618 <HAL_I2C_Init+0x1dc>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d111      	bne.n	80045a4 <HAL_I2C_Init+0x168>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1e58      	subs	r0, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	440b      	add	r3, r1
 800458e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004592:	3301      	adds	r3, #1
 8004594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e012      	b.n	80045ca <HAL_I2C_Init+0x18e>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1e58      	subs	r0, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6859      	ldr	r1, [r3, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	0099      	lsls	r1, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ba:	3301      	adds	r3, #1
 80045bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_I2C_Init+0x196>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e022      	b.n	8004618 <HAL_I2C_Init+0x1dc>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10e      	bne.n	80045f8 <HAL_I2C_Init+0x1bc>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1e58      	subs	r0, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6859      	ldr	r1, [r3, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	440b      	add	r3, r1
 80045e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ec:	3301      	adds	r3, #1
 80045ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f6:	e00f      	b.n	8004618 <HAL_I2C_Init+0x1dc>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	1e58      	subs	r0, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6859      	ldr	r1, [r3, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	0099      	lsls	r1, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	fbb0 f3f3 	udiv	r3, r0, r3
 800460e:	3301      	adds	r3, #1
 8004610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	6809      	ldr	r1, [r1, #0]
 800461c:	4313      	orrs	r3, r2
 800461e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69da      	ldr	r2, [r3, #28]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6911      	ldr	r1, [r2, #16]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68d2      	ldr	r2, [r2, #12]
 8004652:	4311      	orrs	r1, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	430b      	orrs	r3, r1
 800465a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	000186a0 	.word	0x000186a0
 80046b4:	001e847f 	.word	0x001e847f
 80046b8:	003d08ff 	.word	0x003d08ff
 80046bc:	431bde83 	.word	0x431bde83
 80046c0:	10624dd3 	.word	0x10624dd3

080046c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	461a      	mov	r2, r3
 80046d0:	460b      	mov	r3, r1
 80046d2:	817b      	strh	r3, [r7, #10]
 80046d4:	4613      	mov	r3, r2
 80046d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046d8:	f7fe fcf4 	bl	80030c4 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	f040 80e0 	bne.w	80048ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	2319      	movs	r3, #25
 80046f2:	2201      	movs	r2, #1
 80046f4:	4970      	ldr	r1, [pc, #448]	; (80048b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 ff30 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004702:	2302      	movs	r3, #2
 8004704:	e0d3      	b.n	80048ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_I2C_Master_Transmit+0x50>
 8004710:	2302      	movs	r3, #2
 8004712:	e0cc      	b.n	80048ae <HAL_I2C_Master_Transmit+0x1ea>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b01      	cmp	r3, #1
 8004728:	d007      	beq.n	800473a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004748:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2221      	movs	r2, #33	; 0x21
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2210      	movs	r2, #16
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	893a      	ldrh	r2, [r7, #8]
 800476a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a50      	ldr	r2, [pc, #320]	; (80048bc <HAL_I2C_Master_Transmit+0x1f8>)
 800477a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800477c:	8979      	ldrh	r1, [r7, #10]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fcea 	bl	800515c <I2C_MasterRequestWrite>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e08d      	b.n	80048ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004792:	2300      	movs	r3, #0
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80047a8:	e066      	b.n	8004878 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	6a39      	ldr	r1, [r7, #32]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 ffaa 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d107      	bne.n	80047d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e06b      	b.n	80048ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	781a      	ldrb	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b04      	cmp	r3, #4
 8004812:	d11b      	bne.n	800484c <HAL_I2C_Master_Transmit+0x188>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004818:	2b00      	cmp	r3, #0
 800481a:	d017      	beq.n	800484c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	6a39      	ldr	r1, [r7, #32]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 ff9a 	bl	800578a <I2C_WaitOnBTFFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00d      	beq.n	8004878 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	2b04      	cmp	r3, #4
 8004862:	d107      	bne.n	8004874 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004872:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e01a      	b.n	80048ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487c:	2b00      	cmp	r3, #0
 800487e:	d194      	bne.n	80047aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	00100002 	.word	0x00100002
 80048bc:	ffff0000 	.word	0xffff0000

080048c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	461a      	mov	r2, r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	817b      	strh	r3, [r7, #10]
 80048d2:	460b      	mov	r3, r1
 80048d4:	813b      	strh	r3, [r7, #8]
 80048d6:	4613      	mov	r3, r2
 80048d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048da:	f7fe fbf3 	bl	80030c4 <HAL_GetTick>
 80048de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	f040 80d9 	bne.w	8004aa0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	2319      	movs	r3, #25
 80048f4:	2201      	movs	r2, #1
 80048f6:	496d      	ldr	r1, [pc, #436]	; (8004aac <HAL_I2C_Mem_Write+0x1ec>)
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fe2f 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
 8004906:	e0cc      	b.n	8004aa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_I2C_Mem_Write+0x56>
 8004912:	2302      	movs	r3, #2
 8004914:	e0c5      	b.n	8004aa2 <HAL_I2C_Mem_Write+0x1e2>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b01      	cmp	r3, #1
 800492a:	d007      	beq.n	800493c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800494a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2221      	movs	r2, #33	; 0x21
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2240      	movs	r2, #64	; 0x40
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a3a      	ldr	r2, [r7, #32]
 8004966:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800496c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4a4d      	ldr	r2, [pc, #308]	; (8004ab0 <HAL_I2C_Mem_Write+0x1f0>)
 800497c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800497e:	88f8      	ldrh	r0, [r7, #6]
 8004980:	893a      	ldrh	r2, [r7, #8]
 8004982:	8979      	ldrh	r1, [r7, #10]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	4603      	mov	r3, r0
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fc66 	bl	8005260 <I2C_RequestMemoryWrite>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d052      	beq.n	8004a40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e081      	b.n	8004aa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 feb0 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00d      	beq.n	80049ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d107      	bne.n	80049c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e06b      	b.n	8004aa2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	781a      	ldrb	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d11b      	bne.n	8004a40 <HAL_I2C_Mem_Write+0x180>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d017      	beq.n	8004a40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	781a      	ldrb	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1aa      	bne.n	800499e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fe9c 	bl	800578a <I2C_WaitOnBTFFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00d      	beq.n	8004a74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d107      	bne.n	8004a70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e016      	b.n	8004aa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e000      	b.n	8004aa2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004aa0:	2302      	movs	r3, #2
  }
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	00100002 	.word	0x00100002
 8004ab0:	ffff0000 	.word	0xffff0000

08004ab4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08c      	sub	sp, #48	; 0x30
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	4608      	mov	r0, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	817b      	strh	r3, [r7, #10]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	813b      	strh	r3, [r7, #8]
 8004aca:	4613      	mov	r3, r2
 8004acc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ace:	f7fe faf9 	bl	80030c4 <HAL_GetTick>
 8004ad2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	f040 8208 	bne.w	8004ef2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	2319      	movs	r3, #25
 8004ae8:	2201      	movs	r2, #1
 8004aea:	497b      	ldr	r1, [pc, #492]	; (8004cd8 <HAL_I2C_Mem_Read+0x224>)
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fd35 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
 8004afa:	e1fb      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_I2C_Mem_Read+0x56>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e1f4      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d007      	beq.n	8004b30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2222      	movs	r2, #34	; 0x22
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2240      	movs	r2, #64	; 0x40
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4a5b      	ldr	r2, [pc, #364]	; (8004cdc <HAL_I2C_Mem_Read+0x228>)
 8004b70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b72:	88f8      	ldrh	r0, [r7, #6]
 8004b74:	893a      	ldrh	r2, [r7, #8]
 8004b76:	8979      	ldrh	r1, [r7, #10]
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	4603      	mov	r3, r0
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fc02 	bl	800538c <I2C_RequestMemoryRead>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e1b0      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d113      	bne.n	8004bc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	623b      	str	r3, [r7, #32]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	623b      	str	r3, [r7, #32]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e184      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d11b      	bne.n	8004c02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	61fb      	str	r3, [r7, #28]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	e164      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d11b      	bne.n	8004c42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	e144      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c58:	e138      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	f200 80f1 	bhi.w	8004e46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d123      	bne.n	8004cb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fdcb 	bl	800580c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e139      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cb2:	e10b      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d14e      	bne.n	8004d5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	4906      	ldr	r1, [pc, #24]	; (8004ce0 <HAL_I2C_Mem_Read+0x22c>)
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fc48 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e10e      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
 8004cd6:	bf00      	nop
 8004cd8:	00100002 	.word	0x00100002
 8004cdc:	ffff0000 	.word	0xffff0000
 8004ce0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d58:	e0b8      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d60:	2200      	movs	r2, #0
 8004d62:	4966      	ldr	r1, [pc, #408]	; (8004efc <HAL_I2C_Mem_Read+0x448>)
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fbf9 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0bf      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	494f      	ldr	r1, [pc, #316]	; (8004efc <HAL_I2C_Mem_Read+0x448>)
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fbcb 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e091      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e44:	e042      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fcde 	bl	800580c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e04c      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d118      	bne.n	8004ecc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f47f aec2 	bne.w	8004c5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e000      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
  }
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3728      	adds	r7, #40	; 0x28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	00010004 	.word	0x00010004

08004f00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08a      	sub	sp, #40	; 0x28
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	607a      	str	r2, [r7, #4]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004f10:	f7fe f8d8 	bl	80030c4 <HAL_GetTick>
 8004f14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	f040 8111 	bne.w	800514a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	2319      	movs	r3, #25
 8004f2e:	2201      	movs	r2, #1
 8004f30:	4988      	ldr	r1, [pc, #544]	; (8005154 <HAL_I2C_IsDeviceReady+0x254>)
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fb12 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e104      	b.n	800514c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_I2C_IsDeviceReady+0x50>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e0fd      	b.n	800514c <HAL_I2C_IsDeviceReady+0x24c>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d007      	beq.n	8004f76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0201 	orr.w	r2, r2, #1
 8004f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2224      	movs	r2, #36	; 0x24
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a70      	ldr	r2, [pc, #448]	; (8005158 <HAL_I2C_IsDeviceReady+0x258>)
 8004f98:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 fad0 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00d      	beq.n	8004fde <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd0:	d103      	bne.n	8004fda <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e0b6      	b.n	800514c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fde:	897b      	ldrh	r3, [r7, #10]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004fee:	f7fe f869 	bl	80030c4 <HAL_GetTick>
 8004ff2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	bf0c      	ite	eq
 8005002:	2301      	moveq	r3, #1
 8005004:	2300      	movne	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005018:	bf0c      	ite	eq
 800501a:	2301      	moveq	r3, #1
 800501c:	2300      	movne	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005022:	e025      	b.n	8005070 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005024:	f7fe f84e 	bl	80030c4 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d302      	bcc.n	800503a <HAL_I2C_IsDeviceReady+0x13a>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d103      	bne.n	8005042 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	22a0      	movs	r2, #160	; 0xa0
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b02      	cmp	r3, #2
 800504e:	bf0c      	ite	eq
 8005050:	2301      	moveq	r3, #1
 8005052:	2300      	movne	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2ba0      	cmp	r3, #160	; 0xa0
 800507a:	d005      	beq.n	8005088 <HAL_I2C_IsDeviceReady+0x188>
 800507c:	7dfb      	ldrb	r3, [r7, #23]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <HAL_I2C_IsDeviceReady+0x188>
 8005082:	7dbb      	ldrb	r3, [r7, #22]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0cd      	beq.n	8005024 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b02      	cmp	r3, #2
 800509c:	d129      	bne.n	80050f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	2319      	movs	r3, #25
 80050ca:	2201      	movs	r2, #1
 80050cc:	4921      	ldr	r1, [pc, #132]	; (8005154 <HAL_I2C_IsDeviceReady+0x254>)
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 fa44 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e036      	b.n	800514c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	e02c      	b.n	800514c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005100:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800510a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2319      	movs	r3, #25
 8005112:	2201      	movs	r2, #1
 8005114:	490f      	ldr	r1, [pc, #60]	; (8005154 <HAL_I2C_IsDeviceReady+0x254>)
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 fa20 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e012      	b.n	800514c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	3301      	adds	r3, #1
 800512a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	f4ff af32 	bcc.w	8004f9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800514a:	2302      	movs	r3, #2
  }
}
 800514c:	4618      	mov	r0, r3
 800514e:	3720      	adds	r7, #32
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	00100002 	.word	0x00100002
 8005158:	ffff0000 	.word	0xffff0000

0800515c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	607a      	str	r2, [r7, #4]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	460b      	mov	r3, r1
 800516a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d006      	beq.n	8005186 <I2C_MasterRequestWrite+0x2a>
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d003      	beq.n	8005186 <I2C_MasterRequestWrite+0x2a>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005184:	d108      	bne.n	8005198 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e00b      	b.n	80051b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	2b12      	cmp	r3, #18
 800519e:	d107      	bne.n	80051b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f9cd 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00d      	beq.n	80051e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d6:	d103      	bne.n	80051e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e035      	b.n	8005250 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ec:	d108      	bne.n	8005200 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ee:	897b      	ldrh	r3, [r7, #10]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051fc:	611a      	str	r2, [r3, #16]
 80051fe:	e01b      	b.n	8005238 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005200:	897b      	ldrh	r3, [r7, #10]
 8005202:	11db      	asrs	r3, r3, #7
 8005204:	b2db      	uxtb	r3, r3
 8005206:	f003 0306 	and.w	r3, r3, #6
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f063 030f 	orn	r3, r3, #15
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	490e      	ldr	r1, [pc, #56]	; (8005258 <I2C_MasterRequestWrite+0xfc>)
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f9f3 	bl	800560a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e010      	b.n	8005250 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800522e:	897b      	ldrh	r3, [r7, #10]
 8005230:	b2da      	uxtb	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	4907      	ldr	r1, [pc, #28]	; (800525c <I2C_MasterRequestWrite+0x100>)
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f9e3 	bl	800560a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	00010008 	.word	0x00010008
 800525c:	00010002 	.word	0x00010002

08005260 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	461a      	mov	r2, r3
 800526e:	4603      	mov	r3, r0
 8005270:	817b      	strh	r3, [r7, #10]
 8005272:	460b      	mov	r3, r1
 8005274:	813b      	strh	r3, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005288:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	2200      	movs	r2, #0
 8005292:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f960 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00d      	beq.n	80052be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b0:	d103      	bne.n	80052ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e05f      	b.n	800537e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052be:	897b      	ldrh	r3, [r7, #10]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	6a3a      	ldr	r2, [r7, #32]
 80052d2:	492d      	ldr	r1, [pc, #180]	; (8005388 <I2C_RequestMemoryWrite+0x128>)
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f998 	bl	800560a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e04c      	b.n	800537e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fc:	6a39      	ldr	r1, [r7, #32]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fa02 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2b04      	cmp	r3, #4
 8005310:	d107      	bne.n	8005322 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005320:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e02b      	b.n	800537e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d105      	bne.n	8005338 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800532c:	893b      	ldrh	r3, [r7, #8]
 800532e:	b2da      	uxtb	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	611a      	str	r2, [r3, #16]
 8005336:	e021      	b.n	800537c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005338:	893b      	ldrh	r3, [r7, #8]
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	b29b      	uxth	r3, r3
 800533e:	b2da      	uxtb	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005348:	6a39      	ldr	r1, [r7, #32]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f9dc 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b04      	cmp	r3, #4
 800535c:	d107      	bne.n	800536e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e005      	b.n	800537e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005372:	893b      	ldrh	r3, [r7, #8]
 8005374:	b2da      	uxtb	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	00010002 	.word	0x00010002

0800538c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	4608      	mov	r0, r1
 8005396:	4611      	mov	r1, r2
 8005398:	461a      	mov	r2, r3
 800539a:	4603      	mov	r3, r0
 800539c:	817b      	strh	r3, [r7, #10]
 800539e:	460b      	mov	r3, r1
 80053a0:	813b      	strh	r3, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f8c2 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ec:	d103      	bne.n	80053f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e0aa      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053fa:	897b      	ldrh	r3, [r7, #10]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005408:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	6a3a      	ldr	r2, [r7, #32]
 800540e:	4952      	ldr	r1, [pc, #328]	; (8005558 <I2C_RequestMemoryRead+0x1cc>)
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f8fa 	bl	800560a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e097      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005438:	6a39      	ldr	r1, [r7, #32]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f964 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00d      	beq.n	8005462 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	2b04      	cmp	r3, #4
 800544c:	d107      	bne.n	800545e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e076      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005468:	893b      	ldrh	r3, [r7, #8]
 800546a:	b2da      	uxtb	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	611a      	str	r2, [r3, #16]
 8005472:	e021      	b.n	80054b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005474:	893b      	ldrh	r3, [r7, #8]
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	b29b      	uxth	r3, r3
 800547a:	b2da      	uxtb	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005484:	6a39      	ldr	r1, [r7, #32]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f93e 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00d      	beq.n	80054ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	2b04      	cmp	r3, #4
 8005498:	d107      	bne.n	80054aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e050      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ae:	893b      	ldrh	r3, [r7, #8]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	6a39      	ldr	r1, [r7, #32]
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f923 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00d      	beq.n	80054e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d107      	bne.n	80054e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e035      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f82b 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00d      	beq.n	8005528 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551a:	d103      	bne.n	8005524 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e013      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005528:	897b      	ldrh	r3, [r7, #10]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	b2da      	uxtb	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	6a3a      	ldr	r2, [r7, #32]
 800553c:	4906      	ldr	r1, [pc, #24]	; (8005558 <I2C_RequestMemoryRead+0x1cc>)
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 f863 	bl	800560a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	00010002 	.word	0x00010002

0800555c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800556c:	e025      	b.n	80055ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d021      	beq.n	80055ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005576:	f7fd fda5 	bl	80030c4 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d116      	bne.n	80055ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f043 0220 	orr.w	r2, r3, #32
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e023      	b.n	8005602 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d10d      	bne.n	80055e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	43da      	mvns	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4013      	ands	r3, r2
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bf0c      	ite	eq
 80055d6:	2301      	moveq	r3, #1
 80055d8:	2300      	movne	r3, #0
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	e00c      	b.n	80055fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	43da      	mvns	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4013      	ands	r3, r2
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bf0c      	ite	eq
 80055f2:	2301      	moveq	r3, #1
 80055f4:	2300      	movne	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d0b6      	beq.n	800556e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005618:	e051      	b.n	80056be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005628:	d123      	bne.n	8005672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005638:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005642:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f043 0204 	orr.w	r2, r3, #4
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e046      	b.n	8005700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d021      	beq.n	80056be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567a:	f7fd fd23 	bl	80030c4 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	429a      	cmp	r2, r3
 8005688:	d302      	bcc.n	8005690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d116      	bne.n	80056be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f043 0220 	orr.w	r2, r3, #32
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e020      	b.n	8005700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	0c1b      	lsrs	r3, r3, #16
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d10c      	bne.n	80056e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	43da      	mvns	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4013      	ands	r3, r2
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bf14      	ite	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	2300      	moveq	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	e00b      	b.n	80056fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	43da      	mvns	r2, r3
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4013      	ands	r3, r2
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d18d      	bne.n	800561a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005714:	e02d      	b.n	8005772 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f8ce 	bl	80058b8 <I2C_IsAcknowledgeFailed>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e02d      	b.n	8005782 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572c:	d021      	beq.n	8005772 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572e:	f7fd fcc9 	bl	80030c4 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	429a      	cmp	r2, r3
 800573c:	d302      	bcc.n	8005744 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d116      	bne.n	8005772 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f043 0220 	orr.w	r2, r3, #32
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e007      	b.n	8005782 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577c:	2b80      	cmp	r3, #128	; 0x80
 800577e:	d1ca      	bne.n	8005716 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005796:	e02d      	b.n	80057f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f88d 	bl	80058b8 <I2C_IsAcknowledgeFailed>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e02d      	b.n	8005804 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ae:	d021      	beq.n	80057f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b0:	f7fd fc88 	bl	80030c4 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d302      	bcc.n	80057c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d116      	bne.n	80057f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	f043 0220 	orr.w	r2, r3, #32
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e007      	b.n	8005804 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d1ca      	bne.n	8005798 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005818:	e042      	b.n	80058a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	2b10      	cmp	r3, #16
 8005826:	d119      	bne.n	800585c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0210 	mvn.w	r2, #16
 8005830:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e029      	b.n	80058b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585c:	f7fd fc32 	bl	80030c4 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	429a      	cmp	r2, r3
 800586a:	d302      	bcc.n	8005872 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d116      	bne.n	80058a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	f043 0220 	orr.w	r2, r3, #32
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e007      	b.n	80058b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d1b5      	bne.n	800581a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ce:	d11b      	bne.n	8005908 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f043 0204 	orr.w	r2, r3, #4
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e267      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d075      	beq.n	8005a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005936:	4b88      	ldr	r3, [pc, #544]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 030c 	and.w	r3, r3, #12
 800593e:	2b04      	cmp	r3, #4
 8005940:	d00c      	beq.n	800595c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005942:	4b85      	ldr	r3, [pc, #532]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800594a:	2b08      	cmp	r3, #8
 800594c:	d112      	bne.n	8005974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800594e:	4b82      	ldr	r3, [pc, #520]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800595a:	d10b      	bne.n	8005974 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800595c:	4b7e      	ldr	r3, [pc, #504]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d05b      	beq.n	8005a20 <HAL_RCC_OscConfig+0x108>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d157      	bne.n	8005a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e242      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597c:	d106      	bne.n	800598c <HAL_RCC_OscConfig+0x74>
 800597e:	4b76      	ldr	r3, [pc, #472]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a75      	ldr	r2, [pc, #468]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e01d      	b.n	80059c8 <HAL_RCC_OscConfig+0xb0>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005994:	d10c      	bne.n	80059b0 <HAL_RCC_OscConfig+0x98>
 8005996:	4b70      	ldr	r3, [pc, #448]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a6f      	ldr	r2, [pc, #444]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 800599c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	4b6d      	ldr	r3, [pc, #436]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a6c      	ldr	r2, [pc, #432]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	e00b      	b.n	80059c8 <HAL_RCC_OscConfig+0xb0>
 80059b0:	4b69      	ldr	r3, [pc, #420]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a68      	ldr	r2, [pc, #416]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	4b66      	ldr	r3, [pc, #408]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a65      	ldr	r2, [pc, #404]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d013      	beq.n	80059f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d0:	f7fd fb78 	bl	80030c4 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059d8:	f7fd fb74 	bl	80030c4 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	; 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e207      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	4b5b      	ldr	r3, [pc, #364]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0xc0>
 80059f6:	e014      	b.n	8005a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f8:	f7fd fb64 	bl	80030c4 <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a00:	f7fd fb60 	bl	80030c4 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b64      	cmp	r3, #100	; 0x64
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e1f3      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a12:	4b51      	ldr	r3, [pc, #324]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f0      	bne.n	8005a00 <HAL_RCC_OscConfig+0xe8>
 8005a1e:	e000      	b.n	8005a22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d063      	beq.n	8005af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a2e:	4b4a      	ldr	r3, [pc, #296]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a3a:	4b47      	ldr	r3, [pc, #284]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d11c      	bne.n	8005a80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a46:	4b44      	ldr	r3, [pc, #272]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d116      	bne.n	8005a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a52:	4b41      	ldr	r3, [pc, #260]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <HAL_RCC_OscConfig+0x152>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d001      	beq.n	8005a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e1c7      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6a:	4b3b      	ldr	r3, [pc, #236]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4937      	ldr	r1, [pc, #220]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7e:	e03a      	b.n	8005af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d020      	beq.n	8005aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a88:	4b34      	ldr	r3, [pc, #208]	; (8005b5c <HAL_RCC_OscConfig+0x244>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8e:	f7fd fb19 	bl	80030c4 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a96:	f7fd fb15 	bl	80030c4 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e1a8      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa8:	4b2b      	ldr	r3, [pc, #172]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0f0      	beq.n	8005a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab4:	4b28      	ldr	r3, [pc, #160]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	4925      	ldr	r1, [pc, #148]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	600b      	str	r3, [r1, #0]
 8005ac8:	e015      	b.n	8005af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aca:	4b24      	ldr	r3, [pc, #144]	; (8005b5c <HAL_RCC_OscConfig+0x244>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fd faf8 	bl	80030c4 <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ad8:	f7fd faf4 	bl	80030c4 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e187      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aea:	4b1b      	ldr	r3, [pc, #108]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f0      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d036      	beq.n	8005b70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d016      	beq.n	8005b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b0a:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <HAL_RCC_OscConfig+0x248>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b10:	f7fd fad8 	bl	80030c4 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b18:	f7fd fad4 	bl	80030c4 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e167      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f0      	beq.n	8005b18 <HAL_RCC_OscConfig+0x200>
 8005b36:	e01b      	b.n	8005b70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b38:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <HAL_RCC_OscConfig+0x248>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b3e:	f7fd fac1 	bl	80030c4 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b44:	e00e      	b.n	8005b64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b46:	f7fd fabd 	bl	80030c4 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d907      	bls.n	8005b64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e150      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	42470000 	.word	0x42470000
 8005b60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b64:	4b88      	ldr	r3, [pc, #544]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1ea      	bne.n	8005b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8097 	beq.w	8005cac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b82:	4b81      	ldr	r3, [pc, #516]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10f      	bne.n	8005bae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	4b7d      	ldr	r3, [pc, #500]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	4a7c      	ldr	r2, [pc, #496]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b9e:	4b7a      	ldr	r3, [pc, #488]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	60bb      	str	r3, [r7, #8]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005baa:	2301      	movs	r3, #1
 8005bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bae:	4b77      	ldr	r3, [pc, #476]	; (8005d8c <HAL_RCC_OscConfig+0x474>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d118      	bne.n	8005bec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bba:	4b74      	ldr	r3, [pc, #464]	; (8005d8c <HAL_RCC_OscConfig+0x474>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a73      	ldr	r2, [pc, #460]	; (8005d8c <HAL_RCC_OscConfig+0x474>)
 8005bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bc6:	f7fd fa7d 	bl	80030c4 <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bce:	f7fd fa79 	bl	80030c4 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e10c      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be0:	4b6a      	ldr	r3, [pc, #424]	; (8005d8c <HAL_RCC_OscConfig+0x474>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0f0      	beq.n	8005bce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d106      	bne.n	8005c02 <HAL_RCC_OscConfig+0x2ea>
 8005bf4:	4b64      	ldr	r3, [pc, #400]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf8:	4a63      	ldr	r2, [pc, #396]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005bfa:	f043 0301 	orr.w	r3, r3, #1
 8005bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8005c00:	e01c      	b.n	8005c3c <HAL_RCC_OscConfig+0x324>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b05      	cmp	r3, #5
 8005c08:	d10c      	bne.n	8005c24 <HAL_RCC_OscConfig+0x30c>
 8005c0a:	4b5f      	ldr	r3, [pc, #380]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	4a5e      	ldr	r2, [pc, #376]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c10:	f043 0304 	orr.w	r3, r3, #4
 8005c14:	6713      	str	r3, [r2, #112]	; 0x70
 8005c16:	4b5c      	ldr	r3, [pc, #368]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1a:	4a5b      	ldr	r2, [pc, #364]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c1c:	f043 0301 	orr.w	r3, r3, #1
 8005c20:	6713      	str	r3, [r2, #112]	; 0x70
 8005c22:	e00b      	b.n	8005c3c <HAL_RCC_OscConfig+0x324>
 8005c24:	4b58      	ldr	r3, [pc, #352]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c28:	4a57      	ldr	r2, [pc, #348]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c2a:	f023 0301 	bic.w	r3, r3, #1
 8005c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c30:	4b55      	ldr	r3, [pc, #340]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c34:	4a54      	ldr	r2, [pc, #336]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c36:	f023 0304 	bic.w	r3, r3, #4
 8005c3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d015      	beq.n	8005c70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c44:	f7fd fa3e 	bl	80030c4 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4a:	e00a      	b.n	8005c62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c4c:	f7fd fa3a 	bl	80030c4 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e0cb      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c62:	4b49      	ldr	r3, [pc, #292]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0ee      	beq.n	8005c4c <HAL_RCC_OscConfig+0x334>
 8005c6e:	e014      	b.n	8005c9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c70:	f7fd fa28 	bl	80030c4 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c76:	e00a      	b.n	8005c8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c78:	f7fd fa24 	bl	80030c4 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e0b5      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c8e:	4b3e      	ldr	r3, [pc, #248]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1ee      	bne.n	8005c78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d105      	bne.n	8005cac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca0:	4b39      	ldr	r3, [pc, #228]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	4a38      	ldr	r2, [pc, #224]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005caa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80a1 	beq.w	8005df8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cb6:	4b34      	ldr	r3, [pc, #208]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d05c      	beq.n	8005d7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d141      	bne.n	8005d4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cca:	4b31      	ldr	r3, [pc, #196]	; (8005d90 <HAL_RCC_OscConfig+0x478>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd0:	f7fd f9f8 	bl	80030c4 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cd8:	f7fd f9f4 	bl	80030c4 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e087      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cea:	4b27      	ldr	r3, [pc, #156]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f0      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69da      	ldr	r2, [r3, #28]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	019b      	lsls	r3, r3, #6
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	085b      	lsrs	r3, r3, #1
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	041b      	lsls	r3, r3, #16
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	061b      	lsls	r3, r3, #24
 8005d1a:	491b      	ldr	r1, [pc, #108]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d20:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <HAL_RCC_OscConfig+0x478>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d26:	f7fd f9cd 	bl	80030c4 <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d2e:	f7fd f9c9 	bl	80030c4 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e05c      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d40:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f0      	beq.n	8005d2e <HAL_RCC_OscConfig+0x416>
 8005d4c:	e054      	b.n	8005df8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4e:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <HAL_RCC_OscConfig+0x478>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d54:	f7fd f9b6 	bl	80030c4 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d5c:	f7fd f9b2 	bl	80030c4 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e045      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6e:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0x444>
 8005d7a:	e03d      	b.n	8005df8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d107      	bne.n	8005d94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e038      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	40007000 	.word	0x40007000
 8005d90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d94:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <HAL_RCC_OscConfig+0x4ec>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d028      	beq.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d121      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d11a      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d111      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d107      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40023800 	.word	0x40023800

08005e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0cc      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e1c:	4b68      	ldr	r3, [pc, #416]	; (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d90c      	bls.n	8005e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2a:	4b65      	ldr	r3, [pc, #404]	; (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e32:	4b63      	ldr	r3, [pc, #396]	; (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e0b8      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d020      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e5c:	4b59      	ldr	r3, [pc, #356]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	4a58      	ldr	r2, [pc, #352]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e74:	4b53      	ldr	r3, [pc, #332]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4a52      	ldr	r2, [pc, #328]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e80:	4b50      	ldr	r3, [pc, #320]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	494d      	ldr	r1, [pc, #308]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d044      	beq.n	8005f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea6:	4b47      	ldr	r3, [pc, #284]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d119      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e07f      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d003      	beq.n	8005ec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d107      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec6:	4b3f      	ldr	r3, [pc, #252]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e06f      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed6:	4b3b      	ldr	r3, [pc, #236]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e067      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ee6:	4b37      	ldr	r3, [pc, #220]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f023 0203 	bic.w	r2, r3, #3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	4934      	ldr	r1, [pc, #208]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef8:	f7fd f8e4 	bl	80030c4 <HAL_GetTick>
 8005efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efe:	e00a      	b.n	8005f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f00:	f7fd f8e0 	bl	80030c4 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e04f      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f16:	4b2b      	ldr	r3, [pc, #172]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 020c 	and.w	r2, r3, #12
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d1eb      	bne.n	8005f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f28:	4b25      	ldr	r3, [pc, #148]	; (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d20c      	bcs.n	8005f50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f36:	4b22      	ldr	r3, [pc, #136]	; (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3e:	4b20      	ldr	r3, [pc, #128]	; (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d001      	beq.n	8005f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e032      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f5c:	4b19      	ldr	r3, [pc, #100]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	4916      	ldr	r1, [pc, #88]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d009      	beq.n	8005f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f7a:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	490e      	ldr	r1, [pc, #56]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f8e:	f000 f821 	bl	8005fd4 <HAL_RCC_GetSysClockFreq>
 8005f92:	4602      	mov	r2, r0
 8005f94:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	091b      	lsrs	r3, r3, #4
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	490a      	ldr	r1, [pc, #40]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005fa0:	5ccb      	ldrb	r3, [r1, r3]
 8005fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa6:	4a09      	ldr	r2, [pc, #36]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005faa:	4b09      	ldr	r3, [pc, #36]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fb fed6 	bl	8001d60 <HAL_InitTick>

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40023c00 	.word	0x40023c00
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	0800a26c 	.word	0x0800a26c
 8005fcc:	20000010 	.word	0x20000010
 8005fd0:	20000014 	.word	0x20000014

08005fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd8:	b090      	sub	sp, #64	; 0x40
 8005fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fec:	4b59      	ldr	r3, [pc, #356]	; (8006154 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 030c 	and.w	r3, r3, #12
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d00d      	beq.n	8006014 <HAL_RCC_GetSysClockFreq+0x40>
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	f200 80a1 	bhi.w	8006140 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_RCC_GetSysClockFreq+0x34>
 8006002:	2b04      	cmp	r3, #4
 8006004:	d003      	beq.n	800600e <HAL_RCC_GetSysClockFreq+0x3a>
 8006006:	e09b      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006008:	4b53      	ldr	r3, [pc, #332]	; (8006158 <HAL_RCC_GetSysClockFreq+0x184>)
 800600a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800600c:	e09b      	b.n	8006146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800600e:	4b53      	ldr	r3, [pc, #332]	; (800615c <HAL_RCC_GetSysClockFreq+0x188>)
 8006010:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006012:	e098      	b.n	8006146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006014:	4b4f      	ldr	r3, [pc, #316]	; (8006154 <HAL_RCC_GetSysClockFreq+0x180>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800601c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800601e:	4b4d      	ldr	r3, [pc, #308]	; (8006154 <HAL_RCC_GetSysClockFreq+0x180>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d028      	beq.n	800607c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800602a:	4b4a      	ldr	r3, [pc, #296]	; (8006154 <HAL_RCC_GetSysClockFreq+0x180>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	099b      	lsrs	r3, r3, #6
 8006030:	2200      	movs	r2, #0
 8006032:	623b      	str	r3, [r7, #32]
 8006034:	627a      	str	r2, [r7, #36]	; 0x24
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800603c:	2100      	movs	r1, #0
 800603e:	4b47      	ldr	r3, [pc, #284]	; (800615c <HAL_RCC_GetSysClockFreq+0x188>)
 8006040:	fb03 f201 	mul.w	r2, r3, r1
 8006044:	2300      	movs	r3, #0
 8006046:	fb00 f303 	mul.w	r3, r0, r3
 800604a:	4413      	add	r3, r2
 800604c:	4a43      	ldr	r2, [pc, #268]	; (800615c <HAL_RCC_GetSysClockFreq+0x188>)
 800604e:	fba0 1202 	umull	r1, r2, r0, r2
 8006052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006054:	460a      	mov	r2, r1
 8006056:	62ba      	str	r2, [r7, #40]	; 0x28
 8006058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800605a:	4413      	add	r3, r2
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006060:	2200      	movs	r2, #0
 8006062:	61bb      	str	r3, [r7, #24]
 8006064:	61fa      	str	r2, [r7, #28]
 8006066:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800606a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800606e:	f7fa f8ab 	bl	80001c8 <__aeabi_uldivmod>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4613      	mov	r3, r2
 8006078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800607a:	e053      	b.n	8006124 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800607c:	4b35      	ldr	r3, [pc, #212]	; (8006154 <HAL_RCC_GetSysClockFreq+0x180>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	099b      	lsrs	r3, r3, #6
 8006082:	2200      	movs	r2, #0
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	617a      	str	r2, [r7, #20]
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800608e:	f04f 0b00 	mov.w	fp, #0
 8006092:	4652      	mov	r2, sl
 8006094:	465b      	mov	r3, fp
 8006096:	f04f 0000 	mov.w	r0, #0
 800609a:	f04f 0100 	mov.w	r1, #0
 800609e:	0159      	lsls	r1, r3, #5
 80060a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060a4:	0150      	lsls	r0, r2, #5
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	ebb2 080a 	subs.w	r8, r2, sl
 80060ae:	eb63 090b 	sbc.w	r9, r3, fp
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80060be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80060c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80060c6:	ebb2 0408 	subs.w	r4, r2, r8
 80060ca:	eb63 0509 	sbc.w	r5, r3, r9
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	f04f 0300 	mov.w	r3, #0
 80060d6:	00eb      	lsls	r3, r5, #3
 80060d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060dc:	00e2      	lsls	r2, r4, #3
 80060de:	4614      	mov	r4, r2
 80060e0:	461d      	mov	r5, r3
 80060e2:	eb14 030a 	adds.w	r3, r4, sl
 80060e6:	603b      	str	r3, [r7, #0]
 80060e8:	eb45 030b 	adc.w	r3, r5, fp
 80060ec:	607b      	str	r3, [r7, #4]
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	f04f 0300 	mov.w	r3, #0
 80060f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060fa:	4629      	mov	r1, r5
 80060fc:	028b      	lsls	r3, r1, #10
 80060fe:	4621      	mov	r1, r4
 8006100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006104:	4621      	mov	r1, r4
 8006106:	028a      	lsls	r2, r1, #10
 8006108:	4610      	mov	r0, r2
 800610a:	4619      	mov	r1, r3
 800610c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610e:	2200      	movs	r2, #0
 8006110:	60bb      	str	r3, [r7, #8]
 8006112:	60fa      	str	r2, [r7, #12]
 8006114:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006118:	f7fa f856 	bl	80001c8 <__aeabi_uldivmod>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4613      	mov	r3, r2
 8006122:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <HAL_RCC_GetSysClockFreq+0x180>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	0c1b      	lsrs	r3, r3, #16
 800612a:	f003 0303 	and.w	r3, r3, #3
 800612e:	3301      	adds	r3, #1
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006134:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	fbb2 f3f3 	udiv	r3, r2, r3
 800613c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800613e:	e002      	b.n	8006146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006140:	4b05      	ldr	r3, [pc, #20]	; (8006158 <HAL_RCC_GetSysClockFreq+0x184>)
 8006142:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006148:	4618      	mov	r0, r3
 800614a:	3740      	adds	r7, #64	; 0x40
 800614c:	46bd      	mov	sp, r7
 800614e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006152:	bf00      	nop
 8006154:	40023800 	.word	0x40023800
 8006158:	00f42400 	.word	0x00f42400
 800615c:	017d7840 	.word	0x017d7840

08006160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006164:	4b03      	ldr	r3, [pc, #12]	; (8006174 <HAL_RCC_GetHCLKFreq+0x14>)
 8006166:	681b      	ldr	r3, [r3, #0]
}
 8006168:	4618      	mov	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20000010 	.word	0x20000010

08006178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800617c:	f7ff fff0 	bl	8006160 <HAL_RCC_GetHCLKFreq>
 8006180:	4602      	mov	r2, r0
 8006182:	4b05      	ldr	r3, [pc, #20]	; (8006198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	0a9b      	lsrs	r3, r3, #10
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	4903      	ldr	r1, [pc, #12]	; (800619c <HAL_RCC_GetPCLK1Freq+0x24>)
 800618e:	5ccb      	ldrb	r3, [r1, r3]
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006194:	4618      	mov	r0, r3
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40023800 	.word	0x40023800
 800619c:	0800a27c 	.word	0x0800a27c

080061a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061a4:	f7ff ffdc 	bl	8006160 <HAL_RCC_GetHCLKFreq>
 80061a8:	4602      	mov	r2, r0
 80061aa:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	0b5b      	lsrs	r3, r3, #13
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	4903      	ldr	r1, [pc, #12]	; (80061c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061b6:	5ccb      	ldrb	r3, [r1, r3]
 80061b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061bc:	4618      	mov	r0, r3
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40023800 	.word	0x40023800
 80061c4:	0800a27c 	.word	0x0800a27c

080061c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	220f      	movs	r2, #15
 80061d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061d8:	4b12      	ldr	r3, [pc, #72]	; (8006224 <HAL_RCC_GetClockConfig+0x5c>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 0203 	and.w	r2, r3, #3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80061e4:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <HAL_RCC_GetClockConfig+0x5c>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80061f0:	4b0c      	ldr	r3, [pc, #48]	; (8006224 <HAL_RCC_GetClockConfig+0x5c>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80061fc:	4b09      	ldr	r3, [pc, #36]	; (8006224 <HAL_RCC_GetClockConfig+0x5c>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	08db      	lsrs	r3, r3, #3
 8006202:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800620a:	4b07      	ldr	r3, [pc, #28]	; (8006228 <HAL_RCC_GetClockConfig+0x60>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0207 	and.w	r2, r3, #7
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	601a      	str	r2, [r3, #0]
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40023800 	.word	0x40023800
 8006228:	40023c00 	.word	0x40023c00

0800622c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e07b      	b.n	8006336 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	2b00      	cmp	r3, #0
 8006244:	d108      	bne.n	8006258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800624e:	d009      	beq.n	8006264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	61da      	str	r2, [r3, #28]
 8006256:	e005      	b.n	8006264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fb fcfe 	bl	8001c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800629a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e8:	ea42 0103 	orr.w	r1, r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	0c1b      	lsrs	r3, r3, #16
 8006302:	f003 0104 	and.w	r1, r3, #4
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	f003 0210 	and.w	r2, r3, #16
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006324:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e041      	b.n	80063d4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d106      	bne.n	800636a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7fc f87f 	bl	8002468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2202      	movs	r2, #2
 800636e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3304      	adds	r3, #4
 800637a:	4619      	mov	r1, r3
 800637c:	4610      	mov	r0, r2
 800637e:	f000 fbb1 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d001      	beq.n	80063f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e04e      	b.n	8006492 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0201 	orr.w	r2, r2, #1
 800640a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a23      	ldr	r2, [pc, #140]	; (80064a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d022      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641e:	d01d      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d018      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1e      	ldr	r2, [pc, #120]	; (80064a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d013      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1c      	ldr	r2, [pc, #112]	; (80064ac <HAL_TIM_Base_Start_IT+0xd0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00e      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1b      	ldr	r2, [pc, #108]	; (80064b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d009      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a19      	ldr	r2, [pc, #100]	; (80064b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d004      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a18      	ldr	r2, [pc, #96]	; (80064b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d111      	bne.n	8006480 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b06      	cmp	r3, #6
 800646c:	d010      	beq.n	8006490 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0201 	orr.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647e:	e007      	b.n	8006490 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40010000 	.word	0x40010000
 80064a4:	40000400 	.word	0x40000400
 80064a8:	40000800 	.word	0x40000800
 80064ac:	40000c00 	.word	0x40000c00
 80064b0:	40010400 	.word	0x40010400
 80064b4:	40014000 	.word	0x40014000
 80064b8:	40001800 	.word	0x40001800

080064bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e041      	b.n	8006552 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f839 	bl	800655a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4619      	mov	r1, r3
 80064fa:	4610      	mov	r0, r2
 80064fc:	f000 faf2 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b02      	cmp	r3, #2
 8006582:	d122      	bne.n	80065ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b02      	cmp	r3, #2
 8006590:	d11b      	bne.n	80065ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f06f 0202 	mvn.w	r2, #2
 800659a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fa78 	bl	8006aa6 <HAL_TIM_IC_CaptureCallback>
 80065b6:	e005      	b.n	80065c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fa6a 	bl	8006a92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fa7b 	bl	8006aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d122      	bne.n	800661e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d11b      	bne.n	800661e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f06f 0204 	mvn.w	r2, #4
 80065ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fa4e 	bl	8006aa6 <HAL_TIM_IC_CaptureCallback>
 800660a:	e005      	b.n	8006618 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fa40 	bl	8006a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa51 	bl	8006aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b08      	cmp	r3, #8
 800662a:	d122      	bne.n	8006672 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f003 0308 	and.w	r3, r3, #8
 8006636:	2b08      	cmp	r3, #8
 8006638:	d11b      	bne.n	8006672 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f06f 0208 	mvn.w	r2, #8
 8006642:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2204      	movs	r2, #4
 8006648:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	f003 0303 	and.w	r3, r3, #3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fa24 	bl	8006aa6 <HAL_TIM_IC_CaptureCallback>
 800665e:	e005      	b.n	800666c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fa16 	bl	8006a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fa27 	bl	8006aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	2b10      	cmp	r3, #16
 800667e:	d122      	bne.n	80066c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f003 0310 	and.w	r3, r3, #16
 800668a:	2b10      	cmp	r3, #16
 800668c:	d11b      	bne.n	80066c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f06f 0210 	mvn.w	r2, #16
 8006696:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2208      	movs	r2, #8
 800669c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f9fa 	bl	8006aa6 <HAL_TIM_IC_CaptureCallback>
 80066b2:	e005      	b.n	80066c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f9ec 	bl	8006a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f9fd 	bl	8006aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d10e      	bne.n	80066f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d107      	bne.n	80066f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f06f 0201 	mvn.w	r2, #1
 80066ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7fb fa7d 	bl	8001bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fc:	2b80      	cmp	r3, #128	; 0x80
 80066fe:	d10e      	bne.n	800671e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670a:	2b80      	cmp	r3, #128	; 0x80
 800670c:	d107      	bne.n	800671e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fda5 	bl	8007268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006728:	2b40      	cmp	r3, #64	; 0x40
 800672a:	d10e      	bne.n	800674a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006736:	2b40      	cmp	r3, #64	; 0x40
 8006738:	d107      	bne.n	800674a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f9c2 	bl	8006ace <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b20      	cmp	r3, #32
 8006756:	d10e      	bne.n	8006776 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b20      	cmp	r3, #32
 8006764:	d107      	bne.n	8006776 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f06f 0220 	mvn.w	r2, #32
 800676e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fd6f 	bl	8007254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006776:	bf00      	nop
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800679a:	2302      	movs	r3, #2
 800679c:	e0ae      	b.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b0c      	cmp	r3, #12
 80067aa:	f200 809f 	bhi.w	80068ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80067ae:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b4:	080067e9 	.word	0x080067e9
 80067b8:	080068ed 	.word	0x080068ed
 80067bc:	080068ed 	.word	0x080068ed
 80067c0:	080068ed 	.word	0x080068ed
 80067c4:	08006829 	.word	0x08006829
 80067c8:	080068ed 	.word	0x080068ed
 80067cc:	080068ed 	.word	0x080068ed
 80067d0:	080068ed 	.word	0x080068ed
 80067d4:	0800686b 	.word	0x0800686b
 80067d8:	080068ed 	.word	0x080068ed
 80067dc:	080068ed 	.word	0x080068ed
 80067e0:	080068ed 	.word	0x080068ed
 80067e4:	080068ab 	.word	0x080068ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fa18 	bl	8006c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699a      	ldr	r2, [r3, #24]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0208 	orr.w	r2, r2, #8
 8006802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	699a      	ldr	r2, [r3, #24]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0204 	bic.w	r2, r2, #4
 8006812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6999      	ldr	r1, [r3, #24]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691a      	ldr	r2, [r3, #16]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	619a      	str	r2, [r3, #24]
      break;
 8006826:	e064      	b.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68b9      	ldr	r1, [r7, #8]
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fa68 	bl	8006d04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699a      	ldr	r2, [r3, #24]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6999      	ldr	r1, [r3, #24]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	021a      	lsls	r2, r3, #8
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	619a      	str	r2, [r3, #24]
      break;
 8006868:	e043      	b.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	4618      	mov	r0, r3
 8006872:	f000 fabd 	bl	8006df0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69da      	ldr	r2, [r3, #28]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f042 0208 	orr.w	r2, r2, #8
 8006884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69da      	ldr	r2, [r3, #28]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0204 	bic.w	r2, r2, #4
 8006894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69d9      	ldr	r1, [r3, #28]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	61da      	str	r2, [r3, #28]
      break;
 80068a8:	e023      	b.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fb11 	bl	8006ed8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69da      	ldr	r2, [r3, #28]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	69d9      	ldr	r1, [r3, #28]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	021a      	lsls	r2, r3, #8
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	61da      	str	r2, [r3, #28]
      break;
 80068ea:	e002      	b.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	75fb      	strb	r3, [r7, #23]
      break;
 80068f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <HAL_TIM_ConfigClockSource+0x1c>
 800691c:	2302      	movs	r3, #2
 800691e:	e0b4      	b.n	8006a8a <HAL_TIM_ConfigClockSource+0x186>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800693e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006958:	d03e      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0xd4>
 800695a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800695e:	f200 8087 	bhi.w	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006966:	f000 8086 	beq.w	8006a76 <HAL_TIM_ConfigClockSource+0x172>
 800696a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800696e:	d87f      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006970:	2b70      	cmp	r3, #112	; 0x70
 8006972:	d01a      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0xa6>
 8006974:	2b70      	cmp	r3, #112	; 0x70
 8006976:	d87b      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006978:	2b60      	cmp	r3, #96	; 0x60
 800697a:	d050      	beq.n	8006a1e <HAL_TIM_ConfigClockSource+0x11a>
 800697c:	2b60      	cmp	r3, #96	; 0x60
 800697e:	d877      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006980:	2b50      	cmp	r3, #80	; 0x50
 8006982:	d03c      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0xfa>
 8006984:	2b50      	cmp	r3, #80	; 0x50
 8006986:	d873      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006988:	2b40      	cmp	r3, #64	; 0x40
 800698a:	d058      	beq.n	8006a3e <HAL_TIM_ConfigClockSource+0x13a>
 800698c:	2b40      	cmp	r3, #64	; 0x40
 800698e:	d86f      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006990:	2b30      	cmp	r3, #48	; 0x30
 8006992:	d064      	beq.n	8006a5e <HAL_TIM_ConfigClockSource+0x15a>
 8006994:	2b30      	cmp	r3, #48	; 0x30
 8006996:	d86b      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006998:	2b20      	cmp	r3, #32
 800699a:	d060      	beq.n	8006a5e <HAL_TIM_ConfigClockSource+0x15a>
 800699c:	2b20      	cmp	r3, #32
 800699e:	d867      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d05c      	beq.n	8006a5e <HAL_TIM_ConfigClockSource+0x15a>
 80069a4:	2b10      	cmp	r3, #16
 80069a6:	d05a      	beq.n	8006a5e <HAL_TIM_ConfigClockSource+0x15a>
 80069a8:	e062      	b.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6818      	ldr	r0, [r3, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	6899      	ldr	r1, [r3, #8]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f000 fb5d 	bl	8007078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	609a      	str	r2, [r3, #8]
      break;
 80069d6:	e04f      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	6899      	ldr	r1, [r3, #8]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f000 fb46 	bl	8007078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069fa:	609a      	str	r2, [r3, #8]
      break;
 80069fc:	e03c      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	6859      	ldr	r1, [r3, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f000 faba 	bl	8006f84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2150      	movs	r1, #80	; 0x50
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fb13 	bl	8007042 <TIM_ITRx_SetConfig>
      break;
 8006a1c:	e02c      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	6859      	ldr	r1, [r3, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f000 fad9 	bl	8006fe2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2160      	movs	r1, #96	; 0x60
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fb03 	bl	8007042 <TIM_ITRx_SetConfig>
      break;
 8006a3c:	e01c      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6859      	ldr	r1, [r3, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f000 fa9a 	bl	8006f84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2140      	movs	r1, #64	; 0x40
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 faf3 	bl	8007042 <TIM_ITRx_SetConfig>
      break;
 8006a5c:	e00c      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4619      	mov	r1, r3
 8006a68:	4610      	mov	r0, r2
 8006a6a:	f000 faea 	bl	8007042 <TIM_ITRx_SetConfig>
      break;
 8006a6e:	e003      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	73fb      	strb	r3, [r7, #15]
      break;
 8006a74:	e000      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b083      	sub	sp, #12
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
	...

08006ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a40      	ldr	r2, [pc, #256]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d013      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b02:	d00f      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a3d      	ldr	r2, [pc, #244]	; (8006bfc <TIM_Base_SetConfig+0x118>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00b      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a3c      	ldr	r2, [pc, #240]	; (8006c00 <TIM_Base_SetConfig+0x11c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d007      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a3b      	ldr	r2, [pc, #236]	; (8006c04 <TIM_Base_SetConfig+0x120>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a3a      	ldr	r2, [pc, #232]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d108      	bne.n	8006b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2f      	ldr	r2, [pc, #188]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d02b      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b44:	d027      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a2c      	ldr	r2, [pc, #176]	; (8006bfc <TIM_Base_SetConfig+0x118>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d023      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a2b      	ldr	r2, [pc, #172]	; (8006c00 <TIM_Base_SetConfig+0x11c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d01f      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a2a      	ldr	r2, [pc, #168]	; (8006c04 <TIM_Base_SetConfig+0x120>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01b      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a29      	ldr	r2, [pc, #164]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d017      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a28      	ldr	r2, [pc, #160]	; (8006c0c <TIM_Base_SetConfig+0x128>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a27      	ldr	r2, [pc, #156]	; (8006c10 <TIM_Base_SetConfig+0x12c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00f      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a26      	ldr	r2, [pc, #152]	; (8006c14 <TIM_Base_SetConfig+0x130>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a25      	ldr	r2, [pc, #148]	; (8006c18 <TIM_Base_SetConfig+0x134>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a24      	ldr	r2, [pc, #144]	; (8006c1c <TIM_Base_SetConfig+0x138>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a23      	ldr	r2, [pc, #140]	; (8006c20 <TIM_Base_SetConfig+0x13c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d108      	bne.n	8006ba8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a0a      	ldr	r2, [pc, #40]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_Base_SetConfig+0xf8>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a0c      	ldr	r2, [pc, #48]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d103      	bne.n	8006be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	615a      	str	r2, [r3, #20]
}
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40010000 	.word	0x40010000
 8006bfc:	40000400 	.word	0x40000400
 8006c00:	40000800 	.word	0x40000800
 8006c04:	40000c00 	.word	0x40000c00
 8006c08:	40010400 	.word	0x40010400
 8006c0c:	40014000 	.word	0x40014000
 8006c10:	40014400 	.word	0x40014400
 8006c14:	40014800 	.word	0x40014800
 8006c18:	40001800 	.word	0x40001800
 8006c1c:	40001c00 	.word	0x40001c00
 8006c20:	40002000 	.word	0x40002000

08006c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f023 0201 	bic.w	r2, r3, #1
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0303 	bic.w	r3, r3, #3
 8006c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f023 0302 	bic.w	r3, r3, #2
 8006c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a20      	ldr	r2, [pc, #128]	; (8006cfc <TIM_OC1_SetConfig+0xd8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_OC1_SetConfig+0x64>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a1f      	ldr	r2, [pc, #124]	; (8006d00 <TIM_OC1_SetConfig+0xdc>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d10c      	bne.n	8006ca2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f023 0308 	bic.w	r3, r3, #8
 8006c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f023 0304 	bic.w	r3, r3, #4
 8006ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <TIM_OC1_SetConfig+0xd8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d003      	beq.n	8006cb2 <TIM_OC1_SetConfig+0x8e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a14      	ldr	r2, [pc, #80]	; (8006d00 <TIM_OC1_SetConfig+0xdc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d111      	bne.n	8006cd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	621a      	str	r2, [r3, #32]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	40010000 	.word	0x40010000
 8006d00:	40010400 	.word	0x40010400

08006d04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f023 0210 	bic.w	r2, r3, #16
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f023 0320 	bic.w	r3, r3, #32
 8006d4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a22      	ldr	r2, [pc, #136]	; (8006de8 <TIM_OC2_SetConfig+0xe4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d003      	beq.n	8006d6c <TIM_OC2_SetConfig+0x68>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a21      	ldr	r2, [pc, #132]	; (8006dec <TIM_OC2_SetConfig+0xe8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d10d      	bne.n	8006d88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a17      	ldr	r2, [pc, #92]	; (8006de8 <TIM_OC2_SetConfig+0xe4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d003      	beq.n	8006d98 <TIM_OC2_SetConfig+0x94>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a16      	ldr	r2, [pc, #88]	; (8006dec <TIM_OC2_SetConfig+0xe8>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d113      	bne.n	8006dc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006da6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40010000 	.word	0x40010000
 8006dec:	40010400 	.word	0x40010400

08006df0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0303 	bic.w	r3, r3, #3
 8006e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a21      	ldr	r2, [pc, #132]	; (8006ed0 <TIM_OC3_SetConfig+0xe0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d003      	beq.n	8006e56 <TIM_OC3_SetConfig+0x66>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a20      	ldr	r2, [pc, #128]	; (8006ed4 <TIM_OC3_SetConfig+0xe4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d10d      	bne.n	8006e72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a16      	ldr	r2, [pc, #88]	; (8006ed0 <TIM_OC3_SetConfig+0xe0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d003      	beq.n	8006e82 <TIM_OC3_SetConfig+0x92>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a15      	ldr	r2, [pc, #84]	; (8006ed4 <TIM_OC3_SetConfig+0xe4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d113      	bne.n	8006eaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	621a      	str	r2, [r3, #32]
}
 8006ec4:	bf00      	nop
 8006ec6:	371c      	adds	r7, #28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	40010000 	.word	0x40010000
 8006ed4:	40010400 	.word	0x40010400

08006ed8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	021b      	lsls	r3, r3, #8
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	031b      	lsls	r3, r3, #12
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a12      	ldr	r2, [pc, #72]	; (8006f7c <TIM_OC4_SetConfig+0xa4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d003      	beq.n	8006f40 <TIM_OC4_SetConfig+0x68>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a11      	ldr	r2, [pc, #68]	; (8006f80 <TIM_OC4_SetConfig+0xa8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d109      	bne.n	8006f54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	019b      	lsls	r3, r3, #6
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	621a      	str	r2, [r3, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	40010000 	.word	0x40010000
 8006f80:	40010400 	.word	0x40010400

08006f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	f023 0201 	bic.w	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f023 030a 	bic.w	r3, r3, #10
 8006fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b087      	sub	sp, #28
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f023 0210 	bic.w	r2, r3, #16
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800700c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	031b      	lsls	r3, r3, #12
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800701e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007042:	b480      	push	{r7}
 8007044:	b085      	sub	sp, #20
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	f043 0307 	orr.w	r3, r3, #7
 8007064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	609a      	str	r2, [r3, #8]
}
 800706c:	bf00      	nop
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	021a      	lsls	r2, r3, #8
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	431a      	orrs	r2, r3
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	4313      	orrs	r3, r2
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	609a      	str	r2, [r3, #8]
}
 80070ac:	bf00      	nop
 80070ae:	371c      	adds	r7, #28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e05a      	b.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a21      	ldr	r2, [pc, #132]	; (8007194 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d022      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711c:	d01d      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a1d      	ldr	r2, [pc, #116]	; (8007198 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d018      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1b      	ldr	r2, [pc, #108]	; (800719c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d013      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1a      	ldr	r2, [pc, #104]	; (80071a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00e      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a18      	ldr	r2, [pc, #96]	; (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d009      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a17      	ldr	r2, [pc, #92]	; (80071a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d004      	beq.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a15      	ldr	r2, [pc, #84]	; (80071ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d10c      	bne.n	8007174 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	4313      	orrs	r3, r2
 800716a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40010000 	.word	0x40010000
 8007198:	40000400 	.word	0x40000400
 800719c:	40000800 	.word	0x40000800
 80071a0:	40000c00 	.word	0x40000c00
 80071a4:	40010400 	.word	0x40010400
 80071a8:	40014000 	.word	0x40014000
 80071ac:	40001800 	.word	0x40001800

080071b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d101      	bne.n	80071cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071c8:	2302      	movs	r3, #2
 80071ca:	e03d      	b.n	8007248 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	4313      	orrs	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e03f      	b.n	800730e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fb faa4 	bl	80027f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2224      	movs	r2, #36	; 0x24
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fc67 	bl	8007b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695a      	ldr	r2, [r3, #20]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68da      	ldr	r2, [r3, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2220      	movs	r2, #32
 8007308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b0ba      	sub	sp, #232	; 0xe8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800733e:	2300      	movs	r3, #0
 8007340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007344:	2300      	movs	r3, #0
 8007346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800734a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800734e:	f003 030f 	and.w	r3, r3, #15
 8007352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10f      	bne.n	800737e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800735e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007362:	f003 0320 	and.w	r3, r3, #32
 8007366:	2b00      	cmp	r3, #0
 8007368:	d009      	beq.n	800737e <HAL_UART_IRQHandler+0x66>
 800736a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fb51 	bl	8007a1e <UART_Receive_IT>
      return;
 800737c:	e256      	b.n	800782c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800737e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 80de 	beq.w	8007544 <HAL_UART_IRQHandler+0x22c>
 8007388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d106      	bne.n	80073a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007398:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 80d1 	beq.w	8007544 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00b      	beq.n	80073c6 <HAL_UART_IRQHandler+0xae>
 80073ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d005      	beq.n	80073c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	f043 0201 	orr.w	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00b      	beq.n	80073ea <HAL_UART_IRQHandler+0xd2>
 80073d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	f043 0202 	orr.w	r2, r3, #2
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <HAL_UART_IRQHandler+0xf6>
 80073f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d005      	beq.n	800740e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	f043 0204 	orr.w	r2, r3, #4
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800740e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d011      	beq.n	800743e <HAL_UART_IRQHandler+0x126>
 800741a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b00      	cmp	r3, #0
 8007424:	d105      	bne.n	8007432 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d005      	beq.n	800743e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f043 0208 	orr.w	r2, r3, #8
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 81ed 	beq.w	8007822 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744c:	f003 0320 	and.w	r3, r3, #32
 8007450:	2b00      	cmp	r3, #0
 8007452:	d008      	beq.n	8007466 <HAL_UART_IRQHandler+0x14e>
 8007454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fadc 	bl	8007a1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007470:	2b40      	cmp	r3, #64	; 0x40
 8007472:	bf0c      	ite	eq
 8007474:	2301      	moveq	r3, #1
 8007476:	2300      	movne	r3, #0
 8007478:	b2db      	uxtb	r3, r3
 800747a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	2b00      	cmp	r3, #0
 8007488:	d103      	bne.n	8007492 <HAL_UART_IRQHandler+0x17a>
 800748a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800748e:	2b00      	cmp	r3, #0
 8007490:	d04f      	beq.n	8007532 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9e4 	bl	8007860 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a2:	2b40      	cmp	r3, #64	; 0x40
 80074a4:	d141      	bne.n	800752a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3314      	adds	r3, #20
 80074ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3314      	adds	r3, #20
 80074ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1d9      	bne.n	80074a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d013      	beq.n	8007522 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fe:	4a7d      	ldr	r2, [pc, #500]	; (80076f4 <HAL_UART_IRQHandler+0x3dc>)
 8007500:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007506:	4618      	mov	r0, r3
 8007508:	f7fc fb6a 	bl	8003be0 <HAL_DMA_Abort_IT>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d016      	beq.n	8007540 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800751c:	4610      	mov	r0, r2
 800751e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007520:	e00e      	b.n	8007540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f986 	bl	8007834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007528:	e00a      	b.n	8007540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f982 	bl	8007834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007530:	e006      	b.n	8007540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f97e 	bl	8007834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800753e:	e170      	b.n	8007822 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007540:	bf00      	nop
    return;
 8007542:	e16e      	b.n	8007822 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	2b01      	cmp	r3, #1
 800754a:	f040 814a 	bne.w	80077e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800754e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007552:	f003 0310 	and.w	r3, r3, #16
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 8143 	beq.w	80077e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800755c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007560:	f003 0310 	and.w	r3, r3, #16
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 813c 	beq.w	80077e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800756a:	2300      	movs	r3, #0
 800756c:	60bb      	str	r3, [r7, #8]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	60bb      	str	r3, [r7, #8]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	60bb      	str	r3, [r7, #8]
 800757e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758a:	2b40      	cmp	r3, #64	; 0x40
 800758c:	f040 80b4 	bne.w	80076f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800759c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 8140 	beq.w	8007826 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075ae:	429a      	cmp	r2, r3
 80075b0:	f080 8139 	bcs.w	8007826 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c6:	f000 8088 	beq.w	80076da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	330c      	adds	r3, #12
 80075d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	330c      	adds	r3, #12
 80075f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007602:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800760e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1d9      	bne.n	80075ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3314      	adds	r3, #20
 800761c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007628:	f023 0301 	bic.w	r3, r3, #1
 800762c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3314      	adds	r3, #20
 8007636:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800763a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800763e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007642:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800764c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e1      	bne.n	8007616 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3314      	adds	r3, #20
 8007658:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3314      	adds	r3, #20
 8007672:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007676:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007678:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800767c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e3      	bne.n	8007652 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2220      	movs	r2, #32
 800768e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	330c      	adds	r3, #12
 800769e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076aa:	f023 0310 	bic.w	r3, r3, #16
 80076ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	330c      	adds	r3, #12
 80076b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80076bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80076be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e3      	bne.n	8007698 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fc fa13 	bl	8003b00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f8ac 	bl	8007848 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076f0:	e099      	b.n	8007826 <HAL_UART_IRQHandler+0x50e>
 80076f2:	bf00      	nop
 80076f4:	08007927 	.word	0x08007927
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007700:	b29b      	uxth	r3, r3
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 808b 	beq.w	800782a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 8086 	beq.w	800782a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	330c      	adds	r3, #12
 8007724:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800772e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007730:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007734:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	330c      	adds	r3, #12
 800773e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007742:	647a      	str	r2, [r7, #68]	; 0x44
 8007744:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007748:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e3      	bne.n	800771e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3314      	adds	r3, #20
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	623b      	str	r3, [r7, #32]
   return(result);
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	f023 0301 	bic.w	r3, r3, #1
 800776c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3314      	adds	r3, #20
 8007776:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800777a:	633a      	str	r2, [r7, #48]	; 0x30
 800777c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e3      	bne.n	8007756 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2220      	movs	r2, #32
 8007792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	330c      	adds	r3, #12
 80077a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0310 	bic.w	r3, r3, #16
 80077b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	330c      	adds	r3, #12
 80077bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80077c0:	61fa      	str	r2, [r7, #28]
 80077c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c4:	69b9      	ldr	r1, [r7, #24]
 80077c6:	69fa      	ldr	r2, [r7, #28]
 80077c8:	e841 2300 	strex	r3, r2, [r1]
 80077cc:	617b      	str	r3, [r7, #20]
   return(result);
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e3      	bne.n	800779c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f834 	bl	8007848 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077e0:	e023      	b.n	800782a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <HAL_UART_IRQHandler+0x4ea>
 80077ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f8a7 	bl	800794e <UART_Transmit_IT>
    return;
 8007800:	e014      	b.n	800782c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00e      	beq.n	800782c <HAL_UART_IRQHandler+0x514>
 800780e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d008      	beq.n	800782c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f8e7 	bl	80079ee <UART_EndTransmit_IT>
    return;
 8007820:	e004      	b.n	800782c <HAL_UART_IRQHandler+0x514>
    return;
 8007822:	bf00      	nop
 8007824:	e002      	b.n	800782c <HAL_UART_IRQHandler+0x514>
      return;
 8007826:	bf00      	nop
 8007828:	e000      	b.n	800782c <HAL_UART_IRQHandler+0x514>
      return;
 800782a:	bf00      	nop
  }
}
 800782c:	37e8      	adds	r7, #232	; 0xe8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop

08007834 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b095      	sub	sp, #84	; 0x54
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	330c      	adds	r3, #12
 800786e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800787e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	330c      	adds	r3, #12
 8007886:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007888:	643a      	str	r2, [r7, #64]	; 0x40
 800788a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800788e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e5      	bne.n	8007868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3314      	adds	r3, #20
 80078a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f023 0301 	bic.w	r3, r3, #1
 80078b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3314      	adds	r3, #20
 80078ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e5      	bne.n	800789c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d119      	bne.n	800790c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	330c      	adds	r3, #12
 80078de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f023 0310 	bic.w	r3, r3, #16
 80078ee:	647b      	str	r3, [r7, #68]	; 0x44
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	330c      	adds	r3, #12
 80078f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078f8:	61ba      	str	r2, [r7, #24]
 80078fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	6979      	ldr	r1, [r7, #20]
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	613b      	str	r3, [r7, #16]
   return(result);
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e5      	bne.n	80078d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2220      	movs	r2, #32
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	631a      	str	r2, [r3, #48]	; 0x30
}
 800791a:	bf00      	nop
 800791c:	3754      	adds	r7, #84	; 0x54
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f7ff ff77 	bl	8007834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007946:	bf00      	nop
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b21      	cmp	r3, #33	; 0x21
 8007960:	d13e      	bne.n	80079e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796a:	d114      	bne.n	8007996 <UART_Transmit_IT+0x48>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d110      	bne.n	8007996 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007988:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	1c9a      	adds	r2, r3, #2
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	621a      	str	r2, [r3, #32]
 8007994:	e008      	b.n	80079a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	1c59      	adds	r1, r3, #1
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	6211      	str	r1, [r2, #32]
 80079a0:	781a      	ldrb	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	4619      	mov	r1, r3
 80079b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10f      	bne.n	80079dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	e000      	b.n	80079e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079e0:	2302      	movs	r3, #2
  }
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7f9 f848 	bl	8000aa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b08c      	sub	sp, #48	; 0x30
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b22      	cmp	r3, #34	; 0x22
 8007a30:	f040 80ab 	bne.w	8007b8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3c:	d117      	bne.n	8007a6e <UART_Receive_IT+0x50>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d113      	bne.n	8007a6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a66:	1c9a      	adds	r2, r3, #2
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8007a6c:	e026      	b.n	8007abc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a74:	2300      	movs	r3, #0
 8007a76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a80:	d007      	beq.n	8007a92 <UART_Receive_IT+0x74>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10a      	bne.n	8007aa0 <UART_Receive_IT+0x82>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	e008      	b.n	8007ab2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab6:	1c5a      	adds	r2, r3, #1
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d15a      	bne.n	8007b86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 0220 	bic.w	r2, r2, #32
 8007ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	695a      	ldr	r2, [r3, #20]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0201 	bic.w	r2, r2, #1
 8007afe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d135      	bne.n	8007b7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	330c      	adds	r3, #12
 8007b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	613b      	str	r3, [r7, #16]
   return(result);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f023 0310 	bic.w	r3, r3, #16
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	330c      	adds	r3, #12
 8007b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b36:	623a      	str	r2, [r7, #32]
 8007b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	69f9      	ldr	r1, [r7, #28]
 8007b3c:	6a3a      	ldr	r2, [r7, #32]
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e5      	bne.n	8007b16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b10      	cmp	r3, #16
 8007b56:	d10a      	bne.n	8007b6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff fe67 	bl	8007848 <HAL_UARTEx_RxEventCallback>
 8007b7a:	e002      	b.n	8007b82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7f8 ffa7 	bl	8000ad0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	e002      	b.n	8007b8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	e000      	b.n	8007b8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b8a:	2302      	movs	r3, #2
  }
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3730      	adds	r7, #48	; 0x30
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b98:	b0c0      	sub	sp, #256	; 0x100
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb0:	68d9      	ldr	r1, [r3, #12]
 8007bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	ea40 0301 	orr.w	r3, r0, r1
 8007bbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bec:	f021 010c 	bic.w	r1, r1, #12
 8007bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c0e:	6999      	ldr	r1, [r3, #24]
 8007c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	ea40 0301 	orr.w	r3, r0, r1
 8007c1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b8f      	ldr	r3, [pc, #572]	; (8007e60 <UART_SetConfig+0x2cc>)
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d005      	beq.n	8007c34 <UART_SetConfig+0xa0>
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	4b8d      	ldr	r3, [pc, #564]	; (8007e64 <UART_SetConfig+0x2d0>)
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d104      	bne.n	8007c3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c34:	f7fe fab4 	bl	80061a0 <HAL_RCC_GetPCLK2Freq>
 8007c38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c3c:	e003      	b.n	8007c46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c3e:	f7fe fa9b 	bl	8006178 <HAL_RCC_GetPCLK1Freq>
 8007c42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c50:	f040 810c 	bne.w	8007e6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c66:	4622      	mov	r2, r4
 8007c68:	462b      	mov	r3, r5
 8007c6a:	1891      	adds	r1, r2, r2
 8007c6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c6e:	415b      	adcs	r3, r3
 8007c70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c76:	4621      	mov	r1, r4
 8007c78:	eb12 0801 	adds.w	r8, r2, r1
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	eb43 0901 	adc.w	r9, r3, r1
 8007c82:	f04f 0200 	mov.w	r2, #0
 8007c86:	f04f 0300 	mov.w	r3, #0
 8007c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c96:	4690      	mov	r8, r2
 8007c98:	4699      	mov	r9, r3
 8007c9a:	4623      	mov	r3, r4
 8007c9c:	eb18 0303 	adds.w	r3, r8, r3
 8007ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	eb49 0303 	adc.w	r3, r9, r3
 8007caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007cba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	18db      	adds	r3, r3, r3
 8007cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8007cc8:	4613      	mov	r3, r2
 8007cca:	eb42 0303 	adc.w	r3, r2, r3
 8007cce:	657b      	str	r3, [r7, #84]	; 0x54
 8007cd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007cd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007cd8:	f7f8 fa76 	bl	80001c8 <__aeabi_uldivmod>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4b61      	ldr	r3, [pc, #388]	; (8007e68 <UART_SetConfig+0x2d4>)
 8007ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	011c      	lsls	r4, r3, #4
 8007cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cf4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007cf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007cfc:	4642      	mov	r2, r8
 8007cfe:	464b      	mov	r3, r9
 8007d00:	1891      	adds	r1, r2, r2
 8007d02:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d04:	415b      	adcs	r3, r3
 8007d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d0c:	4641      	mov	r1, r8
 8007d0e:	eb12 0a01 	adds.w	sl, r2, r1
 8007d12:	4649      	mov	r1, r9
 8007d14:	eb43 0b01 	adc.w	fp, r3, r1
 8007d18:	f04f 0200 	mov.w	r2, #0
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d2c:	4692      	mov	sl, r2
 8007d2e:	469b      	mov	fp, r3
 8007d30:	4643      	mov	r3, r8
 8007d32:	eb1a 0303 	adds.w	r3, sl, r3
 8007d36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d3a:	464b      	mov	r3, r9
 8007d3c:	eb4b 0303 	adc.w	r3, fp, r3
 8007d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	18db      	adds	r3, r3, r3
 8007d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8007d5e:	4613      	mov	r3, r2
 8007d60:	eb42 0303 	adc.w	r3, r2, r3
 8007d64:	647b      	str	r3, [r7, #68]	; 0x44
 8007d66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d6e:	f7f8 fa2b 	bl	80001c8 <__aeabi_uldivmod>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4611      	mov	r1, r2
 8007d78:	4b3b      	ldr	r3, [pc, #236]	; (8007e68 <UART_SetConfig+0x2d4>)
 8007d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	2264      	movs	r2, #100	; 0x64
 8007d82:	fb02 f303 	mul.w	r3, r2, r3
 8007d86:	1acb      	subs	r3, r1, r3
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d8e:	4b36      	ldr	r3, [pc, #216]	; (8007e68 <UART_SetConfig+0x2d4>)
 8007d90:	fba3 2302 	umull	r2, r3, r3, r2
 8007d94:	095b      	lsrs	r3, r3, #5
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d9c:	441c      	add	r4, r3
 8007d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007da8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007dac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007db0:	4642      	mov	r2, r8
 8007db2:	464b      	mov	r3, r9
 8007db4:	1891      	adds	r1, r2, r2
 8007db6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007db8:	415b      	adcs	r3, r3
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007dc0:	4641      	mov	r1, r8
 8007dc2:	1851      	adds	r1, r2, r1
 8007dc4:	6339      	str	r1, [r7, #48]	; 0x30
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	414b      	adcs	r3, r1
 8007dca:	637b      	str	r3, [r7, #52]	; 0x34
 8007dcc:	f04f 0200 	mov.w	r2, #0
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007dd8:	4659      	mov	r1, fp
 8007dda:	00cb      	lsls	r3, r1, #3
 8007ddc:	4651      	mov	r1, sl
 8007dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007de2:	4651      	mov	r1, sl
 8007de4:	00ca      	lsls	r2, r1, #3
 8007de6:	4610      	mov	r0, r2
 8007de8:	4619      	mov	r1, r3
 8007dea:	4603      	mov	r3, r0
 8007dec:	4642      	mov	r2, r8
 8007dee:	189b      	adds	r3, r3, r2
 8007df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007df4:	464b      	mov	r3, r9
 8007df6:	460a      	mov	r2, r1
 8007df8:	eb42 0303 	adc.w	r3, r2, r3
 8007dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e14:	460b      	mov	r3, r1
 8007e16:	18db      	adds	r3, r3, r3
 8007e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	eb42 0303 	adc.w	r3, r2, r3
 8007e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e2a:	f7f8 f9cd 	bl	80001c8 <__aeabi_uldivmod>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <UART_SetConfig+0x2d4>)
 8007e34:	fba3 1302 	umull	r1, r3, r3, r2
 8007e38:	095b      	lsrs	r3, r3, #5
 8007e3a:	2164      	movs	r1, #100	; 0x64
 8007e3c:	fb01 f303 	mul.w	r3, r1, r3
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	3332      	adds	r3, #50	; 0x32
 8007e46:	4a08      	ldr	r2, [pc, #32]	; (8007e68 <UART_SetConfig+0x2d4>)
 8007e48:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4c:	095b      	lsrs	r3, r3, #5
 8007e4e:	f003 0207 	and.w	r2, r3, #7
 8007e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4422      	add	r2, r4
 8007e5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e5c:	e105      	b.n	800806a <UART_SetConfig+0x4d6>
 8007e5e:	bf00      	nop
 8007e60:	40011000 	.word	0x40011000
 8007e64:	40011400 	.word	0x40011400
 8007e68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e7e:	4642      	mov	r2, r8
 8007e80:	464b      	mov	r3, r9
 8007e82:	1891      	adds	r1, r2, r2
 8007e84:	6239      	str	r1, [r7, #32]
 8007e86:	415b      	adcs	r3, r3
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
 8007e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e8e:	4641      	mov	r1, r8
 8007e90:	1854      	adds	r4, r2, r1
 8007e92:	4649      	mov	r1, r9
 8007e94:	eb43 0501 	adc.w	r5, r3, r1
 8007e98:	f04f 0200 	mov.w	r2, #0
 8007e9c:	f04f 0300 	mov.w	r3, #0
 8007ea0:	00eb      	lsls	r3, r5, #3
 8007ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ea6:	00e2      	lsls	r2, r4, #3
 8007ea8:	4614      	mov	r4, r2
 8007eaa:	461d      	mov	r5, r3
 8007eac:	4643      	mov	r3, r8
 8007eae:	18e3      	adds	r3, r4, r3
 8007eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007eb4:	464b      	mov	r3, r9
 8007eb6:	eb45 0303 	adc.w	r3, r5, r3
 8007eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007eca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ece:	f04f 0200 	mov.w	r2, #0
 8007ed2:	f04f 0300 	mov.w	r3, #0
 8007ed6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007eda:	4629      	mov	r1, r5
 8007edc:	008b      	lsls	r3, r1, #2
 8007ede:	4621      	mov	r1, r4
 8007ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	008a      	lsls	r2, r1, #2
 8007ee8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007eec:	f7f8 f96c 	bl	80001c8 <__aeabi_uldivmod>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4b60      	ldr	r3, [pc, #384]	; (8008078 <UART_SetConfig+0x4e4>)
 8007ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8007efa:	095b      	lsrs	r3, r3, #5
 8007efc:	011c      	lsls	r4, r3, #4
 8007efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f10:	4642      	mov	r2, r8
 8007f12:	464b      	mov	r3, r9
 8007f14:	1891      	adds	r1, r2, r2
 8007f16:	61b9      	str	r1, [r7, #24]
 8007f18:	415b      	adcs	r3, r3
 8007f1a:	61fb      	str	r3, [r7, #28]
 8007f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f20:	4641      	mov	r1, r8
 8007f22:	1851      	adds	r1, r2, r1
 8007f24:	6139      	str	r1, [r7, #16]
 8007f26:	4649      	mov	r1, r9
 8007f28:	414b      	adcs	r3, r1
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	f04f 0300 	mov.w	r3, #0
 8007f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f38:	4659      	mov	r1, fp
 8007f3a:	00cb      	lsls	r3, r1, #3
 8007f3c:	4651      	mov	r1, sl
 8007f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f42:	4651      	mov	r1, sl
 8007f44:	00ca      	lsls	r2, r1, #3
 8007f46:	4610      	mov	r0, r2
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	4642      	mov	r2, r8
 8007f4e:	189b      	adds	r3, r3, r2
 8007f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f54:	464b      	mov	r3, r9
 8007f56:	460a      	mov	r2, r1
 8007f58:	eb42 0303 	adc.w	r3, r2, r3
 8007f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	f04f 0300 	mov.w	r3, #0
 8007f74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f78:	4649      	mov	r1, r9
 8007f7a:	008b      	lsls	r3, r1, #2
 8007f7c:	4641      	mov	r1, r8
 8007f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f82:	4641      	mov	r1, r8
 8007f84:	008a      	lsls	r2, r1, #2
 8007f86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f8a:	f7f8 f91d 	bl	80001c8 <__aeabi_uldivmod>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4b39      	ldr	r3, [pc, #228]	; (8008078 <UART_SetConfig+0x4e4>)
 8007f94:	fba3 1302 	umull	r1, r3, r3, r2
 8007f98:	095b      	lsrs	r3, r3, #5
 8007f9a:	2164      	movs	r1, #100	; 0x64
 8007f9c:	fb01 f303 	mul.w	r3, r1, r3
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	011b      	lsls	r3, r3, #4
 8007fa4:	3332      	adds	r3, #50	; 0x32
 8007fa6:	4a34      	ldr	r2, [pc, #208]	; (8008078 <UART_SetConfig+0x4e4>)
 8007fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fac:	095b      	lsrs	r3, r3, #5
 8007fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fb2:	441c      	add	r4, r3
 8007fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fb8:	2200      	movs	r2, #0
 8007fba:	673b      	str	r3, [r7, #112]	; 0x70
 8007fbc:	677a      	str	r2, [r7, #116]	; 0x74
 8007fbe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007fc2:	4642      	mov	r2, r8
 8007fc4:	464b      	mov	r3, r9
 8007fc6:	1891      	adds	r1, r2, r2
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	415b      	adcs	r3, r3
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fd2:	4641      	mov	r1, r8
 8007fd4:	1851      	adds	r1, r2, r1
 8007fd6:	6039      	str	r1, [r7, #0]
 8007fd8:	4649      	mov	r1, r9
 8007fda:	414b      	adcs	r3, r1
 8007fdc:	607b      	str	r3, [r7, #4]
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	f04f 0300 	mov.w	r3, #0
 8007fe6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fea:	4659      	mov	r1, fp
 8007fec:	00cb      	lsls	r3, r1, #3
 8007fee:	4651      	mov	r1, sl
 8007ff0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ff4:	4651      	mov	r1, sl
 8007ff6:	00ca      	lsls	r2, r1, #3
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	4642      	mov	r2, r8
 8008000:	189b      	adds	r3, r3, r2
 8008002:	66bb      	str	r3, [r7, #104]	; 0x68
 8008004:	464b      	mov	r3, r9
 8008006:	460a      	mov	r2, r1
 8008008:	eb42 0303 	adc.w	r3, r2, r3
 800800c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800800e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	663b      	str	r3, [r7, #96]	; 0x60
 8008018:	667a      	str	r2, [r7, #100]	; 0x64
 800801a:	f04f 0200 	mov.w	r2, #0
 800801e:	f04f 0300 	mov.w	r3, #0
 8008022:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008026:	4649      	mov	r1, r9
 8008028:	008b      	lsls	r3, r1, #2
 800802a:	4641      	mov	r1, r8
 800802c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008030:	4641      	mov	r1, r8
 8008032:	008a      	lsls	r2, r1, #2
 8008034:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008038:	f7f8 f8c6 	bl	80001c8 <__aeabi_uldivmod>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4b0d      	ldr	r3, [pc, #52]	; (8008078 <UART_SetConfig+0x4e4>)
 8008042:	fba3 1302 	umull	r1, r3, r3, r2
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	2164      	movs	r1, #100	; 0x64
 800804a:	fb01 f303 	mul.w	r3, r1, r3
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	3332      	adds	r3, #50	; 0x32
 8008054:	4a08      	ldr	r2, [pc, #32]	; (8008078 <UART_SetConfig+0x4e4>)
 8008056:	fba2 2303 	umull	r2, r3, r2, r3
 800805a:	095b      	lsrs	r3, r3, #5
 800805c:	f003 020f 	and.w	r2, r3, #15
 8008060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4422      	add	r2, r4
 8008068:	609a      	str	r2, [r3, #8]
}
 800806a:	bf00      	nop
 800806c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008070:	46bd      	mov	sp, r7
 8008072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008076:	bf00      	nop
 8008078:	51eb851f 	.word	0x51eb851f

0800807c <__libc_init_array>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	4d0d      	ldr	r5, [pc, #52]	; (80080b4 <__libc_init_array+0x38>)
 8008080:	4c0d      	ldr	r4, [pc, #52]	; (80080b8 <__libc_init_array+0x3c>)
 8008082:	1b64      	subs	r4, r4, r5
 8008084:	10a4      	asrs	r4, r4, #2
 8008086:	2600      	movs	r6, #0
 8008088:	42a6      	cmp	r6, r4
 800808a:	d109      	bne.n	80080a0 <__libc_init_array+0x24>
 800808c:	4d0b      	ldr	r5, [pc, #44]	; (80080bc <__libc_init_array+0x40>)
 800808e:	4c0c      	ldr	r4, [pc, #48]	; (80080c0 <__libc_init_array+0x44>)
 8008090:	f000 f87c 	bl	800818c <_init>
 8008094:	1b64      	subs	r4, r4, r5
 8008096:	10a4      	asrs	r4, r4, #2
 8008098:	2600      	movs	r6, #0
 800809a:	42a6      	cmp	r6, r4
 800809c:	d105      	bne.n	80080aa <__libc_init_array+0x2e>
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a4:	4798      	blx	r3
 80080a6:	3601      	adds	r6, #1
 80080a8:	e7ee      	b.n	8008088 <__libc_init_array+0xc>
 80080aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ae:	4798      	blx	r3
 80080b0:	3601      	adds	r6, #1
 80080b2:	e7f2      	b.n	800809a <__libc_init_array+0x1e>
 80080b4:	0800a2bc 	.word	0x0800a2bc
 80080b8:	0800a2bc 	.word	0x0800a2bc
 80080bc:	0800a2bc 	.word	0x0800a2bc
 80080c0:	0800a2c0 	.word	0x0800a2c0

080080c4 <__itoa>:
 80080c4:	1e93      	subs	r3, r2, #2
 80080c6:	2b22      	cmp	r3, #34	; 0x22
 80080c8:	b510      	push	{r4, lr}
 80080ca:	460c      	mov	r4, r1
 80080cc:	d904      	bls.n	80080d8 <__itoa+0x14>
 80080ce:	2300      	movs	r3, #0
 80080d0:	700b      	strb	r3, [r1, #0]
 80080d2:	461c      	mov	r4, r3
 80080d4:	4620      	mov	r0, r4
 80080d6:	bd10      	pop	{r4, pc}
 80080d8:	2a0a      	cmp	r2, #10
 80080da:	d109      	bne.n	80080f0 <__itoa+0x2c>
 80080dc:	2800      	cmp	r0, #0
 80080de:	da07      	bge.n	80080f0 <__itoa+0x2c>
 80080e0:	232d      	movs	r3, #45	; 0x2d
 80080e2:	700b      	strb	r3, [r1, #0]
 80080e4:	4240      	negs	r0, r0
 80080e6:	2101      	movs	r1, #1
 80080e8:	4421      	add	r1, r4
 80080ea:	f000 f80d 	bl	8008108 <__utoa>
 80080ee:	e7f1      	b.n	80080d4 <__itoa+0x10>
 80080f0:	2100      	movs	r1, #0
 80080f2:	e7f9      	b.n	80080e8 <__itoa+0x24>

080080f4 <itoa>:
 80080f4:	f7ff bfe6 	b.w	80080c4 <__itoa>

080080f8 <memset>:
 80080f8:	4402      	add	r2, r0
 80080fa:	4603      	mov	r3, r0
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d100      	bne.n	8008102 <memset+0xa>
 8008100:	4770      	bx	lr
 8008102:	f803 1b01 	strb.w	r1, [r3], #1
 8008106:	e7f9      	b.n	80080fc <memset+0x4>

08008108 <__utoa>:
 8008108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800810a:	4c1f      	ldr	r4, [pc, #124]	; (8008188 <__utoa+0x80>)
 800810c:	b08b      	sub	sp, #44	; 0x2c
 800810e:	4605      	mov	r5, r0
 8008110:	460b      	mov	r3, r1
 8008112:	466e      	mov	r6, sp
 8008114:	f104 0c20 	add.w	ip, r4, #32
 8008118:	6820      	ldr	r0, [r4, #0]
 800811a:	6861      	ldr	r1, [r4, #4]
 800811c:	4637      	mov	r7, r6
 800811e:	c703      	stmia	r7!, {r0, r1}
 8008120:	3408      	adds	r4, #8
 8008122:	4564      	cmp	r4, ip
 8008124:	463e      	mov	r6, r7
 8008126:	d1f7      	bne.n	8008118 <__utoa+0x10>
 8008128:	7921      	ldrb	r1, [r4, #4]
 800812a:	7139      	strb	r1, [r7, #4]
 800812c:	1e91      	subs	r1, r2, #2
 800812e:	6820      	ldr	r0, [r4, #0]
 8008130:	6038      	str	r0, [r7, #0]
 8008132:	2922      	cmp	r1, #34	; 0x22
 8008134:	f04f 0100 	mov.w	r1, #0
 8008138:	d904      	bls.n	8008144 <__utoa+0x3c>
 800813a:	7019      	strb	r1, [r3, #0]
 800813c:	460b      	mov	r3, r1
 800813e:	4618      	mov	r0, r3
 8008140:	b00b      	add	sp, #44	; 0x2c
 8008142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008144:	1e58      	subs	r0, r3, #1
 8008146:	4684      	mov	ip, r0
 8008148:	fbb5 f7f2 	udiv	r7, r5, r2
 800814c:	fb02 5617 	mls	r6, r2, r7, r5
 8008150:	3628      	adds	r6, #40	; 0x28
 8008152:	446e      	add	r6, sp
 8008154:	460c      	mov	r4, r1
 8008156:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800815a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800815e:	462e      	mov	r6, r5
 8008160:	42b2      	cmp	r2, r6
 8008162:	f101 0101 	add.w	r1, r1, #1
 8008166:	463d      	mov	r5, r7
 8008168:	d9ee      	bls.n	8008148 <__utoa+0x40>
 800816a:	2200      	movs	r2, #0
 800816c:	545a      	strb	r2, [r3, r1]
 800816e:	1919      	adds	r1, r3, r4
 8008170:	1aa5      	subs	r5, r4, r2
 8008172:	42aa      	cmp	r2, r5
 8008174:	dae3      	bge.n	800813e <__utoa+0x36>
 8008176:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800817a:	780e      	ldrb	r6, [r1, #0]
 800817c:	7006      	strb	r6, [r0, #0]
 800817e:	3201      	adds	r2, #1
 8008180:	f801 5901 	strb.w	r5, [r1], #-1
 8008184:	e7f4      	b.n	8008170 <__utoa+0x68>
 8008186:	bf00      	nop
 8008188:	0800a28c 	.word	0x0800a28c

0800818c <_init>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	bf00      	nop
 8008190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008192:	bc08      	pop	{r3}
 8008194:	469e      	mov	lr, r3
 8008196:	4770      	bx	lr

08008198 <_fini>:
 8008198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819a:	bf00      	nop
 800819c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819e:	bc08      	pop	{r3}
 80081a0:	469e      	mov	lr, r3
 80081a2:	4770      	bx	lr
