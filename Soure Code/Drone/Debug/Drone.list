
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b91c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002334  0800bab0  0800bab0  0001bab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dde4  0800dde4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800dde4  0800dde4  0001dde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddec  0800ddec  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddec  0800ddec  0001ddec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddf0  0800ddf0  0001ddf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ddf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00000d68  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000f54  20000f54  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019851  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b64  00000000  00000000  00039a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  0003d5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001468  00000000  00000000  0003ebe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005b98  00000000  00000000  00040048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d559  00000000  00000000  00045be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d72d9  00000000  00000000  00063139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a412  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006cc4  00000000  00000000  0013a464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba94 	.word	0x0800ba94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800ba94 	.word	0x0800ba94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60ba      	str	r2, [r7, #8]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	81fb      	strh	r3, [r7, #14]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	81bb      	strh	r3, [r7, #12]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec6:	3307      	adds	r3, #7
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da00      	bge.n	8000ece <SSD1306_DrawBitmap+0x22>
 8000ecc:	3307      	adds	r3, #7
 8000ece:	10db      	asrs	r3, r3, #3
 8000ed0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	82bb      	strh	r3, [r7, #20]
 8000eda:	e044      	b.n	8000f66 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	827b      	strh	r3, [r7, #18]
 8000ee0:	e02f      	b.n	8000f42 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000ee2:	8a7b      	ldrh	r3, [r7, #18]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	75fb      	strb	r3, [r7, #23]
 8000ef2:	e012      	b.n	8000f1a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000ef4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ef8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000efc:	fb03 f202 	mul.w	r2, r3, r2
 8000f00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	da00      	bge.n	8000f0a <SSD1306_DrawBitmap+0x5e>
 8000f08:	3307      	adds	r3, #7
 8000f0a:	10db      	asrs	r3, r3, #3
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4413      	add	r3, r2
 8000f10:	461a      	mov	r2, r3
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	da09      	bge.n	8000f36 <SSD1306_DrawBitmap+0x8a>
 8000f22:	89fa      	ldrh	r2, [r7, #14]
 8000f24:	8a7b      	ldrh	r3, [r7, #18]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	89b9      	ldrh	r1, [r7, #12]
 8000f2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f92d 	bl	8001190 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000f36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	827b      	strh	r3, [r7, #18]
 8000f42:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	dbc9      	blt.n	8000ee2 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000f4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	3301      	adds	r3, #1
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	82bb      	strh	r3, [r7, #20]
 8000f5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	81bb      	strh	r3, [r7, #12]
 8000f66:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000f6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	dbb4      	blt.n	8000edc <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f82:	f000 fa29 	bl	80013d8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f86:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2178      	movs	r1, #120	; 0x78
 8000f8e:	485b      	ldr	r0, [pc, #364]	; (80010fc <SSD1306_Init+0x180>)
 8000f90:	f004 feb2 	bl	8005cf8 <HAL_I2C_IsDeviceReady>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e0a9      	b.n	80010f2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000f9e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000fa2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fa4:	e002      	b.n	8000fac <SSD1306_Init+0x30>
		p--;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f9      	bne.n	8000fa6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000fb2:	22ae      	movs	r2, #174	; 0xae
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2078      	movs	r0, #120	; 0x78
 8000fb8:	f000 fa8a 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000fbc:	2220      	movs	r2, #32
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2078      	movs	r0, #120	; 0x78
 8000fc2:	f000 fa85 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2078      	movs	r0, #120	; 0x78
 8000fcc:	f000 fa80 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fd0:	22b0      	movs	r2, #176	; 0xb0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2078      	movs	r0, #120	; 0x78
 8000fd6:	f000 fa7b 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000fda:	22c8      	movs	r2, #200	; 0xc8
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2078      	movs	r0, #120	; 0x78
 8000fe0:	f000 fa76 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2078      	movs	r0, #120	; 0x78
 8000fea:	f000 fa71 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000fee:	2210      	movs	r2, #16
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2078      	movs	r0, #120	; 0x78
 8000ff4:	f000 fa6c 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ff8:	2240      	movs	r2, #64	; 0x40
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2078      	movs	r0, #120	; 0x78
 8000ffe:	f000 fa67 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001002:	2281      	movs	r2, #129	; 0x81
 8001004:	2100      	movs	r1, #0
 8001006:	2078      	movs	r0, #120	; 0x78
 8001008:	f000 fa62 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800100c:	22ff      	movs	r2, #255	; 0xff
 800100e:	2100      	movs	r1, #0
 8001010:	2078      	movs	r0, #120	; 0x78
 8001012:	f000 fa5d 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001016:	22a1      	movs	r2, #161	; 0xa1
 8001018:	2100      	movs	r1, #0
 800101a:	2078      	movs	r0, #120	; 0x78
 800101c:	f000 fa58 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001020:	22a6      	movs	r2, #166	; 0xa6
 8001022:	2100      	movs	r1, #0
 8001024:	2078      	movs	r0, #120	; 0x78
 8001026:	f000 fa53 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800102a:	22a8      	movs	r2, #168	; 0xa8
 800102c:	2100      	movs	r1, #0
 800102e:	2078      	movs	r0, #120	; 0x78
 8001030:	f000 fa4e 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001034:	223f      	movs	r2, #63	; 0x3f
 8001036:	2100      	movs	r1, #0
 8001038:	2078      	movs	r0, #120	; 0x78
 800103a:	f000 fa49 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800103e:	22a4      	movs	r2, #164	; 0xa4
 8001040:	2100      	movs	r1, #0
 8001042:	2078      	movs	r0, #120	; 0x78
 8001044:	f000 fa44 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001048:	22d3      	movs	r2, #211	; 0xd3
 800104a:	2100      	movs	r1, #0
 800104c:	2078      	movs	r0, #120	; 0x78
 800104e:	f000 fa3f 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2078      	movs	r0, #120	; 0x78
 8001058:	f000 fa3a 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800105c:	22d5      	movs	r2, #213	; 0xd5
 800105e:	2100      	movs	r1, #0
 8001060:	2078      	movs	r0, #120	; 0x78
 8001062:	f000 fa35 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001066:	22f0      	movs	r2, #240	; 0xf0
 8001068:	2100      	movs	r1, #0
 800106a:	2078      	movs	r0, #120	; 0x78
 800106c:	f000 fa30 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001070:	22d9      	movs	r2, #217	; 0xd9
 8001072:	2100      	movs	r1, #0
 8001074:	2078      	movs	r0, #120	; 0x78
 8001076:	f000 fa2b 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800107a:	2222      	movs	r2, #34	; 0x22
 800107c:	2100      	movs	r1, #0
 800107e:	2078      	movs	r0, #120	; 0x78
 8001080:	f000 fa26 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001084:	22da      	movs	r2, #218	; 0xda
 8001086:	2100      	movs	r1, #0
 8001088:	2078      	movs	r0, #120	; 0x78
 800108a:	f000 fa21 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800108e:	2212      	movs	r2, #18
 8001090:	2100      	movs	r1, #0
 8001092:	2078      	movs	r0, #120	; 0x78
 8001094:	f000 fa1c 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001098:	22db      	movs	r2, #219	; 0xdb
 800109a:	2100      	movs	r1, #0
 800109c:	2078      	movs	r0, #120	; 0x78
 800109e:	f000 fa17 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80010a2:	2220      	movs	r2, #32
 80010a4:	2100      	movs	r1, #0
 80010a6:	2078      	movs	r0, #120	; 0x78
 80010a8:	f000 fa12 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80010ac:	228d      	movs	r2, #141	; 0x8d
 80010ae:	2100      	movs	r1, #0
 80010b0:	2078      	movs	r0, #120	; 0x78
 80010b2:	f000 fa0d 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80010b6:	2214      	movs	r2, #20
 80010b8:	2100      	movs	r1, #0
 80010ba:	2078      	movs	r0, #120	; 0x78
 80010bc:	f000 fa08 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80010c0:	22af      	movs	r2, #175	; 0xaf
 80010c2:	2100      	movs	r1, #0
 80010c4:	2078      	movs	r0, #120	; 0x78
 80010c6:	f000 fa03 	bl	80014d0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80010ca:	222e      	movs	r2, #46	; 0x2e
 80010cc:	2100      	movs	r1, #0
 80010ce:	2078      	movs	r0, #120	; 0x78
 80010d0:	f000 f9fe 	bl	80014d0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 f843 	bl	8001160 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80010da:	f000 f813 	bl	8001104 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <SSD1306_Init+0x184>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <SSD1306_Init+0x184>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SSD1306_Init+0x184>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80010f0:	2301      	movs	r3, #1
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000068c 	.word	0x2000068c
 8001100:	20000608 	.word	0x20000608

08001104 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800110a:	2300      	movs	r3, #0
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	e01d      	b.n	800114c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	3b50      	subs	r3, #80	; 0x50
 8001114:	b2db      	uxtb	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	2100      	movs	r1, #0
 800111a:	2078      	movs	r0, #120	; 0x78
 800111c:	f000 f9d8 	bl	80014d0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2078      	movs	r0, #120	; 0x78
 8001126:	f000 f9d3 	bl	80014d0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800112a:	2210      	movs	r2, #16
 800112c:	2100      	movs	r1, #0
 800112e:	2078      	movs	r0, #120	; 0x78
 8001130:	f000 f9ce 	bl	80014d0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	01db      	lsls	r3, r3, #7
 8001138:	4a08      	ldr	r2, [pc, #32]	; (800115c <SSD1306_UpdateScreen+0x58>)
 800113a:	441a      	add	r2, r3
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	2140      	movs	r1, #64	; 0x40
 8001140:	2078      	movs	r0, #120	; 0x78
 8001142:	f000 f95f 	bl	8001404 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	3301      	adds	r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b07      	cmp	r3, #7
 8001150:	d9de      	bls.n	8001110 <SSD1306_UpdateScreen+0xc>
	}
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000208 	.word	0x20000208

08001160 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <SSD1306_Fill+0x14>
 8001170:	2300      	movs	r3, #0
 8001172:	e000      	b.n	8001176 <SSD1306_Fill+0x16>
 8001174:	23ff      	movs	r3, #255	; 0xff
 8001176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117a:	4619      	mov	r1, r3
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <SSD1306_Fill+0x2c>)
 800117e:	f007 fdab 	bl	8008cd8 <memset>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000208 	.word	0x20000208

08001190 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
 800119a:	460b      	mov	r3, r1
 800119c:	80bb      	strh	r3, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	70fb      	strb	r3, [r7, #3]
	if (
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	2b7f      	cmp	r3, #127	; 0x7f
 80011a6:	d848      	bhi.n	800123a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	2b3f      	cmp	r3, #63	; 0x3f
 80011ac:	d845      	bhi.n	800123a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <SSD1306_DrawPixel+0xb8>)
 80011b0:	791b      	ldrb	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bf0c      	ite	eq
 80011bc:	2301      	moveq	r3, #1
 80011be:	2300      	movne	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d11a      	bne.n	8001200 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011ca:	88fa      	ldrh	r2, [r7, #6]
 80011cc:	88bb      	ldrh	r3, [r7, #4]
 80011ce:	08db      	lsrs	r3, r3, #3
 80011d0:	b298      	uxth	r0, r3
 80011d2:	4603      	mov	r3, r0
 80011d4:	01db      	lsls	r3, r3, #7
 80011d6:	4413      	add	r3, r2
 80011d8:	4a1c      	ldr	r2, [pc, #112]	; (800124c <SSD1306_DrawPixel+0xbc>)
 80011da:	5cd3      	ldrb	r3, [r2, r3]
 80011dc:	b25a      	sxtb	r2, r3
 80011de:	88bb      	ldrh	r3, [r7, #4]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	2101      	movs	r1, #1
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b259      	sxtb	r1, r3
 80011f0:	88fa      	ldrh	r2, [r7, #6]
 80011f2:	4603      	mov	r3, r0
 80011f4:	01db      	lsls	r3, r3, #7
 80011f6:	4413      	add	r3, r2
 80011f8:	b2c9      	uxtb	r1, r1
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <SSD1306_DrawPixel+0xbc>)
 80011fc:	54d1      	strb	r1, [r2, r3]
 80011fe:	e01d      	b.n	800123c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001200:	88fa      	ldrh	r2, [r7, #6]
 8001202:	88bb      	ldrh	r3, [r7, #4]
 8001204:	08db      	lsrs	r3, r3, #3
 8001206:	b298      	uxth	r0, r3
 8001208:	4603      	mov	r3, r0
 800120a:	01db      	lsls	r3, r3, #7
 800120c:	4413      	add	r3, r2
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <SSD1306_DrawPixel+0xbc>)
 8001210:	5cd3      	ldrb	r3, [r2, r3]
 8001212:	b25a      	sxtb	r2, r3
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	2101      	movs	r1, #1
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	b25b      	sxtb	r3, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	b25b      	sxtb	r3, r3
 8001226:	4013      	ands	r3, r2
 8001228:	b259      	sxtb	r1, r3
 800122a:	88fa      	ldrh	r2, [r7, #6]
 800122c:	4603      	mov	r3, r0
 800122e:	01db      	lsls	r3, r3, #7
 8001230:	4413      	add	r3, r2
 8001232:	b2c9      	uxtb	r1, r1
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <SSD1306_DrawPixel+0xbc>)
 8001236:	54d1      	strb	r1, [r2, r3]
 8001238:	e000      	b.n	800123c <SSD1306_DrawPixel+0xac>
		return;
 800123a:	bf00      	nop
	}
}
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000608 	.word	0x20000608
 800124c:	20000208 	.word	0x20000208

08001250 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	80fb      	strh	r3, [r7, #6]
 800125c:	4613      	mov	r3, r2
 800125e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001260:	4a05      	ldr	r2, [pc, #20]	; (8001278 <SSD1306_GotoXY+0x28>)
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <SSD1306_GotoXY+0x28>)
 8001268:	88bb      	ldrh	r3, [r7, #4]
 800126a:	8053      	strh	r3, [r2, #2]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	20000608 	.word	0x20000608

0800127c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	4613      	mov	r3, r2
 800128a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800128c:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <SSD1306_Putc+0xfc>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
	if (
 8001298:	2b7f      	cmp	r3, #127	; 0x7f
 800129a:	dc07      	bgt.n	80012ac <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800129c:	4b36      	ldr	r3, [pc, #216]	; (8001378 <SSD1306_Putc+0xfc>)
 800129e:	885b      	ldrh	r3, [r3, #2]
 80012a0:	461a      	mov	r2, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	785b      	ldrb	r3, [r3, #1]
 80012a6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012a8:	2b3f      	cmp	r3, #63	; 0x3f
 80012aa:	dd01      	ble.n	80012b0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e05e      	b.n	800136e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e04b      	b.n	800134e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	3b20      	subs	r3, #32
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	7849      	ldrb	r1, [r1, #1]
 80012c2:	fb01 f303 	mul.w	r3, r1, r3
 80012c6:	4619      	mov	r1, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	440b      	add	r3, r1
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	e030      	b.n	800133c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d010      	beq.n	800130c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <SSD1306_Putc+0xfc>)
 80012ec:	881a      	ldrh	r2, [r3, #0]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	b298      	uxth	r0, r3
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <SSD1306_Putc+0xfc>)
 80012f8:	885a      	ldrh	r2, [r3, #2]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4413      	add	r3, r2
 8001300:	b29b      	uxth	r3, r3
 8001302:	79ba      	ldrb	r2, [r7, #6]
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff ff43 	bl	8001190 <SSD1306_DrawPixel>
 800130a:	e014      	b.n	8001336 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <SSD1306_Putc+0xfc>)
 800130e:	881a      	ldrh	r2, [r3, #0]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	b29b      	uxth	r3, r3
 8001314:	4413      	add	r3, r2
 8001316:	b298      	uxth	r0, r3
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <SSD1306_Putc+0xfc>)
 800131a:	885a      	ldrh	r2, [r3, #2]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	b299      	uxth	r1, r3
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	f7ff ff2d 	bl	8001190 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	3301      	adds	r3, #1
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4293      	cmp	r3, r2
 8001346:	d3c8      	bcc.n	80012da <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	785b      	ldrb	r3, [r3, #1]
 8001352:	461a      	mov	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	4293      	cmp	r3, r2
 8001358:	d3ad      	bcc.n	80012b6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <SSD1306_Putc+0xfc>)
 800135c:	881a      	ldrh	r2, [r3, #0]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b29b      	uxth	r3, r3
 8001364:	4413      	add	r3, r2
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <SSD1306_Putc+0xfc>)
 800136a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800136c:	79fb      	ldrb	r3, [r7, #7]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000608 	.word	0x20000608

0800137c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	4613      	mov	r3, r2
 8001388:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800138a:	e012      	b.n	80013b2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff71 	bl	800127c <SSD1306_Putc>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d002      	beq.n	80013ac <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	e008      	b.n	80013be <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1e8      	bne.n	800138c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	781b      	ldrb	r3, [r3, #0]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fec8 	bl	8001160 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80013d0:	f7ff fe98 	bl	8001104 <SSD1306_UpdateScreen>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <ssd1306_I2C_Init+0x28>)
 80013e0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013e2:	e002      	b.n	80013ea <ssd1306_I2C_Init+0x12>
		p--;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f9      	bne.n	80013e4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	0003d090 	.word	0x0003d090

08001404 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b0c7      	sub	sp, #284	; 0x11c
 8001408:	af02      	add	r7, sp, #8
 800140a:	4604      	mov	r4, r0
 800140c:	4608      	mov	r0, r1
 800140e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001412:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001416:	600a      	str	r2, [r1, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800141e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001422:	4622      	mov	r2, r4
 8001424:	701a      	strb	r2, [r3, #0]
 8001426:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800142a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800142e:	4602      	mov	r2, r0
 8001430:	701a      	strb	r2, [r3, #0]
 8001432:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001436:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800143a:	460a      	mov	r2, r1
 800143c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800143e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001446:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800144a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800144e:	7812      	ldrb	r2, [r2, #0]
 8001450:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001452:	2300      	movs	r3, #0
 8001454:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001458:	e015      	b.n	8001486 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800145a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800145e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001462:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	441a      	add	r2, r3
 800146a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800146e:	3301      	adds	r3, #1
 8001470:	7811      	ldrb	r1, [r2, #0]
 8001472:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001476:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800147a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800147c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001480:	3301      	adds	r3, #1
 8001482:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001486:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800148a:	b29b      	uxth	r3, r3
 800148c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001490:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001494:	8812      	ldrh	r2, [r2, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d8df      	bhi.n	800145a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&SSD1306_I2C, address, dt, count+1, 10);
 800149a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800149e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b299      	uxth	r1, r3
 80014a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	f107 020c 	add.w	r2, r7, #12
 80014b8:	200a      	movs	r0, #10
 80014ba:	9000      	str	r0, [sp, #0]
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <ssd1306_I2C_WriteMulti+0xc8>)
 80014be:	f003 fffd 	bl	80054bc <HAL_I2C_Master_Transmit>
}
 80014c2:	bf00      	nop
 80014c4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	2000068c 	.word	0x2000068c

080014d0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	460b      	mov	r3, r1
 80014dc:	71bb      	strb	r3, [r7, #6]
 80014de:	4613      	mov	r3, r2
 80014e0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80014e2:	79bb      	ldrb	r3, [r7, #6]
 80014e4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80014e6:	797b      	ldrb	r3, [r7, #5]
 80014e8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&SSD1306_I2C, address, dt, 2, 10);
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	b299      	uxth	r1, r3
 80014ee:	f107 020c 	add.w	r2, r7, #12
 80014f2:	230a      	movs	r3, #10
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2302      	movs	r3, #2
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <ssd1306_I2C_Write+0x38>)
 80014fa:	f003 ffdf 	bl	80054bc <HAL_I2C_Master_Transmit>
}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000068c 	.word	0x2000068c

0800150c <find_uart_dev_instant>:
		}
	}
	return -1;
}

static int find_uart_dev_instant(UART_HandleTypeDef *huart){
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	e00e      	b.n	8001538 <find_uart_dev_instant+0x2c>
		if(uart_drvs[i]->huart->Instance == huart->Instance){
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <find_uart_dev_instant+0x44>)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d101      	bne.n	8001532 <find_uart_dev_instant+0x26>
			return i;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	e007      	b.n	8001542 <find_uart_dev_instant+0x36>
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3301      	adds	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b02      	cmp	r3, #2
 800153c:	dded      	ble.n	800151a <find_uart_dev_instant+0xe>
		}
	}
	return -1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000610 	.word	0x20000610

08001554 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	int idx = find_uart_dev_instant(huart);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ffd5 	bl	800150c <find_uart_dev_instant>
 8001562:	60f8      	str	r0, [r7, #12]
	uart_drvs[idx]->tx_completed = true;
 8001564:	4a05      	ldr	r2, [pc, #20]	; (800157c <HAL_UART_TxCpltCallback+0x28>)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000610 	.word	0x20000610

08001580 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
	HAL_UART_RxCpltCallback(huart);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

	int idx = find_uart_dev_instant(huart);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ffbf 	bl	800150c <find_uart_dev_instant>
 800158e:	6138      	str	r0, [r7, #16]
	uart_drv_t *uart_drv = uart_drvs[idx];
 8001590:	4a20      	ldr	r2, [pc, #128]	; (8001614 <HAL_UART_RxCpltCallback+0x94>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001598:	60fb      	str	r3, [r7, #12]

	uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	817b      	strh	r3, [r7, #10]
	uint16_t length =  sizeof(uart_drv->rx_dma_buffer) - currCNDTR;
 80015a4:	897b      	ldrh	r3, [r7, #10]
 80015a6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80015aa:	813b      	strh	r3, [r7, #8]

	/* Copy and process new data */
	for(uint16_t i=0; i<length; i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	82fb      	strh	r3, [r7, #22]
 80015b0:	e00d      	b.n	80015ce <HAL_UART_RxCpltCallback+0x4e>
	{
		cbuf_put(&uart_drv->rx_cbuf_handle, uart_drv->rx_dma_buffer[i]);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f203 601c 	addw	r0, r3, #1564	; 0x61c
 80015b8:	8afb      	ldrh	r3, [r7, #22]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80015c2:	4619      	mov	r1, r3
 80015c4:	f000 f828 	bl	8001618 <cbuf_put>
	for(uint16_t i=0; i<length; i++)
 80015c8:	8afb      	ldrh	r3, [r7, #22]
 80015ca:	3301      	adds	r3, #1
 80015cc:	82fb      	strh	r3, [r7, #22]
 80015ce:	8afa      	ldrh	r2, [r7, #22]
 80015d0:	893b      	ldrh	r3, [r7, #8]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3ed      	bcc.n	80015b2 <HAL_UART_RxCpltCallback+0x32>
	}

	__HAL_DMA_DISABLE(huart->hdmarx);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
	huart->hdmarx->Instance->NDTR = sizeof(uart_drv->rx_dma_buffer);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f4:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(huart->hdmarx);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0201 	orr.w	r2, r2, #1
 8001608:	601a      	str	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000610 	.word	0x20000610

08001618 <cbuf_put>:
    cbuf->tail = 0;
    cbuf->full = false;
}

int cbuf_put(circular_buf_t* cbuf, char data)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
    if(!cbuf_full(cbuf))
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f82c 	bl	8001682 <cbuf_full>
 800162a:	4603      	mov	r3, r0
 800162c:	f083 0301 	eor.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d01f      	beq.n	8001676 <cbuf_put+0x5e>
    {
        cbuf->buffer[cbuf->head] = data;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	4413      	add	r3, r2
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	701a      	strb	r2, [r3, #0]
        cbuf->head = (cbuf->head + 1) % cbuf->size;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	3301      	adds	r3, #1
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6852      	ldr	r2, [r2, #4]
 800164e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001652:	fb01 f202 	mul.w	r2, r1, r2
 8001656:	1a9a      	subs	r2, r3, r2
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	609a      	str	r2, [r3, #8]
        cbuf->full = (cbuf->head == cbuf->tail);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	bf0c      	ite	eq
 8001668:	2301      	moveq	r3, #1
 800166a:	2300      	movne	r3, #0
 800166c:	b2da      	uxtb	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	741a      	strb	r2, [r3, #16]
        return 0;
 8001672:	2300      	movs	r3, #0
 8001674:	e001      	b.n	800167a <cbuf_put+0x62>
    }
    return -1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <cbuf_full>:
{
    return (!cbuf->full && (cbuf->head == cbuf->tail));
}

bool cbuf_full(circular_buf_t *cbuf)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
    return cbuf->full;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7c1b      	ldrb	r3, [r3, #16]
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <bno055_read>:
#define TEMPERATURE_UNITS				 		(0b00 << 4)
#elif BNO055_TEMPERATURE_UNITS == 1
#define TEMPERATURE_UNITS				 		(0b01 << 4)
#endif

static int bno055_read(uint8_t addr, uint8_t *value){
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af04      	add	r7, sp, #16
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK){
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	2364      	movs	r3, #100	; 0x64
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	2150      	movs	r1, #80	; 0x50
 80016bc:	4808      	ldr	r0, [pc, #32]	; (80016e0 <bno055_read+0x44>)
 80016be:	f004 f8f5 	bl	80058ac <HAL_I2C_Mem_Read>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <bno055_read+0x38>
		*value = 0;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
		return -1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e000      	b.n	80016d6 <bno055_read+0x3a>
	}
	return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000068c 	.word	0x2000068c

080016e4 <bno055_write>:

static int bno055_write(uint8_t addr, uint8_t *value){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	2364      	movs	r3, #100	; 0x64
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2301      	movs	r3, #1
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2301      	movs	r3, #1
 8001702:	2150      	movs	r1, #80	; 0x50
 8001704:	4806      	ldr	r0, [pc, #24]	; (8001720 <bno055_write+0x3c>)
 8001706:	f003 ffd7 	bl	80056b8 <HAL_I2C_Mem_Write>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <bno055_write+0x32>
		return -1;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	e000      	b.n	8001718 <bno055_write+0x34>
	return 0;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2000068c 	.word	0x2000068c

08001724 <bno055_read_bytes>:

static int bno055_read_bytes(uint8_t addr, uint8_t *value, uint8_t len){
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af04      	add	r7, sp, #16
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
 8001730:	4613      	mov	r3, r2
 8001732:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, len, I2C_TIMEOUT_MS)!= HAL_OK){
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	b29a      	uxth	r2, r3
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	b29b      	uxth	r3, r3
 800173c:	2164      	movs	r1, #100	; 0x64
 800173e:	9102      	str	r1, [sp, #8]
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2301      	movs	r3, #1
 8001748:	2150      	movs	r1, #80	; 0x50
 800174a:	480a      	ldr	r0, [pc, #40]	; (8001774 <bno055_read_bytes+0x50>)
 800174c:	f004 f8ae 	bl	80058ac <HAL_I2C_Mem_Read>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d008      	beq.n	8001768 <bno055_read_bytes+0x44>
		memset(value,0,len);
 8001756:	79bb      	ldrb	r3, [r7, #6]
 8001758:	461a      	mov	r2, r3
 800175a:	2100      	movs	r1, #0
 800175c:	6838      	ldr	r0, [r7, #0]
 800175e:	f007 fabb 	bl	8008cd8 <memset>
		return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	e000      	b.n	800176a <bno055_read_bytes+0x46>
	}
	return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000068c 	.word	0x2000068c

08001778 <bno055_set_operation_mode>:


void bno055_set_operation_mode(bno055_opr_mode_t opr_mode);
void bno055_fusion_data_output_systems(fusion_data_output_systems_t data_systems);

void bno055_set_operation_mode(bno055_opr_mode_t opr_mode){
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(opr_mode){
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	f200 8092 	bhi.w	80018ae <bno055_set_operation_mode+0x136>
 800178a:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <bno055_set_operation_mode+0x18>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	080017c5 	.word	0x080017c5
 8001794:	080017d7 	.word	0x080017d7
 8001798:	080017e9 	.word	0x080017e9
 800179c:	080017fb 	.word	0x080017fb
 80017a0:	0800180d 	.word	0x0800180d
 80017a4:	0800181f 	.word	0x0800181f
 80017a8:	08001831 	.word	0x08001831
 80017ac:	08001843 	.word	0x08001843
 80017b0:	08001855 	.word	0x08001855
 80017b4:	08001867 	.word	0x08001867
 80017b8:	08001879 	.word	0x08001879
 80017bc:	0800188b 	.word	0x0800188b
 80017c0:	0800189d 	.word	0x0800189d
	case BNO055_OPERATION_CONFIG_MODE:
		tmp = BNO055_OPERATION_CONFIG_MODE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80017c8:	f107 030f 	add.w	r3, r7, #15
 80017cc:	4619      	mov	r1, r3
 80017ce:	203d      	movs	r0, #61	; 0x3d
 80017d0:	f7ff ff88 	bl	80016e4 <bno055_write>
	break;
 80017d4:	e06b      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCONLY:
		tmp = BNO055_OPERATION_MODE_ACCONLY;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80017da:	f107 030f 	add.w	r3, r7, #15
 80017de:	4619      	mov	r1, r3
 80017e0:	203d      	movs	r0, #61	; 0x3d
 80017e2:	f7ff ff7f 	bl	80016e4 <bno055_write>
	break;
 80017e6:	e062      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_MAGONLY:
		tmp = BNO055_OPERATION_MODE_MAGONLY;
 80017e8:	2302      	movs	r3, #2
 80017ea:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80017ec:	f107 030f 	add.w	r3, r7, #15
 80017f0:	4619      	mov	r1, r3
 80017f2:	203d      	movs	r0, #61	; 0x3d
 80017f4:	f7ff ff76 	bl	80016e4 <bno055_write>
	break;
 80017f8:	e059      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_GYROONLY:
		tmp = BNO055_OPERATION_MODE_GYROONLY;
 80017fa:	2303      	movs	r3, #3
 80017fc:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80017fe:	f107 030f 	add.w	r3, r7, #15
 8001802:	4619      	mov	r1, r3
 8001804:	203d      	movs	r0, #61	; 0x3d
 8001806:	f7ff ff6d 	bl	80016e4 <bno055_write>
	break;
 800180a:	e050      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCMAG:
		tmp = BNO055_OPERATION_MODE_ACCMAG;
 800180c:	2304      	movs	r3, #4
 800180e:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8001810:	f107 030f 	add.w	r3, r7, #15
 8001814:	4619      	mov	r1, r3
 8001816:	203d      	movs	r0, #61	; 0x3d
 8001818:	f7ff ff64 	bl	80016e4 <bno055_write>
	break;
 800181c:	e047      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCGYRO:
		tmp = BNO055_OPERATION_MODE_ACCGYRO;
 800181e:	2305      	movs	r3, #5
 8001820:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8001822:	f107 030f 	add.w	r3, r7, #15
 8001826:	4619      	mov	r1, r3
 8001828:	203d      	movs	r0, #61	; 0x3d
 800182a:	f7ff ff5b 	bl	80016e4 <bno055_write>
	break;
 800182e:	e03e      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_MAGGYRO:
		tmp = BNO055_OPERATION_MODE_MAGGYRO;
 8001830:	2306      	movs	r3, #6
 8001832:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8001834:	f107 030f 	add.w	r3, r7, #15
 8001838:	4619      	mov	r1, r3
 800183a:	203d      	movs	r0, #61	; 0x3d
 800183c:	f7ff ff52 	bl	80016e4 <bno055_write>
	break;
 8001840:	e035      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_AMG:
		tmp = BNO055_OPERATION_MODE_AMG;
 8001842:	2307      	movs	r3, #7
 8001844:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8001846:	f107 030f 	add.w	r3, r7, #15
 800184a:	4619      	mov	r1, r3
 800184c:	203d      	movs	r0, #61	; 0x3d
 800184e:	f7ff ff49 	bl	80016e4 <bno055_write>
	break;
 8001852:	e02c      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_IMU:
		tmp = BNO055_OPERATION_MODE_IMU;
 8001854:	2308      	movs	r3, #8
 8001856:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8001858:	f107 030f 	add.w	r3, r7, #15
 800185c:	4619      	mov	r1, r3
 800185e:	203d      	movs	r0, #61	; 0x3d
 8001860:	f7ff ff40 	bl	80016e4 <bno055_write>
	break;
 8001864:	e023      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_COMPASS:
		tmp = BNO055_OPERATION_MODE_COMPASS;
 8001866:	2309      	movs	r3, #9
 8001868:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 800186a:	f107 030f 	add.w	r3, r7, #15
 800186e:	4619      	mov	r1, r3
 8001870:	203d      	movs	r0, #61	; 0x3d
 8001872:	f7ff ff37 	bl	80016e4 <bno055_write>
	break;
 8001876:	e01a      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_M4G:
		tmp = BNO055_OPERATION_MODE_M4G;
 8001878:	230a      	movs	r3, #10
 800187a:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 800187c:	f107 030f 	add.w	r3, r7, #15
 8001880:	4619      	mov	r1, r3
 8001882:	203d      	movs	r0, #61	; 0x3d
 8001884:	f7ff ff2e 	bl	80016e4 <bno055_write>
	break;
 8001888:	e011      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_NDOF_FMC_OFF:
		tmp = BNO055_OPERATION_MODE_NDOF_FMC_OFF;
 800188a:	230b      	movs	r3, #11
 800188c:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 800188e:	f107 030f 	add.w	r3, r7, #15
 8001892:	4619      	mov	r1, r3
 8001894:	203d      	movs	r0, #61	; 0x3d
 8001896:	f7ff ff25 	bl	80016e4 <bno055_write>
	break;
 800189a:	e008      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_NDOF:
		tmp = BNO055_OPERATION_MODE_NDOF;
 800189c:	230c      	movs	r3, #12
 800189e:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80018a0:	f107 030f 	add.w	r3, r7, #15
 80018a4:	4619      	mov	r1, r3
 80018a6:	203d      	movs	r0, #61	; 0x3d
 80018a8:	f7ff ff1c 	bl	80016e4 <bno055_write>
	break;
 80018ac:	bf00      	nop
	}
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop

080018b8 <bno055_fusion_data_output_systems>:

void bno055_fusion_data_output_systems(fusion_data_output_systems_t data_systems){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(data_systems){
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <bno055_fusion_data_output_systems+0x16>
 80018c8:	2b80      	cmp	r3, #128	; 0x80
 80018ca:	d009      	beq.n	80018e0 <bno055_fusion_data_output_systems+0x28>
	case ANDROID_FUSION_DATA_OUTPUT:
	tmp = ANDROID_FUSION_DATA_OUTPUT;
	bno055_write(UNIT_SEL,&tmp);
	break;
	}
}
 80018cc:	e011      	b.n	80018f2 <bno055_fusion_data_output_systems+0x3a>
	tmp = WINDOWS_FUSION_DATA_OUTPUT,
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
	bno055_write(UNIT_SEL,&tmp);
 80018d2:	f107 030f 	add.w	r3, r7, #15
 80018d6:	4619      	mov	r1, r3
 80018d8:	203b      	movs	r0, #59	; 0x3b
 80018da:	f7ff ff03 	bl	80016e4 <bno055_write>
	break;
 80018de:	e008      	b.n	80018f2 <bno055_fusion_data_output_systems+0x3a>
	tmp = ANDROID_FUSION_DATA_OUTPUT;
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	73fb      	strb	r3, [r7, #15]
	bno055_write(UNIT_SEL,&tmp);
 80018e4:	f107 030f 	add.w	r3, r7, #15
 80018e8:	4619      	mov	r1, r3
 80018ea:	203b      	movs	r0, #59	; 0x3b
 80018ec:	f7ff fefa 	bl	80016e4 <bno055_write>
	break;
 80018f0:	bf00      	nop
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <bno055_axis_remap_config>:

void bno055_axis_remap_config(bno055_axis_remap_config_t axis_remap){
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(axis_remap){
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	2b21      	cmp	r3, #33	; 0x21
 8001908:	d002      	beq.n	8001910 <bno055_axis_remap_config+0x16>
 800190a:	2b24      	cmp	r3, #36	; 0x24
 800190c:	d009      	beq.n	8001922 <bno055_axis_remap_config+0x28>
	case REMAP_CONFIG_P1_2_4_7:
	tmp = REMAP_CONFIG_P1_2_4_7,
	bno055_write(AXIS_MAP_CONFIG,&tmp);
	break;
	}
}
 800190e:	e011      	b.n	8001934 <bno055_axis_remap_config+0x3a>
	tmp = REMAP_CONFIG_P0_3_5_6,
 8001910:	2321      	movs	r3, #33	; 0x21
 8001912:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_CONFIG,&tmp);
 8001914:	f107 030f 	add.w	r3, r7, #15
 8001918:	4619      	mov	r1, r3
 800191a:	2041      	movs	r0, #65	; 0x41
 800191c:	f7ff fee2 	bl	80016e4 <bno055_write>
	break;
 8001920:	e008      	b.n	8001934 <bno055_axis_remap_config+0x3a>
	tmp = REMAP_CONFIG_P1_2_4_7,
 8001922:	2324      	movs	r3, #36	; 0x24
 8001924:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_CONFIG,&tmp);
 8001926:	f107 030f 	add.w	r3, r7, #15
 800192a:	4619      	mov	r1, r3
 800192c:	2041      	movs	r0, #65	; 0x41
 800192e:	f7ff fed9 	bl	80016e4 <bno055_write>
	break;
 8001932:	bf00      	nop
}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <bno055_axis_remap_sign>:

void bno055_axis_remap_sign(bno055_axis_remap_sign_t axis_remap_sign){
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(axis_remap_sign){
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b07      	cmp	r3, #7
 800194a:	d85b      	bhi.n	8001a04 <bno055_axis_remap_sign+0xc8>
 800194c:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <bno055_axis_remap_sign+0x18>)
 800194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001952:	bf00      	nop
 8001954:	08001987 	.word	0x08001987
 8001958:	080019cf 	.word	0x080019cf
 800195c:	080019ab 	.word	0x080019ab
 8001960:	080019bd 	.word	0x080019bd
 8001964:	08001975 	.word	0x08001975
 8001968:	080019f3 	.word	0x080019f3
 800196c:	08001999 	.word	0x08001999
 8001970:	080019e1 	.word	0x080019e1
	case REMAP_SIGN_P0:
	tmp = REMAP_SIGN_P0,
 8001974:	2304      	movs	r3, #4
 8001976:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8001978:	f107 030f 	add.w	r3, r7, #15
 800197c:	4619      	mov	r1, r3
 800197e:	2042      	movs	r0, #66	; 0x42
 8001980:	f7ff feb0 	bl	80016e4 <bno055_write>
	break;
 8001984:	e03e      	b.n	8001a04 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P1:
	tmp = REMAP_SIGN_P1,
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 800198a:	f107 030f 	add.w	r3, r7, #15
 800198e:	4619      	mov	r1, r3
 8001990:	2042      	movs	r0, #66	; 0x42
 8001992:	f7ff fea7 	bl	80016e4 <bno055_write>
	break;
 8001996:	e035      	b.n	8001a04 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P2:
	tmp = REMAP_SIGN_P2,
 8001998:	2306      	movs	r3, #6
 800199a:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 800199c:	f107 030f 	add.w	r3, r7, #15
 80019a0:	4619      	mov	r1, r3
 80019a2:	2042      	movs	r0, #66	; 0x42
 80019a4:	f7ff fe9e 	bl	80016e4 <bno055_write>
	break;
 80019a8:	e02c      	b.n	8001a04 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P3:
	tmp = REMAP_SIGN_P3,
 80019aa:	2302      	movs	r3, #2
 80019ac:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 80019ae:	f107 030f 	add.w	r3, r7, #15
 80019b2:	4619      	mov	r1, r3
 80019b4:	2042      	movs	r0, #66	; 0x42
 80019b6:	f7ff fe95 	bl	80016e4 <bno055_write>
	break;
 80019ba:	e023      	b.n	8001a04 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P4:
	tmp = REMAP_SIGN_P4,
 80019bc:	2303      	movs	r3, #3
 80019be:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 80019c0:	f107 030f 	add.w	r3, r7, #15
 80019c4:	4619      	mov	r1, r3
 80019c6:	2042      	movs	r0, #66	; 0x42
 80019c8:	f7ff fe8c 	bl	80016e4 <bno055_write>
	break;
 80019cc:	e01a      	b.n	8001a04 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P5:
	tmp = REMAP_SIGN_P5,
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 80019d2:	f107 030f 	add.w	r3, r7, #15
 80019d6:	4619      	mov	r1, r3
 80019d8:	2042      	movs	r0, #66	; 0x42
 80019da:	f7ff fe83 	bl	80016e4 <bno055_write>
	break;
 80019de:	e011      	b.n	8001a04 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P6:
	tmp = REMAP_SIGN_P6,
 80019e0:	2307      	movs	r3, #7
 80019e2:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 80019e4:	f107 030f 	add.w	r3, r7, #15
 80019e8:	4619      	mov	r1, r3
 80019ea:	2042      	movs	r0, #66	; 0x42
 80019ec:	f7ff fe7a 	bl	80016e4 <bno055_write>
	break;
 80019f0:	e008      	b.n	8001a04 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P7:
	tmp = REMAP_SIGN_P7,
 80019f2:	2305      	movs	r3, #5
 80019f4:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 80019f6:	f107 030f 	add.w	r3, r7, #15
 80019fa:	4619      	mov	r1, r3
 80019fc:	2042      	movs	r0, #66	; 0x42
 80019fe:	f7ff fe71 	bl	80016e4 <bno055_write>
	break;
 8001a02:	bf00      	nop
	}
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <bno055_calibrations_status>:

int bno055_calibrations_status(char *sys, char *gyr, char *acc, char *mag){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
	uint8_t tmp;
	uint8_t buffer_calib_sta[1] ={};
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	753b      	strb	r3, [r7, #20]
	tmp = 0x00;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75fb      	strb	r3, [r7, #23]
	bno055_write(PAGE_ID,&tmp);
 8001a22:	f107 0317 	add.w	r3, r7, #23
 8001a26:	4619      	mov	r1, r3
 8001a28:	2007      	movs	r0, #7
 8001a2a:	f7ff fe5b 	bl	80016e4 <bno055_write>
	if(bno055_read(CALIB_STAT,buffer_calib_sta)<0){
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	2035      	movs	r0, #53	; 0x35
 8001a36:	f7ff fe31 	bl	800169c <bno055_read>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	da02      	bge.n	8001a46 <bno055_calibrations_status+0x3a>
		return -1;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
 8001a44:	e012      	b.n	8001a6c <bno055_calibrations_status+0x60>
		*sys = (int8_t)((int8_t)buffer_calib_sta[0])>>6 & 0b11;
		*gyr = (int8_t)((int8_t)buffer_calib_sta[0])>>4 & 0b11;
		*acc = (int8_t)((int8_t)buffer_calib_sta[0])>>2 & 0b11;
		*mag = (int8_t)((int8_t)buffer_calib_sta[0]) & 0b11;
	}
	if((*sys == 3 && *gyr == 3 && *acc == 3 && *mag == 3)) return 1;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d10d      	bne.n	8001a6a <bno055_calibrations_status+0x5e>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d109      	bne.n	8001a6a <bno055_calibrations_status+0x5e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d105      	bne.n	8001a6a <bno055_calibrations_status+0x5e>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d101      	bne.n	8001a6a <bno055_calibrations_status+0x5e>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <bno055_calibrations_status+0x60>
	return 0;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <bno055_initization>:
	st_mcu = (int8_t)((int8_t)buffer_test[0]) & 0b1000;
	if((seft_test = (((st_mcu|st_gyr)|st_mag)|st_acc))!=15) return -1;
	return 0;
}

int bno055_initization(){
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b0a7      	sub	sp, #156	; 0x9c
 8001a78:	af04      	add	r7, sp, #16
	uint8_t tmp,member;
	char calib_sys;
	char calib_gyr, calib_acc, calib_mag;
    char i = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    char j = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    char i_check=0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    char buzzer = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
    char data[120];
    //uint8_t Rxbuffer[20];
    uint8_t check_sys[1] = {};
 8001a92:	2300      	movs	r3, #0
 8001a94:	703b      	strb	r3, [r7, #0]
    for(i=0;i<1;i++){
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8001a9c:	e02c      	b.n	8001af8 <bno055_initization+0x84>
  	  for(j=0;j<3;j++){
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8001aa4:	e01f      	b.n	8001ae6 <bno055_initization+0x72>
  		  if(HAL_I2C_IsDeviceReady(&BNO055__I2C,BNO055_I2C_ADDR, 1, 100)==HAL_OK){
 8001aa6:	2364      	movs	r3, #100	; 0x64
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2150      	movs	r1, #80	; 0x50
 8001aac:	48b0      	ldr	r0, [pc, #704]	; (8001d70 <bno055_initization+0x2fc>)
 8001aae:	f004 f923 	bl	8005cf8 <HAL_I2C_IsDeviceReady>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d108      	bne.n	8001aca <bno055_initization+0x56>
  			  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8001ab8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001abc:	48ad      	ldr	r0, [pc, #692]	; (8001d74 <bno055_initization+0x300>)
 8001abe:	f003 fb9e 	bl	80051fe <HAL_GPIO_TogglePin>
  			  HAL_Delay(80);
 8001ac2:	2050      	movs	r0, #80	; 0x50
 8001ac4:	f002 f9d6 	bl	8003e74 <HAL_Delay>
 8001ac8:	e008      	b.n	8001adc <bno055_initization+0x68>
  		  	  }
  		  else{
  			  HAL_GPIO_WritePin(GPIOC,BUZZER_Pin, SET);
 8001aca:	2201      	movs	r2, #1
 8001acc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad0:	48a8      	ldr	r0, [pc, #672]	; (8001d74 <bno055_initization+0x300>)
 8001ad2:	f003 fb7b 	bl	80051cc <HAL_GPIO_WritePin>
  			  HAL_Delay(100);
 8001ad6:	2064      	movs	r0, #100	; 0x64
 8001ad8:	f002 f9cc 	bl	8003e74 <HAL_Delay>
  	  for(j=0;j<3;j++){
 8001adc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8001ae6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d9db      	bls.n	8001aa6 <bno055_initization+0x32>
    for(i=0;i<1;i++){
 8001aee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001af2:	3301      	adds	r3, #1
 8001af4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8001af8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ce      	beq.n	8001a9e <bno055_initization+0x2a>
  		  }
  	  }
    }
    /*Calibration IMU*/
    bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8001b00:	200c      	movs	r0, #12
 8001b02:	f7ff fe39 	bl	8001778 <bno055_set_operation_mode>
    //bno055_calibrations_status(&calib_sys, &calib_gyr, &calib_acc, &calib_mag);
    while(i_check<2){
 8001b06:	e091      	b.n	8001c2c <bno055_initization+0x1b8>
       // Still calibrating, out until everything done
       //bno055_calibrations_status(&calib_sys, &calib_gyr, &calib_acc, &calib_mag);
       	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, CALIB_STAT , I2C_MEMADD_SIZE_8BIT, &check_sys[1], 1, I2C_TIMEOUT_MS)==HAL_OK){
 8001b08:	2364      	movs	r3, #100	; 0x64
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	463b      	mov	r3, r7
 8001b12:	3301      	adds	r3, #1
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2301      	movs	r3, #1
 8001b18:	2235      	movs	r2, #53	; 0x35
 8001b1a:	2150      	movs	r1, #80	; 0x50
 8001b1c:	4894      	ldr	r0, [pc, #592]	; (8001d70 <bno055_initization+0x2fc>)
 8001b1e:	f003 fec5 	bl	80058ac <HAL_I2C_Mem_Read>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d133      	bne.n	8001b90 <bno055_initization+0x11c>
       	    	while(buzzer==0){
 8001b28:	e013      	b.n	8001b52 <bno055_initization+0xde>
       	             HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b30:	4890      	ldr	r0, [pc, #576]	; (8001d74 <bno055_initization+0x300>)
 8001b32:	f003 fb4b 	bl	80051cc <HAL_GPIO_WritePin>
       	             delay_ms(200);
 8001b36:	20c8      	movs	r0, #200	; 0xc8
 8001b38:	f000 fafa 	bl	8002130 <delay_ms>
       	             HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b42:	488c      	ldr	r0, [pc, #560]	; (8001d74 <bno055_initization+0x300>)
 8001b44:	f003 fb42 	bl	80051cc <HAL_GPIO_WritePin>
       	             buzzer++;
 8001b48:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
       	    	while(buzzer==0){
 8001b52:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0e7      	beq.n	8001b2a <bno055_initization+0xb6>
       	        }
       	    calib_sys = (int8_t)((int8_t)check_sys[0])>>6 & 0b11;
 8001b5a:	783b      	ldrb	r3, [r7, #0]
 8001b5c:	099b      	lsrs	r3, r3, #6
 8001b5e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
       	    calib_gyr = (int8_t)((int8_t)check_sys[0])>>4 & 0b11;
 8001b62:	783b      	ldrb	r3, [r7, #0]
 8001b64:	b25b      	sxtb	r3, r3
 8001b66:	111b      	asrs	r3, r3, #4
 8001b68:	b25b      	sxtb	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
       	    calib_acc = (int8_t)((int8_t)check_sys[0])>>2 & 0b11;
 8001b74:	783b      	ldrb	r3, [r7, #0]
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	109b      	asrs	r3, r3, #2
 8001b7a:	b25b      	sxtb	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
       	    calib_mag = (int8_t)((int8_t)check_sys[0]) & 0b11;
 8001b86:	783b      	ldrb	r3, [r7, #0]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
       		}
       	if(calib_sys!=3 && calib_gyr == 3 && calib_acc == 3 && calib_mag == 3){
 8001b90:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d029      	beq.n	8001bec <bno055_initization+0x178>
 8001b98:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d125      	bne.n	8001bec <bno055_initization+0x178>
 8001ba0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d121      	bne.n	8001bec <bno055_initization+0x178>
 8001ba8:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d11d      	bne.n	8001bec <bno055_initization+0x178>
       		HAL_UART_Transmit(&huart6,(uint8_t *)data,sprintf(data,"%d,%d,%d,%d\n",calib_sys,calib_gyr,calib_acc,calib_mag),10);
 8001bb0:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 8001bb4:	f897 4086 	ldrb.w	r4, [r7, #134]	; 0x86
 8001bb8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001bbc:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8001bc0:	1d38      	adds	r0, r7, #4
 8001bc2:	9201      	str	r2, [sp, #4]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	4623      	mov	r3, r4
 8001bc8:	460a      	mov	r2, r1
 8001bca:	496b      	ldr	r1, [pc, #428]	; (8001d78 <bno055_initization+0x304>)
 8001bcc:	f007 fcf6 	bl	80095bc <siprintf>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	1d39      	adds	r1, r7, #4
 8001bd6:	230a      	movs	r3, #10
 8001bd8:	4868      	ldr	r0, [pc, #416]	; (8001d7c <bno055_initization+0x308>)
 8001bda:	f006 f892 	bl	8007d02 <HAL_UART_Transmit>
   			i_check = 2;
 8001bde:	2302      	movs	r3, #2
 8001be0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
   			delay_ms(10);
 8001be4:	200a      	movs	r0, #10
 8001be6:	f000 faa3 	bl	8002130 <delay_ms>
 8001bea:	e01f      	b.n	8001c2c <bno055_initization+0x1b8>
       	 }
            else{
   			HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8001bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf0:	4860      	ldr	r0, [pc, #384]	; (8001d74 <bno055_initization+0x300>)
 8001bf2:	f003 fb04 	bl	80051fe <HAL_GPIO_TogglePin>
   			HAL_UART_Transmit(&huart6,(uint8_t *)data,sprintf(data,"%d,%d,%d,%d\n",calib_sys,calib_gyr,calib_acc,calib_mag),10);
 8001bf6:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 8001bfa:	f897 4086 	ldrb.w	r4, [r7, #134]	; 0x86
 8001bfe:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001c02:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8001c06:	1d38      	adds	r0, r7, #4
 8001c08:	9201      	str	r2, [sp, #4]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	460a      	mov	r2, r1
 8001c10:	4959      	ldr	r1, [pc, #356]	; (8001d78 <bno055_initization+0x304>)
 8001c12:	f007 fcd3 	bl	80095bc <siprintf>
 8001c16:	4603      	mov	r3, r0
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	1d39      	adds	r1, r7, #4
 8001c1c:	230a      	movs	r3, #10
 8001c1e:	4857      	ldr	r0, [pc, #348]	; (8001d7c <bno055_initization+0x308>)
 8001c20:	f006 f86f 	bl	8007d02 <HAL_UART_Transmit>
   			delay_ms(2000);
 8001c24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c28:	f000 fa82 	bl	8002130 <delay_ms>
    while(i_check<2){
 8001c2c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	f67f af69 	bls.w	8001b08 <bno055_initization+0x94>
            }
       }
	  /*Reset System */
	  tmp = 0x20;
 8001c36:	2320      	movs	r3, #32
 8001c38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	  bno055_write(SYS_TRIGGER,&tmp);
 8001c3c:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8001c40:	4619      	mov	r1, r3
 8001c42:	203f      	movs	r0, #63	; 0x3f
 8001c44:	f7ff fd4e 	bl	80016e4 <bno055_write>
      delay_ms(600);
 8001c48:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001c4c:	f000 fa70 	bl	8002130 <delay_ms>
      member = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
      HAL_I2C_Mem_Read(&BNO055__I2C,BNO055_I2C_ADDR,CHIP_ID_PAGE_0, I2C_MEMADD_SIZE_8BIT, &member, 1, I2C_TIMEOUT_MS);
 8001c56:	2364      	movs	r3, #100	; 0x64
 8001c58:	9302      	str	r3, [sp, #8]
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	f107 037e 	add.w	r3, r7, #126	; 0x7e
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2301      	movs	r3, #1
 8001c66:	2200      	movs	r2, #0
 8001c68:	2150      	movs	r1, #80	; 0x50
 8001c6a:	4841      	ldr	r0, [pc, #260]	; (8001d70 <bno055_initization+0x2fc>)
 8001c6c:	f003 fe1e 	bl	80058ac <HAL_I2C_Mem_Read>
      if(member==BNO055_ID){
 8001c70:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001c74:	2ba0      	cmp	r3, #160	; 0xa0
 8001c76:	d106      	bne.n	8001c86 <bno055_initization+0x212>
    	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c7e:	483d      	ldr	r0, [pc, #244]	; (8001d74 <bno055_initization+0x300>)
 8001c80:	f003 faa4 	bl	80051cc <HAL_GPIO_WritePin>
 8001c84:	e005      	b.n	8001c92 <bno055_initization+0x21e>
      }
      else{
    	  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, SET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c8c:	4839      	ldr	r0, [pc, #228]	; (8001d74 <bno055_initization+0x300>)
 8001c8e:	f003 fa9d 	bl	80051cc <HAL_GPIO_WritePin>
      }
    /* Set operation_mode BNO055_OPERATION_CONFIG_MODE */
    bno055_set_operation_mode(BNO055_OPERATION_CONFIG_MODE);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fd70 	bl	8001778 <bno055_set_operation_mode>
    delay_ms(19);
 8001c98:	2013      	movs	r0, #19
 8001c9a:	f000 fa49 	bl	8002130 <delay_ms>
	/* Configurations Power Mode */
	tmp = POWER_MODE_NORMAL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	bno055_write(PWR_MODE,&tmp);
 8001ca4:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8001ca8:	4619      	mov	r1, r3
 8001caa:	203e      	movs	r0, #62	; 0x3e
 8001cac:	f7ff fd1a 	bl	80016e4 <bno055_write>
    //Move to Page 1//
	tmp = 0x01;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	bno055_write(PAGE_ID,&tmp);
 8001cb6:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8001cba:	4619      	mov	r1, r3
 8001cbc:	2007      	movs	r0, #7
 8001cbe:	f7ff fd11 	bl	80016e4 <bno055_write>
    /* Configurations Accelerometer */
	tmp = (ACCEL_OPERATION_MODE_NORMAL | ACCEL_BANDWIDTH)| ACCEL_G_RANGE;
 8001cc2:	230d      	movs	r3, #13
 8001cc4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	bno055_write(ACC_CONFIG,&tmp);
 8001cc8:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8001ccc:	4619      	mov	r1, r3
 8001cce:	2008      	movs	r0, #8
 8001cd0:	f7ff fd08 	bl	80016e4 <bno055_write>
    /* Configurations Gyroscope */
	tmp = GYR_BANDWIDTH | GYRO_RANGE;
 8001cd4:	2338      	movs	r3, #56	; 0x38
 8001cd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	bno055_write(GYR_CONFIG_0,&tmp);
 8001cda:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8001cde:	4619      	mov	r1, r3
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	f7ff fcff 	bl	80016e4 <bno055_write>
	tmp = GYR_OPERATION_MODE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	bno055_write(GYR_CONFIG_1,&tmp);
 8001cec:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	200b      	movs	r0, #11
 8001cf4:	f7ff fcf6 	bl	80016e4 <bno055_write>
    /* Configurations Magnetometer */
	tmp = (MAG_PWR_MODE | MAG_OPERATION_MODE)| BNO055_MAG_DATA_OUTPUT_RATE;
 8001cf8:	237b      	movs	r3, #123	; 0x7b
 8001cfa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	bno055_write(MAG_CONFIG,&tmp);
 8001cfe:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8001d02:	4619      	mov	r1, r3
 8001d04:	2009      	movs	r0, #9
 8001d06:	f7ff fced 	bl	80016e4 <bno055_write>
  	/*Configuration Sensor Unit*/
  	//Move to Page 0//
    tmp = 0x00;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    bno055_write(PAGE_ID,&tmp);
 8001d10:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8001d14:	4619      	mov	r1, r3
 8001d16:	2007      	movs	r0, #7
 8001d18:	f7ff fce4 	bl	80016e4 <bno055_write>
    tmp = (((TEMPERATURE_UNITS | EULER_ANGLES_UNITS)| ANGULAR_RATE_UNITS)| BNO055_ACCEL_UNITS);
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    bno055_write(UNIT_SEL,&tmp);
 8001d22:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8001d26:	4619      	mov	r1, r3
 8001d28:	203b      	movs	r0, #59	; 0x3b
 8001d2a:	f7ff fcdb 	bl	80016e4 <bno055_write>
    bno055_fusion_data_output_systems(ANDROID_FUSION_DATA_OUTPUT);
 8001d2e:	2080      	movs	r0, #128	; 0x80
 8001d30:	f7ff fdc2 	bl	80018b8 <bno055_fusion_data_output_systems>
    /* Configure axis mapping*/
    bno055_axis_remap_config(REMAP_CONFIG_P1_2_4_7);
 8001d34:	2024      	movs	r0, #36	; 0x24
 8001d36:	f7ff fde0 	bl	80018fa <bno055_axis_remap_config>
    bno055_axis_remap_sign(REMAP_SIGN_P1);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff fdfe 	bl	800193c <bno055_axis_remap_sign>
    //set BNO055 SYS_TRIGGER TO 0x00
    tmp = 0x00;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    bno055_write(SYS_TRIGGER,&tmp);
 8001d46:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	203f      	movs	r0, #63	; 0x3f
 8001d4e:	f7ff fcc9 	bl	80016e4 <bno055_write>
    delay_ms(50);
 8001d52:	2032      	movs	r0, #50	; 0x32
 8001d54:	f000 f9ec 	bl	8002130 <delay_ms>
    //set BNO055_OPERATION_MODE_NDOF
    bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8001d58:	200c      	movs	r0, #12
 8001d5a:	f7ff fd0d 	bl	8001778 <bno055_set_operation_mode>
    delay_ms(20);
 8001d5e:	2014      	movs	r0, #20
 8001d60:	f000 f9e6 	bl	8002130 <delay_ms>
    return 0;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	378c      	adds	r7, #140	; 0x8c
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd90      	pop	{r4, r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000068c 	.word	0x2000068c
 8001d74:	40020800 	.word	0x40020800
 8001d78:	0800bab0 	.word	0x0800bab0
 8001d7c:	20000a7c 	.word	0x20000a7c

08001d80 <bno055_get_accel_gyro>:
	*gyrx_ofs = (int16_t)((int16_t)buffer_calibrations[13]) << 8 | buffer_calibrations[12];
	*gyry_ofs = (int16_t)((int16_t)buffer_calibrations[15]) << 8 | buffer_calibrations[14];
	*gyrz_ofs = (int16_t)((int16_t)buffer_calibrations[17]) << 8 | buffer_calibrations[16];
	return 0;
}
int bno055_get_accel_gyro(float *ax,float *ay,float *az ,float *gx ,float *gy ,float *gz){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
	uint8_t tmp;
	uint8_t buffer_accel[6] = {};
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	2300      	movs	r3, #0
 8001d94:	83bb      	strh	r3, [r7, #28]
	uint8_t buffer_gyro[6] = {};
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	82bb      	strh	r3, [r7, #20]
	tmp = 0x00;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	77fb      	strb	r3, [r7, #31]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8001da2:	f107 031f 	add.w	r3, r7, #31
 8001da6:	4619      	mov	r1, r3
 8001da8:	2007      	movs	r0, #7
 8001daa:	f7ff fc9b 	bl	80016e4 <bno055_write>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da02      	bge.n	8001dba <bno055_get_accel_gyro+0x3a>
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	e0a4      	b.n	8001f04 <bno055_get_accel_gyro+0x184>
	if(bno055_read_bytes(ACC_DATA_X_LSB,buffer_accel,6)<0){
 8001dba:	f107 0318 	add.w	r3, r7, #24
 8001dbe:	2206      	movs	r2, #6
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	2008      	movs	r0, #8
 8001dc4:	f7ff fcae 	bl	8001724 <bno055_read_bytes>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da02      	bge.n	8001dd4 <bno055_get_accel_gyro+0x54>
		return -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	e097      	b.n	8001f04 <bno055_get_accel_gyro+0x184>
	}
	*ax = (int16_t)((int16_t)buffer_accel[1]  << 8) | buffer_accel[0]; *ax /= BNO055_ACC_SCALE;
 8001dd4:	7e7b      	ldrb	r3, [r7, #25]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b21b      	sxth	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	7e3b      	ldrb	r3, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	edc3 7a00 	vstr	s15, [r3]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001f0c <bno055_get_accel_gyro+0x18c>
 8001df8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	edc3 7a00 	vstr	s15, [r3]
	*ay = (int16_t)((int16_t)buffer_accel[3]  << 8) | buffer_accel[2]; *ay /= BNO055_ACC_SCALE;
 8001e02:	7efb      	ldrb	r3, [r7, #27]
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	7ebb      	ldrb	r3, [r7, #26]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	edc3 7a00 	vstr	s15, [r3]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	ed93 7a00 	vldr	s14, [r3]
 8001e22:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001f0c <bno055_get_accel_gyro+0x18c>
 8001e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	edc3 7a00 	vstr	s15, [r3]
	*az = (int16_t)((int16_t)buffer_accel[5]  << 8) | buffer_accel[4]; *az /= BNO055_ACC_SCALE;
 8001e30:	7f7b      	ldrb	r3, [r7, #29]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	7f3b      	ldrb	r3, [r7, #28]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	edc3 7a00 	vstr	s15, [r3]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	ed93 7a00 	vldr	s14, [r3]
 8001e50:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001f0c <bno055_get_accel_gyro+0x18c>
 8001e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	edc3 7a00 	vstr	s15, [r3]
	if(bno055_read_bytes(GYR_DATA_X_LSB,buffer_gyro,6)<0){
 8001e5e:	f107 0310 	add.w	r3, r7, #16
 8001e62:	2206      	movs	r2, #6
 8001e64:	4619      	mov	r1, r3
 8001e66:	2014      	movs	r0, #20
 8001e68:	f7ff fc5c 	bl	8001724 <bno055_read_bytes>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da02      	bge.n	8001e78 <bno055_get_accel_gyro+0xf8>
			return -1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e045      	b.n	8001f04 <bno055_get_accel_gyro+0x184>
		}
	*gx = (int16_t)((int16_t)buffer_gyro[1]  << 8) | buffer_gyro[0]; *gx /= BNO055_GYR_SCALE;
 8001e78:	7c7b      	ldrb	r3, [r7, #17]
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	7c3b      	ldrb	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	ee07 3a90 	vmov	s15, r3
 8001e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	edc3 7a00 	vstr	s15, [r3]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	ed93 7a00 	vldr	s14, [r3]
 8001e98:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	edc3 7a00 	vstr	s15, [r3]
	*gy = (int16_t)((int16_t)buffer_gyro[3]  << 8) | buffer_gyro[2]; *gy /= BNO055_GYR_SCALE;
 8001ea6:	7cfb      	ldrb	r3, [r7, #19]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	7cbb      	ldrb	r3, [r7, #18]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebc:	edc3 7a00 	vstr	s15, [r3]
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	ed93 7a00 	vldr	s14, [r3]
 8001ec6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001eca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	edc3 7a00 	vstr	s15, [r3]
	*gz = (int16_t)((int16_t)buffer_gyro[5]  << 8) | buffer_gyro[4]; *gz /= BNO055_GYR_SCALE;
 8001ed4:	7d7b      	ldrb	r3, [r7, #21]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	7d3b      	ldrb	r3, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eea:	edc3 7a00 	vstr	s15, [r3]
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	ed93 7a00 	vldr	s14, [r3]
 8001ef4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001ef8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efe:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	42c80000 	.word	0x42c80000

08001f10 <bno055_get_temp>:
	*mx = (int16_t)((int16_t)buffer_mag[1]  << 8) | buffer_mag[0]; *mx /= BNO055_MAG_SCALE;
	*my = (int16_t)((int16_t)buffer_mag[3]  << 8) | buffer_mag[2]; *my /= BNO055_MAG_SCALE;
	*mz = (int16_t)((int16_t)buffer_mag[5]  << 8) | buffer_mag[4]; *mz /= BNO055_MAG_SCALE;
	return 0;
}
int bno055_get_temp(float *temp){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_temp[1] = {};
 8001f18:	2300      	movs	r3, #0
 8001f1a:	733b      	strb	r3, [r7, #12]
	tmp = 0x00;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8001f20:	f107 030f 	add.w	r3, r7, #15
 8001f24:	4619      	mov	r1, r3
 8001f26:	2007      	movs	r0, #7
 8001f28:	f7ff fbdc 	bl	80016e4 <bno055_write>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	da02      	bge.n	8001f38 <bno055_get_temp+0x28>
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	e015      	b.n	8001f64 <bno055_get_temp+0x54>
	if(bno055_read_bytes(TEMP,buffer_temp,1)<0){
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4619      	mov	r1, r3
 8001f40:	2034      	movs	r0, #52	; 0x34
 8001f42:	f7ff fbef 	bl	8001724 <bno055_read_bytes>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	da02      	bge.n	8001f52 <bno055_get_temp+0x42>
				return -1;
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f50:	e008      	b.n	8001f64 <bno055_get_temp+0x54>
			}
	*temp = buffer_temp[0] / BNO055_TEMP_SCALE;
 8001f52:	7b3b      	ldrb	r3, [r7, #12]
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <bno055_get_elu_data>:
int bno055_get_elu_data(float *roll, float *pitch, float *yaw){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_eul[6] = {};
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	82bb      	strh	r3, [r7, #20]
	tmp = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	75fb      	strb	r3, [r7, #23]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8001f84:	f107 0317 	add.w	r3, r7, #23
 8001f88:	4619      	mov	r1, r3
 8001f8a:	2007      	movs	r0, #7
 8001f8c:	f7ff fbaa 	bl	80016e4 <bno055_write>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	da02      	bge.n	8001f9c <bno055_get_elu_data+0x30>
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	e052      	b.n	8002042 <bno055_get_elu_data+0xd6>
	if(bno055_read_bytes(EUL_HEADING_LSB,buffer_eul,6)<0){
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	2206      	movs	r2, #6
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	201a      	movs	r0, #26
 8001fa6:	f7ff fbbd 	bl	8001724 <bno055_read_bytes>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	da02      	bge.n	8001fb6 <bno055_get_elu_data+0x4a>
					return -1;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb4:	e045      	b.n	8002042 <bno055_get_elu_data+0xd6>
	}
	*yaw = (int16_t)((int16_t)buffer_eul[1]  << 8) | buffer_eul[0]; *yaw /= BNO055_EUL_SCALE;
 8001fb6:	7c7b      	ldrb	r3, [r7, #17]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	7c3b      	ldrb	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	edc3 7a00 	vstr	s15, [r3]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	ed93 7a00 	vldr	s14, [r3]
 8001fd6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001fda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	edc3 7a00 	vstr	s15, [r3]
	*roll = (int16_t)((int16_t)buffer_eul[3]  << 8) | buffer_eul[2]; *roll /= BNO055_EUL_SCALE;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	b21b      	sxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	7cbb      	ldrb	r3, [r7, #18]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	edc3 7a00 	vstr	s15, [r3]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	ed93 7a00 	vldr	s14, [r3]
 8002004:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	edc3 7a00 	vstr	s15, [r3]
	*pitch = (int16_t)((int16_t)buffer_eul[5]  << 8) | buffer_eul[4]; *pitch /= BNO055_EUL_SCALE;
 8002012:	7d7b      	ldrb	r3, [r7, #21]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	b21b      	sxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	7d3b      	ldrb	r3, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	edc3 7a00 	vstr	s15, [r3]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	ed93 7a00 	vldr	s14, [r3]
 8002032:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <bno055_get_lia_data>:
	*qua_x = (int16_t)((int16_t)buffer_qua[3]  << 8) | buffer_qua[2]; *qua_x /= BNO055_QUATERNIONS_SCALE;
	*qua_y = (int16_t)((int16_t)buffer_qua[5]  << 8) | buffer_qua[4]; *qua_y /= BNO055_QUATERNIONS_SCALE;
	*qua_z = (int16_t)((int16_t)buffer_qua[7]  << 8) | buffer_qua[6]; *qua_z /= BNO055_QUATERNIONS_SCALE;
	return 0;
}
int bno055_get_lia_data(float *lia_x, float *lia_y, float *lia_z){
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_lia[6] = {};
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	2300      	movs	r3, #0
 800205e:	82bb      	strh	r3, [r7, #20]
	tmp = 0x00;
 8002060:	2300      	movs	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8002064:	f107 0317 	add.w	r3, r7, #23
 8002068:	4619      	mov	r1, r3
 800206a:	2007      	movs	r0, #7
 800206c:	f7ff fb3a 	bl	80016e4 <bno055_write>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	da02      	bge.n	800207c <bno055_get_lia_data+0x30>
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	e052      	b.n	8002122 <bno055_get_lia_data+0xd6>
	if(bno055_read_bytes(LIA_DATA_X_LSB,buffer_lia,6)<0){
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	2206      	movs	r2, #6
 8002082:	4619      	mov	r1, r3
 8002084:	2028      	movs	r0, #40	; 0x28
 8002086:	f7ff fb4d 	bl	8001724 <bno055_read_bytes>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	da02      	bge.n	8002096 <bno055_get_lia_data+0x4a>
				return -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	e045      	b.n	8002122 <bno055_get_lia_data+0xd6>
			}
	*lia_x = (int16_t)((int16_t)buffer_lia[1]  << 8) | buffer_lia[0]; *lia_x /= BNO055_LIA_SCALE;
 8002096:	7c7b      	ldrb	r3, [r7, #17]
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	b21b      	sxth	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	7c3b      	ldrb	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	edc3 7a00 	vstr	s15, [r3]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	ed93 7a00 	vldr	s14, [r3]
 80020b6:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800212c <bno055_get_lia_data+0xe0>
 80020ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	edc3 7a00 	vstr	s15, [r3]
	*lia_y = (int16_t)((int16_t)buffer_lia[3]  << 8) | buffer_lia[2]; *lia_y /= BNO055_LIA_SCALE;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	7cbb      	ldrb	r3, [r7, #18]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	edc3 7a00 	vstr	s15, [r3]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	ed93 7a00 	vldr	s14, [r3]
 80020e4:	eddf 6a11 	vldr	s13, [pc, #68]	; 800212c <bno055_get_lia_data+0xe0>
 80020e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	edc3 7a00 	vstr	s15, [r3]
	*lia_z = (int16_t)((int16_t)buffer_lia[5]  << 8) | buffer_lia[4]; *lia_z /= BNO055_LIA_SCALE;
 80020f2:	7d7b      	ldrb	r3, [r7, #21]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	7d3b      	ldrb	r3, [r7, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	edc3 7a00 	vstr	s15, [r3]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	ed93 7a00 	vldr	s14, [r3]
 8002112:	eddf 6a06 	vldr	s13, [pc, #24]	; 800212c <bno055_get_lia_data+0xe0>
 8002116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	42c80000 	.word	0x42c80000

08002130 <delay_ms>:
void delay_us(uint32_t us){
    __HAL_TIM_SET_COUNTER(&TIM_DELAY_US,0);  // set the counter value a 0
    while (__HAL_TIM_GET_COUNTER(&TIM_DELAY_US) < us);  // wait for the counter to reach the us input in the parameter
}

void delay_ms(uint32_t ms){
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&TIM_DELAY_MS,0);  // set the counter value a 0
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <delay_ms+0x34>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2200      	movs	r2, #0
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&TIM_DELAY_MS) < ms*1000);  // wait for the counter to reach the us input in the parameter
 8002140:	bf00      	nop
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <delay_ms+0x34>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	429a      	cmp	r2, r3
 8002154:	d3f5      	bcc.n	8002142 <delay_ms+0x12>
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	20000920 	.word	0x20000920

08002168 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800216e:	463b      	mov	r3, r7
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <MX_ADC1_Init+0x98>)
 800217c:	4a21      	ldr	r2, [pc, #132]	; (8002204 <MX_ADC1_Init+0x9c>)
 800217e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002180:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <MX_ADC1_Init+0x98>)
 8002182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002186:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <MX_ADC1_Init+0x98>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <MX_ADC1_Init+0x98>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002194:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <MX_ADC1_Init+0x98>)
 8002196:	2200      	movs	r2, #0
 8002198:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <MX_ADC1_Init+0x98>)
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021a2:	4b17      	ldr	r3, [pc, #92]	; (8002200 <MX_ADC1_Init+0x98>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <MX_ADC1_Init+0x98>)
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <MX_ADC1_Init+0xa0>)
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <MX_ADC1_Init+0x98>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <MX_ADC1_Init+0x98>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_ADC1_Init+0x98>)
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_ADC1_Init+0x98>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <MX_ADC1_Init+0x98>)
 80021ca:	f001 fe77 	bl	8003ebc <HAL_ADC_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80021d4:	f000 fc7e 	bl	8002ad4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80021d8:	230b      	movs	r3, #11
 80021da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80021dc:	2301      	movs	r3, #1
 80021de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e4:	463b      	mov	r3, r7
 80021e6:	4619      	mov	r1, r3
 80021e8:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_ADC1_Init+0x98>)
 80021ea:	f001 feab 	bl	8003f44 <HAL_ADC_ConfigChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80021f4:	f000 fc6e 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	2000061c 	.word	0x2000061c
 8002204:	40012000 	.word	0x40012000
 8002208:	0f000001 	.word	0x0f000001

0800220c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a17      	ldr	r2, [pc, #92]	; (8002288 <HAL_ADC_MspInit+0x7c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d127      	bne.n	800227e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_ADC_MspInit+0x80>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a15      	ldr	r2, [pc, #84]	; (800228c <HAL_ADC_MspInit+0x80>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_ADC_MspInit+0x80>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <HAL_ADC_MspInit+0x80>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_ADC_MspInit+0x80>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_ADC_MspInit+0x80>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = MCU_ADC_1_Pin|MCU_ADC_2_Pin|MCU_ADC_3_Pin;
 8002266:	230e      	movs	r3, #14
 8002268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800226a:	2303      	movs	r3, #3
 800226c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	4805      	ldr	r0, [pc, #20]	; (8002290 <HAL_ADC_MspInit+0x84>)
 800227a:	f002 fe0b 	bl	8004e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	; 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40012000 	.word	0x40012000
 800228c:	40023800 	.word	0x40023800
 8002290:	40020800 	.word	0x40020800

08002294 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002298:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <MX_CAN2_Init+0x60>)
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <MX_CAN2_Init+0x64>)
 800229c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022a0:	2210      	movs	r2, #16
 80022a2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80022a4:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022be:	2200      	movs	r2, #0
 80022c0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022dc:	2200      	movs	r2, #0
 80022de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80022e0:	4804      	ldr	r0, [pc, #16]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022e2:	f002 f84d 	bl	8004380 <HAL_CAN_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80022ec:	f000 fbf2 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000664 	.word	0x20000664
 80022f8:	40006800 	.word	0x40006800

080022fc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a20      	ldr	r2, [pc, #128]	; (800239c <HAL_CAN_MspInit+0xa0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d13a      	bne.n	8002394 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a1e      	ldr	r2, [pc, #120]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002328:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a17      	ldr	r2, [pc, #92]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002344:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = MCU_CAN_RX_Pin|MCU_CAN_TX_Pin;
 8002372:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002384:	2309      	movs	r3, #9
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	4805      	ldr	r0, [pc, #20]	; (80023a4 <HAL_CAN_MspInit+0xa8>)
 8002390:	f002 fd80 	bl	8004e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002394:	bf00      	nop
 8002396:	3728      	adds	r7, #40	; 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40006800 	.word	0x40006800
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40020400 	.word	0x40020400

080023a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <MX_DMA_Init+0x108>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a3e      	ldr	r2, [pc, #248]	; (80024b0 <MX_DMA_Init+0x108>)
 80023b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <MX_DMA_Init+0x108>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <MX_DMA_Init+0x108>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a37      	ldr	r2, [pc, #220]	; (80024b0 <MX_DMA_Init+0x108>)
 80023d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b35      	ldr	r3, [pc, #212]	; (80024b0 <MX_DMA_Init+0x108>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	200b      	movs	r0, #11
 80023ec:	f002 f99f 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023f0:	200b      	movs	r0, #11
 80023f2:	f002 f9b8 	bl	8004766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	200c      	movs	r0, #12
 80023fc:	f002 f997 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002400:	200c      	movs	r0, #12
 8002402:	f002 f9b0 	bl	8004766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	200d      	movs	r0, #13
 800240c:	f002 f98f 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002410:	200d      	movs	r0, #13
 8002412:	f002 f9a8 	bl	8004766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	200e      	movs	r0, #14
 800241c:	f002 f987 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002420:	200e      	movs	r0, #14
 8002422:	f002 f9a0 	bl	8004766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	200f      	movs	r0, #15
 800242c:	f002 f97f 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002430:	200f      	movs	r0, #15
 8002432:	f002 f998 	bl	8004766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	2010      	movs	r0, #16
 800243c:	f002 f977 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002440:	2010      	movs	r0, #16
 8002442:	f002 f990 	bl	8004766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	2011      	movs	r0, #17
 800244c:	f002 f96f 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002450:	2011      	movs	r0, #17
 8002452:	f002 f988 	bl	8004766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	202f      	movs	r0, #47	; 0x2f
 800245c:	f002 f967 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002460:	202f      	movs	r0, #47	; 0x2f
 8002462:	f002 f980 	bl	8004766 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	2039      	movs	r0, #57	; 0x39
 800246c:	f002 f95f 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002470:	2039      	movs	r0, #57	; 0x39
 8002472:	f002 f978 	bl	8004766 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2100      	movs	r1, #0
 800247a:	203a      	movs	r0, #58	; 0x3a
 800247c:	f002 f957 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002480:	203a      	movs	r0, #58	; 0x3a
 8002482:	f002 f970 	bl	8004766 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	2045      	movs	r0, #69	; 0x45
 800248c:	f002 f94f 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002490:	2045      	movs	r0, #69	; 0x45
 8002492:	f002 f968 	bl	8004766 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	2046      	movs	r0, #70	; 0x46
 800249c:	f002 f947 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80024a0:	2046      	movs	r0, #70	; 0x46
 80024a2:	f002 f960 	bl	8004766 <HAL_NVIC_EnableIRQ>

}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800

080024b4 <MX_GPIO_Init>:
        * EXTI
     PA15   ------> S_TIM2_CH1_ETR
     PB3   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	4b54      	ldr	r3, [pc, #336]	; (8002620 <MX_GPIO_Init+0x16c>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a53      	ldr	r2, [pc, #332]	; (8002620 <MX_GPIO_Init+0x16c>)
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b51      	ldr	r3, [pc, #324]	; (8002620 <MX_GPIO_Init+0x16c>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <MX_GPIO_Init+0x16c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <MX_GPIO_Init+0x16c>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <MX_GPIO_Init+0x16c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	4b46      	ldr	r3, [pc, #280]	; (8002620 <MX_GPIO_Init+0x16c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a45      	ldr	r2, [pc, #276]	; (8002620 <MX_GPIO_Init+0x16c>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b43      	ldr	r3, [pc, #268]	; (8002620 <MX_GPIO_Init+0x16c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	4b3f      	ldr	r3, [pc, #252]	; (8002620 <MX_GPIO_Init+0x16c>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a3e      	ldr	r2, [pc, #248]	; (8002620 <MX_GPIO_Init+0x16c>)
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <MX_GPIO_Init+0x16c>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 800253a:	2200      	movs	r2, #0
 800253c:	f246 0131 	movw	r1, #24625	; 0x6031
 8002540:	4838      	ldr	r0, [pc, #224]	; (8002624 <MX_GPIO_Init+0x170>)
 8002542:	f002 fe43 	bl	80051cc <HAL_GPIO_WritePin>
                          |ADD_SPI_CSn_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin, GPIO_PIN_RESET);
 8002546:	2200      	movs	r2, #0
 8002548:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800254c:	4836      	ldr	r0, [pc, #216]	; (8002628 <MX_GPIO_Init+0x174>)
 800254e:	f002 fe3d 	bl	80051cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_LORA_RST_GPIO_Port, MCU_LORA_RST_Pin, GPIO_PIN_RESET);
 8002552:	2200      	movs	r2, #0
 8002554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002558:	4834      	ldr	r0, [pc, #208]	; (800262c <MX_GPIO_Init+0x178>)
 800255a:	f002 fe37 	bl	80051cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 800255e:	f246 0331 	movw	r3, #24625	; 0x6031
 8002562:	617b      	str	r3, [r7, #20]
                          |ADD_SPI_CSn_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002564:	2301      	movs	r3, #1
 8002566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4619      	mov	r1, r3
 8002576:	482b      	ldr	r0, [pc, #172]	; (8002624 <MX_GPIO_Init+0x170>)
 8002578:	f002 fc8c 	bl	8004e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800257c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002582:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	4824      	ldr	r0, [pc, #144]	; (8002624 <MX_GPIO_Init+0x170>)
 8002594:	f002 fc7e 	bl	8004e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin;
 8002598:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800259c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	481d      	ldr	r0, [pc, #116]	; (8002628 <MX_GPIO_Init+0x174>)
 80025b2:	f002 fc6f 	bl	8004e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_LORA_RST_Pin;
 80025b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025bc:	2301      	movs	r3, #1
 80025be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_LORA_RST_GPIO_Port, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	4817      	ldr	r0, [pc, #92]	; (800262c <MX_GPIO_Init+0x178>)
 80025d0:	f002 fc60 	bl	8004e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR1_Pin;
 80025d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025e6:	2301      	movs	r3, #1
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR1_GPIO_Port, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	480e      	ldr	r0, [pc, #56]	; (800262c <MX_GPIO_Init+0x178>)
 80025f2:	f002 fc4f 	bl	8004e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR2_Pin;
 80025f6:	2308      	movs	r3, #8
 80025f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002606:	2301      	movs	r3, #1
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR2_GPIO_Port, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	4805      	ldr	r0, [pc, #20]	; (8002628 <MX_GPIO_Init+0x174>)
 8002612:	f002 fc3f 	bl	8004e94 <HAL_GPIO_Init>

}
 8002616:	bf00      	nop
 8002618:	3728      	adds	r7, #40	; 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40020800 	.word	0x40020800
 8002628:	40020400 	.word	0x40020400
 800262c:	40020000 	.word	0x40020000

08002630 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <MX_I2C1_Init+0x74>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <MX_I2C1_Init+0x74>)
 8002640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <MX_I2C1_Init+0x74>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <MX_I2C1_Init+0x78>)
 8002654:	4a15      	ldr	r2, [pc, #84]	; (80026ac <MX_I2C1_Init+0x7c>)
 8002656:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <MX_I2C1_Init+0x78>)
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <MX_I2C1_Init+0x80>)
 800265c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <MX_I2C1_Init+0x78>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <MX_I2C1_Init+0x78>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <MX_I2C1_Init+0x78>)
 800266c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <MX_I2C1_Init+0x78>)
 8002674:	2200      	movs	r2, #0
 8002676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <MX_I2C1_Init+0x78>)
 800267a:	2200      	movs	r2, #0
 800267c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <MX_I2C1_Init+0x78>)
 8002680:	2200      	movs	r2, #0
 8002682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <MX_I2C1_Init+0x78>)
 8002686:	2200      	movs	r2, #0
 8002688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800268a:	4807      	ldr	r0, [pc, #28]	; (80026a8 <MX_I2C1_Init+0x78>)
 800268c:	f002 fdd2 	bl	8005234 <HAL_I2C_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_I2C1_Init+0x6a>
  {
    Error_Handler();
 8002696:	f000 fa1d 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	2000068c 	.word	0x2000068c
 80026ac:	40005400 	.word	0x40005400
 80026b0:	00061a80 	.word	0x00061a80

080026b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a19      	ldr	r2, [pc, #100]	; (8002738 <HAL_I2C_MspInit+0x84>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d12c      	bne.n	8002730 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_I2C_MspInit+0x88>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a17      	ldr	r2, [pc, #92]	; (800273c <HAL_I2C_MspInit+0x88>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_I2C_MspInit+0x88>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MCU_I2C_SCL_Pin|MCU_I2C_SDA_Pin;
 80026f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f8:	2312      	movs	r3, #18
 80026fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002704:	2304      	movs	r3, #4
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	480c      	ldr	r0, [pc, #48]	; (8002740 <HAL_I2C_MspInit+0x8c>)
 8002710:	f002 fbc0 	bl	8004e94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_I2C_MspInit+0x88>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <HAL_I2C_MspInit+0x88>)
 800271e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002722:	6413      	str	r3, [r2, #64]	; 0x40
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_I2C_MspInit+0x88>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002730:	bf00      	nop
 8002732:	3728      	adds	r7, #40	; 0x28
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40005400 	.word	0x40005400
 800273c:	40023800 	.word	0x40023800
 8002740:	40020400 	.word	0x40020400

08002744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002748:	b092      	sub	sp, #72	; 0x48
 800274a:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800274c:	f001 fb20 	bl	8003d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002750:	f000 f956 	bl	8002a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002754:	f7ff feae 	bl	80024b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002758:	f7ff fe26 	bl	80023a8 <MX_DMA_Init>
  MX_ADC1_Init();
 800275c:	f7ff fd04 	bl	8002168 <MX_ADC1_Init>
  MX_CAN2_Init();
 8002760:	f7ff fd98 	bl	8002294 <MX_CAN2_Init>
  MX_I2C1_Init();
 8002764:	f7ff ff64 	bl	8002630 <MX_I2C1_Init>
  //MX_SPI1_Init();
  MX_TIM1_Init();
 8002768:	f000 fb7a 	bl	8002e60 <MX_TIM1_Init>
  MX_TIM3_Init();
 800276c:	f000 fc3c 	bl	8002fe8 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002770:	f000 fcd6 	bl	8003120 <MX_TIM8_Init>
  //MX_UART4_Init();
  MX_UART5_Init();
 8002774:	f000 fe48 	bl	8003408 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8002778:	f000 fe70 	bl	800345c <MX_USART1_UART_Init>
  //MX_USART2_UART_Init();
  MX_USART3_UART_Init();
 800277c:	f000 fe98 	bl	80034b0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002780:	f000 fec0 	bl	8003504 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8002784:	f000 fc7e 	bl	8003084 <MX_TIM5_Init>
  HAL_TIM_Base_Start(&TIM_DELAY_US);
 8002788:	487f      	ldr	r0, [pc, #508]	; (8002988 <main+0x244>)
 800278a:	f004 fc69 	bl	8007060 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the display
 800278e:	f7fe fbf5 	bl	8000f7c <SSD1306_Init>

  SSD1306_GotoXY (10,10); // goto 10, 10
 8002792:	210a      	movs	r1, #10
 8002794:	200a      	movs	r0, #10
 8002796:	f7fe fd5b 	bl	8001250 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_16x26, 1); // print Hello
 800279a:	2201      	movs	r2, #1
 800279c:	497b      	ldr	r1, [pc, #492]	; (800298c <main+0x248>)
 800279e:	487c      	ldr	r0, [pc, #496]	; (8002990 <main+0x24c>)
 80027a0:	f7fe fdec 	bl	800137c <SSD1306_Puts>
  SSD1306_GotoXY (10, 38);
 80027a4:	2126      	movs	r1, #38	; 0x26
 80027a6:	200a      	movs	r0, #10
 80027a8:	f7fe fd52 	bl	8001250 <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD!!", &Font_7x10, 1);
 80027ac:	2201      	movs	r2, #1
 80027ae:	4979      	ldr	r1, [pc, #484]	; (8002994 <main+0x250>)
 80027b0:	4879      	ldr	r0, [pc, #484]	; (8002998 <main+0x254>)
 80027b2:	f7fe fde3 	bl	800137c <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80027b6:	f7fe fca5 	bl	8001104 <SSD1306_UpdateScreen>
  delay_ms(1000);
 80027ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027be:	f7ff fcb7 	bl	8002130 <delay_ms>

  SSD1306_Clear();
 80027c2:	f7fe fe00 	bl	80013c6 <SSD1306_Clear>
  SSD1306_DrawBitmap(0, 0,drone_logo,128, 64, 1);
 80027c6:	2301      	movs	r3, #1
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	2340      	movs	r3, #64	; 0x40
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	4a72      	ldr	r2, [pc, #456]	; (800299c <main+0x258>)
 80027d2:	2100      	movs	r1, #0
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7fe fb69 	bl	8000eac <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen();
 80027da:	f7fe fc93 	bl	8001104 <SSD1306_UpdateScreen>
  delay_ms(2000);
 80027de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027e2:	f7ff fca5 	bl	8002130 <delay_ms>

  /* Infinite loop */
  bno055_initization();
 80027e6:	f7ff f945 	bl	8001a74 <bno055_initization>
  delay_ms(1000);
 80027ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ee:	f7ff fc9f 	bl	8002130 <delay_ms>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  bno055_calibrations_status(&sys,&gyr,&acc,&mag);
 80027f2:	4b6b      	ldr	r3, [pc, #428]	; (80029a0 <main+0x25c>)
 80027f4:	4a6b      	ldr	r2, [pc, #428]	; (80029a4 <main+0x260>)
 80027f6:	496c      	ldr	r1, [pc, #432]	; (80029a8 <main+0x264>)
 80027f8:	486c      	ldr	r0, [pc, #432]	; (80029ac <main+0x268>)
 80027fa:	f7ff f907 	bl	8001a0c <bno055_calibrations_status>
	  bno055_get_elu_data(&roll, &pitch, &yaw);
 80027fe:	4a6c      	ldr	r2, [pc, #432]	; (80029b0 <main+0x26c>)
 8002800:	496c      	ldr	r1, [pc, #432]	; (80029b4 <main+0x270>)
 8002802:	486d      	ldr	r0, [pc, #436]	; (80029b8 <main+0x274>)
 8002804:	f7ff fbb2 	bl	8001f6c <bno055_get_elu_data>
	  bno055_get_temp(&temp);
 8002808:	486c      	ldr	r0, [pc, #432]	; (80029bc <main+0x278>)
 800280a:	f7ff fb81 	bl	8001f10 <bno055_get_temp>
	  bno055_get_accel_gyro(&ax,&ay,&az,&gx,&gy,&gz);
 800280e:	4b6c      	ldr	r3, [pc, #432]	; (80029c0 <main+0x27c>)
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	4b6c      	ldr	r3, [pc, #432]	; (80029c4 <main+0x280>)
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	4b6c      	ldr	r3, [pc, #432]	; (80029c8 <main+0x284>)
 8002818:	4a6c      	ldr	r2, [pc, #432]	; (80029cc <main+0x288>)
 800281a:	496d      	ldr	r1, [pc, #436]	; (80029d0 <main+0x28c>)
 800281c:	486d      	ldr	r0, [pc, #436]	; (80029d4 <main+0x290>)
 800281e:	f7ff faaf 	bl	8001d80 <bno055_get_accel_gyro>
	  bno055_get_lia_data(&lia_x, &lia_y, &lia_z);
 8002822:	4a6d      	ldr	r2, [pc, #436]	; (80029d8 <main+0x294>)
 8002824:	496d      	ldr	r1, [pc, #436]	; (80029dc <main+0x298>)
 8002826:	486e      	ldr	r0, [pc, #440]	; (80029e0 <main+0x29c>)
 8002828:	f7ff fc10 	bl	800204c <bno055_get_lia_data>
	  HAL_UART_Transmit(&huart6,(uint8_t *)data1, sprintf(data1,"%0.5f,%0.5f,%0.5f,%0.5f,%0.5f,%0.5f,%0.5f\n",roll,pitch,yaw,temp,lia_x,lia_y,lia_z),10);
 800282c:	4b62      	ldr	r3, [pc, #392]	; (80029b8 <main+0x274>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fd fe89 	bl	8000548 <__aeabi_f2d>
 8002836:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800283a:	4b5e      	ldr	r3, [pc, #376]	; (80029b4 <main+0x270>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fe82 	bl	8000548 <__aeabi_f2d>
 8002844:	4680      	mov	r8, r0
 8002846:	4689      	mov	r9, r1
 8002848:	4b59      	ldr	r3, [pc, #356]	; (80029b0 <main+0x26c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe7b 	bl	8000548 <__aeabi_f2d>
 8002852:	4682      	mov	sl, r0
 8002854:	468b      	mov	fp, r1
 8002856:	4b59      	ldr	r3, [pc, #356]	; (80029bc <main+0x278>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd fe74 	bl	8000548 <__aeabi_f2d>
 8002860:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002864:	4b5e      	ldr	r3, [pc, #376]	; (80029e0 <main+0x29c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fd fe6d 	bl	8000548 <__aeabi_f2d>
 800286e:	e9c7 0100 	strd	r0, r1, [r7]
 8002872:	4b5a      	ldr	r3, [pc, #360]	; (80029dc <main+0x298>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe66 	bl	8000548 <__aeabi_f2d>
 800287c:	4604      	mov	r4, r0
 800287e:	460d      	mov	r5, r1
 8002880:	4b55      	ldr	r3, [pc, #340]	; (80029d8 <main+0x294>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fe5f 	bl	8000548 <__aeabi_f2d>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002892:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002896:	ed97 7b00 	vldr	d7, [r7]
 800289a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800289e:	ed97 7b02 	vldr	d7, [r7, #8]
 80028a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80028a6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80028aa:	e9cd 8900 	strd	r8, r9, [sp]
 80028ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028b2:	494c      	ldr	r1, [pc, #304]	; (80029e4 <main+0x2a0>)
 80028b4:	484c      	ldr	r0, [pc, #304]	; (80029e8 <main+0x2a4>)
 80028b6:	f006 fe81 	bl	80095bc <siprintf>
 80028ba:	4603      	mov	r3, r0
 80028bc:	b29a      	uxth	r2, r3
 80028be:	230a      	movs	r3, #10
 80028c0:	4949      	ldr	r1, [pc, #292]	; (80029e8 <main+0x2a4>)
 80028c2:	484a      	ldr	r0, [pc, #296]	; (80029ec <main+0x2a8>)
 80028c4:	f005 fa1d 	bl	8007d02 <HAL_UART_Transmit>
	  //sprintf(data2,"%c,%c,%c,%c\n",sys,gyr,acc,mag);
	  HAL_UART_Transmit(&huart6,(uint8_t *)data2,sprintf(data2,"%d,%d,%d,%d\n",sys,gyr,acc,mag),10);
 80028c8:	4b38      	ldr	r3, [pc, #224]	; (80029ac <main+0x268>)
 80028ca:	6819      	ldr	r1, [r3, #0]
 80028cc:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <main+0x264>)
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <main+0x260>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a32      	ldr	r2, [pc, #200]	; (80029a0 <main+0x25c>)
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	9201      	str	r2, [sp, #4]
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	4603      	mov	r3, r0
 80028de:	460a      	mov	r2, r1
 80028e0:	4943      	ldr	r1, [pc, #268]	; (80029f0 <main+0x2ac>)
 80028e2:	4844      	ldr	r0, [pc, #272]	; (80029f4 <main+0x2b0>)
 80028e4:	f006 fe6a 	bl	80095bc <siprintf>
 80028e8:	4603      	mov	r3, r0
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	230a      	movs	r3, #10
 80028ee:	4941      	ldr	r1, [pc, #260]	; (80029f4 <main+0x2b0>)
 80028f0:	483e      	ldr	r0, [pc, #248]	; (80029ec <main+0x2a8>)
 80028f2:	f005 fa06 	bl	8007d02 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart6,(uint8_t *)data3,sprintf(data3,"%0.5f,%0.5f,%0.5f,%0.5f,%0.5f,%0.5f\n",ax,ay,az,gx,gy,gz),10);
 80028f6:	4b37      	ldr	r3, [pc, #220]	; (80029d4 <main+0x290>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fe24 	bl	8000548 <__aeabi_f2d>
 8002900:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002904:	4b32      	ldr	r3, [pc, #200]	; (80029d0 <main+0x28c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fe1d 	bl	8000548 <__aeabi_f2d>
 800290e:	4604      	mov	r4, r0
 8002910:	460d      	mov	r5, r1
 8002912:	4b2e      	ldr	r3, [pc, #184]	; (80029cc <main+0x288>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fe16 	bl	8000548 <__aeabi_f2d>
 800291c:	4680      	mov	r8, r0
 800291e:	4689      	mov	r9, r1
 8002920:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <main+0x284>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fe0f 	bl	8000548 <__aeabi_f2d>
 800292a:	4682      	mov	sl, r0
 800292c:	468b      	mov	fp, r1
 800292e:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <main+0x280>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fe08 	bl	8000548 <__aeabi_f2d>
 8002938:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800293c:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <main+0x27c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fe01 	bl	8000548 <__aeabi_f2d>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800294e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002952:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002956:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800295a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800295e:	e9cd 4500 	strd	r4, r5, [sp]
 8002962:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002966:	4924      	ldr	r1, [pc, #144]	; (80029f8 <main+0x2b4>)
 8002968:	4824      	ldr	r0, [pc, #144]	; (80029fc <main+0x2b8>)
 800296a:	f006 fe27 	bl	80095bc <siprintf>
 800296e:	4603      	mov	r3, r0
 8002970:	b29a      	uxth	r2, r3
 8002972:	230a      	movs	r3, #10
 8002974:	4921      	ldr	r1, [pc, #132]	; (80029fc <main+0x2b8>)
 8002976:	481d      	ldr	r0, [pc, #116]	; (80029ec <main+0x2a8>)
 8002978:	f005 f9c3 	bl	8007d02 <HAL_UART_Transmit>
	  delay_ms(1000);
 800297c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002980:	f7ff fbd6 	bl	8002130 <delay_ms>
	  bno055_calibrations_status(&sys,&gyr,&acc,&mag);
 8002984:	e735      	b.n	80027f2 <main+0xae>
 8002986:	bf00      	nop
 8002988:	20000920 	.word	0x20000920
 800298c:	20000008 	.word	0x20000008
 8002990:	0800bac0 	.word	0x0800bac0
 8002994:	20000000 	.word	0x20000000
 8002998:	0800bac8 	.word	0x0800bac8
 800299c:	0800d5ec 	.word	0x0800d5ec
 80029a0:	20000870 	.word	0x20000870
 80029a4:	2000086c 	.word	0x2000086c
 80029a8:	20000868 	.word	0x20000868
 80029ac:	20000864 	.word	0x20000864
 80029b0:	20000854 	.word	0x20000854
 80029b4:	20000850 	.word	0x20000850
 80029b8:	2000084c 	.word	0x2000084c
 80029bc:	20000848 	.word	0x20000848
 80029c0:	20000888 	.word	0x20000888
 80029c4:	20000884 	.word	0x20000884
 80029c8:	20000880 	.word	0x20000880
 80029cc:	2000087c 	.word	0x2000087c
 80029d0:	20000878 	.word	0x20000878
 80029d4:	20000874 	.word	0x20000874
 80029d8:	20000860 	.word	0x20000860
 80029dc:	2000085c 	.word	0x2000085c
 80029e0:	20000858 	.word	0x20000858
 80029e4:	0800bad0 	.word	0x0800bad0
 80029e8:	200006e0 	.word	0x200006e0
 80029ec:	20000a7c 	.word	0x20000a7c
 80029f0:	0800bafc 	.word	0x0800bafc
 80029f4:	20000758 	.word	0x20000758
 80029f8:	0800bb0c 	.word	0x0800bb0c
 80029fc:	200007d0 	.word	0x200007d0

08002a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b094      	sub	sp, #80	; 0x50
 8002a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a06:	f107 0320 	add.w	r3, r7, #32
 8002a0a:	2230      	movs	r2, #48	; 0x30
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f006 f962 	bl	8008cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a14:	f107 030c 	add.w	r3, r7, #12
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	4b28      	ldr	r3, [pc, #160]	; (8002acc <SystemClock_Config+0xcc>)
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	4a27      	ldr	r2, [pc, #156]	; (8002acc <SystemClock_Config+0xcc>)
 8002a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a32:	6413      	str	r3, [r2, #64]	; 0x40
 8002a34:	4b25      	ldr	r3, [pc, #148]	; (8002acc <SystemClock_Config+0xcc>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a40:	2300      	movs	r3, #0
 8002a42:	607b      	str	r3, [r7, #4]
 8002a44:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <SystemClock_Config+0xd0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a21      	ldr	r2, [pc, #132]	; (8002ad0 <SystemClock_Config+0xd0>)
 8002a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <SystemClock_Config+0xd0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a60:	2301      	movs	r3, #1
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a64:	2310      	movs	r3, #16
 8002a66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a70:	2308      	movs	r3, #8
 8002a72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a74:	23a8      	movs	r3, #168	; 0xa8
 8002a76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a80:	f107 0320 	add.w	r3, r7, #32
 8002a84:	4618      	mov	r0, r3
 8002a86:	f003 fe43 	bl	8006710 <HAL_RCC_OscConfig>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a90:	f000 f820 	bl	8002ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a94:	230f      	movs	r3, #15
 8002a96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002aa0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002aa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	2105      	movs	r1, #5
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f004 f8a4 	bl	8006c00 <HAL_RCC_ClockConfig>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002abe:	f000 f809 	bl	8002ad4 <Error_Handler>
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3750      	adds	r7, #80	; 0x50
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40007000 	.word	0x40007000

08002ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad8:	b672      	cpsid	i
}
 8002ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002adc:	e7fe      	b.n	8002adc <Error_Handler+0x8>
	...

08002ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_MspInit+0x4c>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <HAL_MspInit+0x4c>)
 8002af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af4:	6453      	str	r3, [r2, #68]	; 0x44
 8002af6:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <HAL_MspInit+0x4c>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_MspInit+0x4c>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <HAL_MspInit+0x4c>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_MspInit+0x4c>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800

08002b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <NMI_Handler+0x4>

08002b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b3a:	e7fe      	b.n	8002b3a <HardFault_Handler+0x4>

08002b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <MemManage_Handler+0x4>

08002b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b46:	e7fe      	b.n	8002b46 <BusFault_Handler+0x4>

08002b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b4c:	e7fe      	b.n	8002b4c <UsageFault_Handler+0x4>

08002b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b7c:	f001 f95a 	bl	8003e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <DMA1_Stream0_IRQHandler+0x10>)
 8002b8a:	f001 ff47 	bl	8004a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000b80 	.word	0x20000b80

08002b98 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b9c:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <DMA1_Stream1_IRQHandler+0x10>)
 8002b9e:	f001 ff3d 	bl	8004a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000dc0 	.word	0x20000dc0

08002bac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <DMA1_Stream2_IRQHandler+0x10>)
 8002bb2:	f001 ff33 	bl	8004a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000ac0 	.word	0x20000ac0

08002bc0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <DMA1_Stream3_IRQHandler+0x10>)
 8002bc6:	f001 ff29 	bl	8004a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000e20 	.word	0x20000e20

08002bd4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <DMA1_Stream4_IRQHandler+0x10>)
 8002bda:	f001 ff1f 	bl	8004a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000b20 	.word	0x20000b20

08002be8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <DMA1_Stream5_IRQHandler+0x10>)
 8002bee:	f001 ff15 	bl	8004a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000d00 	.word	0x20000d00

08002bfc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <DMA1_Stream6_IRQHandler+0x10>)
 8002c02:	f001 ff0b 	bl	8004a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000d60 	.word	0x20000d60

08002c10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <USART1_IRQHandler+0x10>)
 8002c16:	f005 f907 	bl	8007e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200009f4 	.word	0x200009f4

08002c24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <USART3_IRQHandler+0x10>)
 8002c2a:	f005 f8fd 	bl	8007e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000a38 	.word	0x20000a38

08002c38 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <DMA1_Stream7_IRQHandler+0x10>)
 8002c3e:	f001 feed 	bl	8004a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000be0 	.word	0x20000be0

08002c4c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <UART5_IRQHandler+0x10>)
 8002c52:	f005 f8e9 	bl	8007e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200009b0 	.word	0x200009b0

08002c60 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <DMA2_Stream1_IRQHandler+0x10>)
 8002c66:	f001 fed9 	bl	8004a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000e80 	.word	0x20000e80

08002c74 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <DMA2_Stream2_IRQHandler+0x10>)
 8002c7a:	f001 fecf 	bl	8004a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000c40 	.word	0x20000c40

08002c88 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <DMA2_Stream6_IRQHandler+0x10>)
 8002c8e:	f001 fec5 	bl	8004a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000ee0 	.word	0x20000ee0

08002c9c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <DMA2_Stream7_IRQHandler+0x10>)
 8002ca2:	f001 febb 	bl	8004a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000ca0 	.word	0x20000ca0

08002cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
	return 1;
 8002cb4:	2301      	movs	r3, #1
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_kill>:

int _kill(int pid, int sig)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cca:	f005 ffcd 	bl	8008c68 <__errno>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2216      	movs	r2, #22
 8002cd2:	601a      	str	r2, [r3, #0]
	return -1;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_exit>:

void _exit (int status)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ffe7 	bl	8002cc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cf2:	e7fe      	b.n	8002cf2 <_exit+0x12>

08002cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e00a      	b.n	8002d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d06:	f3af 8000 	nop.w
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	60ba      	str	r2, [r7, #8]
 8002d12:	b2ca      	uxtb	r2, r1
 8002d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dbf0      	blt.n	8002d06 <_read+0x12>
	}

return len;
 8002d24:	687b      	ldr	r3, [r7, #4]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e009      	b.n	8002d54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	60ba      	str	r2, [r7, #8]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dbf1      	blt.n	8002d40 <_write+0x12>
	}
	return len;
 8002d5c:	687b      	ldr	r3, [r7, #4]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_close>:

int _close(int file)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
	return -1;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d8e:	605a      	str	r2, [r3, #4]
	return 0;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <_isatty>:

int _isatty(int file)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
	return 1;
 8002da6:	2301      	movs	r3, #1
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
	return 0;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <_sbrk+0x5c>)
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <_sbrk+0x60>)
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <_sbrk+0x64>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <_sbrk+0x64>)
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <_sbrk+0x68>)
 8002df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <_sbrk+0x64>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d207      	bcs.n	8002e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e00:	f005 ff32 	bl	8008c68 <__errno>
 8002e04:	4603      	mov	r3, r0
 8002e06:	220c      	movs	r2, #12
 8002e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	e009      	b.n	8002e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <_sbrk+0x64>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <_sbrk+0x64>)
 8002e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e22:	68fb      	ldr	r3, [r7, #12]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20020000 	.word	0x20020000
 8002e30:	00000400 	.word	0x00000400
 8002e34:	2000088c 	.word	0x2000088c
 8002e38:	20000f58 	.word	0x20000f58

08002e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <SystemInit+0x20>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <SystemInit+0x20>)
 8002e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b096      	sub	sp, #88	; 0x58
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	609a      	str	r2, [r3, #8]
 8002e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	60da      	str	r2, [r3, #12]
 8002e8c:	611a      	str	r2, [r3, #16]
 8002e8e:	615a      	str	r2, [r3, #20]
 8002e90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2220      	movs	r2, #32
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f005 ff1d 	bl	8008cd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e9e:	4b50      	ldr	r3, [pc, #320]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002ea0:	4a50      	ldr	r2, [pc, #320]	; (8002fe4 <MX_TIM1_Init+0x184>)
 8002ea2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ea4:	4b4e      	ldr	r3, [pc, #312]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eaa:	4b4d      	ldr	r3, [pc, #308]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8002eb0:	4b4b      	ldr	r3, [pc, #300]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002eb2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002eb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb8:	4b49      	ldr	r3, [pc, #292]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ebe:	4b48      	ldr	r3, [pc, #288]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec4:	4b46      	ldr	r3, [pc, #280]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002eca:	4845      	ldr	r0, [pc, #276]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002ecc:	f004 f878 	bl	8006fc0 <HAL_TIM_Base_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002ed6:	f7ff fdfd 	bl	8002ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ede:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ee0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	483e      	ldr	r0, [pc, #248]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002ee8:	f004 fa3e 	bl	8007368 <HAL_TIM_ConfigClockSource>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002ef2:	f7ff fdef 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ef6:	483a      	ldr	r0, [pc, #232]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002ef8:	f004 f91a 	bl	8007130 <HAL_TIM_PWM_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002f02:	f7ff fde7 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f12:	4619      	mov	r1, r3
 8002f14:	4832      	ldr	r0, [pc, #200]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002f16:	f004 fdd9 	bl	8007acc <HAL_TIMEx_MasterConfigSynchronization>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002f20:	f7ff fdd8 	bl	8002ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f24:	2360      	movs	r3, #96	; 0x60
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f30:	2300      	movs	r3, #0
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f44:	2200      	movs	r2, #0
 8002f46:	4619      	mov	r1, r3
 8002f48:	4825      	ldr	r0, [pc, #148]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002f4a:	f004 f94b 	bl	80071e4 <HAL_TIM_PWM_ConfigChannel>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002f54:	f7ff fdbe 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	4619      	mov	r1, r3
 8002f60:	481f      	ldr	r0, [pc, #124]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002f62:	f004 f93f 	bl	80071e4 <HAL_TIM_PWM_ConfigChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002f6c:	f7ff fdb2 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f74:	2208      	movs	r2, #8
 8002f76:	4619      	mov	r1, r3
 8002f78:	4819      	ldr	r0, [pc, #100]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002f7a:	f004 f933 	bl	80071e4 <HAL_TIM_PWM_ConfigChannel>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002f84:	f7ff fda6 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f8c:	220c      	movs	r2, #12
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4813      	ldr	r0, [pc, #76]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002f92:	f004 f927 	bl	80071e4 <HAL_TIM_PWM_ConfigChannel>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002f9c:	f7ff fd9a 	bl	8002ad4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fb8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4807      	ldr	r0, [pc, #28]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002fc4:	f004 fdfe 	bl	8007bc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002fce:	f7ff fd81 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002fd2:	4803      	ldr	r0, [pc, #12]	; (8002fe0 <MX_TIM1_Init+0x180>)
 8002fd4:	f000 f9b4 	bl	8003340 <HAL_TIM_MspPostInit>

}
 8002fd8:	bf00      	nop
 8002fda:	3758      	adds	r7, #88	; 0x58
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000890 	.word	0x20000890
 8002fe4:	40010000 	.word	0x40010000

08002fe8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fee:	f107 0308 	add.w	r3, r7, #8
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	605a      	str	r2, [r3, #4]
 8002ff8:	609a      	str	r2, [r3, #8]
 8002ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ffc:	463b      	mov	r3, r7
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <MX_TIM3_Init+0x94>)
 8003006:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <MX_TIM3_Init+0x98>)
 8003008:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800300a:	4b1c      	ldr	r3, [pc, #112]	; (800307c <MX_TIM3_Init+0x94>)
 800300c:	2200      	movs	r2, #0
 800300e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003010:	4b1a      	ldr	r3, [pc, #104]	; (800307c <MX_TIM3_Init+0x94>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003016:	4b19      	ldr	r3, [pc, #100]	; (800307c <MX_TIM3_Init+0x94>)
 8003018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800301c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301e:	4b17      	ldr	r3, [pc, #92]	; (800307c <MX_TIM3_Init+0x94>)
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <MX_TIM3_Init+0x94>)
 8003026:	2200      	movs	r2, #0
 8003028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800302a:	4814      	ldr	r0, [pc, #80]	; (800307c <MX_TIM3_Init+0x94>)
 800302c:	f003 ffc8 	bl	8006fc0 <HAL_TIM_Base_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003036:	f7ff fd4d 	bl	8002ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800303a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800303e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003040:	f107 0308 	add.w	r3, r7, #8
 8003044:	4619      	mov	r1, r3
 8003046:	480d      	ldr	r0, [pc, #52]	; (800307c <MX_TIM3_Init+0x94>)
 8003048:	f004 f98e 	bl	8007368 <HAL_TIM_ConfigClockSource>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003052:	f7ff fd3f 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800305a:	2300      	movs	r3, #0
 800305c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800305e:	463b      	mov	r3, r7
 8003060:	4619      	mov	r1, r3
 8003062:	4806      	ldr	r0, [pc, #24]	; (800307c <MX_TIM3_Init+0x94>)
 8003064:	f004 fd32 	bl	8007acc <HAL_TIMEx_MasterConfigSynchronization>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800306e:	f7ff fd31 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003072:	bf00      	nop
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200008d8 	.word	0x200008d8
 8003080:	40000400 	.word	0x40000400

08003084 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800308a:	f107 0308 	add.w	r3, r7, #8
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003098:	463b      	mov	r3, r7
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <MX_TIM5_Init+0x94>)
 80030a2:	4a1e      	ldr	r2, [pc, #120]	; (800311c <MX_TIM5_Init+0x98>)
 80030a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 80030a6:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <MX_TIM5_Init+0x94>)
 80030a8:	2253      	movs	r2, #83	; 0x53
 80030aa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <MX_TIM5_Init+0x94>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffff;
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <MX_TIM5_Init+0x94>)
 80030b4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80030b8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ba:	4b17      	ldr	r3, [pc, #92]	; (8003118 <MX_TIM5_Init+0x94>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c0:	4b15      	ldr	r3, [pc, #84]	; (8003118 <MX_TIM5_Init+0x94>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80030c6:	4814      	ldr	r0, [pc, #80]	; (8003118 <MX_TIM5_Init+0x94>)
 80030c8:	f003 ff7a 	bl	8006fc0 <HAL_TIM_Base_Init>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80030d2:	f7ff fcff 	bl	8002ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80030dc:	f107 0308 	add.w	r3, r7, #8
 80030e0:	4619      	mov	r1, r3
 80030e2:	480d      	ldr	r0, [pc, #52]	; (8003118 <MX_TIM5_Init+0x94>)
 80030e4:	f004 f940 	bl	8007368 <HAL_TIM_ConfigClockSource>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80030ee:	f7ff fcf1 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80030fa:	463b      	mov	r3, r7
 80030fc:	4619      	mov	r1, r3
 80030fe:	4806      	ldr	r0, [pc, #24]	; (8003118 <MX_TIM5_Init+0x94>)
 8003100:	f004 fce4 	bl	8007acc <HAL_TIMEx_MasterConfigSynchronization>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800310a:	f7ff fce3 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000920 	.word	0x20000920
 800311c:	40000c00 	.word	0x40000c00

08003120 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b096      	sub	sp, #88	; 0x58
 8003124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003126:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	609a      	str	r2, [r3, #8]
 8003132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003134:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800313e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	609a      	str	r2, [r3, #8]
 800314a:	60da      	str	r2, [r3, #12]
 800314c:	611a      	str	r2, [r3, #16]
 800314e:	615a      	str	r2, [r3, #20]
 8003150:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	2220      	movs	r2, #32
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f005 fdbd 	bl	8008cd8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800315e:	4b44      	ldr	r3, [pc, #272]	; (8003270 <MX_TIM8_Init+0x150>)
 8003160:	4a44      	ldr	r2, [pc, #272]	; (8003274 <MX_TIM8_Init+0x154>)
 8003162:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003164:	4b42      	ldr	r3, [pc, #264]	; (8003270 <MX_TIM8_Init+0x150>)
 8003166:	2200      	movs	r2, #0
 8003168:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800316a:	4b41      	ldr	r3, [pc, #260]	; (8003270 <MX_TIM8_Init+0x150>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003170:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <MX_TIM8_Init+0x150>)
 8003172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003176:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003178:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <MX_TIM8_Init+0x150>)
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800317e:	4b3c      	ldr	r3, [pc, #240]	; (8003270 <MX_TIM8_Init+0x150>)
 8003180:	2200      	movs	r2, #0
 8003182:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003184:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <MX_TIM8_Init+0x150>)
 8003186:	2200      	movs	r2, #0
 8003188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800318a:	4839      	ldr	r0, [pc, #228]	; (8003270 <MX_TIM8_Init+0x150>)
 800318c:	f003 ff18 	bl	8006fc0 <HAL_TIM_Base_Init>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003196:	f7ff fc9d 	bl	8002ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800319a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800319e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80031a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031a4:	4619      	mov	r1, r3
 80031a6:	4832      	ldr	r0, [pc, #200]	; (8003270 <MX_TIM8_Init+0x150>)
 80031a8:	f004 f8de 	bl	8007368 <HAL_TIM_ConfigClockSource>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80031b2:	f7ff fc8f 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80031b6:	482e      	ldr	r0, [pc, #184]	; (8003270 <MX_TIM8_Init+0x150>)
 80031b8:	f003 ffba 	bl	8007130 <HAL_TIM_PWM_Init>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80031c2:	f7ff fc87 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031c6:	2300      	movs	r3, #0
 80031c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80031ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031d2:	4619      	mov	r1, r3
 80031d4:	4826      	ldr	r0, [pc, #152]	; (8003270 <MX_TIM8_Init+0x150>)
 80031d6:	f004 fc79 	bl	8007acc <HAL_TIMEx_MasterConfigSynchronization>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80031e0:	f7ff fc78 	bl	8002ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031e4:	2360      	movs	r3, #96	; 0x60
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80031f0:	2300      	movs	r3, #0
 80031f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031f8:	2300      	movs	r3, #0
 80031fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80031fc:	2300      	movs	r3, #0
 80031fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003204:	2208      	movs	r2, #8
 8003206:	4619      	mov	r1, r3
 8003208:	4819      	ldr	r0, [pc, #100]	; (8003270 <MX_TIM8_Init+0x150>)
 800320a:	f003 ffeb 	bl	80071e4 <HAL_TIM_PWM_ConfigChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8003214:	f7ff fc5e 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800321c:	220c      	movs	r2, #12
 800321e:	4619      	mov	r1, r3
 8003220:	4813      	ldr	r0, [pc, #76]	; (8003270 <MX_TIM8_Init+0x150>)
 8003222:	f003 ffdf 	bl	80071e4 <HAL_TIM_PWM_ConfigChannel>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800322c:	f7ff fc52 	bl	8002ad4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003234:	2300      	movs	r3, #0
 8003236:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003248:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800324e:	1d3b      	adds	r3, r7, #4
 8003250:	4619      	mov	r1, r3
 8003252:	4807      	ldr	r0, [pc, #28]	; (8003270 <MX_TIM8_Init+0x150>)
 8003254:	f004 fcb6 	bl	8007bc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800325e:	f7ff fc39 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003262:	4803      	ldr	r0, [pc, #12]	; (8003270 <MX_TIM8_Init+0x150>)
 8003264:	f000 f86c 	bl	8003340 <HAL_TIM_MspPostInit>

}
 8003268:	bf00      	nop
 800326a:	3758      	adds	r7, #88	; 0x58
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000968 	.word	0x20000968
 8003274:	40010400 	.word	0x40010400

08003278 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a29      	ldr	r2, [pc, #164]	; (800332c <HAL_TIM_Base_MspInit+0xb4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d10e      	bne.n	80032a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	4b28      	ldr	r3, [pc, #160]	; (8003330 <HAL_TIM_Base_MspInit+0xb8>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	4a27      	ldr	r2, [pc, #156]	; (8003330 <HAL_TIM_Base_MspInit+0xb8>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6453      	str	r3, [r2, #68]	; 0x44
 800329a:	4b25      	ldr	r3, [pc, #148]	; (8003330 <HAL_TIM_Base_MspInit+0xb8>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80032a6:	e03a      	b.n	800331e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a21      	ldr	r2, [pc, #132]	; (8003334 <HAL_TIM_Base_MspInit+0xbc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10e      	bne.n	80032d0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <HAL_TIM_Base_MspInit+0xb8>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <HAL_TIM_Base_MspInit+0xb8>)
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	6413      	str	r3, [r2, #64]	; 0x40
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_TIM_Base_MspInit+0xb8>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]
}
 80032ce:	e026      	b.n	800331e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a18      	ldr	r2, [pc, #96]	; (8003338 <HAL_TIM_Base_MspInit+0xc0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d10e      	bne.n	80032f8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_TIM_Base_MspInit+0xb8>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4a13      	ldr	r2, [pc, #76]	; (8003330 <HAL_TIM_Base_MspInit+0xb8>)
 80032e4:	f043 0308 	orr.w	r3, r3, #8
 80032e8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_TIM_Base_MspInit+0xb8>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
}
 80032f6:	e012      	b.n	800331e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0f      	ldr	r2, [pc, #60]	; (800333c <HAL_TIM_Base_MspInit+0xc4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d10d      	bne.n	800331e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <HAL_TIM_Base_MspInit+0xb8>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <HAL_TIM_Base_MspInit+0xb8>)
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	6453      	str	r3, [r2, #68]	; 0x44
 8003312:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_TIM_Base_MspInit+0xb8>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
}
 800331e:	bf00      	nop
 8003320:	371c      	adds	r7, #28
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40010000 	.word	0x40010000
 8003330:	40023800 	.word	0x40023800
 8003334:	40000400 	.word	0x40000400
 8003338:	40000c00 	.word	0x40000c00
 800333c:	40010400 	.word	0x40010400

08003340 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <HAL_TIM_MspPostInit+0xb4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d11f      	bne.n	80033a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_TIM_MspPostInit+0xb8>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a23      	ldr	r2, [pc, #140]	; (80033f8 <HAL_TIM_MspPostInit+0xb8>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <HAL_TIM_MspPostInit+0xb8>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MTR1_PWM_MCU_Pin|MTR2_PWM_MCU_Pin|MTR3_PWM_MCU_Pin|MTR4_PWM_MCU_Pin;
 800337e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003384:	2302      	movs	r3, #2
 8003386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	2300      	movs	r3, #0
 800338e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003390:	2301      	movs	r3, #1
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	4619      	mov	r1, r3
 800339a:	4818      	ldr	r0, [pc, #96]	; (80033fc <HAL_TIM_MspPostInit+0xbc>)
 800339c:	f001 fd7a 	bl	8004e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80033a0:	e023      	b.n	80033ea <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a16      	ldr	r2, [pc, #88]	; (8003400 <HAL_TIM_MspPostInit+0xc0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d11e      	bne.n	80033ea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <HAL_TIM_MspPostInit+0xb8>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	4a10      	ldr	r2, [pc, #64]	; (80033f8 <HAL_TIM_MspPostInit+0xb8>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	6313      	str	r3, [r2, #48]	; 0x30
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <HAL_TIM_MspPostInit+0xb8>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_PWM_TIM8_CH3_Pin|LED_5050_PWM_IN_Pin;
 80033c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80033da:	2303      	movs	r3, #3
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033de:	f107 0314 	add.w	r3, r7, #20
 80033e2:	4619      	mov	r1, r3
 80033e4:	4807      	ldr	r0, [pc, #28]	; (8003404 <HAL_TIM_MspPostInit+0xc4>)
 80033e6:	f001 fd55 	bl	8004e94 <HAL_GPIO_Init>
}
 80033ea:	bf00      	nop
 80033ec:	3728      	adds	r7, #40	; 0x28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40010000 	.word	0x40010000
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40020000 	.word	0x40020000
 8003400:	40010400 	.word	0x40010400
 8003404:	40020800 	.word	0x40020800

08003408 <MX_UART5_Init>:
  /* USER CODE END UART4_Init 2 */

}
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <MX_UART5_Init+0x4c>)
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <MX_UART5_Init+0x50>)
 8003410:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <MX_UART5_Init+0x4c>)
 8003414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003418:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <MX_UART5_Init+0x4c>)
 800341c:	2200      	movs	r2, #0
 800341e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <MX_UART5_Init+0x4c>)
 8003422:	2200      	movs	r2, #0
 8003424:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <MX_UART5_Init+0x4c>)
 8003428:	2200      	movs	r2, #0
 800342a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <MX_UART5_Init+0x4c>)
 800342e:	220c      	movs	r2, #12
 8003430:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <MX_UART5_Init+0x4c>)
 8003434:	2200      	movs	r2, #0
 8003436:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <MX_UART5_Init+0x4c>)
 800343a:	2200      	movs	r2, #0
 800343c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800343e:	4805      	ldr	r0, [pc, #20]	; (8003454 <MX_UART5_Init+0x4c>)
 8003440:	f004 fc12 	bl	8007c68 <HAL_UART_Init>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800344a:	f7ff fb43 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200009b0 	.word	0x200009b0
 8003458:	40005000 	.word	0x40005000

0800345c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003462:	4a12      	ldr	r2, [pc, #72]	; (80034ac <MX_USART1_UART_Init+0x50>)
 8003464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800346c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800346e:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003470:	2200      	movs	r2, #0
 8003472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003476:	2200      	movs	r2, #0
 8003478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 800347c:	2200      	movs	r2, #0
 800347e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003482:	220c      	movs	r2, #12
 8003484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003486:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003488:	2200      	movs	r2, #0
 800348a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 800348e:	2200      	movs	r2, #0
 8003490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003492:	4805      	ldr	r0, [pc, #20]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003494:	f004 fbe8 	bl	8007c68 <HAL_UART_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800349e:	f7ff fb19 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200009f4 	.word	0x200009f4
 80034ac:	40011000 	.word	0x40011000

080034b0 <MX_USART3_UART_Init>:

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <MX_USART3_UART_Init+0x4c>)
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <MX_USART3_UART_Init+0x50>)
 80034b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <MX_USART3_UART_Init+0x4c>)
 80034bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80034c2:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <MX_USART3_UART_Init+0x4c>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80034c8:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <MX_USART3_UART_Init+0x4c>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <MX_USART3_UART_Init+0x4c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <MX_USART3_UART_Init+0x4c>)
 80034d6:	220c      	movs	r2, #12
 80034d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034da:	4b08      	ldr	r3, [pc, #32]	; (80034fc <MX_USART3_UART_Init+0x4c>)
 80034dc:	2200      	movs	r2, #0
 80034de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <MX_USART3_UART_Init+0x4c>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034e6:	4805      	ldr	r0, [pc, #20]	; (80034fc <MX_USART3_UART_Init+0x4c>)
 80034e8:	f004 fbbe 	bl	8007c68 <HAL_UART_Init>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80034f2:	f7ff faef 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000a38 	.word	0x20000a38
 8003500:	40004800 	.word	0x40004800

08003504 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <MX_USART6_UART_Init+0x4c>)
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <MX_USART6_UART_Init+0x50>)
 800350c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <MX_USART6_UART_Init+0x4c>)
 8003510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003514:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003516:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <MX_USART6_UART_Init+0x4c>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <MX_USART6_UART_Init+0x4c>)
 800351e:	2200      	movs	r2, #0
 8003520:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <MX_USART6_UART_Init+0x4c>)
 8003524:	2200      	movs	r2, #0
 8003526:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <MX_USART6_UART_Init+0x4c>)
 800352a:	220c      	movs	r2, #12
 800352c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <MX_USART6_UART_Init+0x4c>)
 8003530:	2200      	movs	r2, #0
 8003532:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <MX_USART6_UART_Init+0x4c>)
 8003536:	2200      	movs	r2, #0
 8003538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800353a:	4805      	ldr	r0, [pc, #20]	; (8003550 <MX_USART6_UART_Init+0x4c>)
 800353c:	f004 fb94 	bl	8007c68 <HAL_UART_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003546:	f7ff fac5 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000a7c 	.word	0x20000a7c
 8003554:	40011400 	.word	0x40011400

08003558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b094      	sub	sp, #80	; 0x50
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a46      	ldr	r2, [pc, #280]	; (8003690 <HAL_UART_MspInit+0x138>)
 8003576:	4293      	cmp	r3, r2
 8003578:	f040 8098 	bne.w	80036ac <HAL_UART_MspInit+0x154>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800357c:	2300      	movs	r3, #0
 800357e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003580:	4b44      	ldr	r3, [pc, #272]	; (8003694 <HAL_UART_MspInit+0x13c>)
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	4a43      	ldr	r2, [pc, #268]	; (8003694 <HAL_UART_MspInit+0x13c>)
 8003586:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800358a:	6413      	str	r3, [r2, #64]	; 0x40
 800358c:	4b41      	ldr	r3, [pc, #260]	; (8003694 <HAL_UART_MspInit+0x13c>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003594:	63bb      	str	r3, [r7, #56]	; 0x38
 8003596:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003598:	2300      	movs	r3, #0
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
 800359c:	4b3d      	ldr	r3, [pc, #244]	; (8003694 <HAL_UART_MspInit+0x13c>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	4a3c      	ldr	r2, [pc, #240]	; (8003694 <HAL_UART_MspInit+0x13c>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6313      	str	r3, [r2, #48]	; 0x30
 80035a8:	4b3a      	ldr	r3, [pc, #232]	; (8003694 <HAL_UART_MspInit+0x13c>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
 80035b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MCU_ESP32_TX_Pin|MCU_ESP32_RX_Pin;
 80035b4:	2303      	movs	r3, #3
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b8:	2302      	movs	r3, #2
 80035ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c0:	2303      	movs	r3, #3
 80035c2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035c4:	2308      	movs	r3, #8
 80035c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035cc:	4619      	mov	r1, r3
 80035ce:	4832      	ldr	r0, [pc, #200]	; (8003698 <HAL_UART_MspInit+0x140>)
 80035d0:	f001 fc60 	bl	8004e94 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80035d4:	4b31      	ldr	r3, [pc, #196]	; (800369c <HAL_UART_MspInit+0x144>)
 80035d6:	4a32      	ldr	r2, [pc, #200]	; (80036a0 <HAL_UART_MspInit+0x148>)
 80035d8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80035da:	4b30      	ldr	r3, [pc, #192]	; (800369c <HAL_UART_MspInit+0x144>)
 80035dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035e0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035e2:	4b2e      	ldr	r3, [pc, #184]	; (800369c <HAL_UART_MspInit+0x144>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e8:	4b2c      	ldr	r3, [pc, #176]	; (800369c <HAL_UART_MspInit+0x144>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ee:	4b2b      	ldr	r3, [pc, #172]	; (800369c <HAL_UART_MspInit+0x144>)
 80035f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035f4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035f6:	4b29      	ldr	r3, [pc, #164]	; (800369c <HAL_UART_MspInit+0x144>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035fc:	4b27      	ldr	r3, [pc, #156]	; (800369c <HAL_UART_MspInit+0x144>)
 80035fe:	2200      	movs	r2, #0
 8003600:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003602:	4b26      	ldr	r3, [pc, #152]	; (800369c <HAL_UART_MspInit+0x144>)
 8003604:	2200      	movs	r2, #0
 8003606:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003608:	4b24      	ldr	r3, [pc, #144]	; (800369c <HAL_UART_MspInit+0x144>)
 800360a:	2200      	movs	r2, #0
 800360c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800360e:	4b23      	ldr	r3, [pc, #140]	; (800369c <HAL_UART_MspInit+0x144>)
 8003610:	2200      	movs	r2, #0
 8003612:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003614:	4821      	ldr	r0, [pc, #132]	; (800369c <HAL_UART_MspInit+0x144>)
 8003616:	f001 f8c1 	bl	800479c <HAL_DMA_Init>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003620:	f7ff fa58 	bl	8002ad4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a1d      	ldr	r2, [pc, #116]	; (800369c <HAL_UART_MspInit+0x144>)
 8003628:	639a      	str	r2, [r3, #56]	; 0x38
 800362a:	4a1c      	ldr	r2, [pc, #112]	; (800369c <HAL_UART_MspInit+0x144>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003630:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <HAL_UART_MspInit+0x14c>)
 8003632:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <HAL_UART_MspInit+0x150>)
 8003634:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8003636:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <HAL_UART_MspInit+0x14c>)
 8003638:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800363c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800363e:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_UART_MspInit+0x14c>)
 8003640:	2240      	movs	r2, #64	; 0x40
 8003642:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <HAL_UART_MspInit+0x14c>)
 8003646:	2200      	movs	r2, #0
 8003648:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800364a:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <HAL_UART_MspInit+0x14c>)
 800364c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003650:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003652:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <HAL_UART_MspInit+0x14c>)
 8003654:	2200      	movs	r2, #0
 8003656:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_UART_MspInit+0x14c>)
 800365a:	2200      	movs	r2, #0
 800365c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800365e:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_UART_MspInit+0x14c>)
 8003660:	2200      	movs	r2, #0
 8003662:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003664:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <HAL_UART_MspInit+0x14c>)
 8003666:	2200      	movs	r2, #0
 8003668:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800366a:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_UART_MspInit+0x14c>)
 800366c:	2200      	movs	r2, #0
 800366e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003670:	480c      	ldr	r0, [pc, #48]	; (80036a4 <HAL_UART_MspInit+0x14c>)
 8003672:	f001 f893 	bl	800479c <HAL_DMA_Init>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800367c:	f7ff fa2a 	bl	8002ad4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a08      	ldr	r2, [pc, #32]	; (80036a4 <HAL_UART_MspInit+0x14c>)
 8003684:	635a      	str	r2, [r3, #52]	; 0x34
 8003686:	4a07      	ldr	r2, [pc, #28]	; (80036a4 <HAL_UART_MspInit+0x14c>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800368c:	e33a      	b.n	8003d04 <HAL_UART_MspInit+0x7ac>
 800368e:	bf00      	nop
 8003690:	40004c00 	.word	0x40004c00
 8003694:	40023800 	.word	0x40023800
 8003698:	40020000 	.word	0x40020000
 800369c:	20000ac0 	.word	0x20000ac0
 80036a0:	40026040 	.word	0x40026040
 80036a4:	20000b20 	.word	0x20000b20
 80036a8:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a59      	ldr	r2, [pc, #356]	; (8003818 <HAL_UART_MspInit+0x2c0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	f040 80c0 	bne.w	8003838 <HAL_UART_MspInit+0x2e0>
    __HAL_RCC_UART5_CLK_ENABLE();
 80036b8:	2300      	movs	r3, #0
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
 80036bc:	4b57      	ldr	r3, [pc, #348]	; (800381c <HAL_UART_MspInit+0x2c4>)
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	4a56      	ldr	r2, [pc, #344]	; (800381c <HAL_UART_MspInit+0x2c4>)
 80036c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036c6:	6413      	str	r3, [r2, #64]	; 0x40
 80036c8:	4b54      	ldr	r3, [pc, #336]	; (800381c <HAL_UART_MspInit+0x2c4>)
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d0:	633b      	str	r3, [r7, #48]	; 0x30
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036d4:	2300      	movs	r3, #0
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d8:	4b50      	ldr	r3, [pc, #320]	; (800381c <HAL_UART_MspInit+0x2c4>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	4a4f      	ldr	r2, [pc, #316]	; (800381c <HAL_UART_MspInit+0x2c4>)
 80036de:	f043 0304 	orr.w	r3, r3, #4
 80036e2:	6313      	str	r3, [r2, #48]	; 0x30
 80036e4:	4b4d      	ldr	r3, [pc, #308]	; (800381c <HAL_UART_MspInit+0x2c4>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036f0:	2300      	movs	r3, #0
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f4:	4b49      	ldr	r3, [pc, #292]	; (800381c <HAL_UART_MspInit+0x2c4>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	4a48      	ldr	r2, [pc, #288]	; (800381c <HAL_UART_MspInit+0x2c4>)
 80036fa:	f043 0308 	orr.w	r3, r3, #8
 80036fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003700:	4b46      	ldr	r3, [pc, #280]	; (800381c <HAL_UART_MspInit+0x2c4>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = MCU_UART5_TX_Pin;
 800370c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003710:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003712:	2302      	movs	r3, #2
 8003714:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371a:	2303      	movs	r3, #3
 800371c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800371e:	2308      	movs	r3, #8
 8003720:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8003722:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003726:	4619      	mov	r1, r3
 8003728:	483d      	ldr	r0, [pc, #244]	; (8003820 <HAL_UART_MspInit+0x2c8>)
 800372a:	f001 fbb3 	bl	8004e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MCU_UART5_RX_Pin;
 800372e:	2304      	movs	r3, #4
 8003730:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003732:	2302      	movs	r3, #2
 8003734:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373a:	2303      	movs	r3, #3
 800373c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800373e:	2308      	movs	r3, #8
 8003740:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8003742:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003746:	4619      	mov	r1, r3
 8003748:	4836      	ldr	r0, [pc, #216]	; (8003824 <HAL_UART_MspInit+0x2cc>)
 800374a:	f001 fba3 	bl	8004e94 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800374e:	4b36      	ldr	r3, [pc, #216]	; (8003828 <HAL_UART_MspInit+0x2d0>)
 8003750:	4a36      	ldr	r2, [pc, #216]	; (800382c <HAL_UART_MspInit+0x2d4>)
 8003752:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003754:	4b34      	ldr	r3, [pc, #208]	; (8003828 <HAL_UART_MspInit+0x2d0>)
 8003756:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800375a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800375c:	4b32      	ldr	r3, [pc, #200]	; (8003828 <HAL_UART_MspInit+0x2d0>)
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003762:	4b31      	ldr	r3, [pc, #196]	; (8003828 <HAL_UART_MspInit+0x2d0>)
 8003764:	2200      	movs	r2, #0
 8003766:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003768:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <HAL_UART_MspInit+0x2d0>)
 800376a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800376e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003770:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <HAL_UART_MspInit+0x2d0>)
 8003772:	2200      	movs	r2, #0
 8003774:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003776:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <HAL_UART_MspInit+0x2d0>)
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800377c:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <HAL_UART_MspInit+0x2d0>)
 800377e:	2200      	movs	r2, #0
 8003780:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003782:	4b29      	ldr	r3, [pc, #164]	; (8003828 <HAL_UART_MspInit+0x2d0>)
 8003784:	2200      	movs	r2, #0
 8003786:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003788:	4b27      	ldr	r3, [pc, #156]	; (8003828 <HAL_UART_MspInit+0x2d0>)
 800378a:	2200      	movs	r2, #0
 800378c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800378e:	4826      	ldr	r0, [pc, #152]	; (8003828 <HAL_UART_MspInit+0x2d0>)
 8003790:	f001 f804 	bl	800479c <HAL_DMA_Init>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_UART_MspInit+0x246>
      Error_Handler();
 800379a:	f7ff f99b 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a21      	ldr	r2, [pc, #132]	; (8003828 <HAL_UART_MspInit+0x2d0>)
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
 80037a4:	4a20      	ldr	r2, [pc, #128]	; (8003828 <HAL_UART_MspInit+0x2d0>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80037aa:	4b21      	ldr	r3, [pc, #132]	; (8003830 <HAL_UART_MspInit+0x2d8>)
 80037ac:	4a21      	ldr	r2, [pc, #132]	; (8003834 <HAL_UART_MspInit+0x2dc>)
 80037ae:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80037b0:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <HAL_UART_MspInit+0x2d8>)
 80037b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037b6:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037b8:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <HAL_UART_MspInit+0x2d8>)
 80037ba:	2240      	movs	r2, #64	; 0x40
 80037bc:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037be:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <HAL_UART_MspInit+0x2d8>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <HAL_UART_MspInit+0x2d8>)
 80037c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ca:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <HAL_UART_MspInit+0x2d8>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <HAL_UART_MspInit+0x2d8>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80037d8:	4b15      	ldr	r3, [pc, #84]	; (8003830 <HAL_UART_MspInit+0x2d8>)
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037de:	4b14      	ldr	r3, [pc, #80]	; (8003830 <HAL_UART_MspInit+0x2d8>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037e4:	4b12      	ldr	r3, [pc, #72]	; (8003830 <HAL_UART_MspInit+0x2d8>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80037ea:	4811      	ldr	r0, [pc, #68]	; (8003830 <HAL_UART_MspInit+0x2d8>)
 80037ec:	f000 ffd6 	bl	800479c <HAL_DMA_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_UART_MspInit+0x2a2>
      Error_Handler();
 80037f6:	f7ff f96d 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a0c      	ldr	r2, [pc, #48]	; (8003830 <HAL_UART_MspInit+0x2d8>)
 80037fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003800:	4a0b      	ldr	r2, [pc, #44]	; (8003830 <HAL_UART_MspInit+0x2d8>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003806:	2200      	movs	r2, #0
 8003808:	2100      	movs	r1, #0
 800380a:	2035      	movs	r0, #53	; 0x35
 800380c:	f000 ff8f 	bl	800472e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003810:	2035      	movs	r0, #53	; 0x35
 8003812:	f000 ffa8 	bl	8004766 <HAL_NVIC_EnableIRQ>
}
 8003816:	e275      	b.n	8003d04 <HAL_UART_MspInit+0x7ac>
 8003818:	40005000 	.word	0x40005000
 800381c:	40023800 	.word	0x40023800
 8003820:	40020800 	.word	0x40020800
 8003824:	40020c00 	.word	0x40020c00
 8003828:	20000b80 	.word	0x20000b80
 800382c:	40026010 	.word	0x40026010
 8003830:	20000be0 	.word	0x20000be0
 8003834:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a91      	ldr	r2, [pc, #580]	; (8003a84 <HAL_UART_MspInit+0x52c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	f040 8091 	bne.w	8003966 <HAL_UART_MspInit+0x40e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003844:	2300      	movs	r3, #0
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
 8003848:	4b8f      	ldr	r3, [pc, #572]	; (8003a88 <HAL_UART_MspInit+0x530>)
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	4a8e      	ldr	r2, [pc, #568]	; (8003a88 <HAL_UART_MspInit+0x530>)
 800384e:	f043 0310 	orr.w	r3, r3, #16
 8003852:	6453      	str	r3, [r2, #68]	; 0x44
 8003854:	4b8c      	ldr	r3, [pc, #560]	; (8003a88 <HAL_UART_MspInit+0x530>)
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003860:	2300      	movs	r3, #0
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <HAL_UART_MspInit+0x530>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	4a87      	ldr	r2, [pc, #540]	; (8003a88 <HAL_UART_MspInit+0x530>)
 800386a:	f043 0302 	orr.w	r3, r3, #2
 800386e:	6313      	str	r3, [r2, #48]	; 0x30
 8003870:	4b85      	ldr	r3, [pc, #532]	; (8003a88 <HAL_UART_MspInit+0x530>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = MCU_USART1_TX_Pin|MCU_USART1_RX_Pin;
 800387c:	23c0      	movs	r3, #192	; 0xc0
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003880:	2302      	movs	r3, #2
 8003882:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	2300      	movs	r3, #0
 8003886:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003888:	2303      	movs	r3, #3
 800388a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800388c:	2307      	movs	r3, #7
 800388e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003890:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003894:	4619      	mov	r1, r3
 8003896:	487d      	ldr	r0, [pc, #500]	; (8003a8c <HAL_UART_MspInit+0x534>)
 8003898:	f001 fafc 	bl	8004e94 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800389c:	4b7c      	ldr	r3, [pc, #496]	; (8003a90 <HAL_UART_MspInit+0x538>)
 800389e:	4a7d      	ldr	r2, [pc, #500]	; (8003a94 <HAL_UART_MspInit+0x53c>)
 80038a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80038a2:	4b7b      	ldr	r3, [pc, #492]	; (8003a90 <HAL_UART_MspInit+0x538>)
 80038a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038aa:	4b79      	ldr	r3, [pc, #484]	; (8003a90 <HAL_UART_MspInit+0x538>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038b0:	4b77      	ldr	r3, [pc, #476]	; (8003a90 <HAL_UART_MspInit+0x538>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038b6:	4b76      	ldr	r3, [pc, #472]	; (8003a90 <HAL_UART_MspInit+0x538>)
 80038b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038be:	4b74      	ldr	r3, [pc, #464]	; (8003a90 <HAL_UART_MspInit+0x538>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038c4:	4b72      	ldr	r3, [pc, #456]	; (8003a90 <HAL_UART_MspInit+0x538>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80038ca:	4b71      	ldr	r3, [pc, #452]	; (8003a90 <HAL_UART_MspInit+0x538>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038d0:	4b6f      	ldr	r3, [pc, #444]	; (8003a90 <HAL_UART_MspInit+0x538>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038d6:	4b6e      	ldr	r3, [pc, #440]	; (8003a90 <HAL_UART_MspInit+0x538>)
 80038d8:	2200      	movs	r2, #0
 80038da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80038dc:	486c      	ldr	r0, [pc, #432]	; (8003a90 <HAL_UART_MspInit+0x538>)
 80038de:	f000 ff5d 	bl	800479c <HAL_DMA_Init>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_UART_MspInit+0x394>
      Error_Handler();
 80038e8:	f7ff f8f4 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a68      	ldr	r2, [pc, #416]	; (8003a90 <HAL_UART_MspInit+0x538>)
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38
 80038f2:	4a67      	ldr	r2, [pc, #412]	; (8003a90 <HAL_UART_MspInit+0x538>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80038f8:	4b67      	ldr	r3, [pc, #412]	; (8003a98 <HAL_UART_MspInit+0x540>)
 80038fa:	4a68      	ldr	r2, [pc, #416]	; (8003a9c <HAL_UART_MspInit+0x544>)
 80038fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80038fe:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <HAL_UART_MspInit+0x540>)
 8003900:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003904:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003906:	4b64      	ldr	r3, [pc, #400]	; (8003a98 <HAL_UART_MspInit+0x540>)
 8003908:	2240      	movs	r2, #64	; 0x40
 800390a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800390c:	4b62      	ldr	r3, [pc, #392]	; (8003a98 <HAL_UART_MspInit+0x540>)
 800390e:	2200      	movs	r2, #0
 8003910:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003912:	4b61      	ldr	r3, [pc, #388]	; (8003a98 <HAL_UART_MspInit+0x540>)
 8003914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003918:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800391a:	4b5f      	ldr	r3, [pc, #380]	; (8003a98 <HAL_UART_MspInit+0x540>)
 800391c:	2200      	movs	r2, #0
 800391e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003920:	4b5d      	ldr	r3, [pc, #372]	; (8003a98 <HAL_UART_MspInit+0x540>)
 8003922:	2200      	movs	r2, #0
 8003924:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003926:	4b5c      	ldr	r3, [pc, #368]	; (8003a98 <HAL_UART_MspInit+0x540>)
 8003928:	2200      	movs	r2, #0
 800392a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800392c:	4b5a      	ldr	r3, [pc, #360]	; (8003a98 <HAL_UART_MspInit+0x540>)
 800392e:	2200      	movs	r2, #0
 8003930:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003932:	4b59      	ldr	r3, [pc, #356]	; (8003a98 <HAL_UART_MspInit+0x540>)
 8003934:	2200      	movs	r2, #0
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003938:	4857      	ldr	r0, [pc, #348]	; (8003a98 <HAL_UART_MspInit+0x540>)
 800393a:	f000 ff2f 	bl	800479c <HAL_DMA_Init>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_UART_MspInit+0x3f0>
      Error_Handler();
 8003944:	f7ff f8c6 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a53      	ldr	r2, [pc, #332]	; (8003a98 <HAL_UART_MspInit+0x540>)
 800394c:	635a      	str	r2, [r3, #52]	; 0x34
 800394e:	4a52      	ldr	r2, [pc, #328]	; (8003a98 <HAL_UART_MspInit+0x540>)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003954:	2200      	movs	r2, #0
 8003956:	2100      	movs	r1, #0
 8003958:	2025      	movs	r0, #37	; 0x25
 800395a:	f000 fee8 	bl	800472e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800395e:	2025      	movs	r0, #37	; 0x25
 8003960:	f000 ff01 	bl	8004766 <HAL_NVIC_EnableIRQ>
}
 8003964:	e1ce      	b.n	8003d04 <HAL_UART_MspInit+0x7ac>
  else if(uartHandle->Instance==USART2)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a4d      	ldr	r2, [pc, #308]	; (8003aa0 <HAL_UART_MspInit+0x548>)
 800396c:	4293      	cmp	r3, r2
 800396e:	f040 80a3 	bne.w	8003ab8 <HAL_UART_MspInit+0x560>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	4b44      	ldr	r3, [pc, #272]	; (8003a88 <HAL_UART_MspInit+0x530>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a43      	ldr	r2, [pc, #268]	; (8003a88 <HAL_UART_MspInit+0x530>)
 800397c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
 8003982:	4b41      	ldr	r3, [pc, #260]	; (8003a88 <HAL_UART_MspInit+0x530>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <HAL_UART_MspInit+0x530>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a3c      	ldr	r2, [pc, #240]	; (8003a88 <HAL_UART_MspInit+0x530>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <HAL_UART_MspInit+0x530>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCU_USART2_TX_Pin|MCU_USART2_RX_Pin;
 80039aa:	230c      	movs	r3, #12
 80039ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ae:	2302      	movs	r3, #2
 80039b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b6:	2303      	movs	r3, #3
 80039b8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039ba:	2307      	movs	r3, #7
 80039bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039c2:	4619      	mov	r1, r3
 80039c4:	4837      	ldr	r0, [pc, #220]	; (8003aa4 <HAL_UART_MspInit+0x54c>)
 80039c6:	f001 fa65 	bl	8004e94 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80039ca:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <HAL_UART_MspInit+0x550>)
 80039cc:	4a37      	ldr	r2, [pc, #220]	; (8003aac <HAL_UART_MspInit+0x554>)
 80039ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80039d0:	4b35      	ldr	r3, [pc, #212]	; (8003aa8 <HAL_UART_MspInit+0x550>)
 80039d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039d8:	4b33      	ldr	r3, [pc, #204]	; (8003aa8 <HAL_UART_MspInit+0x550>)
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039de:	4b32      	ldr	r3, [pc, #200]	; (8003aa8 <HAL_UART_MspInit+0x550>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039e4:	4b30      	ldr	r3, [pc, #192]	; (8003aa8 <HAL_UART_MspInit+0x550>)
 80039e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ec:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <HAL_UART_MspInit+0x550>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039f2:	4b2d      	ldr	r3, [pc, #180]	; (8003aa8 <HAL_UART_MspInit+0x550>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80039f8:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <HAL_UART_MspInit+0x550>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039fe:	4b2a      	ldr	r3, [pc, #168]	; (8003aa8 <HAL_UART_MspInit+0x550>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a04:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <HAL_UART_MspInit+0x550>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a0a:	4827      	ldr	r0, [pc, #156]	; (8003aa8 <HAL_UART_MspInit+0x550>)
 8003a0c:	f000 fec6 	bl	800479c <HAL_DMA_Init>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_UART_MspInit+0x4c2>
      Error_Handler();
 8003a16:	f7ff f85d 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a22      	ldr	r2, [pc, #136]	; (8003aa8 <HAL_UART_MspInit+0x550>)
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38
 8003a20:	4a21      	ldr	r2, [pc, #132]	; (8003aa8 <HAL_UART_MspInit+0x550>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003a26:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <HAL_UART_MspInit+0x558>)
 8003a28:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <HAL_UART_MspInit+0x55c>)
 8003a2a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003a2c:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <HAL_UART_MspInit+0x558>)
 8003a2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a32:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a34:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <HAL_UART_MspInit+0x558>)
 8003a36:	2240      	movs	r2, #64	; 0x40
 8003a38:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <HAL_UART_MspInit+0x558>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <HAL_UART_MspInit+0x558>)
 8003a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a46:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <HAL_UART_MspInit+0x558>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a4e:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <HAL_UART_MspInit+0x558>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003a54:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <HAL_UART_MspInit+0x558>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_UART_MspInit+0x558>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a60:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <HAL_UART_MspInit+0x558>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003a66:	4812      	ldr	r0, [pc, #72]	; (8003ab0 <HAL_UART_MspInit+0x558>)
 8003a68:	f000 fe98 	bl	800479c <HAL_DMA_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_UART_MspInit+0x51e>
      Error_Handler();
 8003a72:	f7ff f82f 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a0d      	ldr	r2, [pc, #52]	; (8003ab0 <HAL_UART_MspInit+0x558>)
 8003a7a:	635a      	str	r2, [r3, #52]	; 0x34
 8003a7c:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <HAL_UART_MspInit+0x558>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003a82:	e13f      	b.n	8003d04 <HAL_UART_MspInit+0x7ac>
 8003a84:	40011000 	.word	0x40011000
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40020400 	.word	0x40020400
 8003a90:	20000c40 	.word	0x20000c40
 8003a94:	40026440 	.word	0x40026440
 8003a98:	20000ca0 	.word	0x20000ca0
 8003a9c:	400264b8 	.word	0x400264b8
 8003aa0:	40004400 	.word	0x40004400
 8003aa4:	40020000 	.word	0x40020000
 8003aa8:	20000d00 	.word	0x20000d00
 8003aac:	40026088 	.word	0x40026088
 8003ab0:	20000d60 	.word	0x20000d60
 8003ab4:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a93      	ldr	r2, [pc, #588]	; (8003d0c <HAL_UART_MspInit+0x7b4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	f040 8092 	bne.w	8003be8 <HAL_UART_MspInit+0x690>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	4b91      	ldr	r3, [pc, #580]	; (8003d10 <HAL_UART_MspInit+0x7b8>)
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	4a90      	ldr	r2, [pc, #576]	; (8003d10 <HAL_UART_MspInit+0x7b8>)
 8003ace:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad4:	4b8e      	ldr	r3, [pc, #568]	; (8003d10 <HAL_UART_MspInit+0x7b8>)
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	4b8a      	ldr	r3, [pc, #552]	; (8003d10 <HAL_UART_MspInit+0x7b8>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	4a89      	ldr	r2, [pc, #548]	; (8003d10 <HAL_UART_MspInit+0x7b8>)
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	6313      	str	r3, [r2, #48]	; 0x30
 8003af0:	4b87      	ldr	r3, [pc, #540]	; (8003d10 <HAL_UART_MspInit+0x7b8>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MCU_HLBr_TX_Pin|MCU_HLBr_RX_Pin;
 8003afc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b00:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b02:	2302      	movs	r3, #2
 8003b04:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b0e:	2307      	movs	r3, #7
 8003b10:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b16:	4619      	mov	r1, r3
 8003b18:	487e      	ldr	r0, [pc, #504]	; (8003d14 <HAL_UART_MspInit+0x7bc>)
 8003b1a:	f001 f9bb 	bl	8004e94 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003b1e:	4b7e      	ldr	r3, [pc, #504]	; (8003d18 <HAL_UART_MspInit+0x7c0>)
 8003b20:	4a7e      	ldr	r2, [pc, #504]	; (8003d1c <HAL_UART_MspInit+0x7c4>)
 8003b22:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003b24:	4b7c      	ldr	r3, [pc, #496]	; (8003d18 <HAL_UART_MspInit+0x7c0>)
 8003b26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b2a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b2c:	4b7a      	ldr	r3, [pc, #488]	; (8003d18 <HAL_UART_MspInit+0x7c0>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b32:	4b79      	ldr	r3, [pc, #484]	; (8003d18 <HAL_UART_MspInit+0x7c0>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b38:	4b77      	ldr	r3, [pc, #476]	; (8003d18 <HAL_UART_MspInit+0x7c0>)
 8003b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b3e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b40:	4b75      	ldr	r3, [pc, #468]	; (8003d18 <HAL_UART_MspInit+0x7c0>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b46:	4b74      	ldr	r3, [pc, #464]	; (8003d18 <HAL_UART_MspInit+0x7c0>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003b4c:	4b72      	ldr	r3, [pc, #456]	; (8003d18 <HAL_UART_MspInit+0x7c0>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b52:	4b71      	ldr	r3, [pc, #452]	; (8003d18 <HAL_UART_MspInit+0x7c0>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b58:	4b6f      	ldr	r3, [pc, #444]	; (8003d18 <HAL_UART_MspInit+0x7c0>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003b5e:	486e      	ldr	r0, [pc, #440]	; (8003d18 <HAL_UART_MspInit+0x7c0>)
 8003b60:	f000 fe1c 	bl	800479c <HAL_DMA_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_UART_MspInit+0x616>
      Error_Handler();
 8003b6a:	f7fe ffb3 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a69      	ldr	r2, [pc, #420]	; (8003d18 <HAL_UART_MspInit+0x7c0>)
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38
 8003b74:	4a68      	ldr	r2, [pc, #416]	; (8003d18 <HAL_UART_MspInit+0x7c0>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003b7a:	4b69      	ldr	r3, [pc, #420]	; (8003d20 <HAL_UART_MspInit+0x7c8>)
 8003b7c:	4a69      	ldr	r2, [pc, #420]	; (8003d24 <HAL_UART_MspInit+0x7cc>)
 8003b7e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003b80:	4b67      	ldr	r3, [pc, #412]	; (8003d20 <HAL_UART_MspInit+0x7c8>)
 8003b82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b86:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b88:	4b65      	ldr	r3, [pc, #404]	; (8003d20 <HAL_UART_MspInit+0x7c8>)
 8003b8a:	2240      	movs	r2, #64	; 0x40
 8003b8c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b8e:	4b64      	ldr	r3, [pc, #400]	; (8003d20 <HAL_UART_MspInit+0x7c8>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b94:	4b62      	ldr	r3, [pc, #392]	; (8003d20 <HAL_UART_MspInit+0x7c8>)
 8003b96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b9a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b9c:	4b60      	ldr	r3, [pc, #384]	; (8003d20 <HAL_UART_MspInit+0x7c8>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ba2:	4b5f      	ldr	r3, [pc, #380]	; (8003d20 <HAL_UART_MspInit+0x7c8>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003ba8:	4b5d      	ldr	r3, [pc, #372]	; (8003d20 <HAL_UART_MspInit+0x7c8>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bae:	4b5c      	ldr	r3, [pc, #368]	; (8003d20 <HAL_UART_MspInit+0x7c8>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bb4:	4b5a      	ldr	r3, [pc, #360]	; (8003d20 <HAL_UART_MspInit+0x7c8>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003bba:	4859      	ldr	r0, [pc, #356]	; (8003d20 <HAL_UART_MspInit+0x7c8>)
 8003bbc:	f000 fdee 	bl	800479c <HAL_DMA_Init>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_UART_MspInit+0x672>
      Error_Handler();
 8003bc6:	f7fe ff85 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a54      	ldr	r2, [pc, #336]	; (8003d20 <HAL_UART_MspInit+0x7c8>)
 8003bce:	635a      	str	r2, [r3, #52]	; 0x34
 8003bd0:	4a53      	ldr	r2, [pc, #332]	; (8003d20 <HAL_UART_MspInit+0x7c8>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2100      	movs	r1, #0
 8003bda:	2027      	movs	r0, #39	; 0x27
 8003bdc:	f000 fda7 	bl	800472e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003be0:	2027      	movs	r0, #39	; 0x27
 8003be2:	f000 fdc0 	bl	8004766 <HAL_NVIC_EnableIRQ>
}
 8003be6:	e08d      	b.n	8003d04 <HAL_UART_MspInit+0x7ac>
  else if(uartHandle->Instance==USART6)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a4e      	ldr	r2, [pc, #312]	; (8003d28 <HAL_UART_MspInit+0x7d0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	f040 8088 	bne.w	8003d04 <HAL_UART_MspInit+0x7ac>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	4b45      	ldr	r3, [pc, #276]	; (8003d10 <HAL_UART_MspInit+0x7b8>)
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	4a44      	ldr	r2, [pc, #272]	; (8003d10 <HAL_UART_MspInit+0x7b8>)
 8003bfe:	f043 0320 	orr.w	r3, r3, #32
 8003c02:	6453      	str	r3, [r2, #68]	; 0x44
 8003c04:	4b42      	ldr	r3, [pc, #264]	; (8003d10 <HAL_UART_MspInit+0x7b8>)
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c10:	2300      	movs	r3, #0
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	4b3e      	ldr	r3, [pc, #248]	; (8003d10 <HAL_UART_MspInit+0x7b8>)
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	4a3d      	ldr	r2, [pc, #244]	; (8003d10 <HAL_UART_MspInit+0x7b8>)
 8003c1a:	f043 0304 	orr.w	r3, r3, #4
 8003c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c20:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <HAL_UART_MspInit+0x7b8>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MCU_USART6_TX_Pin|MCU_USART6_RX_Pin;
 8003c2c:	23c0      	movs	r3, #192	; 0xc0
 8003c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c30:	2302      	movs	r3, #2
 8003c32:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c44:	4619      	mov	r1, r3
 8003c46:	4833      	ldr	r0, [pc, #204]	; (8003d14 <HAL_UART_MspInit+0x7bc>)
 8003c48:	f001 f924 	bl	8004e94 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003c4c:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <HAL_UART_MspInit+0x7d4>)
 8003c4e:	4a38      	ldr	r2, [pc, #224]	; (8003d30 <HAL_UART_MspInit+0x7d8>)
 8003c50:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003c52:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <HAL_UART_MspInit+0x7d4>)
 8003c54:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003c58:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c5a:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <HAL_UART_MspInit+0x7d4>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c60:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <HAL_UART_MspInit+0x7d4>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c66:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <HAL_UART_MspInit+0x7d4>)
 8003c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c6c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c6e:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <HAL_UART_MspInit+0x7d4>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c74:	4b2d      	ldr	r3, [pc, #180]	; (8003d2c <HAL_UART_MspInit+0x7d4>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003c7a:	4b2c      	ldr	r3, [pc, #176]	; (8003d2c <HAL_UART_MspInit+0x7d4>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <HAL_UART_MspInit+0x7d4>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c86:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <HAL_UART_MspInit+0x7d4>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003c8c:	4827      	ldr	r0, [pc, #156]	; (8003d2c <HAL_UART_MspInit+0x7d4>)
 8003c8e:	f000 fd85 	bl	800479c <HAL_DMA_Init>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_UART_MspInit+0x744>
      Error_Handler();
 8003c98:	f7fe ff1c 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a23      	ldr	r2, [pc, #140]	; (8003d2c <HAL_UART_MspInit+0x7d4>)
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ca2:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <HAL_UART_MspInit+0x7d4>)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003ca8:	4b22      	ldr	r3, [pc, #136]	; (8003d34 <HAL_UART_MspInit+0x7dc>)
 8003caa:	4a23      	ldr	r2, [pc, #140]	; (8003d38 <HAL_UART_MspInit+0x7e0>)
 8003cac:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003cae:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <HAL_UART_MspInit+0x7dc>)
 8003cb0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003cb4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cb6:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <HAL_UART_MspInit+0x7dc>)
 8003cb8:	2240      	movs	r2, #64	; 0x40
 8003cba:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <HAL_UART_MspInit+0x7dc>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <HAL_UART_MspInit+0x7dc>)
 8003cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cc8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cca:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <HAL_UART_MspInit+0x7dc>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cd0:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <HAL_UART_MspInit+0x7dc>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003cd6:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <HAL_UART_MspInit+0x7dc>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003cdc:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <HAL_UART_MspInit+0x7dc>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <HAL_UART_MspInit+0x7dc>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003ce8:	4812      	ldr	r0, [pc, #72]	; (8003d34 <HAL_UART_MspInit+0x7dc>)
 8003cea:	f000 fd57 	bl	800479c <HAL_DMA_Init>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_UART_MspInit+0x7a0>
      Error_Handler();
 8003cf4:	f7fe feee 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a0e      	ldr	r2, [pc, #56]	; (8003d34 <HAL_UART_MspInit+0x7dc>)
 8003cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8003cfe:	4a0d      	ldr	r2, [pc, #52]	; (8003d34 <HAL_UART_MspInit+0x7dc>)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003d04:	bf00      	nop
 8003d06:	3750      	adds	r7, #80	; 0x50
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40004800 	.word	0x40004800
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40020800 	.word	0x40020800
 8003d18:	20000dc0 	.word	0x20000dc0
 8003d1c:	40026028 	.word	0x40026028
 8003d20:	20000e20 	.word	0x20000e20
 8003d24:	40026058 	.word	0x40026058
 8003d28:	40011400 	.word	0x40011400
 8003d2c:	20000e80 	.word	0x20000e80
 8003d30:	40026428 	.word	0x40026428
 8003d34:	20000ee0 	.word	0x20000ee0
 8003d38:	400264a0 	.word	0x400264a0

08003d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d40:	480d      	ldr	r0, [pc, #52]	; (8003d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d42:	490e      	ldr	r1, [pc, #56]	; (8003d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d44:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d48:	e002      	b.n	8003d50 <LoopCopyDataInit>

08003d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d4e:	3304      	adds	r3, #4

08003d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d54:	d3f9      	bcc.n	8003d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d56:	4a0b      	ldr	r2, [pc, #44]	; (8003d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d58:	4c0b      	ldr	r4, [pc, #44]	; (8003d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d5c:	e001      	b.n	8003d62 <LoopFillZerobss>

08003d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d60:	3204      	adds	r2, #4

08003d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d64:	d3fb      	bcc.n	8003d5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d66:	f7ff f869 	bl	8002e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d6a:	f004 ff83 	bl	8008c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d6e:	f7fe fce9 	bl	8002744 <main>
  bx  lr    
 8003d72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d7c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003d80:	0800ddf4 	.word	0x0800ddf4
  ldr r2, =_sbss
 8003d84:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003d88:	20000f54 	.word	0x20000f54

08003d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d8c:	e7fe      	b.n	8003d8c <ADC_IRQHandler>
	...

08003d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d94:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <HAL_Init+0x40>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a0d      	ldr	r2, [pc, #52]	; (8003dd0 <HAL_Init+0x40>)
 8003d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_Init+0x40>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_Init+0x40>)
 8003da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <HAL_Init+0x40>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <HAL_Init+0x40>)
 8003db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003db8:	2003      	movs	r0, #3
 8003dba:	f000 fcad 	bl	8004718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f000 f808 	bl	8003dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dc4:	f7fe fe8c 	bl	8002ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023c00 	.word	0x40023c00

08003dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_InitTick+0x54>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_InitTick+0x58>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	4619      	mov	r1, r3
 8003de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fcc5 	bl	8004782 <HAL_SYSTICK_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00e      	b.n	8003e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b0f      	cmp	r3, #15
 8003e06:	d80a      	bhi.n	8003e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	f000 fc8d 	bl	800472e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e14:	4a06      	ldr	r2, [pc, #24]	; (8003e30 <HAL_InitTick+0x5c>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e000      	b.n	8003e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20000010 	.word	0x20000010
 8003e2c:	20000018 	.word	0x20000018
 8003e30:	20000014 	.word	0x20000014

08003e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_IncTick+0x20>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_IncTick+0x24>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4413      	add	r3, r2
 8003e44:	4a04      	ldr	r2, [pc, #16]	; (8003e58 <HAL_IncTick+0x24>)
 8003e46:	6013      	str	r3, [r2, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000018 	.word	0x20000018
 8003e58:	20000f40 	.word	0x20000f40

08003e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <HAL_GetTick+0x14>)
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000f40 	.word	0x20000f40

08003e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e7c:	f7ff ffee 	bl	8003e5c <HAL_GetTick>
 8003e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d005      	beq.n	8003e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <HAL_Delay+0x44>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e9a:	bf00      	nop
 8003e9c:	f7ff ffde 	bl	8003e5c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d8f7      	bhi.n	8003e9c <HAL_Delay+0x28>
  {
  }
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000018 	.word	0x20000018

08003ebc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e033      	b.n	8003f3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fe f996 	bl	800220c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d118      	bne.n	8003f2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f02:	f023 0302 	bic.w	r3, r3, #2
 8003f06:	f043 0202 	orr.w	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f93a 	bl	8004188 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	f043 0201 	orr.w	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
 8003f2a:	e001      	b.n	8003f30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x1c>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e105      	b.n	800416c <HAL_ADC_ConfigChannel+0x228>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b09      	cmp	r3, #9
 8003f6e:	d925      	bls.n	8003fbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68d9      	ldr	r1, [r3, #12]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	3b1e      	subs	r3, #30
 8003f86:	2207      	movs	r2, #7
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43da      	mvns	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	400a      	ands	r2, r1
 8003f94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68d9      	ldr	r1, [r3, #12]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	4603      	mov	r3, r0
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	4403      	add	r3, r0
 8003fae:	3b1e      	subs	r3, #30
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	e022      	b.n	8004002 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6919      	ldr	r1, [r3, #16]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4613      	mov	r3, r2
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	4413      	add	r3, r2
 8003fd0:	2207      	movs	r2, #7
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	400a      	ands	r2, r1
 8003fde:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6919      	ldr	r1, [r3, #16]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	4403      	add	r3, r0
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b06      	cmp	r3, #6
 8004008:	d824      	bhi.n	8004054 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	3b05      	subs	r3, #5
 800401c:	221f      	movs	r2, #31
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	43da      	mvns	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	400a      	ands	r2, r1
 800402a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	4618      	mov	r0, r3
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	3b05      	subs	r3, #5
 8004046:	fa00 f203 	lsl.w	r2, r0, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	635a      	str	r2, [r3, #52]	; 0x34
 8004052:	e04c      	b.n	80040ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b0c      	cmp	r3, #12
 800405a:	d824      	bhi.n	80040a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	3b23      	subs	r3, #35	; 0x23
 800406e:	221f      	movs	r2, #31
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43da      	mvns	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	400a      	ands	r2, r1
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	b29b      	uxth	r3, r3
 800408a:	4618      	mov	r0, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	3b23      	subs	r3, #35	; 0x23
 8004098:	fa00 f203 	lsl.w	r2, r0, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
 80040a4:	e023      	b.n	80040ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	3b41      	subs	r3, #65	; 0x41
 80040b8:	221f      	movs	r2, #31
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43da      	mvns	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	400a      	ands	r2, r1
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	4618      	mov	r0, r3
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	3b41      	subs	r3, #65	; 0x41
 80040e2:	fa00 f203 	lsl.w	r2, r0, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040ee:	4b22      	ldr	r3, [pc, #136]	; (8004178 <HAL_ADC_ConfigChannel+0x234>)
 80040f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a21      	ldr	r2, [pc, #132]	; (800417c <HAL_ADC_ConfigChannel+0x238>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d109      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x1cc>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b12      	cmp	r3, #18
 8004102:	d105      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a19      	ldr	r2, [pc, #100]	; (800417c <HAL_ADC_ConfigChannel+0x238>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d123      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x21e>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b10      	cmp	r3, #16
 8004120:	d003      	beq.n	800412a <HAL_ADC_ConfigChannel+0x1e6>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b11      	cmp	r3, #17
 8004128:	d11b      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b10      	cmp	r3, #16
 800413c:	d111      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_ADC_ConfigChannel+0x23c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a10      	ldr	r2, [pc, #64]	; (8004184 <HAL_ADC_ConfigChannel+0x240>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	0c9a      	lsrs	r2, r3, #18
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004154:	e002      	b.n	800415c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	3b01      	subs	r3, #1
 800415a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f9      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40012300 	.word	0x40012300
 800417c:	40012000 	.word	0x40012000
 8004180:	20000010 	.word	0x20000010
 8004184:	431bde83 	.word	0x431bde83

08004188 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004190:	4b79      	ldr	r3, [pc, #484]	; (8004378 <ADC_Init+0x1f0>)
 8004192:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6859      	ldr	r1, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	021a      	lsls	r2, r3, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80041e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004202:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6899      	ldr	r1, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	4a58      	ldr	r2, [pc, #352]	; (800437c <ADC_Init+0x1f4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d022      	beq.n	8004266 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800422e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6899      	ldr	r1, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004250:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6899      	ldr	r1, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	e00f      	b.n	8004286 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004274:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004284:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0202 	bic.w	r2, r2, #2
 8004294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6899      	ldr	r1, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	7e1b      	ldrb	r3, [r3, #24]
 80042a0:	005a      	lsls	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01b      	beq.n	80042ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80042d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6859      	ldr	r1, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	3b01      	subs	r3, #1
 80042e0:	035a      	lsls	r2, r3, #13
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	e007      	b.n	80042fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800430a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	3b01      	subs	r3, #1
 8004318:	051a      	lsls	r2, r3, #20
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6899      	ldr	r1, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800433e:	025a      	lsls	r2, r3, #9
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6899      	ldr	r1, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	029a      	lsls	r2, r3, #10
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	609a      	str	r2, [r3, #8]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	40012300 	.word	0x40012300
 800437c:	0f000001 	.word	0x0f000001

08004380 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0ed      	b.n	800456e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fd ffac 	bl	80022fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043b4:	f7ff fd52 	bl	8003e5c <HAL_GetTick>
 80043b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80043ba:	e012      	b.n	80043e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80043bc:	f7ff fd4e 	bl	8003e5c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b0a      	cmp	r3, #10
 80043c8:	d90b      	bls.n	80043e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2205      	movs	r2, #5
 80043da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e0c5      	b.n	800456e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0e5      	beq.n	80043bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0202 	bic.w	r2, r2, #2
 80043fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004400:	f7ff fd2c 	bl	8003e5c <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004406:	e012      	b.n	800442e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004408:	f7ff fd28 	bl	8003e5c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b0a      	cmp	r3, #10
 8004414:	d90b      	bls.n	800442e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2205      	movs	r2, #5
 8004426:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e09f      	b.n	800456e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e5      	bne.n	8004408 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	7e1b      	ldrb	r3, [r3, #24]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d108      	bne.n	8004456 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	e007      	b.n	8004466 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004464:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7e5b      	ldrb	r3, [r3, #25]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d108      	bne.n	8004480 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e007      	b.n	8004490 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	7e9b      	ldrb	r3, [r3, #26]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d108      	bne.n	80044aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0220 	orr.w	r2, r2, #32
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e007      	b.n	80044ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0220 	bic.w	r2, r2, #32
 80044b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	7edb      	ldrb	r3, [r3, #27]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d108      	bne.n	80044d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0210 	bic.w	r2, r2, #16
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e007      	b.n	80044e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0210 	orr.w	r2, r2, #16
 80044e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7f1b      	ldrb	r3, [r3, #28]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d108      	bne.n	80044fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0208 	orr.w	r2, r2, #8
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e007      	b.n	800450e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0208 	bic.w	r2, r2, #8
 800450c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	7f5b      	ldrb	r3, [r3, #29]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d108      	bne.n	8004528 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0204 	orr.w	r2, r2, #4
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e007      	b.n	8004538 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0204 	bic.w	r2, r2, #4
 8004536:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	ea42 0103 	orr.w	r1, r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	1e5a      	subs	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <__NVIC_SetPriorityGrouping+0x44>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004594:	4013      	ands	r3, r2
 8004596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045aa:	4a04      	ldr	r2, [pc, #16]	; (80045bc <__NVIC_SetPriorityGrouping+0x44>)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	60d3      	str	r3, [r2, #12]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <__NVIC_GetPriorityGrouping+0x18>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	f003 0307 	and.w	r3, r3, #7
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000ed00 	.word	0xe000ed00

080045dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	db0b      	blt.n	8004606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	f003 021f 	and.w	r2, r3, #31
 80045f4:	4907      	ldr	r1, [pc, #28]	; (8004614 <__NVIC_EnableIRQ+0x38>)
 80045f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2001      	movs	r0, #1
 80045fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	e000e100 	.word	0xe000e100

08004618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	6039      	str	r1, [r7, #0]
 8004622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004628:	2b00      	cmp	r3, #0
 800462a:	db0a      	blt.n	8004642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	490c      	ldr	r1, [pc, #48]	; (8004664 <__NVIC_SetPriority+0x4c>)
 8004632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004636:	0112      	lsls	r2, r2, #4
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	440b      	add	r3, r1
 800463c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004640:	e00a      	b.n	8004658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	4908      	ldr	r1, [pc, #32]	; (8004668 <__NVIC_SetPriority+0x50>)
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	3b04      	subs	r3, #4
 8004650:	0112      	lsls	r2, r2, #4
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	440b      	add	r3, r1
 8004656:	761a      	strb	r2, [r3, #24]
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	e000e100 	.word	0xe000e100
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800466c:	b480      	push	{r7}
 800466e:	b089      	sub	sp, #36	; 0x24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f1c3 0307 	rsb	r3, r3, #7
 8004686:	2b04      	cmp	r3, #4
 8004688:	bf28      	it	cs
 800468a:	2304      	movcs	r3, #4
 800468c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3304      	adds	r3, #4
 8004692:	2b06      	cmp	r3, #6
 8004694:	d902      	bls.n	800469c <NVIC_EncodePriority+0x30>
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	3b03      	subs	r3, #3
 800469a:	e000      	b.n	800469e <NVIC_EncodePriority+0x32>
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a0:	f04f 32ff 	mov.w	r2, #4294967295
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43da      	mvns	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	401a      	ands	r2, r3
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046b4:	f04f 31ff 	mov.w	r1, #4294967295
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	fa01 f303 	lsl.w	r3, r1, r3
 80046be:	43d9      	mvns	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c4:	4313      	orrs	r3, r2
         );
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3724      	adds	r7, #36	; 0x24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3b01      	subs	r3, #1
 80046e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046e4:	d301      	bcc.n	80046ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046e6:	2301      	movs	r3, #1
 80046e8:	e00f      	b.n	800470a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ea:	4a0a      	ldr	r2, [pc, #40]	; (8004714 <SysTick_Config+0x40>)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046f2:	210f      	movs	r1, #15
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	f7ff ff8e 	bl	8004618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <SysTick_Config+0x40>)
 80046fe:	2200      	movs	r2, #0
 8004700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <SysTick_Config+0x40>)
 8004704:	2207      	movs	r2, #7
 8004706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	e000e010 	.word	0xe000e010

08004718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff ff29 	bl	8004578 <__NVIC_SetPriorityGrouping>
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800472e:	b580      	push	{r7, lr}
 8004730:	b086      	sub	sp, #24
 8004732:	af00      	add	r7, sp, #0
 8004734:	4603      	mov	r3, r0
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
 800473a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004740:	f7ff ff3e 	bl	80045c0 <__NVIC_GetPriorityGrouping>
 8004744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	6978      	ldr	r0, [r7, #20]
 800474c:	f7ff ff8e 	bl	800466c <NVIC_EncodePriority>
 8004750:	4602      	mov	r2, r0
 8004752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004756:	4611      	mov	r1, r2
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff5d 	bl	8004618 <__NVIC_SetPriority>
}
 800475e:	bf00      	nop
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	4603      	mov	r3, r0
 800476e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff ff31 	bl	80045dc <__NVIC_EnableIRQ>
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff ffa2 	bl	80046d4 <SysTick_Config>
 8004790:	4603      	mov	r3, r0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047a8:	f7ff fb58 	bl	8003e5c <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e099      	b.n	80048ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047d8:	e00f      	b.n	80047fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047da:	f7ff fb3f 	bl	8003e5c <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b05      	cmp	r3, #5
 80047e6:	d908      	bls.n	80047fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2203      	movs	r2, #3
 80047f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e078      	b.n	80048ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e8      	bne.n	80047da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4b38      	ldr	r3, [pc, #224]	; (80048f4 <HAL_DMA_Init+0x158>)
 8004814:	4013      	ands	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800483e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	2b04      	cmp	r3, #4
 8004852:	d107      	bne.n	8004864 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	4313      	orrs	r3, r2
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f023 0307 	bic.w	r3, r3, #7
 800487a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b04      	cmp	r3, #4
 800488c:	d117      	bne.n	80048be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00e      	beq.n	80048be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fa7b 	bl	8004d9c <DMA_CheckFifoParam>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2240      	movs	r2, #64	; 0x40
 80048b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048ba:	2301      	movs	r3, #1
 80048bc:	e016      	b.n	80048ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fa32 	bl	8004d30 <DMA_CalcBaseAndBitshift>
 80048cc:	4603      	mov	r3, r0
 80048ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	223f      	movs	r2, #63	; 0x3f
 80048d6:	409a      	lsls	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	f010803f 	.word	0xf010803f

080048f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004906:	f7ff faa9 	bl	8003e5c <HAL_GetTick>
 800490a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d008      	beq.n	800492a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2280      	movs	r2, #128	; 0x80
 800491c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e052      	b.n	80049d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0216 	bic.w	r2, r2, #22
 8004938:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004948:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d103      	bne.n	800495a <HAL_DMA_Abort+0x62>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0208 	bic.w	r2, r2, #8
 8004968:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0201 	bic.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800497a:	e013      	b.n	80049a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800497c:	f7ff fa6e 	bl	8003e5c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b05      	cmp	r3, #5
 8004988:	d90c      	bls.n	80049a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2203      	movs	r2, #3
 8004994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e015      	b.n	80049d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e4      	bne.n	800497c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b6:	223f      	movs	r2, #63	; 0x3f
 80049b8:	409a      	lsls	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d004      	beq.n	80049f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2280      	movs	r2, #128	; 0x80
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e00c      	b.n	8004a10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2205      	movs	r2, #5
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0201 	bic.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a28:	4b8e      	ldr	r3, [pc, #568]	; (8004c64 <HAL_DMA_IRQHandler+0x248>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a8e      	ldr	r2, [pc, #568]	; (8004c68 <HAL_DMA_IRQHandler+0x24c>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	0a9b      	lsrs	r3, r3, #10
 8004a34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	2208      	movs	r2, #8
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01a      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d013      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0204 	bic.w	r2, r2, #4
 8004a6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a74:	2208      	movs	r2, #8
 8004a76:	409a      	lsls	r2, r3
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	f043 0201 	orr.w	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	409a      	lsls	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d012      	beq.n	8004abe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aaa:	2201      	movs	r2, #1
 8004aac:	409a      	lsls	r2, r3
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab6:	f043 0202 	orr.w	r2, r3, #2
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	2204      	movs	r2, #4
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d012      	beq.n	8004af4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	409a      	lsls	r2, r3
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aec:	f043 0204 	orr.w	r2, r3, #4
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af8:	2210      	movs	r2, #16
 8004afa:	409a      	lsls	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4013      	ands	r3, r2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d043      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d03c      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b16:	2210      	movs	r2, #16
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d018      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d108      	bne.n	8004b4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d024      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	4798      	blx	r3
 8004b4a:	e01f      	b.n	8004b8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01b      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	4798      	blx	r3
 8004b5c:	e016      	b.n	8004b8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d107      	bne.n	8004b7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0208 	bic.w	r2, r2, #8
 8004b7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b90:	2220      	movs	r2, #32
 8004b92:	409a      	lsls	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 808f 	beq.w	8004cbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8087 	beq.w	8004cbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	409a      	lsls	r2, r3
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b05      	cmp	r3, #5
 8004bc4:	d136      	bne.n	8004c34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0216 	bic.w	r2, r2, #22
 8004bd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695a      	ldr	r2, [r3, #20]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004be4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d103      	bne.n	8004bf6 <HAL_DMA_IRQHandler+0x1da>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0208 	bic.w	r2, r2, #8
 8004c04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0a:	223f      	movs	r2, #63	; 0x3f
 8004c0c:	409a      	lsls	r2, r3
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d07e      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
        }
        return;
 8004c32:	e079      	b.n	8004d28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01d      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10d      	bne.n	8004c6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d031      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	4798      	blx	r3
 8004c60:	e02c      	b.n	8004cbc <HAL_DMA_IRQHandler+0x2a0>
 8004c62:	bf00      	nop
 8004c64:	20000010 	.word	0x20000010
 8004c68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d023      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	4798      	blx	r3
 8004c7c:	e01e      	b.n	8004cbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10f      	bne.n	8004cac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0210 	bic.w	r2, r2, #16
 8004c9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d032      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d022      	beq.n	8004d16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2205      	movs	r2, #5
 8004cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0201 	bic.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	3301      	adds	r3, #1
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d307      	bcc.n	8004d04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f2      	bne.n	8004ce8 <HAL_DMA_IRQHandler+0x2cc>
 8004d02:	e000      	b.n	8004d06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
 8004d26:	e000      	b.n	8004d2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d28:	bf00      	nop
    }
  }
}
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	3b10      	subs	r3, #16
 8004d40:	4a14      	ldr	r2, [pc, #80]	; (8004d94 <DMA_CalcBaseAndBitshift+0x64>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d4a:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <DMA_CalcBaseAndBitshift+0x68>)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d909      	bls.n	8004d72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d66:	f023 0303 	bic.w	r3, r3, #3
 8004d6a:	1d1a      	adds	r2, r3, #4
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	659a      	str	r2, [r3, #88]	; 0x58
 8004d70:	e007      	b.n	8004d82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d7a:	f023 0303 	bic.w	r3, r3, #3
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	aaaaaaab 	.word	0xaaaaaaab
 8004d98:	0800da04 	.word	0x0800da04

08004d9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d11f      	bne.n	8004df6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d856      	bhi.n	8004e6a <DMA_CheckFifoParam+0xce>
 8004dbc:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <DMA_CheckFifoParam+0x28>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004dd5 	.word	0x08004dd5
 8004dc8:	08004de7 	.word	0x08004de7
 8004dcc:	08004dd5 	.word	0x08004dd5
 8004dd0:	08004e6b 	.word	0x08004e6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d046      	beq.n	8004e6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de4:	e043      	b.n	8004e6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dee:	d140      	bne.n	8004e72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004df4:	e03d      	b.n	8004e72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfe:	d121      	bne.n	8004e44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d837      	bhi.n	8004e76 <DMA_CheckFifoParam+0xda>
 8004e06:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <DMA_CheckFifoParam+0x70>)
 8004e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0c:	08004e1d 	.word	0x08004e1d
 8004e10:	08004e23 	.word	0x08004e23
 8004e14:	08004e1d 	.word	0x08004e1d
 8004e18:	08004e35 	.word	0x08004e35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e20:	e030      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d025      	beq.n	8004e7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e32:	e022      	b.n	8004e7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e3c:	d11f      	bne.n	8004e7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e42:	e01c      	b.n	8004e7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d903      	bls.n	8004e52 <DMA_CheckFifoParam+0xb6>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d003      	beq.n	8004e58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e50:	e018      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
      break;
 8004e56:	e015      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00e      	beq.n	8004e82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
      break;
 8004e68:	e00b      	b.n	8004e82 <DMA_CheckFifoParam+0xe6>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e00a      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e008      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
      break;
 8004e72:	bf00      	nop
 8004e74:	e006      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
      break;
 8004e76:	bf00      	nop
 8004e78:	e004      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e002      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e7e:	bf00      	nop
 8004e80:	e000      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
      break;
 8004e82:	bf00      	nop
    }
  } 
  
  return status; 
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop

08004e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b089      	sub	sp, #36	; 0x24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	e16b      	b.n	8005188 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	f040 815a 	bne.w	8005182 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d005      	beq.n	8004ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d130      	bne.n	8004f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4013      	ands	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43db      	mvns	r3, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 0201 	and.w	r2, r3, #1
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d017      	beq.n	8004f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	2203      	movs	r2, #3
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	43db      	mvns	r3, r3
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f003 0303 	and.w	r3, r3, #3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d123      	bne.n	8004fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	08da      	lsrs	r2, r3, #3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3208      	adds	r2, #8
 8004f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	220f      	movs	r2, #15
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	43db      	mvns	r3, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	08da      	lsrs	r2, r3, #3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3208      	adds	r2, #8
 8004fd2:	69b9      	ldr	r1, [r7, #24]
 8004fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4013      	ands	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 0203 	and.w	r2, r3, #3
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4313      	orrs	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80b4 	beq.w	8005182 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	4b60      	ldr	r3, [pc, #384]	; (80051a0 <HAL_GPIO_Init+0x30c>)
 8005020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005022:	4a5f      	ldr	r2, [pc, #380]	; (80051a0 <HAL_GPIO_Init+0x30c>)
 8005024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005028:	6453      	str	r3, [r2, #68]	; 0x44
 800502a:	4b5d      	ldr	r3, [pc, #372]	; (80051a0 <HAL_GPIO_Init+0x30c>)
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005036:	4a5b      	ldr	r2, [pc, #364]	; (80051a4 <HAL_GPIO_Init+0x310>)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	089b      	lsrs	r3, r3, #2
 800503c:	3302      	adds	r3, #2
 800503e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	220f      	movs	r2, #15
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	43db      	mvns	r3, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4013      	ands	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a52      	ldr	r2, [pc, #328]	; (80051a8 <HAL_GPIO_Init+0x314>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d02b      	beq.n	80050ba <HAL_GPIO_Init+0x226>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a51      	ldr	r2, [pc, #324]	; (80051ac <HAL_GPIO_Init+0x318>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d025      	beq.n	80050b6 <HAL_GPIO_Init+0x222>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a50      	ldr	r2, [pc, #320]	; (80051b0 <HAL_GPIO_Init+0x31c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01f      	beq.n	80050b2 <HAL_GPIO_Init+0x21e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a4f      	ldr	r2, [pc, #316]	; (80051b4 <HAL_GPIO_Init+0x320>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d019      	beq.n	80050ae <HAL_GPIO_Init+0x21a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a4e      	ldr	r2, [pc, #312]	; (80051b8 <HAL_GPIO_Init+0x324>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_GPIO_Init+0x216>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a4d      	ldr	r2, [pc, #308]	; (80051bc <HAL_GPIO_Init+0x328>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00d      	beq.n	80050a6 <HAL_GPIO_Init+0x212>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a4c      	ldr	r2, [pc, #304]	; (80051c0 <HAL_GPIO_Init+0x32c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d007      	beq.n	80050a2 <HAL_GPIO_Init+0x20e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a4b      	ldr	r2, [pc, #300]	; (80051c4 <HAL_GPIO_Init+0x330>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <HAL_GPIO_Init+0x20a>
 800509a:	2307      	movs	r3, #7
 800509c:	e00e      	b.n	80050bc <HAL_GPIO_Init+0x228>
 800509e:	2308      	movs	r3, #8
 80050a0:	e00c      	b.n	80050bc <HAL_GPIO_Init+0x228>
 80050a2:	2306      	movs	r3, #6
 80050a4:	e00a      	b.n	80050bc <HAL_GPIO_Init+0x228>
 80050a6:	2305      	movs	r3, #5
 80050a8:	e008      	b.n	80050bc <HAL_GPIO_Init+0x228>
 80050aa:	2304      	movs	r3, #4
 80050ac:	e006      	b.n	80050bc <HAL_GPIO_Init+0x228>
 80050ae:	2303      	movs	r3, #3
 80050b0:	e004      	b.n	80050bc <HAL_GPIO_Init+0x228>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e002      	b.n	80050bc <HAL_GPIO_Init+0x228>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <HAL_GPIO_Init+0x228>
 80050ba:	2300      	movs	r3, #0
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	f002 0203 	and.w	r2, r2, #3
 80050c2:	0092      	lsls	r2, r2, #2
 80050c4:	4093      	lsls	r3, r2
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050cc:	4935      	ldr	r1, [pc, #212]	; (80051a4 <HAL_GPIO_Init+0x310>)
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	089b      	lsrs	r3, r3, #2
 80050d2:	3302      	adds	r3, #2
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050da:	4b3b      	ldr	r3, [pc, #236]	; (80051c8 <HAL_GPIO_Init+0x334>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	43db      	mvns	r3, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4013      	ands	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050fe:	4a32      	ldr	r2, [pc, #200]	; (80051c8 <HAL_GPIO_Init+0x334>)
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005104:	4b30      	ldr	r3, [pc, #192]	; (80051c8 <HAL_GPIO_Init+0x334>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	43db      	mvns	r3, r3
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	4013      	ands	r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005128:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <HAL_GPIO_Init+0x334>)
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800512e:	4b26      	ldr	r3, [pc, #152]	; (80051c8 <HAL_GPIO_Init+0x334>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	43db      	mvns	r3, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4013      	ands	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005152:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <HAL_GPIO_Init+0x334>)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005158:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <HAL_GPIO_Init+0x334>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	43db      	mvns	r3, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4013      	ands	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800517c:	4a12      	ldr	r2, [pc, #72]	; (80051c8 <HAL_GPIO_Init+0x334>)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	3301      	adds	r3, #1
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	2b0f      	cmp	r3, #15
 800518c:	f67f ae90 	bls.w	8004eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	3724      	adds	r7, #36	; 0x24
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40023800 	.word	0x40023800
 80051a4:	40013800 	.word	0x40013800
 80051a8:	40020000 	.word	0x40020000
 80051ac:	40020400 	.word	0x40020400
 80051b0:	40020800 	.word	0x40020800
 80051b4:	40020c00 	.word	0x40020c00
 80051b8:	40021000 	.word	0x40021000
 80051bc:	40021400 	.word	0x40021400
 80051c0:	40021800 	.word	0x40021800
 80051c4:	40021c00 	.word	0x40021c00
 80051c8:	40013c00 	.word	0x40013c00

080051cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	807b      	strh	r3, [r7, #2]
 80051d8:	4613      	mov	r3, r2
 80051da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051dc:	787b      	ldrb	r3, [r7, #1]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051e2:	887a      	ldrh	r2, [r7, #2]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051e8:	e003      	b.n	80051f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051ea:	887b      	ldrh	r3, [r7, #2]
 80051ec:	041a      	lsls	r2, r3, #16
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	619a      	str	r2, [r3, #24]
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	460b      	mov	r3, r1
 8005208:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005210:	887a      	ldrh	r2, [r7, #2]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4013      	ands	r3, r2
 8005216:	041a      	lsls	r2, r3, #16
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	43d9      	mvns	r1, r3
 800521c:	887b      	ldrh	r3, [r7, #2]
 800521e:	400b      	ands	r3, r1
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	619a      	str	r2, [r3, #24]
}
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e12b      	b.n	800549e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fd fa2a 	bl	80026b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	; 0x24
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0201 	bic.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005298:	f001 fe6a 	bl	8006f70 <HAL_RCC_GetPCLK1Freq>
 800529c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	4a81      	ldr	r2, [pc, #516]	; (80054a8 <HAL_I2C_Init+0x274>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d807      	bhi.n	80052b8 <HAL_I2C_Init+0x84>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a80      	ldr	r2, [pc, #512]	; (80054ac <HAL_I2C_Init+0x278>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	bf94      	ite	ls
 80052b0:	2301      	movls	r3, #1
 80052b2:	2300      	movhi	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	e006      	b.n	80052c6 <HAL_I2C_Init+0x92>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4a7d      	ldr	r2, [pc, #500]	; (80054b0 <HAL_I2C_Init+0x27c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	bf94      	ite	ls
 80052c0:	2301      	movls	r3, #1
 80052c2:	2300      	movhi	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e0e7      	b.n	800549e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a78      	ldr	r2, [pc, #480]	; (80054b4 <HAL_I2C_Init+0x280>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	0c9b      	lsrs	r3, r3, #18
 80052d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4a6a      	ldr	r2, [pc, #424]	; (80054a8 <HAL_I2C_Init+0x274>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d802      	bhi.n	8005308 <HAL_I2C_Init+0xd4>
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	3301      	adds	r3, #1
 8005306:	e009      	b.n	800531c <HAL_I2C_Init+0xe8>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	4a69      	ldr	r2, [pc, #420]	; (80054b8 <HAL_I2C_Init+0x284>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	099b      	lsrs	r3, r3, #6
 800531a:	3301      	adds	r3, #1
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	430b      	orrs	r3, r1
 8005322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800532e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	495c      	ldr	r1, [pc, #368]	; (80054a8 <HAL_I2C_Init+0x274>)
 8005338:	428b      	cmp	r3, r1
 800533a:	d819      	bhi.n	8005370 <HAL_I2C_Init+0x13c>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	1e59      	subs	r1, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	fbb1 f3f3 	udiv	r3, r1, r3
 800534a:	1c59      	adds	r1, r3, #1
 800534c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005350:	400b      	ands	r3, r1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <HAL_I2C_Init+0x138>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1e59      	subs	r1, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	fbb1 f3f3 	udiv	r3, r1, r3
 8005364:	3301      	adds	r3, #1
 8005366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536a:	e051      	b.n	8005410 <HAL_I2C_Init+0x1dc>
 800536c:	2304      	movs	r3, #4
 800536e:	e04f      	b.n	8005410 <HAL_I2C_Init+0x1dc>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d111      	bne.n	800539c <HAL_I2C_Init+0x168>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1e58      	subs	r0, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6859      	ldr	r1, [r3, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	440b      	add	r3, r1
 8005386:	fbb0 f3f3 	udiv	r3, r0, r3
 800538a:	3301      	adds	r3, #1
 800538c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	e012      	b.n	80053c2 <HAL_I2C_Init+0x18e>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1e58      	subs	r0, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6859      	ldr	r1, [r3, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	0099      	lsls	r1, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80053b2:	3301      	adds	r3, #1
 80053b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bf0c      	ite	eq
 80053bc:	2301      	moveq	r3, #1
 80053be:	2300      	movne	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <HAL_I2C_Init+0x196>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e022      	b.n	8005410 <HAL_I2C_Init+0x1dc>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10e      	bne.n	80053f0 <HAL_I2C_Init+0x1bc>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1e58      	subs	r0, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6859      	ldr	r1, [r3, #4]
 80053da:	460b      	mov	r3, r1
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	440b      	add	r3, r1
 80053e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e4:	3301      	adds	r3, #1
 80053e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ee:	e00f      	b.n	8005410 <HAL_I2C_Init+0x1dc>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	1e58      	subs	r0, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6859      	ldr	r1, [r3, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	0099      	lsls	r1, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	fbb0 f3f3 	udiv	r3, r0, r3
 8005406:	3301      	adds	r3, #1
 8005408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800540c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	6809      	ldr	r1, [r1, #0]
 8005414:	4313      	orrs	r3, r2
 8005416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69da      	ldr	r2, [r3, #28]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800543e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6911      	ldr	r1, [r2, #16]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68d2      	ldr	r2, [r2, #12]
 800544a:	4311      	orrs	r1, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	430b      	orrs	r3, r1
 8005452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695a      	ldr	r2, [r3, #20]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	000186a0 	.word	0x000186a0
 80054ac:	001e847f 	.word	0x001e847f
 80054b0:	003d08ff 	.word	0x003d08ff
 80054b4:	431bde83 	.word	0x431bde83
 80054b8:	10624dd3 	.word	0x10624dd3

080054bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	607a      	str	r2, [r7, #4]
 80054c6:	461a      	mov	r2, r3
 80054c8:	460b      	mov	r3, r1
 80054ca:	817b      	strh	r3, [r7, #10]
 80054cc:	4613      	mov	r3, r2
 80054ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054d0:	f7fe fcc4 	bl	8003e5c <HAL_GetTick>
 80054d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b20      	cmp	r3, #32
 80054e0:	f040 80e0 	bne.w	80056a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	2319      	movs	r3, #25
 80054ea:	2201      	movs	r2, #1
 80054ec:	4970      	ldr	r1, [pc, #448]	; (80056b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 ff30 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80054fa:	2302      	movs	r3, #2
 80054fc:	e0d3      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_I2C_Master_Transmit+0x50>
 8005508:	2302      	movs	r3, #2
 800550a:	e0cc      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1ea>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b01      	cmp	r3, #1
 8005520:	d007      	beq.n	8005532 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0201 	orr.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005540:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2221      	movs	r2, #33	; 0x21
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2210      	movs	r2, #16
 800554e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	893a      	ldrh	r2, [r7, #8]
 8005562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a50      	ldr	r2, [pc, #320]	; (80056b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005572:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005574:	8979      	ldrh	r1, [r7, #10]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	6a3a      	ldr	r2, [r7, #32]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fcea 	bl	8005f54 <I2C_MasterRequestWrite>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e08d      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055a0:	e066      	b.n	8005670 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	6a39      	ldr	r1, [r7, #32]
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 ffaa 	bl	8006500 <I2C_WaitOnTXEFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00d      	beq.n	80055ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d107      	bne.n	80055ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e06b      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	781a      	ldrb	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b04      	cmp	r3, #4
 800560a:	d11b      	bne.n	8005644 <HAL_I2C_Master_Transmit+0x188>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005610:	2b00      	cmp	r3, #0
 8005612:	d017      	beq.n	8005644 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	781a      	ldrb	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	6a39      	ldr	r1, [r7, #32]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 ff9a 	bl	8006582 <I2C_WaitOnBTFFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	2b04      	cmp	r3, #4
 800565a:	d107      	bne.n	800566c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800566a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e01a      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005674:	2b00      	cmp	r3, #0
 8005676:	d194      	bne.n	80055a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e000      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056a4:	2302      	movs	r3, #2
  }
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	00100002 	.word	0x00100002
 80056b4:	ffff0000 	.word	0xffff0000

080056b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af02      	add	r7, sp, #8
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	4608      	mov	r0, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	461a      	mov	r2, r3
 80056c6:	4603      	mov	r3, r0
 80056c8:	817b      	strh	r3, [r7, #10]
 80056ca:	460b      	mov	r3, r1
 80056cc:	813b      	strh	r3, [r7, #8]
 80056ce:	4613      	mov	r3, r2
 80056d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056d2:	f7fe fbc3 	bl	8003e5c <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	f040 80d9 	bne.w	8005898 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	2319      	movs	r3, #25
 80056ec:	2201      	movs	r2, #1
 80056ee:	496d      	ldr	r1, [pc, #436]	; (80058a4 <HAL_I2C_Mem_Write+0x1ec>)
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fe2f 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80056fc:	2302      	movs	r3, #2
 80056fe:	e0cc      	b.n	800589a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_I2C_Mem_Write+0x56>
 800570a:	2302      	movs	r3, #2
 800570c:	e0c5      	b.n	800589a <HAL_I2C_Mem_Write+0x1e2>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b01      	cmp	r3, #1
 8005722:	d007      	beq.n	8005734 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005742:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2221      	movs	r2, #33	; 0x21
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2240      	movs	r2, #64	; 0x40
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a3a      	ldr	r2, [r7, #32]
 800575e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005764:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a4d      	ldr	r2, [pc, #308]	; (80058a8 <HAL_I2C_Mem_Write+0x1f0>)
 8005774:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005776:	88f8      	ldrh	r0, [r7, #6]
 8005778:	893a      	ldrh	r2, [r7, #8]
 800577a:	8979      	ldrh	r1, [r7, #10]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	4603      	mov	r3, r0
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fc66 	bl	8006058 <I2C_RequestMemoryWrite>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d052      	beq.n	8005838 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e081      	b.n	800589a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 feb0 	bl	8006500 <I2C_WaitOnTXEFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d107      	bne.n	80057be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e06b      	b.n	800589a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	781a      	ldrb	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d11b      	bne.n	8005838 <HAL_I2C_Mem_Write+0x180>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	d017      	beq.n	8005838 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1aa      	bne.n	8005796 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fe9c 	bl	8006582 <I2C_WaitOnBTFFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00d      	beq.n	800586c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	2b04      	cmp	r3, #4
 8005856:	d107      	bne.n	8005868 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005866:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e016      	b.n	800589a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800587a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	e000      	b.n	800589a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005898:	2302      	movs	r3, #2
  }
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	00100002 	.word	0x00100002
 80058a8:	ffff0000 	.word	0xffff0000

080058ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08c      	sub	sp, #48	; 0x30
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	4608      	mov	r0, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	461a      	mov	r2, r3
 80058ba:	4603      	mov	r3, r0
 80058bc:	817b      	strh	r3, [r7, #10]
 80058be:	460b      	mov	r3, r1
 80058c0:	813b      	strh	r3, [r7, #8]
 80058c2:	4613      	mov	r3, r2
 80058c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058c6:	f7fe fac9 	bl	8003e5c <HAL_GetTick>
 80058ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	f040 8208 	bne.w	8005cea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	2319      	movs	r3, #25
 80058e0:	2201      	movs	r2, #1
 80058e2:	497b      	ldr	r1, [pc, #492]	; (8005ad0 <HAL_I2C_Mem_Read+0x224>)
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fd35 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80058f0:	2302      	movs	r3, #2
 80058f2:	e1fb      	b.n	8005cec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_I2C_Mem_Read+0x56>
 80058fe:	2302      	movs	r3, #2
 8005900:	e1f4      	b.n	8005cec <HAL_I2C_Mem_Read+0x440>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b01      	cmp	r3, #1
 8005916:	d007      	beq.n	8005928 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005936:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2222      	movs	r2, #34	; 0x22
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2240      	movs	r2, #64	; 0x40
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005952:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005958:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a5b      	ldr	r2, [pc, #364]	; (8005ad4 <HAL_I2C_Mem_Read+0x228>)
 8005968:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800596a:	88f8      	ldrh	r0, [r7, #6]
 800596c:	893a      	ldrh	r2, [r7, #8]
 800596e:	8979      	ldrh	r1, [r7, #10]
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	4603      	mov	r3, r0
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 fc02 	bl	8006184 <I2C_RequestMemoryRead>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e1b0      	b.n	8005cec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598e:	2b00      	cmp	r3, #0
 8005990:	d113      	bne.n	80059ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005992:	2300      	movs	r3, #0
 8005994:	623b      	str	r3, [r7, #32]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	623b      	str	r3, [r7, #32]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	623b      	str	r3, [r7, #32]
 80059a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e184      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d11b      	bne.n	80059fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	61fb      	str	r3, [r7, #28]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	61fb      	str	r3, [r7, #28]
 80059e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e164      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d11b      	bne.n	8005a3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a22:	2300      	movs	r3, #0
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	e144      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a50:	e138      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	f200 80f1 	bhi.w	8005c3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d123      	bne.n	8005aac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fdcb 	bl	8006604 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e139      	b.n	8005cec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005aaa:	e10b      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d14e      	bne.n	8005b52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	2200      	movs	r2, #0
 8005abc:	4906      	ldr	r1, [pc, #24]	; (8005ad8 <HAL_I2C_Mem_Read+0x22c>)
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fc48 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d008      	beq.n	8005adc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e10e      	b.n	8005cec <HAL_I2C_Mem_Read+0x440>
 8005ace:	bf00      	nop
 8005ad0:	00100002 	.word	0x00100002
 8005ad4:	ffff0000 	.word	0xffff0000
 8005ad8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b50:	e0b8      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4966      	ldr	r1, [pc, #408]	; (8005cf4 <HAL_I2C_Mem_Read+0x448>)
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fbf9 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0bf      	b.n	8005cec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	494f      	ldr	r1, [pc, #316]	; (8005cf4 <HAL_I2C_Mem_Read+0x448>)
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fbcb 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e091      	b.n	8005cec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c3c:	e042      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 fcde 	bl	8006604 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e04c      	b.n	8005cec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d118      	bne.n	8005cc4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f47f aec2 	bne.w	8005a52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e000      	b.n	8005cec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005cea:	2302      	movs	r3, #2
  }
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3728      	adds	r7, #40	; 0x28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	00010004 	.word	0x00010004

08005cf8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08a      	sub	sp, #40	; 0x28
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	607a      	str	r2, [r7, #4]
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	460b      	mov	r3, r1
 8005d06:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005d08:	f7fe f8a8 	bl	8003e5c <HAL_GetTick>
 8005d0c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	f040 8111 	bne.w	8005f42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	2319      	movs	r3, #25
 8005d26:	2201      	movs	r2, #1
 8005d28:	4988      	ldr	r1, [pc, #544]	; (8005f4c <HAL_I2C_IsDeviceReady+0x254>)
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fb12 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
 8005d38:	e104      	b.n	8005f44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_I2C_IsDeviceReady+0x50>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e0fd      	b.n	8005f44 <HAL_I2C_IsDeviceReady+0x24c>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d007      	beq.n	8005d6e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2224      	movs	r2, #36	; 0x24
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4a70      	ldr	r2, [pc, #448]	; (8005f50 <HAL_I2C_IsDeviceReady+0x258>)
 8005d90:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005da0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fad0 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00d      	beq.n	8005dd6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc8:	d103      	bne.n	8005dd2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e0b6      	b.n	8005f44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dd6:	897b      	ldrh	r3, [r7, #10]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005de4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005de6:	f7fe f839 	bl	8003e5c <HAL_GetTick>
 8005dea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	bf0c      	ite	eq
 8005dfa:	2301      	moveq	r3, #1
 8005dfc:	2300      	movne	r3, #0
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e10:	bf0c      	ite	eq
 8005e12:	2301      	moveq	r3, #1
 8005e14:	2300      	movne	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e1a:	e025      	b.n	8005e68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e1c:	f7fe f81e 	bl	8003e5c <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d302      	bcc.n	8005e32 <HAL_I2C_IsDeviceReady+0x13a>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d103      	bne.n	8005e3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	22a0      	movs	r2, #160	; 0xa0
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	bf0c      	ite	eq
 8005e48:	2301      	moveq	r3, #1
 8005e4a:	2300      	movne	r3, #0
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5e:	bf0c      	ite	eq
 8005e60:	2301      	moveq	r3, #1
 8005e62:	2300      	movne	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2ba0      	cmp	r3, #160	; 0xa0
 8005e72:	d005      	beq.n	8005e80 <HAL_I2C_IsDeviceReady+0x188>
 8005e74:	7dfb      	ldrb	r3, [r7, #23]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <HAL_I2C_IsDeviceReady+0x188>
 8005e7a:	7dbb      	ldrb	r3, [r7, #22]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0cd      	beq.n	8005e1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d129      	bne.n	8005eea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	2319      	movs	r3, #25
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	4921      	ldr	r1, [pc, #132]	; (8005f4c <HAL_I2C_IsDeviceReady+0x254>)
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 fa44 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e036      	b.n	8005f44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e02c      	b.n	8005f44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	2319      	movs	r3, #25
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	490f      	ldr	r1, [pc, #60]	; (8005f4c <HAL_I2C_IsDeviceReady+0x254>)
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fa20 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e012      	b.n	8005f44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	3301      	adds	r3, #1
 8005f22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	f4ff af32 	bcc.w	8005d92 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	00100002 	.word	0x00100002
 8005f50:	ffff0000 	.word	0xffff0000

08005f54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	460b      	mov	r3, r1
 8005f62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d006      	beq.n	8005f7e <I2C_MasterRequestWrite+0x2a>
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d003      	beq.n	8005f7e <I2C_MasterRequestWrite+0x2a>
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f7c:	d108      	bne.n	8005f90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	e00b      	b.n	8005fa8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	2b12      	cmp	r3, #18
 8005f96:	d107      	bne.n	8005fa8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f9cd 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00d      	beq.n	8005fdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fce:	d103      	bne.n	8005fd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e035      	b.n	8006048 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fe4:	d108      	bne.n	8005ff8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fe6:	897b      	ldrh	r3, [r7, #10]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ff4:	611a      	str	r2, [r3, #16]
 8005ff6:	e01b      	b.n	8006030 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ff8:	897b      	ldrh	r3, [r7, #10]
 8005ffa:	11db      	asrs	r3, r3, #7
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f003 0306 	and.w	r3, r3, #6
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f063 030f 	orn	r3, r3, #15
 8006008:	b2da      	uxtb	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	490e      	ldr	r1, [pc, #56]	; (8006050 <I2C_MasterRequestWrite+0xfc>)
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f9f3 	bl	8006402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e010      	b.n	8006048 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006026:	897b      	ldrh	r3, [r7, #10]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4907      	ldr	r1, [pc, #28]	; (8006054 <I2C_MasterRequestWrite+0x100>)
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f9e3 	bl	8006402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	00010008 	.word	0x00010008
 8006054:	00010002 	.word	0x00010002

08006058 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	4608      	mov	r0, r1
 8006062:	4611      	mov	r1, r2
 8006064:	461a      	mov	r2, r3
 8006066:	4603      	mov	r3, r0
 8006068:	817b      	strh	r3, [r7, #10]
 800606a:	460b      	mov	r3, r1
 800606c:	813b      	strh	r3, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006080:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	2200      	movs	r2, #0
 800608a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f960 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00d      	beq.n	80060b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a8:	d103      	bne.n	80060b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e05f      	b.n	8006176 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060b6:	897b      	ldrh	r3, [r7, #10]
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	461a      	mov	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	6a3a      	ldr	r2, [r7, #32]
 80060ca:	492d      	ldr	r1, [pc, #180]	; (8006180 <I2C_RequestMemoryWrite+0x128>)
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 f998 	bl	8006402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e04c      	b.n	8006176 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f4:	6a39      	ldr	r1, [r7, #32]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 fa02 	bl	8006500 <I2C_WaitOnTXEFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	2b04      	cmp	r3, #4
 8006108:	d107      	bne.n	800611a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006118:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e02b      	b.n	8006176 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d105      	bne.n	8006130 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006124:	893b      	ldrh	r3, [r7, #8]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	611a      	str	r2, [r3, #16]
 800612e:	e021      	b.n	8006174 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006130:	893b      	ldrh	r3, [r7, #8]
 8006132:	0a1b      	lsrs	r3, r3, #8
 8006134:	b29b      	uxth	r3, r3
 8006136:	b2da      	uxtb	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800613e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006140:	6a39      	ldr	r1, [r7, #32]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 f9dc 	bl	8006500 <I2C_WaitOnTXEFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00d      	beq.n	800616a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	2b04      	cmp	r3, #4
 8006154:	d107      	bne.n	8006166 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006164:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e005      	b.n	8006176 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800616a:	893b      	ldrh	r3, [r7, #8]
 800616c:	b2da      	uxtb	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	00010002 	.word	0x00010002

08006184 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af02      	add	r7, sp, #8
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	4608      	mov	r0, r1
 800618e:	4611      	mov	r1, r2
 8006190:	461a      	mov	r2, r3
 8006192:	4603      	mov	r3, r0
 8006194:	817b      	strh	r3, [r7, #10]
 8006196:	460b      	mov	r3, r1
 8006198:	813b      	strh	r3, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 f8c2 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00d      	beq.n	80061f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e4:	d103      	bne.n	80061ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e0aa      	b.n	8006348 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061f2:	897b      	ldrh	r3, [r7, #10]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006200:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	6a3a      	ldr	r2, [r7, #32]
 8006206:	4952      	ldr	r1, [pc, #328]	; (8006350 <I2C_RequestMemoryRead+0x1cc>)
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f8fa 	bl	8006402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e097      	b.n	8006348 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800622e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006230:	6a39      	ldr	r1, [r7, #32]
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f964 	bl	8006500 <I2C_WaitOnTXEFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00d      	beq.n	800625a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	2b04      	cmp	r3, #4
 8006244:	d107      	bne.n	8006256 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006254:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e076      	b.n	8006348 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800625a:	88fb      	ldrh	r3, [r7, #6]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d105      	bne.n	800626c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006260:	893b      	ldrh	r3, [r7, #8]
 8006262:	b2da      	uxtb	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	611a      	str	r2, [r3, #16]
 800626a:	e021      	b.n	80062b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800626c:	893b      	ldrh	r3, [r7, #8]
 800626e:	0a1b      	lsrs	r3, r3, #8
 8006270:	b29b      	uxth	r3, r3
 8006272:	b2da      	uxtb	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800627a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627c:	6a39      	ldr	r1, [r7, #32]
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f93e 	bl	8006500 <I2C_WaitOnTXEFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00d      	beq.n	80062a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	2b04      	cmp	r3, #4
 8006290:	d107      	bne.n	80062a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e050      	b.n	8006348 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062a6:	893b      	ldrh	r3, [r7, #8]
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b2:	6a39      	ldr	r1, [r7, #32]
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f923 	bl	8006500 <I2C_WaitOnTXEFlagUntilTimeout>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00d      	beq.n	80062dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d107      	bne.n	80062d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e035      	b.n	8006348 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f82b 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00d      	beq.n	8006320 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006312:	d103      	bne.n	800631c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800631a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e013      	b.n	8006348 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006320:	897b      	ldrh	r3, [r7, #10]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f043 0301 	orr.w	r3, r3, #1
 8006328:	b2da      	uxtb	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	6a3a      	ldr	r2, [r7, #32]
 8006334:	4906      	ldr	r1, [pc, #24]	; (8006350 <I2C_RequestMemoryRead+0x1cc>)
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 f863 	bl	8006402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	00010002 	.word	0x00010002

08006354 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006364:	e025      	b.n	80063b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636c:	d021      	beq.n	80063b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800636e:	f7fd fd75 	bl	8003e5c <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d302      	bcc.n	8006384 <I2C_WaitOnFlagUntilTimeout+0x30>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d116      	bne.n	80063b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	f043 0220 	orr.w	r2, r3, #32
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e023      	b.n	80063fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	0c1b      	lsrs	r3, r3, #16
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d10d      	bne.n	80063d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	43da      	mvns	r2, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4013      	ands	r3, r2
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bf0c      	ite	eq
 80063ce:	2301      	moveq	r3, #1
 80063d0:	2300      	movne	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	e00c      	b.n	80063f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	43da      	mvns	r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4013      	ands	r3, r2
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bf0c      	ite	eq
 80063ea:	2301      	moveq	r3, #1
 80063ec:	2300      	movne	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d0b6      	beq.n	8006366 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
 800640e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006410:	e051      	b.n	80064b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800641c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006420:	d123      	bne.n	800646a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006430:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800643a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	f043 0204 	orr.w	r2, r3, #4
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e046      	b.n	80064f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d021      	beq.n	80064b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006472:	f7fd fcf3 	bl	8003e5c <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	429a      	cmp	r2, r3
 8006480:	d302      	bcc.n	8006488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d116      	bne.n	80064b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	f043 0220 	orr.w	r2, r3, #32
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e020      	b.n	80064f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	0c1b      	lsrs	r3, r3, #16
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d10c      	bne.n	80064da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	43da      	mvns	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4013      	ands	r3, r2
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	bf14      	ite	ne
 80064d2:	2301      	movne	r3, #1
 80064d4:	2300      	moveq	r3, #0
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	e00b      	b.n	80064f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	43da      	mvns	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	4013      	ands	r3, r2
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	bf14      	ite	ne
 80064ec:	2301      	movne	r3, #1
 80064ee:	2300      	moveq	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d18d      	bne.n	8006412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800650c:	e02d      	b.n	800656a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f8ce 	bl	80066b0 <I2C_IsAcknowledgeFailed>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e02d      	b.n	800657a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d021      	beq.n	800656a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006526:	f7fd fc99 	bl	8003e5c <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	429a      	cmp	r2, r3
 8006534:	d302      	bcc.n	800653c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d116      	bne.n	800656a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2220      	movs	r2, #32
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f043 0220 	orr.w	r2, r3, #32
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e007      	b.n	800657a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006574:	2b80      	cmp	r3, #128	; 0x80
 8006576:	d1ca      	bne.n	800650e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800658e:	e02d      	b.n	80065ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f88d 	bl	80066b0 <I2C_IsAcknowledgeFailed>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e02d      	b.n	80065fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	d021      	beq.n	80065ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a8:	f7fd fc58 	bl	8003e5c <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d302      	bcc.n	80065be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d116      	bne.n	80065ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	f043 0220 	orr.w	r2, r3, #32
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e007      	b.n	80065fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d1ca      	bne.n	8006590 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006610:	e042      	b.n	8006698 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b10      	cmp	r3, #16
 800661e:	d119      	bne.n	8006654 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0210 	mvn.w	r2, #16
 8006628:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2220      	movs	r2, #32
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e029      	b.n	80066a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006654:	f7fd fc02 	bl	8003e5c <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	d302      	bcc.n	800666a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d116      	bne.n	8006698 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	f043 0220 	orr.w	r2, r3, #32
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e007      	b.n	80066a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b40      	cmp	r3, #64	; 0x40
 80066a4:	d1b5      	bne.n	8006612 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c6:	d11b      	bne.n	8006700 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	f043 0204 	orr.w	r2, r3, #4
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
	...

08006710 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e267      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d075      	beq.n	800681a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800672e:	4b88      	ldr	r3, [pc, #544]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 030c 	and.w	r3, r3, #12
 8006736:	2b04      	cmp	r3, #4
 8006738:	d00c      	beq.n	8006754 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800673a:	4b85      	ldr	r3, [pc, #532]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006742:	2b08      	cmp	r3, #8
 8006744:	d112      	bne.n	800676c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006746:	4b82      	ldr	r3, [pc, #520]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006752:	d10b      	bne.n	800676c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006754:	4b7e      	ldr	r3, [pc, #504]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d05b      	beq.n	8006818 <HAL_RCC_OscConfig+0x108>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d157      	bne.n	8006818 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e242      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006774:	d106      	bne.n	8006784 <HAL_RCC_OscConfig+0x74>
 8006776:	4b76      	ldr	r3, [pc, #472]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a75      	ldr	r2, [pc, #468]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 800677c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006780:	6013      	str	r3, [r2, #0]
 8006782:	e01d      	b.n	80067c0 <HAL_RCC_OscConfig+0xb0>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800678c:	d10c      	bne.n	80067a8 <HAL_RCC_OscConfig+0x98>
 800678e:	4b70      	ldr	r3, [pc, #448]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a6f      	ldr	r2, [pc, #444]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	4b6d      	ldr	r3, [pc, #436]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a6c      	ldr	r2, [pc, #432]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80067a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	e00b      	b.n	80067c0 <HAL_RCC_OscConfig+0xb0>
 80067a8:	4b69      	ldr	r3, [pc, #420]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a68      	ldr	r2, [pc, #416]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80067ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	4b66      	ldr	r3, [pc, #408]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a65      	ldr	r2, [pc, #404]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80067ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d013      	beq.n	80067f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c8:	f7fd fb48 	bl	8003e5c <HAL_GetTick>
 80067cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067d0:	f7fd fb44 	bl	8003e5c <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b64      	cmp	r3, #100	; 0x64
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e207      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e2:	4b5b      	ldr	r3, [pc, #364]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0f0      	beq.n	80067d0 <HAL_RCC_OscConfig+0xc0>
 80067ee:	e014      	b.n	800681a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f0:	f7fd fb34 	bl	8003e5c <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067f8:	f7fd fb30 	bl	8003e5c <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b64      	cmp	r3, #100	; 0x64
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e1f3      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800680a:	4b51      	ldr	r3, [pc, #324]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1f0      	bne.n	80067f8 <HAL_RCC_OscConfig+0xe8>
 8006816:	e000      	b.n	800681a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d063      	beq.n	80068ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006826:	4b4a      	ldr	r3, [pc, #296]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 030c 	and.w	r3, r3, #12
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00b      	beq.n	800684a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006832:	4b47      	ldr	r3, [pc, #284]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800683a:	2b08      	cmp	r3, #8
 800683c:	d11c      	bne.n	8006878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800683e:	4b44      	ldr	r3, [pc, #272]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d116      	bne.n	8006878 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800684a:	4b41      	ldr	r3, [pc, #260]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d005      	beq.n	8006862 <HAL_RCC_OscConfig+0x152>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d001      	beq.n	8006862 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e1c7      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006862:	4b3b      	ldr	r3, [pc, #236]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	4937      	ldr	r1, [pc, #220]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006872:	4313      	orrs	r3, r2
 8006874:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006876:	e03a      	b.n	80068ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d020      	beq.n	80068c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006880:	4b34      	ldr	r3, [pc, #208]	; (8006954 <HAL_RCC_OscConfig+0x244>)
 8006882:	2201      	movs	r2, #1
 8006884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006886:	f7fd fae9 	bl	8003e5c <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800688e:	f7fd fae5 	bl	8003e5c <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e1a8      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a0:	4b2b      	ldr	r3, [pc, #172]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f0      	beq.n	800688e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ac:	4b28      	ldr	r3, [pc, #160]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	4925      	ldr	r1, [pc, #148]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	600b      	str	r3, [r1, #0]
 80068c0:	e015      	b.n	80068ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068c2:	4b24      	ldr	r3, [pc, #144]	; (8006954 <HAL_RCC_OscConfig+0x244>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c8:	f7fd fac8 	bl	8003e5c <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068d0:	f7fd fac4 	bl	8003e5c <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e187      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068e2:	4b1b      	ldr	r3, [pc, #108]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d036      	beq.n	8006968 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d016      	beq.n	8006930 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006902:	4b15      	ldr	r3, [pc, #84]	; (8006958 <HAL_RCC_OscConfig+0x248>)
 8006904:	2201      	movs	r2, #1
 8006906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006908:	f7fd faa8 	bl	8003e5c <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800690e:	e008      	b.n	8006922 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006910:	f7fd faa4 	bl	8003e5c <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e167      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006922:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0f0      	beq.n	8006910 <HAL_RCC_OscConfig+0x200>
 800692e:	e01b      	b.n	8006968 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006930:	4b09      	ldr	r3, [pc, #36]	; (8006958 <HAL_RCC_OscConfig+0x248>)
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006936:	f7fd fa91 	bl	8003e5c <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800693c:	e00e      	b.n	800695c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800693e:	f7fd fa8d 	bl	8003e5c <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d907      	bls.n	800695c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e150      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
 8006950:	40023800 	.word	0x40023800
 8006954:	42470000 	.word	0x42470000
 8006958:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800695c:	4b88      	ldr	r3, [pc, #544]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 800695e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1ea      	bne.n	800693e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 8097 	beq.w	8006aa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006976:	2300      	movs	r3, #0
 8006978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800697a:	4b81      	ldr	r3, [pc, #516]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10f      	bne.n	80069a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006986:	2300      	movs	r3, #0
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	4b7d      	ldr	r3, [pc, #500]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	4a7c      	ldr	r2, [pc, #496]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006994:	6413      	str	r3, [r2, #64]	; 0x40
 8006996:	4b7a      	ldr	r3, [pc, #488]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800699e:	60bb      	str	r3, [r7, #8]
 80069a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a6:	4b77      	ldr	r3, [pc, #476]	; (8006b84 <HAL_RCC_OscConfig+0x474>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d118      	bne.n	80069e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069b2:	4b74      	ldr	r3, [pc, #464]	; (8006b84 <HAL_RCC_OscConfig+0x474>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a73      	ldr	r2, [pc, #460]	; (8006b84 <HAL_RCC_OscConfig+0x474>)
 80069b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069be:	f7fd fa4d 	bl	8003e5c <HAL_GetTick>
 80069c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c6:	f7fd fa49 	bl	8003e5c <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e10c      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d8:	4b6a      	ldr	r3, [pc, #424]	; (8006b84 <HAL_RCC_OscConfig+0x474>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0f0      	beq.n	80069c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d106      	bne.n	80069fa <HAL_RCC_OscConfig+0x2ea>
 80069ec:	4b64      	ldr	r3, [pc, #400]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 80069ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f0:	4a63      	ldr	r2, [pc, #396]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	6713      	str	r3, [r2, #112]	; 0x70
 80069f8:	e01c      	b.n	8006a34 <HAL_RCC_OscConfig+0x324>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b05      	cmp	r3, #5
 8006a00:	d10c      	bne.n	8006a1c <HAL_RCC_OscConfig+0x30c>
 8006a02:	4b5f      	ldr	r3, [pc, #380]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a06:	4a5e      	ldr	r2, [pc, #376]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a08:	f043 0304 	orr.w	r3, r3, #4
 8006a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a0e:	4b5c      	ldr	r3, [pc, #368]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	4a5b      	ldr	r2, [pc, #364]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a14:	f043 0301 	orr.w	r3, r3, #1
 8006a18:	6713      	str	r3, [r2, #112]	; 0x70
 8006a1a:	e00b      	b.n	8006a34 <HAL_RCC_OscConfig+0x324>
 8006a1c:	4b58      	ldr	r3, [pc, #352]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a20:	4a57      	ldr	r2, [pc, #348]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a22:	f023 0301 	bic.w	r3, r3, #1
 8006a26:	6713      	str	r3, [r2, #112]	; 0x70
 8006a28:	4b55      	ldr	r3, [pc, #340]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2c:	4a54      	ldr	r2, [pc, #336]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a2e:	f023 0304 	bic.w	r3, r3, #4
 8006a32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d015      	beq.n	8006a68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a3c:	f7fd fa0e 	bl	8003e5c <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a42:	e00a      	b.n	8006a5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a44:	f7fd fa0a 	bl	8003e5c <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e0cb      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a5a:	4b49      	ldr	r3, [pc, #292]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0ee      	beq.n	8006a44 <HAL_RCC_OscConfig+0x334>
 8006a66:	e014      	b.n	8006a92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a68:	f7fd f9f8 	bl	8003e5c <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a6e:	e00a      	b.n	8006a86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a70:	f7fd f9f4 	bl	8003e5c <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e0b5      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a86:	4b3e      	ldr	r3, [pc, #248]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1ee      	bne.n	8006a70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a92:	7dfb      	ldrb	r3, [r7, #23]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d105      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a98:	4b39      	ldr	r3, [pc, #228]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	4a38      	ldr	r2, [pc, #224]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 80a1 	beq.w	8006bf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006aae:	4b34      	ldr	r3, [pc, #208]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d05c      	beq.n	8006b74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d141      	bne.n	8006b46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac2:	4b31      	ldr	r3, [pc, #196]	; (8006b88 <HAL_RCC_OscConfig+0x478>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac8:	f7fd f9c8 	bl	8003e5c <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ace:	e008      	b.n	8006ae2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ad0:	f7fd f9c4 	bl	8003e5c <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e087      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae2:	4b27      	ldr	r3, [pc, #156]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f0      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69da      	ldr	r2, [r3, #28]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	019b      	lsls	r3, r3, #6
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	3b01      	subs	r3, #1
 8006b08:	041b      	lsls	r3, r3, #16
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	061b      	lsls	r3, r3, #24
 8006b12:	491b      	ldr	r1, [pc, #108]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b18:	4b1b      	ldr	r3, [pc, #108]	; (8006b88 <HAL_RCC_OscConfig+0x478>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b1e:	f7fd f99d 	bl	8003e5c <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b24:	e008      	b.n	8006b38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b26:	f7fd f999 	bl	8003e5c <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e05c      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b38:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0f0      	beq.n	8006b26 <HAL_RCC_OscConfig+0x416>
 8006b44:	e054      	b.n	8006bf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b46:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <HAL_RCC_OscConfig+0x478>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b4c:	f7fd f986 	bl	8003e5c <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b54:	f7fd f982 	bl	8003e5c <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e045      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b66:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f0      	bne.n	8006b54 <HAL_RCC_OscConfig+0x444>
 8006b72:	e03d      	b.n	8006bf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d107      	bne.n	8006b8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e038      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
 8006b80:	40023800 	.word	0x40023800
 8006b84:	40007000 	.word	0x40007000
 8006b88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	; (8006bfc <HAL_RCC_OscConfig+0x4ec>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d028      	beq.n	8006bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d121      	bne.n	8006bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d11a      	bne.n	8006bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d111      	bne.n	8006bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d107      	bne.n	8006bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d001      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40023800 	.word	0x40023800

08006c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e0cc      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c14:	4b68      	ldr	r3, [pc, #416]	; (8006db8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d90c      	bls.n	8006c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c22:	4b65      	ldr	r3, [pc, #404]	; (8006db8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c2a:	4b63      	ldr	r3, [pc, #396]	; (8006db8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0307 	and.w	r3, r3, #7
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d001      	beq.n	8006c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e0b8      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d020      	beq.n	8006c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d005      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c54:	4b59      	ldr	r3, [pc, #356]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	4a58      	ldr	r2, [pc, #352]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c6c:	4b53      	ldr	r3, [pc, #332]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	4a52      	ldr	r2, [pc, #328]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c78:	4b50      	ldr	r3, [pc, #320]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	494d      	ldr	r1, [pc, #308]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d044      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d107      	bne.n	8006cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c9e:	4b47      	ldr	r3, [pc, #284]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d119      	bne.n	8006cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e07f      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d003      	beq.n	8006cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d107      	bne.n	8006cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cbe:	4b3f      	ldr	r3, [pc, #252]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e06f      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cce:	4b3b      	ldr	r3, [pc, #236]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e067      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cde:	4b37      	ldr	r3, [pc, #220]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f023 0203 	bic.w	r2, r3, #3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	4934      	ldr	r1, [pc, #208]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cf0:	f7fd f8b4 	bl	8003e5c <HAL_GetTick>
 8006cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cf6:	e00a      	b.n	8006d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cf8:	f7fd f8b0 	bl	8003e5c <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e04f      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d0e:	4b2b      	ldr	r3, [pc, #172]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 020c 	and.w	r2, r3, #12
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d1eb      	bne.n	8006cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d20:	4b25      	ldr	r3, [pc, #148]	; (8006db8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d20c      	bcs.n	8006d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d2e:	4b22      	ldr	r3, [pc, #136]	; (8006db8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d36:	4b20      	ldr	r3, [pc, #128]	; (8006db8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d001      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e032      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d54:	4b19      	ldr	r3, [pc, #100]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	4916      	ldr	r1, [pc, #88]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0308 	and.w	r3, r3, #8
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d009      	beq.n	8006d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d72:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	490e      	ldr	r1, [pc, #56]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d86:	f000 f821 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	091b      	lsrs	r3, r3, #4
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	490a      	ldr	r1, [pc, #40]	; (8006dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d98:	5ccb      	ldrb	r3, [r1, r3]
 8006d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9e:	4a09      	ldr	r2, [pc, #36]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006da2:	4b09      	ldr	r3, [pc, #36]	; (8006dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fd f814 	bl	8003dd4 <HAL_InitTick>

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	40023c00 	.word	0x40023c00
 8006dbc:	40023800 	.word	0x40023800
 8006dc0:	0800d9ec 	.word	0x0800d9ec
 8006dc4:	20000010 	.word	0x20000010
 8006dc8:	20000014 	.word	0x20000014

08006dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dd0:	b090      	sub	sp, #64	; 0x40
 8006dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd8:	2300      	movs	r3, #0
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ddc:	2300      	movs	r3, #0
 8006dde:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006de4:	4b59      	ldr	r3, [pc, #356]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f003 030c 	and.w	r3, r3, #12
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d00d      	beq.n	8006e0c <HAL_RCC_GetSysClockFreq+0x40>
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	f200 80a1 	bhi.w	8006f38 <HAL_RCC_GetSysClockFreq+0x16c>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <HAL_RCC_GetSysClockFreq+0x34>
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d003      	beq.n	8006e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8006dfe:	e09b      	b.n	8006f38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e00:	4b53      	ldr	r3, [pc, #332]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e02:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006e04:	e09b      	b.n	8006f3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e06:	4b53      	ldr	r3, [pc, #332]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e0a:	e098      	b.n	8006f3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e0c:	4b4f      	ldr	r3, [pc, #316]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e14:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e16:	4b4d      	ldr	r3, [pc, #308]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d028      	beq.n	8006e74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e22:	4b4a      	ldr	r3, [pc, #296]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	099b      	lsrs	r3, r3, #6
 8006e28:	2200      	movs	r2, #0
 8006e2a:	623b      	str	r3, [r7, #32]
 8006e2c:	627a      	str	r2, [r7, #36]	; 0x24
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006e34:	2100      	movs	r1, #0
 8006e36:	4b47      	ldr	r3, [pc, #284]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e38:	fb03 f201 	mul.w	r2, r3, r1
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	fb00 f303 	mul.w	r3, r0, r3
 8006e42:	4413      	add	r3, r2
 8006e44:	4a43      	ldr	r2, [pc, #268]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e46:	fba0 1202 	umull	r1, r2, r0, r2
 8006e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e4c:	460a      	mov	r2, r1
 8006e4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e52:	4413      	add	r3, r2
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	2200      	movs	r2, #0
 8006e5a:	61bb      	str	r3, [r7, #24]
 8006e5c:	61fa      	str	r2, [r7, #28]
 8006e5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006e66:	f7f9 fe9f 	bl	8000ba8 <__aeabi_uldivmod>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4613      	mov	r3, r2
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e72:	e053      	b.n	8006f1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e74:	4b35      	ldr	r3, [pc, #212]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	099b      	lsrs	r3, r3, #6
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	613b      	str	r3, [r7, #16]
 8006e7e:	617a      	str	r2, [r7, #20]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e86:	f04f 0b00 	mov.w	fp, #0
 8006e8a:	4652      	mov	r2, sl
 8006e8c:	465b      	mov	r3, fp
 8006e8e:	f04f 0000 	mov.w	r0, #0
 8006e92:	f04f 0100 	mov.w	r1, #0
 8006e96:	0159      	lsls	r1, r3, #5
 8006e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e9c:	0150      	lsls	r0, r2, #5
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	ebb2 080a 	subs.w	r8, r2, sl
 8006ea6:	eb63 090b 	sbc.w	r9, r3, fp
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006eb6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006eba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006ebe:	ebb2 0408 	subs.w	r4, r2, r8
 8006ec2:	eb63 0509 	sbc.w	r5, r3, r9
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	00eb      	lsls	r3, r5, #3
 8006ed0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ed4:	00e2      	lsls	r2, r4, #3
 8006ed6:	4614      	mov	r4, r2
 8006ed8:	461d      	mov	r5, r3
 8006eda:	eb14 030a 	adds.w	r3, r4, sl
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	eb45 030b 	adc.w	r3, r5, fp
 8006ee4:	607b      	str	r3, [r7, #4]
 8006ee6:	f04f 0200 	mov.w	r2, #0
 8006eea:	f04f 0300 	mov.w	r3, #0
 8006eee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	028b      	lsls	r3, r1, #10
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006efc:	4621      	mov	r1, r4
 8006efe:	028a      	lsls	r2, r1, #10
 8006f00:	4610      	mov	r0, r2
 8006f02:	4619      	mov	r1, r3
 8006f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f06:	2200      	movs	r2, #0
 8006f08:	60bb      	str	r3, [r7, #8]
 8006f0a:	60fa      	str	r2, [r7, #12]
 8006f0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f10:	f7f9 fe4a 	bl	8000ba8 <__aeabi_uldivmod>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4613      	mov	r3, r2
 8006f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	0c1b      	lsrs	r3, r3, #16
 8006f22:	f003 0303 	and.w	r3, r3, #3
 8006f26:	3301      	adds	r3, #1
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006f2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f36:	e002      	b.n	8006f3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f38:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3740      	adds	r7, #64	; 0x40
 8006f44:	46bd      	mov	sp, r7
 8006f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f4a:	bf00      	nop
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	00f42400 	.word	0x00f42400
 8006f54:	017d7840 	.word	0x017d7840

08006f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f5c:	4b03      	ldr	r3, [pc, #12]	; (8006f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20000010 	.word	0x20000010

08006f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f74:	f7ff fff0 	bl	8006f58 <HAL_RCC_GetHCLKFreq>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	0a9b      	lsrs	r3, r3, #10
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	4903      	ldr	r1, [pc, #12]	; (8006f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f86:	5ccb      	ldrb	r3, [r1, r3]
 8006f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	40023800 	.word	0x40023800
 8006f94:	0800d9fc 	.word	0x0800d9fc

08006f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f9c:	f7ff ffdc 	bl	8006f58 <HAL_RCC_GetHCLKFreq>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	0b5b      	lsrs	r3, r3, #13
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	4903      	ldr	r1, [pc, #12]	; (8006fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fae:	5ccb      	ldrb	r3, [r1, r3]
 8006fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	0800d9fc 	.word	0x0800d9fc

08006fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e041      	b.n	8007056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fc f946 	bl	8003278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f000 fa7a 	bl	80074f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	d001      	beq.n	8007078 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e046      	b.n	8007106 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a23      	ldr	r2, [pc, #140]	; (8007114 <HAL_TIM_Base_Start+0xb4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d022      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007092:	d01d      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a1f      	ldr	r2, [pc, #124]	; (8007118 <HAL_TIM_Base_Start+0xb8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d018      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a1e      	ldr	r2, [pc, #120]	; (800711c <HAL_TIM_Base_Start+0xbc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d013      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a1c      	ldr	r2, [pc, #112]	; (8007120 <HAL_TIM_Base_Start+0xc0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00e      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1b      	ldr	r2, [pc, #108]	; (8007124 <HAL_TIM_Base_Start+0xc4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d009      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a19      	ldr	r2, [pc, #100]	; (8007128 <HAL_TIM_Base_Start+0xc8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d004      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a18      	ldr	r2, [pc, #96]	; (800712c <HAL_TIM_Base_Start+0xcc>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d111      	bne.n	80070f4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b06      	cmp	r3, #6
 80070e0:	d010      	beq.n	8007104 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0201 	orr.w	r2, r2, #1
 80070f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f2:	e007      	b.n	8007104 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 0201 	orr.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	40010000 	.word	0x40010000
 8007118:	40000400 	.word	0x40000400
 800711c:	40000800 	.word	0x40000800
 8007120:	40000c00 	.word	0x40000c00
 8007124:	40010400 	.word	0x40010400
 8007128:	40014000 	.word	0x40014000
 800712c:	40001800 	.word	0x40001800

08007130 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e041      	b.n	80071c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f839 	bl	80071ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3304      	adds	r3, #4
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	f000 f9c2 	bl	80074f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
	...

080071e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071fe:	2302      	movs	r3, #2
 8007200:	e0ae      	b.n	8007360 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b0c      	cmp	r3, #12
 800720e:	f200 809f 	bhi.w	8007350 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007212:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	0800724d 	.word	0x0800724d
 800721c:	08007351 	.word	0x08007351
 8007220:	08007351 	.word	0x08007351
 8007224:	08007351 	.word	0x08007351
 8007228:	0800728d 	.word	0x0800728d
 800722c:	08007351 	.word	0x08007351
 8007230:	08007351 	.word	0x08007351
 8007234:	08007351 	.word	0x08007351
 8007238:	080072cf 	.word	0x080072cf
 800723c:	08007351 	.word	0x08007351
 8007240:	08007351 	.word	0x08007351
 8007244:	08007351 	.word	0x08007351
 8007248:	0800730f 	.word	0x0800730f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68b9      	ldr	r1, [r7, #8]
 8007252:	4618      	mov	r0, r3
 8007254:	f000 f9f0 	bl	8007638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0208 	orr.w	r2, r2, #8
 8007266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699a      	ldr	r2, [r3, #24]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 0204 	bic.w	r2, r2, #4
 8007276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6999      	ldr	r1, [r3, #24]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	691a      	ldr	r2, [r3, #16]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	619a      	str	r2, [r3, #24]
      break;
 800728a:	e064      	b.n	8007356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	4618      	mov	r0, r3
 8007294:	f000 fa40 	bl	8007718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6999      	ldr	r1, [r3, #24]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	021a      	lsls	r2, r3, #8
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	619a      	str	r2, [r3, #24]
      break;
 80072cc:	e043      	b.n	8007356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fa95 	bl	8007804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69da      	ldr	r2, [r3, #28]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0208 	orr.w	r2, r2, #8
 80072e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69da      	ldr	r2, [r3, #28]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0204 	bic.w	r2, r2, #4
 80072f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69d9      	ldr	r1, [r3, #28]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	691a      	ldr	r2, [r3, #16]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	61da      	str	r2, [r3, #28]
      break;
 800730c:	e023      	b.n	8007356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fae9 	bl	80078ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69da      	ldr	r2, [r3, #28]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69da      	ldr	r2, [r3, #28]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69d9      	ldr	r1, [r3, #28]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	021a      	lsls	r2, r3, #8
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	61da      	str	r2, [r3, #28]
      break;
 800734e:	e002      	b.n	8007356 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	75fb      	strb	r3, [r7, #23]
      break;
 8007354:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_TIM_ConfigClockSource+0x1c>
 8007380:	2302      	movs	r3, #2
 8007382:	e0b4      	b.n	80074ee <HAL_TIM_ConfigClockSource+0x186>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073bc:	d03e      	beq.n	800743c <HAL_TIM_ConfigClockSource+0xd4>
 80073be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c2:	f200 8087 	bhi.w	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ca:	f000 8086 	beq.w	80074da <HAL_TIM_ConfigClockSource+0x172>
 80073ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d2:	d87f      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073d4:	2b70      	cmp	r3, #112	; 0x70
 80073d6:	d01a      	beq.n	800740e <HAL_TIM_ConfigClockSource+0xa6>
 80073d8:	2b70      	cmp	r3, #112	; 0x70
 80073da:	d87b      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073dc:	2b60      	cmp	r3, #96	; 0x60
 80073de:	d050      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x11a>
 80073e0:	2b60      	cmp	r3, #96	; 0x60
 80073e2:	d877      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073e4:	2b50      	cmp	r3, #80	; 0x50
 80073e6:	d03c      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0xfa>
 80073e8:	2b50      	cmp	r3, #80	; 0x50
 80073ea:	d873      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073ec:	2b40      	cmp	r3, #64	; 0x40
 80073ee:	d058      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0x13a>
 80073f0:	2b40      	cmp	r3, #64	; 0x40
 80073f2:	d86f      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073f4:	2b30      	cmp	r3, #48	; 0x30
 80073f6:	d064      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x15a>
 80073f8:	2b30      	cmp	r3, #48	; 0x30
 80073fa:	d86b      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d060      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007400:	2b20      	cmp	r3, #32
 8007402:	d867      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007404:	2b00      	cmp	r3, #0
 8007406:	d05c      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007408:	2b10      	cmp	r3, #16
 800740a:	d05a      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x15a>
 800740c:	e062      	b.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	6899      	ldr	r1, [r3, #8]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f000 fb35 	bl	8007a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007430:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	609a      	str	r2, [r3, #8]
      break;
 800743a:	e04f      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6818      	ldr	r0, [r3, #0]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	6899      	ldr	r1, [r3, #8]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f000 fb1e 	bl	8007a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800745e:	609a      	str	r2, [r3, #8]
      break;
 8007460:	e03c      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	6859      	ldr	r1, [r3, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	461a      	mov	r2, r3
 8007470:	f000 fa92 	bl	8007998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2150      	movs	r1, #80	; 0x50
 800747a:	4618      	mov	r0, r3
 800747c:	f000 faeb 	bl	8007a56 <TIM_ITRx_SetConfig>
      break;
 8007480:	e02c      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6818      	ldr	r0, [r3, #0]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	6859      	ldr	r1, [r3, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	461a      	mov	r2, r3
 8007490:	f000 fab1 	bl	80079f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2160      	movs	r1, #96	; 0x60
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fadb 	bl	8007a56 <TIM_ITRx_SetConfig>
      break;
 80074a0:	e01c      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	6859      	ldr	r1, [r3, #4]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f000 fa72 	bl	8007998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2140      	movs	r1, #64	; 0x40
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 facb 	bl	8007a56 <TIM_ITRx_SetConfig>
      break;
 80074c0:	e00c      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4619      	mov	r1, r3
 80074cc:	4610      	mov	r0, r2
 80074ce:	f000 fac2 	bl	8007a56 <TIM_ITRx_SetConfig>
      break;
 80074d2:	e003      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]
      break;
 80074d8:	e000      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a40      	ldr	r2, [pc, #256]	; (800760c <TIM_Base_SetConfig+0x114>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d013      	beq.n	8007538 <TIM_Base_SetConfig+0x40>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007516:	d00f      	beq.n	8007538 <TIM_Base_SetConfig+0x40>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a3d      	ldr	r2, [pc, #244]	; (8007610 <TIM_Base_SetConfig+0x118>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00b      	beq.n	8007538 <TIM_Base_SetConfig+0x40>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a3c      	ldr	r2, [pc, #240]	; (8007614 <TIM_Base_SetConfig+0x11c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d007      	beq.n	8007538 <TIM_Base_SetConfig+0x40>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a3b      	ldr	r2, [pc, #236]	; (8007618 <TIM_Base_SetConfig+0x120>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d003      	beq.n	8007538 <TIM_Base_SetConfig+0x40>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a3a      	ldr	r2, [pc, #232]	; (800761c <TIM_Base_SetConfig+0x124>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d108      	bne.n	800754a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a2f      	ldr	r2, [pc, #188]	; (800760c <TIM_Base_SetConfig+0x114>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d02b      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007558:	d027      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a2c      	ldr	r2, [pc, #176]	; (8007610 <TIM_Base_SetConfig+0x118>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d023      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a2b      	ldr	r2, [pc, #172]	; (8007614 <TIM_Base_SetConfig+0x11c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d01f      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a2a      	ldr	r2, [pc, #168]	; (8007618 <TIM_Base_SetConfig+0x120>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d01b      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a29      	ldr	r2, [pc, #164]	; (800761c <TIM_Base_SetConfig+0x124>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d017      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a28      	ldr	r2, [pc, #160]	; (8007620 <TIM_Base_SetConfig+0x128>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d013      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a27      	ldr	r2, [pc, #156]	; (8007624 <TIM_Base_SetConfig+0x12c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00f      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a26      	ldr	r2, [pc, #152]	; (8007628 <TIM_Base_SetConfig+0x130>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00b      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a25      	ldr	r2, [pc, #148]	; (800762c <TIM_Base_SetConfig+0x134>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d007      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a24      	ldr	r2, [pc, #144]	; (8007630 <TIM_Base_SetConfig+0x138>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d003      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a23      	ldr	r2, [pc, #140]	; (8007634 <TIM_Base_SetConfig+0x13c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d108      	bne.n	80075bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a0a      	ldr	r2, [pc, #40]	; (800760c <TIM_Base_SetConfig+0x114>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d003      	beq.n	80075f0 <TIM_Base_SetConfig+0xf8>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a0c      	ldr	r2, [pc, #48]	; (800761c <TIM_Base_SetConfig+0x124>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d103      	bne.n	80075f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	615a      	str	r2, [r3, #20]
}
 80075fe:	bf00      	nop
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	40010000 	.word	0x40010000
 8007610:	40000400 	.word	0x40000400
 8007614:	40000800 	.word	0x40000800
 8007618:	40000c00 	.word	0x40000c00
 800761c:	40010400 	.word	0x40010400
 8007620:	40014000 	.word	0x40014000
 8007624:	40014400 	.word	0x40014400
 8007628:	40014800 	.word	0x40014800
 800762c:	40001800 	.word	0x40001800
 8007630:	40001c00 	.word	0x40001c00
 8007634:	40002000 	.word	0x40002000

08007638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f023 0201 	bic.w	r2, r3, #1
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0303 	bic.w	r3, r3, #3
 800766e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f023 0302 	bic.w	r3, r3, #2
 8007680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	4313      	orrs	r3, r2
 800768a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a20      	ldr	r2, [pc, #128]	; (8007710 <TIM_OC1_SetConfig+0xd8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d003      	beq.n	800769c <TIM_OC1_SetConfig+0x64>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a1f      	ldr	r2, [pc, #124]	; (8007714 <TIM_OC1_SetConfig+0xdc>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d10c      	bne.n	80076b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f023 0308 	bic.w	r3, r3, #8
 80076a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f023 0304 	bic.w	r3, r3, #4
 80076b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a15      	ldr	r2, [pc, #84]	; (8007710 <TIM_OC1_SetConfig+0xd8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d003      	beq.n	80076c6 <TIM_OC1_SetConfig+0x8e>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a14      	ldr	r2, [pc, #80]	; (8007714 <TIM_OC1_SetConfig+0xdc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d111      	bne.n	80076ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	621a      	str	r2, [r3, #32]
}
 8007704:	bf00      	nop
 8007706:	371c      	adds	r7, #28
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	40010000 	.word	0x40010000
 8007714:	40010400 	.word	0x40010400

08007718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	f023 0210 	bic.w	r2, r3, #16
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800774e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f023 0320 	bic.w	r3, r3, #32
 8007762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a22      	ldr	r2, [pc, #136]	; (80077fc <TIM_OC2_SetConfig+0xe4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d003      	beq.n	8007780 <TIM_OC2_SetConfig+0x68>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a21      	ldr	r2, [pc, #132]	; (8007800 <TIM_OC2_SetConfig+0xe8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d10d      	bne.n	800779c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800779a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a17      	ldr	r2, [pc, #92]	; (80077fc <TIM_OC2_SetConfig+0xe4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d003      	beq.n	80077ac <TIM_OC2_SetConfig+0x94>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a16      	ldr	r2, [pc, #88]	; (8007800 <TIM_OC2_SetConfig+0xe8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d113      	bne.n	80077d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	621a      	str	r2, [r3, #32]
}
 80077ee:	bf00      	nop
 80077f0:	371c      	adds	r7, #28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	40010000 	.word	0x40010000
 8007800:	40010400 	.word	0x40010400

08007804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0303 	bic.w	r3, r3, #3
 800783a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800784c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a21      	ldr	r2, [pc, #132]	; (80078e4 <TIM_OC3_SetConfig+0xe0>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d003      	beq.n	800786a <TIM_OC3_SetConfig+0x66>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a20      	ldr	r2, [pc, #128]	; (80078e8 <TIM_OC3_SetConfig+0xe4>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d10d      	bne.n	8007886 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a16      	ldr	r2, [pc, #88]	; (80078e4 <TIM_OC3_SetConfig+0xe0>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d003      	beq.n	8007896 <TIM_OC3_SetConfig+0x92>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a15      	ldr	r2, [pc, #84]	; (80078e8 <TIM_OC3_SetConfig+0xe4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d113      	bne.n	80078be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800789c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	011b      	lsls	r3, r3, #4
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	621a      	str	r2, [r3, #32]
}
 80078d8:	bf00      	nop
 80078da:	371c      	adds	r7, #28
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	40010000 	.word	0x40010000
 80078e8:	40010400 	.word	0x40010400

080078ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800791a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	4313      	orrs	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	031b      	lsls	r3, r3, #12
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4313      	orrs	r3, r2
 8007942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a12      	ldr	r2, [pc, #72]	; (8007990 <TIM_OC4_SetConfig+0xa4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d003      	beq.n	8007954 <TIM_OC4_SetConfig+0x68>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a11      	ldr	r2, [pc, #68]	; (8007994 <TIM_OC4_SetConfig+0xa8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d109      	bne.n	8007968 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800795a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	019b      	lsls	r3, r3, #6
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4313      	orrs	r3, r2
 8007966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	621a      	str	r2, [r3, #32]
}
 8007982:	bf00      	nop
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	40010000 	.word	0x40010000
 8007994:	40010400 	.word	0x40010400

08007998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	f023 0201 	bic.w	r2, r3, #1
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f023 030a 	bic.w	r3, r3, #10
 80079d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	4313      	orrs	r3, r2
 80079dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	621a      	str	r2, [r3, #32]
}
 80079ea:	bf00      	nop
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b087      	sub	sp, #28
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	f023 0210 	bic.w	r2, r3, #16
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	031b      	lsls	r3, r3, #12
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	621a      	str	r2, [r3, #32]
}
 8007a4a:	bf00      	nop
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b085      	sub	sp, #20
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f043 0307 	orr.w	r3, r3, #7
 8007a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	609a      	str	r2, [r3, #8]
}
 8007a80:	bf00      	nop
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	021a      	lsls	r2, r3, #8
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	609a      	str	r2, [r3, #8]
}
 8007ac0:	bf00      	nop
 8007ac2:	371c      	adds	r7, #28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d101      	bne.n	8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e05a      	b.n	8007b9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a21      	ldr	r2, [pc, #132]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d022      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b30:	d01d      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1d      	ldr	r2, [pc, #116]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d018      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a1b      	ldr	r2, [pc, #108]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d013      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a1a      	ldr	r2, [pc, #104]	; (8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00e      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a18      	ldr	r2, [pc, #96]	; (8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d009      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a17      	ldr	r2, [pc, #92]	; (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d004      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a15      	ldr	r2, [pc, #84]	; (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d10c      	bne.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	40010000 	.word	0x40010000
 8007bac:	40000400 	.word	0x40000400
 8007bb0:	40000800 	.word	0x40000800
 8007bb4:	40000c00 	.word	0x40000c00
 8007bb8:	40010400 	.word	0x40010400
 8007bbc:	40014000 	.word	0x40014000
 8007bc0:	40001800 	.word	0x40001800

08007bc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e03d      	b.n	8007c5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e03f      	b.n	8007cfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d106      	bne.n	8007c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7fb fc62 	bl	8003558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2224      	movs	r2, #36	; 0x24
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68da      	ldr	r2, [r3, #12]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fd67 	bl	8008780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	695a      	ldr	r2, [r3, #20]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68da      	ldr	r2, [r3, #12]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2220      	movs	r2, #32
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b08a      	sub	sp, #40	; 0x28
 8007d06:	af02      	add	r7, sp, #8
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	603b      	str	r3, [r7, #0]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b20      	cmp	r3, #32
 8007d20:	d17c      	bne.n	8007e1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <HAL_UART_Transmit+0x2c>
 8007d28:	88fb      	ldrh	r3, [r7, #6]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e075      	b.n	8007e1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_UART_Transmit+0x3e>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e06e      	b.n	8007e1e <HAL_UART_Transmit+0x11c>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2221      	movs	r2, #33	; 0x21
 8007d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d56:	f7fc f881 	bl	8003e5c <HAL_GetTick>
 8007d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	88fa      	ldrh	r2, [r7, #6]
 8007d60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	88fa      	ldrh	r2, [r7, #6]
 8007d66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d70:	d108      	bne.n	8007d84 <HAL_UART_Transmit+0x82>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d104      	bne.n	8007d84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	61bb      	str	r3, [r7, #24]
 8007d82:	e003      	b.n	8007d8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007d94:	e02a      	b.n	8007dec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2180      	movs	r1, #128	; 0x80
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 fae5 	bl	8008370 <UART_WaitOnFlagUntilTimeout>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e036      	b.n	8007e1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10b      	bne.n	8007dce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	3302      	adds	r3, #2
 8007dca:	61bb      	str	r3, [r7, #24]
 8007dcc:	e007      	b.n	8007dde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	781a      	ldrb	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	3b01      	subs	r3, #1
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1cf      	bne.n	8007d96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2140      	movs	r1, #64	; 0x40
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 fab5 	bl	8008370 <UART_WaitOnFlagUntilTimeout>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e006      	b.n	8007e1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2220      	movs	r2, #32
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	e000      	b.n	8007e1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007e1c:	2302      	movs	r3, #2
  }
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3720      	adds	r7, #32
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b0ba      	sub	sp, #232	; 0xe8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e54:	2300      	movs	r3, #0
 8007e56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10f      	bne.n	8007e8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e72:	f003 0320 	and.w	r3, r3, #32
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <HAL_UART_IRQHandler+0x66>
 8007e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fbbf 	bl	800860a <UART_Receive_IT>
      return;
 8007e8c:	e256      	b.n	800833c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 80de 	beq.w	8008054 <HAL_UART_IRQHandler+0x22c>
 8007e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d106      	bne.n	8007eb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 80d1 	beq.w	8008054 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00b      	beq.n	8007ed6 <HAL_UART_IRQHandler+0xae>
 8007ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	f043 0201 	orr.w	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eda:	f003 0304 	and.w	r3, r3, #4
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00b      	beq.n	8007efa <HAL_UART_IRQHandler+0xd2>
 8007ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	f043 0202 	orr.w	r2, r3, #2
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00b      	beq.n	8007f1e <HAL_UART_IRQHandler+0xf6>
 8007f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	f043 0204 	orr.w	r2, r3, #4
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f22:	f003 0308 	and.w	r3, r3, #8
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d011      	beq.n	8007f4e <HAL_UART_IRQHandler+0x126>
 8007f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f2e:	f003 0320 	and.w	r3, r3, #32
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d105      	bne.n	8007f42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d005      	beq.n	8007f4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f46:	f043 0208 	orr.w	r2, r3, #8
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 81ed 	beq.w	8008332 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d008      	beq.n	8007f76 <HAL_UART_IRQHandler+0x14e>
 8007f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fb4a 	bl	800860a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f80:	2b40      	cmp	r3, #64	; 0x40
 8007f82:	bf0c      	ite	eq
 8007f84:	2301      	moveq	r3, #1
 8007f86:	2300      	movne	r3, #0
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f92:	f003 0308 	and.w	r3, r3, #8
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d103      	bne.n	8007fa2 <HAL_UART_IRQHandler+0x17a>
 8007f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d04f      	beq.n	8008042 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fa52 	bl	800844c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb2:	2b40      	cmp	r3, #64	; 0x40
 8007fb4:	d141      	bne.n	800803a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3314      	adds	r3, #20
 8007fbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3314      	adds	r3, #20
 8007fde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fe2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1d9      	bne.n	8007fb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008006:	2b00      	cmp	r3, #0
 8008008:	d013      	beq.n	8008032 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800e:	4a7d      	ldr	r2, [pc, #500]	; (8008204 <HAL_UART_IRQHandler+0x3dc>)
 8008010:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	4618      	mov	r0, r3
 8008018:	f7fc fcde 	bl	80049d8 <HAL_DMA_Abort_IT>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d016      	beq.n	8008050 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800802c:	4610      	mov	r0, r2
 800802e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008030:	e00e      	b.n	8008050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f986 	bl	8008344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008038:	e00a      	b.n	8008050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f982 	bl	8008344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008040:	e006      	b.n	8008050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f97e 	bl	8008344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800804e:	e170      	b.n	8008332 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008050:	bf00      	nop
    return;
 8008052:	e16e      	b.n	8008332 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008058:	2b01      	cmp	r3, #1
 800805a:	f040 814a 	bne.w	80082f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800805e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008062:	f003 0310 	and.w	r3, r3, #16
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 8143 	beq.w	80082f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800806c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008070:	f003 0310 	and.w	r3, r3, #16
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 813c 	beq.w	80082f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800807a:	2300      	movs	r3, #0
 800807c:	60bb      	str	r3, [r7, #8]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60bb      	str	r3, [r7, #8]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	60bb      	str	r3, [r7, #8]
 800808e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809a:	2b40      	cmp	r3, #64	; 0x40
 800809c:	f040 80b4 	bne.w	8008208 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 8140 	beq.w	8008336 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080be:	429a      	cmp	r2, r3
 80080c0:	f080 8139 	bcs.w	8008336 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d6:	f000 8088 	beq.w	80081ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	330c      	adds	r3, #12
 80080e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	330c      	adds	r3, #12
 8008102:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800810a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008112:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800811e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1d9      	bne.n	80080da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3314      	adds	r3, #20
 800812c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008138:	f023 0301 	bic.w	r3, r3, #1
 800813c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3314      	adds	r3, #20
 8008146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800814a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800814e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008150:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008152:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800815c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e1      	bne.n	8008126 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3314      	adds	r3, #20
 8008168:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3314      	adds	r3, #20
 8008182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008188:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800818c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e3      	bne.n	8008162 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2220      	movs	r2, #32
 800819e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	330c      	adds	r3, #12
 80081ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b2:	e853 3f00 	ldrex	r3, [r3]
 80081b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ba:	f023 0310 	bic.w	r3, r3, #16
 80081be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	330c      	adds	r3, #12
 80081c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80081cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80081ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081d4:	e841 2300 	strex	r3, r2, [r1]
 80081d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e3      	bne.n	80081a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fc fb87 	bl	80048f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f8ac 	bl	8008358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008200:	e099      	b.n	8008336 <HAL_UART_IRQHandler+0x50e>
 8008202:	bf00      	nop
 8008204:	08008513 	.word	0x08008513
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008210:	b29b      	uxth	r3, r3
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800821c:	b29b      	uxth	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 808b 	beq.w	800833a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 8086 	beq.w	800833a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	330c      	adds	r3, #12
 8008234:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800823e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	330c      	adds	r3, #12
 800824e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008252:	647a      	str	r2, [r7, #68]	; 0x44
 8008254:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800825a:	e841 2300 	strex	r3, r2, [r1]
 800825e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1e3      	bne.n	800822e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3314      	adds	r3, #20
 800826c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	623b      	str	r3, [r7, #32]
   return(result);
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	f023 0301 	bic.w	r3, r3, #1
 800827c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3314      	adds	r3, #20
 8008286:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800828a:	633a      	str	r2, [r7, #48]	; 0x30
 800828c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e3      	bne.n	8008266 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	330c      	adds	r3, #12
 80082b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0310 	bic.w	r3, r3, #16
 80082c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	330c      	adds	r3, #12
 80082cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80082d0:	61fa      	str	r2, [r7, #28]
 80082d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	69b9      	ldr	r1, [r7, #24]
 80082d6:	69fa      	ldr	r2, [r7, #28]
 80082d8:	e841 2300 	strex	r3, r2, [r1]
 80082dc:	617b      	str	r3, [r7, #20]
   return(result);
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e3      	bne.n	80082ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f834 	bl	8008358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082f0:	e023      	b.n	800833a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d009      	beq.n	8008312 <HAL_UART_IRQHandler+0x4ea>
 80082fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f915 	bl	800853a <UART_Transmit_IT>
    return;
 8008310:	e014      	b.n	800833c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00e      	beq.n	800833c <HAL_UART_IRQHandler+0x514>
 800831e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008326:	2b00      	cmp	r3, #0
 8008328:	d008      	beq.n	800833c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f955 	bl	80085da <UART_EndTransmit_IT>
    return;
 8008330:	e004      	b.n	800833c <HAL_UART_IRQHandler+0x514>
    return;
 8008332:	bf00      	nop
 8008334:	e002      	b.n	800833c <HAL_UART_IRQHandler+0x514>
      return;
 8008336:	bf00      	nop
 8008338:	e000      	b.n	800833c <HAL_UART_IRQHandler+0x514>
      return;
 800833a:	bf00      	nop
  }
}
 800833c:	37e8      	adds	r7, #232	; 0xe8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop

08008344 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b090      	sub	sp, #64	; 0x40
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	4613      	mov	r3, r2
 800837e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008380:	e050      	b.n	8008424 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008388:	d04c      	beq.n	8008424 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800838a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800838c:	2b00      	cmp	r3, #0
 800838e:	d007      	beq.n	80083a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008390:	f7fb fd64 	bl	8003e5c <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800839c:	429a      	cmp	r2, r3
 800839e:	d241      	bcs.n	8008424 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	330c      	adds	r3, #12
 80083a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	e853 3f00 	ldrex	r3, [r3]
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	330c      	adds	r3, #12
 80083be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083c0:	637a      	str	r2, [r7, #52]	; 0x34
 80083c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083c8:	e841 2300 	strex	r3, r2, [r1]
 80083cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e5      	bne.n	80083a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3314      	adds	r3, #20
 80083da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	e853 3f00 	ldrex	r3, [r3]
 80083e2:	613b      	str	r3, [r7, #16]
   return(result);
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f023 0301 	bic.w	r3, r3, #1
 80083ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3314      	adds	r3, #20
 80083f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083f4:	623a      	str	r2, [r7, #32]
 80083f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	69f9      	ldr	r1, [r7, #28]
 80083fa:	6a3a      	ldr	r2, [r7, #32]
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	61bb      	str	r3, [r7, #24]
   return(result);
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e5      	bne.n	80083d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2220      	movs	r2, #32
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2220      	movs	r2, #32
 8008414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e00f      	b.n	8008444 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	4013      	ands	r3, r2
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	429a      	cmp	r2, r3
 8008432:	bf0c      	ite	eq
 8008434:	2301      	moveq	r3, #1
 8008436:	2300      	movne	r3, #0
 8008438:	b2db      	uxtb	r3, r3
 800843a:	461a      	mov	r2, r3
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	429a      	cmp	r2, r3
 8008440:	d09f      	beq.n	8008382 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3740      	adds	r7, #64	; 0x40
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800844c:	b480      	push	{r7}
 800844e:	b095      	sub	sp, #84	; 0x54
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	330c      	adds	r3, #12
 800845a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800846a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	330c      	adds	r3, #12
 8008472:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008474:	643a      	str	r2, [r7, #64]	; 0x40
 8008476:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800847a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e5      	bne.n	8008454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3314      	adds	r3, #20
 800848e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	61fb      	str	r3, [r7, #28]
   return(result);
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	f023 0301 	bic.w	r3, r3, #1
 800849e:	64bb      	str	r3, [r7, #72]	; 0x48
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3314      	adds	r3, #20
 80084a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e5      	bne.n	8008488 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d119      	bne.n	80084f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	330c      	adds	r3, #12
 80084ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f023 0310 	bic.w	r3, r3, #16
 80084da:	647b      	str	r3, [r7, #68]	; 0x44
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	330c      	adds	r3, #12
 80084e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084e4:	61ba      	str	r2, [r7, #24]
 80084e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6979      	ldr	r1, [r7, #20]
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	613b      	str	r3, [r7, #16]
   return(result);
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e5      	bne.n	80084c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008506:	bf00      	nop
 8008508:	3754      	adds	r7, #84	; 0x54
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f7ff ff09 	bl	8008344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800853a:	b480      	push	{r7}
 800853c:	b085      	sub	sp, #20
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b21      	cmp	r3, #33	; 0x21
 800854c:	d13e      	bne.n	80085cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008556:	d114      	bne.n	8008582 <UART_Transmit_IT+0x48>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d110      	bne.n	8008582 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008574:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	1c9a      	adds	r2, r3, #2
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	621a      	str	r2, [r3, #32]
 8008580:	e008      	b.n	8008594 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	1c59      	adds	r1, r3, #1
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6211      	str	r1, [r2, #32]
 800858c:	781a      	ldrb	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008598:	b29b      	uxth	r3, r3
 800859a:	3b01      	subs	r3, #1
 800859c:	b29b      	uxth	r3, r3
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	4619      	mov	r1, r3
 80085a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10f      	bne.n	80085c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	e000      	b.n	80085ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085cc:	2302      	movs	r3, #2
  }
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2220      	movs	r2, #32
 80085f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7f8 ffaa 	bl	8001554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b08c      	sub	sp, #48	; 0x30
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b22      	cmp	r3, #34	; 0x22
 800861c:	f040 80ab 	bne.w	8008776 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008628:	d117      	bne.n	800865a <UART_Receive_IT+0x50>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d113      	bne.n	800865a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008632:	2300      	movs	r3, #0
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	b29b      	uxth	r3, r3
 8008644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008648:	b29a      	uxth	r2, r3
 800864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008652:	1c9a      	adds	r2, r3, #2
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	629a      	str	r2, [r3, #40]	; 0x28
 8008658:	e026      	b.n	80086a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008660:	2300      	movs	r3, #0
 8008662:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800866c:	d007      	beq.n	800867e <UART_Receive_IT+0x74>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10a      	bne.n	800868c <UART_Receive_IT+0x82>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d106      	bne.n	800868c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	b2da      	uxtb	r2, r3
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	701a      	strb	r2, [r3, #0]
 800868a:	e008      	b.n	800869e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008698:	b2da      	uxtb	r2, r3
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	3b01      	subs	r3, #1
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	4619      	mov	r1, r3
 80086b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d15a      	bne.n	8008772 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0220 	bic.w	r2, r2, #32
 80086ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	695a      	ldr	r2, [r3, #20]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f022 0201 	bic.w	r2, r2, #1
 80086ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d135      	bne.n	8008768 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	330c      	adds	r3, #12
 8008708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	e853 3f00 	ldrex	r3, [r3]
 8008710:	613b      	str	r3, [r7, #16]
   return(result);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f023 0310 	bic.w	r3, r3, #16
 8008718:	627b      	str	r3, [r7, #36]	; 0x24
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	330c      	adds	r3, #12
 8008720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008722:	623a      	str	r2, [r7, #32]
 8008724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	69f9      	ldr	r1, [r7, #28]
 8008728:	6a3a      	ldr	r2, [r7, #32]
 800872a:	e841 2300 	strex	r3, r2, [r1]
 800872e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e5      	bne.n	8008702 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b10      	cmp	r3, #16
 8008742:	d10a      	bne.n	800875a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008744:	2300      	movs	r3, #0
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff fdf9 	bl	8008358 <HAL_UARTEx_RxEventCallback>
 8008766:	e002      	b.n	800876e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7f8 ff09 	bl	8001580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	e002      	b.n	8008778 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	e000      	b.n	8008778 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008776:	2302      	movs	r3, #2
  }
}
 8008778:	4618      	mov	r0, r3
 800877a:	3730      	adds	r7, #48	; 0x30
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008784:	b0c0      	sub	sp, #256	; 0x100
 8008786:	af00      	add	r7, sp, #0
 8008788:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800878c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800879c:	68d9      	ldr	r1, [r3, #12]
 800879e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	ea40 0301 	orr.w	r3, r0, r1
 80087a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ae:	689a      	ldr	r2, [r3, #8]
 80087b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	431a      	orrs	r2, r3
 80087b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	431a      	orrs	r2, r3
 80087c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80087d8:	f021 010c 	bic.w	r1, r1, #12
 80087dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087e6:	430b      	orrs	r3, r1
 80087e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80087f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087fa:	6999      	ldr	r1, [r3, #24]
 80087fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	ea40 0301 	orr.w	r3, r0, r1
 8008806:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	4b8f      	ldr	r3, [pc, #572]	; (8008a4c <UART_SetConfig+0x2cc>)
 8008810:	429a      	cmp	r2, r3
 8008812:	d005      	beq.n	8008820 <UART_SetConfig+0xa0>
 8008814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	4b8d      	ldr	r3, [pc, #564]	; (8008a50 <UART_SetConfig+0x2d0>)
 800881c:	429a      	cmp	r2, r3
 800881e:	d104      	bne.n	800882a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008820:	f7fe fbba 	bl	8006f98 <HAL_RCC_GetPCLK2Freq>
 8008824:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008828:	e003      	b.n	8008832 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800882a:	f7fe fba1 	bl	8006f70 <HAL_RCC_GetPCLK1Freq>
 800882e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008836:	69db      	ldr	r3, [r3, #28]
 8008838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800883c:	f040 810c 	bne.w	8008a58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008844:	2200      	movs	r2, #0
 8008846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800884a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800884e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008852:	4622      	mov	r2, r4
 8008854:	462b      	mov	r3, r5
 8008856:	1891      	adds	r1, r2, r2
 8008858:	65b9      	str	r1, [r7, #88]	; 0x58
 800885a:	415b      	adcs	r3, r3
 800885c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800885e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008862:	4621      	mov	r1, r4
 8008864:	eb12 0801 	adds.w	r8, r2, r1
 8008868:	4629      	mov	r1, r5
 800886a:	eb43 0901 	adc.w	r9, r3, r1
 800886e:	f04f 0200 	mov.w	r2, #0
 8008872:	f04f 0300 	mov.w	r3, #0
 8008876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800887a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800887e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008882:	4690      	mov	r8, r2
 8008884:	4699      	mov	r9, r3
 8008886:	4623      	mov	r3, r4
 8008888:	eb18 0303 	adds.w	r3, r8, r3
 800888c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008890:	462b      	mov	r3, r5
 8008892:	eb49 0303 	adc.w	r3, r9, r3
 8008896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800889a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80088aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80088ae:	460b      	mov	r3, r1
 80088b0:	18db      	adds	r3, r3, r3
 80088b2:	653b      	str	r3, [r7, #80]	; 0x50
 80088b4:	4613      	mov	r3, r2
 80088b6:	eb42 0303 	adc.w	r3, r2, r3
 80088ba:	657b      	str	r3, [r7, #84]	; 0x54
 80088bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80088c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80088c4:	f7f8 f970 	bl	8000ba8 <__aeabi_uldivmod>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	4b61      	ldr	r3, [pc, #388]	; (8008a54 <UART_SetConfig+0x2d4>)
 80088ce:	fba3 2302 	umull	r2, r3, r3, r2
 80088d2:	095b      	lsrs	r3, r3, #5
 80088d4:	011c      	lsls	r4, r3, #4
 80088d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80088e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80088e8:	4642      	mov	r2, r8
 80088ea:	464b      	mov	r3, r9
 80088ec:	1891      	adds	r1, r2, r2
 80088ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80088f0:	415b      	adcs	r3, r3
 80088f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80088f8:	4641      	mov	r1, r8
 80088fa:	eb12 0a01 	adds.w	sl, r2, r1
 80088fe:	4649      	mov	r1, r9
 8008900:	eb43 0b01 	adc.w	fp, r3, r1
 8008904:	f04f 0200 	mov.w	r2, #0
 8008908:	f04f 0300 	mov.w	r3, #0
 800890c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008910:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008918:	4692      	mov	sl, r2
 800891a:	469b      	mov	fp, r3
 800891c:	4643      	mov	r3, r8
 800891e:	eb1a 0303 	adds.w	r3, sl, r3
 8008922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008926:	464b      	mov	r3, r9
 8008928:	eb4b 0303 	adc.w	r3, fp, r3
 800892c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800893c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008940:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008944:	460b      	mov	r3, r1
 8008946:	18db      	adds	r3, r3, r3
 8008948:	643b      	str	r3, [r7, #64]	; 0x40
 800894a:	4613      	mov	r3, r2
 800894c:	eb42 0303 	adc.w	r3, r2, r3
 8008950:	647b      	str	r3, [r7, #68]	; 0x44
 8008952:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008956:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800895a:	f7f8 f925 	bl	8000ba8 <__aeabi_uldivmod>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4611      	mov	r1, r2
 8008964:	4b3b      	ldr	r3, [pc, #236]	; (8008a54 <UART_SetConfig+0x2d4>)
 8008966:	fba3 2301 	umull	r2, r3, r3, r1
 800896a:	095b      	lsrs	r3, r3, #5
 800896c:	2264      	movs	r2, #100	; 0x64
 800896e:	fb02 f303 	mul.w	r3, r2, r3
 8008972:	1acb      	subs	r3, r1, r3
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800897a:	4b36      	ldr	r3, [pc, #216]	; (8008a54 <UART_SetConfig+0x2d4>)
 800897c:	fba3 2302 	umull	r2, r3, r3, r2
 8008980:	095b      	lsrs	r3, r3, #5
 8008982:	005b      	lsls	r3, r3, #1
 8008984:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008988:	441c      	add	r4, r3
 800898a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800898e:	2200      	movs	r2, #0
 8008990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008994:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008998:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800899c:	4642      	mov	r2, r8
 800899e:	464b      	mov	r3, r9
 80089a0:	1891      	adds	r1, r2, r2
 80089a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80089a4:	415b      	adcs	r3, r3
 80089a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089ac:	4641      	mov	r1, r8
 80089ae:	1851      	adds	r1, r2, r1
 80089b0:	6339      	str	r1, [r7, #48]	; 0x30
 80089b2:	4649      	mov	r1, r9
 80089b4:	414b      	adcs	r3, r1
 80089b6:	637b      	str	r3, [r7, #52]	; 0x34
 80089b8:	f04f 0200 	mov.w	r2, #0
 80089bc:	f04f 0300 	mov.w	r3, #0
 80089c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80089c4:	4659      	mov	r1, fp
 80089c6:	00cb      	lsls	r3, r1, #3
 80089c8:	4651      	mov	r1, sl
 80089ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089ce:	4651      	mov	r1, sl
 80089d0:	00ca      	lsls	r2, r1, #3
 80089d2:	4610      	mov	r0, r2
 80089d4:	4619      	mov	r1, r3
 80089d6:	4603      	mov	r3, r0
 80089d8:	4642      	mov	r2, r8
 80089da:	189b      	adds	r3, r3, r2
 80089dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089e0:	464b      	mov	r3, r9
 80089e2:	460a      	mov	r2, r1
 80089e4:	eb42 0303 	adc.w	r3, r2, r3
 80089e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80089f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80089fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a00:	460b      	mov	r3, r1
 8008a02:	18db      	adds	r3, r3, r3
 8008a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a06:	4613      	mov	r3, r2
 8008a08:	eb42 0303 	adc.w	r3, r2, r3
 8008a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a16:	f7f8 f8c7 	bl	8000ba8 <__aeabi_uldivmod>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4b0d      	ldr	r3, [pc, #52]	; (8008a54 <UART_SetConfig+0x2d4>)
 8008a20:	fba3 1302 	umull	r1, r3, r3, r2
 8008a24:	095b      	lsrs	r3, r3, #5
 8008a26:	2164      	movs	r1, #100	; 0x64
 8008a28:	fb01 f303 	mul.w	r3, r1, r3
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	3332      	adds	r3, #50	; 0x32
 8008a32:	4a08      	ldr	r2, [pc, #32]	; (8008a54 <UART_SetConfig+0x2d4>)
 8008a34:	fba2 2303 	umull	r2, r3, r2, r3
 8008a38:	095b      	lsrs	r3, r3, #5
 8008a3a:	f003 0207 	and.w	r2, r3, #7
 8008a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4422      	add	r2, r4
 8008a46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a48:	e105      	b.n	8008c56 <UART_SetConfig+0x4d6>
 8008a4a:	bf00      	nop
 8008a4c:	40011000 	.word	0x40011000
 8008a50:	40011400 	.word	0x40011400
 8008a54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008a66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008a6a:	4642      	mov	r2, r8
 8008a6c:	464b      	mov	r3, r9
 8008a6e:	1891      	adds	r1, r2, r2
 8008a70:	6239      	str	r1, [r7, #32]
 8008a72:	415b      	adcs	r3, r3
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24
 8008a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a7a:	4641      	mov	r1, r8
 8008a7c:	1854      	adds	r4, r2, r1
 8008a7e:	4649      	mov	r1, r9
 8008a80:	eb43 0501 	adc.w	r5, r3, r1
 8008a84:	f04f 0200 	mov.w	r2, #0
 8008a88:	f04f 0300 	mov.w	r3, #0
 8008a8c:	00eb      	lsls	r3, r5, #3
 8008a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a92:	00e2      	lsls	r2, r4, #3
 8008a94:	4614      	mov	r4, r2
 8008a96:	461d      	mov	r5, r3
 8008a98:	4643      	mov	r3, r8
 8008a9a:	18e3      	adds	r3, r4, r3
 8008a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008aa0:	464b      	mov	r3, r9
 8008aa2:	eb45 0303 	adc.w	r3, r5, r3
 8008aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ab6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008aba:	f04f 0200 	mov.w	r2, #0
 8008abe:	f04f 0300 	mov.w	r3, #0
 8008ac2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	008b      	lsls	r3, r1, #2
 8008aca:	4621      	mov	r1, r4
 8008acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	008a      	lsls	r2, r1, #2
 8008ad4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ad8:	f7f8 f866 	bl	8000ba8 <__aeabi_uldivmod>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4b60      	ldr	r3, [pc, #384]	; (8008c64 <UART_SetConfig+0x4e4>)
 8008ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ae6:	095b      	lsrs	r3, r3, #5
 8008ae8:	011c      	lsls	r4, r3, #4
 8008aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aee:	2200      	movs	r2, #0
 8008af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008af4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008af8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008afc:	4642      	mov	r2, r8
 8008afe:	464b      	mov	r3, r9
 8008b00:	1891      	adds	r1, r2, r2
 8008b02:	61b9      	str	r1, [r7, #24]
 8008b04:	415b      	adcs	r3, r3
 8008b06:	61fb      	str	r3, [r7, #28]
 8008b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b0c:	4641      	mov	r1, r8
 8008b0e:	1851      	adds	r1, r2, r1
 8008b10:	6139      	str	r1, [r7, #16]
 8008b12:	4649      	mov	r1, r9
 8008b14:	414b      	adcs	r3, r1
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	f04f 0200 	mov.w	r2, #0
 8008b1c:	f04f 0300 	mov.w	r3, #0
 8008b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b24:	4659      	mov	r1, fp
 8008b26:	00cb      	lsls	r3, r1, #3
 8008b28:	4651      	mov	r1, sl
 8008b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b2e:	4651      	mov	r1, sl
 8008b30:	00ca      	lsls	r2, r1, #3
 8008b32:	4610      	mov	r0, r2
 8008b34:	4619      	mov	r1, r3
 8008b36:	4603      	mov	r3, r0
 8008b38:	4642      	mov	r2, r8
 8008b3a:	189b      	adds	r3, r3, r2
 8008b3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b40:	464b      	mov	r3, r9
 8008b42:	460a      	mov	r2, r1
 8008b44:	eb42 0303 	adc.w	r3, r2, r3
 8008b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008b58:	f04f 0200 	mov.w	r2, #0
 8008b5c:	f04f 0300 	mov.w	r3, #0
 8008b60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008b64:	4649      	mov	r1, r9
 8008b66:	008b      	lsls	r3, r1, #2
 8008b68:	4641      	mov	r1, r8
 8008b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b6e:	4641      	mov	r1, r8
 8008b70:	008a      	lsls	r2, r1, #2
 8008b72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008b76:	f7f8 f817 	bl	8000ba8 <__aeabi_uldivmod>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4b39      	ldr	r3, [pc, #228]	; (8008c64 <UART_SetConfig+0x4e4>)
 8008b80:	fba3 1302 	umull	r1, r3, r3, r2
 8008b84:	095b      	lsrs	r3, r3, #5
 8008b86:	2164      	movs	r1, #100	; 0x64
 8008b88:	fb01 f303 	mul.w	r3, r1, r3
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	011b      	lsls	r3, r3, #4
 8008b90:	3332      	adds	r3, #50	; 0x32
 8008b92:	4a34      	ldr	r2, [pc, #208]	; (8008c64 <UART_SetConfig+0x4e4>)
 8008b94:	fba2 2303 	umull	r2, r3, r2, r3
 8008b98:	095b      	lsrs	r3, r3, #5
 8008b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b9e:	441c      	add	r4, r3
 8008ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	673b      	str	r3, [r7, #112]	; 0x70
 8008ba8:	677a      	str	r2, [r7, #116]	; 0x74
 8008baa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008bae:	4642      	mov	r2, r8
 8008bb0:	464b      	mov	r3, r9
 8008bb2:	1891      	adds	r1, r2, r2
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	415b      	adcs	r3, r3
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bbe:	4641      	mov	r1, r8
 8008bc0:	1851      	adds	r1, r2, r1
 8008bc2:	6039      	str	r1, [r7, #0]
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	414b      	adcs	r3, r1
 8008bc8:	607b      	str	r3, [r7, #4]
 8008bca:	f04f 0200 	mov.w	r2, #0
 8008bce:	f04f 0300 	mov.w	r3, #0
 8008bd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008bd6:	4659      	mov	r1, fp
 8008bd8:	00cb      	lsls	r3, r1, #3
 8008bda:	4651      	mov	r1, sl
 8008bdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008be0:	4651      	mov	r1, sl
 8008be2:	00ca      	lsls	r2, r1, #3
 8008be4:	4610      	mov	r0, r2
 8008be6:	4619      	mov	r1, r3
 8008be8:	4603      	mov	r3, r0
 8008bea:	4642      	mov	r2, r8
 8008bec:	189b      	adds	r3, r3, r2
 8008bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bf0:	464b      	mov	r3, r9
 8008bf2:	460a      	mov	r2, r1
 8008bf4:	eb42 0303 	adc.w	r3, r2, r3
 8008bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	663b      	str	r3, [r7, #96]	; 0x60
 8008c04:	667a      	str	r2, [r7, #100]	; 0x64
 8008c06:	f04f 0200 	mov.w	r2, #0
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008c12:	4649      	mov	r1, r9
 8008c14:	008b      	lsls	r3, r1, #2
 8008c16:	4641      	mov	r1, r8
 8008c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c1c:	4641      	mov	r1, r8
 8008c1e:	008a      	lsls	r2, r1, #2
 8008c20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008c24:	f7f7 ffc0 	bl	8000ba8 <__aeabi_uldivmod>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <UART_SetConfig+0x4e4>)
 8008c2e:	fba3 1302 	umull	r1, r3, r3, r2
 8008c32:	095b      	lsrs	r3, r3, #5
 8008c34:	2164      	movs	r1, #100	; 0x64
 8008c36:	fb01 f303 	mul.w	r3, r1, r3
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	011b      	lsls	r3, r3, #4
 8008c3e:	3332      	adds	r3, #50	; 0x32
 8008c40:	4a08      	ldr	r2, [pc, #32]	; (8008c64 <UART_SetConfig+0x4e4>)
 8008c42:	fba2 2303 	umull	r2, r3, r2, r3
 8008c46:	095b      	lsrs	r3, r3, #5
 8008c48:	f003 020f 	and.w	r2, r3, #15
 8008c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4422      	add	r2, r4
 8008c54:	609a      	str	r2, [r3, #8]
}
 8008c56:	bf00      	nop
 8008c58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c62:	bf00      	nop
 8008c64:	51eb851f 	.word	0x51eb851f

08008c68 <__errno>:
 8008c68:	4b01      	ldr	r3, [pc, #4]	; (8008c70 <__errno+0x8>)
 8008c6a:	6818      	ldr	r0, [r3, #0]
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	2000001c 	.word	0x2000001c

08008c74 <__libc_init_array>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	4d0d      	ldr	r5, [pc, #52]	; (8008cac <__libc_init_array+0x38>)
 8008c78:	4c0d      	ldr	r4, [pc, #52]	; (8008cb0 <__libc_init_array+0x3c>)
 8008c7a:	1b64      	subs	r4, r4, r5
 8008c7c:	10a4      	asrs	r4, r4, #2
 8008c7e:	2600      	movs	r6, #0
 8008c80:	42a6      	cmp	r6, r4
 8008c82:	d109      	bne.n	8008c98 <__libc_init_array+0x24>
 8008c84:	4d0b      	ldr	r5, [pc, #44]	; (8008cb4 <__libc_init_array+0x40>)
 8008c86:	4c0c      	ldr	r4, [pc, #48]	; (8008cb8 <__libc_init_array+0x44>)
 8008c88:	f002 ff04 	bl	800ba94 <_init>
 8008c8c:	1b64      	subs	r4, r4, r5
 8008c8e:	10a4      	asrs	r4, r4, #2
 8008c90:	2600      	movs	r6, #0
 8008c92:	42a6      	cmp	r6, r4
 8008c94:	d105      	bne.n	8008ca2 <__libc_init_array+0x2e>
 8008c96:	bd70      	pop	{r4, r5, r6, pc}
 8008c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c9c:	4798      	blx	r3
 8008c9e:	3601      	adds	r6, #1
 8008ca0:	e7ee      	b.n	8008c80 <__libc_init_array+0xc>
 8008ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ca6:	4798      	blx	r3
 8008ca8:	3601      	adds	r6, #1
 8008caa:	e7f2      	b.n	8008c92 <__libc_init_array+0x1e>
 8008cac:	0800ddec 	.word	0x0800ddec
 8008cb0:	0800ddec 	.word	0x0800ddec
 8008cb4:	0800ddec 	.word	0x0800ddec
 8008cb8:	0800ddf0 	.word	0x0800ddf0

08008cbc <memcpy>:
 8008cbc:	440a      	add	r2, r1
 8008cbe:	4291      	cmp	r1, r2
 8008cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cc4:	d100      	bne.n	8008cc8 <memcpy+0xc>
 8008cc6:	4770      	bx	lr
 8008cc8:	b510      	push	{r4, lr}
 8008cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cd2:	4291      	cmp	r1, r2
 8008cd4:	d1f9      	bne.n	8008cca <memcpy+0xe>
 8008cd6:	bd10      	pop	{r4, pc}

08008cd8 <memset>:
 8008cd8:	4402      	add	r2, r0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d100      	bne.n	8008ce2 <memset+0xa>
 8008ce0:	4770      	bx	lr
 8008ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ce6:	e7f9      	b.n	8008cdc <memset+0x4>

08008ce8 <__cvt>:
 8008ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	ec55 4b10 	vmov	r4, r5, d0
 8008cf0:	2d00      	cmp	r5, #0
 8008cf2:	460e      	mov	r6, r1
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	462b      	mov	r3, r5
 8008cf8:	bfbb      	ittet	lt
 8008cfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008cfe:	461d      	movlt	r5, r3
 8008d00:	2300      	movge	r3, #0
 8008d02:	232d      	movlt	r3, #45	; 0x2d
 8008d04:	700b      	strb	r3, [r1, #0]
 8008d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d0c:	4691      	mov	r9, r2
 8008d0e:	f023 0820 	bic.w	r8, r3, #32
 8008d12:	bfbc      	itt	lt
 8008d14:	4622      	movlt	r2, r4
 8008d16:	4614      	movlt	r4, r2
 8008d18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d1c:	d005      	beq.n	8008d2a <__cvt+0x42>
 8008d1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d22:	d100      	bne.n	8008d26 <__cvt+0x3e>
 8008d24:	3601      	adds	r6, #1
 8008d26:	2102      	movs	r1, #2
 8008d28:	e000      	b.n	8008d2c <__cvt+0x44>
 8008d2a:	2103      	movs	r1, #3
 8008d2c:	ab03      	add	r3, sp, #12
 8008d2e:	9301      	str	r3, [sp, #4]
 8008d30:	ab02      	add	r3, sp, #8
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	ec45 4b10 	vmov	d0, r4, r5
 8008d38:	4653      	mov	r3, sl
 8008d3a:	4632      	mov	r2, r6
 8008d3c:	f000 fcec 	bl	8009718 <_dtoa_r>
 8008d40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d44:	4607      	mov	r7, r0
 8008d46:	d102      	bne.n	8008d4e <__cvt+0x66>
 8008d48:	f019 0f01 	tst.w	r9, #1
 8008d4c:	d022      	beq.n	8008d94 <__cvt+0xac>
 8008d4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d52:	eb07 0906 	add.w	r9, r7, r6
 8008d56:	d110      	bne.n	8008d7a <__cvt+0x92>
 8008d58:	783b      	ldrb	r3, [r7, #0]
 8008d5a:	2b30      	cmp	r3, #48	; 0x30
 8008d5c:	d10a      	bne.n	8008d74 <__cvt+0x8c>
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2300      	movs	r3, #0
 8008d62:	4620      	mov	r0, r4
 8008d64:	4629      	mov	r1, r5
 8008d66:	f7f7 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d6a:	b918      	cbnz	r0, 8008d74 <__cvt+0x8c>
 8008d6c:	f1c6 0601 	rsb	r6, r6, #1
 8008d70:	f8ca 6000 	str.w	r6, [sl]
 8008d74:	f8da 3000 	ldr.w	r3, [sl]
 8008d78:	4499      	add	r9, r3
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7f7 fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d86:	b108      	cbz	r0, 8008d8c <__cvt+0xa4>
 8008d88:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d8c:	2230      	movs	r2, #48	; 0x30
 8008d8e:	9b03      	ldr	r3, [sp, #12]
 8008d90:	454b      	cmp	r3, r9
 8008d92:	d307      	bcc.n	8008da4 <__cvt+0xbc>
 8008d94:	9b03      	ldr	r3, [sp, #12]
 8008d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d98:	1bdb      	subs	r3, r3, r7
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	6013      	str	r3, [r2, #0]
 8008d9e:	b004      	add	sp, #16
 8008da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da4:	1c59      	adds	r1, r3, #1
 8008da6:	9103      	str	r1, [sp, #12]
 8008da8:	701a      	strb	r2, [r3, #0]
 8008daa:	e7f0      	b.n	8008d8e <__cvt+0xa6>

08008dac <__exponent>:
 8008dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dae:	4603      	mov	r3, r0
 8008db0:	2900      	cmp	r1, #0
 8008db2:	bfb8      	it	lt
 8008db4:	4249      	neglt	r1, r1
 8008db6:	f803 2b02 	strb.w	r2, [r3], #2
 8008dba:	bfb4      	ite	lt
 8008dbc:	222d      	movlt	r2, #45	; 0x2d
 8008dbe:	222b      	movge	r2, #43	; 0x2b
 8008dc0:	2909      	cmp	r1, #9
 8008dc2:	7042      	strb	r2, [r0, #1]
 8008dc4:	dd2a      	ble.n	8008e1c <__exponent+0x70>
 8008dc6:	f10d 0407 	add.w	r4, sp, #7
 8008dca:	46a4      	mov	ip, r4
 8008dcc:	270a      	movs	r7, #10
 8008dce:	46a6      	mov	lr, r4
 8008dd0:	460a      	mov	r2, r1
 8008dd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8008dd6:	fb07 1516 	mls	r5, r7, r6, r1
 8008dda:	3530      	adds	r5, #48	; 0x30
 8008ddc:	2a63      	cmp	r2, #99	; 0x63
 8008dde:	f104 34ff 	add.w	r4, r4, #4294967295
 8008de2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008de6:	4631      	mov	r1, r6
 8008de8:	dcf1      	bgt.n	8008dce <__exponent+0x22>
 8008dea:	3130      	adds	r1, #48	; 0x30
 8008dec:	f1ae 0502 	sub.w	r5, lr, #2
 8008df0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008df4:	1c44      	adds	r4, r0, #1
 8008df6:	4629      	mov	r1, r5
 8008df8:	4561      	cmp	r1, ip
 8008dfa:	d30a      	bcc.n	8008e12 <__exponent+0x66>
 8008dfc:	f10d 0209 	add.w	r2, sp, #9
 8008e00:	eba2 020e 	sub.w	r2, r2, lr
 8008e04:	4565      	cmp	r5, ip
 8008e06:	bf88      	it	hi
 8008e08:	2200      	movhi	r2, #0
 8008e0a:	4413      	add	r3, r2
 8008e0c:	1a18      	subs	r0, r3, r0
 8008e0e:	b003      	add	sp, #12
 8008e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e1a:	e7ed      	b.n	8008df8 <__exponent+0x4c>
 8008e1c:	2330      	movs	r3, #48	; 0x30
 8008e1e:	3130      	adds	r1, #48	; 0x30
 8008e20:	7083      	strb	r3, [r0, #2]
 8008e22:	70c1      	strb	r1, [r0, #3]
 8008e24:	1d03      	adds	r3, r0, #4
 8008e26:	e7f1      	b.n	8008e0c <__exponent+0x60>

08008e28 <_printf_float>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	ed2d 8b02 	vpush	{d8}
 8008e30:	b08d      	sub	sp, #52	; 0x34
 8008e32:	460c      	mov	r4, r1
 8008e34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e38:	4616      	mov	r6, r2
 8008e3a:	461f      	mov	r7, r3
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	f001 fa59 	bl	800a2f4 <_localeconv_r>
 8008e42:	f8d0 a000 	ldr.w	sl, [r0]
 8008e46:	4650      	mov	r0, sl
 8008e48:	f7f7 f9c2 	bl	80001d0 <strlen>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	9305      	str	r3, [sp, #20]
 8008e54:	f8d8 3000 	ldr.w	r3, [r8]
 8008e58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e5c:	3307      	adds	r3, #7
 8008e5e:	f023 0307 	bic.w	r3, r3, #7
 8008e62:	f103 0208 	add.w	r2, r3, #8
 8008e66:	f8c8 2000 	str.w	r2, [r8]
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008e72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008e76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e7a:	9307      	str	r3, [sp, #28]
 8008e7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e80:	ee08 0a10 	vmov	s16, r0
 8008e84:	4b9f      	ldr	r3, [pc, #636]	; (8009104 <_printf_float+0x2dc>)
 8008e86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8e:	f7f7 fe4d 	bl	8000b2c <__aeabi_dcmpun>
 8008e92:	bb88      	cbnz	r0, 8008ef8 <_printf_float+0xd0>
 8008e94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e98:	4b9a      	ldr	r3, [pc, #616]	; (8009104 <_printf_float+0x2dc>)
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9e:	f7f7 fe27 	bl	8000af0 <__aeabi_dcmple>
 8008ea2:	bb48      	cbnz	r0, 8008ef8 <_printf_float+0xd0>
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	4640      	mov	r0, r8
 8008eaa:	4649      	mov	r1, r9
 8008eac:	f7f7 fe16 	bl	8000adc <__aeabi_dcmplt>
 8008eb0:	b110      	cbz	r0, 8008eb8 <_printf_float+0x90>
 8008eb2:	232d      	movs	r3, #45	; 0x2d
 8008eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb8:	4b93      	ldr	r3, [pc, #588]	; (8009108 <_printf_float+0x2e0>)
 8008eba:	4894      	ldr	r0, [pc, #592]	; (800910c <_printf_float+0x2e4>)
 8008ebc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ec0:	bf94      	ite	ls
 8008ec2:	4698      	movls	r8, r3
 8008ec4:	4680      	movhi	r8, r0
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	6123      	str	r3, [r4, #16]
 8008eca:	9b05      	ldr	r3, [sp, #20]
 8008ecc:	f023 0204 	bic.w	r2, r3, #4
 8008ed0:	6022      	str	r2, [r4, #0]
 8008ed2:	f04f 0900 	mov.w	r9, #0
 8008ed6:	9700      	str	r7, [sp, #0]
 8008ed8:	4633      	mov	r3, r6
 8008eda:	aa0b      	add	r2, sp, #44	; 0x2c
 8008edc:	4621      	mov	r1, r4
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f000 f9d8 	bl	8009294 <_printf_common>
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	f040 8090 	bne.w	800900a <_printf_float+0x1e2>
 8008eea:	f04f 30ff 	mov.w	r0, #4294967295
 8008eee:	b00d      	add	sp, #52	; 0x34
 8008ef0:	ecbd 8b02 	vpop	{d8}
 8008ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef8:	4642      	mov	r2, r8
 8008efa:	464b      	mov	r3, r9
 8008efc:	4640      	mov	r0, r8
 8008efe:	4649      	mov	r1, r9
 8008f00:	f7f7 fe14 	bl	8000b2c <__aeabi_dcmpun>
 8008f04:	b140      	cbz	r0, 8008f18 <_printf_float+0xf0>
 8008f06:	464b      	mov	r3, r9
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	bfbc      	itt	lt
 8008f0c:	232d      	movlt	r3, #45	; 0x2d
 8008f0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f12:	487f      	ldr	r0, [pc, #508]	; (8009110 <_printf_float+0x2e8>)
 8008f14:	4b7f      	ldr	r3, [pc, #508]	; (8009114 <_printf_float+0x2ec>)
 8008f16:	e7d1      	b.n	8008ebc <_printf_float+0x94>
 8008f18:	6863      	ldr	r3, [r4, #4]
 8008f1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f1e:	9206      	str	r2, [sp, #24]
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	d13f      	bne.n	8008fa4 <_printf_float+0x17c>
 8008f24:	2306      	movs	r3, #6
 8008f26:	6063      	str	r3, [r4, #4]
 8008f28:	9b05      	ldr	r3, [sp, #20]
 8008f2a:	6861      	ldr	r1, [r4, #4]
 8008f2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f30:	2300      	movs	r3, #0
 8008f32:	9303      	str	r3, [sp, #12]
 8008f34:	ab0a      	add	r3, sp, #40	; 0x28
 8008f36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f3a:	ab09      	add	r3, sp, #36	; 0x24
 8008f3c:	ec49 8b10 	vmov	d0, r8, r9
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	6022      	str	r2, [r4, #0]
 8008f44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f7ff fecd 	bl	8008ce8 <__cvt>
 8008f4e:	9b06      	ldr	r3, [sp, #24]
 8008f50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f52:	2b47      	cmp	r3, #71	; 0x47
 8008f54:	4680      	mov	r8, r0
 8008f56:	d108      	bne.n	8008f6a <_printf_float+0x142>
 8008f58:	1cc8      	adds	r0, r1, #3
 8008f5a:	db02      	blt.n	8008f62 <_printf_float+0x13a>
 8008f5c:	6863      	ldr	r3, [r4, #4]
 8008f5e:	4299      	cmp	r1, r3
 8008f60:	dd41      	ble.n	8008fe6 <_printf_float+0x1be>
 8008f62:	f1ab 0b02 	sub.w	fp, fp, #2
 8008f66:	fa5f fb8b 	uxtb.w	fp, fp
 8008f6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f6e:	d820      	bhi.n	8008fb2 <_printf_float+0x18a>
 8008f70:	3901      	subs	r1, #1
 8008f72:	465a      	mov	r2, fp
 8008f74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f78:	9109      	str	r1, [sp, #36]	; 0x24
 8008f7a:	f7ff ff17 	bl	8008dac <__exponent>
 8008f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f80:	1813      	adds	r3, r2, r0
 8008f82:	2a01      	cmp	r2, #1
 8008f84:	4681      	mov	r9, r0
 8008f86:	6123      	str	r3, [r4, #16]
 8008f88:	dc02      	bgt.n	8008f90 <_printf_float+0x168>
 8008f8a:	6822      	ldr	r2, [r4, #0]
 8008f8c:	07d2      	lsls	r2, r2, #31
 8008f8e:	d501      	bpl.n	8008f94 <_printf_float+0x16c>
 8008f90:	3301      	adds	r3, #1
 8008f92:	6123      	str	r3, [r4, #16]
 8008f94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d09c      	beq.n	8008ed6 <_printf_float+0xae>
 8008f9c:	232d      	movs	r3, #45	; 0x2d
 8008f9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fa2:	e798      	b.n	8008ed6 <_printf_float+0xae>
 8008fa4:	9a06      	ldr	r2, [sp, #24]
 8008fa6:	2a47      	cmp	r2, #71	; 0x47
 8008fa8:	d1be      	bne.n	8008f28 <_printf_float+0x100>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1bc      	bne.n	8008f28 <_printf_float+0x100>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e7b9      	b.n	8008f26 <_printf_float+0xfe>
 8008fb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008fb6:	d118      	bne.n	8008fea <_printf_float+0x1c2>
 8008fb8:	2900      	cmp	r1, #0
 8008fba:	6863      	ldr	r3, [r4, #4]
 8008fbc:	dd0b      	ble.n	8008fd6 <_printf_float+0x1ae>
 8008fbe:	6121      	str	r1, [r4, #16]
 8008fc0:	b913      	cbnz	r3, 8008fc8 <_printf_float+0x1a0>
 8008fc2:	6822      	ldr	r2, [r4, #0]
 8008fc4:	07d0      	lsls	r0, r2, #31
 8008fc6:	d502      	bpl.n	8008fce <_printf_float+0x1a6>
 8008fc8:	3301      	adds	r3, #1
 8008fca:	440b      	add	r3, r1
 8008fcc:	6123      	str	r3, [r4, #16]
 8008fce:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fd0:	f04f 0900 	mov.w	r9, #0
 8008fd4:	e7de      	b.n	8008f94 <_printf_float+0x16c>
 8008fd6:	b913      	cbnz	r3, 8008fde <_printf_float+0x1b6>
 8008fd8:	6822      	ldr	r2, [r4, #0]
 8008fda:	07d2      	lsls	r2, r2, #31
 8008fdc:	d501      	bpl.n	8008fe2 <_printf_float+0x1ba>
 8008fde:	3302      	adds	r3, #2
 8008fe0:	e7f4      	b.n	8008fcc <_printf_float+0x1a4>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e7f2      	b.n	8008fcc <_printf_float+0x1a4>
 8008fe6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fec:	4299      	cmp	r1, r3
 8008fee:	db05      	blt.n	8008ffc <_printf_float+0x1d4>
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	6121      	str	r1, [r4, #16]
 8008ff4:	07d8      	lsls	r0, r3, #31
 8008ff6:	d5ea      	bpl.n	8008fce <_printf_float+0x1a6>
 8008ff8:	1c4b      	adds	r3, r1, #1
 8008ffa:	e7e7      	b.n	8008fcc <_printf_float+0x1a4>
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	bfd4      	ite	le
 8009000:	f1c1 0202 	rsble	r2, r1, #2
 8009004:	2201      	movgt	r2, #1
 8009006:	4413      	add	r3, r2
 8009008:	e7e0      	b.n	8008fcc <_printf_float+0x1a4>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	055a      	lsls	r2, r3, #21
 800900e:	d407      	bmi.n	8009020 <_printf_float+0x1f8>
 8009010:	6923      	ldr	r3, [r4, #16]
 8009012:	4642      	mov	r2, r8
 8009014:	4631      	mov	r1, r6
 8009016:	4628      	mov	r0, r5
 8009018:	47b8      	blx	r7
 800901a:	3001      	adds	r0, #1
 800901c:	d12c      	bne.n	8009078 <_printf_float+0x250>
 800901e:	e764      	b.n	8008eea <_printf_float+0xc2>
 8009020:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009024:	f240 80e0 	bls.w	80091e8 <_printf_float+0x3c0>
 8009028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800902c:	2200      	movs	r2, #0
 800902e:	2300      	movs	r3, #0
 8009030:	f7f7 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009034:	2800      	cmp	r0, #0
 8009036:	d034      	beq.n	80090a2 <_printf_float+0x27a>
 8009038:	4a37      	ldr	r2, [pc, #220]	; (8009118 <_printf_float+0x2f0>)
 800903a:	2301      	movs	r3, #1
 800903c:	4631      	mov	r1, r6
 800903e:	4628      	mov	r0, r5
 8009040:	47b8      	blx	r7
 8009042:	3001      	adds	r0, #1
 8009044:	f43f af51 	beq.w	8008eea <_printf_float+0xc2>
 8009048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800904c:	429a      	cmp	r2, r3
 800904e:	db02      	blt.n	8009056 <_printf_float+0x22e>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	07d8      	lsls	r0, r3, #31
 8009054:	d510      	bpl.n	8009078 <_printf_float+0x250>
 8009056:	ee18 3a10 	vmov	r3, s16
 800905a:	4652      	mov	r2, sl
 800905c:	4631      	mov	r1, r6
 800905e:	4628      	mov	r0, r5
 8009060:	47b8      	blx	r7
 8009062:	3001      	adds	r0, #1
 8009064:	f43f af41 	beq.w	8008eea <_printf_float+0xc2>
 8009068:	f04f 0800 	mov.w	r8, #0
 800906c:	f104 091a 	add.w	r9, r4, #26
 8009070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009072:	3b01      	subs	r3, #1
 8009074:	4543      	cmp	r3, r8
 8009076:	dc09      	bgt.n	800908c <_printf_float+0x264>
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	079b      	lsls	r3, r3, #30
 800907c:	f100 8105 	bmi.w	800928a <_printf_float+0x462>
 8009080:	68e0      	ldr	r0, [r4, #12]
 8009082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009084:	4298      	cmp	r0, r3
 8009086:	bfb8      	it	lt
 8009088:	4618      	movlt	r0, r3
 800908a:	e730      	b.n	8008eee <_printf_float+0xc6>
 800908c:	2301      	movs	r3, #1
 800908e:	464a      	mov	r2, r9
 8009090:	4631      	mov	r1, r6
 8009092:	4628      	mov	r0, r5
 8009094:	47b8      	blx	r7
 8009096:	3001      	adds	r0, #1
 8009098:	f43f af27 	beq.w	8008eea <_printf_float+0xc2>
 800909c:	f108 0801 	add.w	r8, r8, #1
 80090a0:	e7e6      	b.n	8009070 <_printf_float+0x248>
 80090a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	dc39      	bgt.n	800911c <_printf_float+0x2f4>
 80090a8:	4a1b      	ldr	r2, [pc, #108]	; (8009118 <_printf_float+0x2f0>)
 80090aa:	2301      	movs	r3, #1
 80090ac:	4631      	mov	r1, r6
 80090ae:	4628      	mov	r0, r5
 80090b0:	47b8      	blx	r7
 80090b2:	3001      	adds	r0, #1
 80090b4:	f43f af19 	beq.w	8008eea <_printf_float+0xc2>
 80090b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090bc:	4313      	orrs	r3, r2
 80090be:	d102      	bne.n	80090c6 <_printf_float+0x29e>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	07d9      	lsls	r1, r3, #31
 80090c4:	d5d8      	bpl.n	8009078 <_printf_float+0x250>
 80090c6:	ee18 3a10 	vmov	r3, s16
 80090ca:	4652      	mov	r2, sl
 80090cc:	4631      	mov	r1, r6
 80090ce:	4628      	mov	r0, r5
 80090d0:	47b8      	blx	r7
 80090d2:	3001      	adds	r0, #1
 80090d4:	f43f af09 	beq.w	8008eea <_printf_float+0xc2>
 80090d8:	f04f 0900 	mov.w	r9, #0
 80090dc:	f104 0a1a 	add.w	sl, r4, #26
 80090e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e2:	425b      	negs	r3, r3
 80090e4:	454b      	cmp	r3, r9
 80090e6:	dc01      	bgt.n	80090ec <_printf_float+0x2c4>
 80090e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ea:	e792      	b.n	8009012 <_printf_float+0x1ea>
 80090ec:	2301      	movs	r3, #1
 80090ee:	4652      	mov	r2, sl
 80090f0:	4631      	mov	r1, r6
 80090f2:	4628      	mov	r0, r5
 80090f4:	47b8      	blx	r7
 80090f6:	3001      	adds	r0, #1
 80090f8:	f43f aef7 	beq.w	8008eea <_printf_float+0xc2>
 80090fc:	f109 0901 	add.w	r9, r9, #1
 8009100:	e7ee      	b.n	80090e0 <_printf_float+0x2b8>
 8009102:	bf00      	nop
 8009104:	7fefffff 	.word	0x7fefffff
 8009108:	0800da10 	.word	0x0800da10
 800910c:	0800da14 	.word	0x0800da14
 8009110:	0800da1c 	.word	0x0800da1c
 8009114:	0800da18 	.word	0x0800da18
 8009118:	0800da20 	.word	0x0800da20
 800911c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800911e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009120:	429a      	cmp	r2, r3
 8009122:	bfa8      	it	ge
 8009124:	461a      	movge	r2, r3
 8009126:	2a00      	cmp	r2, #0
 8009128:	4691      	mov	r9, r2
 800912a:	dc37      	bgt.n	800919c <_printf_float+0x374>
 800912c:	f04f 0b00 	mov.w	fp, #0
 8009130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009134:	f104 021a 	add.w	r2, r4, #26
 8009138:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800913a:	9305      	str	r3, [sp, #20]
 800913c:	eba3 0309 	sub.w	r3, r3, r9
 8009140:	455b      	cmp	r3, fp
 8009142:	dc33      	bgt.n	80091ac <_printf_float+0x384>
 8009144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009148:	429a      	cmp	r2, r3
 800914a:	db3b      	blt.n	80091c4 <_printf_float+0x39c>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	07da      	lsls	r2, r3, #31
 8009150:	d438      	bmi.n	80091c4 <_printf_float+0x39c>
 8009152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009154:	9a05      	ldr	r2, [sp, #20]
 8009156:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009158:	1a9a      	subs	r2, r3, r2
 800915a:	eba3 0901 	sub.w	r9, r3, r1
 800915e:	4591      	cmp	r9, r2
 8009160:	bfa8      	it	ge
 8009162:	4691      	movge	r9, r2
 8009164:	f1b9 0f00 	cmp.w	r9, #0
 8009168:	dc35      	bgt.n	80091d6 <_printf_float+0x3ae>
 800916a:	f04f 0800 	mov.w	r8, #0
 800916e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009172:	f104 0a1a 	add.w	sl, r4, #26
 8009176:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800917a:	1a9b      	subs	r3, r3, r2
 800917c:	eba3 0309 	sub.w	r3, r3, r9
 8009180:	4543      	cmp	r3, r8
 8009182:	f77f af79 	ble.w	8009078 <_printf_float+0x250>
 8009186:	2301      	movs	r3, #1
 8009188:	4652      	mov	r2, sl
 800918a:	4631      	mov	r1, r6
 800918c:	4628      	mov	r0, r5
 800918e:	47b8      	blx	r7
 8009190:	3001      	adds	r0, #1
 8009192:	f43f aeaa 	beq.w	8008eea <_printf_float+0xc2>
 8009196:	f108 0801 	add.w	r8, r8, #1
 800919a:	e7ec      	b.n	8009176 <_printf_float+0x34e>
 800919c:	4613      	mov	r3, r2
 800919e:	4631      	mov	r1, r6
 80091a0:	4642      	mov	r2, r8
 80091a2:	4628      	mov	r0, r5
 80091a4:	47b8      	blx	r7
 80091a6:	3001      	adds	r0, #1
 80091a8:	d1c0      	bne.n	800912c <_printf_float+0x304>
 80091aa:	e69e      	b.n	8008eea <_printf_float+0xc2>
 80091ac:	2301      	movs	r3, #1
 80091ae:	4631      	mov	r1, r6
 80091b0:	4628      	mov	r0, r5
 80091b2:	9205      	str	r2, [sp, #20]
 80091b4:	47b8      	blx	r7
 80091b6:	3001      	adds	r0, #1
 80091b8:	f43f ae97 	beq.w	8008eea <_printf_float+0xc2>
 80091bc:	9a05      	ldr	r2, [sp, #20]
 80091be:	f10b 0b01 	add.w	fp, fp, #1
 80091c2:	e7b9      	b.n	8009138 <_printf_float+0x310>
 80091c4:	ee18 3a10 	vmov	r3, s16
 80091c8:	4652      	mov	r2, sl
 80091ca:	4631      	mov	r1, r6
 80091cc:	4628      	mov	r0, r5
 80091ce:	47b8      	blx	r7
 80091d0:	3001      	adds	r0, #1
 80091d2:	d1be      	bne.n	8009152 <_printf_float+0x32a>
 80091d4:	e689      	b.n	8008eea <_printf_float+0xc2>
 80091d6:	9a05      	ldr	r2, [sp, #20]
 80091d8:	464b      	mov	r3, r9
 80091da:	4442      	add	r2, r8
 80091dc:	4631      	mov	r1, r6
 80091de:	4628      	mov	r0, r5
 80091e0:	47b8      	blx	r7
 80091e2:	3001      	adds	r0, #1
 80091e4:	d1c1      	bne.n	800916a <_printf_float+0x342>
 80091e6:	e680      	b.n	8008eea <_printf_float+0xc2>
 80091e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ea:	2a01      	cmp	r2, #1
 80091ec:	dc01      	bgt.n	80091f2 <_printf_float+0x3ca>
 80091ee:	07db      	lsls	r3, r3, #31
 80091f0:	d538      	bpl.n	8009264 <_printf_float+0x43c>
 80091f2:	2301      	movs	r3, #1
 80091f4:	4642      	mov	r2, r8
 80091f6:	4631      	mov	r1, r6
 80091f8:	4628      	mov	r0, r5
 80091fa:	47b8      	blx	r7
 80091fc:	3001      	adds	r0, #1
 80091fe:	f43f ae74 	beq.w	8008eea <_printf_float+0xc2>
 8009202:	ee18 3a10 	vmov	r3, s16
 8009206:	4652      	mov	r2, sl
 8009208:	4631      	mov	r1, r6
 800920a:	4628      	mov	r0, r5
 800920c:	47b8      	blx	r7
 800920e:	3001      	adds	r0, #1
 8009210:	f43f ae6b 	beq.w	8008eea <_printf_float+0xc2>
 8009214:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009218:	2200      	movs	r2, #0
 800921a:	2300      	movs	r3, #0
 800921c:	f7f7 fc54 	bl	8000ac8 <__aeabi_dcmpeq>
 8009220:	b9d8      	cbnz	r0, 800925a <_printf_float+0x432>
 8009222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009224:	f108 0201 	add.w	r2, r8, #1
 8009228:	3b01      	subs	r3, #1
 800922a:	4631      	mov	r1, r6
 800922c:	4628      	mov	r0, r5
 800922e:	47b8      	blx	r7
 8009230:	3001      	adds	r0, #1
 8009232:	d10e      	bne.n	8009252 <_printf_float+0x42a>
 8009234:	e659      	b.n	8008eea <_printf_float+0xc2>
 8009236:	2301      	movs	r3, #1
 8009238:	4652      	mov	r2, sl
 800923a:	4631      	mov	r1, r6
 800923c:	4628      	mov	r0, r5
 800923e:	47b8      	blx	r7
 8009240:	3001      	adds	r0, #1
 8009242:	f43f ae52 	beq.w	8008eea <_printf_float+0xc2>
 8009246:	f108 0801 	add.w	r8, r8, #1
 800924a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800924c:	3b01      	subs	r3, #1
 800924e:	4543      	cmp	r3, r8
 8009250:	dcf1      	bgt.n	8009236 <_printf_float+0x40e>
 8009252:	464b      	mov	r3, r9
 8009254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009258:	e6dc      	b.n	8009014 <_printf_float+0x1ec>
 800925a:	f04f 0800 	mov.w	r8, #0
 800925e:	f104 0a1a 	add.w	sl, r4, #26
 8009262:	e7f2      	b.n	800924a <_printf_float+0x422>
 8009264:	2301      	movs	r3, #1
 8009266:	4642      	mov	r2, r8
 8009268:	e7df      	b.n	800922a <_printf_float+0x402>
 800926a:	2301      	movs	r3, #1
 800926c:	464a      	mov	r2, r9
 800926e:	4631      	mov	r1, r6
 8009270:	4628      	mov	r0, r5
 8009272:	47b8      	blx	r7
 8009274:	3001      	adds	r0, #1
 8009276:	f43f ae38 	beq.w	8008eea <_printf_float+0xc2>
 800927a:	f108 0801 	add.w	r8, r8, #1
 800927e:	68e3      	ldr	r3, [r4, #12]
 8009280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009282:	1a5b      	subs	r3, r3, r1
 8009284:	4543      	cmp	r3, r8
 8009286:	dcf0      	bgt.n	800926a <_printf_float+0x442>
 8009288:	e6fa      	b.n	8009080 <_printf_float+0x258>
 800928a:	f04f 0800 	mov.w	r8, #0
 800928e:	f104 0919 	add.w	r9, r4, #25
 8009292:	e7f4      	b.n	800927e <_printf_float+0x456>

08009294 <_printf_common>:
 8009294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009298:	4616      	mov	r6, r2
 800929a:	4699      	mov	r9, r3
 800929c:	688a      	ldr	r2, [r1, #8]
 800929e:	690b      	ldr	r3, [r1, #16]
 80092a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092a4:	4293      	cmp	r3, r2
 80092a6:	bfb8      	it	lt
 80092a8:	4613      	movlt	r3, r2
 80092aa:	6033      	str	r3, [r6, #0]
 80092ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092b0:	4607      	mov	r7, r0
 80092b2:	460c      	mov	r4, r1
 80092b4:	b10a      	cbz	r2, 80092ba <_printf_common+0x26>
 80092b6:	3301      	adds	r3, #1
 80092b8:	6033      	str	r3, [r6, #0]
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	0699      	lsls	r1, r3, #26
 80092be:	bf42      	ittt	mi
 80092c0:	6833      	ldrmi	r3, [r6, #0]
 80092c2:	3302      	addmi	r3, #2
 80092c4:	6033      	strmi	r3, [r6, #0]
 80092c6:	6825      	ldr	r5, [r4, #0]
 80092c8:	f015 0506 	ands.w	r5, r5, #6
 80092cc:	d106      	bne.n	80092dc <_printf_common+0x48>
 80092ce:	f104 0a19 	add.w	sl, r4, #25
 80092d2:	68e3      	ldr	r3, [r4, #12]
 80092d4:	6832      	ldr	r2, [r6, #0]
 80092d6:	1a9b      	subs	r3, r3, r2
 80092d8:	42ab      	cmp	r3, r5
 80092da:	dc26      	bgt.n	800932a <_printf_common+0x96>
 80092dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092e0:	1e13      	subs	r3, r2, #0
 80092e2:	6822      	ldr	r2, [r4, #0]
 80092e4:	bf18      	it	ne
 80092e6:	2301      	movne	r3, #1
 80092e8:	0692      	lsls	r2, r2, #26
 80092ea:	d42b      	bmi.n	8009344 <_printf_common+0xb0>
 80092ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092f0:	4649      	mov	r1, r9
 80092f2:	4638      	mov	r0, r7
 80092f4:	47c0      	blx	r8
 80092f6:	3001      	adds	r0, #1
 80092f8:	d01e      	beq.n	8009338 <_printf_common+0xa4>
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	68e5      	ldr	r5, [r4, #12]
 80092fe:	6832      	ldr	r2, [r6, #0]
 8009300:	f003 0306 	and.w	r3, r3, #6
 8009304:	2b04      	cmp	r3, #4
 8009306:	bf08      	it	eq
 8009308:	1aad      	subeq	r5, r5, r2
 800930a:	68a3      	ldr	r3, [r4, #8]
 800930c:	6922      	ldr	r2, [r4, #16]
 800930e:	bf0c      	ite	eq
 8009310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009314:	2500      	movne	r5, #0
 8009316:	4293      	cmp	r3, r2
 8009318:	bfc4      	itt	gt
 800931a:	1a9b      	subgt	r3, r3, r2
 800931c:	18ed      	addgt	r5, r5, r3
 800931e:	2600      	movs	r6, #0
 8009320:	341a      	adds	r4, #26
 8009322:	42b5      	cmp	r5, r6
 8009324:	d11a      	bne.n	800935c <_printf_common+0xc8>
 8009326:	2000      	movs	r0, #0
 8009328:	e008      	b.n	800933c <_printf_common+0xa8>
 800932a:	2301      	movs	r3, #1
 800932c:	4652      	mov	r2, sl
 800932e:	4649      	mov	r1, r9
 8009330:	4638      	mov	r0, r7
 8009332:	47c0      	blx	r8
 8009334:	3001      	adds	r0, #1
 8009336:	d103      	bne.n	8009340 <_printf_common+0xac>
 8009338:	f04f 30ff 	mov.w	r0, #4294967295
 800933c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009340:	3501      	adds	r5, #1
 8009342:	e7c6      	b.n	80092d2 <_printf_common+0x3e>
 8009344:	18e1      	adds	r1, r4, r3
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	2030      	movs	r0, #48	; 0x30
 800934a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800934e:	4422      	add	r2, r4
 8009350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009358:	3302      	adds	r3, #2
 800935a:	e7c7      	b.n	80092ec <_printf_common+0x58>
 800935c:	2301      	movs	r3, #1
 800935e:	4622      	mov	r2, r4
 8009360:	4649      	mov	r1, r9
 8009362:	4638      	mov	r0, r7
 8009364:	47c0      	blx	r8
 8009366:	3001      	adds	r0, #1
 8009368:	d0e6      	beq.n	8009338 <_printf_common+0xa4>
 800936a:	3601      	adds	r6, #1
 800936c:	e7d9      	b.n	8009322 <_printf_common+0x8e>
	...

08009370 <_printf_i>:
 8009370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009374:	7e0f      	ldrb	r7, [r1, #24]
 8009376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009378:	2f78      	cmp	r7, #120	; 0x78
 800937a:	4691      	mov	r9, r2
 800937c:	4680      	mov	r8, r0
 800937e:	460c      	mov	r4, r1
 8009380:	469a      	mov	sl, r3
 8009382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009386:	d807      	bhi.n	8009398 <_printf_i+0x28>
 8009388:	2f62      	cmp	r7, #98	; 0x62
 800938a:	d80a      	bhi.n	80093a2 <_printf_i+0x32>
 800938c:	2f00      	cmp	r7, #0
 800938e:	f000 80d8 	beq.w	8009542 <_printf_i+0x1d2>
 8009392:	2f58      	cmp	r7, #88	; 0x58
 8009394:	f000 80a3 	beq.w	80094de <_printf_i+0x16e>
 8009398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800939c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093a0:	e03a      	b.n	8009418 <_printf_i+0xa8>
 80093a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093a6:	2b15      	cmp	r3, #21
 80093a8:	d8f6      	bhi.n	8009398 <_printf_i+0x28>
 80093aa:	a101      	add	r1, pc, #4	; (adr r1, 80093b0 <_printf_i+0x40>)
 80093ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093b0:	08009409 	.word	0x08009409
 80093b4:	0800941d 	.word	0x0800941d
 80093b8:	08009399 	.word	0x08009399
 80093bc:	08009399 	.word	0x08009399
 80093c0:	08009399 	.word	0x08009399
 80093c4:	08009399 	.word	0x08009399
 80093c8:	0800941d 	.word	0x0800941d
 80093cc:	08009399 	.word	0x08009399
 80093d0:	08009399 	.word	0x08009399
 80093d4:	08009399 	.word	0x08009399
 80093d8:	08009399 	.word	0x08009399
 80093dc:	08009529 	.word	0x08009529
 80093e0:	0800944d 	.word	0x0800944d
 80093e4:	0800950b 	.word	0x0800950b
 80093e8:	08009399 	.word	0x08009399
 80093ec:	08009399 	.word	0x08009399
 80093f0:	0800954b 	.word	0x0800954b
 80093f4:	08009399 	.word	0x08009399
 80093f8:	0800944d 	.word	0x0800944d
 80093fc:	08009399 	.word	0x08009399
 8009400:	08009399 	.word	0x08009399
 8009404:	08009513 	.word	0x08009513
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	1d1a      	adds	r2, r3, #4
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	602a      	str	r2, [r5, #0]
 8009410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009418:	2301      	movs	r3, #1
 800941a:	e0a3      	b.n	8009564 <_printf_i+0x1f4>
 800941c:	6820      	ldr	r0, [r4, #0]
 800941e:	6829      	ldr	r1, [r5, #0]
 8009420:	0606      	lsls	r6, r0, #24
 8009422:	f101 0304 	add.w	r3, r1, #4
 8009426:	d50a      	bpl.n	800943e <_printf_i+0xce>
 8009428:	680e      	ldr	r6, [r1, #0]
 800942a:	602b      	str	r3, [r5, #0]
 800942c:	2e00      	cmp	r6, #0
 800942e:	da03      	bge.n	8009438 <_printf_i+0xc8>
 8009430:	232d      	movs	r3, #45	; 0x2d
 8009432:	4276      	negs	r6, r6
 8009434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009438:	485e      	ldr	r0, [pc, #376]	; (80095b4 <_printf_i+0x244>)
 800943a:	230a      	movs	r3, #10
 800943c:	e019      	b.n	8009472 <_printf_i+0x102>
 800943e:	680e      	ldr	r6, [r1, #0]
 8009440:	602b      	str	r3, [r5, #0]
 8009442:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009446:	bf18      	it	ne
 8009448:	b236      	sxthne	r6, r6
 800944a:	e7ef      	b.n	800942c <_printf_i+0xbc>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	6820      	ldr	r0, [r4, #0]
 8009450:	1d19      	adds	r1, r3, #4
 8009452:	6029      	str	r1, [r5, #0]
 8009454:	0601      	lsls	r1, r0, #24
 8009456:	d501      	bpl.n	800945c <_printf_i+0xec>
 8009458:	681e      	ldr	r6, [r3, #0]
 800945a:	e002      	b.n	8009462 <_printf_i+0xf2>
 800945c:	0646      	lsls	r6, r0, #25
 800945e:	d5fb      	bpl.n	8009458 <_printf_i+0xe8>
 8009460:	881e      	ldrh	r6, [r3, #0]
 8009462:	4854      	ldr	r0, [pc, #336]	; (80095b4 <_printf_i+0x244>)
 8009464:	2f6f      	cmp	r7, #111	; 0x6f
 8009466:	bf0c      	ite	eq
 8009468:	2308      	moveq	r3, #8
 800946a:	230a      	movne	r3, #10
 800946c:	2100      	movs	r1, #0
 800946e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009472:	6865      	ldr	r5, [r4, #4]
 8009474:	60a5      	str	r5, [r4, #8]
 8009476:	2d00      	cmp	r5, #0
 8009478:	bfa2      	ittt	ge
 800947a:	6821      	ldrge	r1, [r4, #0]
 800947c:	f021 0104 	bicge.w	r1, r1, #4
 8009480:	6021      	strge	r1, [r4, #0]
 8009482:	b90e      	cbnz	r6, 8009488 <_printf_i+0x118>
 8009484:	2d00      	cmp	r5, #0
 8009486:	d04d      	beq.n	8009524 <_printf_i+0x1b4>
 8009488:	4615      	mov	r5, r2
 800948a:	fbb6 f1f3 	udiv	r1, r6, r3
 800948e:	fb03 6711 	mls	r7, r3, r1, r6
 8009492:	5dc7      	ldrb	r7, [r0, r7]
 8009494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009498:	4637      	mov	r7, r6
 800949a:	42bb      	cmp	r3, r7
 800949c:	460e      	mov	r6, r1
 800949e:	d9f4      	bls.n	800948a <_printf_i+0x11a>
 80094a0:	2b08      	cmp	r3, #8
 80094a2:	d10b      	bne.n	80094bc <_printf_i+0x14c>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	07de      	lsls	r6, r3, #31
 80094a8:	d508      	bpl.n	80094bc <_printf_i+0x14c>
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	6861      	ldr	r1, [r4, #4]
 80094ae:	4299      	cmp	r1, r3
 80094b0:	bfde      	ittt	le
 80094b2:	2330      	movle	r3, #48	; 0x30
 80094b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094bc:	1b52      	subs	r2, r2, r5
 80094be:	6122      	str	r2, [r4, #16]
 80094c0:	f8cd a000 	str.w	sl, [sp]
 80094c4:	464b      	mov	r3, r9
 80094c6:	aa03      	add	r2, sp, #12
 80094c8:	4621      	mov	r1, r4
 80094ca:	4640      	mov	r0, r8
 80094cc:	f7ff fee2 	bl	8009294 <_printf_common>
 80094d0:	3001      	adds	r0, #1
 80094d2:	d14c      	bne.n	800956e <_printf_i+0x1fe>
 80094d4:	f04f 30ff 	mov.w	r0, #4294967295
 80094d8:	b004      	add	sp, #16
 80094da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094de:	4835      	ldr	r0, [pc, #212]	; (80095b4 <_printf_i+0x244>)
 80094e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80094e4:	6829      	ldr	r1, [r5, #0]
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80094ec:	6029      	str	r1, [r5, #0]
 80094ee:	061d      	lsls	r5, r3, #24
 80094f0:	d514      	bpl.n	800951c <_printf_i+0x1ac>
 80094f2:	07df      	lsls	r7, r3, #31
 80094f4:	bf44      	itt	mi
 80094f6:	f043 0320 	orrmi.w	r3, r3, #32
 80094fa:	6023      	strmi	r3, [r4, #0]
 80094fc:	b91e      	cbnz	r6, 8009506 <_printf_i+0x196>
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	f023 0320 	bic.w	r3, r3, #32
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	2310      	movs	r3, #16
 8009508:	e7b0      	b.n	800946c <_printf_i+0xfc>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	f043 0320 	orr.w	r3, r3, #32
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	2378      	movs	r3, #120	; 0x78
 8009514:	4828      	ldr	r0, [pc, #160]	; (80095b8 <_printf_i+0x248>)
 8009516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800951a:	e7e3      	b.n	80094e4 <_printf_i+0x174>
 800951c:	0659      	lsls	r1, r3, #25
 800951e:	bf48      	it	mi
 8009520:	b2b6      	uxthmi	r6, r6
 8009522:	e7e6      	b.n	80094f2 <_printf_i+0x182>
 8009524:	4615      	mov	r5, r2
 8009526:	e7bb      	b.n	80094a0 <_printf_i+0x130>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	6826      	ldr	r6, [r4, #0]
 800952c:	6961      	ldr	r1, [r4, #20]
 800952e:	1d18      	adds	r0, r3, #4
 8009530:	6028      	str	r0, [r5, #0]
 8009532:	0635      	lsls	r5, r6, #24
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	d501      	bpl.n	800953c <_printf_i+0x1cc>
 8009538:	6019      	str	r1, [r3, #0]
 800953a:	e002      	b.n	8009542 <_printf_i+0x1d2>
 800953c:	0670      	lsls	r0, r6, #25
 800953e:	d5fb      	bpl.n	8009538 <_printf_i+0x1c8>
 8009540:	8019      	strh	r1, [r3, #0]
 8009542:	2300      	movs	r3, #0
 8009544:	6123      	str	r3, [r4, #16]
 8009546:	4615      	mov	r5, r2
 8009548:	e7ba      	b.n	80094c0 <_printf_i+0x150>
 800954a:	682b      	ldr	r3, [r5, #0]
 800954c:	1d1a      	adds	r2, r3, #4
 800954e:	602a      	str	r2, [r5, #0]
 8009550:	681d      	ldr	r5, [r3, #0]
 8009552:	6862      	ldr	r2, [r4, #4]
 8009554:	2100      	movs	r1, #0
 8009556:	4628      	mov	r0, r5
 8009558:	f7f6 fe42 	bl	80001e0 <memchr>
 800955c:	b108      	cbz	r0, 8009562 <_printf_i+0x1f2>
 800955e:	1b40      	subs	r0, r0, r5
 8009560:	6060      	str	r0, [r4, #4]
 8009562:	6863      	ldr	r3, [r4, #4]
 8009564:	6123      	str	r3, [r4, #16]
 8009566:	2300      	movs	r3, #0
 8009568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800956c:	e7a8      	b.n	80094c0 <_printf_i+0x150>
 800956e:	6923      	ldr	r3, [r4, #16]
 8009570:	462a      	mov	r2, r5
 8009572:	4649      	mov	r1, r9
 8009574:	4640      	mov	r0, r8
 8009576:	47d0      	blx	sl
 8009578:	3001      	adds	r0, #1
 800957a:	d0ab      	beq.n	80094d4 <_printf_i+0x164>
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	079b      	lsls	r3, r3, #30
 8009580:	d413      	bmi.n	80095aa <_printf_i+0x23a>
 8009582:	68e0      	ldr	r0, [r4, #12]
 8009584:	9b03      	ldr	r3, [sp, #12]
 8009586:	4298      	cmp	r0, r3
 8009588:	bfb8      	it	lt
 800958a:	4618      	movlt	r0, r3
 800958c:	e7a4      	b.n	80094d8 <_printf_i+0x168>
 800958e:	2301      	movs	r3, #1
 8009590:	4632      	mov	r2, r6
 8009592:	4649      	mov	r1, r9
 8009594:	4640      	mov	r0, r8
 8009596:	47d0      	blx	sl
 8009598:	3001      	adds	r0, #1
 800959a:	d09b      	beq.n	80094d4 <_printf_i+0x164>
 800959c:	3501      	adds	r5, #1
 800959e:	68e3      	ldr	r3, [r4, #12]
 80095a0:	9903      	ldr	r1, [sp, #12]
 80095a2:	1a5b      	subs	r3, r3, r1
 80095a4:	42ab      	cmp	r3, r5
 80095a6:	dcf2      	bgt.n	800958e <_printf_i+0x21e>
 80095a8:	e7eb      	b.n	8009582 <_printf_i+0x212>
 80095aa:	2500      	movs	r5, #0
 80095ac:	f104 0619 	add.w	r6, r4, #25
 80095b0:	e7f5      	b.n	800959e <_printf_i+0x22e>
 80095b2:	bf00      	nop
 80095b4:	0800da22 	.word	0x0800da22
 80095b8:	0800da33 	.word	0x0800da33

080095bc <siprintf>:
 80095bc:	b40e      	push	{r1, r2, r3}
 80095be:	b500      	push	{lr}
 80095c0:	b09c      	sub	sp, #112	; 0x70
 80095c2:	ab1d      	add	r3, sp, #116	; 0x74
 80095c4:	9002      	str	r0, [sp, #8]
 80095c6:	9006      	str	r0, [sp, #24]
 80095c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095cc:	4809      	ldr	r0, [pc, #36]	; (80095f4 <siprintf+0x38>)
 80095ce:	9107      	str	r1, [sp, #28]
 80095d0:	9104      	str	r1, [sp, #16]
 80095d2:	4909      	ldr	r1, [pc, #36]	; (80095f8 <siprintf+0x3c>)
 80095d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80095d8:	9105      	str	r1, [sp, #20]
 80095da:	6800      	ldr	r0, [r0, #0]
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	a902      	add	r1, sp, #8
 80095e0:	f001 fb6a 	bl	800acb8 <_svfiprintf_r>
 80095e4:	9b02      	ldr	r3, [sp, #8]
 80095e6:	2200      	movs	r2, #0
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	b01c      	add	sp, #112	; 0x70
 80095ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80095f0:	b003      	add	sp, #12
 80095f2:	4770      	bx	lr
 80095f4:	2000001c 	.word	0x2000001c
 80095f8:	ffff0208 	.word	0xffff0208

080095fc <quorem>:
 80095fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009600:	6903      	ldr	r3, [r0, #16]
 8009602:	690c      	ldr	r4, [r1, #16]
 8009604:	42a3      	cmp	r3, r4
 8009606:	4607      	mov	r7, r0
 8009608:	f2c0 8081 	blt.w	800970e <quorem+0x112>
 800960c:	3c01      	subs	r4, #1
 800960e:	f101 0814 	add.w	r8, r1, #20
 8009612:	f100 0514 	add.w	r5, r0, #20
 8009616:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800961a:	9301      	str	r3, [sp, #4]
 800961c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009620:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009624:	3301      	adds	r3, #1
 8009626:	429a      	cmp	r2, r3
 8009628:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800962c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009630:	fbb2 f6f3 	udiv	r6, r2, r3
 8009634:	d331      	bcc.n	800969a <quorem+0x9e>
 8009636:	f04f 0e00 	mov.w	lr, #0
 800963a:	4640      	mov	r0, r8
 800963c:	46ac      	mov	ip, r5
 800963e:	46f2      	mov	sl, lr
 8009640:	f850 2b04 	ldr.w	r2, [r0], #4
 8009644:	b293      	uxth	r3, r2
 8009646:	fb06 e303 	mla	r3, r6, r3, lr
 800964a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800964e:	b29b      	uxth	r3, r3
 8009650:	ebaa 0303 	sub.w	r3, sl, r3
 8009654:	f8dc a000 	ldr.w	sl, [ip]
 8009658:	0c12      	lsrs	r2, r2, #16
 800965a:	fa13 f38a 	uxtah	r3, r3, sl
 800965e:	fb06 e202 	mla	r2, r6, r2, lr
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	9b00      	ldr	r3, [sp, #0]
 8009666:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800966a:	b292      	uxth	r2, r2
 800966c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009670:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009674:	f8bd 3000 	ldrh.w	r3, [sp]
 8009678:	4581      	cmp	r9, r0
 800967a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800967e:	f84c 3b04 	str.w	r3, [ip], #4
 8009682:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009686:	d2db      	bcs.n	8009640 <quorem+0x44>
 8009688:	f855 300b 	ldr.w	r3, [r5, fp]
 800968c:	b92b      	cbnz	r3, 800969a <quorem+0x9e>
 800968e:	9b01      	ldr	r3, [sp, #4]
 8009690:	3b04      	subs	r3, #4
 8009692:	429d      	cmp	r5, r3
 8009694:	461a      	mov	r2, r3
 8009696:	d32e      	bcc.n	80096f6 <quorem+0xfa>
 8009698:	613c      	str	r4, [r7, #16]
 800969a:	4638      	mov	r0, r7
 800969c:	f001 f8b8 	bl	800a810 <__mcmp>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	db24      	blt.n	80096ee <quorem+0xf2>
 80096a4:	3601      	adds	r6, #1
 80096a6:	4628      	mov	r0, r5
 80096a8:	f04f 0c00 	mov.w	ip, #0
 80096ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80096b0:	f8d0 e000 	ldr.w	lr, [r0]
 80096b4:	b293      	uxth	r3, r2
 80096b6:	ebac 0303 	sub.w	r3, ip, r3
 80096ba:	0c12      	lsrs	r2, r2, #16
 80096bc:	fa13 f38e 	uxtah	r3, r3, lr
 80096c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80096c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096ce:	45c1      	cmp	r9, r8
 80096d0:	f840 3b04 	str.w	r3, [r0], #4
 80096d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80096d8:	d2e8      	bcs.n	80096ac <quorem+0xb0>
 80096da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096e2:	b922      	cbnz	r2, 80096ee <quorem+0xf2>
 80096e4:	3b04      	subs	r3, #4
 80096e6:	429d      	cmp	r5, r3
 80096e8:	461a      	mov	r2, r3
 80096ea:	d30a      	bcc.n	8009702 <quorem+0x106>
 80096ec:	613c      	str	r4, [r7, #16]
 80096ee:	4630      	mov	r0, r6
 80096f0:	b003      	add	sp, #12
 80096f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f6:	6812      	ldr	r2, [r2, #0]
 80096f8:	3b04      	subs	r3, #4
 80096fa:	2a00      	cmp	r2, #0
 80096fc:	d1cc      	bne.n	8009698 <quorem+0x9c>
 80096fe:	3c01      	subs	r4, #1
 8009700:	e7c7      	b.n	8009692 <quorem+0x96>
 8009702:	6812      	ldr	r2, [r2, #0]
 8009704:	3b04      	subs	r3, #4
 8009706:	2a00      	cmp	r2, #0
 8009708:	d1f0      	bne.n	80096ec <quorem+0xf0>
 800970a:	3c01      	subs	r4, #1
 800970c:	e7eb      	b.n	80096e6 <quorem+0xea>
 800970e:	2000      	movs	r0, #0
 8009710:	e7ee      	b.n	80096f0 <quorem+0xf4>
 8009712:	0000      	movs	r0, r0
 8009714:	0000      	movs	r0, r0
	...

08009718 <_dtoa_r>:
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	ed2d 8b04 	vpush	{d8-d9}
 8009720:	ec57 6b10 	vmov	r6, r7, d0
 8009724:	b093      	sub	sp, #76	; 0x4c
 8009726:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009728:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800972c:	9106      	str	r1, [sp, #24]
 800972e:	ee10 aa10 	vmov	sl, s0
 8009732:	4604      	mov	r4, r0
 8009734:	9209      	str	r2, [sp, #36]	; 0x24
 8009736:	930c      	str	r3, [sp, #48]	; 0x30
 8009738:	46bb      	mov	fp, r7
 800973a:	b975      	cbnz	r5, 800975a <_dtoa_r+0x42>
 800973c:	2010      	movs	r0, #16
 800973e:	f000 fddd 	bl	800a2fc <malloc>
 8009742:	4602      	mov	r2, r0
 8009744:	6260      	str	r0, [r4, #36]	; 0x24
 8009746:	b920      	cbnz	r0, 8009752 <_dtoa_r+0x3a>
 8009748:	4ba7      	ldr	r3, [pc, #668]	; (80099e8 <_dtoa_r+0x2d0>)
 800974a:	21ea      	movs	r1, #234	; 0xea
 800974c:	48a7      	ldr	r0, [pc, #668]	; (80099ec <_dtoa_r+0x2d4>)
 800974e:	f001 fbc3 	bl	800aed8 <__assert_func>
 8009752:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009756:	6005      	str	r5, [r0, #0]
 8009758:	60c5      	str	r5, [r0, #12]
 800975a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800975c:	6819      	ldr	r1, [r3, #0]
 800975e:	b151      	cbz	r1, 8009776 <_dtoa_r+0x5e>
 8009760:	685a      	ldr	r2, [r3, #4]
 8009762:	604a      	str	r2, [r1, #4]
 8009764:	2301      	movs	r3, #1
 8009766:	4093      	lsls	r3, r2
 8009768:	608b      	str	r3, [r1, #8]
 800976a:	4620      	mov	r0, r4
 800976c:	f000 fe0e 	bl	800a38c <_Bfree>
 8009770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	1e3b      	subs	r3, r7, #0
 8009778:	bfaa      	itet	ge
 800977a:	2300      	movge	r3, #0
 800977c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009780:	f8c8 3000 	strge.w	r3, [r8]
 8009784:	4b9a      	ldr	r3, [pc, #616]	; (80099f0 <_dtoa_r+0x2d8>)
 8009786:	bfbc      	itt	lt
 8009788:	2201      	movlt	r2, #1
 800978a:	f8c8 2000 	strlt.w	r2, [r8]
 800978e:	ea33 030b 	bics.w	r3, r3, fp
 8009792:	d11b      	bne.n	80097cc <_dtoa_r+0xb4>
 8009794:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009796:	f242 730f 	movw	r3, #9999	; 0x270f
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097a0:	4333      	orrs	r3, r6
 80097a2:	f000 8592 	beq.w	800a2ca <_dtoa_r+0xbb2>
 80097a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097a8:	b963      	cbnz	r3, 80097c4 <_dtoa_r+0xac>
 80097aa:	4b92      	ldr	r3, [pc, #584]	; (80099f4 <_dtoa_r+0x2dc>)
 80097ac:	e022      	b.n	80097f4 <_dtoa_r+0xdc>
 80097ae:	4b92      	ldr	r3, [pc, #584]	; (80099f8 <_dtoa_r+0x2e0>)
 80097b0:	9301      	str	r3, [sp, #4]
 80097b2:	3308      	adds	r3, #8
 80097b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	9801      	ldr	r0, [sp, #4]
 80097ba:	b013      	add	sp, #76	; 0x4c
 80097bc:	ecbd 8b04 	vpop	{d8-d9}
 80097c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c4:	4b8b      	ldr	r3, [pc, #556]	; (80099f4 <_dtoa_r+0x2dc>)
 80097c6:	9301      	str	r3, [sp, #4]
 80097c8:	3303      	adds	r3, #3
 80097ca:	e7f3      	b.n	80097b4 <_dtoa_r+0x9c>
 80097cc:	2200      	movs	r2, #0
 80097ce:	2300      	movs	r3, #0
 80097d0:	4650      	mov	r0, sl
 80097d2:	4659      	mov	r1, fp
 80097d4:	f7f7 f978 	bl	8000ac8 <__aeabi_dcmpeq>
 80097d8:	ec4b ab19 	vmov	d9, sl, fp
 80097dc:	4680      	mov	r8, r0
 80097de:	b158      	cbz	r0, 80097f8 <_dtoa_r+0xe0>
 80097e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097e2:	2301      	movs	r3, #1
 80097e4:	6013      	str	r3, [r2, #0]
 80097e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 856b 	beq.w	800a2c4 <_dtoa_r+0xbac>
 80097ee:	4883      	ldr	r0, [pc, #524]	; (80099fc <_dtoa_r+0x2e4>)
 80097f0:	6018      	str	r0, [r3, #0]
 80097f2:	1e43      	subs	r3, r0, #1
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	e7df      	b.n	80097b8 <_dtoa_r+0xa0>
 80097f8:	ec4b ab10 	vmov	d0, sl, fp
 80097fc:	aa10      	add	r2, sp, #64	; 0x40
 80097fe:	a911      	add	r1, sp, #68	; 0x44
 8009800:	4620      	mov	r0, r4
 8009802:	f001 f8ab 	bl	800a95c <__d2b>
 8009806:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800980a:	ee08 0a10 	vmov	s16, r0
 800980e:	2d00      	cmp	r5, #0
 8009810:	f000 8084 	beq.w	800991c <_dtoa_r+0x204>
 8009814:	ee19 3a90 	vmov	r3, s19
 8009818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800981c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009820:	4656      	mov	r6, sl
 8009822:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800982a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800982e:	4b74      	ldr	r3, [pc, #464]	; (8009a00 <_dtoa_r+0x2e8>)
 8009830:	2200      	movs	r2, #0
 8009832:	4630      	mov	r0, r6
 8009834:	4639      	mov	r1, r7
 8009836:	f7f6 fd27 	bl	8000288 <__aeabi_dsub>
 800983a:	a365      	add	r3, pc, #404	; (adr r3, 80099d0 <_dtoa_r+0x2b8>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	f7f6 feda 	bl	80005f8 <__aeabi_dmul>
 8009844:	a364      	add	r3, pc, #400	; (adr r3, 80099d8 <_dtoa_r+0x2c0>)
 8009846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984a:	f7f6 fd1f 	bl	800028c <__adddf3>
 800984e:	4606      	mov	r6, r0
 8009850:	4628      	mov	r0, r5
 8009852:	460f      	mov	r7, r1
 8009854:	f7f6 fe66 	bl	8000524 <__aeabi_i2d>
 8009858:	a361      	add	r3, pc, #388	; (adr r3, 80099e0 <_dtoa_r+0x2c8>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fecb 	bl	80005f8 <__aeabi_dmul>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4630      	mov	r0, r6
 8009868:	4639      	mov	r1, r7
 800986a:	f7f6 fd0f 	bl	800028c <__adddf3>
 800986e:	4606      	mov	r6, r0
 8009870:	460f      	mov	r7, r1
 8009872:	f7f7 f971 	bl	8000b58 <__aeabi_d2iz>
 8009876:	2200      	movs	r2, #0
 8009878:	9000      	str	r0, [sp, #0]
 800987a:	2300      	movs	r3, #0
 800987c:	4630      	mov	r0, r6
 800987e:	4639      	mov	r1, r7
 8009880:	f7f7 f92c 	bl	8000adc <__aeabi_dcmplt>
 8009884:	b150      	cbz	r0, 800989c <_dtoa_r+0x184>
 8009886:	9800      	ldr	r0, [sp, #0]
 8009888:	f7f6 fe4c 	bl	8000524 <__aeabi_i2d>
 800988c:	4632      	mov	r2, r6
 800988e:	463b      	mov	r3, r7
 8009890:	f7f7 f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009894:	b910      	cbnz	r0, 800989c <_dtoa_r+0x184>
 8009896:	9b00      	ldr	r3, [sp, #0]
 8009898:	3b01      	subs	r3, #1
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	9b00      	ldr	r3, [sp, #0]
 800989e:	2b16      	cmp	r3, #22
 80098a0:	d85a      	bhi.n	8009958 <_dtoa_r+0x240>
 80098a2:	9a00      	ldr	r2, [sp, #0]
 80098a4:	4b57      	ldr	r3, [pc, #348]	; (8009a04 <_dtoa_r+0x2ec>)
 80098a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	ec51 0b19 	vmov	r0, r1, d9
 80098b2:	f7f7 f913 	bl	8000adc <__aeabi_dcmplt>
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d050      	beq.n	800995c <_dtoa_r+0x244>
 80098ba:	9b00      	ldr	r3, [sp, #0]
 80098bc:	3b01      	subs	r3, #1
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	2300      	movs	r3, #0
 80098c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80098c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098c6:	1b5d      	subs	r5, r3, r5
 80098c8:	1e6b      	subs	r3, r5, #1
 80098ca:	9305      	str	r3, [sp, #20]
 80098cc:	bf45      	ittet	mi
 80098ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80098d2:	9304      	strmi	r3, [sp, #16]
 80098d4:	2300      	movpl	r3, #0
 80098d6:	2300      	movmi	r3, #0
 80098d8:	bf4c      	ite	mi
 80098da:	9305      	strmi	r3, [sp, #20]
 80098dc:	9304      	strpl	r3, [sp, #16]
 80098de:	9b00      	ldr	r3, [sp, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	db3d      	blt.n	8009960 <_dtoa_r+0x248>
 80098e4:	9b05      	ldr	r3, [sp, #20]
 80098e6:	9a00      	ldr	r2, [sp, #0]
 80098e8:	920a      	str	r2, [sp, #40]	; 0x28
 80098ea:	4413      	add	r3, r2
 80098ec:	9305      	str	r3, [sp, #20]
 80098ee:	2300      	movs	r3, #0
 80098f0:	9307      	str	r3, [sp, #28]
 80098f2:	9b06      	ldr	r3, [sp, #24]
 80098f4:	2b09      	cmp	r3, #9
 80098f6:	f200 8089 	bhi.w	8009a0c <_dtoa_r+0x2f4>
 80098fa:	2b05      	cmp	r3, #5
 80098fc:	bfc4      	itt	gt
 80098fe:	3b04      	subgt	r3, #4
 8009900:	9306      	strgt	r3, [sp, #24]
 8009902:	9b06      	ldr	r3, [sp, #24]
 8009904:	f1a3 0302 	sub.w	r3, r3, #2
 8009908:	bfcc      	ite	gt
 800990a:	2500      	movgt	r5, #0
 800990c:	2501      	movle	r5, #1
 800990e:	2b03      	cmp	r3, #3
 8009910:	f200 8087 	bhi.w	8009a22 <_dtoa_r+0x30a>
 8009914:	e8df f003 	tbb	[pc, r3]
 8009918:	59383a2d 	.word	0x59383a2d
 800991c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009920:	441d      	add	r5, r3
 8009922:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009926:	2b20      	cmp	r3, #32
 8009928:	bfc1      	itttt	gt
 800992a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800992e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009932:	fa0b f303 	lslgt.w	r3, fp, r3
 8009936:	fa26 f000 	lsrgt.w	r0, r6, r0
 800993a:	bfda      	itte	le
 800993c:	f1c3 0320 	rsble	r3, r3, #32
 8009940:	fa06 f003 	lslle.w	r0, r6, r3
 8009944:	4318      	orrgt	r0, r3
 8009946:	f7f6 fddd 	bl	8000504 <__aeabi_ui2d>
 800994a:	2301      	movs	r3, #1
 800994c:	4606      	mov	r6, r0
 800994e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009952:	3d01      	subs	r5, #1
 8009954:	930e      	str	r3, [sp, #56]	; 0x38
 8009956:	e76a      	b.n	800982e <_dtoa_r+0x116>
 8009958:	2301      	movs	r3, #1
 800995a:	e7b2      	b.n	80098c2 <_dtoa_r+0x1aa>
 800995c:	900b      	str	r0, [sp, #44]	; 0x2c
 800995e:	e7b1      	b.n	80098c4 <_dtoa_r+0x1ac>
 8009960:	9b04      	ldr	r3, [sp, #16]
 8009962:	9a00      	ldr	r2, [sp, #0]
 8009964:	1a9b      	subs	r3, r3, r2
 8009966:	9304      	str	r3, [sp, #16]
 8009968:	4253      	negs	r3, r2
 800996a:	9307      	str	r3, [sp, #28]
 800996c:	2300      	movs	r3, #0
 800996e:	930a      	str	r3, [sp, #40]	; 0x28
 8009970:	e7bf      	b.n	80098f2 <_dtoa_r+0x1da>
 8009972:	2300      	movs	r3, #0
 8009974:	9308      	str	r3, [sp, #32]
 8009976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009978:	2b00      	cmp	r3, #0
 800997a:	dc55      	bgt.n	8009a28 <_dtoa_r+0x310>
 800997c:	2301      	movs	r3, #1
 800997e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009982:	461a      	mov	r2, r3
 8009984:	9209      	str	r2, [sp, #36]	; 0x24
 8009986:	e00c      	b.n	80099a2 <_dtoa_r+0x28a>
 8009988:	2301      	movs	r3, #1
 800998a:	e7f3      	b.n	8009974 <_dtoa_r+0x25c>
 800998c:	2300      	movs	r3, #0
 800998e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009990:	9308      	str	r3, [sp, #32]
 8009992:	9b00      	ldr	r3, [sp, #0]
 8009994:	4413      	add	r3, r2
 8009996:	9302      	str	r3, [sp, #8]
 8009998:	3301      	adds	r3, #1
 800999a:	2b01      	cmp	r3, #1
 800999c:	9303      	str	r3, [sp, #12]
 800999e:	bfb8      	it	lt
 80099a0:	2301      	movlt	r3, #1
 80099a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80099a4:	2200      	movs	r2, #0
 80099a6:	6042      	str	r2, [r0, #4]
 80099a8:	2204      	movs	r2, #4
 80099aa:	f102 0614 	add.w	r6, r2, #20
 80099ae:	429e      	cmp	r6, r3
 80099b0:	6841      	ldr	r1, [r0, #4]
 80099b2:	d93d      	bls.n	8009a30 <_dtoa_r+0x318>
 80099b4:	4620      	mov	r0, r4
 80099b6:	f000 fca9 	bl	800a30c <_Balloc>
 80099ba:	9001      	str	r0, [sp, #4]
 80099bc:	2800      	cmp	r0, #0
 80099be:	d13b      	bne.n	8009a38 <_dtoa_r+0x320>
 80099c0:	4b11      	ldr	r3, [pc, #68]	; (8009a08 <_dtoa_r+0x2f0>)
 80099c2:	4602      	mov	r2, r0
 80099c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099c8:	e6c0      	b.n	800974c <_dtoa_r+0x34>
 80099ca:	2301      	movs	r3, #1
 80099cc:	e7df      	b.n	800998e <_dtoa_r+0x276>
 80099ce:	bf00      	nop
 80099d0:	636f4361 	.word	0x636f4361
 80099d4:	3fd287a7 	.word	0x3fd287a7
 80099d8:	8b60c8b3 	.word	0x8b60c8b3
 80099dc:	3fc68a28 	.word	0x3fc68a28
 80099e0:	509f79fb 	.word	0x509f79fb
 80099e4:	3fd34413 	.word	0x3fd34413
 80099e8:	0800da51 	.word	0x0800da51
 80099ec:	0800da68 	.word	0x0800da68
 80099f0:	7ff00000 	.word	0x7ff00000
 80099f4:	0800da4d 	.word	0x0800da4d
 80099f8:	0800da44 	.word	0x0800da44
 80099fc:	0800da21 	.word	0x0800da21
 8009a00:	3ff80000 	.word	0x3ff80000
 8009a04:	0800db58 	.word	0x0800db58
 8009a08:	0800dac3 	.word	0x0800dac3
 8009a0c:	2501      	movs	r5, #1
 8009a0e:	2300      	movs	r3, #0
 8009a10:	9306      	str	r3, [sp, #24]
 8009a12:	9508      	str	r5, [sp, #32]
 8009a14:	f04f 33ff 	mov.w	r3, #4294967295
 8009a18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2312      	movs	r3, #18
 8009a20:	e7b0      	b.n	8009984 <_dtoa_r+0x26c>
 8009a22:	2301      	movs	r3, #1
 8009a24:	9308      	str	r3, [sp, #32]
 8009a26:	e7f5      	b.n	8009a14 <_dtoa_r+0x2fc>
 8009a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a2e:	e7b8      	b.n	80099a2 <_dtoa_r+0x28a>
 8009a30:	3101      	adds	r1, #1
 8009a32:	6041      	str	r1, [r0, #4]
 8009a34:	0052      	lsls	r2, r2, #1
 8009a36:	e7b8      	b.n	80099aa <_dtoa_r+0x292>
 8009a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a3a:	9a01      	ldr	r2, [sp, #4]
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	9b03      	ldr	r3, [sp, #12]
 8009a40:	2b0e      	cmp	r3, #14
 8009a42:	f200 809d 	bhi.w	8009b80 <_dtoa_r+0x468>
 8009a46:	2d00      	cmp	r5, #0
 8009a48:	f000 809a 	beq.w	8009b80 <_dtoa_r+0x468>
 8009a4c:	9b00      	ldr	r3, [sp, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	dd32      	ble.n	8009ab8 <_dtoa_r+0x3a0>
 8009a52:	4ab7      	ldr	r2, [pc, #732]	; (8009d30 <_dtoa_r+0x618>)
 8009a54:	f003 030f 	and.w	r3, r3, #15
 8009a58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a60:	9b00      	ldr	r3, [sp, #0]
 8009a62:	05d8      	lsls	r0, r3, #23
 8009a64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009a68:	d516      	bpl.n	8009a98 <_dtoa_r+0x380>
 8009a6a:	4bb2      	ldr	r3, [pc, #712]	; (8009d34 <_dtoa_r+0x61c>)
 8009a6c:	ec51 0b19 	vmov	r0, r1, d9
 8009a70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a74:	f7f6 feea 	bl	800084c <__aeabi_ddiv>
 8009a78:	f007 070f 	and.w	r7, r7, #15
 8009a7c:	4682      	mov	sl, r0
 8009a7e:	468b      	mov	fp, r1
 8009a80:	2503      	movs	r5, #3
 8009a82:	4eac      	ldr	r6, [pc, #688]	; (8009d34 <_dtoa_r+0x61c>)
 8009a84:	b957      	cbnz	r7, 8009a9c <_dtoa_r+0x384>
 8009a86:	4642      	mov	r2, r8
 8009a88:	464b      	mov	r3, r9
 8009a8a:	4650      	mov	r0, sl
 8009a8c:	4659      	mov	r1, fp
 8009a8e:	f7f6 fedd 	bl	800084c <__aeabi_ddiv>
 8009a92:	4682      	mov	sl, r0
 8009a94:	468b      	mov	fp, r1
 8009a96:	e028      	b.n	8009aea <_dtoa_r+0x3d2>
 8009a98:	2502      	movs	r5, #2
 8009a9a:	e7f2      	b.n	8009a82 <_dtoa_r+0x36a>
 8009a9c:	07f9      	lsls	r1, r7, #31
 8009a9e:	d508      	bpl.n	8009ab2 <_dtoa_r+0x39a>
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009aa8:	f7f6 fda6 	bl	80005f8 <__aeabi_dmul>
 8009aac:	3501      	adds	r5, #1
 8009aae:	4680      	mov	r8, r0
 8009ab0:	4689      	mov	r9, r1
 8009ab2:	107f      	asrs	r7, r7, #1
 8009ab4:	3608      	adds	r6, #8
 8009ab6:	e7e5      	b.n	8009a84 <_dtoa_r+0x36c>
 8009ab8:	f000 809b 	beq.w	8009bf2 <_dtoa_r+0x4da>
 8009abc:	9b00      	ldr	r3, [sp, #0]
 8009abe:	4f9d      	ldr	r7, [pc, #628]	; (8009d34 <_dtoa_r+0x61c>)
 8009ac0:	425e      	negs	r6, r3
 8009ac2:	4b9b      	ldr	r3, [pc, #620]	; (8009d30 <_dtoa_r+0x618>)
 8009ac4:	f006 020f 	and.w	r2, r6, #15
 8009ac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	ec51 0b19 	vmov	r0, r1, d9
 8009ad4:	f7f6 fd90 	bl	80005f8 <__aeabi_dmul>
 8009ad8:	1136      	asrs	r6, r6, #4
 8009ada:	4682      	mov	sl, r0
 8009adc:	468b      	mov	fp, r1
 8009ade:	2300      	movs	r3, #0
 8009ae0:	2502      	movs	r5, #2
 8009ae2:	2e00      	cmp	r6, #0
 8009ae4:	d17a      	bne.n	8009bdc <_dtoa_r+0x4c4>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1d3      	bne.n	8009a92 <_dtoa_r+0x37a>
 8009aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 8082 	beq.w	8009bf6 <_dtoa_r+0x4de>
 8009af2:	4b91      	ldr	r3, [pc, #580]	; (8009d38 <_dtoa_r+0x620>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	4650      	mov	r0, sl
 8009af8:	4659      	mov	r1, fp
 8009afa:	f7f6 ffef 	bl	8000adc <__aeabi_dcmplt>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d079      	beq.n	8009bf6 <_dtoa_r+0x4de>
 8009b02:	9b03      	ldr	r3, [sp, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d076      	beq.n	8009bf6 <_dtoa_r+0x4de>
 8009b08:	9b02      	ldr	r3, [sp, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	dd36      	ble.n	8009b7c <_dtoa_r+0x464>
 8009b0e:	9b00      	ldr	r3, [sp, #0]
 8009b10:	4650      	mov	r0, sl
 8009b12:	4659      	mov	r1, fp
 8009b14:	1e5f      	subs	r7, r3, #1
 8009b16:	2200      	movs	r2, #0
 8009b18:	4b88      	ldr	r3, [pc, #544]	; (8009d3c <_dtoa_r+0x624>)
 8009b1a:	f7f6 fd6d 	bl	80005f8 <__aeabi_dmul>
 8009b1e:	9e02      	ldr	r6, [sp, #8]
 8009b20:	4682      	mov	sl, r0
 8009b22:	468b      	mov	fp, r1
 8009b24:	3501      	adds	r5, #1
 8009b26:	4628      	mov	r0, r5
 8009b28:	f7f6 fcfc 	bl	8000524 <__aeabi_i2d>
 8009b2c:	4652      	mov	r2, sl
 8009b2e:	465b      	mov	r3, fp
 8009b30:	f7f6 fd62 	bl	80005f8 <__aeabi_dmul>
 8009b34:	4b82      	ldr	r3, [pc, #520]	; (8009d40 <_dtoa_r+0x628>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	f7f6 fba8 	bl	800028c <__adddf3>
 8009b3c:	46d0      	mov	r8, sl
 8009b3e:	46d9      	mov	r9, fp
 8009b40:	4682      	mov	sl, r0
 8009b42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009b46:	2e00      	cmp	r6, #0
 8009b48:	d158      	bne.n	8009bfc <_dtoa_r+0x4e4>
 8009b4a:	4b7e      	ldr	r3, [pc, #504]	; (8009d44 <_dtoa_r+0x62c>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	4640      	mov	r0, r8
 8009b50:	4649      	mov	r1, r9
 8009b52:	f7f6 fb99 	bl	8000288 <__aeabi_dsub>
 8009b56:	4652      	mov	r2, sl
 8009b58:	465b      	mov	r3, fp
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	4689      	mov	r9, r1
 8009b5e:	f7f6 ffdb 	bl	8000b18 <__aeabi_dcmpgt>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	f040 8295 	bne.w	800a092 <_dtoa_r+0x97a>
 8009b68:	4652      	mov	r2, sl
 8009b6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b6e:	4640      	mov	r0, r8
 8009b70:	4649      	mov	r1, r9
 8009b72:	f7f6 ffb3 	bl	8000adc <__aeabi_dcmplt>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	f040 8289 	bne.w	800a08e <_dtoa_r+0x976>
 8009b7c:	ec5b ab19 	vmov	sl, fp, d9
 8009b80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f2c0 8148 	blt.w	8009e18 <_dtoa_r+0x700>
 8009b88:	9a00      	ldr	r2, [sp, #0]
 8009b8a:	2a0e      	cmp	r2, #14
 8009b8c:	f300 8144 	bgt.w	8009e18 <_dtoa_r+0x700>
 8009b90:	4b67      	ldr	r3, [pc, #412]	; (8009d30 <_dtoa_r+0x618>)
 8009b92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f280 80d5 	bge.w	8009d4c <_dtoa_r+0x634>
 8009ba2:	9b03      	ldr	r3, [sp, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f300 80d1 	bgt.w	8009d4c <_dtoa_r+0x634>
 8009baa:	f040 826f 	bne.w	800a08c <_dtoa_r+0x974>
 8009bae:	4b65      	ldr	r3, [pc, #404]	; (8009d44 <_dtoa_r+0x62c>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	4640      	mov	r0, r8
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	f7f6 fd1f 	bl	80005f8 <__aeabi_dmul>
 8009bba:	4652      	mov	r2, sl
 8009bbc:	465b      	mov	r3, fp
 8009bbe:	f7f6 ffa1 	bl	8000b04 <__aeabi_dcmpge>
 8009bc2:	9e03      	ldr	r6, [sp, #12]
 8009bc4:	4637      	mov	r7, r6
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	f040 8245 	bne.w	800a056 <_dtoa_r+0x93e>
 8009bcc:	9d01      	ldr	r5, [sp, #4]
 8009bce:	2331      	movs	r3, #49	; 0x31
 8009bd0:	f805 3b01 	strb.w	r3, [r5], #1
 8009bd4:	9b00      	ldr	r3, [sp, #0]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	e240      	b.n	800a05e <_dtoa_r+0x946>
 8009bdc:	07f2      	lsls	r2, r6, #31
 8009bde:	d505      	bpl.n	8009bec <_dtoa_r+0x4d4>
 8009be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009be4:	f7f6 fd08 	bl	80005f8 <__aeabi_dmul>
 8009be8:	3501      	adds	r5, #1
 8009bea:	2301      	movs	r3, #1
 8009bec:	1076      	asrs	r6, r6, #1
 8009bee:	3708      	adds	r7, #8
 8009bf0:	e777      	b.n	8009ae2 <_dtoa_r+0x3ca>
 8009bf2:	2502      	movs	r5, #2
 8009bf4:	e779      	b.n	8009aea <_dtoa_r+0x3d2>
 8009bf6:	9f00      	ldr	r7, [sp, #0]
 8009bf8:	9e03      	ldr	r6, [sp, #12]
 8009bfa:	e794      	b.n	8009b26 <_dtoa_r+0x40e>
 8009bfc:	9901      	ldr	r1, [sp, #4]
 8009bfe:	4b4c      	ldr	r3, [pc, #304]	; (8009d30 <_dtoa_r+0x618>)
 8009c00:	4431      	add	r1, r6
 8009c02:	910d      	str	r1, [sp, #52]	; 0x34
 8009c04:	9908      	ldr	r1, [sp, #32]
 8009c06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009c0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c0e:	2900      	cmp	r1, #0
 8009c10:	d043      	beq.n	8009c9a <_dtoa_r+0x582>
 8009c12:	494d      	ldr	r1, [pc, #308]	; (8009d48 <_dtoa_r+0x630>)
 8009c14:	2000      	movs	r0, #0
 8009c16:	f7f6 fe19 	bl	800084c <__aeabi_ddiv>
 8009c1a:	4652      	mov	r2, sl
 8009c1c:	465b      	mov	r3, fp
 8009c1e:	f7f6 fb33 	bl	8000288 <__aeabi_dsub>
 8009c22:	9d01      	ldr	r5, [sp, #4]
 8009c24:	4682      	mov	sl, r0
 8009c26:	468b      	mov	fp, r1
 8009c28:	4649      	mov	r1, r9
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	f7f6 ff94 	bl	8000b58 <__aeabi_d2iz>
 8009c30:	4606      	mov	r6, r0
 8009c32:	f7f6 fc77 	bl	8000524 <__aeabi_i2d>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	f7f6 fb23 	bl	8000288 <__aeabi_dsub>
 8009c42:	3630      	adds	r6, #48	; 0x30
 8009c44:	f805 6b01 	strb.w	r6, [r5], #1
 8009c48:	4652      	mov	r2, sl
 8009c4a:	465b      	mov	r3, fp
 8009c4c:	4680      	mov	r8, r0
 8009c4e:	4689      	mov	r9, r1
 8009c50:	f7f6 ff44 	bl	8000adc <__aeabi_dcmplt>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d163      	bne.n	8009d20 <_dtoa_r+0x608>
 8009c58:	4642      	mov	r2, r8
 8009c5a:	464b      	mov	r3, r9
 8009c5c:	4936      	ldr	r1, [pc, #216]	; (8009d38 <_dtoa_r+0x620>)
 8009c5e:	2000      	movs	r0, #0
 8009c60:	f7f6 fb12 	bl	8000288 <__aeabi_dsub>
 8009c64:	4652      	mov	r2, sl
 8009c66:	465b      	mov	r3, fp
 8009c68:	f7f6 ff38 	bl	8000adc <__aeabi_dcmplt>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	f040 80b5 	bne.w	8009ddc <_dtoa_r+0x6c4>
 8009c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c74:	429d      	cmp	r5, r3
 8009c76:	d081      	beq.n	8009b7c <_dtoa_r+0x464>
 8009c78:	4b30      	ldr	r3, [pc, #192]	; (8009d3c <_dtoa_r+0x624>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	4650      	mov	r0, sl
 8009c7e:	4659      	mov	r1, fp
 8009c80:	f7f6 fcba 	bl	80005f8 <__aeabi_dmul>
 8009c84:	4b2d      	ldr	r3, [pc, #180]	; (8009d3c <_dtoa_r+0x624>)
 8009c86:	4682      	mov	sl, r0
 8009c88:	468b      	mov	fp, r1
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f7f6 fcb2 	bl	80005f8 <__aeabi_dmul>
 8009c94:	4680      	mov	r8, r0
 8009c96:	4689      	mov	r9, r1
 8009c98:	e7c6      	b.n	8009c28 <_dtoa_r+0x510>
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	4659      	mov	r1, fp
 8009c9e:	f7f6 fcab 	bl	80005f8 <__aeabi_dmul>
 8009ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ca4:	9d01      	ldr	r5, [sp, #4]
 8009ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ca8:	4682      	mov	sl, r0
 8009caa:	468b      	mov	fp, r1
 8009cac:	4649      	mov	r1, r9
 8009cae:	4640      	mov	r0, r8
 8009cb0:	f7f6 ff52 	bl	8000b58 <__aeabi_d2iz>
 8009cb4:	4606      	mov	r6, r0
 8009cb6:	f7f6 fc35 	bl	8000524 <__aeabi_i2d>
 8009cba:	3630      	adds	r6, #48	; 0x30
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	f7f6 fae0 	bl	8000288 <__aeabi_dsub>
 8009cc8:	f805 6b01 	strb.w	r6, [r5], #1
 8009ccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cce:	429d      	cmp	r5, r3
 8009cd0:	4680      	mov	r8, r0
 8009cd2:	4689      	mov	r9, r1
 8009cd4:	f04f 0200 	mov.w	r2, #0
 8009cd8:	d124      	bne.n	8009d24 <_dtoa_r+0x60c>
 8009cda:	4b1b      	ldr	r3, [pc, #108]	; (8009d48 <_dtoa_r+0x630>)
 8009cdc:	4650      	mov	r0, sl
 8009cde:	4659      	mov	r1, fp
 8009ce0:	f7f6 fad4 	bl	800028c <__adddf3>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4640      	mov	r0, r8
 8009cea:	4649      	mov	r1, r9
 8009cec:	f7f6 ff14 	bl	8000b18 <__aeabi_dcmpgt>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d173      	bne.n	8009ddc <_dtoa_r+0x6c4>
 8009cf4:	4652      	mov	r2, sl
 8009cf6:	465b      	mov	r3, fp
 8009cf8:	4913      	ldr	r1, [pc, #76]	; (8009d48 <_dtoa_r+0x630>)
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	f7f6 fac4 	bl	8000288 <__aeabi_dsub>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4640      	mov	r0, r8
 8009d06:	4649      	mov	r1, r9
 8009d08:	f7f6 fee8 	bl	8000adc <__aeabi_dcmplt>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	f43f af35 	beq.w	8009b7c <_dtoa_r+0x464>
 8009d12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009d14:	1e6b      	subs	r3, r5, #1
 8009d16:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d1c:	2b30      	cmp	r3, #48	; 0x30
 8009d1e:	d0f8      	beq.n	8009d12 <_dtoa_r+0x5fa>
 8009d20:	9700      	str	r7, [sp, #0]
 8009d22:	e049      	b.n	8009db8 <_dtoa_r+0x6a0>
 8009d24:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <_dtoa_r+0x624>)
 8009d26:	f7f6 fc67 	bl	80005f8 <__aeabi_dmul>
 8009d2a:	4680      	mov	r8, r0
 8009d2c:	4689      	mov	r9, r1
 8009d2e:	e7bd      	b.n	8009cac <_dtoa_r+0x594>
 8009d30:	0800db58 	.word	0x0800db58
 8009d34:	0800db30 	.word	0x0800db30
 8009d38:	3ff00000 	.word	0x3ff00000
 8009d3c:	40240000 	.word	0x40240000
 8009d40:	401c0000 	.word	0x401c0000
 8009d44:	40140000 	.word	0x40140000
 8009d48:	3fe00000 	.word	0x3fe00000
 8009d4c:	9d01      	ldr	r5, [sp, #4]
 8009d4e:	4656      	mov	r6, sl
 8009d50:	465f      	mov	r7, fp
 8009d52:	4642      	mov	r2, r8
 8009d54:	464b      	mov	r3, r9
 8009d56:	4630      	mov	r0, r6
 8009d58:	4639      	mov	r1, r7
 8009d5a:	f7f6 fd77 	bl	800084c <__aeabi_ddiv>
 8009d5e:	f7f6 fefb 	bl	8000b58 <__aeabi_d2iz>
 8009d62:	4682      	mov	sl, r0
 8009d64:	f7f6 fbde 	bl	8000524 <__aeabi_i2d>
 8009d68:	4642      	mov	r2, r8
 8009d6a:	464b      	mov	r3, r9
 8009d6c:	f7f6 fc44 	bl	80005f8 <__aeabi_dmul>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	4630      	mov	r0, r6
 8009d76:	4639      	mov	r1, r7
 8009d78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009d7c:	f7f6 fa84 	bl	8000288 <__aeabi_dsub>
 8009d80:	f805 6b01 	strb.w	r6, [r5], #1
 8009d84:	9e01      	ldr	r6, [sp, #4]
 8009d86:	9f03      	ldr	r7, [sp, #12]
 8009d88:	1bae      	subs	r6, r5, r6
 8009d8a:	42b7      	cmp	r7, r6
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	d135      	bne.n	8009dfe <_dtoa_r+0x6e6>
 8009d92:	f7f6 fa7b 	bl	800028c <__adddf3>
 8009d96:	4642      	mov	r2, r8
 8009d98:	464b      	mov	r3, r9
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	f7f6 febb 	bl	8000b18 <__aeabi_dcmpgt>
 8009da2:	b9d0      	cbnz	r0, 8009dda <_dtoa_r+0x6c2>
 8009da4:	4642      	mov	r2, r8
 8009da6:	464b      	mov	r3, r9
 8009da8:	4630      	mov	r0, r6
 8009daa:	4639      	mov	r1, r7
 8009dac:	f7f6 fe8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009db0:	b110      	cbz	r0, 8009db8 <_dtoa_r+0x6a0>
 8009db2:	f01a 0f01 	tst.w	sl, #1
 8009db6:	d110      	bne.n	8009dda <_dtoa_r+0x6c2>
 8009db8:	4620      	mov	r0, r4
 8009dba:	ee18 1a10 	vmov	r1, s16
 8009dbe:	f000 fae5 	bl	800a38c <_Bfree>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	9800      	ldr	r0, [sp, #0]
 8009dc6:	702b      	strb	r3, [r5, #0]
 8009dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dca:	3001      	adds	r0, #1
 8009dcc:	6018      	str	r0, [r3, #0]
 8009dce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f43f acf1 	beq.w	80097b8 <_dtoa_r+0xa0>
 8009dd6:	601d      	str	r5, [r3, #0]
 8009dd8:	e4ee      	b.n	80097b8 <_dtoa_r+0xa0>
 8009dda:	9f00      	ldr	r7, [sp, #0]
 8009ddc:	462b      	mov	r3, r5
 8009dde:	461d      	mov	r5, r3
 8009de0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009de4:	2a39      	cmp	r2, #57	; 0x39
 8009de6:	d106      	bne.n	8009df6 <_dtoa_r+0x6de>
 8009de8:	9a01      	ldr	r2, [sp, #4]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d1f7      	bne.n	8009dde <_dtoa_r+0x6c6>
 8009dee:	9901      	ldr	r1, [sp, #4]
 8009df0:	2230      	movs	r2, #48	; 0x30
 8009df2:	3701      	adds	r7, #1
 8009df4:	700a      	strb	r2, [r1, #0]
 8009df6:	781a      	ldrb	r2, [r3, #0]
 8009df8:	3201      	adds	r2, #1
 8009dfa:	701a      	strb	r2, [r3, #0]
 8009dfc:	e790      	b.n	8009d20 <_dtoa_r+0x608>
 8009dfe:	4ba6      	ldr	r3, [pc, #664]	; (800a098 <_dtoa_r+0x980>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	f7f6 fbf9 	bl	80005f8 <__aeabi_dmul>
 8009e06:	2200      	movs	r2, #0
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	460f      	mov	r7, r1
 8009e0e:	f7f6 fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	d09d      	beq.n	8009d52 <_dtoa_r+0x63a>
 8009e16:	e7cf      	b.n	8009db8 <_dtoa_r+0x6a0>
 8009e18:	9a08      	ldr	r2, [sp, #32]
 8009e1a:	2a00      	cmp	r2, #0
 8009e1c:	f000 80d7 	beq.w	8009fce <_dtoa_r+0x8b6>
 8009e20:	9a06      	ldr	r2, [sp, #24]
 8009e22:	2a01      	cmp	r2, #1
 8009e24:	f300 80ba 	bgt.w	8009f9c <_dtoa_r+0x884>
 8009e28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e2a:	2a00      	cmp	r2, #0
 8009e2c:	f000 80b2 	beq.w	8009f94 <_dtoa_r+0x87c>
 8009e30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e34:	9e07      	ldr	r6, [sp, #28]
 8009e36:	9d04      	ldr	r5, [sp, #16]
 8009e38:	9a04      	ldr	r2, [sp, #16]
 8009e3a:	441a      	add	r2, r3
 8009e3c:	9204      	str	r2, [sp, #16]
 8009e3e:	9a05      	ldr	r2, [sp, #20]
 8009e40:	2101      	movs	r1, #1
 8009e42:	441a      	add	r2, r3
 8009e44:	4620      	mov	r0, r4
 8009e46:	9205      	str	r2, [sp, #20]
 8009e48:	f000 fb58 	bl	800a4fc <__i2b>
 8009e4c:	4607      	mov	r7, r0
 8009e4e:	2d00      	cmp	r5, #0
 8009e50:	dd0c      	ble.n	8009e6c <_dtoa_r+0x754>
 8009e52:	9b05      	ldr	r3, [sp, #20]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	dd09      	ble.n	8009e6c <_dtoa_r+0x754>
 8009e58:	42ab      	cmp	r3, r5
 8009e5a:	9a04      	ldr	r2, [sp, #16]
 8009e5c:	bfa8      	it	ge
 8009e5e:	462b      	movge	r3, r5
 8009e60:	1ad2      	subs	r2, r2, r3
 8009e62:	9204      	str	r2, [sp, #16]
 8009e64:	9a05      	ldr	r2, [sp, #20]
 8009e66:	1aed      	subs	r5, r5, r3
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	9305      	str	r3, [sp, #20]
 8009e6c:	9b07      	ldr	r3, [sp, #28]
 8009e6e:	b31b      	cbz	r3, 8009eb8 <_dtoa_r+0x7a0>
 8009e70:	9b08      	ldr	r3, [sp, #32]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f000 80af 	beq.w	8009fd6 <_dtoa_r+0x8be>
 8009e78:	2e00      	cmp	r6, #0
 8009e7a:	dd13      	ble.n	8009ea4 <_dtoa_r+0x78c>
 8009e7c:	4639      	mov	r1, r7
 8009e7e:	4632      	mov	r2, r6
 8009e80:	4620      	mov	r0, r4
 8009e82:	f000 fbfb 	bl	800a67c <__pow5mult>
 8009e86:	ee18 2a10 	vmov	r2, s16
 8009e8a:	4601      	mov	r1, r0
 8009e8c:	4607      	mov	r7, r0
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f000 fb4a 	bl	800a528 <__multiply>
 8009e94:	ee18 1a10 	vmov	r1, s16
 8009e98:	4680      	mov	r8, r0
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f000 fa76 	bl	800a38c <_Bfree>
 8009ea0:	ee08 8a10 	vmov	s16, r8
 8009ea4:	9b07      	ldr	r3, [sp, #28]
 8009ea6:	1b9a      	subs	r2, r3, r6
 8009ea8:	d006      	beq.n	8009eb8 <_dtoa_r+0x7a0>
 8009eaa:	ee18 1a10 	vmov	r1, s16
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f000 fbe4 	bl	800a67c <__pow5mult>
 8009eb4:	ee08 0a10 	vmov	s16, r0
 8009eb8:	2101      	movs	r1, #1
 8009eba:	4620      	mov	r0, r4
 8009ebc:	f000 fb1e 	bl	800a4fc <__i2b>
 8009ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	f340 8088 	ble.w	8009fda <_dtoa_r+0x8c2>
 8009eca:	461a      	mov	r2, r3
 8009ecc:	4601      	mov	r1, r0
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f000 fbd4 	bl	800a67c <__pow5mult>
 8009ed4:	9b06      	ldr	r3, [sp, #24]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	4606      	mov	r6, r0
 8009eda:	f340 8081 	ble.w	8009fe0 <_dtoa_r+0x8c8>
 8009ede:	f04f 0800 	mov.w	r8, #0
 8009ee2:	6933      	ldr	r3, [r6, #16]
 8009ee4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ee8:	6918      	ldr	r0, [r3, #16]
 8009eea:	f000 fab7 	bl	800a45c <__hi0bits>
 8009eee:	f1c0 0020 	rsb	r0, r0, #32
 8009ef2:	9b05      	ldr	r3, [sp, #20]
 8009ef4:	4418      	add	r0, r3
 8009ef6:	f010 001f 	ands.w	r0, r0, #31
 8009efa:	f000 8092 	beq.w	800a022 <_dtoa_r+0x90a>
 8009efe:	f1c0 0320 	rsb	r3, r0, #32
 8009f02:	2b04      	cmp	r3, #4
 8009f04:	f340 808a 	ble.w	800a01c <_dtoa_r+0x904>
 8009f08:	f1c0 001c 	rsb	r0, r0, #28
 8009f0c:	9b04      	ldr	r3, [sp, #16]
 8009f0e:	4403      	add	r3, r0
 8009f10:	9304      	str	r3, [sp, #16]
 8009f12:	9b05      	ldr	r3, [sp, #20]
 8009f14:	4403      	add	r3, r0
 8009f16:	4405      	add	r5, r0
 8009f18:	9305      	str	r3, [sp, #20]
 8009f1a:	9b04      	ldr	r3, [sp, #16]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	dd07      	ble.n	8009f30 <_dtoa_r+0x818>
 8009f20:	ee18 1a10 	vmov	r1, s16
 8009f24:	461a      	mov	r2, r3
 8009f26:	4620      	mov	r0, r4
 8009f28:	f000 fc02 	bl	800a730 <__lshift>
 8009f2c:	ee08 0a10 	vmov	s16, r0
 8009f30:	9b05      	ldr	r3, [sp, #20]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	dd05      	ble.n	8009f42 <_dtoa_r+0x82a>
 8009f36:	4631      	mov	r1, r6
 8009f38:	461a      	mov	r2, r3
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 fbf8 	bl	800a730 <__lshift>
 8009f40:	4606      	mov	r6, r0
 8009f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d06e      	beq.n	800a026 <_dtoa_r+0x90e>
 8009f48:	ee18 0a10 	vmov	r0, s16
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	f000 fc5f 	bl	800a810 <__mcmp>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	da67      	bge.n	800a026 <_dtoa_r+0x90e>
 8009f56:	9b00      	ldr	r3, [sp, #0]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	ee18 1a10 	vmov	r1, s16
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	220a      	movs	r2, #10
 8009f62:	2300      	movs	r3, #0
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 fa33 	bl	800a3d0 <__multadd>
 8009f6a:	9b08      	ldr	r3, [sp, #32]
 8009f6c:	ee08 0a10 	vmov	s16, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 81b1 	beq.w	800a2d8 <_dtoa_r+0xbc0>
 8009f76:	2300      	movs	r3, #0
 8009f78:	4639      	mov	r1, r7
 8009f7a:	220a      	movs	r2, #10
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f000 fa27 	bl	800a3d0 <__multadd>
 8009f82:	9b02      	ldr	r3, [sp, #8]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	4607      	mov	r7, r0
 8009f88:	f300 808e 	bgt.w	800a0a8 <_dtoa_r+0x990>
 8009f8c:	9b06      	ldr	r3, [sp, #24]
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	dc51      	bgt.n	800a036 <_dtoa_r+0x91e>
 8009f92:	e089      	b.n	800a0a8 <_dtoa_r+0x990>
 8009f94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f9a:	e74b      	b.n	8009e34 <_dtoa_r+0x71c>
 8009f9c:	9b03      	ldr	r3, [sp, #12]
 8009f9e:	1e5e      	subs	r6, r3, #1
 8009fa0:	9b07      	ldr	r3, [sp, #28]
 8009fa2:	42b3      	cmp	r3, r6
 8009fa4:	bfbf      	itttt	lt
 8009fa6:	9b07      	ldrlt	r3, [sp, #28]
 8009fa8:	9607      	strlt	r6, [sp, #28]
 8009faa:	1af2      	sublt	r2, r6, r3
 8009fac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009fae:	bfb6      	itet	lt
 8009fb0:	189b      	addlt	r3, r3, r2
 8009fb2:	1b9e      	subge	r6, r3, r6
 8009fb4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009fb6:	9b03      	ldr	r3, [sp, #12]
 8009fb8:	bfb8      	it	lt
 8009fba:	2600      	movlt	r6, #0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bfb7      	itett	lt
 8009fc0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009fc4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009fc8:	1a9d      	sublt	r5, r3, r2
 8009fca:	2300      	movlt	r3, #0
 8009fcc:	e734      	b.n	8009e38 <_dtoa_r+0x720>
 8009fce:	9e07      	ldr	r6, [sp, #28]
 8009fd0:	9d04      	ldr	r5, [sp, #16]
 8009fd2:	9f08      	ldr	r7, [sp, #32]
 8009fd4:	e73b      	b.n	8009e4e <_dtoa_r+0x736>
 8009fd6:	9a07      	ldr	r2, [sp, #28]
 8009fd8:	e767      	b.n	8009eaa <_dtoa_r+0x792>
 8009fda:	9b06      	ldr	r3, [sp, #24]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	dc18      	bgt.n	800a012 <_dtoa_r+0x8fa>
 8009fe0:	f1ba 0f00 	cmp.w	sl, #0
 8009fe4:	d115      	bne.n	800a012 <_dtoa_r+0x8fa>
 8009fe6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fea:	b993      	cbnz	r3, 800a012 <_dtoa_r+0x8fa>
 8009fec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ff0:	0d1b      	lsrs	r3, r3, #20
 8009ff2:	051b      	lsls	r3, r3, #20
 8009ff4:	b183      	cbz	r3, 800a018 <_dtoa_r+0x900>
 8009ff6:	9b04      	ldr	r3, [sp, #16]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	9304      	str	r3, [sp, #16]
 8009ffc:	9b05      	ldr	r3, [sp, #20]
 8009ffe:	3301      	adds	r3, #1
 800a000:	9305      	str	r3, [sp, #20]
 800a002:	f04f 0801 	mov.w	r8, #1
 800a006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f47f af6a 	bne.w	8009ee2 <_dtoa_r+0x7ca>
 800a00e:	2001      	movs	r0, #1
 800a010:	e76f      	b.n	8009ef2 <_dtoa_r+0x7da>
 800a012:	f04f 0800 	mov.w	r8, #0
 800a016:	e7f6      	b.n	800a006 <_dtoa_r+0x8ee>
 800a018:	4698      	mov	r8, r3
 800a01a:	e7f4      	b.n	800a006 <_dtoa_r+0x8ee>
 800a01c:	f43f af7d 	beq.w	8009f1a <_dtoa_r+0x802>
 800a020:	4618      	mov	r0, r3
 800a022:	301c      	adds	r0, #28
 800a024:	e772      	b.n	8009f0c <_dtoa_r+0x7f4>
 800a026:	9b03      	ldr	r3, [sp, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	dc37      	bgt.n	800a09c <_dtoa_r+0x984>
 800a02c:	9b06      	ldr	r3, [sp, #24]
 800a02e:	2b02      	cmp	r3, #2
 800a030:	dd34      	ble.n	800a09c <_dtoa_r+0x984>
 800a032:	9b03      	ldr	r3, [sp, #12]
 800a034:	9302      	str	r3, [sp, #8]
 800a036:	9b02      	ldr	r3, [sp, #8]
 800a038:	b96b      	cbnz	r3, 800a056 <_dtoa_r+0x93e>
 800a03a:	4631      	mov	r1, r6
 800a03c:	2205      	movs	r2, #5
 800a03e:	4620      	mov	r0, r4
 800a040:	f000 f9c6 	bl	800a3d0 <__multadd>
 800a044:	4601      	mov	r1, r0
 800a046:	4606      	mov	r6, r0
 800a048:	ee18 0a10 	vmov	r0, s16
 800a04c:	f000 fbe0 	bl	800a810 <__mcmp>
 800a050:	2800      	cmp	r0, #0
 800a052:	f73f adbb 	bgt.w	8009bcc <_dtoa_r+0x4b4>
 800a056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a058:	9d01      	ldr	r5, [sp, #4]
 800a05a:	43db      	mvns	r3, r3
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	f04f 0800 	mov.w	r8, #0
 800a062:	4631      	mov	r1, r6
 800a064:	4620      	mov	r0, r4
 800a066:	f000 f991 	bl	800a38c <_Bfree>
 800a06a:	2f00      	cmp	r7, #0
 800a06c:	f43f aea4 	beq.w	8009db8 <_dtoa_r+0x6a0>
 800a070:	f1b8 0f00 	cmp.w	r8, #0
 800a074:	d005      	beq.n	800a082 <_dtoa_r+0x96a>
 800a076:	45b8      	cmp	r8, r7
 800a078:	d003      	beq.n	800a082 <_dtoa_r+0x96a>
 800a07a:	4641      	mov	r1, r8
 800a07c:	4620      	mov	r0, r4
 800a07e:	f000 f985 	bl	800a38c <_Bfree>
 800a082:	4639      	mov	r1, r7
 800a084:	4620      	mov	r0, r4
 800a086:	f000 f981 	bl	800a38c <_Bfree>
 800a08a:	e695      	b.n	8009db8 <_dtoa_r+0x6a0>
 800a08c:	2600      	movs	r6, #0
 800a08e:	4637      	mov	r7, r6
 800a090:	e7e1      	b.n	800a056 <_dtoa_r+0x93e>
 800a092:	9700      	str	r7, [sp, #0]
 800a094:	4637      	mov	r7, r6
 800a096:	e599      	b.n	8009bcc <_dtoa_r+0x4b4>
 800a098:	40240000 	.word	0x40240000
 800a09c:	9b08      	ldr	r3, [sp, #32]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 80ca 	beq.w	800a238 <_dtoa_r+0xb20>
 800a0a4:	9b03      	ldr	r3, [sp, #12]
 800a0a6:	9302      	str	r3, [sp, #8]
 800a0a8:	2d00      	cmp	r5, #0
 800a0aa:	dd05      	ble.n	800a0b8 <_dtoa_r+0x9a0>
 800a0ac:	4639      	mov	r1, r7
 800a0ae:	462a      	mov	r2, r5
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f000 fb3d 	bl	800a730 <__lshift>
 800a0b6:	4607      	mov	r7, r0
 800a0b8:	f1b8 0f00 	cmp.w	r8, #0
 800a0bc:	d05b      	beq.n	800a176 <_dtoa_r+0xa5e>
 800a0be:	6879      	ldr	r1, [r7, #4]
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f000 f923 	bl	800a30c <_Balloc>
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	b928      	cbnz	r0, 800a0d6 <_dtoa_r+0x9be>
 800a0ca:	4b87      	ldr	r3, [pc, #540]	; (800a2e8 <_dtoa_r+0xbd0>)
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a0d2:	f7ff bb3b 	b.w	800974c <_dtoa_r+0x34>
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	3202      	adds	r2, #2
 800a0da:	0092      	lsls	r2, r2, #2
 800a0dc:	f107 010c 	add.w	r1, r7, #12
 800a0e0:	300c      	adds	r0, #12
 800a0e2:	f7fe fdeb 	bl	8008cbc <memcpy>
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f000 fb20 	bl	800a730 <__lshift>
 800a0f0:	9b01      	ldr	r3, [sp, #4]
 800a0f2:	f103 0901 	add.w	r9, r3, #1
 800a0f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	9305      	str	r3, [sp, #20]
 800a0fe:	f00a 0301 	and.w	r3, sl, #1
 800a102:	46b8      	mov	r8, r7
 800a104:	9304      	str	r3, [sp, #16]
 800a106:	4607      	mov	r7, r0
 800a108:	4631      	mov	r1, r6
 800a10a:	ee18 0a10 	vmov	r0, s16
 800a10e:	f7ff fa75 	bl	80095fc <quorem>
 800a112:	4641      	mov	r1, r8
 800a114:	9002      	str	r0, [sp, #8]
 800a116:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a11a:	ee18 0a10 	vmov	r0, s16
 800a11e:	f000 fb77 	bl	800a810 <__mcmp>
 800a122:	463a      	mov	r2, r7
 800a124:	9003      	str	r0, [sp, #12]
 800a126:	4631      	mov	r1, r6
 800a128:	4620      	mov	r0, r4
 800a12a:	f000 fb8d 	bl	800a848 <__mdiff>
 800a12e:	68c2      	ldr	r2, [r0, #12]
 800a130:	f109 3bff 	add.w	fp, r9, #4294967295
 800a134:	4605      	mov	r5, r0
 800a136:	bb02      	cbnz	r2, 800a17a <_dtoa_r+0xa62>
 800a138:	4601      	mov	r1, r0
 800a13a:	ee18 0a10 	vmov	r0, s16
 800a13e:	f000 fb67 	bl	800a810 <__mcmp>
 800a142:	4602      	mov	r2, r0
 800a144:	4629      	mov	r1, r5
 800a146:	4620      	mov	r0, r4
 800a148:	9207      	str	r2, [sp, #28]
 800a14a:	f000 f91f 	bl	800a38c <_Bfree>
 800a14e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a152:	ea43 0102 	orr.w	r1, r3, r2
 800a156:	9b04      	ldr	r3, [sp, #16]
 800a158:	430b      	orrs	r3, r1
 800a15a:	464d      	mov	r5, r9
 800a15c:	d10f      	bne.n	800a17e <_dtoa_r+0xa66>
 800a15e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a162:	d02a      	beq.n	800a1ba <_dtoa_r+0xaa2>
 800a164:	9b03      	ldr	r3, [sp, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	dd02      	ble.n	800a170 <_dtoa_r+0xa58>
 800a16a:	9b02      	ldr	r3, [sp, #8]
 800a16c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a170:	f88b a000 	strb.w	sl, [fp]
 800a174:	e775      	b.n	800a062 <_dtoa_r+0x94a>
 800a176:	4638      	mov	r0, r7
 800a178:	e7ba      	b.n	800a0f0 <_dtoa_r+0x9d8>
 800a17a:	2201      	movs	r2, #1
 800a17c:	e7e2      	b.n	800a144 <_dtoa_r+0xa2c>
 800a17e:	9b03      	ldr	r3, [sp, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	db04      	blt.n	800a18e <_dtoa_r+0xa76>
 800a184:	9906      	ldr	r1, [sp, #24]
 800a186:	430b      	orrs	r3, r1
 800a188:	9904      	ldr	r1, [sp, #16]
 800a18a:	430b      	orrs	r3, r1
 800a18c:	d122      	bne.n	800a1d4 <_dtoa_r+0xabc>
 800a18e:	2a00      	cmp	r2, #0
 800a190:	ddee      	ble.n	800a170 <_dtoa_r+0xa58>
 800a192:	ee18 1a10 	vmov	r1, s16
 800a196:	2201      	movs	r2, #1
 800a198:	4620      	mov	r0, r4
 800a19a:	f000 fac9 	bl	800a730 <__lshift>
 800a19e:	4631      	mov	r1, r6
 800a1a0:	ee08 0a10 	vmov	s16, r0
 800a1a4:	f000 fb34 	bl	800a810 <__mcmp>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	dc03      	bgt.n	800a1b4 <_dtoa_r+0xa9c>
 800a1ac:	d1e0      	bne.n	800a170 <_dtoa_r+0xa58>
 800a1ae:	f01a 0f01 	tst.w	sl, #1
 800a1b2:	d0dd      	beq.n	800a170 <_dtoa_r+0xa58>
 800a1b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a1b8:	d1d7      	bne.n	800a16a <_dtoa_r+0xa52>
 800a1ba:	2339      	movs	r3, #57	; 0x39
 800a1bc:	f88b 3000 	strb.w	r3, [fp]
 800a1c0:	462b      	mov	r3, r5
 800a1c2:	461d      	mov	r5, r3
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1ca:	2a39      	cmp	r2, #57	; 0x39
 800a1cc:	d071      	beq.n	800a2b2 <_dtoa_r+0xb9a>
 800a1ce:	3201      	adds	r2, #1
 800a1d0:	701a      	strb	r2, [r3, #0]
 800a1d2:	e746      	b.n	800a062 <_dtoa_r+0x94a>
 800a1d4:	2a00      	cmp	r2, #0
 800a1d6:	dd07      	ble.n	800a1e8 <_dtoa_r+0xad0>
 800a1d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a1dc:	d0ed      	beq.n	800a1ba <_dtoa_r+0xaa2>
 800a1de:	f10a 0301 	add.w	r3, sl, #1
 800a1e2:	f88b 3000 	strb.w	r3, [fp]
 800a1e6:	e73c      	b.n	800a062 <_dtoa_r+0x94a>
 800a1e8:	9b05      	ldr	r3, [sp, #20]
 800a1ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a1ee:	4599      	cmp	r9, r3
 800a1f0:	d047      	beq.n	800a282 <_dtoa_r+0xb6a>
 800a1f2:	ee18 1a10 	vmov	r1, s16
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	220a      	movs	r2, #10
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f000 f8e8 	bl	800a3d0 <__multadd>
 800a200:	45b8      	cmp	r8, r7
 800a202:	ee08 0a10 	vmov	s16, r0
 800a206:	f04f 0300 	mov.w	r3, #0
 800a20a:	f04f 020a 	mov.w	r2, #10
 800a20e:	4641      	mov	r1, r8
 800a210:	4620      	mov	r0, r4
 800a212:	d106      	bne.n	800a222 <_dtoa_r+0xb0a>
 800a214:	f000 f8dc 	bl	800a3d0 <__multadd>
 800a218:	4680      	mov	r8, r0
 800a21a:	4607      	mov	r7, r0
 800a21c:	f109 0901 	add.w	r9, r9, #1
 800a220:	e772      	b.n	800a108 <_dtoa_r+0x9f0>
 800a222:	f000 f8d5 	bl	800a3d0 <__multadd>
 800a226:	4639      	mov	r1, r7
 800a228:	4680      	mov	r8, r0
 800a22a:	2300      	movs	r3, #0
 800a22c:	220a      	movs	r2, #10
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 f8ce 	bl	800a3d0 <__multadd>
 800a234:	4607      	mov	r7, r0
 800a236:	e7f1      	b.n	800a21c <_dtoa_r+0xb04>
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	9302      	str	r3, [sp, #8]
 800a23c:	9d01      	ldr	r5, [sp, #4]
 800a23e:	ee18 0a10 	vmov	r0, s16
 800a242:	4631      	mov	r1, r6
 800a244:	f7ff f9da 	bl	80095fc <quorem>
 800a248:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a24c:	9b01      	ldr	r3, [sp, #4]
 800a24e:	f805 ab01 	strb.w	sl, [r5], #1
 800a252:	1aea      	subs	r2, r5, r3
 800a254:	9b02      	ldr	r3, [sp, #8]
 800a256:	4293      	cmp	r3, r2
 800a258:	dd09      	ble.n	800a26e <_dtoa_r+0xb56>
 800a25a:	ee18 1a10 	vmov	r1, s16
 800a25e:	2300      	movs	r3, #0
 800a260:	220a      	movs	r2, #10
 800a262:	4620      	mov	r0, r4
 800a264:	f000 f8b4 	bl	800a3d0 <__multadd>
 800a268:	ee08 0a10 	vmov	s16, r0
 800a26c:	e7e7      	b.n	800a23e <_dtoa_r+0xb26>
 800a26e:	9b02      	ldr	r3, [sp, #8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	bfc8      	it	gt
 800a274:	461d      	movgt	r5, r3
 800a276:	9b01      	ldr	r3, [sp, #4]
 800a278:	bfd8      	it	le
 800a27a:	2501      	movle	r5, #1
 800a27c:	441d      	add	r5, r3
 800a27e:	f04f 0800 	mov.w	r8, #0
 800a282:	ee18 1a10 	vmov	r1, s16
 800a286:	2201      	movs	r2, #1
 800a288:	4620      	mov	r0, r4
 800a28a:	f000 fa51 	bl	800a730 <__lshift>
 800a28e:	4631      	mov	r1, r6
 800a290:	ee08 0a10 	vmov	s16, r0
 800a294:	f000 fabc 	bl	800a810 <__mcmp>
 800a298:	2800      	cmp	r0, #0
 800a29a:	dc91      	bgt.n	800a1c0 <_dtoa_r+0xaa8>
 800a29c:	d102      	bne.n	800a2a4 <_dtoa_r+0xb8c>
 800a29e:	f01a 0f01 	tst.w	sl, #1
 800a2a2:	d18d      	bne.n	800a1c0 <_dtoa_r+0xaa8>
 800a2a4:	462b      	mov	r3, r5
 800a2a6:	461d      	mov	r5, r3
 800a2a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2ac:	2a30      	cmp	r2, #48	; 0x30
 800a2ae:	d0fa      	beq.n	800a2a6 <_dtoa_r+0xb8e>
 800a2b0:	e6d7      	b.n	800a062 <_dtoa_r+0x94a>
 800a2b2:	9a01      	ldr	r2, [sp, #4]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d184      	bne.n	800a1c2 <_dtoa_r+0xaaa>
 800a2b8:	9b00      	ldr	r3, [sp, #0]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	2331      	movs	r3, #49	; 0x31
 800a2c0:	7013      	strb	r3, [r2, #0]
 800a2c2:	e6ce      	b.n	800a062 <_dtoa_r+0x94a>
 800a2c4:	4b09      	ldr	r3, [pc, #36]	; (800a2ec <_dtoa_r+0xbd4>)
 800a2c6:	f7ff ba95 	b.w	80097f4 <_dtoa_r+0xdc>
 800a2ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f47f aa6e 	bne.w	80097ae <_dtoa_r+0x96>
 800a2d2:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <_dtoa_r+0xbd8>)
 800a2d4:	f7ff ba8e 	b.w	80097f4 <_dtoa_r+0xdc>
 800a2d8:	9b02      	ldr	r3, [sp, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dcae      	bgt.n	800a23c <_dtoa_r+0xb24>
 800a2de:	9b06      	ldr	r3, [sp, #24]
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	f73f aea8 	bgt.w	800a036 <_dtoa_r+0x91e>
 800a2e6:	e7a9      	b.n	800a23c <_dtoa_r+0xb24>
 800a2e8:	0800dac3 	.word	0x0800dac3
 800a2ec:	0800da20 	.word	0x0800da20
 800a2f0:	0800da44 	.word	0x0800da44

0800a2f4 <_localeconv_r>:
 800a2f4:	4800      	ldr	r0, [pc, #0]	; (800a2f8 <_localeconv_r+0x4>)
 800a2f6:	4770      	bx	lr
 800a2f8:	20000170 	.word	0x20000170

0800a2fc <malloc>:
 800a2fc:	4b02      	ldr	r3, [pc, #8]	; (800a308 <malloc+0xc>)
 800a2fe:	4601      	mov	r1, r0
 800a300:	6818      	ldr	r0, [r3, #0]
 800a302:	f000 bc09 	b.w	800ab18 <_malloc_r>
 800a306:	bf00      	nop
 800a308:	2000001c 	.word	0x2000001c

0800a30c <_Balloc>:
 800a30c:	b570      	push	{r4, r5, r6, lr}
 800a30e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a310:	4604      	mov	r4, r0
 800a312:	460d      	mov	r5, r1
 800a314:	b976      	cbnz	r6, 800a334 <_Balloc+0x28>
 800a316:	2010      	movs	r0, #16
 800a318:	f7ff fff0 	bl	800a2fc <malloc>
 800a31c:	4602      	mov	r2, r0
 800a31e:	6260      	str	r0, [r4, #36]	; 0x24
 800a320:	b920      	cbnz	r0, 800a32c <_Balloc+0x20>
 800a322:	4b18      	ldr	r3, [pc, #96]	; (800a384 <_Balloc+0x78>)
 800a324:	4818      	ldr	r0, [pc, #96]	; (800a388 <_Balloc+0x7c>)
 800a326:	2166      	movs	r1, #102	; 0x66
 800a328:	f000 fdd6 	bl	800aed8 <__assert_func>
 800a32c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a330:	6006      	str	r6, [r0, #0]
 800a332:	60c6      	str	r6, [r0, #12]
 800a334:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a336:	68f3      	ldr	r3, [r6, #12]
 800a338:	b183      	cbz	r3, 800a35c <_Balloc+0x50>
 800a33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a342:	b9b8      	cbnz	r0, 800a374 <_Balloc+0x68>
 800a344:	2101      	movs	r1, #1
 800a346:	fa01 f605 	lsl.w	r6, r1, r5
 800a34a:	1d72      	adds	r2, r6, #5
 800a34c:	0092      	lsls	r2, r2, #2
 800a34e:	4620      	mov	r0, r4
 800a350:	f000 fb60 	bl	800aa14 <_calloc_r>
 800a354:	b160      	cbz	r0, 800a370 <_Balloc+0x64>
 800a356:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a35a:	e00e      	b.n	800a37a <_Balloc+0x6e>
 800a35c:	2221      	movs	r2, #33	; 0x21
 800a35e:	2104      	movs	r1, #4
 800a360:	4620      	mov	r0, r4
 800a362:	f000 fb57 	bl	800aa14 <_calloc_r>
 800a366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a368:	60f0      	str	r0, [r6, #12]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1e4      	bne.n	800a33a <_Balloc+0x2e>
 800a370:	2000      	movs	r0, #0
 800a372:	bd70      	pop	{r4, r5, r6, pc}
 800a374:	6802      	ldr	r2, [r0, #0]
 800a376:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a37a:	2300      	movs	r3, #0
 800a37c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a380:	e7f7      	b.n	800a372 <_Balloc+0x66>
 800a382:	bf00      	nop
 800a384:	0800da51 	.word	0x0800da51
 800a388:	0800dad4 	.word	0x0800dad4

0800a38c <_Bfree>:
 800a38c:	b570      	push	{r4, r5, r6, lr}
 800a38e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a390:	4605      	mov	r5, r0
 800a392:	460c      	mov	r4, r1
 800a394:	b976      	cbnz	r6, 800a3b4 <_Bfree+0x28>
 800a396:	2010      	movs	r0, #16
 800a398:	f7ff ffb0 	bl	800a2fc <malloc>
 800a39c:	4602      	mov	r2, r0
 800a39e:	6268      	str	r0, [r5, #36]	; 0x24
 800a3a0:	b920      	cbnz	r0, 800a3ac <_Bfree+0x20>
 800a3a2:	4b09      	ldr	r3, [pc, #36]	; (800a3c8 <_Bfree+0x3c>)
 800a3a4:	4809      	ldr	r0, [pc, #36]	; (800a3cc <_Bfree+0x40>)
 800a3a6:	218a      	movs	r1, #138	; 0x8a
 800a3a8:	f000 fd96 	bl	800aed8 <__assert_func>
 800a3ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3b0:	6006      	str	r6, [r0, #0]
 800a3b2:	60c6      	str	r6, [r0, #12]
 800a3b4:	b13c      	cbz	r4, 800a3c6 <_Bfree+0x3a>
 800a3b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a3b8:	6862      	ldr	r2, [r4, #4]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3c0:	6021      	str	r1, [r4, #0]
 800a3c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3c6:	bd70      	pop	{r4, r5, r6, pc}
 800a3c8:	0800da51 	.word	0x0800da51
 800a3cc:	0800dad4 	.word	0x0800dad4

0800a3d0 <__multadd>:
 800a3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d4:	690d      	ldr	r5, [r1, #16]
 800a3d6:	4607      	mov	r7, r0
 800a3d8:	460c      	mov	r4, r1
 800a3da:	461e      	mov	r6, r3
 800a3dc:	f101 0c14 	add.w	ip, r1, #20
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	f8dc 3000 	ldr.w	r3, [ip]
 800a3e6:	b299      	uxth	r1, r3
 800a3e8:	fb02 6101 	mla	r1, r2, r1, r6
 800a3ec:	0c1e      	lsrs	r6, r3, #16
 800a3ee:	0c0b      	lsrs	r3, r1, #16
 800a3f0:	fb02 3306 	mla	r3, r2, r6, r3
 800a3f4:	b289      	uxth	r1, r1
 800a3f6:	3001      	adds	r0, #1
 800a3f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3fc:	4285      	cmp	r5, r0
 800a3fe:	f84c 1b04 	str.w	r1, [ip], #4
 800a402:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a406:	dcec      	bgt.n	800a3e2 <__multadd+0x12>
 800a408:	b30e      	cbz	r6, 800a44e <__multadd+0x7e>
 800a40a:	68a3      	ldr	r3, [r4, #8]
 800a40c:	42ab      	cmp	r3, r5
 800a40e:	dc19      	bgt.n	800a444 <__multadd+0x74>
 800a410:	6861      	ldr	r1, [r4, #4]
 800a412:	4638      	mov	r0, r7
 800a414:	3101      	adds	r1, #1
 800a416:	f7ff ff79 	bl	800a30c <_Balloc>
 800a41a:	4680      	mov	r8, r0
 800a41c:	b928      	cbnz	r0, 800a42a <__multadd+0x5a>
 800a41e:	4602      	mov	r2, r0
 800a420:	4b0c      	ldr	r3, [pc, #48]	; (800a454 <__multadd+0x84>)
 800a422:	480d      	ldr	r0, [pc, #52]	; (800a458 <__multadd+0x88>)
 800a424:	21b5      	movs	r1, #181	; 0xb5
 800a426:	f000 fd57 	bl	800aed8 <__assert_func>
 800a42a:	6922      	ldr	r2, [r4, #16]
 800a42c:	3202      	adds	r2, #2
 800a42e:	f104 010c 	add.w	r1, r4, #12
 800a432:	0092      	lsls	r2, r2, #2
 800a434:	300c      	adds	r0, #12
 800a436:	f7fe fc41 	bl	8008cbc <memcpy>
 800a43a:	4621      	mov	r1, r4
 800a43c:	4638      	mov	r0, r7
 800a43e:	f7ff ffa5 	bl	800a38c <_Bfree>
 800a442:	4644      	mov	r4, r8
 800a444:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a448:	3501      	adds	r5, #1
 800a44a:	615e      	str	r6, [r3, #20]
 800a44c:	6125      	str	r5, [r4, #16]
 800a44e:	4620      	mov	r0, r4
 800a450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a454:	0800dac3 	.word	0x0800dac3
 800a458:	0800dad4 	.word	0x0800dad4

0800a45c <__hi0bits>:
 800a45c:	0c03      	lsrs	r3, r0, #16
 800a45e:	041b      	lsls	r3, r3, #16
 800a460:	b9d3      	cbnz	r3, 800a498 <__hi0bits+0x3c>
 800a462:	0400      	lsls	r0, r0, #16
 800a464:	2310      	movs	r3, #16
 800a466:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a46a:	bf04      	itt	eq
 800a46c:	0200      	lsleq	r0, r0, #8
 800a46e:	3308      	addeq	r3, #8
 800a470:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a474:	bf04      	itt	eq
 800a476:	0100      	lsleq	r0, r0, #4
 800a478:	3304      	addeq	r3, #4
 800a47a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a47e:	bf04      	itt	eq
 800a480:	0080      	lsleq	r0, r0, #2
 800a482:	3302      	addeq	r3, #2
 800a484:	2800      	cmp	r0, #0
 800a486:	db05      	blt.n	800a494 <__hi0bits+0x38>
 800a488:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a48c:	f103 0301 	add.w	r3, r3, #1
 800a490:	bf08      	it	eq
 800a492:	2320      	moveq	r3, #32
 800a494:	4618      	mov	r0, r3
 800a496:	4770      	bx	lr
 800a498:	2300      	movs	r3, #0
 800a49a:	e7e4      	b.n	800a466 <__hi0bits+0xa>

0800a49c <__lo0bits>:
 800a49c:	6803      	ldr	r3, [r0, #0]
 800a49e:	f013 0207 	ands.w	r2, r3, #7
 800a4a2:	4601      	mov	r1, r0
 800a4a4:	d00b      	beq.n	800a4be <__lo0bits+0x22>
 800a4a6:	07da      	lsls	r2, r3, #31
 800a4a8:	d423      	bmi.n	800a4f2 <__lo0bits+0x56>
 800a4aa:	0798      	lsls	r0, r3, #30
 800a4ac:	bf49      	itett	mi
 800a4ae:	085b      	lsrmi	r3, r3, #1
 800a4b0:	089b      	lsrpl	r3, r3, #2
 800a4b2:	2001      	movmi	r0, #1
 800a4b4:	600b      	strmi	r3, [r1, #0]
 800a4b6:	bf5c      	itt	pl
 800a4b8:	600b      	strpl	r3, [r1, #0]
 800a4ba:	2002      	movpl	r0, #2
 800a4bc:	4770      	bx	lr
 800a4be:	b298      	uxth	r0, r3
 800a4c0:	b9a8      	cbnz	r0, 800a4ee <__lo0bits+0x52>
 800a4c2:	0c1b      	lsrs	r3, r3, #16
 800a4c4:	2010      	movs	r0, #16
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	b90a      	cbnz	r2, 800a4ce <__lo0bits+0x32>
 800a4ca:	3008      	adds	r0, #8
 800a4cc:	0a1b      	lsrs	r3, r3, #8
 800a4ce:	071a      	lsls	r2, r3, #28
 800a4d0:	bf04      	itt	eq
 800a4d2:	091b      	lsreq	r3, r3, #4
 800a4d4:	3004      	addeq	r0, #4
 800a4d6:	079a      	lsls	r2, r3, #30
 800a4d8:	bf04      	itt	eq
 800a4da:	089b      	lsreq	r3, r3, #2
 800a4dc:	3002      	addeq	r0, #2
 800a4de:	07da      	lsls	r2, r3, #31
 800a4e0:	d403      	bmi.n	800a4ea <__lo0bits+0x4e>
 800a4e2:	085b      	lsrs	r3, r3, #1
 800a4e4:	f100 0001 	add.w	r0, r0, #1
 800a4e8:	d005      	beq.n	800a4f6 <__lo0bits+0x5a>
 800a4ea:	600b      	str	r3, [r1, #0]
 800a4ec:	4770      	bx	lr
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	e7e9      	b.n	800a4c6 <__lo0bits+0x2a>
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	4770      	bx	lr
 800a4f6:	2020      	movs	r0, #32
 800a4f8:	4770      	bx	lr
	...

0800a4fc <__i2b>:
 800a4fc:	b510      	push	{r4, lr}
 800a4fe:	460c      	mov	r4, r1
 800a500:	2101      	movs	r1, #1
 800a502:	f7ff ff03 	bl	800a30c <_Balloc>
 800a506:	4602      	mov	r2, r0
 800a508:	b928      	cbnz	r0, 800a516 <__i2b+0x1a>
 800a50a:	4b05      	ldr	r3, [pc, #20]	; (800a520 <__i2b+0x24>)
 800a50c:	4805      	ldr	r0, [pc, #20]	; (800a524 <__i2b+0x28>)
 800a50e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a512:	f000 fce1 	bl	800aed8 <__assert_func>
 800a516:	2301      	movs	r3, #1
 800a518:	6144      	str	r4, [r0, #20]
 800a51a:	6103      	str	r3, [r0, #16]
 800a51c:	bd10      	pop	{r4, pc}
 800a51e:	bf00      	nop
 800a520:	0800dac3 	.word	0x0800dac3
 800a524:	0800dad4 	.word	0x0800dad4

0800a528 <__multiply>:
 800a528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	4691      	mov	r9, r2
 800a52e:	690a      	ldr	r2, [r1, #16]
 800a530:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a534:	429a      	cmp	r2, r3
 800a536:	bfb8      	it	lt
 800a538:	460b      	movlt	r3, r1
 800a53a:	460c      	mov	r4, r1
 800a53c:	bfbc      	itt	lt
 800a53e:	464c      	movlt	r4, r9
 800a540:	4699      	movlt	r9, r3
 800a542:	6927      	ldr	r7, [r4, #16]
 800a544:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a548:	68a3      	ldr	r3, [r4, #8]
 800a54a:	6861      	ldr	r1, [r4, #4]
 800a54c:	eb07 060a 	add.w	r6, r7, sl
 800a550:	42b3      	cmp	r3, r6
 800a552:	b085      	sub	sp, #20
 800a554:	bfb8      	it	lt
 800a556:	3101      	addlt	r1, #1
 800a558:	f7ff fed8 	bl	800a30c <_Balloc>
 800a55c:	b930      	cbnz	r0, 800a56c <__multiply+0x44>
 800a55e:	4602      	mov	r2, r0
 800a560:	4b44      	ldr	r3, [pc, #272]	; (800a674 <__multiply+0x14c>)
 800a562:	4845      	ldr	r0, [pc, #276]	; (800a678 <__multiply+0x150>)
 800a564:	f240 115d 	movw	r1, #349	; 0x15d
 800a568:	f000 fcb6 	bl	800aed8 <__assert_func>
 800a56c:	f100 0514 	add.w	r5, r0, #20
 800a570:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a574:	462b      	mov	r3, r5
 800a576:	2200      	movs	r2, #0
 800a578:	4543      	cmp	r3, r8
 800a57a:	d321      	bcc.n	800a5c0 <__multiply+0x98>
 800a57c:	f104 0314 	add.w	r3, r4, #20
 800a580:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a584:	f109 0314 	add.w	r3, r9, #20
 800a588:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a58c:	9202      	str	r2, [sp, #8]
 800a58e:	1b3a      	subs	r2, r7, r4
 800a590:	3a15      	subs	r2, #21
 800a592:	f022 0203 	bic.w	r2, r2, #3
 800a596:	3204      	adds	r2, #4
 800a598:	f104 0115 	add.w	r1, r4, #21
 800a59c:	428f      	cmp	r7, r1
 800a59e:	bf38      	it	cc
 800a5a0:	2204      	movcc	r2, #4
 800a5a2:	9201      	str	r2, [sp, #4]
 800a5a4:	9a02      	ldr	r2, [sp, #8]
 800a5a6:	9303      	str	r3, [sp, #12]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d80c      	bhi.n	800a5c6 <__multiply+0x9e>
 800a5ac:	2e00      	cmp	r6, #0
 800a5ae:	dd03      	ble.n	800a5b8 <__multiply+0x90>
 800a5b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d05a      	beq.n	800a66e <__multiply+0x146>
 800a5b8:	6106      	str	r6, [r0, #16]
 800a5ba:	b005      	add	sp, #20
 800a5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c0:	f843 2b04 	str.w	r2, [r3], #4
 800a5c4:	e7d8      	b.n	800a578 <__multiply+0x50>
 800a5c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a5ca:	f1ba 0f00 	cmp.w	sl, #0
 800a5ce:	d024      	beq.n	800a61a <__multiply+0xf2>
 800a5d0:	f104 0e14 	add.w	lr, r4, #20
 800a5d4:	46a9      	mov	r9, r5
 800a5d6:	f04f 0c00 	mov.w	ip, #0
 800a5da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a5de:	f8d9 1000 	ldr.w	r1, [r9]
 800a5e2:	fa1f fb82 	uxth.w	fp, r2
 800a5e6:	b289      	uxth	r1, r1
 800a5e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a5ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a5f0:	f8d9 2000 	ldr.w	r2, [r9]
 800a5f4:	4461      	add	r1, ip
 800a5f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800a5fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a602:	b289      	uxth	r1, r1
 800a604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a608:	4577      	cmp	r7, lr
 800a60a:	f849 1b04 	str.w	r1, [r9], #4
 800a60e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a612:	d8e2      	bhi.n	800a5da <__multiply+0xb2>
 800a614:	9a01      	ldr	r2, [sp, #4]
 800a616:	f845 c002 	str.w	ip, [r5, r2]
 800a61a:	9a03      	ldr	r2, [sp, #12]
 800a61c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a620:	3304      	adds	r3, #4
 800a622:	f1b9 0f00 	cmp.w	r9, #0
 800a626:	d020      	beq.n	800a66a <__multiply+0x142>
 800a628:	6829      	ldr	r1, [r5, #0]
 800a62a:	f104 0c14 	add.w	ip, r4, #20
 800a62e:	46ae      	mov	lr, r5
 800a630:	f04f 0a00 	mov.w	sl, #0
 800a634:	f8bc b000 	ldrh.w	fp, [ip]
 800a638:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a63c:	fb09 220b 	mla	r2, r9, fp, r2
 800a640:	4492      	add	sl, r2
 800a642:	b289      	uxth	r1, r1
 800a644:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a648:	f84e 1b04 	str.w	r1, [lr], #4
 800a64c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a650:	f8be 1000 	ldrh.w	r1, [lr]
 800a654:	0c12      	lsrs	r2, r2, #16
 800a656:	fb09 1102 	mla	r1, r9, r2, r1
 800a65a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a65e:	4567      	cmp	r7, ip
 800a660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a664:	d8e6      	bhi.n	800a634 <__multiply+0x10c>
 800a666:	9a01      	ldr	r2, [sp, #4]
 800a668:	50a9      	str	r1, [r5, r2]
 800a66a:	3504      	adds	r5, #4
 800a66c:	e79a      	b.n	800a5a4 <__multiply+0x7c>
 800a66e:	3e01      	subs	r6, #1
 800a670:	e79c      	b.n	800a5ac <__multiply+0x84>
 800a672:	bf00      	nop
 800a674:	0800dac3 	.word	0x0800dac3
 800a678:	0800dad4 	.word	0x0800dad4

0800a67c <__pow5mult>:
 800a67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a680:	4615      	mov	r5, r2
 800a682:	f012 0203 	ands.w	r2, r2, #3
 800a686:	4606      	mov	r6, r0
 800a688:	460f      	mov	r7, r1
 800a68a:	d007      	beq.n	800a69c <__pow5mult+0x20>
 800a68c:	4c25      	ldr	r4, [pc, #148]	; (800a724 <__pow5mult+0xa8>)
 800a68e:	3a01      	subs	r2, #1
 800a690:	2300      	movs	r3, #0
 800a692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a696:	f7ff fe9b 	bl	800a3d0 <__multadd>
 800a69a:	4607      	mov	r7, r0
 800a69c:	10ad      	asrs	r5, r5, #2
 800a69e:	d03d      	beq.n	800a71c <__pow5mult+0xa0>
 800a6a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a6a2:	b97c      	cbnz	r4, 800a6c4 <__pow5mult+0x48>
 800a6a4:	2010      	movs	r0, #16
 800a6a6:	f7ff fe29 	bl	800a2fc <malloc>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	6270      	str	r0, [r6, #36]	; 0x24
 800a6ae:	b928      	cbnz	r0, 800a6bc <__pow5mult+0x40>
 800a6b0:	4b1d      	ldr	r3, [pc, #116]	; (800a728 <__pow5mult+0xac>)
 800a6b2:	481e      	ldr	r0, [pc, #120]	; (800a72c <__pow5mult+0xb0>)
 800a6b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a6b8:	f000 fc0e 	bl	800aed8 <__assert_func>
 800a6bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6c0:	6004      	str	r4, [r0, #0]
 800a6c2:	60c4      	str	r4, [r0, #12]
 800a6c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a6c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6cc:	b94c      	cbnz	r4, 800a6e2 <__pow5mult+0x66>
 800a6ce:	f240 2171 	movw	r1, #625	; 0x271
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f7ff ff12 	bl	800a4fc <__i2b>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6de:	4604      	mov	r4, r0
 800a6e0:	6003      	str	r3, [r0, #0]
 800a6e2:	f04f 0900 	mov.w	r9, #0
 800a6e6:	07eb      	lsls	r3, r5, #31
 800a6e8:	d50a      	bpl.n	800a700 <__pow5mult+0x84>
 800a6ea:	4639      	mov	r1, r7
 800a6ec:	4622      	mov	r2, r4
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	f7ff ff1a 	bl	800a528 <__multiply>
 800a6f4:	4639      	mov	r1, r7
 800a6f6:	4680      	mov	r8, r0
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	f7ff fe47 	bl	800a38c <_Bfree>
 800a6fe:	4647      	mov	r7, r8
 800a700:	106d      	asrs	r5, r5, #1
 800a702:	d00b      	beq.n	800a71c <__pow5mult+0xa0>
 800a704:	6820      	ldr	r0, [r4, #0]
 800a706:	b938      	cbnz	r0, 800a718 <__pow5mult+0x9c>
 800a708:	4622      	mov	r2, r4
 800a70a:	4621      	mov	r1, r4
 800a70c:	4630      	mov	r0, r6
 800a70e:	f7ff ff0b 	bl	800a528 <__multiply>
 800a712:	6020      	str	r0, [r4, #0]
 800a714:	f8c0 9000 	str.w	r9, [r0]
 800a718:	4604      	mov	r4, r0
 800a71a:	e7e4      	b.n	800a6e6 <__pow5mult+0x6a>
 800a71c:	4638      	mov	r0, r7
 800a71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a722:	bf00      	nop
 800a724:	0800dc20 	.word	0x0800dc20
 800a728:	0800da51 	.word	0x0800da51
 800a72c:	0800dad4 	.word	0x0800dad4

0800a730 <__lshift>:
 800a730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a734:	460c      	mov	r4, r1
 800a736:	6849      	ldr	r1, [r1, #4]
 800a738:	6923      	ldr	r3, [r4, #16]
 800a73a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a73e:	68a3      	ldr	r3, [r4, #8]
 800a740:	4607      	mov	r7, r0
 800a742:	4691      	mov	r9, r2
 800a744:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a748:	f108 0601 	add.w	r6, r8, #1
 800a74c:	42b3      	cmp	r3, r6
 800a74e:	db0b      	blt.n	800a768 <__lshift+0x38>
 800a750:	4638      	mov	r0, r7
 800a752:	f7ff fddb 	bl	800a30c <_Balloc>
 800a756:	4605      	mov	r5, r0
 800a758:	b948      	cbnz	r0, 800a76e <__lshift+0x3e>
 800a75a:	4602      	mov	r2, r0
 800a75c:	4b2a      	ldr	r3, [pc, #168]	; (800a808 <__lshift+0xd8>)
 800a75e:	482b      	ldr	r0, [pc, #172]	; (800a80c <__lshift+0xdc>)
 800a760:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a764:	f000 fbb8 	bl	800aed8 <__assert_func>
 800a768:	3101      	adds	r1, #1
 800a76a:	005b      	lsls	r3, r3, #1
 800a76c:	e7ee      	b.n	800a74c <__lshift+0x1c>
 800a76e:	2300      	movs	r3, #0
 800a770:	f100 0114 	add.w	r1, r0, #20
 800a774:	f100 0210 	add.w	r2, r0, #16
 800a778:	4618      	mov	r0, r3
 800a77a:	4553      	cmp	r3, sl
 800a77c:	db37      	blt.n	800a7ee <__lshift+0xbe>
 800a77e:	6920      	ldr	r0, [r4, #16]
 800a780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a784:	f104 0314 	add.w	r3, r4, #20
 800a788:	f019 091f 	ands.w	r9, r9, #31
 800a78c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a790:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a794:	d02f      	beq.n	800a7f6 <__lshift+0xc6>
 800a796:	f1c9 0e20 	rsb	lr, r9, #32
 800a79a:	468a      	mov	sl, r1
 800a79c:	f04f 0c00 	mov.w	ip, #0
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	fa02 f209 	lsl.w	r2, r2, r9
 800a7a6:	ea42 020c 	orr.w	r2, r2, ip
 800a7aa:	f84a 2b04 	str.w	r2, [sl], #4
 800a7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b2:	4298      	cmp	r0, r3
 800a7b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a7b8:	d8f2      	bhi.n	800a7a0 <__lshift+0x70>
 800a7ba:	1b03      	subs	r3, r0, r4
 800a7bc:	3b15      	subs	r3, #21
 800a7be:	f023 0303 	bic.w	r3, r3, #3
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	f104 0215 	add.w	r2, r4, #21
 800a7c8:	4290      	cmp	r0, r2
 800a7ca:	bf38      	it	cc
 800a7cc:	2304      	movcc	r3, #4
 800a7ce:	f841 c003 	str.w	ip, [r1, r3]
 800a7d2:	f1bc 0f00 	cmp.w	ip, #0
 800a7d6:	d001      	beq.n	800a7dc <__lshift+0xac>
 800a7d8:	f108 0602 	add.w	r6, r8, #2
 800a7dc:	3e01      	subs	r6, #1
 800a7de:	4638      	mov	r0, r7
 800a7e0:	612e      	str	r6, [r5, #16]
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	f7ff fdd2 	bl	800a38c <_Bfree>
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	e7c1      	b.n	800a77a <__lshift+0x4a>
 800a7f6:	3904      	subs	r1, #4
 800a7f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a800:	4298      	cmp	r0, r3
 800a802:	d8f9      	bhi.n	800a7f8 <__lshift+0xc8>
 800a804:	e7ea      	b.n	800a7dc <__lshift+0xac>
 800a806:	bf00      	nop
 800a808:	0800dac3 	.word	0x0800dac3
 800a80c:	0800dad4 	.word	0x0800dad4

0800a810 <__mcmp>:
 800a810:	b530      	push	{r4, r5, lr}
 800a812:	6902      	ldr	r2, [r0, #16]
 800a814:	690c      	ldr	r4, [r1, #16]
 800a816:	1b12      	subs	r2, r2, r4
 800a818:	d10e      	bne.n	800a838 <__mcmp+0x28>
 800a81a:	f100 0314 	add.w	r3, r0, #20
 800a81e:	3114      	adds	r1, #20
 800a820:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a824:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a828:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a82c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a830:	42a5      	cmp	r5, r4
 800a832:	d003      	beq.n	800a83c <__mcmp+0x2c>
 800a834:	d305      	bcc.n	800a842 <__mcmp+0x32>
 800a836:	2201      	movs	r2, #1
 800a838:	4610      	mov	r0, r2
 800a83a:	bd30      	pop	{r4, r5, pc}
 800a83c:	4283      	cmp	r3, r0
 800a83e:	d3f3      	bcc.n	800a828 <__mcmp+0x18>
 800a840:	e7fa      	b.n	800a838 <__mcmp+0x28>
 800a842:	f04f 32ff 	mov.w	r2, #4294967295
 800a846:	e7f7      	b.n	800a838 <__mcmp+0x28>

0800a848 <__mdiff>:
 800a848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	460c      	mov	r4, r1
 800a84e:	4606      	mov	r6, r0
 800a850:	4611      	mov	r1, r2
 800a852:	4620      	mov	r0, r4
 800a854:	4690      	mov	r8, r2
 800a856:	f7ff ffdb 	bl	800a810 <__mcmp>
 800a85a:	1e05      	subs	r5, r0, #0
 800a85c:	d110      	bne.n	800a880 <__mdiff+0x38>
 800a85e:	4629      	mov	r1, r5
 800a860:	4630      	mov	r0, r6
 800a862:	f7ff fd53 	bl	800a30c <_Balloc>
 800a866:	b930      	cbnz	r0, 800a876 <__mdiff+0x2e>
 800a868:	4b3a      	ldr	r3, [pc, #232]	; (800a954 <__mdiff+0x10c>)
 800a86a:	4602      	mov	r2, r0
 800a86c:	f240 2132 	movw	r1, #562	; 0x232
 800a870:	4839      	ldr	r0, [pc, #228]	; (800a958 <__mdiff+0x110>)
 800a872:	f000 fb31 	bl	800aed8 <__assert_func>
 800a876:	2301      	movs	r3, #1
 800a878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a87c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a880:	bfa4      	itt	ge
 800a882:	4643      	movge	r3, r8
 800a884:	46a0      	movge	r8, r4
 800a886:	4630      	mov	r0, r6
 800a888:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a88c:	bfa6      	itte	ge
 800a88e:	461c      	movge	r4, r3
 800a890:	2500      	movge	r5, #0
 800a892:	2501      	movlt	r5, #1
 800a894:	f7ff fd3a 	bl	800a30c <_Balloc>
 800a898:	b920      	cbnz	r0, 800a8a4 <__mdiff+0x5c>
 800a89a:	4b2e      	ldr	r3, [pc, #184]	; (800a954 <__mdiff+0x10c>)
 800a89c:	4602      	mov	r2, r0
 800a89e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a8a2:	e7e5      	b.n	800a870 <__mdiff+0x28>
 800a8a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a8a8:	6926      	ldr	r6, [r4, #16]
 800a8aa:	60c5      	str	r5, [r0, #12]
 800a8ac:	f104 0914 	add.w	r9, r4, #20
 800a8b0:	f108 0514 	add.w	r5, r8, #20
 800a8b4:	f100 0e14 	add.w	lr, r0, #20
 800a8b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a8bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a8c0:	f108 0210 	add.w	r2, r8, #16
 800a8c4:	46f2      	mov	sl, lr
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a8d0:	fa1f f883 	uxth.w	r8, r3
 800a8d4:	fa11 f18b 	uxtah	r1, r1, fp
 800a8d8:	0c1b      	lsrs	r3, r3, #16
 800a8da:	eba1 0808 	sub.w	r8, r1, r8
 800a8de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a8e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a8e6:	fa1f f888 	uxth.w	r8, r8
 800a8ea:	1419      	asrs	r1, r3, #16
 800a8ec:	454e      	cmp	r6, r9
 800a8ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8f2:	f84a 3b04 	str.w	r3, [sl], #4
 800a8f6:	d8e7      	bhi.n	800a8c8 <__mdiff+0x80>
 800a8f8:	1b33      	subs	r3, r6, r4
 800a8fa:	3b15      	subs	r3, #21
 800a8fc:	f023 0303 	bic.w	r3, r3, #3
 800a900:	3304      	adds	r3, #4
 800a902:	3415      	adds	r4, #21
 800a904:	42a6      	cmp	r6, r4
 800a906:	bf38      	it	cc
 800a908:	2304      	movcc	r3, #4
 800a90a:	441d      	add	r5, r3
 800a90c:	4473      	add	r3, lr
 800a90e:	469e      	mov	lr, r3
 800a910:	462e      	mov	r6, r5
 800a912:	4566      	cmp	r6, ip
 800a914:	d30e      	bcc.n	800a934 <__mdiff+0xec>
 800a916:	f10c 0203 	add.w	r2, ip, #3
 800a91a:	1b52      	subs	r2, r2, r5
 800a91c:	f022 0203 	bic.w	r2, r2, #3
 800a920:	3d03      	subs	r5, #3
 800a922:	45ac      	cmp	ip, r5
 800a924:	bf38      	it	cc
 800a926:	2200      	movcc	r2, #0
 800a928:	441a      	add	r2, r3
 800a92a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a92e:	b17b      	cbz	r3, 800a950 <__mdiff+0x108>
 800a930:	6107      	str	r7, [r0, #16]
 800a932:	e7a3      	b.n	800a87c <__mdiff+0x34>
 800a934:	f856 8b04 	ldr.w	r8, [r6], #4
 800a938:	fa11 f288 	uxtah	r2, r1, r8
 800a93c:	1414      	asrs	r4, r2, #16
 800a93e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a942:	b292      	uxth	r2, r2
 800a944:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a948:	f84e 2b04 	str.w	r2, [lr], #4
 800a94c:	1421      	asrs	r1, r4, #16
 800a94e:	e7e0      	b.n	800a912 <__mdiff+0xca>
 800a950:	3f01      	subs	r7, #1
 800a952:	e7ea      	b.n	800a92a <__mdiff+0xe2>
 800a954:	0800dac3 	.word	0x0800dac3
 800a958:	0800dad4 	.word	0x0800dad4

0800a95c <__d2b>:
 800a95c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a960:	4689      	mov	r9, r1
 800a962:	2101      	movs	r1, #1
 800a964:	ec57 6b10 	vmov	r6, r7, d0
 800a968:	4690      	mov	r8, r2
 800a96a:	f7ff fccf 	bl	800a30c <_Balloc>
 800a96e:	4604      	mov	r4, r0
 800a970:	b930      	cbnz	r0, 800a980 <__d2b+0x24>
 800a972:	4602      	mov	r2, r0
 800a974:	4b25      	ldr	r3, [pc, #148]	; (800aa0c <__d2b+0xb0>)
 800a976:	4826      	ldr	r0, [pc, #152]	; (800aa10 <__d2b+0xb4>)
 800a978:	f240 310a 	movw	r1, #778	; 0x30a
 800a97c:	f000 faac 	bl	800aed8 <__assert_func>
 800a980:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a984:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a988:	bb35      	cbnz	r5, 800a9d8 <__d2b+0x7c>
 800a98a:	2e00      	cmp	r6, #0
 800a98c:	9301      	str	r3, [sp, #4]
 800a98e:	d028      	beq.n	800a9e2 <__d2b+0x86>
 800a990:	4668      	mov	r0, sp
 800a992:	9600      	str	r6, [sp, #0]
 800a994:	f7ff fd82 	bl	800a49c <__lo0bits>
 800a998:	9900      	ldr	r1, [sp, #0]
 800a99a:	b300      	cbz	r0, 800a9de <__d2b+0x82>
 800a99c:	9a01      	ldr	r2, [sp, #4]
 800a99e:	f1c0 0320 	rsb	r3, r0, #32
 800a9a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a6:	430b      	orrs	r3, r1
 800a9a8:	40c2      	lsrs	r2, r0
 800a9aa:	6163      	str	r3, [r4, #20]
 800a9ac:	9201      	str	r2, [sp, #4]
 800a9ae:	9b01      	ldr	r3, [sp, #4]
 800a9b0:	61a3      	str	r3, [r4, #24]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	bf14      	ite	ne
 800a9b6:	2202      	movne	r2, #2
 800a9b8:	2201      	moveq	r2, #1
 800a9ba:	6122      	str	r2, [r4, #16]
 800a9bc:	b1d5      	cbz	r5, 800a9f4 <__d2b+0x98>
 800a9be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a9c2:	4405      	add	r5, r0
 800a9c4:	f8c9 5000 	str.w	r5, [r9]
 800a9c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9cc:	f8c8 0000 	str.w	r0, [r8]
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	b003      	add	sp, #12
 800a9d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9dc:	e7d5      	b.n	800a98a <__d2b+0x2e>
 800a9de:	6161      	str	r1, [r4, #20]
 800a9e0:	e7e5      	b.n	800a9ae <__d2b+0x52>
 800a9e2:	a801      	add	r0, sp, #4
 800a9e4:	f7ff fd5a 	bl	800a49c <__lo0bits>
 800a9e8:	9b01      	ldr	r3, [sp, #4]
 800a9ea:	6163      	str	r3, [r4, #20]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	6122      	str	r2, [r4, #16]
 800a9f0:	3020      	adds	r0, #32
 800a9f2:	e7e3      	b.n	800a9bc <__d2b+0x60>
 800a9f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9fc:	f8c9 0000 	str.w	r0, [r9]
 800aa00:	6918      	ldr	r0, [r3, #16]
 800aa02:	f7ff fd2b 	bl	800a45c <__hi0bits>
 800aa06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa0a:	e7df      	b.n	800a9cc <__d2b+0x70>
 800aa0c:	0800dac3 	.word	0x0800dac3
 800aa10:	0800dad4 	.word	0x0800dad4

0800aa14 <_calloc_r>:
 800aa14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa16:	fba1 2402 	umull	r2, r4, r1, r2
 800aa1a:	b94c      	cbnz	r4, 800aa30 <_calloc_r+0x1c>
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	9201      	str	r2, [sp, #4]
 800aa20:	f000 f87a 	bl	800ab18 <_malloc_r>
 800aa24:	9a01      	ldr	r2, [sp, #4]
 800aa26:	4605      	mov	r5, r0
 800aa28:	b930      	cbnz	r0, 800aa38 <_calloc_r+0x24>
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	b003      	add	sp, #12
 800aa2e:	bd30      	pop	{r4, r5, pc}
 800aa30:	220c      	movs	r2, #12
 800aa32:	6002      	str	r2, [r0, #0]
 800aa34:	2500      	movs	r5, #0
 800aa36:	e7f8      	b.n	800aa2a <_calloc_r+0x16>
 800aa38:	4621      	mov	r1, r4
 800aa3a:	f7fe f94d 	bl	8008cd8 <memset>
 800aa3e:	e7f4      	b.n	800aa2a <_calloc_r+0x16>

0800aa40 <_free_r>:
 800aa40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa42:	2900      	cmp	r1, #0
 800aa44:	d044      	beq.n	800aad0 <_free_r+0x90>
 800aa46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa4a:	9001      	str	r0, [sp, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f1a1 0404 	sub.w	r4, r1, #4
 800aa52:	bfb8      	it	lt
 800aa54:	18e4      	addlt	r4, r4, r3
 800aa56:	f000 fa9b 	bl	800af90 <__malloc_lock>
 800aa5a:	4a1e      	ldr	r2, [pc, #120]	; (800aad4 <_free_r+0x94>)
 800aa5c:	9801      	ldr	r0, [sp, #4]
 800aa5e:	6813      	ldr	r3, [r2, #0]
 800aa60:	b933      	cbnz	r3, 800aa70 <_free_r+0x30>
 800aa62:	6063      	str	r3, [r4, #4]
 800aa64:	6014      	str	r4, [r2, #0]
 800aa66:	b003      	add	sp, #12
 800aa68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa6c:	f000 ba96 	b.w	800af9c <__malloc_unlock>
 800aa70:	42a3      	cmp	r3, r4
 800aa72:	d908      	bls.n	800aa86 <_free_r+0x46>
 800aa74:	6825      	ldr	r5, [r4, #0]
 800aa76:	1961      	adds	r1, r4, r5
 800aa78:	428b      	cmp	r3, r1
 800aa7a:	bf01      	itttt	eq
 800aa7c:	6819      	ldreq	r1, [r3, #0]
 800aa7e:	685b      	ldreq	r3, [r3, #4]
 800aa80:	1949      	addeq	r1, r1, r5
 800aa82:	6021      	streq	r1, [r4, #0]
 800aa84:	e7ed      	b.n	800aa62 <_free_r+0x22>
 800aa86:	461a      	mov	r2, r3
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	b10b      	cbz	r3, 800aa90 <_free_r+0x50>
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	d9fa      	bls.n	800aa86 <_free_r+0x46>
 800aa90:	6811      	ldr	r1, [r2, #0]
 800aa92:	1855      	adds	r5, r2, r1
 800aa94:	42a5      	cmp	r5, r4
 800aa96:	d10b      	bne.n	800aab0 <_free_r+0x70>
 800aa98:	6824      	ldr	r4, [r4, #0]
 800aa9a:	4421      	add	r1, r4
 800aa9c:	1854      	adds	r4, r2, r1
 800aa9e:	42a3      	cmp	r3, r4
 800aaa0:	6011      	str	r1, [r2, #0]
 800aaa2:	d1e0      	bne.n	800aa66 <_free_r+0x26>
 800aaa4:	681c      	ldr	r4, [r3, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	6053      	str	r3, [r2, #4]
 800aaaa:	4421      	add	r1, r4
 800aaac:	6011      	str	r1, [r2, #0]
 800aaae:	e7da      	b.n	800aa66 <_free_r+0x26>
 800aab0:	d902      	bls.n	800aab8 <_free_r+0x78>
 800aab2:	230c      	movs	r3, #12
 800aab4:	6003      	str	r3, [r0, #0]
 800aab6:	e7d6      	b.n	800aa66 <_free_r+0x26>
 800aab8:	6825      	ldr	r5, [r4, #0]
 800aaba:	1961      	adds	r1, r4, r5
 800aabc:	428b      	cmp	r3, r1
 800aabe:	bf04      	itt	eq
 800aac0:	6819      	ldreq	r1, [r3, #0]
 800aac2:	685b      	ldreq	r3, [r3, #4]
 800aac4:	6063      	str	r3, [r4, #4]
 800aac6:	bf04      	itt	eq
 800aac8:	1949      	addeq	r1, r1, r5
 800aaca:	6021      	streq	r1, [r4, #0]
 800aacc:	6054      	str	r4, [r2, #4]
 800aace:	e7ca      	b.n	800aa66 <_free_r+0x26>
 800aad0:	b003      	add	sp, #12
 800aad2:	bd30      	pop	{r4, r5, pc}
 800aad4:	20000f44 	.word	0x20000f44

0800aad8 <sbrk_aligned>:
 800aad8:	b570      	push	{r4, r5, r6, lr}
 800aada:	4e0e      	ldr	r6, [pc, #56]	; (800ab14 <sbrk_aligned+0x3c>)
 800aadc:	460c      	mov	r4, r1
 800aade:	6831      	ldr	r1, [r6, #0]
 800aae0:	4605      	mov	r5, r0
 800aae2:	b911      	cbnz	r1, 800aaea <sbrk_aligned+0x12>
 800aae4:	f000 f9e8 	bl	800aeb8 <_sbrk_r>
 800aae8:	6030      	str	r0, [r6, #0]
 800aaea:	4621      	mov	r1, r4
 800aaec:	4628      	mov	r0, r5
 800aaee:	f000 f9e3 	bl	800aeb8 <_sbrk_r>
 800aaf2:	1c43      	adds	r3, r0, #1
 800aaf4:	d00a      	beq.n	800ab0c <sbrk_aligned+0x34>
 800aaf6:	1cc4      	adds	r4, r0, #3
 800aaf8:	f024 0403 	bic.w	r4, r4, #3
 800aafc:	42a0      	cmp	r0, r4
 800aafe:	d007      	beq.n	800ab10 <sbrk_aligned+0x38>
 800ab00:	1a21      	subs	r1, r4, r0
 800ab02:	4628      	mov	r0, r5
 800ab04:	f000 f9d8 	bl	800aeb8 <_sbrk_r>
 800ab08:	3001      	adds	r0, #1
 800ab0a:	d101      	bne.n	800ab10 <sbrk_aligned+0x38>
 800ab0c:	f04f 34ff 	mov.w	r4, #4294967295
 800ab10:	4620      	mov	r0, r4
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	20000f48 	.word	0x20000f48

0800ab18 <_malloc_r>:
 800ab18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1c:	1ccd      	adds	r5, r1, #3
 800ab1e:	f025 0503 	bic.w	r5, r5, #3
 800ab22:	3508      	adds	r5, #8
 800ab24:	2d0c      	cmp	r5, #12
 800ab26:	bf38      	it	cc
 800ab28:	250c      	movcc	r5, #12
 800ab2a:	2d00      	cmp	r5, #0
 800ab2c:	4607      	mov	r7, r0
 800ab2e:	db01      	blt.n	800ab34 <_malloc_r+0x1c>
 800ab30:	42a9      	cmp	r1, r5
 800ab32:	d905      	bls.n	800ab40 <_malloc_r+0x28>
 800ab34:	230c      	movs	r3, #12
 800ab36:	603b      	str	r3, [r7, #0]
 800ab38:	2600      	movs	r6, #0
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab40:	4e2e      	ldr	r6, [pc, #184]	; (800abfc <_malloc_r+0xe4>)
 800ab42:	f000 fa25 	bl	800af90 <__malloc_lock>
 800ab46:	6833      	ldr	r3, [r6, #0]
 800ab48:	461c      	mov	r4, r3
 800ab4a:	bb34      	cbnz	r4, 800ab9a <_malloc_r+0x82>
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	4638      	mov	r0, r7
 800ab50:	f7ff ffc2 	bl	800aad8 <sbrk_aligned>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	4604      	mov	r4, r0
 800ab58:	d14d      	bne.n	800abf6 <_malloc_r+0xde>
 800ab5a:	6834      	ldr	r4, [r6, #0]
 800ab5c:	4626      	mov	r6, r4
 800ab5e:	2e00      	cmp	r6, #0
 800ab60:	d140      	bne.n	800abe4 <_malloc_r+0xcc>
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	4631      	mov	r1, r6
 800ab66:	4638      	mov	r0, r7
 800ab68:	eb04 0803 	add.w	r8, r4, r3
 800ab6c:	f000 f9a4 	bl	800aeb8 <_sbrk_r>
 800ab70:	4580      	cmp	r8, r0
 800ab72:	d13a      	bne.n	800abea <_malloc_r+0xd2>
 800ab74:	6821      	ldr	r1, [r4, #0]
 800ab76:	3503      	adds	r5, #3
 800ab78:	1a6d      	subs	r5, r5, r1
 800ab7a:	f025 0503 	bic.w	r5, r5, #3
 800ab7e:	3508      	adds	r5, #8
 800ab80:	2d0c      	cmp	r5, #12
 800ab82:	bf38      	it	cc
 800ab84:	250c      	movcc	r5, #12
 800ab86:	4629      	mov	r1, r5
 800ab88:	4638      	mov	r0, r7
 800ab8a:	f7ff ffa5 	bl	800aad8 <sbrk_aligned>
 800ab8e:	3001      	adds	r0, #1
 800ab90:	d02b      	beq.n	800abea <_malloc_r+0xd2>
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	442b      	add	r3, r5
 800ab96:	6023      	str	r3, [r4, #0]
 800ab98:	e00e      	b.n	800abb8 <_malloc_r+0xa0>
 800ab9a:	6822      	ldr	r2, [r4, #0]
 800ab9c:	1b52      	subs	r2, r2, r5
 800ab9e:	d41e      	bmi.n	800abde <_malloc_r+0xc6>
 800aba0:	2a0b      	cmp	r2, #11
 800aba2:	d916      	bls.n	800abd2 <_malloc_r+0xba>
 800aba4:	1961      	adds	r1, r4, r5
 800aba6:	42a3      	cmp	r3, r4
 800aba8:	6025      	str	r5, [r4, #0]
 800abaa:	bf18      	it	ne
 800abac:	6059      	strne	r1, [r3, #4]
 800abae:	6863      	ldr	r3, [r4, #4]
 800abb0:	bf08      	it	eq
 800abb2:	6031      	streq	r1, [r6, #0]
 800abb4:	5162      	str	r2, [r4, r5]
 800abb6:	604b      	str	r3, [r1, #4]
 800abb8:	4638      	mov	r0, r7
 800abba:	f104 060b 	add.w	r6, r4, #11
 800abbe:	f000 f9ed 	bl	800af9c <__malloc_unlock>
 800abc2:	f026 0607 	bic.w	r6, r6, #7
 800abc6:	1d23      	adds	r3, r4, #4
 800abc8:	1af2      	subs	r2, r6, r3
 800abca:	d0b6      	beq.n	800ab3a <_malloc_r+0x22>
 800abcc:	1b9b      	subs	r3, r3, r6
 800abce:	50a3      	str	r3, [r4, r2]
 800abd0:	e7b3      	b.n	800ab3a <_malloc_r+0x22>
 800abd2:	6862      	ldr	r2, [r4, #4]
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	bf0c      	ite	eq
 800abd8:	6032      	streq	r2, [r6, #0]
 800abda:	605a      	strne	r2, [r3, #4]
 800abdc:	e7ec      	b.n	800abb8 <_malloc_r+0xa0>
 800abde:	4623      	mov	r3, r4
 800abe0:	6864      	ldr	r4, [r4, #4]
 800abe2:	e7b2      	b.n	800ab4a <_malloc_r+0x32>
 800abe4:	4634      	mov	r4, r6
 800abe6:	6876      	ldr	r6, [r6, #4]
 800abe8:	e7b9      	b.n	800ab5e <_malloc_r+0x46>
 800abea:	230c      	movs	r3, #12
 800abec:	603b      	str	r3, [r7, #0]
 800abee:	4638      	mov	r0, r7
 800abf0:	f000 f9d4 	bl	800af9c <__malloc_unlock>
 800abf4:	e7a1      	b.n	800ab3a <_malloc_r+0x22>
 800abf6:	6025      	str	r5, [r4, #0]
 800abf8:	e7de      	b.n	800abb8 <_malloc_r+0xa0>
 800abfa:	bf00      	nop
 800abfc:	20000f44 	.word	0x20000f44

0800ac00 <__ssputs_r>:
 800ac00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac04:	688e      	ldr	r6, [r1, #8]
 800ac06:	429e      	cmp	r6, r3
 800ac08:	4682      	mov	sl, r0
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	4690      	mov	r8, r2
 800ac0e:	461f      	mov	r7, r3
 800ac10:	d838      	bhi.n	800ac84 <__ssputs_r+0x84>
 800ac12:	898a      	ldrh	r2, [r1, #12]
 800ac14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac18:	d032      	beq.n	800ac80 <__ssputs_r+0x80>
 800ac1a:	6825      	ldr	r5, [r4, #0]
 800ac1c:	6909      	ldr	r1, [r1, #16]
 800ac1e:	eba5 0901 	sub.w	r9, r5, r1
 800ac22:	6965      	ldr	r5, [r4, #20]
 800ac24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	444b      	add	r3, r9
 800ac30:	106d      	asrs	r5, r5, #1
 800ac32:	429d      	cmp	r5, r3
 800ac34:	bf38      	it	cc
 800ac36:	461d      	movcc	r5, r3
 800ac38:	0553      	lsls	r3, r2, #21
 800ac3a:	d531      	bpl.n	800aca0 <__ssputs_r+0xa0>
 800ac3c:	4629      	mov	r1, r5
 800ac3e:	f7ff ff6b 	bl	800ab18 <_malloc_r>
 800ac42:	4606      	mov	r6, r0
 800ac44:	b950      	cbnz	r0, 800ac5c <__ssputs_r+0x5c>
 800ac46:	230c      	movs	r3, #12
 800ac48:	f8ca 3000 	str.w	r3, [sl]
 800ac4c:	89a3      	ldrh	r3, [r4, #12]
 800ac4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac52:	81a3      	strh	r3, [r4, #12]
 800ac54:	f04f 30ff 	mov.w	r0, #4294967295
 800ac58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac5c:	6921      	ldr	r1, [r4, #16]
 800ac5e:	464a      	mov	r2, r9
 800ac60:	f7fe f82c 	bl	8008cbc <memcpy>
 800ac64:	89a3      	ldrh	r3, [r4, #12]
 800ac66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac6e:	81a3      	strh	r3, [r4, #12]
 800ac70:	6126      	str	r6, [r4, #16]
 800ac72:	6165      	str	r5, [r4, #20]
 800ac74:	444e      	add	r6, r9
 800ac76:	eba5 0509 	sub.w	r5, r5, r9
 800ac7a:	6026      	str	r6, [r4, #0]
 800ac7c:	60a5      	str	r5, [r4, #8]
 800ac7e:	463e      	mov	r6, r7
 800ac80:	42be      	cmp	r6, r7
 800ac82:	d900      	bls.n	800ac86 <__ssputs_r+0x86>
 800ac84:	463e      	mov	r6, r7
 800ac86:	6820      	ldr	r0, [r4, #0]
 800ac88:	4632      	mov	r2, r6
 800ac8a:	4641      	mov	r1, r8
 800ac8c:	f000 f966 	bl	800af5c <memmove>
 800ac90:	68a3      	ldr	r3, [r4, #8]
 800ac92:	1b9b      	subs	r3, r3, r6
 800ac94:	60a3      	str	r3, [r4, #8]
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	4433      	add	r3, r6
 800ac9a:	6023      	str	r3, [r4, #0]
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	e7db      	b.n	800ac58 <__ssputs_r+0x58>
 800aca0:	462a      	mov	r2, r5
 800aca2:	f000 f981 	bl	800afa8 <_realloc_r>
 800aca6:	4606      	mov	r6, r0
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d1e1      	bne.n	800ac70 <__ssputs_r+0x70>
 800acac:	6921      	ldr	r1, [r4, #16]
 800acae:	4650      	mov	r0, sl
 800acb0:	f7ff fec6 	bl	800aa40 <_free_r>
 800acb4:	e7c7      	b.n	800ac46 <__ssputs_r+0x46>
	...

0800acb8 <_svfiprintf_r>:
 800acb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbc:	4698      	mov	r8, r3
 800acbe:	898b      	ldrh	r3, [r1, #12]
 800acc0:	061b      	lsls	r3, r3, #24
 800acc2:	b09d      	sub	sp, #116	; 0x74
 800acc4:	4607      	mov	r7, r0
 800acc6:	460d      	mov	r5, r1
 800acc8:	4614      	mov	r4, r2
 800acca:	d50e      	bpl.n	800acea <_svfiprintf_r+0x32>
 800accc:	690b      	ldr	r3, [r1, #16]
 800acce:	b963      	cbnz	r3, 800acea <_svfiprintf_r+0x32>
 800acd0:	2140      	movs	r1, #64	; 0x40
 800acd2:	f7ff ff21 	bl	800ab18 <_malloc_r>
 800acd6:	6028      	str	r0, [r5, #0]
 800acd8:	6128      	str	r0, [r5, #16]
 800acda:	b920      	cbnz	r0, 800ace6 <_svfiprintf_r+0x2e>
 800acdc:	230c      	movs	r3, #12
 800acde:	603b      	str	r3, [r7, #0]
 800ace0:	f04f 30ff 	mov.w	r0, #4294967295
 800ace4:	e0d1      	b.n	800ae8a <_svfiprintf_r+0x1d2>
 800ace6:	2340      	movs	r3, #64	; 0x40
 800ace8:	616b      	str	r3, [r5, #20]
 800acea:	2300      	movs	r3, #0
 800acec:	9309      	str	r3, [sp, #36]	; 0x24
 800acee:	2320      	movs	r3, #32
 800acf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800acf8:	2330      	movs	r3, #48	; 0x30
 800acfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aea4 <_svfiprintf_r+0x1ec>
 800acfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad02:	f04f 0901 	mov.w	r9, #1
 800ad06:	4623      	mov	r3, r4
 800ad08:	469a      	mov	sl, r3
 800ad0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad0e:	b10a      	cbz	r2, 800ad14 <_svfiprintf_r+0x5c>
 800ad10:	2a25      	cmp	r2, #37	; 0x25
 800ad12:	d1f9      	bne.n	800ad08 <_svfiprintf_r+0x50>
 800ad14:	ebba 0b04 	subs.w	fp, sl, r4
 800ad18:	d00b      	beq.n	800ad32 <_svfiprintf_r+0x7a>
 800ad1a:	465b      	mov	r3, fp
 800ad1c:	4622      	mov	r2, r4
 800ad1e:	4629      	mov	r1, r5
 800ad20:	4638      	mov	r0, r7
 800ad22:	f7ff ff6d 	bl	800ac00 <__ssputs_r>
 800ad26:	3001      	adds	r0, #1
 800ad28:	f000 80aa 	beq.w	800ae80 <_svfiprintf_r+0x1c8>
 800ad2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad2e:	445a      	add	r2, fp
 800ad30:	9209      	str	r2, [sp, #36]	; 0x24
 800ad32:	f89a 3000 	ldrb.w	r3, [sl]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 80a2 	beq.w	800ae80 <_svfiprintf_r+0x1c8>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad46:	f10a 0a01 	add.w	sl, sl, #1
 800ad4a:	9304      	str	r3, [sp, #16]
 800ad4c:	9307      	str	r3, [sp, #28]
 800ad4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad52:	931a      	str	r3, [sp, #104]	; 0x68
 800ad54:	4654      	mov	r4, sl
 800ad56:	2205      	movs	r2, #5
 800ad58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5c:	4851      	ldr	r0, [pc, #324]	; (800aea4 <_svfiprintf_r+0x1ec>)
 800ad5e:	f7f5 fa3f 	bl	80001e0 <memchr>
 800ad62:	9a04      	ldr	r2, [sp, #16]
 800ad64:	b9d8      	cbnz	r0, 800ad9e <_svfiprintf_r+0xe6>
 800ad66:	06d0      	lsls	r0, r2, #27
 800ad68:	bf44      	itt	mi
 800ad6a:	2320      	movmi	r3, #32
 800ad6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad70:	0711      	lsls	r1, r2, #28
 800ad72:	bf44      	itt	mi
 800ad74:	232b      	movmi	r3, #43	; 0x2b
 800ad76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad80:	d015      	beq.n	800adae <_svfiprintf_r+0xf6>
 800ad82:	9a07      	ldr	r2, [sp, #28]
 800ad84:	4654      	mov	r4, sl
 800ad86:	2000      	movs	r0, #0
 800ad88:	f04f 0c0a 	mov.w	ip, #10
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad92:	3b30      	subs	r3, #48	; 0x30
 800ad94:	2b09      	cmp	r3, #9
 800ad96:	d94e      	bls.n	800ae36 <_svfiprintf_r+0x17e>
 800ad98:	b1b0      	cbz	r0, 800adc8 <_svfiprintf_r+0x110>
 800ad9a:	9207      	str	r2, [sp, #28]
 800ad9c:	e014      	b.n	800adc8 <_svfiprintf_r+0x110>
 800ad9e:	eba0 0308 	sub.w	r3, r0, r8
 800ada2:	fa09 f303 	lsl.w	r3, r9, r3
 800ada6:	4313      	orrs	r3, r2
 800ada8:	9304      	str	r3, [sp, #16]
 800adaa:	46a2      	mov	sl, r4
 800adac:	e7d2      	b.n	800ad54 <_svfiprintf_r+0x9c>
 800adae:	9b03      	ldr	r3, [sp, #12]
 800adb0:	1d19      	adds	r1, r3, #4
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	9103      	str	r1, [sp, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	bfbb      	ittet	lt
 800adba:	425b      	neglt	r3, r3
 800adbc:	f042 0202 	orrlt.w	r2, r2, #2
 800adc0:	9307      	strge	r3, [sp, #28]
 800adc2:	9307      	strlt	r3, [sp, #28]
 800adc4:	bfb8      	it	lt
 800adc6:	9204      	strlt	r2, [sp, #16]
 800adc8:	7823      	ldrb	r3, [r4, #0]
 800adca:	2b2e      	cmp	r3, #46	; 0x2e
 800adcc:	d10c      	bne.n	800ade8 <_svfiprintf_r+0x130>
 800adce:	7863      	ldrb	r3, [r4, #1]
 800add0:	2b2a      	cmp	r3, #42	; 0x2a
 800add2:	d135      	bne.n	800ae40 <_svfiprintf_r+0x188>
 800add4:	9b03      	ldr	r3, [sp, #12]
 800add6:	1d1a      	adds	r2, r3, #4
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	9203      	str	r2, [sp, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	bfb8      	it	lt
 800ade0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ade4:	3402      	adds	r4, #2
 800ade6:	9305      	str	r3, [sp, #20]
 800ade8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aeb4 <_svfiprintf_r+0x1fc>
 800adec:	7821      	ldrb	r1, [r4, #0]
 800adee:	2203      	movs	r2, #3
 800adf0:	4650      	mov	r0, sl
 800adf2:	f7f5 f9f5 	bl	80001e0 <memchr>
 800adf6:	b140      	cbz	r0, 800ae0a <_svfiprintf_r+0x152>
 800adf8:	2340      	movs	r3, #64	; 0x40
 800adfa:	eba0 000a 	sub.w	r0, r0, sl
 800adfe:	fa03 f000 	lsl.w	r0, r3, r0
 800ae02:	9b04      	ldr	r3, [sp, #16]
 800ae04:	4303      	orrs	r3, r0
 800ae06:	3401      	adds	r4, #1
 800ae08:	9304      	str	r3, [sp, #16]
 800ae0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae0e:	4826      	ldr	r0, [pc, #152]	; (800aea8 <_svfiprintf_r+0x1f0>)
 800ae10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae14:	2206      	movs	r2, #6
 800ae16:	f7f5 f9e3 	bl	80001e0 <memchr>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d038      	beq.n	800ae90 <_svfiprintf_r+0x1d8>
 800ae1e:	4b23      	ldr	r3, [pc, #140]	; (800aeac <_svfiprintf_r+0x1f4>)
 800ae20:	bb1b      	cbnz	r3, 800ae6a <_svfiprintf_r+0x1b2>
 800ae22:	9b03      	ldr	r3, [sp, #12]
 800ae24:	3307      	adds	r3, #7
 800ae26:	f023 0307 	bic.w	r3, r3, #7
 800ae2a:	3308      	adds	r3, #8
 800ae2c:	9303      	str	r3, [sp, #12]
 800ae2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae30:	4433      	add	r3, r6
 800ae32:	9309      	str	r3, [sp, #36]	; 0x24
 800ae34:	e767      	b.n	800ad06 <_svfiprintf_r+0x4e>
 800ae36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	2001      	movs	r0, #1
 800ae3e:	e7a5      	b.n	800ad8c <_svfiprintf_r+0xd4>
 800ae40:	2300      	movs	r3, #0
 800ae42:	3401      	adds	r4, #1
 800ae44:	9305      	str	r3, [sp, #20]
 800ae46:	4619      	mov	r1, r3
 800ae48:	f04f 0c0a 	mov.w	ip, #10
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae52:	3a30      	subs	r2, #48	; 0x30
 800ae54:	2a09      	cmp	r2, #9
 800ae56:	d903      	bls.n	800ae60 <_svfiprintf_r+0x1a8>
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d0c5      	beq.n	800ade8 <_svfiprintf_r+0x130>
 800ae5c:	9105      	str	r1, [sp, #20]
 800ae5e:	e7c3      	b.n	800ade8 <_svfiprintf_r+0x130>
 800ae60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae64:	4604      	mov	r4, r0
 800ae66:	2301      	movs	r3, #1
 800ae68:	e7f0      	b.n	800ae4c <_svfiprintf_r+0x194>
 800ae6a:	ab03      	add	r3, sp, #12
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	462a      	mov	r2, r5
 800ae70:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <_svfiprintf_r+0x1f8>)
 800ae72:	a904      	add	r1, sp, #16
 800ae74:	4638      	mov	r0, r7
 800ae76:	f7fd ffd7 	bl	8008e28 <_printf_float>
 800ae7a:	1c42      	adds	r2, r0, #1
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	d1d6      	bne.n	800ae2e <_svfiprintf_r+0x176>
 800ae80:	89ab      	ldrh	r3, [r5, #12]
 800ae82:	065b      	lsls	r3, r3, #25
 800ae84:	f53f af2c 	bmi.w	800ace0 <_svfiprintf_r+0x28>
 800ae88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae8a:	b01d      	add	sp, #116	; 0x74
 800ae8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae90:	ab03      	add	r3, sp, #12
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	462a      	mov	r2, r5
 800ae96:	4b06      	ldr	r3, [pc, #24]	; (800aeb0 <_svfiprintf_r+0x1f8>)
 800ae98:	a904      	add	r1, sp, #16
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	f7fe fa68 	bl	8009370 <_printf_i>
 800aea0:	e7eb      	b.n	800ae7a <_svfiprintf_r+0x1c2>
 800aea2:	bf00      	nop
 800aea4:	0800dc2c 	.word	0x0800dc2c
 800aea8:	0800dc36 	.word	0x0800dc36
 800aeac:	08008e29 	.word	0x08008e29
 800aeb0:	0800ac01 	.word	0x0800ac01
 800aeb4:	0800dc32 	.word	0x0800dc32

0800aeb8 <_sbrk_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	4d06      	ldr	r5, [pc, #24]	; (800aed4 <_sbrk_r+0x1c>)
 800aebc:	2300      	movs	r3, #0
 800aebe:	4604      	mov	r4, r0
 800aec0:	4608      	mov	r0, r1
 800aec2:	602b      	str	r3, [r5, #0]
 800aec4:	f7f7 ff84 	bl	8002dd0 <_sbrk>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_sbrk_r+0x1a>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_sbrk_r+0x1a>
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	20000f4c 	.word	0x20000f4c

0800aed8 <__assert_func>:
 800aed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aeda:	4614      	mov	r4, r2
 800aedc:	461a      	mov	r2, r3
 800aede:	4b09      	ldr	r3, [pc, #36]	; (800af04 <__assert_func+0x2c>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4605      	mov	r5, r0
 800aee4:	68d8      	ldr	r0, [r3, #12]
 800aee6:	b14c      	cbz	r4, 800aefc <__assert_func+0x24>
 800aee8:	4b07      	ldr	r3, [pc, #28]	; (800af08 <__assert_func+0x30>)
 800aeea:	9100      	str	r1, [sp, #0]
 800aeec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aef0:	4906      	ldr	r1, [pc, #24]	; (800af0c <__assert_func+0x34>)
 800aef2:	462b      	mov	r3, r5
 800aef4:	f000 f80e 	bl	800af14 <fiprintf>
 800aef8:	f000 faac 	bl	800b454 <abort>
 800aefc:	4b04      	ldr	r3, [pc, #16]	; (800af10 <__assert_func+0x38>)
 800aefe:	461c      	mov	r4, r3
 800af00:	e7f3      	b.n	800aeea <__assert_func+0x12>
 800af02:	bf00      	nop
 800af04:	2000001c 	.word	0x2000001c
 800af08:	0800dc3d 	.word	0x0800dc3d
 800af0c:	0800dc4a 	.word	0x0800dc4a
 800af10:	0800dc78 	.word	0x0800dc78

0800af14 <fiprintf>:
 800af14:	b40e      	push	{r1, r2, r3}
 800af16:	b503      	push	{r0, r1, lr}
 800af18:	4601      	mov	r1, r0
 800af1a:	ab03      	add	r3, sp, #12
 800af1c:	4805      	ldr	r0, [pc, #20]	; (800af34 <fiprintf+0x20>)
 800af1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af22:	6800      	ldr	r0, [r0, #0]
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	f000 f897 	bl	800b058 <_vfiprintf_r>
 800af2a:	b002      	add	sp, #8
 800af2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af30:	b003      	add	sp, #12
 800af32:	4770      	bx	lr
 800af34:	2000001c 	.word	0x2000001c

0800af38 <__ascii_mbtowc>:
 800af38:	b082      	sub	sp, #8
 800af3a:	b901      	cbnz	r1, 800af3e <__ascii_mbtowc+0x6>
 800af3c:	a901      	add	r1, sp, #4
 800af3e:	b142      	cbz	r2, 800af52 <__ascii_mbtowc+0x1a>
 800af40:	b14b      	cbz	r3, 800af56 <__ascii_mbtowc+0x1e>
 800af42:	7813      	ldrb	r3, [r2, #0]
 800af44:	600b      	str	r3, [r1, #0]
 800af46:	7812      	ldrb	r2, [r2, #0]
 800af48:	1e10      	subs	r0, r2, #0
 800af4a:	bf18      	it	ne
 800af4c:	2001      	movne	r0, #1
 800af4e:	b002      	add	sp, #8
 800af50:	4770      	bx	lr
 800af52:	4610      	mov	r0, r2
 800af54:	e7fb      	b.n	800af4e <__ascii_mbtowc+0x16>
 800af56:	f06f 0001 	mvn.w	r0, #1
 800af5a:	e7f8      	b.n	800af4e <__ascii_mbtowc+0x16>

0800af5c <memmove>:
 800af5c:	4288      	cmp	r0, r1
 800af5e:	b510      	push	{r4, lr}
 800af60:	eb01 0402 	add.w	r4, r1, r2
 800af64:	d902      	bls.n	800af6c <memmove+0x10>
 800af66:	4284      	cmp	r4, r0
 800af68:	4623      	mov	r3, r4
 800af6a:	d807      	bhi.n	800af7c <memmove+0x20>
 800af6c:	1e43      	subs	r3, r0, #1
 800af6e:	42a1      	cmp	r1, r4
 800af70:	d008      	beq.n	800af84 <memmove+0x28>
 800af72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af7a:	e7f8      	b.n	800af6e <memmove+0x12>
 800af7c:	4402      	add	r2, r0
 800af7e:	4601      	mov	r1, r0
 800af80:	428a      	cmp	r2, r1
 800af82:	d100      	bne.n	800af86 <memmove+0x2a>
 800af84:	bd10      	pop	{r4, pc}
 800af86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af8e:	e7f7      	b.n	800af80 <memmove+0x24>

0800af90 <__malloc_lock>:
 800af90:	4801      	ldr	r0, [pc, #4]	; (800af98 <__malloc_lock+0x8>)
 800af92:	f000 bc1f 	b.w	800b7d4 <__retarget_lock_acquire_recursive>
 800af96:	bf00      	nop
 800af98:	20000f50 	.word	0x20000f50

0800af9c <__malloc_unlock>:
 800af9c:	4801      	ldr	r0, [pc, #4]	; (800afa4 <__malloc_unlock+0x8>)
 800af9e:	f000 bc1a 	b.w	800b7d6 <__retarget_lock_release_recursive>
 800afa2:	bf00      	nop
 800afa4:	20000f50 	.word	0x20000f50

0800afa8 <_realloc_r>:
 800afa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afac:	4680      	mov	r8, r0
 800afae:	4614      	mov	r4, r2
 800afb0:	460e      	mov	r6, r1
 800afb2:	b921      	cbnz	r1, 800afbe <_realloc_r+0x16>
 800afb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afb8:	4611      	mov	r1, r2
 800afba:	f7ff bdad 	b.w	800ab18 <_malloc_r>
 800afbe:	b92a      	cbnz	r2, 800afcc <_realloc_r+0x24>
 800afc0:	f7ff fd3e 	bl	800aa40 <_free_r>
 800afc4:	4625      	mov	r5, r4
 800afc6:	4628      	mov	r0, r5
 800afc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afcc:	f000 fc6a 	bl	800b8a4 <_malloc_usable_size_r>
 800afd0:	4284      	cmp	r4, r0
 800afd2:	4607      	mov	r7, r0
 800afd4:	d802      	bhi.n	800afdc <_realloc_r+0x34>
 800afd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afda:	d812      	bhi.n	800b002 <_realloc_r+0x5a>
 800afdc:	4621      	mov	r1, r4
 800afde:	4640      	mov	r0, r8
 800afe0:	f7ff fd9a 	bl	800ab18 <_malloc_r>
 800afe4:	4605      	mov	r5, r0
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d0ed      	beq.n	800afc6 <_realloc_r+0x1e>
 800afea:	42bc      	cmp	r4, r7
 800afec:	4622      	mov	r2, r4
 800afee:	4631      	mov	r1, r6
 800aff0:	bf28      	it	cs
 800aff2:	463a      	movcs	r2, r7
 800aff4:	f7fd fe62 	bl	8008cbc <memcpy>
 800aff8:	4631      	mov	r1, r6
 800affa:	4640      	mov	r0, r8
 800affc:	f7ff fd20 	bl	800aa40 <_free_r>
 800b000:	e7e1      	b.n	800afc6 <_realloc_r+0x1e>
 800b002:	4635      	mov	r5, r6
 800b004:	e7df      	b.n	800afc6 <_realloc_r+0x1e>

0800b006 <__sfputc_r>:
 800b006:	6893      	ldr	r3, [r2, #8]
 800b008:	3b01      	subs	r3, #1
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	b410      	push	{r4}
 800b00e:	6093      	str	r3, [r2, #8]
 800b010:	da08      	bge.n	800b024 <__sfputc_r+0x1e>
 800b012:	6994      	ldr	r4, [r2, #24]
 800b014:	42a3      	cmp	r3, r4
 800b016:	db01      	blt.n	800b01c <__sfputc_r+0x16>
 800b018:	290a      	cmp	r1, #10
 800b01a:	d103      	bne.n	800b024 <__sfputc_r+0x1e>
 800b01c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b020:	f000 b94a 	b.w	800b2b8 <__swbuf_r>
 800b024:	6813      	ldr	r3, [r2, #0]
 800b026:	1c58      	adds	r0, r3, #1
 800b028:	6010      	str	r0, [r2, #0]
 800b02a:	7019      	strb	r1, [r3, #0]
 800b02c:	4608      	mov	r0, r1
 800b02e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <__sfputs_r>:
 800b034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b036:	4606      	mov	r6, r0
 800b038:	460f      	mov	r7, r1
 800b03a:	4614      	mov	r4, r2
 800b03c:	18d5      	adds	r5, r2, r3
 800b03e:	42ac      	cmp	r4, r5
 800b040:	d101      	bne.n	800b046 <__sfputs_r+0x12>
 800b042:	2000      	movs	r0, #0
 800b044:	e007      	b.n	800b056 <__sfputs_r+0x22>
 800b046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b04a:	463a      	mov	r2, r7
 800b04c:	4630      	mov	r0, r6
 800b04e:	f7ff ffda 	bl	800b006 <__sfputc_r>
 800b052:	1c43      	adds	r3, r0, #1
 800b054:	d1f3      	bne.n	800b03e <__sfputs_r+0xa>
 800b056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b058 <_vfiprintf_r>:
 800b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05c:	460d      	mov	r5, r1
 800b05e:	b09d      	sub	sp, #116	; 0x74
 800b060:	4614      	mov	r4, r2
 800b062:	4698      	mov	r8, r3
 800b064:	4606      	mov	r6, r0
 800b066:	b118      	cbz	r0, 800b070 <_vfiprintf_r+0x18>
 800b068:	6983      	ldr	r3, [r0, #24]
 800b06a:	b90b      	cbnz	r3, 800b070 <_vfiprintf_r+0x18>
 800b06c:	f000 fb14 	bl	800b698 <__sinit>
 800b070:	4b89      	ldr	r3, [pc, #548]	; (800b298 <_vfiprintf_r+0x240>)
 800b072:	429d      	cmp	r5, r3
 800b074:	d11b      	bne.n	800b0ae <_vfiprintf_r+0x56>
 800b076:	6875      	ldr	r5, [r6, #4]
 800b078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b07a:	07d9      	lsls	r1, r3, #31
 800b07c:	d405      	bmi.n	800b08a <_vfiprintf_r+0x32>
 800b07e:	89ab      	ldrh	r3, [r5, #12]
 800b080:	059a      	lsls	r2, r3, #22
 800b082:	d402      	bmi.n	800b08a <_vfiprintf_r+0x32>
 800b084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b086:	f000 fba5 	bl	800b7d4 <__retarget_lock_acquire_recursive>
 800b08a:	89ab      	ldrh	r3, [r5, #12]
 800b08c:	071b      	lsls	r3, r3, #28
 800b08e:	d501      	bpl.n	800b094 <_vfiprintf_r+0x3c>
 800b090:	692b      	ldr	r3, [r5, #16]
 800b092:	b9eb      	cbnz	r3, 800b0d0 <_vfiprintf_r+0x78>
 800b094:	4629      	mov	r1, r5
 800b096:	4630      	mov	r0, r6
 800b098:	f000 f96e 	bl	800b378 <__swsetup_r>
 800b09c:	b1c0      	cbz	r0, 800b0d0 <_vfiprintf_r+0x78>
 800b09e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0a0:	07dc      	lsls	r4, r3, #31
 800b0a2:	d50e      	bpl.n	800b0c2 <_vfiprintf_r+0x6a>
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a8:	b01d      	add	sp, #116	; 0x74
 800b0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ae:	4b7b      	ldr	r3, [pc, #492]	; (800b29c <_vfiprintf_r+0x244>)
 800b0b0:	429d      	cmp	r5, r3
 800b0b2:	d101      	bne.n	800b0b8 <_vfiprintf_r+0x60>
 800b0b4:	68b5      	ldr	r5, [r6, #8]
 800b0b6:	e7df      	b.n	800b078 <_vfiprintf_r+0x20>
 800b0b8:	4b79      	ldr	r3, [pc, #484]	; (800b2a0 <_vfiprintf_r+0x248>)
 800b0ba:	429d      	cmp	r5, r3
 800b0bc:	bf08      	it	eq
 800b0be:	68f5      	ldreq	r5, [r6, #12]
 800b0c0:	e7da      	b.n	800b078 <_vfiprintf_r+0x20>
 800b0c2:	89ab      	ldrh	r3, [r5, #12]
 800b0c4:	0598      	lsls	r0, r3, #22
 800b0c6:	d4ed      	bmi.n	800b0a4 <_vfiprintf_r+0x4c>
 800b0c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ca:	f000 fb84 	bl	800b7d6 <__retarget_lock_release_recursive>
 800b0ce:	e7e9      	b.n	800b0a4 <_vfiprintf_r+0x4c>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b0d4:	2320      	movs	r3, #32
 800b0d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0da:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0de:	2330      	movs	r3, #48	; 0x30
 800b0e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b2a4 <_vfiprintf_r+0x24c>
 800b0e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0e8:	f04f 0901 	mov.w	r9, #1
 800b0ec:	4623      	mov	r3, r4
 800b0ee:	469a      	mov	sl, r3
 800b0f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0f4:	b10a      	cbz	r2, 800b0fa <_vfiprintf_r+0xa2>
 800b0f6:	2a25      	cmp	r2, #37	; 0x25
 800b0f8:	d1f9      	bne.n	800b0ee <_vfiprintf_r+0x96>
 800b0fa:	ebba 0b04 	subs.w	fp, sl, r4
 800b0fe:	d00b      	beq.n	800b118 <_vfiprintf_r+0xc0>
 800b100:	465b      	mov	r3, fp
 800b102:	4622      	mov	r2, r4
 800b104:	4629      	mov	r1, r5
 800b106:	4630      	mov	r0, r6
 800b108:	f7ff ff94 	bl	800b034 <__sfputs_r>
 800b10c:	3001      	adds	r0, #1
 800b10e:	f000 80aa 	beq.w	800b266 <_vfiprintf_r+0x20e>
 800b112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b114:	445a      	add	r2, fp
 800b116:	9209      	str	r2, [sp, #36]	; 0x24
 800b118:	f89a 3000 	ldrb.w	r3, [sl]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f000 80a2 	beq.w	800b266 <_vfiprintf_r+0x20e>
 800b122:	2300      	movs	r3, #0
 800b124:	f04f 32ff 	mov.w	r2, #4294967295
 800b128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b12c:	f10a 0a01 	add.w	sl, sl, #1
 800b130:	9304      	str	r3, [sp, #16]
 800b132:	9307      	str	r3, [sp, #28]
 800b134:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b138:	931a      	str	r3, [sp, #104]	; 0x68
 800b13a:	4654      	mov	r4, sl
 800b13c:	2205      	movs	r2, #5
 800b13e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b142:	4858      	ldr	r0, [pc, #352]	; (800b2a4 <_vfiprintf_r+0x24c>)
 800b144:	f7f5 f84c 	bl	80001e0 <memchr>
 800b148:	9a04      	ldr	r2, [sp, #16]
 800b14a:	b9d8      	cbnz	r0, 800b184 <_vfiprintf_r+0x12c>
 800b14c:	06d1      	lsls	r1, r2, #27
 800b14e:	bf44      	itt	mi
 800b150:	2320      	movmi	r3, #32
 800b152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b156:	0713      	lsls	r3, r2, #28
 800b158:	bf44      	itt	mi
 800b15a:	232b      	movmi	r3, #43	; 0x2b
 800b15c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b160:	f89a 3000 	ldrb.w	r3, [sl]
 800b164:	2b2a      	cmp	r3, #42	; 0x2a
 800b166:	d015      	beq.n	800b194 <_vfiprintf_r+0x13c>
 800b168:	9a07      	ldr	r2, [sp, #28]
 800b16a:	4654      	mov	r4, sl
 800b16c:	2000      	movs	r0, #0
 800b16e:	f04f 0c0a 	mov.w	ip, #10
 800b172:	4621      	mov	r1, r4
 800b174:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b178:	3b30      	subs	r3, #48	; 0x30
 800b17a:	2b09      	cmp	r3, #9
 800b17c:	d94e      	bls.n	800b21c <_vfiprintf_r+0x1c4>
 800b17e:	b1b0      	cbz	r0, 800b1ae <_vfiprintf_r+0x156>
 800b180:	9207      	str	r2, [sp, #28]
 800b182:	e014      	b.n	800b1ae <_vfiprintf_r+0x156>
 800b184:	eba0 0308 	sub.w	r3, r0, r8
 800b188:	fa09 f303 	lsl.w	r3, r9, r3
 800b18c:	4313      	orrs	r3, r2
 800b18e:	9304      	str	r3, [sp, #16]
 800b190:	46a2      	mov	sl, r4
 800b192:	e7d2      	b.n	800b13a <_vfiprintf_r+0xe2>
 800b194:	9b03      	ldr	r3, [sp, #12]
 800b196:	1d19      	adds	r1, r3, #4
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	9103      	str	r1, [sp, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	bfbb      	ittet	lt
 800b1a0:	425b      	neglt	r3, r3
 800b1a2:	f042 0202 	orrlt.w	r2, r2, #2
 800b1a6:	9307      	strge	r3, [sp, #28]
 800b1a8:	9307      	strlt	r3, [sp, #28]
 800b1aa:	bfb8      	it	lt
 800b1ac:	9204      	strlt	r2, [sp, #16]
 800b1ae:	7823      	ldrb	r3, [r4, #0]
 800b1b0:	2b2e      	cmp	r3, #46	; 0x2e
 800b1b2:	d10c      	bne.n	800b1ce <_vfiprintf_r+0x176>
 800b1b4:	7863      	ldrb	r3, [r4, #1]
 800b1b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b1b8:	d135      	bne.n	800b226 <_vfiprintf_r+0x1ce>
 800b1ba:	9b03      	ldr	r3, [sp, #12]
 800b1bc:	1d1a      	adds	r2, r3, #4
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	9203      	str	r2, [sp, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	bfb8      	it	lt
 800b1c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1ca:	3402      	adds	r4, #2
 800b1cc:	9305      	str	r3, [sp, #20]
 800b1ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b2b4 <_vfiprintf_r+0x25c>
 800b1d2:	7821      	ldrb	r1, [r4, #0]
 800b1d4:	2203      	movs	r2, #3
 800b1d6:	4650      	mov	r0, sl
 800b1d8:	f7f5 f802 	bl	80001e0 <memchr>
 800b1dc:	b140      	cbz	r0, 800b1f0 <_vfiprintf_r+0x198>
 800b1de:	2340      	movs	r3, #64	; 0x40
 800b1e0:	eba0 000a 	sub.w	r0, r0, sl
 800b1e4:	fa03 f000 	lsl.w	r0, r3, r0
 800b1e8:	9b04      	ldr	r3, [sp, #16]
 800b1ea:	4303      	orrs	r3, r0
 800b1ec:	3401      	adds	r4, #1
 800b1ee:	9304      	str	r3, [sp, #16]
 800b1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f4:	482c      	ldr	r0, [pc, #176]	; (800b2a8 <_vfiprintf_r+0x250>)
 800b1f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1fa:	2206      	movs	r2, #6
 800b1fc:	f7f4 fff0 	bl	80001e0 <memchr>
 800b200:	2800      	cmp	r0, #0
 800b202:	d03f      	beq.n	800b284 <_vfiprintf_r+0x22c>
 800b204:	4b29      	ldr	r3, [pc, #164]	; (800b2ac <_vfiprintf_r+0x254>)
 800b206:	bb1b      	cbnz	r3, 800b250 <_vfiprintf_r+0x1f8>
 800b208:	9b03      	ldr	r3, [sp, #12]
 800b20a:	3307      	adds	r3, #7
 800b20c:	f023 0307 	bic.w	r3, r3, #7
 800b210:	3308      	adds	r3, #8
 800b212:	9303      	str	r3, [sp, #12]
 800b214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b216:	443b      	add	r3, r7
 800b218:	9309      	str	r3, [sp, #36]	; 0x24
 800b21a:	e767      	b.n	800b0ec <_vfiprintf_r+0x94>
 800b21c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b220:	460c      	mov	r4, r1
 800b222:	2001      	movs	r0, #1
 800b224:	e7a5      	b.n	800b172 <_vfiprintf_r+0x11a>
 800b226:	2300      	movs	r3, #0
 800b228:	3401      	adds	r4, #1
 800b22a:	9305      	str	r3, [sp, #20]
 800b22c:	4619      	mov	r1, r3
 800b22e:	f04f 0c0a 	mov.w	ip, #10
 800b232:	4620      	mov	r0, r4
 800b234:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b238:	3a30      	subs	r2, #48	; 0x30
 800b23a:	2a09      	cmp	r2, #9
 800b23c:	d903      	bls.n	800b246 <_vfiprintf_r+0x1ee>
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d0c5      	beq.n	800b1ce <_vfiprintf_r+0x176>
 800b242:	9105      	str	r1, [sp, #20]
 800b244:	e7c3      	b.n	800b1ce <_vfiprintf_r+0x176>
 800b246:	fb0c 2101 	mla	r1, ip, r1, r2
 800b24a:	4604      	mov	r4, r0
 800b24c:	2301      	movs	r3, #1
 800b24e:	e7f0      	b.n	800b232 <_vfiprintf_r+0x1da>
 800b250:	ab03      	add	r3, sp, #12
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	462a      	mov	r2, r5
 800b256:	4b16      	ldr	r3, [pc, #88]	; (800b2b0 <_vfiprintf_r+0x258>)
 800b258:	a904      	add	r1, sp, #16
 800b25a:	4630      	mov	r0, r6
 800b25c:	f7fd fde4 	bl	8008e28 <_printf_float>
 800b260:	4607      	mov	r7, r0
 800b262:	1c78      	adds	r0, r7, #1
 800b264:	d1d6      	bne.n	800b214 <_vfiprintf_r+0x1bc>
 800b266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b268:	07d9      	lsls	r1, r3, #31
 800b26a:	d405      	bmi.n	800b278 <_vfiprintf_r+0x220>
 800b26c:	89ab      	ldrh	r3, [r5, #12]
 800b26e:	059a      	lsls	r2, r3, #22
 800b270:	d402      	bmi.n	800b278 <_vfiprintf_r+0x220>
 800b272:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b274:	f000 faaf 	bl	800b7d6 <__retarget_lock_release_recursive>
 800b278:	89ab      	ldrh	r3, [r5, #12]
 800b27a:	065b      	lsls	r3, r3, #25
 800b27c:	f53f af12 	bmi.w	800b0a4 <_vfiprintf_r+0x4c>
 800b280:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b282:	e711      	b.n	800b0a8 <_vfiprintf_r+0x50>
 800b284:	ab03      	add	r3, sp, #12
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	462a      	mov	r2, r5
 800b28a:	4b09      	ldr	r3, [pc, #36]	; (800b2b0 <_vfiprintf_r+0x258>)
 800b28c:	a904      	add	r1, sp, #16
 800b28e:	4630      	mov	r0, r6
 800b290:	f7fe f86e 	bl	8009370 <_printf_i>
 800b294:	e7e4      	b.n	800b260 <_vfiprintf_r+0x208>
 800b296:	bf00      	nop
 800b298:	0800dda4 	.word	0x0800dda4
 800b29c:	0800ddc4 	.word	0x0800ddc4
 800b2a0:	0800dd84 	.word	0x0800dd84
 800b2a4:	0800dc2c 	.word	0x0800dc2c
 800b2a8:	0800dc36 	.word	0x0800dc36
 800b2ac:	08008e29 	.word	0x08008e29
 800b2b0:	0800b035 	.word	0x0800b035
 800b2b4:	0800dc32 	.word	0x0800dc32

0800b2b8 <__swbuf_r>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	460e      	mov	r6, r1
 800b2bc:	4614      	mov	r4, r2
 800b2be:	4605      	mov	r5, r0
 800b2c0:	b118      	cbz	r0, 800b2ca <__swbuf_r+0x12>
 800b2c2:	6983      	ldr	r3, [r0, #24]
 800b2c4:	b90b      	cbnz	r3, 800b2ca <__swbuf_r+0x12>
 800b2c6:	f000 f9e7 	bl	800b698 <__sinit>
 800b2ca:	4b21      	ldr	r3, [pc, #132]	; (800b350 <__swbuf_r+0x98>)
 800b2cc:	429c      	cmp	r4, r3
 800b2ce:	d12b      	bne.n	800b328 <__swbuf_r+0x70>
 800b2d0:	686c      	ldr	r4, [r5, #4]
 800b2d2:	69a3      	ldr	r3, [r4, #24]
 800b2d4:	60a3      	str	r3, [r4, #8]
 800b2d6:	89a3      	ldrh	r3, [r4, #12]
 800b2d8:	071a      	lsls	r2, r3, #28
 800b2da:	d52f      	bpl.n	800b33c <__swbuf_r+0x84>
 800b2dc:	6923      	ldr	r3, [r4, #16]
 800b2de:	b36b      	cbz	r3, 800b33c <__swbuf_r+0x84>
 800b2e0:	6923      	ldr	r3, [r4, #16]
 800b2e2:	6820      	ldr	r0, [r4, #0]
 800b2e4:	1ac0      	subs	r0, r0, r3
 800b2e6:	6963      	ldr	r3, [r4, #20]
 800b2e8:	b2f6      	uxtb	r6, r6
 800b2ea:	4283      	cmp	r3, r0
 800b2ec:	4637      	mov	r7, r6
 800b2ee:	dc04      	bgt.n	800b2fa <__swbuf_r+0x42>
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	f000 f93c 	bl	800b570 <_fflush_r>
 800b2f8:	bb30      	cbnz	r0, 800b348 <__swbuf_r+0x90>
 800b2fa:	68a3      	ldr	r3, [r4, #8]
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	60a3      	str	r3, [r4, #8]
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	1c5a      	adds	r2, r3, #1
 800b304:	6022      	str	r2, [r4, #0]
 800b306:	701e      	strb	r6, [r3, #0]
 800b308:	6963      	ldr	r3, [r4, #20]
 800b30a:	3001      	adds	r0, #1
 800b30c:	4283      	cmp	r3, r0
 800b30e:	d004      	beq.n	800b31a <__swbuf_r+0x62>
 800b310:	89a3      	ldrh	r3, [r4, #12]
 800b312:	07db      	lsls	r3, r3, #31
 800b314:	d506      	bpl.n	800b324 <__swbuf_r+0x6c>
 800b316:	2e0a      	cmp	r6, #10
 800b318:	d104      	bne.n	800b324 <__swbuf_r+0x6c>
 800b31a:	4621      	mov	r1, r4
 800b31c:	4628      	mov	r0, r5
 800b31e:	f000 f927 	bl	800b570 <_fflush_r>
 800b322:	b988      	cbnz	r0, 800b348 <__swbuf_r+0x90>
 800b324:	4638      	mov	r0, r7
 800b326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b328:	4b0a      	ldr	r3, [pc, #40]	; (800b354 <__swbuf_r+0x9c>)
 800b32a:	429c      	cmp	r4, r3
 800b32c:	d101      	bne.n	800b332 <__swbuf_r+0x7a>
 800b32e:	68ac      	ldr	r4, [r5, #8]
 800b330:	e7cf      	b.n	800b2d2 <__swbuf_r+0x1a>
 800b332:	4b09      	ldr	r3, [pc, #36]	; (800b358 <__swbuf_r+0xa0>)
 800b334:	429c      	cmp	r4, r3
 800b336:	bf08      	it	eq
 800b338:	68ec      	ldreq	r4, [r5, #12]
 800b33a:	e7ca      	b.n	800b2d2 <__swbuf_r+0x1a>
 800b33c:	4621      	mov	r1, r4
 800b33e:	4628      	mov	r0, r5
 800b340:	f000 f81a 	bl	800b378 <__swsetup_r>
 800b344:	2800      	cmp	r0, #0
 800b346:	d0cb      	beq.n	800b2e0 <__swbuf_r+0x28>
 800b348:	f04f 37ff 	mov.w	r7, #4294967295
 800b34c:	e7ea      	b.n	800b324 <__swbuf_r+0x6c>
 800b34e:	bf00      	nop
 800b350:	0800dda4 	.word	0x0800dda4
 800b354:	0800ddc4 	.word	0x0800ddc4
 800b358:	0800dd84 	.word	0x0800dd84

0800b35c <__ascii_wctomb>:
 800b35c:	b149      	cbz	r1, 800b372 <__ascii_wctomb+0x16>
 800b35e:	2aff      	cmp	r2, #255	; 0xff
 800b360:	bf85      	ittet	hi
 800b362:	238a      	movhi	r3, #138	; 0x8a
 800b364:	6003      	strhi	r3, [r0, #0]
 800b366:	700a      	strbls	r2, [r1, #0]
 800b368:	f04f 30ff 	movhi.w	r0, #4294967295
 800b36c:	bf98      	it	ls
 800b36e:	2001      	movls	r0, #1
 800b370:	4770      	bx	lr
 800b372:	4608      	mov	r0, r1
 800b374:	4770      	bx	lr
	...

0800b378 <__swsetup_r>:
 800b378:	4b32      	ldr	r3, [pc, #200]	; (800b444 <__swsetup_r+0xcc>)
 800b37a:	b570      	push	{r4, r5, r6, lr}
 800b37c:	681d      	ldr	r5, [r3, #0]
 800b37e:	4606      	mov	r6, r0
 800b380:	460c      	mov	r4, r1
 800b382:	b125      	cbz	r5, 800b38e <__swsetup_r+0x16>
 800b384:	69ab      	ldr	r3, [r5, #24]
 800b386:	b913      	cbnz	r3, 800b38e <__swsetup_r+0x16>
 800b388:	4628      	mov	r0, r5
 800b38a:	f000 f985 	bl	800b698 <__sinit>
 800b38e:	4b2e      	ldr	r3, [pc, #184]	; (800b448 <__swsetup_r+0xd0>)
 800b390:	429c      	cmp	r4, r3
 800b392:	d10f      	bne.n	800b3b4 <__swsetup_r+0x3c>
 800b394:	686c      	ldr	r4, [r5, #4]
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b39c:	0719      	lsls	r1, r3, #28
 800b39e:	d42c      	bmi.n	800b3fa <__swsetup_r+0x82>
 800b3a0:	06dd      	lsls	r5, r3, #27
 800b3a2:	d411      	bmi.n	800b3c8 <__swsetup_r+0x50>
 800b3a4:	2309      	movs	r3, #9
 800b3a6:	6033      	str	r3, [r6, #0]
 800b3a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3ac:	81a3      	strh	r3, [r4, #12]
 800b3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b2:	e03e      	b.n	800b432 <__swsetup_r+0xba>
 800b3b4:	4b25      	ldr	r3, [pc, #148]	; (800b44c <__swsetup_r+0xd4>)
 800b3b6:	429c      	cmp	r4, r3
 800b3b8:	d101      	bne.n	800b3be <__swsetup_r+0x46>
 800b3ba:	68ac      	ldr	r4, [r5, #8]
 800b3bc:	e7eb      	b.n	800b396 <__swsetup_r+0x1e>
 800b3be:	4b24      	ldr	r3, [pc, #144]	; (800b450 <__swsetup_r+0xd8>)
 800b3c0:	429c      	cmp	r4, r3
 800b3c2:	bf08      	it	eq
 800b3c4:	68ec      	ldreq	r4, [r5, #12]
 800b3c6:	e7e6      	b.n	800b396 <__swsetup_r+0x1e>
 800b3c8:	0758      	lsls	r0, r3, #29
 800b3ca:	d512      	bpl.n	800b3f2 <__swsetup_r+0x7a>
 800b3cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3ce:	b141      	cbz	r1, 800b3e2 <__swsetup_r+0x6a>
 800b3d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3d4:	4299      	cmp	r1, r3
 800b3d6:	d002      	beq.n	800b3de <__swsetup_r+0x66>
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7ff fb31 	bl	800aa40 <_free_r>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	6363      	str	r3, [r4, #52]	; 0x34
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3e8:	81a3      	strh	r3, [r4, #12]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	6063      	str	r3, [r4, #4]
 800b3ee:	6923      	ldr	r3, [r4, #16]
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	89a3      	ldrh	r3, [r4, #12]
 800b3f4:	f043 0308 	orr.w	r3, r3, #8
 800b3f8:	81a3      	strh	r3, [r4, #12]
 800b3fa:	6923      	ldr	r3, [r4, #16]
 800b3fc:	b94b      	cbnz	r3, 800b412 <__swsetup_r+0x9a>
 800b3fe:	89a3      	ldrh	r3, [r4, #12]
 800b400:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b408:	d003      	beq.n	800b412 <__swsetup_r+0x9a>
 800b40a:	4621      	mov	r1, r4
 800b40c:	4630      	mov	r0, r6
 800b40e:	f000 fa09 	bl	800b824 <__smakebuf_r>
 800b412:	89a0      	ldrh	r0, [r4, #12]
 800b414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b418:	f010 0301 	ands.w	r3, r0, #1
 800b41c:	d00a      	beq.n	800b434 <__swsetup_r+0xbc>
 800b41e:	2300      	movs	r3, #0
 800b420:	60a3      	str	r3, [r4, #8]
 800b422:	6963      	ldr	r3, [r4, #20]
 800b424:	425b      	negs	r3, r3
 800b426:	61a3      	str	r3, [r4, #24]
 800b428:	6923      	ldr	r3, [r4, #16]
 800b42a:	b943      	cbnz	r3, 800b43e <__swsetup_r+0xc6>
 800b42c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b430:	d1ba      	bne.n	800b3a8 <__swsetup_r+0x30>
 800b432:	bd70      	pop	{r4, r5, r6, pc}
 800b434:	0781      	lsls	r1, r0, #30
 800b436:	bf58      	it	pl
 800b438:	6963      	ldrpl	r3, [r4, #20]
 800b43a:	60a3      	str	r3, [r4, #8]
 800b43c:	e7f4      	b.n	800b428 <__swsetup_r+0xb0>
 800b43e:	2000      	movs	r0, #0
 800b440:	e7f7      	b.n	800b432 <__swsetup_r+0xba>
 800b442:	bf00      	nop
 800b444:	2000001c 	.word	0x2000001c
 800b448:	0800dda4 	.word	0x0800dda4
 800b44c:	0800ddc4 	.word	0x0800ddc4
 800b450:	0800dd84 	.word	0x0800dd84

0800b454 <abort>:
 800b454:	b508      	push	{r3, lr}
 800b456:	2006      	movs	r0, #6
 800b458:	f000 fa54 	bl	800b904 <raise>
 800b45c:	2001      	movs	r0, #1
 800b45e:	f7f7 fc3f 	bl	8002ce0 <_exit>
	...

0800b464 <__sflush_r>:
 800b464:	898a      	ldrh	r2, [r1, #12]
 800b466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b46a:	4605      	mov	r5, r0
 800b46c:	0710      	lsls	r0, r2, #28
 800b46e:	460c      	mov	r4, r1
 800b470:	d458      	bmi.n	800b524 <__sflush_r+0xc0>
 800b472:	684b      	ldr	r3, [r1, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	dc05      	bgt.n	800b484 <__sflush_r+0x20>
 800b478:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	dc02      	bgt.n	800b484 <__sflush_r+0x20>
 800b47e:	2000      	movs	r0, #0
 800b480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b484:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b486:	2e00      	cmp	r6, #0
 800b488:	d0f9      	beq.n	800b47e <__sflush_r+0x1a>
 800b48a:	2300      	movs	r3, #0
 800b48c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b490:	682f      	ldr	r7, [r5, #0]
 800b492:	602b      	str	r3, [r5, #0]
 800b494:	d032      	beq.n	800b4fc <__sflush_r+0x98>
 800b496:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	075a      	lsls	r2, r3, #29
 800b49c:	d505      	bpl.n	800b4aa <__sflush_r+0x46>
 800b49e:	6863      	ldr	r3, [r4, #4]
 800b4a0:	1ac0      	subs	r0, r0, r3
 800b4a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4a4:	b10b      	cbz	r3, 800b4aa <__sflush_r+0x46>
 800b4a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4a8:	1ac0      	subs	r0, r0, r3
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4b0:	6a21      	ldr	r1, [r4, #32]
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	47b0      	blx	r6
 800b4b6:	1c43      	adds	r3, r0, #1
 800b4b8:	89a3      	ldrh	r3, [r4, #12]
 800b4ba:	d106      	bne.n	800b4ca <__sflush_r+0x66>
 800b4bc:	6829      	ldr	r1, [r5, #0]
 800b4be:	291d      	cmp	r1, #29
 800b4c0:	d82c      	bhi.n	800b51c <__sflush_r+0xb8>
 800b4c2:	4a2a      	ldr	r2, [pc, #168]	; (800b56c <__sflush_r+0x108>)
 800b4c4:	40ca      	lsrs	r2, r1
 800b4c6:	07d6      	lsls	r6, r2, #31
 800b4c8:	d528      	bpl.n	800b51c <__sflush_r+0xb8>
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	6062      	str	r2, [r4, #4]
 800b4ce:	04d9      	lsls	r1, r3, #19
 800b4d0:	6922      	ldr	r2, [r4, #16]
 800b4d2:	6022      	str	r2, [r4, #0]
 800b4d4:	d504      	bpl.n	800b4e0 <__sflush_r+0x7c>
 800b4d6:	1c42      	adds	r2, r0, #1
 800b4d8:	d101      	bne.n	800b4de <__sflush_r+0x7a>
 800b4da:	682b      	ldr	r3, [r5, #0]
 800b4dc:	b903      	cbnz	r3, 800b4e0 <__sflush_r+0x7c>
 800b4de:	6560      	str	r0, [r4, #84]	; 0x54
 800b4e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4e2:	602f      	str	r7, [r5, #0]
 800b4e4:	2900      	cmp	r1, #0
 800b4e6:	d0ca      	beq.n	800b47e <__sflush_r+0x1a>
 800b4e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4ec:	4299      	cmp	r1, r3
 800b4ee:	d002      	beq.n	800b4f6 <__sflush_r+0x92>
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	f7ff faa5 	bl	800aa40 <_free_r>
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	6360      	str	r0, [r4, #52]	; 0x34
 800b4fa:	e7c1      	b.n	800b480 <__sflush_r+0x1c>
 800b4fc:	6a21      	ldr	r1, [r4, #32]
 800b4fe:	2301      	movs	r3, #1
 800b500:	4628      	mov	r0, r5
 800b502:	47b0      	blx	r6
 800b504:	1c41      	adds	r1, r0, #1
 800b506:	d1c7      	bne.n	800b498 <__sflush_r+0x34>
 800b508:	682b      	ldr	r3, [r5, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0c4      	beq.n	800b498 <__sflush_r+0x34>
 800b50e:	2b1d      	cmp	r3, #29
 800b510:	d001      	beq.n	800b516 <__sflush_r+0xb2>
 800b512:	2b16      	cmp	r3, #22
 800b514:	d101      	bne.n	800b51a <__sflush_r+0xb6>
 800b516:	602f      	str	r7, [r5, #0]
 800b518:	e7b1      	b.n	800b47e <__sflush_r+0x1a>
 800b51a:	89a3      	ldrh	r3, [r4, #12]
 800b51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b520:	81a3      	strh	r3, [r4, #12]
 800b522:	e7ad      	b.n	800b480 <__sflush_r+0x1c>
 800b524:	690f      	ldr	r7, [r1, #16]
 800b526:	2f00      	cmp	r7, #0
 800b528:	d0a9      	beq.n	800b47e <__sflush_r+0x1a>
 800b52a:	0793      	lsls	r3, r2, #30
 800b52c:	680e      	ldr	r6, [r1, #0]
 800b52e:	bf08      	it	eq
 800b530:	694b      	ldreq	r3, [r1, #20]
 800b532:	600f      	str	r7, [r1, #0]
 800b534:	bf18      	it	ne
 800b536:	2300      	movne	r3, #0
 800b538:	eba6 0807 	sub.w	r8, r6, r7
 800b53c:	608b      	str	r3, [r1, #8]
 800b53e:	f1b8 0f00 	cmp.w	r8, #0
 800b542:	dd9c      	ble.n	800b47e <__sflush_r+0x1a>
 800b544:	6a21      	ldr	r1, [r4, #32]
 800b546:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b548:	4643      	mov	r3, r8
 800b54a:	463a      	mov	r2, r7
 800b54c:	4628      	mov	r0, r5
 800b54e:	47b0      	blx	r6
 800b550:	2800      	cmp	r0, #0
 800b552:	dc06      	bgt.n	800b562 <__sflush_r+0xfe>
 800b554:	89a3      	ldrh	r3, [r4, #12]
 800b556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b55a:	81a3      	strh	r3, [r4, #12]
 800b55c:	f04f 30ff 	mov.w	r0, #4294967295
 800b560:	e78e      	b.n	800b480 <__sflush_r+0x1c>
 800b562:	4407      	add	r7, r0
 800b564:	eba8 0800 	sub.w	r8, r8, r0
 800b568:	e7e9      	b.n	800b53e <__sflush_r+0xda>
 800b56a:	bf00      	nop
 800b56c:	20400001 	.word	0x20400001

0800b570 <_fflush_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	690b      	ldr	r3, [r1, #16]
 800b574:	4605      	mov	r5, r0
 800b576:	460c      	mov	r4, r1
 800b578:	b913      	cbnz	r3, 800b580 <_fflush_r+0x10>
 800b57a:	2500      	movs	r5, #0
 800b57c:	4628      	mov	r0, r5
 800b57e:	bd38      	pop	{r3, r4, r5, pc}
 800b580:	b118      	cbz	r0, 800b58a <_fflush_r+0x1a>
 800b582:	6983      	ldr	r3, [r0, #24]
 800b584:	b90b      	cbnz	r3, 800b58a <_fflush_r+0x1a>
 800b586:	f000 f887 	bl	800b698 <__sinit>
 800b58a:	4b14      	ldr	r3, [pc, #80]	; (800b5dc <_fflush_r+0x6c>)
 800b58c:	429c      	cmp	r4, r3
 800b58e:	d11b      	bne.n	800b5c8 <_fflush_r+0x58>
 800b590:	686c      	ldr	r4, [r5, #4]
 800b592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0ef      	beq.n	800b57a <_fflush_r+0xa>
 800b59a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b59c:	07d0      	lsls	r0, r2, #31
 800b59e:	d404      	bmi.n	800b5aa <_fflush_r+0x3a>
 800b5a0:	0599      	lsls	r1, r3, #22
 800b5a2:	d402      	bmi.n	800b5aa <_fflush_r+0x3a>
 800b5a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5a6:	f000 f915 	bl	800b7d4 <__retarget_lock_acquire_recursive>
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	f7ff ff59 	bl	800b464 <__sflush_r>
 800b5b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5b4:	07da      	lsls	r2, r3, #31
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	d4e0      	bmi.n	800b57c <_fflush_r+0xc>
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	059b      	lsls	r3, r3, #22
 800b5be:	d4dd      	bmi.n	800b57c <_fflush_r+0xc>
 800b5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5c2:	f000 f908 	bl	800b7d6 <__retarget_lock_release_recursive>
 800b5c6:	e7d9      	b.n	800b57c <_fflush_r+0xc>
 800b5c8:	4b05      	ldr	r3, [pc, #20]	; (800b5e0 <_fflush_r+0x70>)
 800b5ca:	429c      	cmp	r4, r3
 800b5cc:	d101      	bne.n	800b5d2 <_fflush_r+0x62>
 800b5ce:	68ac      	ldr	r4, [r5, #8]
 800b5d0:	e7df      	b.n	800b592 <_fflush_r+0x22>
 800b5d2:	4b04      	ldr	r3, [pc, #16]	; (800b5e4 <_fflush_r+0x74>)
 800b5d4:	429c      	cmp	r4, r3
 800b5d6:	bf08      	it	eq
 800b5d8:	68ec      	ldreq	r4, [r5, #12]
 800b5da:	e7da      	b.n	800b592 <_fflush_r+0x22>
 800b5dc:	0800dda4 	.word	0x0800dda4
 800b5e0:	0800ddc4 	.word	0x0800ddc4
 800b5e4:	0800dd84 	.word	0x0800dd84

0800b5e8 <std>:
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	e9c0 3300 	strd	r3, r3, [r0]
 800b5f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5f6:	6083      	str	r3, [r0, #8]
 800b5f8:	8181      	strh	r1, [r0, #12]
 800b5fa:	6643      	str	r3, [r0, #100]	; 0x64
 800b5fc:	81c2      	strh	r2, [r0, #14]
 800b5fe:	6183      	str	r3, [r0, #24]
 800b600:	4619      	mov	r1, r3
 800b602:	2208      	movs	r2, #8
 800b604:	305c      	adds	r0, #92	; 0x5c
 800b606:	f7fd fb67 	bl	8008cd8 <memset>
 800b60a:	4b05      	ldr	r3, [pc, #20]	; (800b620 <std+0x38>)
 800b60c:	6263      	str	r3, [r4, #36]	; 0x24
 800b60e:	4b05      	ldr	r3, [pc, #20]	; (800b624 <std+0x3c>)
 800b610:	62a3      	str	r3, [r4, #40]	; 0x28
 800b612:	4b05      	ldr	r3, [pc, #20]	; (800b628 <std+0x40>)
 800b614:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b616:	4b05      	ldr	r3, [pc, #20]	; (800b62c <std+0x44>)
 800b618:	6224      	str	r4, [r4, #32]
 800b61a:	6323      	str	r3, [r4, #48]	; 0x30
 800b61c:	bd10      	pop	{r4, pc}
 800b61e:	bf00      	nop
 800b620:	0800b93d 	.word	0x0800b93d
 800b624:	0800b95f 	.word	0x0800b95f
 800b628:	0800b997 	.word	0x0800b997
 800b62c:	0800b9bb 	.word	0x0800b9bb

0800b630 <_cleanup_r>:
 800b630:	4901      	ldr	r1, [pc, #4]	; (800b638 <_cleanup_r+0x8>)
 800b632:	f000 b8af 	b.w	800b794 <_fwalk_reent>
 800b636:	bf00      	nop
 800b638:	0800b571 	.word	0x0800b571

0800b63c <__sfmoreglue>:
 800b63c:	b570      	push	{r4, r5, r6, lr}
 800b63e:	2268      	movs	r2, #104	; 0x68
 800b640:	1e4d      	subs	r5, r1, #1
 800b642:	4355      	muls	r5, r2
 800b644:	460e      	mov	r6, r1
 800b646:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b64a:	f7ff fa65 	bl	800ab18 <_malloc_r>
 800b64e:	4604      	mov	r4, r0
 800b650:	b140      	cbz	r0, 800b664 <__sfmoreglue+0x28>
 800b652:	2100      	movs	r1, #0
 800b654:	e9c0 1600 	strd	r1, r6, [r0]
 800b658:	300c      	adds	r0, #12
 800b65a:	60a0      	str	r0, [r4, #8]
 800b65c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b660:	f7fd fb3a 	bl	8008cd8 <memset>
 800b664:	4620      	mov	r0, r4
 800b666:	bd70      	pop	{r4, r5, r6, pc}

0800b668 <__sfp_lock_acquire>:
 800b668:	4801      	ldr	r0, [pc, #4]	; (800b670 <__sfp_lock_acquire+0x8>)
 800b66a:	f000 b8b3 	b.w	800b7d4 <__retarget_lock_acquire_recursive>
 800b66e:	bf00      	nop
 800b670:	20000f51 	.word	0x20000f51

0800b674 <__sfp_lock_release>:
 800b674:	4801      	ldr	r0, [pc, #4]	; (800b67c <__sfp_lock_release+0x8>)
 800b676:	f000 b8ae 	b.w	800b7d6 <__retarget_lock_release_recursive>
 800b67a:	bf00      	nop
 800b67c:	20000f51 	.word	0x20000f51

0800b680 <__sinit_lock_acquire>:
 800b680:	4801      	ldr	r0, [pc, #4]	; (800b688 <__sinit_lock_acquire+0x8>)
 800b682:	f000 b8a7 	b.w	800b7d4 <__retarget_lock_acquire_recursive>
 800b686:	bf00      	nop
 800b688:	20000f52 	.word	0x20000f52

0800b68c <__sinit_lock_release>:
 800b68c:	4801      	ldr	r0, [pc, #4]	; (800b694 <__sinit_lock_release+0x8>)
 800b68e:	f000 b8a2 	b.w	800b7d6 <__retarget_lock_release_recursive>
 800b692:	bf00      	nop
 800b694:	20000f52 	.word	0x20000f52

0800b698 <__sinit>:
 800b698:	b510      	push	{r4, lr}
 800b69a:	4604      	mov	r4, r0
 800b69c:	f7ff fff0 	bl	800b680 <__sinit_lock_acquire>
 800b6a0:	69a3      	ldr	r3, [r4, #24]
 800b6a2:	b11b      	cbz	r3, 800b6ac <__sinit+0x14>
 800b6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6a8:	f7ff bff0 	b.w	800b68c <__sinit_lock_release>
 800b6ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6b0:	6523      	str	r3, [r4, #80]	; 0x50
 800b6b2:	4b13      	ldr	r3, [pc, #76]	; (800b700 <__sinit+0x68>)
 800b6b4:	4a13      	ldr	r2, [pc, #76]	; (800b704 <__sinit+0x6c>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6ba:	42a3      	cmp	r3, r4
 800b6bc:	bf04      	itt	eq
 800b6be:	2301      	moveq	r3, #1
 800b6c0:	61a3      	streq	r3, [r4, #24]
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 f820 	bl	800b708 <__sfp>
 800b6c8:	6060      	str	r0, [r4, #4]
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f000 f81c 	bl	800b708 <__sfp>
 800b6d0:	60a0      	str	r0, [r4, #8]
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f000 f818 	bl	800b708 <__sfp>
 800b6d8:	2200      	movs	r2, #0
 800b6da:	60e0      	str	r0, [r4, #12]
 800b6dc:	2104      	movs	r1, #4
 800b6de:	6860      	ldr	r0, [r4, #4]
 800b6e0:	f7ff ff82 	bl	800b5e8 <std>
 800b6e4:	68a0      	ldr	r0, [r4, #8]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	2109      	movs	r1, #9
 800b6ea:	f7ff ff7d 	bl	800b5e8 <std>
 800b6ee:	68e0      	ldr	r0, [r4, #12]
 800b6f0:	2202      	movs	r2, #2
 800b6f2:	2112      	movs	r1, #18
 800b6f4:	f7ff ff78 	bl	800b5e8 <std>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	61a3      	str	r3, [r4, #24]
 800b6fc:	e7d2      	b.n	800b6a4 <__sinit+0xc>
 800b6fe:	bf00      	nop
 800b700:	0800da0c 	.word	0x0800da0c
 800b704:	0800b631 	.word	0x0800b631

0800b708 <__sfp>:
 800b708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b70a:	4607      	mov	r7, r0
 800b70c:	f7ff ffac 	bl	800b668 <__sfp_lock_acquire>
 800b710:	4b1e      	ldr	r3, [pc, #120]	; (800b78c <__sfp+0x84>)
 800b712:	681e      	ldr	r6, [r3, #0]
 800b714:	69b3      	ldr	r3, [r6, #24]
 800b716:	b913      	cbnz	r3, 800b71e <__sfp+0x16>
 800b718:	4630      	mov	r0, r6
 800b71a:	f7ff ffbd 	bl	800b698 <__sinit>
 800b71e:	3648      	adds	r6, #72	; 0x48
 800b720:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b724:	3b01      	subs	r3, #1
 800b726:	d503      	bpl.n	800b730 <__sfp+0x28>
 800b728:	6833      	ldr	r3, [r6, #0]
 800b72a:	b30b      	cbz	r3, 800b770 <__sfp+0x68>
 800b72c:	6836      	ldr	r6, [r6, #0]
 800b72e:	e7f7      	b.n	800b720 <__sfp+0x18>
 800b730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b734:	b9d5      	cbnz	r5, 800b76c <__sfp+0x64>
 800b736:	4b16      	ldr	r3, [pc, #88]	; (800b790 <__sfp+0x88>)
 800b738:	60e3      	str	r3, [r4, #12]
 800b73a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b73e:	6665      	str	r5, [r4, #100]	; 0x64
 800b740:	f000 f847 	bl	800b7d2 <__retarget_lock_init_recursive>
 800b744:	f7ff ff96 	bl	800b674 <__sfp_lock_release>
 800b748:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b74c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b750:	6025      	str	r5, [r4, #0]
 800b752:	61a5      	str	r5, [r4, #24]
 800b754:	2208      	movs	r2, #8
 800b756:	4629      	mov	r1, r5
 800b758:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b75c:	f7fd fabc 	bl	8008cd8 <memset>
 800b760:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b764:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b768:	4620      	mov	r0, r4
 800b76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b76c:	3468      	adds	r4, #104	; 0x68
 800b76e:	e7d9      	b.n	800b724 <__sfp+0x1c>
 800b770:	2104      	movs	r1, #4
 800b772:	4638      	mov	r0, r7
 800b774:	f7ff ff62 	bl	800b63c <__sfmoreglue>
 800b778:	4604      	mov	r4, r0
 800b77a:	6030      	str	r0, [r6, #0]
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d1d5      	bne.n	800b72c <__sfp+0x24>
 800b780:	f7ff ff78 	bl	800b674 <__sfp_lock_release>
 800b784:	230c      	movs	r3, #12
 800b786:	603b      	str	r3, [r7, #0]
 800b788:	e7ee      	b.n	800b768 <__sfp+0x60>
 800b78a:	bf00      	nop
 800b78c:	0800da0c 	.word	0x0800da0c
 800b790:	ffff0001 	.word	0xffff0001

0800b794 <_fwalk_reent>:
 800b794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b798:	4606      	mov	r6, r0
 800b79a:	4688      	mov	r8, r1
 800b79c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7a0:	2700      	movs	r7, #0
 800b7a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7a6:	f1b9 0901 	subs.w	r9, r9, #1
 800b7aa:	d505      	bpl.n	800b7b8 <_fwalk_reent+0x24>
 800b7ac:	6824      	ldr	r4, [r4, #0]
 800b7ae:	2c00      	cmp	r4, #0
 800b7b0:	d1f7      	bne.n	800b7a2 <_fwalk_reent+0xe>
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7b8:	89ab      	ldrh	r3, [r5, #12]
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d907      	bls.n	800b7ce <_fwalk_reent+0x3a>
 800b7be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	d003      	beq.n	800b7ce <_fwalk_reent+0x3a>
 800b7c6:	4629      	mov	r1, r5
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	47c0      	blx	r8
 800b7cc:	4307      	orrs	r7, r0
 800b7ce:	3568      	adds	r5, #104	; 0x68
 800b7d0:	e7e9      	b.n	800b7a6 <_fwalk_reent+0x12>

0800b7d2 <__retarget_lock_init_recursive>:
 800b7d2:	4770      	bx	lr

0800b7d4 <__retarget_lock_acquire_recursive>:
 800b7d4:	4770      	bx	lr

0800b7d6 <__retarget_lock_release_recursive>:
 800b7d6:	4770      	bx	lr

0800b7d8 <__swhatbuf_r>:
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	460e      	mov	r6, r1
 800b7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e0:	2900      	cmp	r1, #0
 800b7e2:	b096      	sub	sp, #88	; 0x58
 800b7e4:	4614      	mov	r4, r2
 800b7e6:	461d      	mov	r5, r3
 800b7e8:	da08      	bge.n	800b7fc <__swhatbuf_r+0x24>
 800b7ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	602a      	str	r2, [r5, #0]
 800b7f2:	061a      	lsls	r2, r3, #24
 800b7f4:	d410      	bmi.n	800b818 <__swhatbuf_r+0x40>
 800b7f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7fa:	e00e      	b.n	800b81a <__swhatbuf_r+0x42>
 800b7fc:	466a      	mov	r2, sp
 800b7fe:	f000 f903 	bl	800ba08 <_fstat_r>
 800b802:	2800      	cmp	r0, #0
 800b804:	dbf1      	blt.n	800b7ea <__swhatbuf_r+0x12>
 800b806:	9a01      	ldr	r2, [sp, #4]
 800b808:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b80c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b810:	425a      	negs	r2, r3
 800b812:	415a      	adcs	r2, r3
 800b814:	602a      	str	r2, [r5, #0]
 800b816:	e7ee      	b.n	800b7f6 <__swhatbuf_r+0x1e>
 800b818:	2340      	movs	r3, #64	; 0x40
 800b81a:	2000      	movs	r0, #0
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	b016      	add	sp, #88	; 0x58
 800b820:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b824 <__smakebuf_r>:
 800b824:	898b      	ldrh	r3, [r1, #12]
 800b826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b828:	079d      	lsls	r5, r3, #30
 800b82a:	4606      	mov	r6, r0
 800b82c:	460c      	mov	r4, r1
 800b82e:	d507      	bpl.n	800b840 <__smakebuf_r+0x1c>
 800b830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	6123      	str	r3, [r4, #16]
 800b838:	2301      	movs	r3, #1
 800b83a:	6163      	str	r3, [r4, #20]
 800b83c:	b002      	add	sp, #8
 800b83e:	bd70      	pop	{r4, r5, r6, pc}
 800b840:	ab01      	add	r3, sp, #4
 800b842:	466a      	mov	r2, sp
 800b844:	f7ff ffc8 	bl	800b7d8 <__swhatbuf_r>
 800b848:	9900      	ldr	r1, [sp, #0]
 800b84a:	4605      	mov	r5, r0
 800b84c:	4630      	mov	r0, r6
 800b84e:	f7ff f963 	bl	800ab18 <_malloc_r>
 800b852:	b948      	cbnz	r0, 800b868 <__smakebuf_r+0x44>
 800b854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b858:	059a      	lsls	r2, r3, #22
 800b85a:	d4ef      	bmi.n	800b83c <__smakebuf_r+0x18>
 800b85c:	f023 0303 	bic.w	r3, r3, #3
 800b860:	f043 0302 	orr.w	r3, r3, #2
 800b864:	81a3      	strh	r3, [r4, #12]
 800b866:	e7e3      	b.n	800b830 <__smakebuf_r+0xc>
 800b868:	4b0d      	ldr	r3, [pc, #52]	; (800b8a0 <__smakebuf_r+0x7c>)
 800b86a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	6020      	str	r0, [r4, #0]
 800b870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b874:	81a3      	strh	r3, [r4, #12]
 800b876:	9b00      	ldr	r3, [sp, #0]
 800b878:	6163      	str	r3, [r4, #20]
 800b87a:	9b01      	ldr	r3, [sp, #4]
 800b87c:	6120      	str	r0, [r4, #16]
 800b87e:	b15b      	cbz	r3, 800b898 <__smakebuf_r+0x74>
 800b880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b884:	4630      	mov	r0, r6
 800b886:	f000 f8d1 	bl	800ba2c <_isatty_r>
 800b88a:	b128      	cbz	r0, 800b898 <__smakebuf_r+0x74>
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	f023 0303 	bic.w	r3, r3, #3
 800b892:	f043 0301 	orr.w	r3, r3, #1
 800b896:	81a3      	strh	r3, [r4, #12]
 800b898:	89a0      	ldrh	r0, [r4, #12]
 800b89a:	4305      	orrs	r5, r0
 800b89c:	81a5      	strh	r5, [r4, #12]
 800b89e:	e7cd      	b.n	800b83c <__smakebuf_r+0x18>
 800b8a0:	0800b631 	.word	0x0800b631

0800b8a4 <_malloc_usable_size_r>:
 800b8a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8a8:	1f18      	subs	r0, r3, #4
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	bfbc      	itt	lt
 800b8ae:	580b      	ldrlt	r3, [r1, r0]
 800b8b0:	18c0      	addlt	r0, r0, r3
 800b8b2:	4770      	bx	lr

0800b8b4 <_raise_r>:
 800b8b4:	291f      	cmp	r1, #31
 800b8b6:	b538      	push	{r3, r4, r5, lr}
 800b8b8:	4604      	mov	r4, r0
 800b8ba:	460d      	mov	r5, r1
 800b8bc:	d904      	bls.n	800b8c8 <_raise_r+0x14>
 800b8be:	2316      	movs	r3, #22
 800b8c0:	6003      	str	r3, [r0, #0]
 800b8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c6:	bd38      	pop	{r3, r4, r5, pc}
 800b8c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b8ca:	b112      	cbz	r2, 800b8d2 <_raise_r+0x1e>
 800b8cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8d0:	b94b      	cbnz	r3, 800b8e6 <_raise_r+0x32>
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 f830 	bl	800b938 <_getpid_r>
 800b8d8:	462a      	mov	r2, r5
 800b8da:	4601      	mov	r1, r0
 800b8dc:	4620      	mov	r0, r4
 800b8de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8e2:	f000 b817 	b.w	800b914 <_kill_r>
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d00a      	beq.n	800b900 <_raise_r+0x4c>
 800b8ea:	1c59      	adds	r1, r3, #1
 800b8ec:	d103      	bne.n	800b8f6 <_raise_r+0x42>
 800b8ee:	2316      	movs	r3, #22
 800b8f0:	6003      	str	r3, [r0, #0]
 800b8f2:	2001      	movs	r0, #1
 800b8f4:	e7e7      	b.n	800b8c6 <_raise_r+0x12>
 800b8f6:	2400      	movs	r4, #0
 800b8f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	4798      	blx	r3
 800b900:	2000      	movs	r0, #0
 800b902:	e7e0      	b.n	800b8c6 <_raise_r+0x12>

0800b904 <raise>:
 800b904:	4b02      	ldr	r3, [pc, #8]	; (800b910 <raise+0xc>)
 800b906:	4601      	mov	r1, r0
 800b908:	6818      	ldr	r0, [r3, #0]
 800b90a:	f7ff bfd3 	b.w	800b8b4 <_raise_r>
 800b90e:	bf00      	nop
 800b910:	2000001c 	.word	0x2000001c

0800b914 <_kill_r>:
 800b914:	b538      	push	{r3, r4, r5, lr}
 800b916:	4d07      	ldr	r5, [pc, #28]	; (800b934 <_kill_r+0x20>)
 800b918:	2300      	movs	r3, #0
 800b91a:	4604      	mov	r4, r0
 800b91c:	4608      	mov	r0, r1
 800b91e:	4611      	mov	r1, r2
 800b920:	602b      	str	r3, [r5, #0]
 800b922:	f7f7 f9cd 	bl	8002cc0 <_kill>
 800b926:	1c43      	adds	r3, r0, #1
 800b928:	d102      	bne.n	800b930 <_kill_r+0x1c>
 800b92a:	682b      	ldr	r3, [r5, #0]
 800b92c:	b103      	cbz	r3, 800b930 <_kill_r+0x1c>
 800b92e:	6023      	str	r3, [r4, #0]
 800b930:	bd38      	pop	{r3, r4, r5, pc}
 800b932:	bf00      	nop
 800b934:	20000f4c 	.word	0x20000f4c

0800b938 <_getpid_r>:
 800b938:	f7f7 b9ba 	b.w	8002cb0 <_getpid>

0800b93c <__sread>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	460c      	mov	r4, r1
 800b940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b944:	f000 f894 	bl	800ba70 <_read_r>
 800b948:	2800      	cmp	r0, #0
 800b94a:	bfab      	itete	ge
 800b94c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b94e:	89a3      	ldrhlt	r3, [r4, #12]
 800b950:	181b      	addge	r3, r3, r0
 800b952:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b956:	bfac      	ite	ge
 800b958:	6563      	strge	r3, [r4, #84]	; 0x54
 800b95a:	81a3      	strhlt	r3, [r4, #12]
 800b95c:	bd10      	pop	{r4, pc}

0800b95e <__swrite>:
 800b95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b962:	461f      	mov	r7, r3
 800b964:	898b      	ldrh	r3, [r1, #12]
 800b966:	05db      	lsls	r3, r3, #23
 800b968:	4605      	mov	r5, r0
 800b96a:	460c      	mov	r4, r1
 800b96c:	4616      	mov	r6, r2
 800b96e:	d505      	bpl.n	800b97c <__swrite+0x1e>
 800b970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b974:	2302      	movs	r3, #2
 800b976:	2200      	movs	r2, #0
 800b978:	f000 f868 	bl	800ba4c <_lseek_r>
 800b97c:	89a3      	ldrh	r3, [r4, #12]
 800b97e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b982:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b986:	81a3      	strh	r3, [r4, #12]
 800b988:	4632      	mov	r2, r6
 800b98a:	463b      	mov	r3, r7
 800b98c:	4628      	mov	r0, r5
 800b98e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b992:	f000 b817 	b.w	800b9c4 <_write_r>

0800b996 <__sseek>:
 800b996:	b510      	push	{r4, lr}
 800b998:	460c      	mov	r4, r1
 800b99a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b99e:	f000 f855 	bl	800ba4c <_lseek_r>
 800b9a2:	1c43      	adds	r3, r0, #1
 800b9a4:	89a3      	ldrh	r3, [r4, #12]
 800b9a6:	bf15      	itete	ne
 800b9a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9b2:	81a3      	strheq	r3, [r4, #12]
 800b9b4:	bf18      	it	ne
 800b9b6:	81a3      	strhne	r3, [r4, #12]
 800b9b8:	bd10      	pop	{r4, pc}

0800b9ba <__sclose>:
 800b9ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9be:	f000 b813 	b.w	800b9e8 <_close_r>
	...

0800b9c4 <_write_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4d07      	ldr	r5, [pc, #28]	; (800b9e4 <_write_r+0x20>)
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	4608      	mov	r0, r1
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	602a      	str	r2, [r5, #0]
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	f7f7 f9ab 	bl	8002d2e <_write>
 800b9d8:	1c43      	adds	r3, r0, #1
 800b9da:	d102      	bne.n	800b9e2 <_write_r+0x1e>
 800b9dc:	682b      	ldr	r3, [r5, #0]
 800b9de:	b103      	cbz	r3, 800b9e2 <_write_r+0x1e>
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	bd38      	pop	{r3, r4, r5, pc}
 800b9e4:	20000f4c 	.word	0x20000f4c

0800b9e8 <_close_r>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	4d06      	ldr	r5, [pc, #24]	; (800ba04 <_close_r+0x1c>)
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	4608      	mov	r0, r1
 800b9f2:	602b      	str	r3, [r5, #0]
 800b9f4:	f7f7 f9b7 	bl	8002d66 <_close>
 800b9f8:	1c43      	adds	r3, r0, #1
 800b9fa:	d102      	bne.n	800ba02 <_close_r+0x1a>
 800b9fc:	682b      	ldr	r3, [r5, #0]
 800b9fe:	b103      	cbz	r3, 800ba02 <_close_r+0x1a>
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	bd38      	pop	{r3, r4, r5, pc}
 800ba04:	20000f4c 	.word	0x20000f4c

0800ba08 <_fstat_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4d07      	ldr	r5, [pc, #28]	; (800ba28 <_fstat_r+0x20>)
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	4604      	mov	r4, r0
 800ba10:	4608      	mov	r0, r1
 800ba12:	4611      	mov	r1, r2
 800ba14:	602b      	str	r3, [r5, #0]
 800ba16:	f7f7 f9b2 	bl	8002d7e <_fstat>
 800ba1a:	1c43      	adds	r3, r0, #1
 800ba1c:	d102      	bne.n	800ba24 <_fstat_r+0x1c>
 800ba1e:	682b      	ldr	r3, [r5, #0]
 800ba20:	b103      	cbz	r3, 800ba24 <_fstat_r+0x1c>
 800ba22:	6023      	str	r3, [r4, #0]
 800ba24:	bd38      	pop	{r3, r4, r5, pc}
 800ba26:	bf00      	nop
 800ba28:	20000f4c 	.word	0x20000f4c

0800ba2c <_isatty_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	4d06      	ldr	r5, [pc, #24]	; (800ba48 <_isatty_r+0x1c>)
 800ba30:	2300      	movs	r3, #0
 800ba32:	4604      	mov	r4, r0
 800ba34:	4608      	mov	r0, r1
 800ba36:	602b      	str	r3, [r5, #0]
 800ba38:	f7f7 f9b1 	bl	8002d9e <_isatty>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d102      	bne.n	800ba46 <_isatty_r+0x1a>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	b103      	cbz	r3, 800ba46 <_isatty_r+0x1a>
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	20000f4c 	.word	0x20000f4c

0800ba4c <_lseek_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4d07      	ldr	r5, [pc, #28]	; (800ba6c <_lseek_r+0x20>)
 800ba50:	4604      	mov	r4, r0
 800ba52:	4608      	mov	r0, r1
 800ba54:	4611      	mov	r1, r2
 800ba56:	2200      	movs	r2, #0
 800ba58:	602a      	str	r2, [r5, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f7f7 f9aa 	bl	8002db4 <_lseek>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d102      	bne.n	800ba6a <_lseek_r+0x1e>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	b103      	cbz	r3, 800ba6a <_lseek_r+0x1e>
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	bd38      	pop	{r3, r4, r5, pc}
 800ba6c:	20000f4c 	.word	0x20000f4c

0800ba70 <_read_r>:
 800ba70:	b538      	push	{r3, r4, r5, lr}
 800ba72:	4d07      	ldr	r5, [pc, #28]	; (800ba90 <_read_r+0x20>)
 800ba74:	4604      	mov	r4, r0
 800ba76:	4608      	mov	r0, r1
 800ba78:	4611      	mov	r1, r2
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	602a      	str	r2, [r5, #0]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	f7f7 f938 	bl	8002cf4 <_read>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	d102      	bne.n	800ba8e <_read_r+0x1e>
 800ba88:	682b      	ldr	r3, [r5, #0]
 800ba8a:	b103      	cbz	r3, 800ba8e <_read_r+0x1e>
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	bd38      	pop	{r3, r4, r5, pc}
 800ba90:	20000f4c 	.word	0x20000f4c

0800ba94 <_init>:
 800ba94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba96:	bf00      	nop
 800ba98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba9a:	bc08      	pop	{r3}
 800ba9c:	469e      	mov	lr, r3
 800ba9e:	4770      	bx	lr

0800baa0 <_fini>:
 800baa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa2:	bf00      	nop
 800baa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baa6:	bc08      	pop	{r3}
 800baa8:	469e      	mov	lr, r3
 800baaa:	4770      	bx	lr
