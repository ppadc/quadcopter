
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ee0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c84  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acec  0800acec  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800acec  0800acec  0001acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acf4  0800acf4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acf4  0800acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acf8  0800acf8  0001acf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800acfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000c98  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000cbc  20000cbc  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001abc1  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d49  00000000  00000000  0003ac15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001758  00000000  00000000  0003e960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015b8  00000000  00000000  000400b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000529d  00000000  00000000  00041670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ebee  00000000  00000000  0004690d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6385  00000000  00000000  000654fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b880  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006168  00000000  00000000  0013b8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008050 	.word	0x08008050

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08008050 	.word	0x08008050

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60ba      	str	r2, [r7, #8]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4603      	mov	r3, r0
 80004d8:	81fb      	strh	r3, [r7, #14]
 80004da:	460b      	mov	r3, r1
 80004dc:	81bb      	strh	r3, [r7, #12]
 80004de:	4613      	mov	r3, r2
 80004e0:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80004e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004e6:	3307      	adds	r3, #7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <SSD1306_DrawBitmap+0x22>
 80004ec:	3307      	adds	r3, #7
 80004ee:	10db      	asrs	r3, r3, #3
 80004f0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	82bb      	strh	r3, [r7, #20]
 80004fa:	e044      	b.n	8000586 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80004fc:	2300      	movs	r3, #0
 80004fe:	827b      	strh	r3, [r7, #18]
 8000500:	e02f      	b.n	8000562 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000502:	8a7b      	ldrh	r3, [r7, #18]
 8000504:	f003 0307 	and.w	r3, r3, #7
 8000508:	2b00      	cmp	r3, #0
 800050a:	d003      	beq.n	8000514 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800050c:	7dfb      	ldrb	r3, [r7, #23]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	75fb      	strb	r3, [r7, #23]
 8000512:	e012      	b.n	800053a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000514:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000518:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800051c:	fb03 f202 	mul.w	r2, r3, r2
 8000520:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000524:	2b00      	cmp	r3, #0
 8000526:	da00      	bge.n	800052a <SSD1306_DrawBitmap+0x5e>
 8000528:	3307      	adds	r3, #7
 800052a:	10db      	asrs	r3, r3, #3
 800052c:	b21b      	sxth	r3, r3
 800052e:	4413      	add	r3, r2
 8000530:	461a      	mov	r2, r3
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4413      	add	r3, r2
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800053a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800053e:	2b00      	cmp	r3, #0
 8000540:	da09      	bge.n	8000556 <SSD1306_DrawBitmap+0x8a>
 8000542:	89fa      	ldrh	r2, [r7, #14]
 8000544:	8a7b      	ldrh	r3, [r7, #18]
 8000546:	4413      	add	r3, r2
 8000548:	b29b      	uxth	r3, r3
 800054a:	89b9      	ldrh	r1, [r7, #12]
 800054c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f92d 	bl	80007b0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000556:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800055a:	b29b      	uxth	r3, r3
 800055c:	3301      	adds	r3, #1
 800055e:	b29b      	uxth	r3, r3
 8000560:	827b      	strh	r3, [r7, #18]
 8000562:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800056a:	429a      	cmp	r2, r3
 800056c:	dbc9      	blt.n	8000502 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800056e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000572:	b29b      	uxth	r3, r3
 8000574:	3301      	adds	r3, #1
 8000576:	b29b      	uxth	r3, r3
 8000578:	82bb      	strh	r3, [r7, #20]
 800057a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800057e:	b29b      	uxth	r3, r3
 8000580:	3301      	adds	r3, #1
 8000582:	b29b      	uxth	r3, r3
 8000584:	81bb      	strh	r3, [r7, #12]
 8000586:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800058a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800058e:	429a      	cmp	r2, r3
 8000590:	dbb4      	blt.n	80004fc <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80005a2:	f000 fa29 	bl	80009f8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80005aa:	2201      	movs	r2, #1
 80005ac:	2178      	movs	r1, #120	; 0x78
 80005ae:	485b      	ldr	r0, [pc, #364]	; (800071c <SSD1306_Init+0x180>)
 80005b0:	f004 fd86 	bl	80050c0 <HAL_I2C_IsDeviceReady>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e0a9      	b.n	8000712 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80005be:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80005c2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005c4:	e002      	b.n	80005cc <SSD1306_Init+0x30>
		p--;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f9      	bne.n	80005c6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80005d2:	22ae      	movs	r2, #174	; 0xae
 80005d4:	2100      	movs	r1, #0
 80005d6:	2078      	movs	r0, #120	; 0x78
 80005d8:	f000 fa8a 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80005dc:	2220      	movs	r2, #32
 80005de:	2100      	movs	r1, #0
 80005e0:	2078      	movs	r0, #120	; 0x78
 80005e2:	f000 fa85 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80005e6:	2210      	movs	r2, #16
 80005e8:	2100      	movs	r1, #0
 80005ea:	2078      	movs	r0, #120	; 0x78
 80005ec:	f000 fa80 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005f0:	22b0      	movs	r2, #176	; 0xb0
 80005f2:	2100      	movs	r1, #0
 80005f4:	2078      	movs	r0, #120	; 0x78
 80005f6:	f000 fa7b 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80005fa:	22c8      	movs	r2, #200	; 0xc8
 80005fc:	2100      	movs	r1, #0
 80005fe:	2078      	movs	r0, #120	; 0x78
 8000600:	f000 fa76 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	2078      	movs	r0, #120	; 0x78
 800060a:	f000 fa71 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800060e:	2210      	movs	r2, #16
 8000610:	2100      	movs	r1, #0
 8000612:	2078      	movs	r0, #120	; 0x78
 8000614:	f000 fa6c 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000618:	2240      	movs	r2, #64	; 0x40
 800061a:	2100      	movs	r1, #0
 800061c:	2078      	movs	r0, #120	; 0x78
 800061e:	f000 fa67 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000622:	2281      	movs	r2, #129	; 0x81
 8000624:	2100      	movs	r1, #0
 8000626:	2078      	movs	r0, #120	; 0x78
 8000628:	f000 fa62 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800062c:	22ff      	movs	r2, #255	; 0xff
 800062e:	2100      	movs	r1, #0
 8000630:	2078      	movs	r0, #120	; 0x78
 8000632:	f000 fa5d 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000636:	22a1      	movs	r2, #161	; 0xa1
 8000638:	2100      	movs	r1, #0
 800063a:	2078      	movs	r0, #120	; 0x78
 800063c:	f000 fa58 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000640:	22a6      	movs	r2, #166	; 0xa6
 8000642:	2100      	movs	r1, #0
 8000644:	2078      	movs	r0, #120	; 0x78
 8000646:	f000 fa53 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800064a:	22a8      	movs	r2, #168	; 0xa8
 800064c:	2100      	movs	r1, #0
 800064e:	2078      	movs	r0, #120	; 0x78
 8000650:	f000 fa4e 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000654:	223f      	movs	r2, #63	; 0x3f
 8000656:	2100      	movs	r1, #0
 8000658:	2078      	movs	r0, #120	; 0x78
 800065a:	f000 fa49 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800065e:	22a4      	movs	r2, #164	; 0xa4
 8000660:	2100      	movs	r1, #0
 8000662:	2078      	movs	r0, #120	; 0x78
 8000664:	f000 fa44 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000668:	22d3      	movs	r2, #211	; 0xd3
 800066a:	2100      	movs	r1, #0
 800066c:	2078      	movs	r0, #120	; 0x78
 800066e:	f000 fa3f 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	2078      	movs	r0, #120	; 0x78
 8000678:	f000 fa3a 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800067c:	22d5      	movs	r2, #213	; 0xd5
 800067e:	2100      	movs	r1, #0
 8000680:	2078      	movs	r0, #120	; 0x78
 8000682:	f000 fa35 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000686:	22f0      	movs	r2, #240	; 0xf0
 8000688:	2100      	movs	r1, #0
 800068a:	2078      	movs	r0, #120	; 0x78
 800068c:	f000 fa30 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000690:	22d9      	movs	r2, #217	; 0xd9
 8000692:	2100      	movs	r1, #0
 8000694:	2078      	movs	r0, #120	; 0x78
 8000696:	f000 fa2b 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800069a:	2222      	movs	r2, #34	; 0x22
 800069c:	2100      	movs	r1, #0
 800069e:	2078      	movs	r0, #120	; 0x78
 80006a0:	f000 fa26 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80006a4:	22da      	movs	r2, #218	; 0xda
 80006a6:	2100      	movs	r1, #0
 80006a8:	2078      	movs	r0, #120	; 0x78
 80006aa:	f000 fa21 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80006ae:	2212      	movs	r2, #18
 80006b0:	2100      	movs	r1, #0
 80006b2:	2078      	movs	r0, #120	; 0x78
 80006b4:	f000 fa1c 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80006b8:	22db      	movs	r2, #219	; 0xdb
 80006ba:	2100      	movs	r1, #0
 80006bc:	2078      	movs	r0, #120	; 0x78
 80006be:	f000 fa17 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80006c2:	2220      	movs	r2, #32
 80006c4:	2100      	movs	r1, #0
 80006c6:	2078      	movs	r0, #120	; 0x78
 80006c8:	f000 fa12 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80006cc:	228d      	movs	r2, #141	; 0x8d
 80006ce:	2100      	movs	r1, #0
 80006d0:	2078      	movs	r0, #120	; 0x78
 80006d2:	f000 fa0d 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80006d6:	2214      	movs	r2, #20
 80006d8:	2100      	movs	r1, #0
 80006da:	2078      	movs	r0, #120	; 0x78
 80006dc:	f000 fa08 	bl	8000af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80006e0:	22af      	movs	r2, #175	; 0xaf
 80006e2:	2100      	movs	r1, #0
 80006e4:	2078      	movs	r0, #120	; 0x78
 80006e6:	f000 fa03 	bl	8000af0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80006ea:	222e      	movs	r2, #46	; 0x2e
 80006ec:	2100      	movs	r1, #0
 80006ee:	2078      	movs	r0, #120	; 0x78
 80006f0:	f000 f9fe 	bl	8000af0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 f843 	bl	8000780 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80006fa:	f000 f813 	bl	8000724 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <SSD1306_Init+0x184>)
 8000700:	2200      	movs	r2, #0
 8000702:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <SSD1306_Init+0x184>)
 8000706:	2200      	movs	r2, #0
 8000708:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <SSD1306_Init+0x184>)
 800070c:	2201      	movs	r2, #1
 800070e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000710:	2301      	movs	r3, #1
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200004c4 	.word	0x200004c4
 8000720:	20000440 	.word	0x20000440

08000724 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	e01d      	b.n	800076c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	3b50      	subs	r3, #80	; 0x50
 8000734:	b2db      	uxtb	r3, r3
 8000736:	461a      	mov	r2, r3
 8000738:	2100      	movs	r1, #0
 800073a:	2078      	movs	r0, #120	; 0x78
 800073c:	f000 f9d8 	bl	8000af0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2078      	movs	r0, #120	; 0x78
 8000746:	f000 f9d3 	bl	8000af0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800074a:	2210      	movs	r2, #16
 800074c:	2100      	movs	r1, #0
 800074e:	2078      	movs	r0, #120	; 0x78
 8000750:	f000 f9ce 	bl	8000af0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	01db      	lsls	r3, r3, #7
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <SSD1306_UpdateScreen+0x58>)
 800075a:	441a      	add	r2, r3
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	2078      	movs	r0, #120	; 0x78
 8000762:	f000 f95f 	bl	8000a24 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	3301      	adds	r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b07      	cmp	r3, #7
 8000770:	d9de      	bls.n	8000730 <SSD1306_UpdateScreen+0xc>
	}
}
 8000772:	bf00      	nop
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000040 	.word	0x20000040

08000780 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d101      	bne.n	8000794 <SSD1306_Fill+0x14>
 8000790:	2300      	movs	r3, #0
 8000792:	e000      	b.n	8000796 <SSD1306_Fill+0x16>
 8000794:	23ff      	movs	r3, #255	; 0xff
 8000796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079a:	4619      	mov	r1, r3
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <SSD1306_Fill+0x2c>)
 800079e:	f007 fc0d 	bl	8007fbc <memset>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000040 	.word	0x20000040

080007b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	80fb      	strh	r3, [r7, #6]
 80007ba:	460b      	mov	r3, r1
 80007bc:	80bb      	strh	r3, [r7, #4]
 80007be:	4613      	mov	r3, r2
 80007c0:	70fb      	strb	r3, [r7, #3]
	if (
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	2b7f      	cmp	r3, #127	; 0x7f
 80007c6:	d848      	bhi.n	800085a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80007c8:	88bb      	ldrh	r3, [r7, #4]
 80007ca:	2b3f      	cmp	r3, #63	; 0x3f
 80007cc:	d845      	bhi.n	800085a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <SSD1306_DrawPixel+0xb8>)
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d006      	beq.n	80007e4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf0c      	ite	eq
 80007dc:	2301      	moveq	r3, #1
 80007de:	2300      	movne	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d11a      	bne.n	8000820 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80007ea:	88fa      	ldrh	r2, [r7, #6]
 80007ec:	88bb      	ldrh	r3, [r7, #4]
 80007ee:	08db      	lsrs	r3, r3, #3
 80007f0:	b298      	uxth	r0, r3
 80007f2:	4603      	mov	r3, r0
 80007f4:	01db      	lsls	r3, r3, #7
 80007f6:	4413      	add	r3, r2
 80007f8:	4a1c      	ldr	r2, [pc, #112]	; (800086c <SSD1306_DrawPixel+0xbc>)
 80007fa:	5cd3      	ldrb	r3, [r2, r3]
 80007fc:	b25a      	sxtb	r2, r3
 80007fe:	88bb      	ldrh	r3, [r7, #4]
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	2101      	movs	r1, #1
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	b25b      	sxtb	r3, r3
 800080c:	4313      	orrs	r3, r2
 800080e:	b259      	sxtb	r1, r3
 8000810:	88fa      	ldrh	r2, [r7, #6]
 8000812:	4603      	mov	r3, r0
 8000814:	01db      	lsls	r3, r3, #7
 8000816:	4413      	add	r3, r2
 8000818:	b2c9      	uxtb	r1, r1
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <SSD1306_DrawPixel+0xbc>)
 800081c:	54d1      	strb	r1, [r2, r3]
 800081e:	e01d      	b.n	800085c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000820:	88fa      	ldrh	r2, [r7, #6]
 8000822:	88bb      	ldrh	r3, [r7, #4]
 8000824:	08db      	lsrs	r3, r3, #3
 8000826:	b298      	uxth	r0, r3
 8000828:	4603      	mov	r3, r0
 800082a:	01db      	lsls	r3, r3, #7
 800082c:	4413      	add	r3, r2
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <SSD1306_DrawPixel+0xbc>)
 8000830:	5cd3      	ldrb	r3, [r2, r3]
 8000832:	b25a      	sxtb	r2, r3
 8000834:	88bb      	ldrh	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	2101      	movs	r1, #1
 800083c:	fa01 f303 	lsl.w	r3, r1, r3
 8000840:	b25b      	sxtb	r3, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	b25b      	sxtb	r3, r3
 8000846:	4013      	ands	r3, r2
 8000848:	b259      	sxtb	r1, r3
 800084a:	88fa      	ldrh	r2, [r7, #6]
 800084c:	4603      	mov	r3, r0
 800084e:	01db      	lsls	r3, r3, #7
 8000850:	4413      	add	r3, r2
 8000852:	b2c9      	uxtb	r1, r1
 8000854:	4a05      	ldr	r2, [pc, #20]	; (800086c <SSD1306_DrawPixel+0xbc>)
 8000856:	54d1      	strb	r1, [r2, r3]
 8000858:	e000      	b.n	800085c <SSD1306_DrawPixel+0xac>
		return;
 800085a:	bf00      	nop
	}
}
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000440 	.word	0x20000440
 800086c:	20000040 	.word	0x20000040

08000870 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	460a      	mov	r2, r1
 800087a:	80fb      	strh	r3, [r7, #6]
 800087c:	4613      	mov	r3, r2
 800087e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000880:	4a05      	ldr	r2, [pc, #20]	; (8000898 <SSD1306_GotoXY+0x28>)
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <SSD1306_GotoXY+0x28>)
 8000888:	88bb      	ldrh	r3, [r7, #4]
 800088a:	8053      	strh	r3, [r2, #2]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	20000440 	.word	0x20000440

0800089c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008ac:	4b3a      	ldr	r3, [pc, #232]	; (8000998 <SSD1306_Putc+0xfc>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
	if (
 80008b8:	2b7f      	cmp	r3, #127	; 0x7f
 80008ba:	dc07      	bgt.n	80008cc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80008bc:	4b36      	ldr	r3, [pc, #216]	; (8000998 <SSD1306_Putc+0xfc>)
 80008be:	885b      	ldrh	r3, [r3, #2]
 80008c0:	461a      	mov	r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008c8:	2b3f      	cmp	r3, #63	; 0x3f
 80008ca:	dd01      	ble.n	80008d0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	e05e      	b.n	800098e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e04b      	b.n	800096e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	3b20      	subs	r3, #32
 80008de:	6839      	ldr	r1, [r7, #0]
 80008e0:	7849      	ldrb	r1, [r1, #1]
 80008e2:	fb01 f303 	mul.w	r3, r1, r3
 80008e6:	4619      	mov	r1, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	440b      	add	r3, r1
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	4413      	add	r3, r2
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	e030      	b.n	800095c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d010      	beq.n	800092c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800090a:	4b23      	ldr	r3, [pc, #140]	; (8000998 <SSD1306_Putc+0xfc>)
 800090c:	881a      	ldrh	r2, [r3, #0]
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	b29b      	uxth	r3, r3
 8000912:	4413      	add	r3, r2
 8000914:	b298      	uxth	r0, r3
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <SSD1306_Putc+0xfc>)
 8000918:	885a      	ldrh	r2, [r3, #2]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	b29b      	uxth	r3, r3
 800091e:	4413      	add	r3, r2
 8000920:	b29b      	uxth	r3, r3
 8000922:	79ba      	ldrb	r2, [r7, #6]
 8000924:	4619      	mov	r1, r3
 8000926:	f7ff ff43 	bl	80007b0 <SSD1306_DrawPixel>
 800092a:	e014      	b.n	8000956 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <SSD1306_Putc+0xfc>)
 800092e:	881a      	ldrh	r2, [r3, #0]
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	b29b      	uxth	r3, r3
 8000934:	4413      	add	r3, r2
 8000936:	b298      	uxth	r0, r3
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <SSD1306_Putc+0xfc>)
 800093a:	885a      	ldrh	r2, [r3, #2]
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	b29b      	uxth	r3, r3
 8000940:	4413      	add	r3, r2
 8000942:	b299      	uxth	r1, r3
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	2b00      	cmp	r3, #0
 8000948:	bf0c      	ite	eq
 800094a:	2301      	moveq	r3, #1
 800094c:	2300      	movne	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	461a      	mov	r2, r3
 8000952:	f7ff ff2d 	bl	80007b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	3301      	adds	r3, #1
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	4293      	cmp	r3, r2
 8000966:	d3c8      	bcc.n	80008fa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	3301      	adds	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	785b      	ldrb	r3, [r3, #1]
 8000972:	461a      	mov	r2, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	4293      	cmp	r3, r2
 8000978:	d3ad      	bcc.n	80008d6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <SSD1306_Putc+0xfc>)
 800097c:	881a      	ldrh	r2, [r3, #0]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b29b      	uxth	r3, r3
 8000984:	4413      	add	r3, r2
 8000986:	b29a      	uxth	r2, r3
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <SSD1306_Putc+0xfc>)
 800098a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800098c:	79fb      	ldrb	r3, [r7, #7]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000440 	.word	0x20000440

0800099c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	4613      	mov	r3, r2
 80009a8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80009aa:	e012      	b.n	80009d2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	68b9      	ldr	r1, [r7, #8]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff71 	bl	800089c <SSD1306_Putc>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d002      	beq.n	80009cc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	e008      	b.n	80009de <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3301      	adds	r3, #1
 80009d0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d1e8      	bne.n	80009ac <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	781b      	ldrb	r3, [r3, #0]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff fec8 	bl	8000780 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80009f0:	f7ff fe98 	bl	8000724 <SSD1306_UpdateScreen>
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <ssd1306_I2C_Init+0x28>)
 8000a00:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a02:	e002      	b.n	8000a0a <ssd1306_I2C_Init+0x12>
		p--;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1f9      	bne.n	8000a04 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	0003d090 	.word	0x0003d090

08000a24 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b0c7      	sub	sp, #284	; 0x11c
 8000a28:	af02      	add	r7, sp, #8
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	4608      	mov	r0, r1
 8000a2e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000a32:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000a36:	600a      	str	r2, [r1, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a3e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000a42:	4622      	mov	r2, r4
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a4a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000a4e:	4602      	mov	r2, r0
 8000a50:	701a      	strb	r2, [r3, #0]
 8000a52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a5a:	460a      	mov	r2, r1
 8000a5c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a66:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a6a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000a6e:	7812      	ldrb	r2, [r2, #0]
 8000a70:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000a78:	e015      	b.n	8000aa6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000a7a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a7e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a82:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000a86:	6812      	ldr	r2, [r2, #0]
 8000a88:	441a      	add	r2, r3
 8000a8a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a8e:	3301      	adds	r3, #1
 8000a90:	7811      	ldrb	r1, [r2, #0]
 8000a92:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a96:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000a9a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a9c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000aa6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ab0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ab4:	8812      	ldrh	r2, [r2, #0]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d8df      	bhi.n	8000a7a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&SSD1306_I2C, address, dt, count+1, 10);
 8000aba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000abe:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b299      	uxth	r1, r3
 8000ac6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	f107 020c 	add.w	r2, r7, #12
 8000ad8:	200a      	movs	r0, #10
 8000ada:	9000      	str	r0, [sp, #0]
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <ssd1306_I2C_WriteMulti+0xc8>)
 8000ade:	f003 fed1 	bl	8004884 <HAL_I2C_Master_Transmit>
}
 8000ae2:	bf00      	nop
 8000ae4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	200004c4 	.word	0x200004c4

08000af0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
 8000afa:	460b      	mov	r3, r1
 8000afc:	71bb      	strb	r3, [r7, #6]
 8000afe:	4613      	mov	r3, r2
 8000b00:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b06:	797b      	ldrb	r3, [r7, #5]
 8000b08:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&SSD1306_I2C, address, dt, 2, 10);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	b299      	uxth	r1, r3
 8000b0e:	f107 020c 	add.w	r2, r7, #12
 8000b12:	230a      	movs	r3, #10
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2302      	movs	r3, #2
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <ssd1306_I2C_Write+0x38>)
 8000b1a:	f003 feb3 	bl	8004884 <HAL_I2C_Master_Transmit>
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200004c4 	.word	0x200004c4

08000b2c <find_uart_dev_instant>:
		}
	}
	return -1;
}

static int find_uart_dev_instant(UART_HandleTypeDef *huart){
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e00e      	b.n	8000b58 <find_uart_dev_instant+0x2c>
		if(uart_drvs[i]->huart->Instance == huart->Instance){
 8000b3a:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <find_uart_dev_instant+0x44>)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d101      	bne.n	8000b52 <find_uart_dev_instant+0x26>
			return i;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	e007      	b.n	8000b62 <find_uart_dev_instant+0x36>
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	dded      	ble.n	8000b3a <find_uart_dev_instant+0xe>
		}
	}
	return -1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000448 	.word	0x20000448

08000b74 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	int idx = find_uart_dev_instant(huart);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ffd5 	bl	8000b2c <find_uart_dev_instant>
 8000b82:	60f8      	str	r0, [r7, #12]
	uart_drvs[idx]->tx_completed = true;
 8000b84:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <HAL_UART_TxCpltCallback+0x28>)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000448 	.word	0x20000448

08000ba0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
	HAL_UART_RxCpltCallback(huart);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

	int idx = find_uart_dev_instant(huart);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ffbf 	bl	8000b2c <find_uart_dev_instant>
 8000bae:	6138      	str	r0, [r7, #16]
	uart_drv_t *uart_drv = uart_drvs[idx];
 8000bb0:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <HAL_UART_RxCpltCallback+0x94>)
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	60fb      	str	r3, [r7, #12]

	uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	817b      	strh	r3, [r7, #10]
	uint16_t length =  sizeof(uart_drv->rx_dma_buffer) - currCNDTR;
 8000bc4:	897b      	ldrh	r3, [r7, #10]
 8000bc6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000bca:	813b      	strh	r3, [r7, #8]

	/* Copy and process new data */
	for(uint16_t i=0; i<length; i++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	82fb      	strh	r3, [r7, #22]
 8000bd0:	e00d      	b.n	8000bee <HAL_UART_RxCpltCallback+0x4e>
	{
		cbuf_put(&uart_drv->rx_cbuf_handle, uart_drv->rx_dma_buffer[i]);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f203 601c 	addw	r0, r3, #1564	; 0x61c
 8000bd8:	8afb      	ldrh	r3, [r7, #22]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4413      	add	r3, r2
 8000bde:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000be2:	4619      	mov	r1, r3
 8000be4:	f000 f828 	bl	8000c38 <cbuf_put>
	for(uint16_t i=0; i<length; i++)
 8000be8:	8afb      	ldrh	r3, [r7, #22]
 8000bea:	3301      	adds	r3, #1
 8000bec:	82fb      	strh	r3, [r7, #22]
 8000bee:	8afa      	ldrh	r2, [r7, #22]
 8000bf0:	893b      	ldrh	r3, [r7, #8]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d3ed      	bcc.n	8000bd2 <HAL_UART_RxCpltCallback+0x32>
	}

	__HAL_DMA_DISABLE(huart->hdmarx);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0201 	bic.w	r2, r2, #1
 8000c08:	601a      	str	r2, [r3, #0]
	huart->hdmarx->Instance->NDTR = sizeof(uart_drv->rx_dma_buffer);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c14:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(huart->hdmarx);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f042 0201 	orr.w	r2, r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000448 	.word	0x20000448

08000c38 <cbuf_put>:
    cbuf->tail = 0;
    cbuf->full = false;
}

int cbuf_put(circular_buf_t* cbuf, char data)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
    if(!cbuf_full(cbuf))
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 f82c 	bl	8000ca2 <cbuf_full>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f083 0301 	eor.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d01f      	beq.n	8000c96 <cbuf_put+0x5e>
    {
        cbuf->buffer[cbuf->head] = data;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	4413      	add	r3, r2
 8000c60:	78fa      	ldrb	r2, [r7, #3]
 8000c62:	701a      	strb	r2, [r3, #0]
        cbuf->head = (cbuf->head + 1) % cbuf->size;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	6852      	ldr	r2, [r2, #4]
 8000c6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c72:	fb01 f202 	mul.w	r2, r1, r2
 8000c76:	1a9a      	subs	r2, r3, r2
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
        cbuf->full = (cbuf->head == cbuf->tail);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	bf0c      	ite	eq
 8000c88:	2301      	moveq	r3, #1
 8000c8a:	2300      	movne	r3, #0
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	741a      	strb	r2, [r3, #16]
        return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e001      	b.n	8000c9a <cbuf_put+0x62>
    }
    return -1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <cbuf_full>:
{
    return (!cbuf->full && (cbuf->head == cbuf->tail));
}

bool cbuf_full(circular_buf_t *cbuf)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
    return cbuf->full;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7c1b      	ldrb	r3, [r3, #16]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <bno055_read>:
#define TEMPERATURE_UNITS				 		(0b00 << 4)
#elif BNO055_TEMPERATURE_UNITS == 1
#define TEMPERATURE_UNITS				 		(0b01 << 4)
#endif

static int bno055_read(uint8_t addr, uint8_t *value){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af04      	add	r7, sp, #16
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK){
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	2364      	movs	r3, #100	; 0x64
 8000cce:	9302      	str	r3, [sp, #8]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	2150      	movs	r1, #80	; 0x50
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <bno055_read+0x44>)
 8000cde:	f003 ffc9 	bl	8004c74 <HAL_I2C_Mem_Read>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <bno055_read+0x38>
		*value = 0;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
		return -1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	e000      	b.n	8000cf6 <bno055_read+0x3a>
	}
	return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200004c4 	.word	0x200004c4

08000d04 <bno055_write>:

static int bno055_write(uint8_t addr, uint8_t *value){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af04      	add	r7, sp, #16
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	2150      	movs	r1, #80	; 0x50
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <bno055_write+0x3c>)
 8000d26:	f003 feab 	bl	8004a80 <HAL_I2C_Mem_Write>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <bno055_write+0x32>
		return -1;
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	e000      	b.n	8000d38 <bno055_write+0x34>
	return 0;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200004c4 	.word	0x200004c4

08000d44 <bno055_read_bytes>:

static int bno055_read_bytes(uint8_t addr, uint8_t *value, uint8_t len){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af04      	add	r7, sp, #16
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, len, I2C_TIMEOUT_MS)!= HAL_OK){
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	2164      	movs	r1, #100	; 0x64
 8000d5e:	9102      	str	r1, [sp, #8]
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2301      	movs	r3, #1
 8000d68:	2150      	movs	r1, #80	; 0x50
 8000d6a:	480a      	ldr	r0, [pc, #40]	; (8000d94 <bno055_read_bytes+0x50>)
 8000d6c:	f003 ff82 	bl	8004c74 <HAL_I2C_Mem_Read>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d008      	beq.n	8000d88 <bno055_read_bytes+0x44>
		memset(value,0,len);
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	6838      	ldr	r0, [r7, #0]
 8000d7e:	f007 f91d 	bl	8007fbc <memset>
		return -1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	e000      	b.n	8000d8a <bno055_read_bytes+0x46>
	}
	return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200004c4 	.word	0x200004c4

08000d98 <bno055_set_operation_mode>:


void bno055_set_operation_mode(bno055_opr_mode_t opr_mode);
void bno055_fusion_data_output_systems(fusion_data_output_systems_t data_systems);

void bno055_set_operation_mode(bno055_opr_mode_t opr_mode){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(opr_mode){
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b0c      	cmp	r3, #12
 8000da6:	f200 8092 	bhi.w	8000ece <bno055_set_operation_mode+0x136>
 8000daa:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <bno055_set_operation_mode+0x18>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000de5 	.word	0x08000de5
 8000db4:	08000df7 	.word	0x08000df7
 8000db8:	08000e09 	.word	0x08000e09
 8000dbc:	08000e1b 	.word	0x08000e1b
 8000dc0:	08000e2d 	.word	0x08000e2d
 8000dc4:	08000e3f 	.word	0x08000e3f
 8000dc8:	08000e51 	.word	0x08000e51
 8000dcc:	08000e63 	.word	0x08000e63
 8000dd0:	08000e75 	.word	0x08000e75
 8000dd4:	08000e87 	.word	0x08000e87
 8000dd8:	08000e99 	.word	0x08000e99
 8000ddc:	08000eab 	.word	0x08000eab
 8000de0:	08000ebd 	.word	0x08000ebd
	case BNO055_OPERATION_CONFIG_MODE:
		tmp = BNO055_OPERATION_CONFIG_MODE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000de8:	f107 030f 	add.w	r3, r7, #15
 8000dec:	4619      	mov	r1, r3
 8000dee:	203d      	movs	r0, #61	; 0x3d
 8000df0:	f7ff ff88 	bl	8000d04 <bno055_write>
	break;
 8000df4:	e06b      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCONLY:
		tmp = BNO055_OPERATION_MODE_ACCONLY;
 8000df6:	2301      	movs	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000dfa:	f107 030f 	add.w	r3, r7, #15
 8000dfe:	4619      	mov	r1, r3
 8000e00:	203d      	movs	r0, #61	; 0x3d
 8000e02:	f7ff ff7f 	bl	8000d04 <bno055_write>
	break;
 8000e06:	e062      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_MAGONLY:
		tmp = BNO055_OPERATION_MODE_MAGONLY;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e0c:	f107 030f 	add.w	r3, r7, #15
 8000e10:	4619      	mov	r1, r3
 8000e12:	203d      	movs	r0, #61	; 0x3d
 8000e14:	f7ff ff76 	bl	8000d04 <bno055_write>
	break;
 8000e18:	e059      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_GYROONLY:
		tmp = BNO055_OPERATION_MODE_GYROONLY;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e1e:	f107 030f 	add.w	r3, r7, #15
 8000e22:	4619      	mov	r1, r3
 8000e24:	203d      	movs	r0, #61	; 0x3d
 8000e26:	f7ff ff6d 	bl	8000d04 <bno055_write>
	break;
 8000e2a:	e050      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCMAG:
		tmp = BNO055_OPERATION_MODE_ACCMAG;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e30:	f107 030f 	add.w	r3, r7, #15
 8000e34:	4619      	mov	r1, r3
 8000e36:	203d      	movs	r0, #61	; 0x3d
 8000e38:	f7ff ff64 	bl	8000d04 <bno055_write>
	break;
 8000e3c:	e047      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCGYRO:
		tmp = BNO055_OPERATION_MODE_ACCGYRO;
 8000e3e:	2305      	movs	r3, #5
 8000e40:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e42:	f107 030f 	add.w	r3, r7, #15
 8000e46:	4619      	mov	r1, r3
 8000e48:	203d      	movs	r0, #61	; 0x3d
 8000e4a:	f7ff ff5b 	bl	8000d04 <bno055_write>
	break;
 8000e4e:	e03e      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_MAGGYRO:
		tmp = BNO055_OPERATION_MODE_MAGGYRO;
 8000e50:	2306      	movs	r3, #6
 8000e52:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e54:	f107 030f 	add.w	r3, r7, #15
 8000e58:	4619      	mov	r1, r3
 8000e5a:	203d      	movs	r0, #61	; 0x3d
 8000e5c:	f7ff ff52 	bl	8000d04 <bno055_write>
	break;
 8000e60:	e035      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_AMG:
		tmp = BNO055_OPERATION_MODE_AMG;
 8000e62:	2307      	movs	r3, #7
 8000e64:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e66:	f107 030f 	add.w	r3, r7, #15
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	203d      	movs	r0, #61	; 0x3d
 8000e6e:	f7ff ff49 	bl	8000d04 <bno055_write>
	break;
 8000e72:	e02c      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_IMU:
		tmp = BNO055_OPERATION_MODE_IMU;
 8000e74:	2308      	movs	r3, #8
 8000e76:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e78:	f107 030f 	add.w	r3, r7, #15
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	203d      	movs	r0, #61	; 0x3d
 8000e80:	f7ff ff40 	bl	8000d04 <bno055_write>
	break;
 8000e84:	e023      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_COMPASS:
		tmp = BNO055_OPERATION_MODE_COMPASS;
 8000e86:	2309      	movs	r3, #9
 8000e88:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e8a:	f107 030f 	add.w	r3, r7, #15
 8000e8e:	4619      	mov	r1, r3
 8000e90:	203d      	movs	r0, #61	; 0x3d
 8000e92:	f7ff ff37 	bl	8000d04 <bno055_write>
	break;
 8000e96:	e01a      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_M4G:
		tmp = BNO055_OPERATION_MODE_M4G;
 8000e98:	230a      	movs	r3, #10
 8000e9a:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000e9c:	f107 030f 	add.w	r3, r7, #15
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	203d      	movs	r0, #61	; 0x3d
 8000ea4:	f7ff ff2e 	bl	8000d04 <bno055_write>
	break;
 8000ea8:	e011      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_NDOF_FMC_OFF:
		tmp = BNO055_OPERATION_MODE_NDOF_FMC_OFF;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000eae:	f107 030f 	add.w	r3, r7, #15
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	203d      	movs	r0, #61	; 0x3d
 8000eb6:	f7ff ff25 	bl	8000d04 <bno055_write>
	break;
 8000eba:	e008      	b.n	8000ece <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_NDOF:
		tmp = BNO055_OPERATION_MODE_NDOF;
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8000ec0:	f107 030f 	add.w	r3, r7, #15
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	203d      	movs	r0, #61	; 0x3d
 8000ec8:	f7ff ff1c 	bl	8000d04 <bno055_write>
	break;
 8000ecc:	bf00      	nop
	}
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop

08000ed8 <bno055_fusion_data_output_systems>:

void bno055_fusion_data_output_systems(fusion_data_output_systems_t data_systems){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(data_systems){
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <bno055_fusion_data_output_systems+0x16>
 8000ee8:	2b80      	cmp	r3, #128	; 0x80
 8000eea:	d009      	beq.n	8000f00 <bno055_fusion_data_output_systems+0x28>
	case ANDROID_FUSION_DATA_OUTPUT:
	tmp = ANDROID_FUSION_DATA_OUTPUT;
	bno055_write(UNIT_SEL,&tmp);
	break;
	}
}
 8000eec:	e011      	b.n	8000f12 <bno055_fusion_data_output_systems+0x3a>
	tmp = WINDOWS_FUSION_DATA_OUTPUT,
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
	bno055_write(UNIT_SEL,&tmp);
 8000ef2:	f107 030f 	add.w	r3, r7, #15
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	203b      	movs	r0, #59	; 0x3b
 8000efa:	f7ff ff03 	bl	8000d04 <bno055_write>
	break;
 8000efe:	e008      	b.n	8000f12 <bno055_fusion_data_output_systems+0x3a>
	tmp = ANDROID_FUSION_DATA_OUTPUT;
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	73fb      	strb	r3, [r7, #15]
	bno055_write(UNIT_SEL,&tmp);
 8000f04:	f107 030f 	add.w	r3, r7, #15
 8000f08:	4619      	mov	r1, r3
 8000f0a:	203b      	movs	r0, #59	; 0x3b
 8000f0c:	f7ff fefa 	bl	8000d04 <bno055_write>
	break;
 8000f10:	bf00      	nop
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <bno055_axis_remap_config>:

void bno055_axis_remap_config(bno055_axis_remap_config_t axis_remap){
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b084      	sub	sp, #16
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(axis_remap){
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b21      	cmp	r3, #33	; 0x21
 8000f28:	d002      	beq.n	8000f30 <bno055_axis_remap_config+0x16>
 8000f2a:	2b24      	cmp	r3, #36	; 0x24
 8000f2c:	d009      	beq.n	8000f42 <bno055_axis_remap_config+0x28>
	case REMAP_CONFIG_P1_2_4_7:
	tmp = REMAP_CONFIG_P1_2_4_7,
	bno055_write(AXIS_MAP_CONFIG,&tmp);
	break;
	}
}
 8000f2e:	e011      	b.n	8000f54 <bno055_axis_remap_config+0x3a>
	tmp = REMAP_CONFIG_P0_3_5_6,
 8000f30:	2321      	movs	r3, #33	; 0x21
 8000f32:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_CONFIG,&tmp);
 8000f34:	f107 030f 	add.w	r3, r7, #15
 8000f38:	4619      	mov	r1, r3
 8000f3a:	2041      	movs	r0, #65	; 0x41
 8000f3c:	f7ff fee2 	bl	8000d04 <bno055_write>
	break;
 8000f40:	e008      	b.n	8000f54 <bno055_axis_remap_config+0x3a>
	tmp = REMAP_CONFIG_P1_2_4_7,
 8000f42:	2324      	movs	r3, #36	; 0x24
 8000f44:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_CONFIG,&tmp);
 8000f46:	f107 030f 	add.w	r3, r7, #15
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	2041      	movs	r0, #65	; 0x41
 8000f4e:	f7ff fed9 	bl	8000d04 <bno055_write>
	break;
 8000f52:	bf00      	nop
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <bno055_axis_remap_sign>:

void bno055_axis_remap_sign(bno055_axis_remap_sign_t axis_remap_sign){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(axis_remap_sign){
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b07      	cmp	r3, #7
 8000f6a:	d85b      	bhi.n	8001024 <bno055_axis_remap_sign+0xc8>
 8000f6c:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <bno055_axis_remap_sign+0x18>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08000fa7 	.word	0x08000fa7
 8000f78:	08000fef 	.word	0x08000fef
 8000f7c:	08000fcb 	.word	0x08000fcb
 8000f80:	08000fdd 	.word	0x08000fdd
 8000f84:	08000f95 	.word	0x08000f95
 8000f88:	08001013 	.word	0x08001013
 8000f8c:	08000fb9 	.word	0x08000fb9
 8000f90:	08001001 	.word	0x08001001
	case REMAP_SIGN_P0:
	tmp = REMAP_SIGN_P0,
 8000f94:	2304      	movs	r3, #4
 8000f96:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000f98:	f107 030f 	add.w	r3, r7, #15
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	2042      	movs	r0, #66	; 0x42
 8000fa0:	f7ff feb0 	bl	8000d04 <bno055_write>
	break;
 8000fa4:	e03e      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P1:
	tmp = REMAP_SIGN_P1,
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000faa:	f107 030f 	add.w	r3, r7, #15
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2042      	movs	r0, #66	; 0x42
 8000fb2:	f7ff fea7 	bl	8000d04 <bno055_write>
	break;
 8000fb6:	e035      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P2:
	tmp = REMAP_SIGN_P2,
 8000fb8:	2306      	movs	r3, #6
 8000fba:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000fbc:	f107 030f 	add.w	r3, r7, #15
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	2042      	movs	r0, #66	; 0x42
 8000fc4:	f7ff fe9e 	bl	8000d04 <bno055_write>
	break;
 8000fc8:	e02c      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P3:
	tmp = REMAP_SIGN_P3,
 8000fca:	2302      	movs	r3, #2
 8000fcc:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000fce:	f107 030f 	add.w	r3, r7, #15
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	2042      	movs	r0, #66	; 0x42
 8000fd6:	f7ff fe95 	bl	8000d04 <bno055_write>
	break;
 8000fda:	e023      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P4:
	tmp = REMAP_SIGN_P4,
 8000fdc:	2303      	movs	r3, #3
 8000fde:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000fe0:	f107 030f 	add.w	r3, r7, #15
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	2042      	movs	r0, #66	; 0x42
 8000fe8:	f7ff fe8c 	bl	8000d04 <bno055_write>
	break;
 8000fec:	e01a      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P5:
	tmp = REMAP_SIGN_P5,
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8000ff2:	f107 030f 	add.w	r3, r7, #15
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2042      	movs	r0, #66	; 0x42
 8000ffa:	f7ff fe83 	bl	8000d04 <bno055_write>
	break;
 8000ffe:	e011      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P6:
	tmp = REMAP_SIGN_P6,
 8001000:	2307      	movs	r3, #7
 8001002:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8001004:	f107 030f 	add.w	r3, r7, #15
 8001008:	4619      	mov	r1, r3
 800100a:	2042      	movs	r0, #66	; 0x42
 800100c:	f7ff fe7a 	bl	8000d04 <bno055_write>
	break;
 8001010:	e008      	b.n	8001024 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P7:
	tmp = REMAP_SIGN_P7,
 8001012:	2305      	movs	r3, #5
 8001014:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8001016:	f107 030f 	add.w	r3, r7, #15
 800101a:	4619      	mov	r1, r3
 800101c:	2042      	movs	r0, #66	; 0x42
 800101e:	f7ff fe71 	bl	8000d04 <bno055_write>
	break;
 8001022:	bf00      	nop
	}
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <bno055_calibrations_status>:

int bno055_calibrations_status(char *sys, char *gyr, char *acc, char *mag){
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
	uint8_t tmp;
	uint8_t buffer_calib_sta[1] ={};
 800103a:	2300      	movs	r3, #0
 800103c:	753b      	strb	r3, [r7, #20]
	tmp = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	75fb      	strb	r3, [r7, #23]
	bno055_write(PAGE_ID,&tmp);
 8001042:	f107 0317 	add.w	r3, r7, #23
 8001046:	4619      	mov	r1, r3
 8001048:	2007      	movs	r0, #7
 800104a:	f7ff fe5b 	bl	8000d04 <bno055_write>
	if(bno055_read(CALIB_STAT,buffer_calib_sta)<0){
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	2035      	movs	r0, #53	; 0x35
 8001056:	f7ff fe31 	bl	8000cbc <bno055_read>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	da02      	bge.n	8001066 <bno055_calibrations_status+0x3a>
		return -1;
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	e012      	b.n	800108c <bno055_calibrations_status+0x60>
		*sys = (int8_t)((int8_t)buffer_calib_sta[0])>>6 & 0b11;
		*gyr = (int8_t)((int8_t)buffer_calib_sta[0])>>4 & 0b11;
		*acc = (int8_t)((int8_t)buffer_calib_sta[0])>>2 & 0b11;
		*mag = (int8_t)((int8_t)buffer_calib_sta[0]) & 0b11;
	}
	if((*sys == 3 && *gyr == 3 && *acc == 3 && *mag == 3)) return 1;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d10d      	bne.n	800108a <bno055_calibrations_status+0x5e>
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d109      	bne.n	800108a <bno055_calibrations_status+0x5e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b03      	cmp	r3, #3
 800107c:	d105      	bne.n	800108a <bno055_calibrations_status+0x5e>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d101      	bne.n	800108a <bno055_calibrations_status+0x5e>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <bno055_calibrations_status+0x60>
	return 0;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <bno055_initization>:
	st_mcu = (int8_t)((int8_t)buffer_test[0]) & 0b1000;
	if((seft_test = (((st_mcu|st_gyr)|st_mag)|st_acc))!=15) return -1;
	return 0;
}

int bno055_initization(){
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af04      	add	r7, sp, #16
	uint8_t tmp,member;
	char calib_sys;
	char calib_gyr, calib_acc, calib_mag;
    char i = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    char j = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    char snum_sys[5],snum_gyro[5],snum_acc[1],snum_mag[5];
    char i_check=0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    char buzzer = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t check_sys[1] = {};
 80010b2:	2300      	movs	r3, #0
 80010b4:	713b      	strb	r3, [r7, #4]
    for(i=0;i<1;i++){
 80010b6:	2300      	movs	r3, #0
 80010b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010bc:	e02c      	b.n	8001118 <bno055_initization+0x84>
  	  for(j=0;j<3;j++){
 80010be:	2300      	movs	r3, #0
 80010c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80010c4:	e01f      	b.n	8001106 <bno055_initization+0x72>
  		  if(HAL_I2C_IsDeviceReady(&BNO055__I2C,BNO055_I2C_ADDR, 1, 100)==HAL_OK){
 80010c6:	2364      	movs	r3, #100	; 0x64
 80010c8:	2201      	movs	r2, #1
 80010ca:	2150      	movs	r1, #80	; 0x50
 80010cc:	4862      	ldr	r0, [pc, #392]	; (8001258 <bno055_initization+0x1c4>)
 80010ce:	f003 fff7 	bl	80050c0 <HAL_I2C_IsDeviceReady>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d108      	bne.n	80010ea <bno055_initization+0x56>
  			  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80010d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010dc:	485f      	ldr	r0, [pc, #380]	; (800125c <bno055_initization+0x1c8>)
 80010de:	f003 fa72 	bl	80045c6 <HAL_GPIO_TogglePin>
  			  HAL_Delay(80);
 80010e2:	2050      	movs	r0, #80	; 0x50
 80010e4:	f002 f8aa 	bl	800323c <HAL_Delay>
 80010e8:	e008      	b.n	80010fc <bno055_initization+0x68>
  		  	  }
  		  else{
  			  HAL_GPIO_WritePin(GPIOC,BUZZER_Pin, SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f0:	485a      	ldr	r0, [pc, #360]	; (800125c <bno055_initization+0x1c8>)
 80010f2:	f003 fa4f 	bl	8004594 <HAL_GPIO_WritePin>
  			  HAL_Delay(100);
 80010f6:	2064      	movs	r0, #100	; 0x64
 80010f8:	f002 f8a0 	bl	800323c <HAL_Delay>
  	  for(j=0;j<3;j++){
 80010fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001100:	3301      	adds	r3, #1
 8001102:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001106:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800110a:	2b02      	cmp	r3, #2
 800110c:	d9db      	bls.n	80010c6 <bno055_initization+0x32>
    for(i=0;i<1;i++){
 800110e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001112:	3301      	adds	r3, #1
 8001114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0ce      	beq.n	80010be <bno055_initization+0x2a>
  	  }
    }


	  /*Reset System */
	  tmp = 0x20;
 8001120:	2320      	movs	r3, #32
 8001122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  bno055_write(SYS_TRIGGER,&tmp);
 8001126:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800112a:	4619      	mov	r1, r3
 800112c:	203f      	movs	r0, #63	; 0x3f
 800112e:	f7ff fde9 	bl	8000d04 <bno055_write>
      delay_ms(600);
 8001132:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001136:	f000 f91b 	bl	8001370 <delay_ms>
      member = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      HAL_I2C_Mem_Read(&BNO055__I2C,BNO055_I2C_ADDR,CHIP_ID_PAGE_0, I2C_MEMADD_SIZE_8BIT, &member, 1, I2C_TIMEOUT_MS);
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	2301      	movs	r3, #1
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	2200      	movs	r2, #0
 8001152:	2150      	movs	r1, #80	; 0x50
 8001154:	4840      	ldr	r0, [pc, #256]	; (8001258 <bno055_initization+0x1c4>)
 8001156:	f003 fd8d 	bl	8004c74 <HAL_I2C_Mem_Read>
      if(member==BNO055_ID){
 800115a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800115e:	2ba0      	cmp	r3, #160	; 0xa0
 8001160:	d106      	bne.n	8001170 <bno055_initization+0xdc>
    	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001168:	483c      	ldr	r0, [pc, #240]	; (800125c <bno055_initization+0x1c8>)
 800116a:	f003 fa13 	bl	8004594 <HAL_GPIO_WritePin>
 800116e:	e005      	b.n	800117c <bno055_initization+0xe8>
      }
      else{
    	  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, SET);
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001176:	4839      	ldr	r0, [pc, #228]	; (800125c <bno055_initization+0x1c8>)
 8001178:	f003 fa0c 	bl	8004594 <HAL_GPIO_WritePin>
      }
    /* Set operation_mode BNO055_OPERATION_CONFIG_MODE */
    bno055_set_operation_mode(BNO055_OPERATION_CONFIG_MODE);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fe0b 	bl	8000d98 <bno055_set_operation_mode>
    delay_ms(19);
 8001182:	2013      	movs	r0, #19
 8001184:	f000 f8f4 	bl	8001370 <delay_ms>
	/* Configurations Power Mode */
	tmp = POWER_MODE_NORMAL;
 8001188:	2300      	movs	r3, #0
 800118a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	bno055_write(PWR_MODE,&tmp);
 800118e:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001192:	4619      	mov	r1, r3
 8001194:	203e      	movs	r0, #62	; 0x3e
 8001196:	f7ff fdb5 	bl	8000d04 <bno055_write>
    //Move to Page 1//
	tmp = 0x01;
 800119a:	2301      	movs	r3, #1
 800119c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	bno055_write(PAGE_ID,&tmp);
 80011a0:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80011a4:	4619      	mov	r1, r3
 80011a6:	2007      	movs	r0, #7
 80011a8:	f7ff fdac 	bl	8000d04 <bno055_write>
    /* Configurations Accelerometer */
	tmp = (ACCEL_OPERATION_MODE_NORMAL | ACCEL_BANDWIDTH)| ACCEL_G_RANGE;
 80011ac:	230d      	movs	r3, #13
 80011ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	bno055_write(ACC_CONFIG,&tmp);
 80011b2:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80011b6:	4619      	mov	r1, r3
 80011b8:	2008      	movs	r0, #8
 80011ba:	f7ff fda3 	bl	8000d04 <bno055_write>
    /* Configurations Gyroscope */
	tmp = GYR_BANDWIDTH | GYRO_RANGE;
 80011be:	2338      	movs	r3, #56	; 0x38
 80011c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	bno055_write(GYR_CONFIG_0,&tmp);
 80011c4:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80011c8:	4619      	mov	r1, r3
 80011ca:	200a      	movs	r0, #10
 80011cc:	f7ff fd9a 	bl	8000d04 <bno055_write>
	tmp = GYR_OPERATION_MODE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	bno055_write(GYR_CONFIG_1,&tmp);
 80011d6:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80011da:	4619      	mov	r1, r3
 80011dc:	200b      	movs	r0, #11
 80011de:	f7ff fd91 	bl	8000d04 <bno055_write>
    /* Configurations Magnetometer */
	tmp = (MAG_PWR_MODE | MAG_OPERATION_MODE)| BNO055_MAG_DATA_OUTPUT_RATE;
 80011e2:	237b      	movs	r3, #123	; 0x7b
 80011e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	bno055_write(MAG_CONFIG,&tmp);
 80011e8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80011ec:	4619      	mov	r1, r3
 80011ee:	2009      	movs	r0, #9
 80011f0:	f7ff fd88 	bl	8000d04 <bno055_write>
  	/*Configuration Sensor Unit*/
  	//Move to Page 0//
    tmp = 0x00;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    bno055_write(PAGE_ID,&tmp);
 80011fa:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80011fe:	4619      	mov	r1, r3
 8001200:	2007      	movs	r0, #7
 8001202:	f7ff fd7f 	bl	8000d04 <bno055_write>
    tmp = (((TEMPERATURE_UNITS | EULER_ANGLES_UNITS)| ANGULAR_RATE_UNITS)| BNO055_ACCEL_UNITS);
 8001206:	2300      	movs	r3, #0
 8001208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    bno055_write(UNIT_SEL,&tmp);
 800120c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001210:	4619      	mov	r1, r3
 8001212:	203b      	movs	r0, #59	; 0x3b
 8001214:	f7ff fd76 	bl	8000d04 <bno055_write>
    bno055_fusion_data_output_systems(ANDROID_FUSION_DATA_OUTPUT);
 8001218:	2080      	movs	r0, #128	; 0x80
 800121a:	f7ff fe5d 	bl	8000ed8 <bno055_fusion_data_output_systems>
    /* Configure axis mapping*/
    bno055_axis_remap_config(REMAP_CONFIG_P1_2_4_7);
 800121e:	2024      	movs	r0, #36	; 0x24
 8001220:	f7ff fe7b 	bl	8000f1a <bno055_axis_remap_config>
    bno055_axis_remap_sign(REMAP_SIGN_P1);
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff fe99 	bl	8000f5c <bno055_axis_remap_sign>
    //set BNO055 SYS_TRIGGER TO 0x00
    tmp = 0x00;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    bno055_write(SYS_TRIGGER,&tmp);
 8001230:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001234:	4619      	mov	r1, r3
 8001236:	203f      	movs	r0, #63	; 0x3f
 8001238:	f7ff fd64 	bl	8000d04 <bno055_write>
    delay_ms(50);
 800123c:	2032      	movs	r0, #50	; 0x32
 800123e:	f000 f897 	bl	8001370 <delay_ms>
    //set BNO055_OPERATION_MODE_NDOF
    bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8001242:	200c      	movs	r0, #12
 8001244:	f7ff fda8 	bl	8000d98 <bno055_set_operation_mode>
    delay_ms(20);
 8001248:	2014      	movs	r0, #20
 800124a:	f000 f891 	bl	8001370 <delay_ms>
//   			SSD1306_UpdateScreen();
//   			HAL_GPIO_TogglePin(GPIOC, LED_Pin);
//   			delay_ms(50);
//            }
//       }
    return 0;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200004c4 	.word	0x200004c4
 800125c:	40020800 	.word	0x40020800

08001260 <bno055_get_elu_data>:
				return -1;
			}
	*temp = buffer_temp[0] / BNO055_TEMP_SCALE;
	return 0;
}
int bno055_get_elu_data(float *roll, float *pitch, float *yaw){
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_eul[6] = {};
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	2300      	movs	r3, #0
 8001272:	82bb      	strh	r3, [r7, #20]
	tmp = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	75fb      	strb	r3, [r7, #23]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8001278:	f107 0317 	add.w	r3, r7, #23
 800127c:	4619      	mov	r1, r3
 800127e:	2007      	movs	r0, #7
 8001280:	f7ff fd40 	bl	8000d04 <bno055_write>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	da02      	bge.n	8001290 <bno055_get_elu_data+0x30>
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	e052      	b.n	8001336 <bno055_get_elu_data+0xd6>
	if(bno055_read_bytes(EUL_HEADING_LSB,buffer_eul,6)<0){
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	2206      	movs	r2, #6
 8001296:	4619      	mov	r1, r3
 8001298:	201a      	movs	r0, #26
 800129a:	f7ff fd53 	bl	8000d44 <bno055_read_bytes>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	da02      	bge.n	80012aa <bno055_get_elu_data+0x4a>
					return -1;
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295
 80012a8:	e045      	b.n	8001336 <bno055_get_elu_data+0xd6>
	}
	*yaw = (int16_t)((int16_t)buffer_eul[1]  << 8) | buffer_eul[0]; *yaw /= BNO055_EUL_SCALE;
 80012aa:	7c7b      	ldrb	r3, [r7, #17]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	7c3b      	ldrb	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	edc3 7a00 	vstr	s15, [r3]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	ed93 7a00 	vldr	s14, [r3]
 80012ca:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80012ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	edc3 7a00 	vstr	s15, [r3]
	*roll = (int16_t)((int16_t)buffer_eul[3]  << 8) | buffer_eul[2]; *roll /= BNO055_EUL_SCALE;
 80012d8:	7cfb      	ldrb	r3, [r7, #19]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	b21b      	sxth	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	7cbb      	ldrb	r3, [r7, #18]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	edc3 7a00 	vstr	s15, [r3]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	ed93 7a00 	vldr	s14, [r3]
 80012f8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80012fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	edc3 7a00 	vstr	s15, [r3]
	*pitch = (int16_t)((int16_t)buffer_eul[5]  << 8) | buffer_eul[4]; *pitch /= BNO055_EUL_SCALE;
 8001306:	7d7b      	ldrb	r3, [r7, #21]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21b      	sxth	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	7d3b      	ldrb	r3, [r7, #20]
 8001310:	4313      	orrs	r3, r2
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	edc3 7a00 	vstr	s15, [r3]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	ed93 7a00 	vldr	s14, [r3]
 8001326:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800132a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <delay_us>:

#include "tim.h"
#include "user_define.h"


void delay_us(uint32_t us){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&TIM_DELAY_US,0);  // set the counter value a 0
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <delay_us+0x2c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&TIM_DELAY_US) < us);  // wait for the counter to reach the us input in the parameter
 8001350:	bf00      	nop
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <delay_us+0x2c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	d8f9      	bhi.n	8001352 <delay_us+0x12>
}
 800135e:	bf00      	nop
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	20000610 	.word	0x20000610

08001370 <delay_ms>:

void delay_ms(uint32_t ms){
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&TIM_DELAY_MS,0);  // set the counter value a 0
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <delay_ms+0x34>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&TIM_DELAY_MS) < ms*1000);  // wait for the counter to reach the us input in the parameter
 8001380:	bf00      	nop
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <delay_ms+0x34>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800138e:	fb01 f303 	mul.w	r3, r1, r3
 8001392:	429a      	cmp	r2, r3
 8001394:	d3f5      	bcc.n	8001382 <delay_ms+0x12>
}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	20000610 	.word	0x20000610

080013a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <MX_ADC1_Init+0x98>)
 80013bc:	4a21      	ldr	r2, [pc, #132]	; (8001444 <MX_ADC1_Init+0x9c>)
 80013be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <MX_ADC1_Init+0x98>)
 80013c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_ADC1_Init+0x98>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_ADC1_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_ADC1_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <MX_ADC1_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_ADC1_Init+0x98>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_ADC1_Init+0x98>)
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <MX_ADC1_Init+0xa0>)
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_ADC1_Init+0x98>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_ADC1_Init+0x98>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_ADC1_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_ADC1_Init+0x98>)
 8001404:	2201      	movs	r2, #1
 8001406:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <MX_ADC1_Init+0x98>)
 800140a:	f001 ff3b 	bl	8003284 <HAL_ADC_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 fd00 	bl	8001e18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001418:	230b      	movs	r3, #11
 800141a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800141c:	2301      	movs	r3, #1
 800141e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_ADC1_Init+0x98>)
 800142a:	f001 ff6f 	bl	800330c <HAL_ADC_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001434:	f000 fcf0 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000454 	.word	0x20000454
 8001444:	40012000 	.word	0x40012000
 8001448:	0f000001 	.word	0x0f000001

0800144c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_ADC_MspInit+0x7c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d127      	bne.n	80014be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_ADC_MspInit+0x80>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = MCU_ADC_1_Pin|MCU_ADC_2_Pin|MCU_ADC_3_Pin;
 80014a6:	230e      	movs	r3, #14
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014aa:	2303      	movs	r3, #3
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_ADC_MspInit+0x84>)
 80014ba:	f002 fecf 	bl	800425c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40012000 	.word	0x40012000
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020800 	.word	0x40020800

080014d4 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_CAN2_Init+0x60>)
 80014da:	4a17      	ldr	r2, [pc, #92]	; (8001538 <MX_CAN2_Init+0x64>)
 80014dc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <MX_CAN2_Init+0x60>)
 80014e0:	2210      	movs	r2, #16
 80014e2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_CAN2_Init+0x60>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_CAN2_Init+0x60>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <MX_CAN2_Init+0x60>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_CAN2_Init+0x60>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <MX_CAN2_Init+0x60>)
 80014fe:	2200      	movs	r2, #0
 8001500:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_CAN2_Init+0x60>)
 8001504:	2200      	movs	r2, #0
 8001506:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_CAN2_Init+0x60>)
 800150a:	2200      	movs	r2, #0
 800150c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_CAN2_Init+0x60>)
 8001510:	2200      	movs	r2, #0
 8001512:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <MX_CAN2_Init+0x60>)
 8001516:	2200      	movs	r2, #0
 8001518:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_CAN2_Init+0x60>)
 800151c:	2200      	movs	r2, #0
 800151e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_CAN2_Init+0x60>)
 8001522:	f002 f911 	bl	8003748 <HAL_CAN_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 800152c:	f000 fc74 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000049c 	.word	0x2000049c
 8001538:	40006800 	.word	0x40006800

0800153c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a20      	ldr	r2, [pc, #128]	; (80015dc <HAL_CAN_MspInit+0xa0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d13a      	bne.n	80015d4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <HAL_CAN_MspInit+0xa4>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <HAL_CAN_MspInit+0xa4>)
 8001568:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <HAL_CAN_MspInit+0xa4>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <HAL_CAN_MspInit+0xa4>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <HAL_CAN_MspInit+0xa4>)
 8001584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_CAN_MspInit+0xa4>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_CAN_MspInit+0xa4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_CAN_MspInit+0xa4>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_CAN_MspInit+0xa4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = MCU_CAN_RX_Pin|MCU_CAN_TX_Pin;
 80015b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80015c4:	2309      	movs	r3, #9
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <HAL_CAN_MspInit+0xa8>)
 80015d0:	f002 fe44 	bl	800425c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40006800 	.word	0x40006800
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020400 	.word	0x40020400

080015e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <MX_DMA_Init+0x108>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a3e      	ldr	r2, [pc, #248]	; (80016f0 <MX_DMA_Init+0x108>)
 80015f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <MX_DMA_Init+0x108>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <MX_DMA_Init+0x108>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a37      	ldr	r2, [pc, #220]	; (80016f0 <MX_DMA_Init+0x108>)
 8001614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <MX_DMA_Init+0x108>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	200b      	movs	r0, #11
 800162c:	f002 fa63 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001630:	200b      	movs	r0, #11
 8001632:	f002 fa7c 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	200c      	movs	r0, #12
 800163c:	f002 fa5b 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001640:	200c      	movs	r0, #12
 8001642:	f002 fa74 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	200d      	movs	r0, #13
 800164c:	f002 fa53 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001650:	200d      	movs	r0, #13
 8001652:	f002 fa6c 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	200e      	movs	r0, #14
 800165c:	f002 fa4b 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001660:	200e      	movs	r0, #14
 8001662:	f002 fa64 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	200f      	movs	r0, #15
 800166c:	f002 fa43 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001670:	200f      	movs	r0, #15
 8001672:	f002 fa5c 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	2010      	movs	r0, #16
 800167c:	f002 fa3b 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001680:	2010      	movs	r0, #16
 8001682:	f002 fa54 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2011      	movs	r0, #17
 800168c:	f002 fa33 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001690:	2011      	movs	r0, #17
 8001692:	f002 fa4c 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	202f      	movs	r0, #47	; 0x2f
 800169c:	f002 fa2b 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80016a0:	202f      	movs	r0, #47	; 0x2f
 80016a2:	f002 fa44 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	2039      	movs	r0, #57	; 0x39
 80016ac:	f002 fa23 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80016b0:	2039      	movs	r0, #57	; 0x39
 80016b2:	f002 fa3c 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	203a      	movs	r0, #58	; 0x3a
 80016bc:	f002 fa1b 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80016c0:	203a      	movs	r0, #58	; 0x3a
 80016c2:	f002 fa34 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2045      	movs	r0, #69	; 0x45
 80016cc:	f002 fa13 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80016d0:	2045      	movs	r0, #69	; 0x45
 80016d2:	f002 fa2c 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2046      	movs	r0, #70	; 0x46
 80016dc:	f002 fa0b 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80016e0:	2046      	movs	r0, #70	; 0x46
 80016e2:	f002 fa24 	bl	8003b2e <HAL_NVIC_EnableIRQ>

}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <MX_GPIO_Init>:
        * EXTI
     PA15   ------> S_TIM2_CH1_ETR
     PB3   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b54      	ldr	r3, [pc, #336]	; (8001860 <MX_GPIO_Init+0x16c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a53      	ldr	r2, [pc, #332]	; (8001860 <MX_GPIO_Init+0x16c>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b51      	ldr	r3, [pc, #324]	; (8001860 <MX_GPIO_Init+0x16c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <MX_GPIO_Init+0x16c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a4c      	ldr	r2, [pc, #304]	; (8001860 <MX_GPIO_Init+0x16c>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <MX_GPIO_Init+0x16c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b46      	ldr	r3, [pc, #280]	; (8001860 <MX_GPIO_Init+0x16c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a45      	ldr	r2, [pc, #276]	; (8001860 <MX_GPIO_Init+0x16c>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b43      	ldr	r3, [pc, #268]	; (8001860 <MX_GPIO_Init+0x16c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <MX_GPIO_Init+0x16c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a3e      	ldr	r2, [pc, #248]	; (8001860 <MX_GPIO_Init+0x16c>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <MX_GPIO_Init+0x16c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 800177a:	2200      	movs	r2, #0
 800177c:	f246 0131 	movw	r1, #24625	; 0x6031
 8001780:	4838      	ldr	r0, [pc, #224]	; (8001864 <MX_GPIO_Init+0x170>)
 8001782:	f002 ff07 	bl	8004594 <HAL_GPIO_WritePin>
                          |ADD_SPI_CSn_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800178c:	4836      	ldr	r0, [pc, #216]	; (8001868 <MX_GPIO_Init+0x174>)
 800178e:	f002 ff01 	bl	8004594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_LORA_RST_GPIO_Port, MCU_LORA_RST_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001798:	4834      	ldr	r0, [pc, #208]	; (800186c <MX_GPIO_Init+0x178>)
 800179a:	f002 fefb 	bl	8004594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 800179e:	f246 0331 	movw	r3, #24625	; 0x6031
 80017a2:	617b      	str	r3, [r7, #20]
                          |ADD_SPI_CSn_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	482b      	ldr	r0, [pc, #172]	; (8001864 <MX_GPIO_Init+0x170>)
 80017b8:	f002 fd50 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80017bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4824      	ldr	r0, [pc, #144]	; (8001864 <MX_GPIO_Init+0x170>)
 80017d4:	f002 fd42 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin;
 80017d8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	481d      	ldr	r0, [pc, #116]	; (8001868 <MX_GPIO_Init+0x174>)
 80017f2:	f002 fd33 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_LORA_RST_Pin;
 80017f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_LORA_RST_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	4817      	ldr	r0, [pc, #92]	; (800186c <MX_GPIO_Init+0x178>)
 8001810:	f002 fd24 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR1_Pin;
 8001814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001826:	2301      	movs	r3, #1
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR1_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	480e      	ldr	r0, [pc, #56]	; (800186c <MX_GPIO_Init+0x178>)
 8001832:	f002 fd13 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR2_Pin;
 8001836:	2308      	movs	r3, #8
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001846:	2301      	movs	r3, #1
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR2_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_GPIO_Init+0x174>)
 8001852:	f002 fd03 	bl	800425c <HAL_GPIO_Init>

}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	40020800 	.word	0x40020800
 8001868:	40020400 	.word	0x40020400
 800186c:	40020000 	.word	0x40020000

08001870 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_I2C1_Init+0x74>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <MX_I2C1_Init+0x74>)
 8001880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <MX_I2C1_Init+0x74>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_I2C1_Init+0x78>)
 8001894:	4a15      	ldr	r2, [pc, #84]	; (80018ec <MX_I2C1_Init+0x7c>)
 8001896:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <MX_I2C1_Init+0x78>)
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <MX_I2C1_Init+0x80>)
 800189c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_I2C1_Init+0x78>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <MX_I2C1_Init+0x78>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_I2C1_Init+0x78>)
 80018ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <MX_I2C1_Init+0x78>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <MX_I2C1_Init+0x78>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <MX_I2C1_Init+0x78>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <MX_I2C1_Init+0x78>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <MX_I2C1_Init+0x78>)
 80018cc:	f002 fe96 	bl	80045fc <HAL_I2C_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_I2C1_Init+0x6a>
  {
    Error_Handler();
 80018d6:	f000 fa9f 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	200004c4 	.word	0x200004c4
 80018ec:	40005400 	.word	0x40005400
 80018f0:	00061a80 	.word	0x00061a80

080018f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_I2C_MspInit+0x84>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d12c      	bne.n	8001970 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_I2C_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a17      	ldr	r2, [pc, #92]	; (800197c <HAL_I2C_MspInit+0x88>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_I2C_MspInit+0x88>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MCU_I2C_SCL_Pin|MCU_I2C_SDA_Pin;
 8001932:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001938:	2312      	movs	r3, #18
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001944:	2304      	movs	r3, #4
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	480c      	ldr	r0, [pc, #48]	; (8001980 <HAL_I2C_MspInit+0x8c>)
 8001950:	f002 fc84 	bl	800425c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_I2C_MspInit+0x88>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_I2C_MspInit+0x88>)
 800195e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001962:	6413      	str	r3, [r2, #64]	; 0x40
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_I2C_MspInit+0x88>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40005400 	.word	0x40005400
 800197c:	40023800 	.word	0x40023800
 8001980:	40020400 	.word	0x40020400

08001984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b098      	sub	sp, #96	; 0x60
 8001988:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800198a:	f001 fbe5 	bl	8003158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198e:	f000 f9d9 	bl	8001d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001992:	f7ff feaf 	bl	80016f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001996:	f7ff fe27 	bl	80015e8 <MX_DMA_Init>
  MX_ADC1_Init();
 800199a:	f7ff fd05 	bl	80013a8 <MX_ADC1_Init>
  MX_CAN2_Init();
 800199e:	f7ff fd99 	bl	80014d4 <MX_CAN2_Init>
  MX_I2C1_Init();
 80019a2:	f7ff ff65 	bl	8001870 <MX_I2C1_Init>
  MX_SPI1_Init();
 80019a6:	f000 fa3d 	bl	8001e24 <MX_SPI1_Init>
  MX_TIM1_Init();
 80019aa:	f000 fbd1 	bl	8002150 <MX_TIM1_Init>
  MX_TIM3_Init();
 80019ae:	f000 fc93 	bl	80022d8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80019b2:	f000 fcdf 	bl	8002374 <MX_TIM5_Init>
  MX_TIM8_Init();
 80019b6:	f000 fd2b 	bl	8002410 <MX_TIM8_Init>
  MX_UART4_Init();
 80019ba:	f000 fe9d 	bl	80026f8 <MX_UART4_Init>
  MX_UART5_Init();
 80019be:	f000 fec5 	bl	800274c <MX_UART5_Init>
  MX_USART1_UART_Init();
 80019c2:	f000 feed 	bl	80027a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80019c6:	f000 ff15 	bl	80027f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80019ca:	f000 ff3d 	bl	8002848 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80019ce:	f000 ff65 	bl	800289c <MX_USART6_UART_Init>
  HAL_TIM_Base_Start(&TIM_DELAY_US);
 80019d2:	48c9      	ldr	r0, [pc, #804]	; (8001cf8 <main+0x374>)
 80019d4:	f004 fdb0 	bl	8006538 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the display
 80019d8:	f7fe fde0 	bl	800059c <SSD1306_Init>

  SSD1306_GotoXY (10,10); // goto 10, 10
 80019dc:	210a      	movs	r1, #10
 80019de:	200a      	movs	r0, #10
 80019e0:	f7fe ff46 	bl	8000870 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_16x26, 1); // print Hello
 80019e4:	2201      	movs	r2, #1
 80019e6:	49c5      	ldr	r1, [pc, #788]	; (8001cfc <main+0x378>)
 80019e8:	48c5      	ldr	r0, [pc, #788]	; (8001d00 <main+0x37c>)
 80019ea:	f7fe ffd7 	bl	800099c <SSD1306_Puts>
  SSD1306_GotoXY (10, 38);
 80019ee:	2126      	movs	r1, #38	; 0x26
 80019f0:	200a      	movs	r0, #10
 80019f2:	f7fe ff3d 	bl	8000870 <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD!!", &Font_7x10, 1);
 80019f6:	2201      	movs	r2, #1
 80019f8:	49c2      	ldr	r1, [pc, #776]	; (8001d04 <main+0x380>)
 80019fa:	48c3      	ldr	r0, [pc, #780]	; (8001d08 <main+0x384>)
 80019fc:	f7fe ffce 	bl	800099c <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8001a00:	f7fe fe90 	bl	8000724 <SSD1306_UpdateScreen>
  delay_ms(1000);
 8001a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a08:	f7ff fcb2 	bl	8001370 <delay_ms>
  SSD1306_Clear();
 8001a0c:	f7fe ffeb 	bl	80009e6 <SSD1306_Clear>

  SSD1306_DrawBitmap(0, 0,drone_logo,128, 64, 1);
 8001a10:	2301      	movs	r3, #1
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	2340      	movs	r3, #64	; 0x40
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	4abc      	ldr	r2, [pc, #752]	; (8001d0c <main+0x388>)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7fe fd54 	bl	80004cc <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen();
 8001a24:	f7fe fe7e 	bl	8000724 <SSD1306_UpdateScreen>
  delay_ms(2000);
 8001a28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a2c:	f7ff fca0 	bl	8001370 <delay_ms>

  /* Infinite loop */
  bno055_initization();
 8001a30:	f7ff fb30 	bl	8001094 <bno055_initization>
    	delay_ms(1000);
 8001a34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a38:	f7ff fc9a 	bl	8001370 <delay_ms>
    	SSD1306_Clear();
 8001a3c:	f7fe ffd3 	bl	80009e6 <SSD1306_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bno055_calibrations_status(&calib[0],&calib[1],&calib[2],&calib[3]);
 8001a40:	4bb3      	ldr	r3, [pc, #716]	; (8001d10 <main+0x38c>)
 8001a42:	4ab4      	ldr	r2, [pc, #720]	; (8001d14 <main+0x390>)
 8001a44:	49b4      	ldr	r1, [pc, #720]	; (8001d18 <main+0x394>)
 8001a46:	48b5      	ldr	r0, [pc, #724]	; (8001d1c <main+0x398>)
 8001a48:	f7ff faf0 	bl	800102c <bno055_calibrations_status>
	  bno055_get_elu_data(&roll, &pitch, &yaw);
 8001a4c:	4ab4      	ldr	r2, [pc, #720]	; (8001d20 <main+0x39c>)
 8001a4e:	49b5      	ldr	r1, [pc, #724]	; (8001d24 <main+0x3a0>)
 8001a50:	48b5      	ldr	r0, [pc, #724]	; (8001d28 <main+0x3a4>)
 8001a52:	f7ff fc05 	bl	8001260 <bno055_get_elu_data>
	  pitch += 2;
 8001a56:	4bb3      	ldr	r3, [pc, #716]	; (8001d24 <main+0x3a0>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a64:	4baf      	ldr	r3, [pc, #700]	; (8001d24 <main+0x3a0>)
 8001a66:	edc3 7a00 	vstr	s15, [r3]
	  SSD1306_GotoXY (0, 0);
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7fe feff 	bl	8000870 <SSD1306_GotoXY>
	  SSD1306_Puts ("ROLL: ", &Font_11x18, 1);
 8001a72:	2201      	movs	r2, #1
 8001a74:	49ad      	ldr	r1, [pc, #692]	; (8001d2c <main+0x3a8>)
 8001a76:	48ae      	ldr	r0, [pc, #696]	; (8001d30 <main+0x3ac>)
 8001a78:	f7fe ff90 	bl	800099c <SSD1306_Puts>
	  SSD1306_GotoXY (0, 20);
 8001a7c:	2114      	movs	r1, #20
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7fe fef6 	bl	8000870 <SSD1306_GotoXY>
	  SSD1306_Puts ("PITCH: ", &Font_11x18, 1);
 8001a84:	2201      	movs	r2, #1
 8001a86:	49a9      	ldr	r1, [pc, #676]	; (8001d2c <main+0x3a8>)
 8001a88:	48aa      	ldr	r0, [pc, #680]	; (8001d34 <main+0x3b0>)
 8001a8a:	f7fe ff87 	bl	800099c <SSD1306_Puts>
	  SSD1306_GotoXY (0, 40);
 8001a8e:	2128      	movs	r1, #40	; 0x28
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7fe feed 	bl	8000870 <SSD1306_GotoXY>
	  SSD1306_Puts ("YAW: ", &Font_11x18, 1);
 8001a96:	2201      	movs	r2, #1
 8001a98:	49a4      	ldr	r1, [pc, #656]	; (8001d2c <main+0x3a8>)
 8001a9a:	48a7      	ldr	r0, [pc, #668]	; (8001d38 <main+0x3b4>)
 8001a9c:	f7fe ff7e 	bl	800099c <SSD1306_Puts>
	  	  	  	//sprintf(snum,"%f",roll);
		itoa(roll, snum_roll, 10);
 8001aa0:	4ba1      	ldr	r3, [pc, #644]	; (8001d28 <main+0x3a4>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aaa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aae:	220a      	movs	r2, #10
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	ee17 0a90 	vmov	r0, s15
 8001ab6:	f006 fa7f 	bl	8007fb8 <itoa>
		itoa(pitch, snum_pitch, 10);
 8001aba:	4b9a      	ldr	r3, [pc, #616]	; (8001d24 <main+0x3a0>)
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ac8:	220a      	movs	r2, #10
 8001aca:	4619      	mov	r1, r3
 8001acc:	ee17 0a90 	vmov	r0, s15
 8001ad0:	f006 fa72 	bl	8007fb8 <itoa>
		itoa(yaw, snum_yaw, 10);
 8001ad4:	4b92      	ldr	r3, [pc, #584]	; (8001d20 <main+0x39c>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ade:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ae2:	220a      	movs	r2, #10
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	ee17 0a90 	vmov	r0, s15
 8001aea:	f006 fa65 	bl	8007fb8 <itoa>
		itoa(calib[0], snum_sys, 10);
 8001aee:	4b8b      	ldr	r3, [pc, #556]	; (8001d1c <main+0x398>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af8:	220a      	movs	r2, #10
 8001afa:	4619      	mov	r1, r3
 8001afc:	f006 fa5c 	bl	8007fb8 <itoa>
		itoa(calib[1], snum_gyro, 10);
 8001b00:	4b86      	ldr	r3, [pc, #536]	; (8001d1c <main+0x398>)
 8001b02:	785b      	ldrb	r3, [r3, #1]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	220a      	movs	r2, #10
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f006 fa53 	bl	8007fb8 <itoa>
		itoa(calib[2], snum_acc, 10);
 8001b12:	4b82      	ldr	r3, [pc, #520]	; (8001d1c <main+0x398>)
 8001b14:	789b      	ldrb	r3, [r3, #2]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	220a      	movs	r2, #10
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f006 fa4a 	bl	8007fb8 <itoa>
		itoa(calib[3], snum_mag, 10);
 8001b24:	4b7d      	ldr	r3, [pc, #500]	; (8001d1c <main+0x398>)
 8001b26:	78db      	ldrb	r3, [r3, #3]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	220a      	movs	r2, #10
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f006 fa42 	bl	8007fb8 <itoa>

	  //			SSD1306_GotoXY (0, 0);
	  //			SSD1306_Puts ("             ", &Font_11x18, 1);
	  			SSD1306_UpdateScreen();
 8001b34:	f7fe fdf6 	bl	8000724 <SSD1306_UpdateScreen>
	  			if(roll < 10) {
 8001b38:	4b7b      	ldr	r3, [pc, #492]	; (8001d28 <main+0x3a4>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4a:	d504      	bpl.n	8001b56 <main+0x1d2>
	  				SSD1306_GotoXY (69, 0);  // 1 DIGIT
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2045      	movs	r0, #69	; 0x45
 8001b50:	f7fe fe8e 	bl	8000870 <SSD1306_GotoXY>
 8001b54:	e021      	b.n	8001b9a <main+0x216>
	  			}
	  			else if (roll < 100 ) {
 8001b56:	4b74      	ldr	r3, [pc, #464]	; (8001d28 <main+0x3a4>)
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001d3c <main+0x3b8>
 8001b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	d504      	bpl.n	8001b74 <main+0x1f0>
	  				SSD1306_GotoXY (61, 0);  // 2 DIGITS
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	203d      	movs	r0, #61	; 0x3d
 8001b6e:	f7fe fe7f 	bl	8000870 <SSD1306_GotoXY>
 8001b72:	e012      	b.n	8001b9a <main+0x216>
	  			}
	  			else if (roll < 1000 ) {
 8001b74:	4b6c      	ldr	r3, [pc, #432]	; (8001d28 <main+0x3a4>)
 8001b76:	edd3 7a00 	vldr	s15, [r3]
 8001b7a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001d40 <main+0x3bc>
 8001b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b86:	d504      	bpl.n	8001b92 <main+0x20e>
	  				SSD1306_GotoXY (53, 0);  // 3 DIGITS
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2035      	movs	r0, #53	; 0x35
 8001b8c:	f7fe fe70 	bl	8000870 <SSD1306_GotoXY>
 8001b90:	e003      	b.n	8001b9a <main+0x216>
	  			}
	  			else {
	  				SSD1306_GotoXY (45, 0);  // 4 DIGIS
 8001b92:	2100      	movs	r1, #0
 8001b94:	202d      	movs	r0, #45	; 0x2d
 8001b96:	f7fe fe6b 	bl	8000870 <SSD1306_GotoXY>
	  			}

	  			SSD1306_Puts (snum_roll, &Font_11x18, 1);
 8001b9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4962      	ldr	r1, [pc, #392]	; (8001d2c <main+0x3a8>)
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fefa 	bl	800099c <SSD1306_Puts>
	  			SSD1306_UpdateScreen();
 8001ba8:	f7fe fdbc 	bl	8000724 <SSD1306_UpdateScreen>

	  			if(pitch < 10) {
 8001bac:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <main+0x3a0>)
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	d504      	bpl.n	8001bca <main+0x246>
	  				SSD1306_GotoXY (69, 20);  // 1 DIGIT
 8001bc0:	2114      	movs	r1, #20
 8001bc2:	2045      	movs	r0, #69	; 0x45
 8001bc4:	f7fe fe54 	bl	8000870 <SSD1306_GotoXY>
 8001bc8:	e021      	b.n	8001c0e <main+0x28a>
	  			}
	  			else if (pitch < 100 ) {
 8001bca:	4b56      	ldr	r3, [pc, #344]	; (8001d24 <main+0x3a0>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001d3c <main+0x3b8>
 8001bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d504      	bpl.n	8001be8 <main+0x264>
	  				SSD1306_GotoXY (61, 20);  // 2 DIGITS
 8001bde:	2114      	movs	r1, #20
 8001be0:	203d      	movs	r0, #61	; 0x3d
 8001be2:	f7fe fe45 	bl	8000870 <SSD1306_GotoXY>
 8001be6:	e012      	b.n	8001c0e <main+0x28a>
	  			}
	  			else if (pitch < 1000 ) {
 8001be8:	4b4e      	ldr	r3, [pc, #312]	; (8001d24 <main+0x3a0>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001d40 <main+0x3bc>
 8001bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	d504      	bpl.n	8001c06 <main+0x282>
	  				SSD1306_GotoXY (53, 20);  // 3 DIGITS
 8001bfc:	2114      	movs	r1, #20
 8001bfe:	2035      	movs	r0, #53	; 0x35
 8001c00:	f7fe fe36 	bl	8000870 <SSD1306_GotoXY>
 8001c04:	e003      	b.n	8001c0e <main+0x28a>
	  			}
	  			else {
	  				SSD1306_GotoXY (45, 20);  // 4 DIGIS
 8001c06:	2114      	movs	r1, #20
 8001c08:	202d      	movs	r0, #45	; 0x2d
 8001c0a:	f7fe fe31 	bl	8000870 <SSD1306_GotoXY>
	  			}

	  			SSD1306_Puts (snum_pitch, &Font_11x18, 1);
 8001c0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c12:	2201      	movs	r2, #1
 8001c14:	4945      	ldr	r1, [pc, #276]	; (8001d2c <main+0x3a8>)
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fec0 	bl	800099c <SSD1306_Puts>
	  			SSD1306_UpdateScreen();
 8001c1c:	f7fe fd82 	bl	8000724 <SSD1306_UpdateScreen>

	  			if(yaw < 10) {
 8001c20:	4b3f      	ldr	r3, [pc, #252]	; (8001d20 <main+0x39c>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c32:	d504      	bpl.n	8001c3e <main+0x2ba>
	  				SSD1306_GotoXY (69, 40);  // 1 DIGIT
 8001c34:	2128      	movs	r1, #40	; 0x28
 8001c36:	2045      	movs	r0, #69	; 0x45
 8001c38:	f7fe fe1a 	bl	8000870 <SSD1306_GotoXY>
 8001c3c:	e021      	b.n	8001c82 <main+0x2fe>
	  			}
	  			else if (yaw < 100 ) {
 8001c3e:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <main+0x39c>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001d3c <main+0x3b8>
 8001c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	d504      	bpl.n	8001c5c <main+0x2d8>
	  				SSD1306_GotoXY (61, 40);  // 2 DIGITS
 8001c52:	2128      	movs	r1, #40	; 0x28
 8001c54:	203d      	movs	r0, #61	; 0x3d
 8001c56:	f7fe fe0b 	bl	8000870 <SSD1306_GotoXY>
 8001c5a:	e012      	b.n	8001c82 <main+0x2fe>
	  			}
	  			else if (yaw < 1000 ) {
 8001c5c:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <main+0x39c>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001d40 <main+0x3bc>
 8001c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	d504      	bpl.n	8001c7a <main+0x2f6>
	  				SSD1306_GotoXY (53, 40);  // 3 DIGITS
 8001c70:	2128      	movs	r1, #40	; 0x28
 8001c72:	2035      	movs	r0, #53	; 0x35
 8001c74:	f7fe fdfc 	bl	8000870 <SSD1306_GotoXY>
 8001c78:	e003      	b.n	8001c82 <main+0x2fe>
	  			}
	  			else {
	  				SSD1306_GotoXY (45, 40);  // 4 DIGIS
 8001c7a:	2128      	movs	r1, #40	; 0x28
 8001c7c:	202d      	movs	r0, #45	; 0x2d
 8001c7e:	f7fe fdf7 	bl	8000870 <SSD1306_GotoXY>
	  			}

	  			SSD1306_Puts (snum_yaw, &Font_11x18, 1);
 8001c82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c86:	2201      	movs	r2, #1
 8001c88:	4928      	ldr	r1, [pc, #160]	; (8001d2c <main+0x3a8>)
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fe86 	bl	800099c <SSD1306_Puts>

	  			SSD1306_GotoXY (100, 0);
 8001c90:	2100      	movs	r1, #0
 8001c92:	2064      	movs	r0, #100	; 0x64
 8001c94:	f7fe fdec 	bl	8000870 <SSD1306_GotoXY>
	  			SSD1306_Puts (snum_sys, &Font_7x10, 1);
 8001c98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4919      	ldr	r1, [pc, #100]	; (8001d04 <main+0x380>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fe7b 	bl	800099c <SSD1306_Puts>

	  			SSD1306_GotoXY (100, 15);
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	2064      	movs	r0, #100	; 0x64
 8001caa:	f7fe fde1 	bl	8000870 <SSD1306_GotoXY>
	  			SSD1306_Puts (snum_gyro, &Font_7x10, 1);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4913      	ldr	r1, [pc, #76]	; (8001d04 <main+0x380>)
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fe70 	bl	800099c <SSD1306_Puts>

	  			SSD1306_GotoXY (100, 30);
 8001cbc:	211e      	movs	r1, #30
 8001cbe:	2064      	movs	r0, #100	; 0x64
 8001cc0:	f7fe fdd6 	bl	8000870 <SSD1306_GotoXY>
	  			SSD1306_Puts (snum_acc, &Font_7x10, 1);
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	2201      	movs	r2, #1
 8001cca:	490e      	ldr	r1, [pc, #56]	; (8001d04 <main+0x380>)
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fe65 	bl	800099c <SSD1306_Puts>

	  			SSD1306_GotoXY (100, 45);
 8001cd2:	212d      	movs	r1, #45	; 0x2d
 8001cd4:	2064      	movs	r0, #100	; 0x64
 8001cd6:	f7fe fdcb 	bl	8000870 <SSD1306_GotoXY>
	  			SSD1306_Puts (snum_mag, &Font_7x10, 1);
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4909      	ldr	r1, [pc, #36]	; (8001d04 <main+0x380>)
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fe5b 	bl	800099c <SSD1306_Puts>

	  			SSD1306_UpdateScreen();
 8001ce6:	f7fe fd1d 	bl	8000724 <SSD1306_UpdateScreen>
	  			SSD1306_Clear();
 8001cea:	f7fe fe7c 	bl	80009e6 <SSD1306_Clear>
	  			delay_us(10);
 8001cee:	200a      	movs	r0, #10
 8001cf0:	f7ff fb26 	bl	8001340 <delay_us>
	  bno055_calibrations_status(&calib[0],&calib[1],&calib[2],&calib[3]);
 8001cf4:	e6a4      	b.n	8001a40 <main+0xbc>
 8001cf6:	bf00      	nop
 8001cf8:	20000610 	.word	0x20000610
 8001cfc:	20000010 	.word	0x20000010
 8001d00:	08008068 	.word	0x08008068
 8001d04:	20000000 	.word	0x20000000
 8001d08:	08008070 	.word	0x08008070
 8001d0c:	0800a8a4 	.word	0x0800a8a4
 8001d10:	2000051b 	.word	0x2000051b
 8001d14:	2000051a 	.word	0x2000051a
 8001d18:	20000519 	.word	0x20000519
 8001d1c:	20000518 	.word	0x20000518
 8001d20:	20000524 	.word	0x20000524
 8001d24:	20000520 	.word	0x20000520
 8001d28:	2000051c 	.word	0x2000051c
 8001d2c:	20000008 	.word	0x20000008
 8001d30:	08008078 	.word	0x08008078
 8001d34:	08008080 	.word	0x08008080
 8001d38:	08008088 	.word	0x08008088
 8001d3c:	42c80000 	.word	0x42c80000
 8001d40:	447a0000 	.word	0x447a0000

08001d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b094      	sub	sp, #80	; 0x50
 8001d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	2230      	movs	r2, #48	; 0x30
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f006 f932 	bl	8007fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <SystemClock_Config+0xcc>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	4a27      	ldr	r2, [pc, #156]	; (8001e10 <SystemClock_Config+0xcc>)
 8001d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d76:	6413      	str	r3, [r2, #64]	; 0x40
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <SystemClock_Config+0xcc>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <SystemClock_Config+0xd0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <SystemClock_Config+0xd0>)
 8001d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <SystemClock_Config+0xd0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001da0:	2302      	movs	r3, #2
 8001da2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da4:	2301      	movs	r3, #1
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001da8:	2310      	movs	r3, #16
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dac:	2302      	movs	r3, #2
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001db0:	2300      	movs	r3, #0
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001db4:	2308      	movs	r3, #8
 8001db6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001db8:	23a8      	movs	r3, #168	; 0xa8
 8001dba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc4:	f107 0320 	add.w	r3, r7, #32
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fe85 	bl	8005ad8 <HAL_RCC_OscConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001dd4:	f000 f820 	bl	8001e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd8:	230f      	movs	r3, #15
 8001dda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001de4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001de8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	2105      	movs	r1, #5
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 f8e6 	bl	8005fc8 <HAL_RCC_ClockConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e02:	f000 f809 	bl	8001e18 <Error_Handler>
  }
}
 8001e06:	bf00      	nop
 8001e08:	3750      	adds	r7, #80	; 0x50
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000

08001e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1c:	b672      	cpsid	i
}
 8001e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <Error_Handler+0x8>
	...

08001e24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <MX_SPI1_Init+0x64>)
 8001e2a:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <MX_SPI1_Init+0x68>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MX_SPI1_Init+0x64>)
 8001e30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_SPI1_Init+0x64>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <MX_SPI1_Init+0x64>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_SPI1_Init+0x64>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <MX_SPI1_Init+0x64>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_SPI1_Init+0x64>)
 8001e50:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_SPI1_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <MX_SPI1_Init+0x64>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_SPI1_Init+0x64>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <MX_SPI1_Init+0x64>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_SPI1_Init+0x64>)
 8001e70:	220a      	movs	r2, #10
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <MX_SPI1_Init+0x64>)
 8001e76:	f004 fa87 	bl	8006388 <HAL_SPI_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e80:	f7ff ffca 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000528 	.word	0x20000528
 8001e8c:	40013000 	.word	0x40013000

08001e90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <HAL_SPI_MspInit+0x84>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d12b      	bne.n	8001f0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADNS_SPI_CSn_Pin|MCU_SPI_SCK_Pin|MCU_SPI_MISO_Pin|MCU_SPI_MOSI_Pin;
 8001eea:	23f0      	movs	r3, #240	; 0xf0
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001efa:	2305      	movs	r3, #5
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <HAL_SPI_MspInit+0x8c>)
 8001f06:	f002 f9a9 	bl	800425c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40013000 	.word	0x40013000
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <NMI_Handler+0x4>

08001f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <HardFault_Handler+0x4>

08001f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <MemManage_Handler+0x4>

08001f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fbc:	f001 f91e 	bl	80031fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DMA1_Stream0_IRQHandler+0x10>)
 8001fca:	f001 ff0b 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200008f8 	.word	0x200008f8

08001fd8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <DMA1_Stream1_IRQHandler+0x10>)
 8001fde:	f001 ff01 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000b38 	.word	0x20000b38

08001fec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <DMA1_Stream2_IRQHandler+0x10>)
 8001ff2:	f001 fef7 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000838 	.word	0x20000838

08002000 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <DMA1_Stream3_IRQHandler+0x10>)
 8002006:	f001 feed 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000b98 	.word	0x20000b98

08002014 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <DMA1_Stream4_IRQHandler+0x10>)
 800201a:	f001 fee3 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000898 	.word	0x20000898

08002028 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <DMA1_Stream5_IRQHandler+0x10>)
 800202e:	f001 fed9 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000a78 	.word	0x20000a78

0800203c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <DMA1_Stream6_IRQHandler+0x10>)
 8002042:	f001 fecf 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000ad8 	.word	0x20000ad8

08002050 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <USART1_IRQHandler+0x10>)
 8002056:	f005 f8c1 	bl	80071dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000728 	.word	0x20000728

08002064 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <USART2_IRQHandler+0x10>)
 800206a:	f005 f8b7 	bl	80071dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000076c 	.word	0x2000076c

08002078 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <USART3_IRQHandler+0x10>)
 800207e:	f005 f8ad 	bl	80071dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200007b0 	.word	0x200007b0

0800208c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <DMA1_Stream7_IRQHandler+0x10>)
 8002092:	f001 fea7 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000958 	.word	0x20000958

080020a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <UART4_IRQHandler+0x10>)
 80020a6:	f005 f899 	bl	80071dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200006a0 	.word	0x200006a0

080020b4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <UART5_IRQHandler+0x10>)
 80020ba:	f005 f88f 	bl	80071dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200006e4 	.word	0x200006e4

080020c8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <DMA2_Stream1_IRQHandler+0x10>)
 80020ce:	f001 fe89 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000bf8 	.word	0x20000bf8

080020dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <DMA2_Stream2_IRQHandler+0x10>)
 80020e2:	f001 fe7f 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200009b8 	.word	0x200009b8

080020f0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <DMA2_Stream6_IRQHandler+0x10>)
 80020f6:	f001 fe75 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000c58 	.word	0x20000c58

08002104 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <DMA2_Stream7_IRQHandler+0x10>)
 800210a:	f001 fe6b 	bl	8003de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000a18 	.word	0x20000a18

08002118 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <USART6_IRQHandler+0x10>)
 800211e:	f005 f85d 	bl	80071dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200007f4 	.word	0x200007f4

0800212c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <SystemInit+0x20>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	4a05      	ldr	r2, [pc, #20]	; (800214c <SystemInit+0x20>)
 8002138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b096      	sub	sp, #88	; 0x58
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002156:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002164:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800216e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]
 800217c:	611a      	str	r2, [r3, #16]
 800217e:	615a      	str	r2, [r3, #20]
 8002180:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	2220      	movs	r2, #32
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f005 ff17 	bl	8007fbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800218e:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <MX_TIM1_Init+0x180>)
 8002190:	4a50      	ldr	r2, [pc, #320]	; (80022d4 <MX_TIM1_Init+0x184>)
 8002192:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002194:	4b4e      	ldr	r3, [pc, #312]	; (80022d0 <MX_TIM1_Init+0x180>)
 8002196:	2200      	movs	r2, #0
 8002198:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219a:	4b4d      	ldr	r3, [pc, #308]	; (80022d0 <MX_TIM1_Init+0x180>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80021a0:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <MX_TIM1_Init+0x180>)
 80021a2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80021a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a8:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <MX_TIM1_Init+0x180>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021ae:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <MX_TIM1_Init+0x180>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b4:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <MX_TIM1_Init+0x180>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021ba:	4845      	ldr	r0, [pc, #276]	; (80022d0 <MX_TIM1_Init+0x180>)
 80021bc:	f004 f96d 	bl	800649a <HAL_TIM_Base_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80021c6:	f7ff fe27 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021d4:	4619      	mov	r1, r3
 80021d6:	483e      	ldr	r0, [pc, #248]	; (80022d0 <MX_TIM1_Init+0x180>)
 80021d8:	f004 fb32 	bl	8006840 <HAL_TIM_ConfigClockSource>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80021e2:	f7ff fe19 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021e6:	483a      	ldr	r0, [pc, #232]	; (80022d0 <MX_TIM1_Init+0x180>)
 80021e8:	f004 fa0e 	bl	8006608 <HAL_TIM_PWM_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80021f2:	f7ff fe11 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002202:	4619      	mov	r1, r3
 8002204:	4832      	ldr	r0, [pc, #200]	; (80022d0 <MX_TIM1_Init+0x180>)
 8002206:	f004 fecd 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002210:	f7ff fe02 	bl	8001e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002214:	2360      	movs	r3, #96	; 0x60
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002220:	2300      	movs	r3, #0
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002228:	2300      	movs	r3, #0
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002234:	2200      	movs	r2, #0
 8002236:	4619      	mov	r1, r3
 8002238:	4825      	ldr	r0, [pc, #148]	; (80022d0 <MX_TIM1_Init+0x180>)
 800223a:	f004 fa3f 	bl	80066bc <HAL_TIM_PWM_ConfigChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002244:	f7ff fde8 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224c:	2204      	movs	r2, #4
 800224e:	4619      	mov	r1, r3
 8002250:	481f      	ldr	r0, [pc, #124]	; (80022d0 <MX_TIM1_Init+0x180>)
 8002252:	f004 fa33 	bl	80066bc <HAL_TIM_PWM_ConfigChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800225c:	f7ff fddc 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002264:	2208      	movs	r2, #8
 8002266:	4619      	mov	r1, r3
 8002268:	4819      	ldr	r0, [pc, #100]	; (80022d0 <MX_TIM1_Init+0x180>)
 800226a:	f004 fa27 	bl	80066bc <HAL_TIM_PWM_ConfigChannel>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002274:	f7ff fdd0 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227c:	220c      	movs	r2, #12
 800227e:	4619      	mov	r1, r3
 8002280:	4813      	ldr	r0, [pc, #76]	; (80022d0 <MX_TIM1_Init+0x180>)
 8002282:	f004 fa1b 	bl	80066bc <HAL_TIM_PWM_ConfigChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800228c:	f7ff fdc4 	bl	8001e18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	4619      	mov	r1, r3
 80022b2:	4807      	ldr	r0, [pc, #28]	; (80022d0 <MX_TIM1_Init+0x180>)
 80022b4:	f004 fef2 	bl	800709c <HAL_TIMEx_ConfigBreakDeadTime>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80022be:	f7ff fdab 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022c2:	4803      	ldr	r0, [pc, #12]	; (80022d0 <MX_TIM1_Init+0x180>)
 80022c4:	f000 f9b4 	bl	8002630 <HAL_TIM_MspPostInit>

}
 80022c8:	bf00      	nop
 80022ca:	3758      	adds	r7, #88	; 0x58
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000580 	.word	0x20000580
 80022d4:	40010000 	.word	0x40010000

080022d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022de:	f107 0308 	add.w	r3, r7, #8
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ec:	463b      	mov	r3, r7
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <MX_TIM3_Init+0x94>)
 80022f6:	4a1e      	ldr	r2, [pc, #120]	; (8002370 <MX_TIM3_Init+0x98>)
 80022f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <MX_TIM3_Init+0x94>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <MX_TIM3_Init+0x94>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <MX_TIM3_Init+0x94>)
 8002308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800230c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <MX_TIM3_Init+0x94>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <MX_TIM3_Init+0x94>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800231a:	4814      	ldr	r0, [pc, #80]	; (800236c <MX_TIM3_Init+0x94>)
 800231c:	f004 f8bd 	bl	800649a <HAL_TIM_Base_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002326:	f7ff fd77 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	4619      	mov	r1, r3
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <MX_TIM3_Init+0x94>)
 8002338:	f004 fa82 	bl	8006840 <HAL_TIM_ConfigClockSource>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002342:	f7ff fd69 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800234e:	463b      	mov	r3, r7
 8002350:	4619      	mov	r1, r3
 8002352:	4806      	ldr	r0, [pc, #24]	; (800236c <MX_TIM3_Init+0x94>)
 8002354:	f004 fe26 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800235e:	f7ff fd5b 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200005c8 	.word	0x200005c8
 8002370:	40000400 	.word	0x40000400

08002374 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237a:	f107 0308 	add.w	r3, r7, #8
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002388:	463b      	mov	r3, r7
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002390:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <MX_TIM5_Init+0x94>)
 8002392:	4a1e      	ldr	r2, [pc, #120]	; (800240c <MX_TIM5_Init+0x98>)
 8002394:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8002396:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <MX_TIM5_Init+0x94>)
 8002398:	2253      	movs	r2, #83	; 0x53
 800239a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <MX_TIM5_Init+0x94>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffff;
 80023a2:	4b19      	ldr	r3, [pc, #100]	; (8002408 <MX_TIM5_Init+0x94>)
 80023a4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80023a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <MX_TIM5_Init+0x94>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b0:	4b15      	ldr	r3, [pc, #84]	; (8002408 <MX_TIM5_Init+0x94>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023b6:	4814      	ldr	r0, [pc, #80]	; (8002408 <MX_TIM5_Init+0x94>)
 80023b8:	f004 f86f 	bl	800649a <HAL_TIM_Base_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80023c2:	f7ff fd29 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023cc:	f107 0308 	add.w	r3, r7, #8
 80023d0:	4619      	mov	r1, r3
 80023d2:	480d      	ldr	r0, [pc, #52]	; (8002408 <MX_TIM5_Init+0x94>)
 80023d4:	f004 fa34 	bl	8006840 <HAL_TIM_ConfigClockSource>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80023de:	f7ff fd1b 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023ea:	463b      	mov	r3, r7
 80023ec:	4619      	mov	r1, r3
 80023ee:	4806      	ldr	r0, [pc, #24]	; (8002408 <MX_TIM5_Init+0x94>)
 80023f0:	f004 fdd8 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80023fa:	f7ff fd0d 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000610 	.word	0x20000610
 800240c:	40000c00 	.word	0x40000c00

08002410 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b096      	sub	sp, #88	; 0x58
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002416:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002424:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800242e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
 800243c:	611a      	str	r2, [r3, #16]
 800243e:	615a      	str	r2, [r3, #20]
 8002440:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	2220      	movs	r2, #32
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f005 fdb7 	bl	8007fbc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800244e:	4b44      	ldr	r3, [pc, #272]	; (8002560 <MX_TIM8_Init+0x150>)
 8002450:	4a44      	ldr	r2, [pc, #272]	; (8002564 <MX_TIM8_Init+0x154>)
 8002452:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002454:	4b42      	ldr	r3, [pc, #264]	; (8002560 <MX_TIM8_Init+0x150>)
 8002456:	2200      	movs	r2, #0
 8002458:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245a:	4b41      	ldr	r3, [pc, #260]	; (8002560 <MX_TIM8_Init+0x150>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002460:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <MX_TIM8_Init+0x150>)
 8002462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002466:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002468:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <MX_TIM8_Init+0x150>)
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800246e:	4b3c      	ldr	r3, [pc, #240]	; (8002560 <MX_TIM8_Init+0x150>)
 8002470:	2200      	movs	r2, #0
 8002472:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002474:	4b3a      	ldr	r3, [pc, #232]	; (8002560 <MX_TIM8_Init+0x150>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800247a:	4839      	ldr	r0, [pc, #228]	; (8002560 <MX_TIM8_Init+0x150>)
 800247c:	f004 f80d 	bl	800649a <HAL_TIM_Base_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002486:	f7ff fcc7 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002490:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002494:	4619      	mov	r1, r3
 8002496:	4832      	ldr	r0, [pc, #200]	; (8002560 <MX_TIM8_Init+0x150>)
 8002498:	f004 f9d2 	bl	8006840 <HAL_TIM_ConfigClockSource>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80024a2:	f7ff fcb9 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80024a6:	482e      	ldr	r0, [pc, #184]	; (8002560 <MX_TIM8_Init+0x150>)
 80024a8:	f004 f8ae 	bl	8006608 <HAL_TIM_PWM_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80024b2:	f7ff fcb1 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80024be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024c2:	4619      	mov	r1, r3
 80024c4:	4826      	ldr	r0, [pc, #152]	; (8002560 <MX_TIM8_Init+0x150>)
 80024c6:	f004 fd6d 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80024d0:	f7ff fca2 	bl	8001e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d4:	2360      	movs	r3, #96	; 0x60
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024dc:	2300      	movs	r3, #0
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024e0:	2300      	movs	r3, #0
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f4:	2208      	movs	r2, #8
 80024f6:	4619      	mov	r1, r3
 80024f8:	4819      	ldr	r0, [pc, #100]	; (8002560 <MX_TIM8_Init+0x150>)
 80024fa:	f004 f8df 	bl	80066bc <HAL_TIM_PWM_ConfigChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002504:	f7ff fc88 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250c:	220c      	movs	r2, #12
 800250e:	4619      	mov	r1, r3
 8002510:	4813      	ldr	r0, [pc, #76]	; (8002560 <MX_TIM8_Init+0x150>)
 8002512:	f004 f8d3 	bl	80066bc <HAL_TIM_PWM_ConfigChannel>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800251c:	f7ff fc7c 	bl	8001e18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002538:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4807      	ldr	r0, [pc, #28]	; (8002560 <MX_TIM8_Init+0x150>)
 8002544:	f004 fdaa 	bl	800709c <HAL_TIMEx_ConfigBreakDeadTime>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800254e:	f7ff fc63 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002552:	4803      	ldr	r0, [pc, #12]	; (8002560 <MX_TIM8_Init+0x150>)
 8002554:	f000 f86c 	bl	8002630 <HAL_TIM_MspPostInit>

}
 8002558:	bf00      	nop
 800255a:	3758      	adds	r7, #88	; 0x58
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000658 	.word	0x20000658
 8002564:	40010400 	.word	0x40010400

08002568 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a29      	ldr	r2, [pc, #164]	; (800261c <HAL_TIM_Base_MspInit+0xb4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	4b28      	ldr	r3, [pc, #160]	; (8002620 <HAL_TIM_Base_MspInit+0xb8>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a27      	ldr	r2, [pc, #156]	; (8002620 <HAL_TIM_Base_MspInit+0xb8>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_TIM_Base_MspInit+0xb8>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002596:	e03a      	b.n	800260e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a21      	ldr	r2, [pc, #132]	; (8002624 <HAL_TIM_Base_MspInit+0xbc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d10e      	bne.n	80025c0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <HAL_TIM_Base_MspInit+0xb8>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <HAL_TIM_Base_MspInit+0xb8>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_TIM_Base_MspInit+0xb8>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]
}
 80025be:	e026      	b.n	800260e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_TIM_Base_MspInit+0xc0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d10e      	bne.n	80025e8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_TIM_Base_MspInit+0xb8>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a13      	ldr	r2, [pc, #76]	; (8002620 <HAL_TIM_Base_MspInit+0xb8>)
 80025d4:	f043 0308 	orr.w	r3, r3, #8
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_TIM_Base_MspInit+0xb8>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
}
 80025e6:	e012      	b.n	800260e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0f      	ldr	r2, [pc, #60]	; (800262c <HAL_TIM_Base_MspInit+0xc4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10d      	bne.n	800260e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_TIM_Base_MspInit+0xb8>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_TIM_Base_MspInit+0xb8>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_TIM_Base_MspInit+0xb8>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
}
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40010000 	.word	0x40010000
 8002620:	40023800 	.word	0x40023800
 8002624:	40000400 	.word	0x40000400
 8002628:	40000c00 	.word	0x40000c00
 800262c:	40010400 	.word	0x40010400

08002630 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <HAL_TIM_MspPostInit+0xb4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d11f      	bne.n	8002692 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_TIM_MspPostInit+0xb8>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a23      	ldr	r2, [pc, #140]	; (80026e8 <HAL_TIM_MspPostInit+0xb8>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <HAL_TIM_MspPostInit+0xb8>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MTR1_PWM_MCU_Pin|MTR2_PWM_MCU_Pin|MTR3_PWM_MCU_Pin|MTR4_PWM_MCU_Pin;
 800266e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002680:	2301      	movs	r3, #1
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4619      	mov	r1, r3
 800268a:	4818      	ldr	r0, [pc, #96]	; (80026ec <HAL_TIM_MspPostInit+0xbc>)
 800268c:	f001 fde6 	bl	800425c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002690:	e023      	b.n	80026da <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a16      	ldr	r2, [pc, #88]	; (80026f0 <HAL_TIM_MspPostInit+0xc0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d11e      	bne.n	80026da <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_TIM_MspPostInit+0xb8>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <HAL_TIM_MspPostInit+0xb8>)
 80026a6:	f043 0304 	orr.w	r3, r3, #4
 80026aa:	6313      	str	r3, [r2, #48]	; 0x30
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_TIM_MspPostInit+0xb8>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_PWM_TIM8_CH3_Pin|LED_5050_PWM_IN_Pin;
 80026b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026ca:	2303      	movs	r3, #3
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	4807      	ldr	r0, [pc, #28]	; (80026f4 <HAL_TIM_MspPostInit+0xc4>)
 80026d6:	f001 fdc1 	bl	800425c <HAL_GPIO_Init>
}
 80026da:	bf00      	nop
 80026dc:	3728      	adds	r7, #40	; 0x28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40010000 	.word	0x40010000
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020000 	.word	0x40020000
 80026f0:	40010400 	.word	0x40010400
 80026f4:	40020800 	.word	0x40020800

080026f8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <MX_UART4_Init+0x4c>)
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <MX_UART4_Init+0x50>)
 8002700:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <MX_UART4_Init+0x4c>)
 8002704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002708:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <MX_UART4_Init+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <MX_UART4_Init+0x4c>)
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <MX_UART4_Init+0x4c>)
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <MX_UART4_Init+0x4c>)
 800271e:	220c      	movs	r2, #12
 8002720:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <MX_UART4_Init+0x4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <MX_UART4_Init+0x4c>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800272e:	4805      	ldr	r0, [pc, #20]	; (8002744 <MX_UART4_Init+0x4c>)
 8002730:	f004 fd06 	bl	8007140 <HAL_UART_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800273a:	f7ff fb6d 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200006a0 	.word	0x200006a0
 8002748:	40004c00 	.word	0x40004c00

0800274c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <MX_UART5_Init+0x4c>)
 8002752:	4a12      	ldr	r2, [pc, #72]	; (800279c <MX_UART5_Init+0x50>)
 8002754:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <MX_UART5_Init+0x4c>)
 8002758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800275c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <MX_UART5_Init+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <MX_UART5_Init+0x4c>)
 8002766:	2200      	movs	r2, #0
 8002768:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <MX_UART5_Init+0x4c>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <MX_UART5_Init+0x4c>)
 8002772:	220c      	movs	r2, #12
 8002774:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <MX_UART5_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <MX_UART5_Init+0x4c>)
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002782:	4805      	ldr	r0, [pc, #20]	; (8002798 <MX_UART5_Init+0x4c>)
 8002784:	f004 fcdc 	bl	8007140 <HAL_UART_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800278e:	f7ff fb43 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200006e4 	.word	0x200006e4
 800279c:	40005000 	.word	0x40005000

080027a0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_USART1_UART_Init+0x4c>)
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <MX_USART1_UART_Init+0x50>)
 80027a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <MX_USART1_UART_Init+0x4c>)
 80027ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <MX_USART1_UART_Init+0x4c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <MX_USART1_UART_Init+0x4c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <MX_USART1_UART_Init+0x4c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <MX_USART1_UART_Init+0x4c>)
 80027c6:	220c      	movs	r2, #12
 80027c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <MX_USART1_UART_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <MX_USART1_UART_Init+0x4c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027d6:	4805      	ldr	r0, [pc, #20]	; (80027ec <MX_USART1_UART_Init+0x4c>)
 80027d8:	f004 fcb2 	bl	8007140 <HAL_UART_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027e2:	f7ff fb19 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000728 	.word	0x20000728
 80027f0:	40011000 	.word	0x40011000

080027f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <MX_USART2_UART_Init+0x4c>)
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <MX_USART2_UART_Init+0x50>)
 80027fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <MX_USART2_UART_Init+0x4c>)
 8002800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002806:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <MX_USART2_UART_Init+0x4c>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <MX_USART2_UART_Init+0x4c>)
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002812:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <MX_USART2_UART_Init+0x4c>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <MX_USART2_UART_Init+0x4c>)
 800281a:	220c      	movs	r2, #12
 800281c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <MX_USART2_UART_Init+0x4c>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <MX_USART2_UART_Init+0x4c>)
 8002826:	2200      	movs	r2, #0
 8002828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800282a:	4805      	ldr	r0, [pc, #20]	; (8002840 <MX_USART2_UART_Init+0x4c>)
 800282c:	f004 fc88 	bl	8007140 <HAL_UART_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002836:	f7ff faef 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2000076c 	.word	0x2000076c
 8002844:	40004400 	.word	0x40004400

08002848 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <MX_USART3_UART_Init+0x4c>)
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <MX_USART3_UART_Init+0x50>)
 8002850:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <MX_USART3_UART_Init+0x4c>)
 8002854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002858:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <MX_USART3_UART_Init+0x4c>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <MX_USART3_UART_Init+0x4c>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <MX_USART3_UART_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <MX_USART3_UART_Init+0x4c>)
 800286e:	220c      	movs	r2, #12
 8002870:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <MX_USART3_UART_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <MX_USART3_UART_Init+0x4c>)
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800287e:	4805      	ldr	r0, [pc, #20]	; (8002894 <MX_USART3_UART_Init+0x4c>)
 8002880:	f004 fc5e 	bl	8007140 <HAL_UART_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800288a:	f7ff fac5 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200007b0 	.word	0x200007b0
 8002898:	40004800 	.word	0x40004800

0800289c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <MX_USART6_UART_Init+0x4c>)
 80028a2:	4a12      	ldr	r2, [pc, #72]	; (80028ec <MX_USART6_UART_Init+0x50>)
 80028a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <MX_USART6_UART_Init+0x4c>)
 80028a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <MX_USART6_UART_Init+0x4c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <MX_USART6_UART_Init+0x4c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <MX_USART6_UART_Init+0x4c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <MX_USART6_UART_Init+0x4c>)
 80028c2:	220c      	movs	r2, #12
 80028c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <MX_USART6_UART_Init+0x4c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <MX_USART6_UART_Init+0x4c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80028d2:	4805      	ldr	r0, [pc, #20]	; (80028e8 <MX_USART6_UART_Init+0x4c>)
 80028d4:	f004 fc34 	bl	8007140 <HAL_UART_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80028de:	f7ff fa9b 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200007f4 	.word	0x200007f4
 80028ec:	40011400 	.word	0x40011400

080028f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b094      	sub	sp, #80	; 0x50
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a4a      	ldr	r2, [pc, #296]	; (8002a38 <HAL_UART_MspInit+0x148>)
 800290e:	4293      	cmp	r3, r2
 8002910:	f040 80a0 	bne.w	8002a54 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	63bb      	str	r3, [r7, #56]	; 0x38
 8002918:	4b48      	ldr	r3, [pc, #288]	; (8002a3c <HAL_UART_MspInit+0x14c>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a47      	ldr	r2, [pc, #284]	; (8002a3c <HAL_UART_MspInit+0x14c>)
 800291e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
 8002924:	4b45      	ldr	r3, [pc, #276]	; (8002a3c <HAL_UART_MspInit+0x14c>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292c:	63bb      	str	r3, [r7, #56]	; 0x38
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002930:	2300      	movs	r3, #0
 8002932:	637b      	str	r3, [r7, #52]	; 0x34
 8002934:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_UART_MspInit+0x14c>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	4a40      	ldr	r2, [pc, #256]	; (8002a3c <HAL_UART_MspInit+0x14c>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6313      	str	r3, [r2, #48]	; 0x30
 8002940:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <HAL_UART_MspInit+0x14c>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
 800294a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MCU_ESP32_TX_Pin|MCU_ESP32_RX_Pin;
 800294c:	2303      	movs	r3, #3
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800295c:	2308      	movs	r3, #8
 800295e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002964:	4619      	mov	r1, r3
 8002966:	4836      	ldr	r0, [pc, #216]	; (8002a40 <HAL_UART_MspInit+0x150>)
 8002968:	f001 fc78 	bl	800425c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800296c:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <HAL_UART_MspInit+0x154>)
 800296e:	4a36      	ldr	r2, [pc, #216]	; (8002a48 <HAL_UART_MspInit+0x158>)
 8002970:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002972:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_UART_MspInit+0x154>)
 8002974:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002978:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800297a:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <HAL_UART_MspInit+0x154>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002980:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <HAL_UART_MspInit+0x154>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002986:	4b2f      	ldr	r3, [pc, #188]	; (8002a44 <HAL_UART_MspInit+0x154>)
 8002988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800298c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800298e:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_UART_MspInit+0x154>)
 8002990:	2200      	movs	r2, #0
 8002992:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_UART_MspInit+0x154>)
 8002996:	2200      	movs	r2, #0
 8002998:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800299a:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <HAL_UART_MspInit+0x154>)
 800299c:	2200      	movs	r2, #0
 800299e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_UART_MspInit+0x154>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029a6:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <HAL_UART_MspInit+0x154>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80029ac:	4825      	ldr	r0, [pc, #148]	; (8002a44 <HAL_UART_MspInit+0x154>)
 80029ae:	f001 f8d9 	bl	8003b64 <HAL_DMA_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80029b8:	f7ff fa2e 	bl	8001e18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a21      	ldr	r2, [pc, #132]	; (8002a44 <HAL_UART_MspInit+0x154>)
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
 80029c2:	4a20      	ldr	r2, [pc, #128]	; (8002a44 <HAL_UART_MspInit+0x154>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80029c8:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_UART_MspInit+0x15c>)
 80029ca:	4a21      	ldr	r2, [pc, #132]	; (8002a50 <HAL_UART_MspInit+0x160>)
 80029cc:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80029ce:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <HAL_UART_MspInit+0x15c>)
 80029d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_UART_MspInit+0x15c>)
 80029d8:	2240      	movs	r2, #64	; 0x40
 80029da:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_UART_MspInit+0x15c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_UART_MspInit+0x15c>)
 80029e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e8:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <HAL_UART_MspInit+0x15c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_UART_MspInit+0x15c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_UART_MspInit+0x15c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_UART_MspInit+0x15c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a02:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_UART_MspInit+0x15c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002a08:	4810      	ldr	r0, [pc, #64]	; (8002a4c <HAL_UART_MspInit+0x15c>)
 8002a0a:	f001 f8ab 	bl	8003b64 <HAL_DMA_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002a14:	f7ff fa00 	bl	8001e18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a0c      	ldr	r2, [pc, #48]	; (8002a4c <HAL_UART_MspInit+0x15c>)
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a1e:	4a0b      	ldr	r2, [pc, #44]	; (8002a4c <HAL_UART_MspInit+0x15c>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2100      	movs	r1, #0
 8002a28:	2034      	movs	r0, #52	; 0x34
 8002a2a:	f001 f864 	bl	8003af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a2e:	2034      	movs	r0, #52	; 0x34
 8002a30:	f001 f87d 	bl	8003b2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002a34:	e34a      	b.n	80030cc <HAL_UART_MspInit+0x7dc>
 8002a36:	bf00      	nop
 8002a38:	40004c00 	.word	0x40004c00
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	20000838 	.word	0x20000838
 8002a48:	40026040 	.word	0x40026040
 8002a4c:	20000898 	.word	0x20000898
 8002a50:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a59      	ldr	r2, [pc, #356]	; (8002bc0 <HAL_UART_MspInit+0x2d0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	f040 80c0 	bne.w	8002be0 <HAL_UART_MspInit+0x2f0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	633b      	str	r3, [r7, #48]	; 0x30
 8002a64:	4b57      	ldr	r3, [pc, #348]	; (8002bc4 <HAL_UART_MspInit+0x2d4>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	4a56      	ldr	r2, [pc, #344]	; (8002bc4 <HAL_UART_MspInit+0x2d4>)
 8002a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a70:	4b54      	ldr	r3, [pc, #336]	; (8002bc4 <HAL_UART_MspInit+0x2d4>)
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a80:	4b50      	ldr	r3, [pc, #320]	; (8002bc4 <HAL_UART_MspInit+0x2d4>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4a4f      	ldr	r2, [pc, #316]	; (8002bc4 <HAL_UART_MspInit+0x2d4>)
 8002a86:	f043 0304 	orr.w	r3, r3, #4
 8002a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8c:	4b4d      	ldr	r3, [pc, #308]	; (8002bc4 <HAL_UART_MspInit+0x2d4>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a9c:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <HAL_UART_MspInit+0x2d4>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	4a48      	ldr	r2, [pc, #288]	; (8002bc4 <HAL_UART_MspInit+0x2d4>)
 8002aa2:	f043 0308 	orr.w	r3, r3, #8
 8002aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa8:	4b46      	ldr	r3, [pc, #280]	; (8002bc4 <HAL_UART_MspInit+0x2d4>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = MCU_UART5_TX_Pin;
 8002ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8002aca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ace:	4619      	mov	r1, r3
 8002ad0:	483d      	ldr	r0, [pc, #244]	; (8002bc8 <HAL_UART_MspInit+0x2d8>)
 8002ad2:	f001 fbc3 	bl	800425c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MCU_UART5_RX_Pin;
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8002aea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002aee:	4619      	mov	r1, r3
 8002af0:	4836      	ldr	r0, [pc, #216]	; (8002bcc <HAL_UART_MspInit+0x2dc>)
 8002af2:	f001 fbb3 	bl	800425c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002af6:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_UART_MspInit+0x2e0>)
 8002af8:	4a36      	ldr	r2, [pc, #216]	; (8002bd4 <HAL_UART_MspInit+0x2e4>)
 8002afa:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002afc:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <HAL_UART_MspInit+0x2e0>)
 8002afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b02:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b04:	4b32      	ldr	r3, [pc, #200]	; (8002bd0 <HAL_UART_MspInit+0x2e0>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_UART_MspInit+0x2e0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b10:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <HAL_UART_MspInit+0x2e0>)
 8002b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b16:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b18:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_UART_MspInit+0x2e0>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b1e:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <HAL_UART_MspInit+0x2e0>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002b24:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <HAL_UART_MspInit+0x2e0>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b2a:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_UART_MspInit+0x2e0>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b30:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <HAL_UART_MspInit+0x2e0>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002b36:	4826      	ldr	r0, [pc, #152]	; (8002bd0 <HAL_UART_MspInit+0x2e0>)
 8002b38:	f001 f814 	bl	8003b64 <HAL_DMA_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8002b42:	f7ff f969 	bl	8001e18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a21      	ldr	r2, [pc, #132]	; (8002bd0 <HAL_UART_MspInit+0x2e0>)
 8002b4a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b4c:	4a20      	ldr	r2, [pc, #128]	; (8002bd0 <HAL_UART_MspInit+0x2e0>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8002b52:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <HAL_UART_MspInit+0x2e8>)
 8002b54:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <HAL_UART_MspInit+0x2ec>)
 8002b56:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002b58:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <HAL_UART_MspInit+0x2e8>)
 8002b5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b5e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_UART_MspInit+0x2e8>)
 8002b62:	2240      	movs	r2, #64	; 0x40
 8002b64:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <HAL_UART_MspInit+0x2e8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <HAL_UART_MspInit+0x2e8>)
 8002b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b72:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_UART_MspInit+0x2e8>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_UART_MspInit+0x2e8>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002b80:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <HAL_UART_MspInit+0x2e8>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_UART_MspInit+0x2e8>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_UART_MspInit+0x2e8>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002b92:	4811      	ldr	r0, [pc, #68]	; (8002bd8 <HAL_UART_MspInit+0x2e8>)
 8002b94:	f000 ffe6 	bl	8003b64 <HAL_DMA_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8002b9e:	f7ff f93b 	bl	8001e18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a0c      	ldr	r2, [pc, #48]	; (8002bd8 <HAL_UART_MspInit+0x2e8>)
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ba8:	4a0b      	ldr	r2, [pc, #44]	; (8002bd8 <HAL_UART_MspInit+0x2e8>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	2035      	movs	r0, #53	; 0x35
 8002bb4:	f000 ff9f 	bl	8003af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002bb8:	2035      	movs	r0, #53	; 0x35
 8002bba:	f000 ffb8 	bl	8003b2e <HAL_NVIC_EnableIRQ>
}
 8002bbe:	e285      	b.n	80030cc <HAL_UART_MspInit+0x7dc>
 8002bc0:	40005000 	.word	0x40005000
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40020800 	.word	0x40020800
 8002bcc:	40020c00 	.word	0x40020c00
 8002bd0:	200008f8 	.word	0x200008f8
 8002bd4:	40026010 	.word	0x40026010
 8002bd8:	20000958 	.word	0x20000958
 8002bdc:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a95      	ldr	r2, [pc, #596]	; (8002e3c <HAL_UART_MspInit+0x54c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	f040 8091 	bne.w	8002d0e <HAL_UART_MspInit+0x41e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf0:	4b93      	ldr	r3, [pc, #588]	; (8002e40 <HAL_UART_MspInit+0x550>)
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf4:	4a92      	ldr	r2, [pc, #584]	; (8002e40 <HAL_UART_MspInit+0x550>)
 8002bf6:	f043 0310 	orr.w	r3, r3, #16
 8002bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfc:	4b90      	ldr	r3, [pc, #576]	; (8002e40 <HAL_UART_MspInit+0x550>)
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c08:	2300      	movs	r3, #0
 8002c0a:	623b      	str	r3, [r7, #32]
 8002c0c:	4b8c      	ldr	r3, [pc, #560]	; (8002e40 <HAL_UART_MspInit+0x550>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	4a8b      	ldr	r2, [pc, #556]	; (8002e40 <HAL_UART_MspInit+0x550>)
 8002c12:	f043 0302 	orr.w	r3, r3, #2
 8002c16:	6313      	str	r3, [r2, #48]	; 0x30
 8002c18:	4b89      	ldr	r3, [pc, #548]	; (8002e40 <HAL_UART_MspInit+0x550>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	623b      	str	r3, [r7, #32]
 8002c22:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = MCU_USART1_TX_Pin|MCU_USART1_RX_Pin;
 8002c24:	23c0      	movs	r3, #192	; 0xc0
 8002c26:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c30:	2303      	movs	r3, #3
 8002c32:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c34:	2307      	movs	r3, #7
 8002c36:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4881      	ldr	r0, [pc, #516]	; (8002e44 <HAL_UART_MspInit+0x554>)
 8002c40:	f001 fb0c 	bl	800425c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002c44:	4b80      	ldr	r3, [pc, #512]	; (8002e48 <HAL_UART_MspInit+0x558>)
 8002c46:	4a81      	ldr	r2, [pc, #516]	; (8002e4c <HAL_UART_MspInit+0x55c>)
 8002c48:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002c4a:	4b7f      	ldr	r3, [pc, #508]	; (8002e48 <HAL_UART_MspInit+0x558>)
 8002c4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c50:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c52:	4b7d      	ldr	r3, [pc, #500]	; (8002e48 <HAL_UART_MspInit+0x558>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c58:	4b7b      	ldr	r3, [pc, #492]	; (8002e48 <HAL_UART_MspInit+0x558>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c5e:	4b7a      	ldr	r3, [pc, #488]	; (8002e48 <HAL_UART_MspInit+0x558>)
 8002c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c64:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c66:	4b78      	ldr	r3, [pc, #480]	; (8002e48 <HAL_UART_MspInit+0x558>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c6c:	4b76      	ldr	r3, [pc, #472]	; (8002e48 <HAL_UART_MspInit+0x558>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c72:	4b75      	ldr	r3, [pc, #468]	; (8002e48 <HAL_UART_MspInit+0x558>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c78:	4b73      	ldr	r3, [pc, #460]	; (8002e48 <HAL_UART_MspInit+0x558>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c7e:	4b72      	ldr	r3, [pc, #456]	; (8002e48 <HAL_UART_MspInit+0x558>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c84:	4870      	ldr	r0, [pc, #448]	; (8002e48 <HAL_UART_MspInit+0x558>)
 8002c86:	f000 ff6d 	bl	8003b64 <HAL_DMA_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 8002c90:	f7ff f8c2 	bl	8001e18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a6c      	ldr	r2, [pc, #432]	; (8002e48 <HAL_UART_MspInit+0x558>)
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
 8002c9a:	4a6b      	ldr	r2, [pc, #428]	; (8002e48 <HAL_UART_MspInit+0x558>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002ca0:	4b6b      	ldr	r3, [pc, #428]	; (8002e50 <HAL_UART_MspInit+0x560>)
 8002ca2:	4a6c      	ldr	r2, [pc, #432]	; (8002e54 <HAL_UART_MspInit+0x564>)
 8002ca4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002ca6:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <HAL_UART_MspInit+0x560>)
 8002ca8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cac:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cae:	4b68      	ldr	r3, [pc, #416]	; (8002e50 <HAL_UART_MspInit+0x560>)
 8002cb0:	2240      	movs	r2, #64	; 0x40
 8002cb2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb4:	4b66      	ldr	r3, [pc, #408]	; (8002e50 <HAL_UART_MspInit+0x560>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cba:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <HAL_UART_MspInit+0x560>)
 8002cbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cc0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cc2:	4b63      	ldr	r3, [pc, #396]	; (8002e50 <HAL_UART_MspInit+0x560>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cc8:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <HAL_UART_MspInit+0x560>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cce:	4b60      	ldr	r3, [pc, #384]	; (8002e50 <HAL_UART_MspInit+0x560>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cd4:	4b5e      	ldr	r3, [pc, #376]	; (8002e50 <HAL_UART_MspInit+0x560>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cda:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <HAL_UART_MspInit+0x560>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ce0:	485b      	ldr	r0, [pc, #364]	; (8002e50 <HAL_UART_MspInit+0x560>)
 8002ce2:	f000 ff3f 	bl	8003b64 <HAL_DMA_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_UART_MspInit+0x400>
      Error_Handler();
 8002cec:	f7ff f894 	bl	8001e18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a57      	ldr	r2, [pc, #348]	; (8002e50 <HAL_UART_MspInit+0x560>)
 8002cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8002cf6:	4a56      	ldr	r2, [pc, #344]	; (8002e50 <HAL_UART_MspInit+0x560>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2100      	movs	r1, #0
 8002d00:	2025      	movs	r0, #37	; 0x25
 8002d02:	f000 fef8 	bl	8003af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d06:	2025      	movs	r0, #37	; 0x25
 8002d08:	f000 ff11 	bl	8003b2e <HAL_NVIC_EnableIRQ>
}
 8002d0c:	e1de      	b.n	80030cc <HAL_UART_MspInit+0x7dc>
  else if(uartHandle->Instance==USART2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a51      	ldr	r2, [pc, #324]	; (8002e58 <HAL_UART_MspInit+0x568>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	f040 80ab 	bne.w	8002e70 <HAL_UART_MspInit+0x580>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	4b48      	ldr	r3, [pc, #288]	; (8002e40 <HAL_UART_MspInit+0x550>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	4a47      	ldr	r2, [pc, #284]	; (8002e40 <HAL_UART_MspInit+0x550>)
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2a:	4b45      	ldr	r3, [pc, #276]	; (8002e40 <HAL_UART_MspInit+0x550>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	61fb      	str	r3, [r7, #28]
 8002d34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <HAL_UART_MspInit+0x550>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a40      	ldr	r2, [pc, #256]	; (8002e40 <HAL_UART_MspInit+0x550>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <HAL_UART_MspInit+0x550>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	61bb      	str	r3, [r7, #24]
 8002d50:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCU_USART2_TX_Pin|MCU_USART2_RX_Pin;
 8002d52:	230c      	movs	r3, #12
 8002d54:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d62:	2307      	movs	r3, #7
 8002d64:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	483b      	ldr	r0, [pc, #236]	; (8002e5c <HAL_UART_MspInit+0x56c>)
 8002d6e:	f001 fa75 	bl	800425c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d72:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_UART_MspInit+0x570>)
 8002d74:	4a3b      	ldr	r2, [pc, #236]	; (8002e64 <HAL_UART_MspInit+0x574>)
 8002d76:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d78:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <HAL_UART_MspInit+0x570>)
 8002d7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d7e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d80:	4b37      	ldr	r3, [pc, #220]	; (8002e60 <HAL_UART_MspInit+0x570>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d86:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <HAL_UART_MspInit+0x570>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d8c:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <HAL_UART_MspInit+0x570>)
 8002d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d92:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d94:	4b32      	ldr	r3, [pc, #200]	; (8002e60 <HAL_UART_MspInit+0x570>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d9a:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_UART_MspInit+0x570>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002da0:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <HAL_UART_MspInit+0x570>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002da6:	4b2e      	ldr	r3, [pc, #184]	; (8002e60 <HAL_UART_MspInit+0x570>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dac:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <HAL_UART_MspInit+0x570>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002db2:	482b      	ldr	r0, [pc, #172]	; (8002e60 <HAL_UART_MspInit+0x570>)
 8002db4:	f000 fed6 	bl	8003b64 <HAL_DMA_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_UART_MspInit+0x4d2>
      Error_Handler();
 8002dbe:	f7ff f82b 	bl	8001e18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a26      	ldr	r2, [pc, #152]	; (8002e60 <HAL_UART_MspInit+0x570>)
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
 8002dc8:	4a25      	ldr	r2, [pc, #148]	; (8002e60 <HAL_UART_MspInit+0x570>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002dce:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <HAL_UART_MspInit+0x578>)
 8002dd0:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <HAL_UART_MspInit+0x57c>)
 8002dd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002dd4:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_UART_MspInit+0x578>)
 8002dd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dda:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ddc:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <HAL_UART_MspInit+0x578>)
 8002dde:	2240      	movs	r2, #64	; 0x40
 8002de0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de2:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <HAL_UART_MspInit+0x578>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002de8:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <HAL_UART_MspInit+0x578>)
 8002dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_UART_MspInit+0x578>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002df6:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <HAL_UART_MspInit+0x578>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <HAL_UART_MspInit+0x578>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_UART_MspInit+0x578>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <HAL_UART_MspInit+0x578>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e0e:	4816      	ldr	r0, [pc, #88]	; (8002e68 <HAL_UART_MspInit+0x578>)
 8002e10:	f000 fea8 	bl	8003b64 <HAL_DMA_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_UART_MspInit+0x52e>
      Error_Handler();
 8002e1a:	f7fe fffd 	bl	8001e18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <HAL_UART_MspInit+0x578>)
 8002e22:	635a      	str	r2, [r3, #52]	; 0x34
 8002e24:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <HAL_UART_MspInit+0x578>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	2026      	movs	r0, #38	; 0x26
 8002e30:	f000 fe61 	bl	8003af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e34:	2026      	movs	r0, #38	; 0x26
 8002e36:	f000 fe7a 	bl	8003b2e <HAL_NVIC_EnableIRQ>
}
 8002e3a:	e147      	b.n	80030cc <HAL_UART_MspInit+0x7dc>
 8002e3c:	40011000 	.word	0x40011000
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40020400 	.word	0x40020400
 8002e48:	200009b8 	.word	0x200009b8
 8002e4c:	40026440 	.word	0x40026440
 8002e50:	20000a18 	.word	0x20000a18
 8002e54:	400264b8 	.word	0x400264b8
 8002e58:	40004400 	.word	0x40004400
 8002e5c:	40020000 	.word	0x40020000
 8002e60:	20000a78 	.word	0x20000a78
 8002e64:	40026088 	.word	0x40026088
 8002e68:	20000ad8 	.word	0x20000ad8
 8002e6c:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a97      	ldr	r2, [pc, #604]	; (80030d4 <HAL_UART_MspInit+0x7e4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	f040 8092 	bne.w	8002fa0 <HAL_UART_MspInit+0x6b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	4b95      	ldr	r3, [pc, #596]	; (80030d8 <HAL_UART_MspInit+0x7e8>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	4a94      	ldr	r2, [pc, #592]	; (80030d8 <HAL_UART_MspInit+0x7e8>)
 8002e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8c:	4b92      	ldr	r3, [pc, #584]	; (80030d8 <HAL_UART_MspInit+0x7e8>)
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	4b8e      	ldr	r3, [pc, #568]	; (80030d8 <HAL_UART_MspInit+0x7e8>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	4a8d      	ldr	r2, [pc, #564]	; (80030d8 <HAL_UART_MspInit+0x7e8>)
 8002ea2:	f043 0304 	orr.w	r3, r3, #4
 8002ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea8:	4b8b      	ldr	r3, [pc, #556]	; (80030d8 <HAL_UART_MspInit+0x7e8>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MCU_HLBr_TX_Pin|MCU_HLBr_RX_Pin;
 8002eb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ec6:	2307      	movs	r3, #7
 8002ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4882      	ldr	r0, [pc, #520]	; (80030dc <HAL_UART_MspInit+0x7ec>)
 8002ed2:	f001 f9c3 	bl	800425c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002ed6:	4b82      	ldr	r3, [pc, #520]	; (80030e0 <HAL_UART_MspInit+0x7f0>)
 8002ed8:	4a82      	ldr	r2, [pc, #520]	; (80030e4 <HAL_UART_MspInit+0x7f4>)
 8002eda:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002edc:	4b80      	ldr	r3, [pc, #512]	; (80030e0 <HAL_UART_MspInit+0x7f0>)
 8002ede:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ee2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ee4:	4b7e      	ldr	r3, [pc, #504]	; (80030e0 <HAL_UART_MspInit+0x7f0>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eea:	4b7d      	ldr	r3, [pc, #500]	; (80030e0 <HAL_UART_MspInit+0x7f0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef0:	4b7b      	ldr	r3, [pc, #492]	; (80030e0 <HAL_UART_MspInit+0x7f0>)
 8002ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ef6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ef8:	4b79      	ldr	r3, [pc, #484]	; (80030e0 <HAL_UART_MspInit+0x7f0>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002efe:	4b78      	ldr	r3, [pc, #480]	; (80030e0 <HAL_UART_MspInit+0x7f0>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002f04:	4b76      	ldr	r3, [pc, #472]	; (80030e0 <HAL_UART_MspInit+0x7f0>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f0a:	4b75      	ldr	r3, [pc, #468]	; (80030e0 <HAL_UART_MspInit+0x7f0>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f10:	4b73      	ldr	r3, [pc, #460]	; (80030e0 <HAL_UART_MspInit+0x7f0>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f16:	4872      	ldr	r0, [pc, #456]	; (80030e0 <HAL_UART_MspInit+0x7f0>)
 8002f18:	f000 fe24 	bl	8003b64 <HAL_DMA_Init>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_UART_MspInit+0x636>
      Error_Handler();
 8002f22:	f7fe ff79 	bl	8001e18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a6d      	ldr	r2, [pc, #436]	; (80030e0 <HAL_UART_MspInit+0x7f0>)
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f2c:	4a6c      	ldr	r2, [pc, #432]	; (80030e0 <HAL_UART_MspInit+0x7f0>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002f32:	4b6d      	ldr	r3, [pc, #436]	; (80030e8 <HAL_UART_MspInit+0x7f8>)
 8002f34:	4a6d      	ldr	r2, [pc, #436]	; (80030ec <HAL_UART_MspInit+0x7fc>)
 8002f36:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002f38:	4b6b      	ldr	r3, [pc, #428]	; (80030e8 <HAL_UART_MspInit+0x7f8>)
 8002f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f3e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f40:	4b69      	ldr	r3, [pc, #420]	; (80030e8 <HAL_UART_MspInit+0x7f8>)
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f46:	4b68      	ldr	r3, [pc, #416]	; (80030e8 <HAL_UART_MspInit+0x7f8>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f4c:	4b66      	ldr	r3, [pc, #408]	; (80030e8 <HAL_UART_MspInit+0x7f8>)
 8002f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f52:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f54:	4b64      	ldr	r3, [pc, #400]	; (80030e8 <HAL_UART_MspInit+0x7f8>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f5a:	4b63      	ldr	r3, [pc, #396]	; (80030e8 <HAL_UART_MspInit+0x7f8>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002f60:	4b61      	ldr	r3, [pc, #388]	; (80030e8 <HAL_UART_MspInit+0x7f8>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f66:	4b60      	ldr	r3, [pc, #384]	; (80030e8 <HAL_UART_MspInit+0x7f8>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f6c:	4b5e      	ldr	r3, [pc, #376]	; (80030e8 <HAL_UART_MspInit+0x7f8>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002f72:	485d      	ldr	r0, [pc, #372]	; (80030e8 <HAL_UART_MspInit+0x7f8>)
 8002f74:	f000 fdf6 	bl	8003b64 <HAL_DMA_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_UART_MspInit+0x692>
      Error_Handler();
 8002f7e:	f7fe ff4b 	bl	8001e18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a58      	ldr	r2, [pc, #352]	; (80030e8 <HAL_UART_MspInit+0x7f8>)
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34
 8002f88:	4a57      	ldr	r2, [pc, #348]	; (80030e8 <HAL_UART_MspInit+0x7f8>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	2027      	movs	r0, #39	; 0x27
 8002f94:	f000 fdaf 	bl	8003af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f98:	2027      	movs	r0, #39	; 0x27
 8002f9a:	f000 fdc8 	bl	8003b2e <HAL_NVIC_EnableIRQ>
}
 8002f9e:	e095      	b.n	80030cc <HAL_UART_MspInit+0x7dc>
  else if(uartHandle->Instance==USART6)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a52      	ldr	r2, [pc, #328]	; (80030f0 <HAL_UART_MspInit+0x800>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	f040 8090 	bne.w	80030cc <HAL_UART_MspInit+0x7dc>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	4b49      	ldr	r3, [pc, #292]	; (80030d8 <HAL_UART_MspInit+0x7e8>)
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	4a48      	ldr	r2, [pc, #288]	; (80030d8 <HAL_UART_MspInit+0x7e8>)
 8002fb6:	f043 0320 	orr.w	r3, r3, #32
 8002fba:	6453      	str	r3, [r2, #68]	; 0x44
 8002fbc:	4b46      	ldr	r3, [pc, #280]	; (80030d8 <HAL_UART_MspInit+0x7e8>)
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	4b42      	ldr	r3, [pc, #264]	; (80030d8 <HAL_UART_MspInit+0x7e8>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	4a41      	ldr	r2, [pc, #260]	; (80030d8 <HAL_UART_MspInit+0x7e8>)
 8002fd2:	f043 0304 	orr.w	r3, r3, #4
 8002fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd8:	4b3f      	ldr	r3, [pc, #252]	; (80030d8 <HAL_UART_MspInit+0x7e8>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MCU_USART6_TX_Pin|MCU_USART6_RX_Pin;
 8002fe4:	23c0      	movs	r3, #192	; 0xc0
 8002fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4837      	ldr	r0, [pc, #220]	; (80030dc <HAL_UART_MspInit+0x7ec>)
 8003000:	f001 f92c 	bl	800425c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003004:	4b3b      	ldr	r3, [pc, #236]	; (80030f4 <HAL_UART_MspInit+0x804>)
 8003006:	4a3c      	ldr	r2, [pc, #240]	; (80030f8 <HAL_UART_MspInit+0x808>)
 8003008:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800300a:	4b3a      	ldr	r3, [pc, #232]	; (80030f4 <HAL_UART_MspInit+0x804>)
 800300c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003010:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003012:	4b38      	ldr	r3, [pc, #224]	; (80030f4 <HAL_UART_MspInit+0x804>)
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003018:	4b36      	ldr	r3, [pc, #216]	; (80030f4 <HAL_UART_MspInit+0x804>)
 800301a:	2200      	movs	r2, #0
 800301c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800301e:	4b35      	ldr	r3, [pc, #212]	; (80030f4 <HAL_UART_MspInit+0x804>)
 8003020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003024:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003026:	4b33      	ldr	r3, [pc, #204]	; (80030f4 <HAL_UART_MspInit+0x804>)
 8003028:	2200      	movs	r2, #0
 800302a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800302c:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <HAL_UART_MspInit+0x804>)
 800302e:	2200      	movs	r2, #0
 8003030:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003032:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <HAL_UART_MspInit+0x804>)
 8003034:	2200      	movs	r2, #0
 8003036:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003038:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <HAL_UART_MspInit+0x804>)
 800303a:	2200      	movs	r2, #0
 800303c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800303e:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <HAL_UART_MspInit+0x804>)
 8003040:	2200      	movs	r2, #0
 8003042:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003044:	482b      	ldr	r0, [pc, #172]	; (80030f4 <HAL_UART_MspInit+0x804>)
 8003046:	f000 fd8d 	bl	8003b64 <HAL_DMA_Init>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_UART_MspInit+0x764>
      Error_Handler();
 8003050:	f7fe fee2 	bl	8001e18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a27      	ldr	r2, [pc, #156]	; (80030f4 <HAL_UART_MspInit+0x804>)
 8003058:	639a      	str	r2, [r3, #56]	; 0x38
 800305a:	4a26      	ldr	r2, [pc, #152]	; (80030f4 <HAL_UART_MspInit+0x804>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003060:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_UART_MspInit+0x80c>)
 8003062:	4a27      	ldr	r2, [pc, #156]	; (8003100 <HAL_UART_MspInit+0x810>)
 8003064:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003066:	4b25      	ldr	r3, [pc, #148]	; (80030fc <HAL_UART_MspInit+0x80c>)
 8003068:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800306c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800306e:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_UART_MspInit+0x80c>)
 8003070:	2240      	movs	r2, #64	; 0x40
 8003072:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003074:	4b21      	ldr	r3, [pc, #132]	; (80030fc <HAL_UART_MspInit+0x80c>)
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_UART_MspInit+0x80c>)
 800307c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003080:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_UART_MspInit+0x80c>)
 8003084:	2200      	movs	r2, #0
 8003086:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003088:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <HAL_UART_MspInit+0x80c>)
 800308a:	2200      	movs	r2, #0
 800308c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_UART_MspInit+0x80c>)
 8003090:	2200      	movs	r2, #0
 8003092:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_UART_MspInit+0x80c>)
 8003096:	2200      	movs	r2, #0
 8003098:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800309a:	4b18      	ldr	r3, [pc, #96]	; (80030fc <HAL_UART_MspInit+0x80c>)
 800309c:	2200      	movs	r2, #0
 800309e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80030a0:	4816      	ldr	r0, [pc, #88]	; (80030fc <HAL_UART_MspInit+0x80c>)
 80030a2:	f000 fd5f 	bl	8003b64 <HAL_DMA_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_UART_MspInit+0x7c0>
      Error_Handler();
 80030ac:	f7fe feb4 	bl	8001e18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a12      	ldr	r2, [pc, #72]	; (80030fc <HAL_UART_MspInit+0x80c>)
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
 80030b6:	4a11      	ldr	r2, [pc, #68]	; (80030fc <HAL_UART_MspInit+0x80c>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80030bc:	2200      	movs	r2, #0
 80030be:	2100      	movs	r1, #0
 80030c0:	2047      	movs	r0, #71	; 0x47
 80030c2:	f000 fd18 	bl	8003af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80030c6:	2047      	movs	r0, #71	; 0x47
 80030c8:	f000 fd31 	bl	8003b2e <HAL_NVIC_EnableIRQ>
}
 80030cc:	bf00      	nop
 80030ce:	3750      	adds	r7, #80	; 0x50
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40004800 	.word	0x40004800
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40020800 	.word	0x40020800
 80030e0:	20000b38 	.word	0x20000b38
 80030e4:	40026028 	.word	0x40026028
 80030e8:	20000b98 	.word	0x20000b98
 80030ec:	40026058 	.word	0x40026058
 80030f0:	40011400 	.word	0x40011400
 80030f4:	20000bf8 	.word	0x20000bf8
 80030f8:	40026428 	.word	0x40026428
 80030fc:	20000c58 	.word	0x20000c58
 8003100:	400264a0 	.word	0x400264a0

08003104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800313c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003108:	480d      	ldr	r0, [pc, #52]	; (8003140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800310a:	490e      	ldr	r1, [pc, #56]	; (8003144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800310c:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800310e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003110:	e002      	b.n	8003118 <LoopCopyDataInit>

08003112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003116:	3304      	adds	r3, #4

08003118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800311a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800311c:	d3f9      	bcc.n	8003112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800311e:	4a0b      	ldr	r2, [pc, #44]	; (800314c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003120:	4c0b      	ldr	r4, [pc, #44]	; (8003150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003124:	e001      	b.n	800312a <LoopFillZerobss>

08003126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003128:	3204      	adds	r2, #4

0800312a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800312a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800312c:	d3fb      	bcc.n	8003126 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800312e:	f7fe fffd 	bl	800212c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003132:	f004 ff05 	bl	8007f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003136:	f7fe fc25 	bl	8001984 <main>
  bx  lr    
 800313a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800313c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003144:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8003148:	0800acfc 	.word	0x0800acfc
  ldr r2, =_sbss
 800314c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8003150:	20000cbc 	.word	0x20000cbc

08003154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003154:	e7fe      	b.n	8003154 <ADC_IRQHandler>
	...

08003158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_Init+0x40>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <HAL_Init+0x40>)
 8003162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_Init+0x40>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <HAL_Init+0x40>)
 800316e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_Init+0x40>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_Init+0x40>)
 800317a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003180:	2003      	movs	r0, #3
 8003182:	f000 fcad 	bl	8003ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003186:	2000      	movs	r0, #0
 8003188:	f000 f808 	bl	800319c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800318c:	f7fe fec8 	bl	8001f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023c00 	.word	0x40023c00

0800319c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_InitTick+0x54>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_InitTick+0x58>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fcc5 	bl	8003b4a <HAL_SYSTICK_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00e      	b.n	80031e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d80a      	bhi.n	80031e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d0:	2200      	movs	r2, #0
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	f000 fc8d 	bl	8003af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031dc:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <HAL_InitTick+0x5c>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000018 	.word	0x20000018
 80031f4:	20000020 	.word	0x20000020
 80031f8:	2000001c 	.word	0x2000001c

080031fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_IncTick+0x20>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_IncTick+0x24>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4413      	add	r3, r2
 800320c:	4a04      	ldr	r2, [pc, #16]	; (8003220 <HAL_IncTick+0x24>)
 800320e:	6013      	str	r3, [r2, #0]
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000020 	.word	0x20000020
 8003220:	20000cb8 	.word	0x20000cb8

08003224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return uwTick;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_GetTick+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000cb8 	.word	0x20000cb8

0800323c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003244:	f7ff ffee 	bl	8003224 <HAL_GetTick>
 8003248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d005      	beq.n	8003262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_Delay+0x44>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003262:	bf00      	nop
 8003264:	f7ff ffde 	bl	8003224 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d8f7      	bhi.n	8003264 <HAL_Delay+0x28>
  {
  }
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000020 	.word	0x20000020

08003284 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e033      	b.n	8003302 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fe f8d2 	bl	800144c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d118      	bne.n	80032f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032ca:	f023 0302 	bic.w	r3, r3, #2
 80032ce:	f043 0202 	orr.w	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f93a 	bl	8003550 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f023 0303 	bic.w	r3, r3, #3
 80032ea:	f043 0201 	orr.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40
 80032f2:	e001      	b.n	80032f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003300:	7bfb      	ldrb	r3, [r7, #15]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x1c>
 8003324:	2302      	movs	r3, #2
 8003326:	e105      	b.n	8003534 <HAL_ADC_ConfigChannel+0x228>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b09      	cmp	r3, #9
 8003336:	d925      	bls.n	8003384 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68d9      	ldr	r1, [r3, #12]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	3b1e      	subs	r3, #30
 800334e:	2207      	movs	r2, #7
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43da      	mvns	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	400a      	ands	r2, r1
 800335c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68d9      	ldr	r1, [r3, #12]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	4618      	mov	r0, r3
 8003370:	4603      	mov	r3, r0
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4403      	add	r3, r0
 8003376:	3b1e      	subs	r3, #30
 8003378:	409a      	lsls	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	e022      	b.n	80033ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6919      	ldr	r1, [r3, #16]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	2207      	movs	r2, #7
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43da      	mvns	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	400a      	ands	r2, r1
 80033a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6919      	ldr	r1, [r3, #16]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4618      	mov	r0, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4403      	add	r3, r0
 80033c0:	409a      	lsls	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d824      	bhi.n	800341c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	3b05      	subs	r3, #5
 80033e4:	221f      	movs	r2, #31
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	400a      	ands	r2, r1
 80033f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	4618      	mov	r0, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	3b05      	subs	r3, #5
 800340e:	fa00 f203 	lsl.w	r2, r0, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	635a      	str	r2, [r3, #52]	; 0x34
 800341a:	e04c      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b0c      	cmp	r3, #12
 8003422:	d824      	bhi.n	800346e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	3b23      	subs	r3, #35	; 0x23
 8003436:	221f      	movs	r2, #31
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43da      	mvns	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	400a      	ands	r2, r1
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	4618      	mov	r0, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	3b23      	subs	r3, #35	; 0x23
 8003460:	fa00 f203 	lsl.w	r2, r0, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
 800346c:	e023      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	3b41      	subs	r3, #65	; 0x41
 8003480:	221f      	movs	r2, #31
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43da      	mvns	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	400a      	ands	r2, r1
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	4618      	mov	r0, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	3b41      	subs	r3, #65	; 0x41
 80034aa:	fa00 f203 	lsl.w	r2, r0, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <HAL_ADC_ConfigChannel+0x234>)
 80034b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a21      	ldr	r2, [pc, #132]	; (8003544 <HAL_ADC_ConfigChannel+0x238>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d109      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x1cc>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b12      	cmp	r3, #18
 80034ca:	d105      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a19      	ldr	r2, [pc, #100]	; (8003544 <HAL_ADC_ConfigChannel+0x238>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d123      	bne.n	800352a <HAL_ADC_ConfigChannel+0x21e>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d003      	beq.n	80034f2 <HAL_ADC_ConfigChannel+0x1e6>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b11      	cmp	r3, #17
 80034f0:	d11b      	bne.n	800352a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b10      	cmp	r3, #16
 8003504:	d111      	bne.n	800352a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_ADC_ConfigChannel+0x23c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a10      	ldr	r2, [pc, #64]	; (800354c <HAL_ADC_ConfigChannel+0x240>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	0c9a      	lsrs	r2, r3, #18
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800351c:	e002      	b.n	8003524 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3b01      	subs	r3, #1
 8003522:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f9      	bne.n	800351e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40012300 	.word	0x40012300
 8003544:	40012000 	.word	0x40012000
 8003548:	20000018 	.word	0x20000018
 800354c:	431bde83 	.word	0x431bde83

08003550 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003558:	4b79      	ldr	r3, [pc, #484]	; (8003740 <ADC_Init+0x1f0>)
 800355a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	021a      	lsls	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6899      	ldr	r1, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	4a58      	ldr	r2, [pc, #352]	; (8003744 <ADC_Init+0x1f4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	e00f      	b.n	800364e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800363c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800364c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0202 	bic.w	r2, r2, #2
 800365c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7e1b      	ldrb	r3, [r3, #24]
 8003668:	005a      	lsls	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01b      	beq.n	80036b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800369a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	3b01      	subs	r3, #1
 80036a8:	035a      	lsls	r2, r3, #13
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	e007      	b.n	80036c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	3b01      	subs	r3, #1
 80036e0:	051a      	lsls	r2, r3, #20
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6899      	ldr	r1, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003706:	025a      	lsls	r2, r3, #9
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6899      	ldr	r1, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	029a      	lsls	r2, r3, #10
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	609a      	str	r2, [r3, #8]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40012300 	.word	0x40012300
 8003744:	0f000001 	.word	0x0f000001

08003748 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0ed      	b.n	8003936 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd fee8 	bl	800153c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800377c:	f7ff fd52 	bl	8003224 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003782:	e012      	b.n	80037aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003784:	f7ff fd4e 	bl	8003224 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b0a      	cmp	r3, #10
 8003790:	d90b      	bls.n	80037aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2205      	movs	r2, #5
 80037a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0c5      	b.n	8003936 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0e5      	beq.n	8003784 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0202 	bic.w	r2, r2, #2
 80037c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037c8:	f7ff fd2c 	bl	8003224 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037ce:	e012      	b.n	80037f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037d0:	f7ff fd28 	bl	8003224 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b0a      	cmp	r3, #10
 80037dc:	d90b      	bls.n	80037f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2205      	movs	r2, #5
 80037ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e09f      	b.n	8003936 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e5      	bne.n	80037d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	7e1b      	ldrb	r3, [r3, #24]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d108      	bne.n	800381e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e007      	b.n	800382e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800382c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	7e5b      	ldrb	r3, [r3, #25]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d108      	bne.n	8003848 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e007      	b.n	8003858 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003856:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7e9b      	ldrb	r3, [r3, #26]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d108      	bne.n	8003872 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0220 	orr.w	r2, r2, #32
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e007      	b.n	8003882 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0220 	bic.w	r2, r2, #32
 8003880:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	7edb      	ldrb	r3, [r3, #27]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d108      	bne.n	800389c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0210 	bic.w	r2, r2, #16
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e007      	b.n	80038ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0210 	orr.w	r2, r2, #16
 80038aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	7f1b      	ldrb	r3, [r3, #28]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d108      	bne.n	80038c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	e007      	b.n	80038d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0208 	bic.w	r2, r2, #8
 80038d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	7f5b      	ldrb	r3, [r3, #29]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d108      	bne.n	80038f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0204 	orr.w	r2, r2, #4
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e007      	b.n	8003900 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0204 	bic.w	r2, r2, #4
 80038fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	ea42 0103 	orr.w	r1, r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	1e5a      	subs	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <__NVIC_SetPriorityGrouping+0x44>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800395c:	4013      	ands	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800396c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003972:	4a04      	ldr	r2, [pc, #16]	; (8003984 <__NVIC_SetPriorityGrouping+0x44>)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	60d3      	str	r3, [r2, #12]
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <__NVIC_GetPriorityGrouping+0x18>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	f003 0307 	and.w	r3, r3, #7
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	db0b      	blt.n	80039ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	f003 021f 	and.w	r2, r3, #31
 80039bc:	4907      	ldr	r1, [pc, #28]	; (80039dc <__NVIC_EnableIRQ+0x38>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2001      	movs	r0, #1
 80039c6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	e000e100 	.word	0xe000e100

080039e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	6039      	str	r1, [r7, #0]
 80039ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	db0a      	blt.n	8003a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	490c      	ldr	r1, [pc, #48]	; (8003a2c <__NVIC_SetPriority+0x4c>)
 80039fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fe:	0112      	lsls	r2, r2, #4
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	440b      	add	r3, r1
 8003a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a08:	e00a      	b.n	8003a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	4908      	ldr	r1, [pc, #32]	; (8003a30 <__NVIC_SetPriority+0x50>)
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	3b04      	subs	r3, #4
 8003a18:	0112      	lsls	r2, r2, #4
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	761a      	strb	r2, [r3, #24]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000e100 	.word	0xe000e100
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b089      	sub	sp, #36	; 0x24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f1c3 0307 	rsb	r3, r3, #7
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	bf28      	it	cs
 8003a52:	2304      	movcs	r3, #4
 8003a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	2b06      	cmp	r3, #6
 8003a5c:	d902      	bls.n	8003a64 <NVIC_EncodePriority+0x30>
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3b03      	subs	r3, #3
 8003a62:	e000      	b.n	8003a66 <NVIC_EncodePriority+0x32>
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a68:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43da      	mvns	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	401a      	ands	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	fa01 f303 	lsl.w	r3, r1, r3
 8003a86:	43d9      	mvns	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a8c:	4313      	orrs	r3, r2
         );
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3724      	adds	r7, #36	; 0x24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aac:	d301      	bcc.n	8003ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e00f      	b.n	8003ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ab2:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <SysTick_Config+0x40>)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aba:	210f      	movs	r1, #15
 8003abc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac0:	f7ff ff8e 	bl	80039e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <SysTick_Config+0x40>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aca:	4b04      	ldr	r3, [pc, #16]	; (8003adc <SysTick_Config+0x40>)
 8003acc:	2207      	movs	r2, #7
 8003ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	e000e010 	.word	0xe000e010

08003ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ff29 	bl	8003940 <__NVIC_SetPriorityGrouping>
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4603      	mov	r3, r0
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b08:	f7ff ff3e 	bl	8003988 <__NVIC_GetPriorityGrouping>
 8003b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	6978      	ldr	r0, [r7, #20]
 8003b14:	f7ff ff8e 	bl	8003a34 <NVIC_EncodePriority>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ff5d 	bl	80039e0 <__NVIC_SetPriority>
}
 8003b26:	bf00      	nop
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	4603      	mov	r3, r0
 8003b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff31 	bl	80039a4 <__NVIC_EnableIRQ>
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff ffa2 	bl	8003a9c <SysTick_Config>
 8003b58:	4603      	mov	r3, r0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b70:	f7ff fb58 	bl	8003224 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e099      	b.n	8003cb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ba0:	e00f      	b.n	8003bc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ba2:	f7ff fb3f 	bl	8003224 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d908      	bls.n	8003bc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e078      	b.n	8003cb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e8      	bne.n	8003ba2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4b38      	ldr	r3, [pc, #224]	; (8003cbc <HAL_DMA_Init+0x158>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d107      	bne.n	8003c2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	4313      	orrs	r3, r2
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0307 	bic.w	r3, r3, #7
 8003c42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d117      	bne.n	8003c86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00e      	beq.n	8003c86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fa7b 	bl	8004164 <DMA_CheckFifoParam>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2240      	movs	r2, #64	; 0x40
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c82:	2301      	movs	r3, #1
 8003c84:	e016      	b.n	8003cb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fa32 	bl	80040f8 <DMA_CalcBaseAndBitshift>
 8003c94:	4603      	mov	r3, r0
 8003c96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9c:	223f      	movs	r2, #63	; 0x3f
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	f010803f 	.word	0xf010803f

08003cc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cce:	f7ff faa9 	bl	8003224 <HAL_GetTick>
 8003cd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d008      	beq.n	8003cf2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2280      	movs	r2, #128	; 0x80
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e052      	b.n	8003d98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0216 	bic.w	r2, r2, #22
 8003d00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <HAL_DMA_Abort+0x62>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0208 	bic.w	r2, r2, #8
 8003d30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0201 	bic.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d42:	e013      	b.n	8003d6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d44:	f7ff fa6e 	bl	8003224 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b05      	cmp	r3, #5
 8003d50:	d90c      	bls.n	8003d6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e015      	b.n	8003d98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e4      	bne.n	8003d44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7e:	223f      	movs	r2, #63	; 0x3f
 8003d80:	409a      	lsls	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d004      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2280      	movs	r2, #128	; 0x80
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e00c      	b.n	8003dd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2205      	movs	r2, #5
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003df0:	4b8e      	ldr	r3, [pc, #568]	; (800402c <HAL_DMA_IRQHandler+0x248>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a8e      	ldr	r2, [pc, #568]	; (8004030 <HAL_DMA_IRQHandler+0x24c>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	0a9b      	lsrs	r3, r3, #10
 8003dfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0e:	2208      	movs	r2, #8
 8003e10:	409a      	lsls	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d01a      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d013      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0204 	bic.w	r2, r2, #4
 8003e36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	f043 0201 	orr.w	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e54:	2201      	movs	r2, #1
 8003e56:	409a      	lsls	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d012      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00b      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e72:	2201      	movs	r2, #1
 8003e74:	409a      	lsls	r2, r3
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	f043 0202 	orr.w	r2, r3, #2
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	409a      	lsls	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d012      	beq.n	8003ebc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00b      	beq.n	8003ebc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb4:	f043 0204 	orr.w	r2, r3, #4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d043      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d03c      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ede:	2210      	movs	r2, #16
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d018      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d108      	bne.n	8003f14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d024      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	4798      	blx	r3
 8003f12:	e01f      	b.n	8003f54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01b      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	4798      	blx	r3
 8003f24:	e016      	b.n	8003f54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d107      	bne.n	8003f44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0208 	bic.w	r2, r2, #8
 8003f42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f58:	2220      	movs	r2, #32
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 808f 	beq.w	8004084 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8087 	beq.w	8004084 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	d136      	bne.n	8003ffc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0216 	bic.w	r2, r2, #22
 8003f9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <HAL_DMA_IRQHandler+0x1da>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d007      	beq.n	8003fce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0208 	bic.w	r2, r2, #8
 8003fcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd2:	223f      	movs	r2, #63	; 0x3f
 8003fd4:	409a      	lsls	r2, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d07e      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	4798      	blx	r3
        }
        return;
 8003ffa:	e079      	b.n	80040f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d01d      	beq.n	8004046 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10d      	bne.n	8004034 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401c:	2b00      	cmp	r3, #0
 800401e:	d031      	beq.n	8004084 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
 8004028:	e02c      	b.n	8004084 <HAL_DMA_IRQHandler+0x2a0>
 800402a:	bf00      	nop
 800402c:	20000018 	.word	0x20000018
 8004030:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d023      	beq.n	8004084 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
 8004044:	e01e      	b.n	8004084 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10f      	bne.n	8004074 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0210 	bic.w	r2, r2, #16
 8004062:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004088:	2b00      	cmp	r3, #0
 800408a:	d032      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d022      	beq.n	80040de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2205      	movs	r2, #5
 800409c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	3301      	adds	r3, #1
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d307      	bcc.n	80040cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f2      	bne.n	80040b0 <HAL_DMA_IRQHandler+0x2cc>
 80040ca:	e000      	b.n	80040ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	4798      	blx	r3
 80040ee:	e000      	b.n	80040f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80040f0:	bf00      	nop
    }
  }
}
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	3b10      	subs	r3, #16
 8004108:	4a14      	ldr	r2, [pc, #80]	; (800415c <DMA_CalcBaseAndBitshift+0x64>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004112:	4a13      	ldr	r2, [pc, #76]	; (8004160 <DMA_CalcBaseAndBitshift+0x68>)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b03      	cmp	r3, #3
 8004124:	d909      	bls.n	800413a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800412e:	f023 0303 	bic.w	r3, r3, #3
 8004132:	1d1a      	adds	r2, r3, #4
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	659a      	str	r2, [r3, #88]	; 0x58
 8004138:	e007      	b.n	800414a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004142:	f023 0303 	bic.w	r3, r3, #3
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	aaaaaaab 	.word	0xaaaaaaab
 8004160:	0800acbc 	.word	0x0800acbc

08004164 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d11f      	bne.n	80041be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d856      	bhi.n	8004232 <DMA_CheckFifoParam+0xce>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <DMA_CheckFifoParam+0x28>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	0800419d 	.word	0x0800419d
 8004190:	080041af 	.word	0x080041af
 8004194:	0800419d 	.word	0x0800419d
 8004198:	08004233 	.word	0x08004233
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d046      	beq.n	8004236 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ac:	e043      	b.n	8004236 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041b6:	d140      	bne.n	800423a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041bc:	e03d      	b.n	800423a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c6:	d121      	bne.n	800420c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d837      	bhi.n	800423e <DMA_CheckFifoParam+0xda>
 80041ce:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <DMA_CheckFifoParam+0x70>)
 80041d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d4:	080041e5 	.word	0x080041e5
 80041d8:	080041eb 	.word	0x080041eb
 80041dc:	080041e5 	.word	0x080041e5
 80041e0:	080041fd 	.word	0x080041fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
      break;
 80041e8:	e030      	b.n	800424c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d025      	beq.n	8004242 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fa:	e022      	b.n	8004242 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004204:	d11f      	bne.n	8004246 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800420a:	e01c      	b.n	8004246 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d903      	bls.n	800421a <DMA_CheckFifoParam+0xb6>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b03      	cmp	r3, #3
 8004216:	d003      	beq.n	8004220 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004218:	e018      	b.n	800424c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	73fb      	strb	r3, [r7, #15]
      break;
 800421e:	e015      	b.n	800424c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00e      	beq.n	800424a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
      break;
 8004230:	e00b      	b.n	800424a <DMA_CheckFifoParam+0xe6>
      break;
 8004232:	bf00      	nop
 8004234:	e00a      	b.n	800424c <DMA_CheckFifoParam+0xe8>
      break;
 8004236:	bf00      	nop
 8004238:	e008      	b.n	800424c <DMA_CheckFifoParam+0xe8>
      break;
 800423a:	bf00      	nop
 800423c:	e006      	b.n	800424c <DMA_CheckFifoParam+0xe8>
      break;
 800423e:	bf00      	nop
 8004240:	e004      	b.n	800424c <DMA_CheckFifoParam+0xe8>
      break;
 8004242:	bf00      	nop
 8004244:	e002      	b.n	800424c <DMA_CheckFifoParam+0xe8>
      break;   
 8004246:	bf00      	nop
 8004248:	e000      	b.n	800424c <DMA_CheckFifoParam+0xe8>
      break;
 800424a:	bf00      	nop
    }
  } 
  
  return status; 
 800424c:	7bfb      	ldrb	r3, [r7, #15]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop

0800425c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800425c:	b480      	push	{r7}
 800425e:	b089      	sub	sp, #36	; 0x24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800426e:	2300      	movs	r3, #0
 8004270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	e16b      	b.n	8004550 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004278:	2201      	movs	r2, #1
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4013      	ands	r3, r2
 800428a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	429a      	cmp	r2, r3
 8004292:	f040 815a 	bne.w	800454a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d005      	beq.n	80042ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d130      	bne.n	8004310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	2203      	movs	r2, #3
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43db      	mvns	r3, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4013      	ands	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042e4:	2201      	movs	r2, #1
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4013      	ands	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f003 0201 	and.w	r2, r3, #1
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	2b03      	cmp	r3, #3
 800431a:	d017      	beq.n	800434c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	2203      	movs	r2, #3
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4313      	orrs	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d123      	bne.n	80043a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	08da      	lsrs	r2, r3, #3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3208      	adds	r2, #8
 8004360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	220f      	movs	r2, #15
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	08da      	lsrs	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3208      	adds	r2, #8
 800439a:	69b9      	ldr	r1, [r7, #24]
 800439c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	2203      	movs	r2, #3
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 0203 	and.w	r2, r3, #3
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80b4 	beq.w	800454a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	4b60      	ldr	r3, [pc, #384]	; (8004568 <HAL_GPIO_Init+0x30c>)
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	4a5f      	ldr	r2, [pc, #380]	; (8004568 <HAL_GPIO_Init+0x30c>)
 80043ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043f0:	6453      	str	r3, [r2, #68]	; 0x44
 80043f2:	4b5d      	ldr	r3, [pc, #372]	; (8004568 <HAL_GPIO_Init+0x30c>)
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043fe:	4a5b      	ldr	r2, [pc, #364]	; (800456c <HAL_GPIO_Init+0x310>)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	089b      	lsrs	r3, r3, #2
 8004404:	3302      	adds	r3, #2
 8004406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	220f      	movs	r2, #15
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a52      	ldr	r2, [pc, #328]	; (8004570 <HAL_GPIO_Init+0x314>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d02b      	beq.n	8004482 <HAL_GPIO_Init+0x226>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a51      	ldr	r2, [pc, #324]	; (8004574 <HAL_GPIO_Init+0x318>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d025      	beq.n	800447e <HAL_GPIO_Init+0x222>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a50      	ldr	r2, [pc, #320]	; (8004578 <HAL_GPIO_Init+0x31c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d01f      	beq.n	800447a <HAL_GPIO_Init+0x21e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a4f      	ldr	r2, [pc, #316]	; (800457c <HAL_GPIO_Init+0x320>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d019      	beq.n	8004476 <HAL_GPIO_Init+0x21a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a4e      	ldr	r2, [pc, #312]	; (8004580 <HAL_GPIO_Init+0x324>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <HAL_GPIO_Init+0x216>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a4d      	ldr	r2, [pc, #308]	; (8004584 <HAL_GPIO_Init+0x328>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00d      	beq.n	800446e <HAL_GPIO_Init+0x212>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a4c      	ldr	r2, [pc, #304]	; (8004588 <HAL_GPIO_Init+0x32c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d007      	beq.n	800446a <HAL_GPIO_Init+0x20e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a4b      	ldr	r2, [pc, #300]	; (800458c <HAL_GPIO_Init+0x330>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d101      	bne.n	8004466 <HAL_GPIO_Init+0x20a>
 8004462:	2307      	movs	r3, #7
 8004464:	e00e      	b.n	8004484 <HAL_GPIO_Init+0x228>
 8004466:	2308      	movs	r3, #8
 8004468:	e00c      	b.n	8004484 <HAL_GPIO_Init+0x228>
 800446a:	2306      	movs	r3, #6
 800446c:	e00a      	b.n	8004484 <HAL_GPIO_Init+0x228>
 800446e:	2305      	movs	r3, #5
 8004470:	e008      	b.n	8004484 <HAL_GPIO_Init+0x228>
 8004472:	2304      	movs	r3, #4
 8004474:	e006      	b.n	8004484 <HAL_GPIO_Init+0x228>
 8004476:	2303      	movs	r3, #3
 8004478:	e004      	b.n	8004484 <HAL_GPIO_Init+0x228>
 800447a:	2302      	movs	r3, #2
 800447c:	e002      	b.n	8004484 <HAL_GPIO_Init+0x228>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <HAL_GPIO_Init+0x228>
 8004482:	2300      	movs	r3, #0
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	f002 0203 	and.w	r2, r2, #3
 800448a:	0092      	lsls	r2, r2, #2
 800448c:	4093      	lsls	r3, r2
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4313      	orrs	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004494:	4935      	ldr	r1, [pc, #212]	; (800456c <HAL_GPIO_Init+0x310>)
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	089b      	lsrs	r3, r3, #2
 800449a:	3302      	adds	r3, #2
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044a2:	4b3b      	ldr	r3, [pc, #236]	; (8004590 <HAL_GPIO_Init+0x334>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044c6:	4a32      	ldr	r2, [pc, #200]	; (8004590 <HAL_GPIO_Init+0x334>)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044cc:	4b30      	ldr	r3, [pc, #192]	; (8004590 <HAL_GPIO_Init+0x334>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044f0:	4a27      	ldr	r2, [pc, #156]	; (8004590 <HAL_GPIO_Init+0x334>)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044f6:	4b26      	ldr	r3, [pc, #152]	; (8004590 <HAL_GPIO_Init+0x334>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	43db      	mvns	r3, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4013      	ands	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800451a:	4a1d      	ldr	r2, [pc, #116]	; (8004590 <HAL_GPIO_Init+0x334>)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004520:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_GPIO_Init+0x334>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004544:	4a12      	ldr	r2, [pc, #72]	; (8004590 <HAL_GPIO_Init+0x334>)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3301      	adds	r3, #1
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	f67f ae90 	bls.w	8004278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	3724      	adds	r7, #36	; 0x24
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800
 800456c:	40013800 	.word	0x40013800
 8004570:	40020000 	.word	0x40020000
 8004574:	40020400 	.word	0x40020400
 8004578:	40020800 	.word	0x40020800
 800457c:	40020c00 	.word	0x40020c00
 8004580:	40021000 	.word	0x40021000
 8004584:	40021400 	.word	0x40021400
 8004588:	40021800 	.word	0x40021800
 800458c:	40021c00 	.word	0x40021c00
 8004590:	40013c00 	.word	0x40013c00

08004594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	807b      	strh	r3, [r7, #2]
 80045a0:	4613      	mov	r3, r2
 80045a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045a4:	787b      	ldrb	r3, [r7, #1]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045aa:	887a      	ldrh	r2, [r7, #2]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045b0:	e003      	b.n	80045ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045b2:	887b      	ldrh	r3, [r7, #2]
 80045b4:	041a      	lsls	r2, r3, #16
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	619a      	str	r2, [r3, #24]
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	460b      	mov	r3, r1
 80045d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045d8:	887a      	ldrh	r2, [r7, #2]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4013      	ands	r3, r2
 80045de:	041a      	lsls	r2, r3, #16
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	43d9      	mvns	r1, r3
 80045e4:	887b      	ldrh	r3, [r7, #2]
 80045e6:	400b      	ands	r3, r1
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	619a      	str	r2, [r3, #24]
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e12b      	b.n	8004866 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fd f966 	bl	80018f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2224      	movs	r2, #36	; 0x24
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800464e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800465e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004660:	f001 fe6a 	bl	8006338 <HAL_RCC_GetPCLK1Freq>
 8004664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4a81      	ldr	r2, [pc, #516]	; (8004870 <HAL_I2C_Init+0x274>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d807      	bhi.n	8004680 <HAL_I2C_Init+0x84>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a80      	ldr	r2, [pc, #512]	; (8004874 <HAL_I2C_Init+0x278>)
 8004674:	4293      	cmp	r3, r2
 8004676:	bf94      	ite	ls
 8004678:	2301      	movls	r3, #1
 800467a:	2300      	movhi	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e006      	b.n	800468e <HAL_I2C_Init+0x92>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4a7d      	ldr	r2, [pc, #500]	; (8004878 <HAL_I2C_Init+0x27c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	bf94      	ite	ls
 8004688:	2301      	movls	r3, #1
 800468a:	2300      	movhi	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e0e7      	b.n	8004866 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4a78      	ldr	r2, [pc, #480]	; (800487c <HAL_I2C_Init+0x280>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	0c9b      	lsrs	r3, r3, #18
 80046a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4a6a      	ldr	r2, [pc, #424]	; (8004870 <HAL_I2C_Init+0x274>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d802      	bhi.n	80046d0 <HAL_I2C_Init+0xd4>
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	3301      	adds	r3, #1
 80046ce:	e009      	b.n	80046e4 <HAL_I2C_Init+0xe8>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	4a69      	ldr	r2, [pc, #420]	; (8004880 <HAL_I2C_Init+0x284>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	099b      	lsrs	r3, r3, #6
 80046e2:	3301      	adds	r3, #1
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	495c      	ldr	r1, [pc, #368]	; (8004870 <HAL_I2C_Init+0x274>)
 8004700:	428b      	cmp	r3, r1
 8004702:	d819      	bhi.n	8004738 <HAL_I2C_Init+0x13c>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	1e59      	subs	r1, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004712:	1c59      	adds	r1, r3, #1
 8004714:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004718:	400b      	ands	r3, r1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <HAL_I2C_Init+0x138>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1e59      	subs	r1, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	fbb1 f3f3 	udiv	r3, r1, r3
 800472c:	3301      	adds	r3, #1
 800472e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004732:	e051      	b.n	80047d8 <HAL_I2C_Init+0x1dc>
 8004734:	2304      	movs	r3, #4
 8004736:	e04f      	b.n	80047d8 <HAL_I2C_Init+0x1dc>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d111      	bne.n	8004764 <HAL_I2C_Init+0x168>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1e58      	subs	r0, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6859      	ldr	r1, [r3, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	440b      	add	r3, r1
 800474e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004752:	3301      	adds	r3, #1
 8004754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e012      	b.n	800478a <HAL_I2C_Init+0x18e>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	1e58      	subs	r0, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6859      	ldr	r1, [r3, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	0099      	lsls	r1, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	fbb0 f3f3 	udiv	r3, r0, r3
 800477a:	3301      	adds	r3, #1
 800477c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_I2C_Init+0x196>
 800478e:	2301      	movs	r3, #1
 8004790:	e022      	b.n	80047d8 <HAL_I2C_Init+0x1dc>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10e      	bne.n	80047b8 <HAL_I2C_Init+0x1bc>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1e58      	subs	r0, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6859      	ldr	r1, [r3, #4]
 80047a2:	460b      	mov	r3, r1
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	440b      	add	r3, r1
 80047a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ac:	3301      	adds	r3, #1
 80047ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b6:	e00f      	b.n	80047d8 <HAL_I2C_Init+0x1dc>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1e58      	subs	r0, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6859      	ldr	r1, [r3, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	0099      	lsls	r1, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ce:	3301      	adds	r3, #1
 80047d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	6809      	ldr	r1, [r1, #0]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69da      	ldr	r2, [r3, #28]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6911      	ldr	r1, [r2, #16]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68d2      	ldr	r2, [r2, #12]
 8004812:	4311      	orrs	r1, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	430b      	orrs	r3, r1
 800481a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	000186a0 	.word	0x000186a0
 8004874:	001e847f 	.word	0x001e847f
 8004878:	003d08ff 	.word	0x003d08ff
 800487c:	431bde83 	.word	0x431bde83
 8004880:	10624dd3 	.word	0x10624dd3

08004884 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	461a      	mov	r2, r3
 8004890:	460b      	mov	r3, r1
 8004892:	817b      	strh	r3, [r7, #10]
 8004894:	4613      	mov	r3, r2
 8004896:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004898:	f7fe fcc4 	bl	8003224 <HAL_GetTick>
 800489c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	f040 80e0 	bne.w	8004a6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	2319      	movs	r3, #25
 80048b2:	2201      	movs	r2, #1
 80048b4:	4970      	ldr	r1, [pc, #448]	; (8004a78 <HAL_I2C_Master_Transmit+0x1f4>)
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 ff30 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048c2:	2302      	movs	r3, #2
 80048c4:	e0d3      	b.n	8004a6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_I2C_Master_Transmit+0x50>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e0cc      	b.n	8004a6e <HAL_I2C_Master_Transmit+0x1ea>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d007      	beq.n	80048fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004908:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2221      	movs	r2, #33	; 0x21
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2210      	movs	r2, #16
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	893a      	ldrh	r2, [r7, #8]
 800492a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a50      	ldr	r2, [pc, #320]	; (8004a7c <HAL_I2C_Master_Transmit+0x1f8>)
 800493a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800493c:	8979      	ldrh	r1, [r7, #10]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	6a3a      	ldr	r2, [r7, #32]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fcea 	bl	800531c <I2C_MasterRequestWrite>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e08d      	b.n	8004a6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004952:	2300      	movs	r3, #0
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004968:	e066      	b.n	8004a38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	6a39      	ldr	r1, [r7, #32]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 ffaa 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00d      	beq.n	8004996 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b04      	cmp	r3, #4
 8004980:	d107      	bne.n	8004992 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004990:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e06b      	b.n	8004a6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	781a      	ldrb	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d11b      	bne.n	8004a0c <HAL_I2C_Master_Transmit+0x188>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d017      	beq.n	8004a0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	781a      	ldrb	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	6a39      	ldr	r1, [r7, #32]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 ff9a 	bl	800594a <I2C_WaitOnBTFFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00d      	beq.n	8004a38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d107      	bne.n	8004a34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e01a      	b.n	8004a6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d194      	bne.n	800496a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e000      	b.n	8004a6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a6c:	2302      	movs	r3, #2
  }
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	00100002 	.word	0x00100002
 8004a7c:	ffff0000 	.word	0xffff0000

08004a80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	4608      	mov	r0, r1
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	4603      	mov	r3, r0
 8004a90:	817b      	strh	r3, [r7, #10]
 8004a92:	460b      	mov	r3, r1
 8004a94:	813b      	strh	r3, [r7, #8]
 8004a96:	4613      	mov	r3, r2
 8004a98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a9a:	f7fe fbc3 	bl	8003224 <HAL_GetTick>
 8004a9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	f040 80d9 	bne.w	8004c60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	2319      	movs	r3, #25
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	496d      	ldr	r1, [pc, #436]	; (8004c6c <HAL_I2C_Mem_Write+0x1ec>)
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fe2f 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e0cc      	b.n	8004c62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_I2C_Mem_Write+0x56>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e0c5      	b.n	8004c62 <HAL_I2C_Mem_Write+0x1e2>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d007      	beq.n	8004afc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0201 	orr.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2221      	movs	r2, #33	; 0x21
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2240      	movs	r2, #64	; 0x40
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a3a      	ldr	r2, [r7, #32]
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a4d      	ldr	r2, [pc, #308]	; (8004c70 <HAL_I2C_Mem_Write+0x1f0>)
 8004b3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b3e:	88f8      	ldrh	r0, [r7, #6]
 8004b40:	893a      	ldrh	r2, [r7, #8]
 8004b42:	8979      	ldrh	r1, [r7, #10]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 fc66 	bl	8005420 <I2C_RequestMemoryWrite>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d052      	beq.n	8004c00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e081      	b.n	8004c62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 feb0 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00d      	beq.n	8004b8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d107      	bne.n	8004b86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e06b      	b.n	8004c62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	781a      	ldrb	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d11b      	bne.n	8004c00 <HAL_I2C_Mem_Write+0x180>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d017      	beq.n	8004c00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	781a      	ldrb	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1aa      	bne.n	8004b5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fe9c 	bl	800594a <I2C_WaitOnBTFFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00d      	beq.n	8004c34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d107      	bne.n	8004c30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e016      	b.n	8004c62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e000      	b.n	8004c62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
  }
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	00100002 	.word	0x00100002
 8004c70:	ffff0000 	.word	0xffff0000

08004c74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08c      	sub	sp, #48	; 0x30
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	4611      	mov	r1, r2
 8004c80:	461a      	mov	r2, r3
 8004c82:	4603      	mov	r3, r0
 8004c84:	817b      	strh	r3, [r7, #10]
 8004c86:	460b      	mov	r3, r1
 8004c88:	813b      	strh	r3, [r7, #8]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c8e:	f7fe fac9 	bl	8003224 <HAL_GetTick>
 8004c92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	f040 8208 	bne.w	80050b2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	2319      	movs	r3, #25
 8004ca8:	2201      	movs	r2, #1
 8004caa:	497b      	ldr	r1, [pc, #492]	; (8004e98 <HAL_I2C_Mem_Read+0x224>)
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 fd35 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e1fb      	b.n	80050b4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_I2C_Mem_Read+0x56>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e1f4      	b.n	80050b4 <HAL_I2C_Mem_Read+0x440>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d007      	beq.n	8004cf0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2222      	movs	r2, #34	; 0x22
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2240      	movs	r2, #64	; 0x40
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4a5b      	ldr	r2, [pc, #364]	; (8004e9c <HAL_I2C_Mem_Read+0x228>)
 8004d30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d32:	88f8      	ldrh	r0, [r7, #6]
 8004d34:	893a      	ldrh	r2, [r7, #8]
 8004d36:	8979      	ldrh	r1, [r7, #10]
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	4603      	mov	r3, r0
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 fc02 	bl	800554c <I2C_RequestMemoryRead>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e1b0      	b.n	80050b4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d113      	bne.n	8004d82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	623b      	str	r3, [r7, #32]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	623b      	str	r3, [r7, #32]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	623b      	str	r3, [r7, #32]
 8004d6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	e184      	b.n	800508c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d11b      	bne.n	8004dc2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e164      	b.n	800508c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d11b      	bne.n	8004e02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	e144      	b.n	800508c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e02:	2300      	movs	r3, #0
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e18:	e138      	b.n	800508c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	f200 80f1 	bhi.w	8005006 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d123      	bne.n	8004e74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fdcb 	bl	80059cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e139      	b.n	80050b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e72:	e10b      	b.n	800508c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d14e      	bne.n	8004f1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	2200      	movs	r2, #0
 8004e84:	4906      	ldr	r1, [pc, #24]	; (8004ea0 <HAL_I2C_Mem_Read+0x22c>)
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 fc48 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e10e      	b.n	80050b4 <HAL_I2C_Mem_Read+0x440>
 8004e96:	bf00      	nop
 8004e98:	00100002 	.word	0x00100002
 8004e9c:	ffff0000 	.word	0xffff0000
 8004ea0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f18:	e0b8      	b.n	800508c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	2200      	movs	r2, #0
 8004f22:	4966      	ldr	r1, [pc, #408]	; (80050bc <HAL_I2C_Mem_Read+0x448>)
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fbf9 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0bf      	b.n	80050b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	494f      	ldr	r1, [pc, #316]	; (80050bc <HAL_I2C_Mem_Read+0x448>)
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fbcb 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e091      	b.n	80050b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005004:	e042      	b.n	800508c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005008:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 fcde 	bl	80059cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e04c      	b.n	80050b4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b04      	cmp	r3, #4
 8005058:	d118      	bne.n	800508c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005090:	2b00      	cmp	r3, #0
 8005092:	f47f aec2 	bne.w	8004e1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	e000      	b.n	80050b4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80050b2:	2302      	movs	r3, #2
  }
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3728      	adds	r7, #40	; 0x28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	00010004 	.word	0x00010004

080050c0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	607a      	str	r2, [r7, #4]
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	460b      	mov	r3, r1
 80050ce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80050d0:	f7fe f8a8 	bl	8003224 <HAL_GetTick>
 80050d4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	f040 8111 	bne.w	800530a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	2319      	movs	r3, #25
 80050ee:	2201      	movs	r2, #1
 80050f0:	4988      	ldr	r1, [pc, #544]	; (8005314 <HAL_I2C_IsDeviceReady+0x254>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fb12 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
 8005100:	e104      	b.n	800530c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_I2C_IsDeviceReady+0x50>
 800510c:	2302      	movs	r3, #2
 800510e:	e0fd      	b.n	800530c <HAL_I2C_IsDeviceReady+0x24c>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b01      	cmp	r3, #1
 8005124:	d007      	beq.n	8005136 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005144:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2224      	movs	r2, #36	; 0x24
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4a70      	ldr	r2, [pc, #448]	; (8005318 <HAL_I2C_IsDeviceReady+0x258>)
 8005158:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005168:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2200      	movs	r2, #0
 8005172:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 fad0 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00d      	beq.n	800519e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005190:	d103      	bne.n	800519a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e0b6      	b.n	800530c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800519e:	897b      	ldrh	r3, [r7, #10]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051ac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80051ae:	f7fe f839 	bl	8003224 <HAL_GetTick>
 80051b2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b02      	cmp	r3, #2
 80051c0:	bf0c      	ite	eq
 80051c2:	2301      	moveq	r3, #1
 80051c4:	2300      	movne	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d8:	bf0c      	ite	eq
 80051da:	2301      	moveq	r3, #1
 80051dc:	2300      	movne	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80051e2:	e025      	b.n	8005230 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051e4:	f7fe f81e 	bl	8003224 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d302      	bcc.n	80051fa <HAL_I2C_IsDeviceReady+0x13a>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d103      	bne.n	8005202 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	22a0      	movs	r2, #160	; 0xa0
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b02      	cmp	r3, #2
 800520e:	bf0c      	ite	eq
 8005210:	2301      	moveq	r3, #1
 8005212:	2300      	movne	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005226:	bf0c      	ite	eq
 8005228:	2301      	moveq	r3, #1
 800522a:	2300      	movne	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2ba0      	cmp	r3, #160	; 0xa0
 800523a:	d005      	beq.n	8005248 <HAL_I2C_IsDeviceReady+0x188>
 800523c:	7dfb      	ldrb	r3, [r7, #23]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <HAL_I2C_IsDeviceReady+0x188>
 8005242:	7dbb      	ldrb	r3, [r7, #22]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0cd      	beq.n	80051e4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b02      	cmp	r3, #2
 800525c:	d129      	bne.n	80052b2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	2319      	movs	r3, #25
 800528a:	2201      	movs	r2, #1
 800528c:	4921      	ldr	r1, [pc, #132]	; (8005314 <HAL_I2C_IsDeviceReady+0x254>)
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 fa44 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e036      	b.n	800530c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e02c      	b.n	800530c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	2319      	movs	r3, #25
 80052d2:	2201      	movs	r2, #1
 80052d4:	490f      	ldr	r1, [pc, #60]	; (8005314 <HAL_I2C_IsDeviceReady+0x254>)
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 fa20 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e012      	b.n	800530c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	3301      	adds	r3, #1
 80052ea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	f4ff af32 	bcc.w	800515a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800530a:	2302      	movs	r3, #2
  }
}
 800530c:	4618      	mov	r0, r3
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	00100002 	.word	0x00100002
 8005318:	ffff0000 	.word	0xffff0000

0800531c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b088      	sub	sp, #32
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	460b      	mov	r3, r1
 800532a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d006      	beq.n	8005346 <I2C_MasterRequestWrite+0x2a>
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d003      	beq.n	8005346 <I2C_MasterRequestWrite+0x2a>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005344:	d108      	bne.n	8005358 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e00b      	b.n	8005370 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	2b12      	cmp	r3, #18
 800535e:	d107      	bne.n	8005370 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800536e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f9cd 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005396:	d103      	bne.n	80053a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e035      	b.n	8005410 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ac:	d108      	bne.n	80053c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ae:	897b      	ldrh	r3, [r7, #10]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	461a      	mov	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053bc:	611a      	str	r2, [r3, #16]
 80053be:	e01b      	b.n	80053f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053c0:	897b      	ldrh	r3, [r7, #10]
 80053c2:	11db      	asrs	r3, r3, #7
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f003 0306 	and.w	r3, r3, #6
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f063 030f 	orn	r3, r3, #15
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	490e      	ldr	r1, [pc, #56]	; (8005418 <I2C_MasterRequestWrite+0xfc>)
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f9f3 	bl	80057ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e010      	b.n	8005410 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053ee:	897b      	ldrh	r3, [r7, #10]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	4907      	ldr	r1, [pc, #28]	; (800541c <I2C_MasterRequestWrite+0x100>)
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f9e3 	bl	80057ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	00010008 	.word	0x00010008
 800541c:	00010002 	.word	0x00010002

08005420 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af02      	add	r7, sp, #8
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	4608      	mov	r0, r1
 800542a:	4611      	mov	r1, r2
 800542c:	461a      	mov	r2, r3
 800542e:	4603      	mov	r3, r0
 8005430:	817b      	strh	r3, [r7, #10]
 8005432:	460b      	mov	r3, r1
 8005434:	813b      	strh	r3, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005448:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	2200      	movs	r2, #0
 8005452:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f960 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00d      	beq.n	800547e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005470:	d103      	bne.n	800547a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005478:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e05f      	b.n	800553e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800547e:	897b      	ldrh	r3, [r7, #10]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800548c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	6a3a      	ldr	r2, [r7, #32]
 8005492:	492d      	ldr	r1, [pc, #180]	; (8005548 <I2C_RequestMemoryWrite+0x128>)
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f998 	bl	80057ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e04c      	b.n	800553e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054bc:	6a39      	ldr	r1, [r7, #32]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 fa02 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00d      	beq.n	80054e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d107      	bne.n	80054e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e02b      	b.n	800553e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d105      	bne.n	80054f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ec:	893b      	ldrh	r3, [r7, #8]
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	611a      	str	r2, [r3, #16]
 80054f6:	e021      	b.n	800553c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054f8:	893b      	ldrh	r3, [r7, #8]
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005508:	6a39      	ldr	r1, [r7, #32]
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 f9dc 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00d      	beq.n	8005532 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	2b04      	cmp	r3, #4
 800551c:	d107      	bne.n	800552e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e005      	b.n	800553e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005532:	893b      	ldrh	r3, [r7, #8]
 8005534:	b2da      	uxtb	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	00010002 	.word	0x00010002

0800554c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	4608      	mov	r0, r1
 8005556:	4611      	mov	r1, r2
 8005558:	461a      	mov	r2, r3
 800555a:	4603      	mov	r3, r0
 800555c:	817b      	strh	r3, [r7, #10]
 800555e:	460b      	mov	r3, r1
 8005560:	813b      	strh	r3, [r7, #8]
 8005562:	4613      	mov	r3, r2
 8005564:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005574:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005584:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	2200      	movs	r2, #0
 800558e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f8c2 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00d      	beq.n	80055ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ac:	d103      	bne.n	80055b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e0aa      	b.n	8005710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ba:	897b      	ldrh	r3, [r7, #10]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	6a3a      	ldr	r2, [r7, #32]
 80055ce:	4952      	ldr	r1, [pc, #328]	; (8005718 <I2C_RequestMemoryRead+0x1cc>)
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f8fa 	bl	80057ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e097      	b.n	8005710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f8:	6a39      	ldr	r1, [r7, #32]
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 f964 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00d      	beq.n	8005622 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	2b04      	cmp	r3, #4
 800560c:	d107      	bne.n	800561e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800561c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e076      	b.n	8005710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d105      	bne.n	8005634 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005628:	893b      	ldrh	r3, [r7, #8]
 800562a:	b2da      	uxtb	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	611a      	str	r2, [r3, #16]
 8005632:	e021      	b.n	8005678 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005634:	893b      	ldrh	r3, [r7, #8]
 8005636:	0a1b      	lsrs	r3, r3, #8
 8005638:	b29b      	uxth	r3, r3
 800563a:	b2da      	uxtb	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005644:	6a39      	ldr	r1, [r7, #32]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f93e 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00d      	beq.n	800566e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	2b04      	cmp	r3, #4
 8005658:	d107      	bne.n	800566a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005668:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e050      	b.n	8005710 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800566e:	893b      	ldrh	r3, [r7, #8]
 8005670:	b2da      	uxtb	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800567a:	6a39      	ldr	r1, [r7, #32]
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f923 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00d      	beq.n	80056a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	2b04      	cmp	r3, #4
 800568e:	d107      	bne.n	80056a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e035      	b.n	8005710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f82b 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00d      	beq.n	80056e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056da:	d103      	bne.n	80056e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e013      	b.n	8005710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056e8:	897b      	ldrh	r3, [r7, #10]
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	6a3a      	ldr	r2, [r7, #32]
 80056fc:	4906      	ldr	r1, [pc, #24]	; (8005718 <I2C_RequestMemoryRead+0x1cc>)
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f863 	bl	80057ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	00010002 	.word	0x00010002

0800571c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800572c:	e025      	b.n	800577a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d021      	beq.n	800577a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005736:	f7fd fd75 	bl	8003224 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d302      	bcc.n	800574c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d116      	bne.n	800577a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f043 0220 	orr.w	r2, r3, #32
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e023      	b.n	80057c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	0c1b      	lsrs	r3, r3, #16
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	d10d      	bne.n	80057a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	43da      	mvns	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4013      	ands	r3, r2
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	bf0c      	ite	eq
 8005796:	2301      	moveq	r3, #1
 8005798:	2300      	movne	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	e00c      	b.n	80057ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	43da      	mvns	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4013      	ands	r3, r2
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf0c      	ite	eq
 80057b2:	2301      	moveq	r3, #1
 80057b4:	2300      	movne	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d0b6      	beq.n	800572e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057d8:	e051      	b.n	800587e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e8:	d123      	bne.n	8005832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005802:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	f043 0204 	orr.w	r2, r3, #4
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e046      	b.n	80058c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005838:	d021      	beq.n	800587e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583a:	f7fd fcf3 	bl	8003224 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	429a      	cmp	r2, r3
 8005848:	d302      	bcc.n	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d116      	bne.n	800587e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f043 0220 	orr.w	r2, r3, #32
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e020      	b.n	80058c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	0c1b      	lsrs	r3, r3, #16
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d10c      	bne.n	80058a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	43da      	mvns	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4013      	ands	r3, r2
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	bf14      	ite	ne
 800589a:	2301      	movne	r3, #1
 800589c:	2300      	moveq	r3, #0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	e00b      	b.n	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	43da      	mvns	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	4013      	ands	r3, r2
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bf14      	ite	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	2300      	moveq	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d18d      	bne.n	80057da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058d4:	e02d      	b.n	8005932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f8ce 	bl	8005a78 <I2C_IsAcknowledgeFailed>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e02d      	b.n	8005942 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d021      	beq.n	8005932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ee:	f7fd fc99 	bl	8003224 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d116      	bne.n	8005932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e007      	b.n	8005942 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593c:	2b80      	cmp	r3, #128	; 0x80
 800593e:	d1ca      	bne.n	80058d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005956:	e02d      	b.n	80059b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f88d 	bl	8005a78 <I2C_IsAcknowledgeFailed>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e02d      	b.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d021      	beq.n	80059b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005970:	f7fd fc58 	bl	8003224 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d116      	bne.n	80059b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	f043 0220 	orr.w	r2, r3, #32
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e007      	b.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d1ca      	bne.n	8005958 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059d8:	e042      	b.n	8005a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b10      	cmp	r3, #16
 80059e6:	d119      	bne.n	8005a1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0210 	mvn.w	r2, #16
 80059f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e029      	b.n	8005a70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1c:	f7fd fc02 	bl	8003224 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d302      	bcc.n	8005a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d116      	bne.n	8005a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e007      	b.n	8005a70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d1b5      	bne.n	80059da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8e:	d11b      	bne.n	8005ac8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	f043 0204 	orr.w	r2, r3, #4
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e000      	b.n	8005aca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e267      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d075      	beq.n	8005be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005af6:	4b88      	ldr	r3, [pc, #544]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 030c 	and.w	r3, r3, #12
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d00c      	beq.n	8005b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b02:	4b85      	ldr	r3, [pc, #532]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d112      	bne.n	8005b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b0e:	4b82      	ldr	r3, [pc, #520]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b1a:	d10b      	bne.n	8005b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b1c:	4b7e      	ldr	r3, [pc, #504]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d05b      	beq.n	8005be0 <HAL_RCC_OscConfig+0x108>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d157      	bne.n	8005be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e242      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3c:	d106      	bne.n	8005b4c <HAL_RCC_OscConfig+0x74>
 8005b3e:	4b76      	ldr	r3, [pc, #472]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a75      	ldr	r2, [pc, #468]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	e01d      	b.n	8005b88 <HAL_RCC_OscConfig+0xb0>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b54:	d10c      	bne.n	8005b70 <HAL_RCC_OscConfig+0x98>
 8005b56:	4b70      	ldr	r3, [pc, #448]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a6f      	ldr	r2, [pc, #444]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	4b6d      	ldr	r3, [pc, #436]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a6c      	ldr	r2, [pc, #432]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	e00b      	b.n	8005b88 <HAL_RCC_OscConfig+0xb0>
 8005b70:	4b69      	ldr	r3, [pc, #420]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a68      	ldr	r2, [pc, #416]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	4b66      	ldr	r3, [pc, #408]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a65      	ldr	r2, [pc, #404]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d013      	beq.n	8005bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b90:	f7fd fb48 	bl	8003224 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b98:	f7fd fb44 	bl	8003224 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b64      	cmp	r3, #100	; 0x64
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e207      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005baa:	4b5b      	ldr	r3, [pc, #364]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0f0      	beq.n	8005b98 <HAL_RCC_OscConfig+0xc0>
 8005bb6:	e014      	b.n	8005be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb8:	f7fd fb34 	bl	8003224 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bc0:	f7fd fb30 	bl	8003224 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b64      	cmp	r3, #100	; 0x64
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e1f3      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bd2:	4b51      	ldr	r3, [pc, #324]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f0      	bne.n	8005bc0 <HAL_RCC_OscConfig+0xe8>
 8005bde:	e000      	b.n	8005be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d063      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bee:	4b4a      	ldr	r3, [pc, #296]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 030c 	and.w	r3, r3, #12
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bfa:	4b47      	ldr	r3, [pc, #284]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d11c      	bne.n	8005c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c06:	4b44      	ldr	r3, [pc, #272]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d116      	bne.n	8005c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c12:	4b41      	ldr	r3, [pc, #260]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <HAL_RCC_OscConfig+0x152>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d001      	beq.n	8005c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e1c7      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c2a:	4b3b      	ldr	r3, [pc, #236]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	4937      	ldr	r1, [pc, #220]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c3e:	e03a      	b.n	8005cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d020      	beq.n	8005c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c48:	4b34      	ldr	r3, [pc, #208]	; (8005d1c <HAL_RCC_OscConfig+0x244>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4e:	f7fd fae9 	bl	8003224 <HAL_GetTick>
 8005c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c54:	e008      	b.n	8005c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c56:	f7fd fae5 	bl	8003224 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e1a8      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c68:	4b2b      	ldr	r3, [pc, #172]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0f0      	beq.n	8005c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c74:	4b28      	ldr	r3, [pc, #160]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	4925      	ldr	r1, [pc, #148]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	600b      	str	r3, [r1, #0]
 8005c88:	e015      	b.n	8005cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c8a:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <HAL_RCC_OscConfig+0x244>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c90:	f7fd fac8 	bl	8003224 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c98:	f7fd fac4 	bl	8003224 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e187      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005caa:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f0      	bne.n	8005c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d036      	beq.n	8005d30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d016      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cca:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <HAL_RCC_OscConfig+0x248>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd0:	f7fd faa8 	bl	8003224 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cd8:	f7fd faa4 	bl	8003224 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e167      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cea:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <HAL_RCC_OscConfig+0x240>)
 8005cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f0      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x200>
 8005cf6:	e01b      	b.n	8005d30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cf8:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <HAL_RCC_OscConfig+0x248>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfe:	f7fd fa91 	bl	8003224 <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d04:	e00e      	b.n	8005d24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d06:	f7fd fa8d 	bl	8003224 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d907      	bls.n	8005d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e150      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	42470000 	.word	0x42470000
 8005d20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d24:	4b88      	ldr	r3, [pc, #544]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1ea      	bne.n	8005d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8097 	beq.w	8005e6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d42:	4b81      	ldr	r3, [pc, #516]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10f      	bne.n	8005d6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	4b7d      	ldr	r3, [pc, #500]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	4a7c      	ldr	r2, [pc, #496]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d5e:	4b7a      	ldr	r3, [pc, #488]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6e:	4b77      	ldr	r3, [pc, #476]	; (8005f4c <HAL_RCC_OscConfig+0x474>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d118      	bne.n	8005dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d7a:	4b74      	ldr	r3, [pc, #464]	; (8005f4c <HAL_RCC_OscConfig+0x474>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a73      	ldr	r2, [pc, #460]	; (8005f4c <HAL_RCC_OscConfig+0x474>)
 8005d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d86:	f7fd fa4d 	bl	8003224 <HAL_GetTick>
 8005d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8c:	e008      	b.n	8005da0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d8e:	f7fd fa49 	bl	8003224 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e10c      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da0:	4b6a      	ldr	r3, [pc, #424]	; (8005f4c <HAL_RCC_OscConfig+0x474>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0f0      	beq.n	8005d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d106      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x2ea>
 8005db4:	4b64      	ldr	r3, [pc, #400]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	4a63      	ldr	r2, [pc, #396]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc0:	e01c      	b.n	8005dfc <HAL_RCC_OscConfig+0x324>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	d10c      	bne.n	8005de4 <HAL_RCC_OscConfig+0x30c>
 8005dca:	4b5f      	ldr	r3, [pc, #380]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dce:	4a5e      	ldr	r2, [pc, #376]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005dd0:	f043 0304 	orr.w	r3, r3, #4
 8005dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8005dd6:	4b5c      	ldr	r3, [pc, #368]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dda:	4a5b      	ldr	r2, [pc, #364]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005ddc:	f043 0301 	orr.w	r3, r3, #1
 8005de0:	6713      	str	r3, [r2, #112]	; 0x70
 8005de2:	e00b      	b.n	8005dfc <HAL_RCC_OscConfig+0x324>
 8005de4:	4b58      	ldr	r3, [pc, #352]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de8:	4a57      	ldr	r2, [pc, #348]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005dea:	f023 0301 	bic.w	r3, r3, #1
 8005dee:	6713      	str	r3, [r2, #112]	; 0x70
 8005df0:	4b55      	ldr	r3, [pc, #340]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df4:	4a54      	ldr	r2, [pc, #336]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005df6:	f023 0304 	bic.w	r3, r3, #4
 8005dfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d015      	beq.n	8005e30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e04:	f7fd fa0e 	bl	8003224 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e0a:	e00a      	b.n	8005e22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e0c:	f7fd fa0a 	bl	8003224 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e0cb      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e22:	4b49      	ldr	r3, [pc, #292]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0ee      	beq.n	8005e0c <HAL_RCC_OscConfig+0x334>
 8005e2e:	e014      	b.n	8005e5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e30:	f7fd f9f8 	bl	8003224 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e36:	e00a      	b.n	8005e4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e38:	f7fd f9f4 	bl	8003224 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e0b5      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e4e:	4b3e      	ldr	r3, [pc, #248]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1ee      	bne.n	8005e38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d105      	bne.n	8005e6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e60:	4b39      	ldr	r3, [pc, #228]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e64:	4a38      	ldr	r2, [pc, #224]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 80a1 	beq.w	8005fb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e76:	4b34      	ldr	r3, [pc, #208]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 030c 	and.w	r3, r3, #12
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d05c      	beq.n	8005f3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d141      	bne.n	8005f0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8a:	4b31      	ldr	r3, [pc, #196]	; (8005f50 <HAL_RCC_OscConfig+0x478>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e90:	f7fd f9c8 	bl	8003224 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e98:	f7fd f9c4 	bl	8003224 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e087      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eaa:	4b27      	ldr	r3, [pc, #156]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f0      	bne.n	8005e98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69da      	ldr	r2, [r3, #28]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	019b      	lsls	r3, r3, #6
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	085b      	lsrs	r3, r3, #1
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	041b      	lsls	r3, r3, #16
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	061b      	lsls	r3, r3, #24
 8005eda:	491b      	ldr	r1, [pc, #108]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ee0:	4b1b      	ldr	r3, [pc, #108]	; (8005f50 <HAL_RCC_OscConfig+0x478>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee6:	f7fd f99d 	bl	8003224 <HAL_GetTick>
 8005eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eee:	f7fd f999 	bl	8003224 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e05c      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f00:	4b11      	ldr	r3, [pc, #68]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0f0      	beq.n	8005eee <HAL_RCC_OscConfig+0x416>
 8005f0c:	e054      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f0e:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <HAL_RCC_OscConfig+0x478>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f14:	f7fd f986 	bl	8003224 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f1c:	f7fd f982 	bl	8003224 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e045      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f2e:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <HAL_RCC_OscConfig+0x470>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f0      	bne.n	8005f1c <HAL_RCC_OscConfig+0x444>
 8005f3a:	e03d      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d107      	bne.n	8005f54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e038      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	40007000 	.word	0x40007000
 8005f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f54:	4b1b      	ldr	r3, [pc, #108]	; (8005fc4 <HAL_RCC_OscConfig+0x4ec>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d028      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d121      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d11a      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f84:	4013      	ands	r3, r2
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d111      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d107      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d001      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40023800 	.word	0x40023800

08005fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0cc      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fdc:	4b68      	ldr	r3, [pc, #416]	; (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d90c      	bls.n	8006004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fea:	4b65      	ldr	r3, [pc, #404]	; (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff2:	4b63      	ldr	r3, [pc, #396]	; (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d001      	beq.n	8006004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e0b8      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d020      	beq.n	8006052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800601c:	4b59      	ldr	r3, [pc, #356]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	4a58      	ldr	r2, [pc, #352]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006034:	4b53      	ldr	r3, [pc, #332]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	4a52      	ldr	r2, [pc, #328]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800603a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800603e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006040:	4b50      	ldr	r3, [pc, #320]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	494d      	ldr	r1, [pc, #308]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	4313      	orrs	r3, r2
 8006050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d044      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d107      	bne.n	8006076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006066:	4b47      	ldr	r3, [pc, #284]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d119      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e07f      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b02      	cmp	r3, #2
 800607c:	d003      	beq.n	8006086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006082:	2b03      	cmp	r3, #3
 8006084:	d107      	bne.n	8006096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006086:	4b3f      	ldr	r3, [pc, #252]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e06f      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006096:	4b3b      	ldr	r3, [pc, #236]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e067      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060a6:	4b37      	ldr	r3, [pc, #220]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f023 0203 	bic.w	r2, r3, #3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	4934      	ldr	r1, [pc, #208]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060b8:	f7fd f8b4 	bl	8003224 <HAL_GetTick>
 80060bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060be:	e00a      	b.n	80060d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060c0:	f7fd f8b0 	bl	8003224 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e04f      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d6:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 020c 	and.w	r2, r3, #12
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d1eb      	bne.n	80060c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060e8:	4b25      	ldr	r3, [pc, #148]	; (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d20c      	bcs.n	8006110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f6:	4b22      	ldr	r3, [pc, #136]	; (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fe:	4b20      	ldr	r3, [pc, #128]	; (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d001      	beq.n	8006110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e032      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d008      	beq.n	800612e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800611c:	4b19      	ldr	r3, [pc, #100]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	4916      	ldr	r1, [pc, #88]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	4313      	orrs	r3, r2
 800612c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d009      	beq.n	800614e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800613a:	4b12      	ldr	r3, [pc, #72]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	490e      	ldr	r1, [pc, #56]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	4313      	orrs	r3, r2
 800614c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800614e:	f000 f821 	bl	8006194 <HAL_RCC_GetSysClockFreq>
 8006152:	4602      	mov	r2, r0
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	490a      	ldr	r1, [pc, #40]	; (8006188 <HAL_RCC_ClockConfig+0x1c0>)
 8006160:	5ccb      	ldrb	r3, [r1, r3]
 8006162:	fa22 f303 	lsr.w	r3, r2, r3
 8006166:	4a09      	ldr	r2, [pc, #36]	; (800618c <HAL_RCC_ClockConfig+0x1c4>)
 8006168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800616a:	4b09      	ldr	r3, [pc, #36]	; (8006190 <HAL_RCC_ClockConfig+0x1c8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f7fd f814 	bl	800319c <HAL_InitTick>

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40023c00 	.word	0x40023c00
 8006184:	40023800 	.word	0x40023800
 8006188:	0800aca4 	.word	0x0800aca4
 800618c:	20000018 	.word	0x20000018
 8006190:	2000001c 	.word	0x2000001c

08006194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006198:	b090      	sub	sp, #64	; 0x40
 800619a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
 80061a0:	2300      	movs	r3, #0
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061a4:	2300      	movs	r3, #0
 80061a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061ac:	4b59      	ldr	r3, [pc, #356]	; (8006314 <HAL_RCC_GetSysClockFreq+0x180>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 030c 	and.w	r3, r3, #12
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d00d      	beq.n	80061d4 <HAL_RCC_GetSysClockFreq+0x40>
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	f200 80a1 	bhi.w	8006300 <HAL_RCC_GetSysClockFreq+0x16c>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <HAL_RCC_GetSysClockFreq+0x34>
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d003      	beq.n	80061ce <HAL_RCC_GetSysClockFreq+0x3a>
 80061c6:	e09b      	b.n	8006300 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061c8:	4b53      	ldr	r3, [pc, #332]	; (8006318 <HAL_RCC_GetSysClockFreq+0x184>)
 80061ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80061cc:	e09b      	b.n	8006306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061ce:	4b53      	ldr	r3, [pc, #332]	; (800631c <HAL_RCC_GetSysClockFreq+0x188>)
 80061d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061d2:	e098      	b.n	8006306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061d4:	4b4f      	ldr	r3, [pc, #316]	; (8006314 <HAL_RCC_GetSysClockFreq+0x180>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061de:	4b4d      	ldr	r3, [pc, #308]	; (8006314 <HAL_RCC_GetSysClockFreq+0x180>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d028      	beq.n	800623c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061ea:	4b4a      	ldr	r3, [pc, #296]	; (8006314 <HAL_RCC_GetSysClockFreq+0x180>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	099b      	lsrs	r3, r3, #6
 80061f0:	2200      	movs	r2, #0
 80061f2:	623b      	str	r3, [r7, #32]
 80061f4:	627a      	str	r2, [r7, #36]	; 0x24
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80061fc:	2100      	movs	r1, #0
 80061fe:	4b47      	ldr	r3, [pc, #284]	; (800631c <HAL_RCC_GetSysClockFreq+0x188>)
 8006200:	fb03 f201 	mul.w	r2, r3, r1
 8006204:	2300      	movs	r3, #0
 8006206:	fb00 f303 	mul.w	r3, r0, r3
 800620a:	4413      	add	r3, r2
 800620c:	4a43      	ldr	r2, [pc, #268]	; (800631c <HAL_RCC_GetSysClockFreq+0x188>)
 800620e:	fba0 1202 	umull	r1, r2, r0, r2
 8006212:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006214:	460a      	mov	r2, r1
 8006216:	62ba      	str	r2, [r7, #40]	; 0x28
 8006218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800621a:	4413      	add	r3, r2
 800621c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800621e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006220:	2200      	movs	r2, #0
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	61fa      	str	r2, [r7, #28]
 8006226:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800622a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800622e:	f7f9 ffcb 	bl	80001c8 <__aeabi_uldivmod>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4613      	mov	r3, r2
 8006238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800623a:	e053      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800623c:	4b35      	ldr	r3, [pc, #212]	; (8006314 <HAL_RCC_GetSysClockFreq+0x180>)
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	099b      	lsrs	r3, r3, #6
 8006242:	2200      	movs	r2, #0
 8006244:	613b      	str	r3, [r7, #16]
 8006246:	617a      	str	r2, [r7, #20]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800624e:	f04f 0b00 	mov.w	fp, #0
 8006252:	4652      	mov	r2, sl
 8006254:	465b      	mov	r3, fp
 8006256:	f04f 0000 	mov.w	r0, #0
 800625a:	f04f 0100 	mov.w	r1, #0
 800625e:	0159      	lsls	r1, r3, #5
 8006260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006264:	0150      	lsls	r0, r2, #5
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	ebb2 080a 	subs.w	r8, r2, sl
 800626e:	eb63 090b 	sbc.w	r9, r3, fp
 8006272:	f04f 0200 	mov.w	r2, #0
 8006276:	f04f 0300 	mov.w	r3, #0
 800627a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800627e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006282:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006286:	ebb2 0408 	subs.w	r4, r2, r8
 800628a:	eb63 0509 	sbc.w	r5, r3, r9
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	f04f 0300 	mov.w	r3, #0
 8006296:	00eb      	lsls	r3, r5, #3
 8006298:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800629c:	00e2      	lsls	r2, r4, #3
 800629e:	4614      	mov	r4, r2
 80062a0:	461d      	mov	r5, r3
 80062a2:	eb14 030a 	adds.w	r3, r4, sl
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	eb45 030b 	adc.w	r3, r5, fp
 80062ac:	607b      	str	r3, [r7, #4]
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062ba:	4629      	mov	r1, r5
 80062bc:	028b      	lsls	r3, r1, #10
 80062be:	4621      	mov	r1, r4
 80062c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062c4:	4621      	mov	r1, r4
 80062c6:	028a      	lsls	r2, r1, #10
 80062c8:	4610      	mov	r0, r2
 80062ca:	4619      	mov	r1, r3
 80062cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ce:	2200      	movs	r2, #0
 80062d0:	60bb      	str	r3, [r7, #8]
 80062d2:	60fa      	str	r2, [r7, #12]
 80062d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062d8:	f7f9 ff76 	bl	80001c8 <__aeabi_uldivmod>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	4613      	mov	r3, r2
 80062e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062e4:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <HAL_RCC_GetSysClockFreq+0x180>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	0c1b      	lsrs	r3, r3, #16
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	3301      	adds	r3, #1
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80062f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062fe:	e002      	b.n	8006306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006300:	4b05      	ldr	r3, [pc, #20]	; (8006318 <HAL_RCC_GetSysClockFreq+0x184>)
 8006302:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006308:	4618      	mov	r0, r3
 800630a:	3740      	adds	r7, #64	; 0x40
 800630c:	46bd      	mov	sp, r7
 800630e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006312:	bf00      	nop
 8006314:	40023800 	.word	0x40023800
 8006318:	00f42400 	.word	0x00f42400
 800631c:	017d7840 	.word	0x017d7840

08006320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006324:	4b03      	ldr	r3, [pc, #12]	; (8006334 <HAL_RCC_GetHCLKFreq+0x14>)
 8006326:	681b      	ldr	r3, [r3, #0]
}
 8006328:	4618      	mov	r0, r3
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	20000018 	.word	0x20000018

08006338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800633c:	f7ff fff0 	bl	8006320 <HAL_RCC_GetHCLKFreq>
 8006340:	4602      	mov	r2, r0
 8006342:	4b05      	ldr	r3, [pc, #20]	; (8006358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	0a9b      	lsrs	r3, r3, #10
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	4903      	ldr	r1, [pc, #12]	; (800635c <HAL_RCC_GetPCLK1Freq+0x24>)
 800634e:	5ccb      	ldrb	r3, [r1, r3]
 8006350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006354:	4618      	mov	r0, r3
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40023800 	.word	0x40023800
 800635c:	0800acb4 	.word	0x0800acb4

08006360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006364:	f7ff ffdc 	bl	8006320 <HAL_RCC_GetHCLKFreq>
 8006368:	4602      	mov	r2, r0
 800636a:	4b05      	ldr	r3, [pc, #20]	; (8006380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	0b5b      	lsrs	r3, r3, #13
 8006370:	f003 0307 	and.w	r3, r3, #7
 8006374:	4903      	ldr	r1, [pc, #12]	; (8006384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006376:	5ccb      	ldrb	r3, [r1, r3]
 8006378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800637c:	4618      	mov	r0, r3
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40023800 	.word	0x40023800
 8006384:	0800acb4 	.word	0x0800acb4

08006388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e07b      	b.n	8006492 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d108      	bne.n	80063b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063aa:	d009      	beq.n	80063c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	61da      	str	r2, [r3, #28]
 80063b2:	e005      	b.n	80063c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d106      	bne.n	80063e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fb fd58 	bl	8001e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006444:	ea42 0103 	orr.w	r1, r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	0c1b      	lsrs	r3, r3, #16
 800645e:	f003 0104 	and.w	r1, r3, #4
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	f003 0210 	and.w	r2, r3, #16
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006480:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e041      	b.n	8006530 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7fc f851 	bl	8002568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4619      	mov	r1, r3
 80064d8:	4610      	mov	r0, r2
 80064da:	f000 fa79 	bl	80069d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	d001      	beq.n	8006550 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e046      	b.n	80065de <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a23      	ldr	r2, [pc, #140]	; (80065ec <HAL_TIM_Base_Start+0xb4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d022      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656a:	d01d      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1f      	ldr	r2, [pc, #124]	; (80065f0 <HAL_TIM_Base_Start+0xb8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d018      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <HAL_TIM_Base_Start+0xbc>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d013      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1c      	ldr	r2, [pc, #112]	; (80065f8 <HAL_TIM_Base_Start+0xc0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00e      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1b      	ldr	r2, [pc, #108]	; (80065fc <HAL_TIM_Base_Start+0xc4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d009      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a19      	ldr	r2, [pc, #100]	; (8006600 <HAL_TIM_Base_Start+0xc8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d004      	beq.n	80065a8 <HAL_TIM_Base_Start+0x70>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a18      	ldr	r2, [pc, #96]	; (8006604 <HAL_TIM_Base_Start+0xcc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d111      	bne.n	80065cc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b06      	cmp	r3, #6
 80065b8:	d010      	beq.n	80065dc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f042 0201 	orr.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ca:	e007      	b.n	80065dc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40000400 	.word	0x40000400
 80065f4:	40000800 	.word	0x40000800
 80065f8:	40000c00 	.word	0x40000c00
 80065fc:	40010400 	.word	0x40010400
 8006600:	40014000 	.word	0x40014000
 8006604:	40001800 	.word	0x40001800

08006608 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e041      	b.n	800669e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f839 	bl	80066a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3304      	adds	r3, #4
 8006644:	4619      	mov	r1, r3
 8006646:	4610      	mov	r0, r2
 8006648:	f000 f9c2 	bl	80069d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e0ae      	b.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b0c      	cmp	r3, #12
 80066e6:	f200 809f 	bhi.w	8006828 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066ea:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006725 	.word	0x08006725
 80066f4:	08006829 	.word	0x08006829
 80066f8:	08006829 	.word	0x08006829
 80066fc:	08006829 	.word	0x08006829
 8006700:	08006765 	.word	0x08006765
 8006704:	08006829 	.word	0x08006829
 8006708:	08006829 	.word	0x08006829
 800670c:	08006829 	.word	0x08006829
 8006710:	080067a7 	.word	0x080067a7
 8006714:	08006829 	.word	0x08006829
 8006718:	08006829 	.word	0x08006829
 800671c:	08006829 	.word	0x08006829
 8006720:	080067e7 	.word	0x080067e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	4618      	mov	r0, r3
 800672c:	f000 f9f0 	bl	8006b10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0208 	orr.w	r2, r2, #8
 800673e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0204 	bic.w	r2, r2, #4
 800674e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6999      	ldr	r1, [r3, #24]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	619a      	str	r2, [r3, #24]
      break;
 8006762:	e064      	b.n	800682e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fa40 	bl	8006bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800677e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800678e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6999      	ldr	r1, [r3, #24]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	021a      	lsls	r2, r3, #8
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	619a      	str	r2, [r3, #24]
      break;
 80067a4:	e043      	b.n	800682e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fa95 	bl	8006cdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69da      	ldr	r2, [r3, #28]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0208 	orr.w	r2, r2, #8
 80067c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69da      	ldr	r2, [r3, #28]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0204 	bic.w	r2, r2, #4
 80067d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69d9      	ldr	r1, [r3, #28]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	61da      	str	r2, [r3, #28]
      break;
 80067e4:	e023      	b.n	800682e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 fae9 	bl	8006dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69da      	ldr	r2, [r3, #28]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69d9      	ldr	r1, [r3, #28]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	021a      	lsls	r2, r3, #8
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	61da      	str	r2, [r3, #28]
      break;
 8006826:	e002      	b.n	800682e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	75fb      	strb	r3, [r7, #23]
      break;
 800682c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006836:	7dfb      	ldrb	r3, [r7, #23]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <HAL_TIM_ConfigClockSource+0x1c>
 8006858:	2302      	movs	r3, #2
 800685a:	e0b4      	b.n	80069c6 <HAL_TIM_ConfigClockSource+0x186>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800687a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006894:	d03e      	beq.n	8006914 <HAL_TIM_ConfigClockSource+0xd4>
 8006896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689a:	f200 8087 	bhi.w	80069ac <HAL_TIM_ConfigClockSource+0x16c>
 800689e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a2:	f000 8086 	beq.w	80069b2 <HAL_TIM_ConfigClockSource+0x172>
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068aa:	d87f      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x16c>
 80068ac:	2b70      	cmp	r3, #112	; 0x70
 80068ae:	d01a      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0xa6>
 80068b0:	2b70      	cmp	r3, #112	; 0x70
 80068b2:	d87b      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x16c>
 80068b4:	2b60      	cmp	r3, #96	; 0x60
 80068b6:	d050      	beq.n	800695a <HAL_TIM_ConfigClockSource+0x11a>
 80068b8:	2b60      	cmp	r3, #96	; 0x60
 80068ba:	d877      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x16c>
 80068bc:	2b50      	cmp	r3, #80	; 0x50
 80068be:	d03c      	beq.n	800693a <HAL_TIM_ConfigClockSource+0xfa>
 80068c0:	2b50      	cmp	r3, #80	; 0x50
 80068c2:	d873      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x16c>
 80068c4:	2b40      	cmp	r3, #64	; 0x40
 80068c6:	d058      	beq.n	800697a <HAL_TIM_ConfigClockSource+0x13a>
 80068c8:	2b40      	cmp	r3, #64	; 0x40
 80068ca:	d86f      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x16c>
 80068cc:	2b30      	cmp	r3, #48	; 0x30
 80068ce:	d064      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x15a>
 80068d0:	2b30      	cmp	r3, #48	; 0x30
 80068d2:	d86b      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x16c>
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d060      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x15a>
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d867      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x16c>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d05c      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x15a>
 80068e0:	2b10      	cmp	r3, #16
 80068e2:	d05a      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x15a>
 80068e4:	e062      	b.n	80069ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6899      	ldr	r1, [r3, #8]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f000 fb35 	bl	8006f64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	609a      	str	r2, [r3, #8]
      break;
 8006912:	e04f      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	6899      	ldr	r1, [r3, #8]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f000 fb1e 	bl	8006f64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006936:	609a      	str	r2, [r3, #8]
      break;
 8006938:	e03c      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6818      	ldr	r0, [r3, #0]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	6859      	ldr	r1, [r3, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	461a      	mov	r2, r3
 8006948:	f000 fa92 	bl	8006e70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2150      	movs	r1, #80	; 0x50
 8006952:	4618      	mov	r0, r3
 8006954:	f000 faeb 	bl	8006f2e <TIM_ITRx_SetConfig>
      break;
 8006958:	e02c      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6818      	ldr	r0, [r3, #0]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	6859      	ldr	r1, [r3, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	461a      	mov	r2, r3
 8006968:	f000 fab1 	bl	8006ece <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2160      	movs	r1, #96	; 0x60
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fadb 	bl	8006f2e <TIM_ITRx_SetConfig>
      break;
 8006978:	e01c      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	6859      	ldr	r1, [r3, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	461a      	mov	r2, r3
 8006988:	f000 fa72 	bl	8006e70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2140      	movs	r1, #64	; 0x40
 8006992:	4618      	mov	r0, r3
 8006994:	f000 facb 	bl	8006f2e <TIM_ITRx_SetConfig>
      break;
 8006998:	e00c      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4619      	mov	r1, r3
 80069a4:	4610      	mov	r0, r2
 80069a6:	f000 fac2 	bl	8006f2e <TIM_ITRx_SetConfig>
      break;
 80069aa:	e003      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]
      break;
 80069b0:	e000      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a40      	ldr	r2, [pc, #256]	; (8006ae4 <TIM_Base_SetConfig+0x114>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d013      	beq.n	8006a10 <TIM_Base_SetConfig+0x40>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ee:	d00f      	beq.n	8006a10 <TIM_Base_SetConfig+0x40>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a3d      	ldr	r2, [pc, #244]	; (8006ae8 <TIM_Base_SetConfig+0x118>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00b      	beq.n	8006a10 <TIM_Base_SetConfig+0x40>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a3c      	ldr	r2, [pc, #240]	; (8006aec <TIM_Base_SetConfig+0x11c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d007      	beq.n	8006a10 <TIM_Base_SetConfig+0x40>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a3b      	ldr	r2, [pc, #236]	; (8006af0 <TIM_Base_SetConfig+0x120>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_Base_SetConfig+0x40>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a3a      	ldr	r2, [pc, #232]	; (8006af4 <TIM_Base_SetConfig+0x124>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d108      	bne.n	8006a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a2f      	ldr	r2, [pc, #188]	; (8006ae4 <TIM_Base_SetConfig+0x114>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d02b      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a30:	d027      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a2c      	ldr	r2, [pc, #176]	; (8006ae8 <TIM_Base_SetConfig+0x118>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d023      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a2b      	ldr	r2, [pc, #172]	; (8006aec <TIM_Base_SetConfig+0x11c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d01f      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a2a      	ldr	r2, [pc, #168]	; (8006af0 <TIM_Base_SetConfig+0x120>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d01b      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a29      	ldr	r2, [pc, #164]	; (8006af4 <TIM_Base_SetConfig+0x124>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d017      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a28      	ldr	r2, [pc, #160]	; (8006af8 <TIM_Base_SetConfig+0x128>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d013      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a27      	ldr	r2, [pc, #156]	; (8006afc <TIM_Base_SetConfig+0x12c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00f      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a26      	ldr	r2, [pc, #152]	; (8006b00 <TIM_Base_SetConfig+0x130>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00b      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a25      	ldr	r2, [pc, #148]	; (8006b04 <TIM_Base_SetConfig+0x134>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d007      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a24      	ldr	r2, [pc, #144]	; (8006b08 <TIM_Base_SetConfig+0x138>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d003      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a23      	ldr	r2, [pc, #140]	; (8006b0c <TIM_Base_SetConfig+0x13c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d108      	bne.n	8006a94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a0a      	ldr	r2, [pc, #40]	; (8006ae4 <TIM_Base_SetConfig+0x114>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d003      	beq.n	8006ac8 <TIM_Base_SetConfig+0xf8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a0c      	ldr	r2, [pc, #48]	; (8006af4 <TIM_Base_SetConfig+0x124>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d103      	bne.n	8006ad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	691a      	ldr	r2, [r3, #16]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	615a      	str	r2, [r3, #20]
}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40000400 	.word	0x40000400
 8006aec:	40000800 	.word	0x40000800
 8006af0:	40000c00 	.word	0x40000c00
 8006af4:	40010400 	.word	0x40010400
 8006af8:	40014000 	.word	0x40014000
 8006afc:	40014400 	.word	0x40014400
 8006b00:	40014800 	.word	0x40014800
 8006b04:	40001800 	.word	0x40001800
 8006b08:	40001c00 	.word	0x40001c00
 8006b0c:	40002000 	.word	0x40002000

08006b10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	f023 0201 	bic.w	r2, r3, #1
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0303 	bic.w	r3, r3, #3
 8006b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f023 0302 	bic.w	r3, r3, #2
 8006b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a20      	ldr	r2, [pc, #128]	; (8006be8 <TIM_OC1_SetConfig+0xd8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d003      	beq.n	8006b74 <TIM_OC1_SetConfig+0x64>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a1f      	ldr	r2, [pc, #124]	; (8006bec <TIM_OC1_SetConfig+0xdc>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d10c      	bne.n	8006b8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f023 0308 	bic.w	r3, r3, #8
 8006b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f023 0304 	bic.w	r3, r3, #4
 8006b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a15      	ldr	r2, [pc, #84]	; (8006be8 <TIM_OC1_SetConfig+0xd8>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_OC1_SetConfig+0x8e>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a14      	ldr	r2, [pc, #80]	; (8006bec <TIM_OC1_SetConfig+0xdc>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d111      	bne.n	8006bc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	621a      	str	r2, [r3, #32]
}
 8006bdc:	bf00      	nop
 8006bde:	371c      	adds	r7, #28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	40010000 	.word	0x40010000
 8006bec:	40010400 	.word	0x40010400

08006bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	f023 0210 	bic.w	r2, r3, #16
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f023 0320 	bic.w	r3, r3, #32
 8006c3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a22      	ldr	r2, [pc, #136]	; (8006cd4 <TIM_OC2_SetConfig+0xe4>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d003      	beq.n	8006c58 <TIM_OC2_SetConfig+0x68>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a21      	ldr	r2, [pc, #132]	; (8006cd8 <TIM_OC2_SetConfig+0xe8>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d10d      	bne.n	8006c74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a17      	ldr	r2, [pc, #92]	; (8006cd4 <TIM_OC2_SetConfig+0xe4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_OC2_SetConfig+0x94>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a16      	ldr	r2, [pc, #88]	; (8006cd8 <TIM_OC2_SetConfig+0xe8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d113      	bne.n	8006cac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40010000 	.word	0x40010000
 8006cd8:	40010400 	.word	0x40010400

08006cdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0303 	bic.w	r3, r3, #3
 8006d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a21      	ldr	r2, [pc, #132]	; (8006dbc <TIM_OC3_SetConfig+0xe0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d003      	beq.n	8006d42 <TIM_OC3_SetConfig+0x66>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a20      	ldr	r2, [pc, #128]	; (8006dc0 <TIM_OC3_SetConfig+0xe4>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d10d      	bne.n	8006d5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	021b      	lsls	r3, r3, #8
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a16      	ldr	r2, [pc, #88]	; (8006dbc <TIM_OC3_SetConfig+0xe0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d003      	beq.n	8006d6e <TIM_OC3_SetConfig+0x92>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a15      	ldr	r2, [pc, #84]	; (8006dc0 <TIM_OC3_SetConfig+0xe4>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d113      	bne.n	8006d96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	621a      	str	r2, [r3, #32]
}
 8006db0:	bf00      	nop
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	40010000 	.word	0x40010000
 8006dc0:	40010400 	.word	0x40010400

08006dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	021b      	lsls	r3, r3, #8
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	031b      	lsls	r3, r3, #12
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a12      	ldr	r2, [pc, #72]	; (8006e68 <TIM_OC4_SetConfig+0xa4>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d003      	beq.n	8006e2c <TIM_OC4_SetConfig+0x68>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a11      	ldr	r2, [pc, #68]	; (8006e6c <TIM_OC4_SetConfig+0xa8>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d109      	bne.n	8006e40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	019b      	lsls	r3, r3, #6
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40010400 	.word	0x40010400

08006e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f023 0201 	bic.w	r2, r3, #1
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f023 030a 	bic.w	r3, r3, #10
 8006eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b087      	sub	sp, #28
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	f023 0210 	bic.w	r2, r3, #16
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ef8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	031b      	lsls	r3, r3, #12
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b085      	sub	sp, #20
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	f043 0307 	orr.w	r3, r3, #7
 8006f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	609a      	str	r2, [r3, #8]
}
 8006f58:	bf00      	nop
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	021a      	lsls	r2, r3, #8
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	609a      	str	r2, [r3, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	371c      	adds	r7, #28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e05a      	b.n	8007072 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a21      	ldr	r2, [pc, #132]	; (8007080 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d022      	beq.n	8007046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007008:	d01d      	beq.n	8007046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1d      	ldr	r2, [pc, #116]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d018      	beq.n	8007046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1b      	ldr	r2, [pc, #108]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d013      	beq.n	8007046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a1a      	ldr	r2, [pc, #104]	; (800708c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00e      	beq.n	8007046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a18      	ldr	r2, [pc, #96]	; (8007090 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d009      	beq.n	8007046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a17      	ldr	r2, [pc, #92]	; (8007094 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d004      	beq.n	8007046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a15      	ldr	r2, [pc, #84]	; (8007098 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d10c      	bne.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800704c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	4313      	orrs	r3, r2
 8007056:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40010000 	.word	0x40010000
 8007084:	40000400 	.word	0x40000400
 8007088:	40000800 	.word	0x40000800
 800708c:	40000c00 	.word	0x40000c00
 8007090:	40010400 	.word	0x40010400
 8007094:	40014000 	.word	0x40014000
 8007098:	40001800 	.word	0x40001800

0800709c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e03d      	b.n	8007134 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e03f      	b.n	80071d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fb fbc2 	bl	80028f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2224      	movs	r2, #36	; 0x24
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fc67 	bl	8007a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	695a      	ldr	r2, [r3, #20]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68da      	ldr	r2, [r3, #12]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2220      	movs	r2, #32
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b0ba      	sub	sp, #232	; 0xe8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007202:	2300      	movs	r3, #0
 8007204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007208:	2300      	movs	r3, #0
 800720a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800720e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800721a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10f      	bne.n	8007242 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <HAL_UART_IRQHandler+0x66>
 800722e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fb51 	bl	80078e2 <UART_Receive_IT>
      return;
 8007240:	e256      	b.n	80076f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 80de 	beq.w	8007408 <HAL_UART_IRQHandler+0x22c>
 800724c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d106      	bne.n	8007266 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800725c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 80d1 	beq.w	8007408 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00b      	beq.n	800728a <HAL_UART_IRQHandler+0xae>
 8007272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	f043 0201 	orr.w	r2, r3, #1
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800728a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00b      	beq.n	80072ae <HAL_UART_IRQHandler+0xd2>
 8007296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d005      	beq.n	80072ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	f043 0202 	orr.w	r2, r3, #2
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00b      	beq.n	80072d2 <HAL_UART_IRQHandler+0xf6>
 80072ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	f043 0204 	orr.w	r2, r3, #4
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d011      	beq.n	8007302 <HAL_UART_IRQHandler+0x126>
 80072de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d105      	bne.n	80072f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f043 0208 	orr.w	r2, r3, #8
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 81ed 	beq.w	80076e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800730c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007310:	f003 0320 	and.w	r3, r3, #32
 8007314:	2b00      	cmp	r3, #0
 8007316:	d008      	beq.n	800732a <HAL_UART_IRQHandler+0x14e>
 8007318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800731c:	f003 0320 	and.w	r3, r3, #32
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fadc 	bl	80078e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	bf0c      	ite	eq
 8007338:	2301      	moveq	r3, #1
 800733a:	2300      	movne	r3, #0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f003 0308 	and.w	r3, r3, #8
 800734a:	2b00      	cmp	r3, #0
 800734c:	d103      	bne.n	8007356 <HAL_UART_IRQHandler+0x17a>
 800734e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007352:	2b00      	cmp	r3, #0
 8007354:	d04f      	beq.n	80073f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f9e4 	bl	8007724 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	d141      	bne.n	80073ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3314      	adds	r3, #20
 8007370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3314      	adds	r3, #20
 8007392:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007396:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800739a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1d9      	bne.n	800736a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d013      	beq.n	80073e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	4a7d      	ldr	r2, [pc, #500]	; (80075b8 <HAL_UART_IRQHandler+0x3dc>)
 80073c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fc fce8 	bl	8003da0 <HAL_DMA_Abort_IT>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d016      	beq.n	8007404 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e4:	e00e      	b.n	8007404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f986 	bl	80076f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ec:	e00a      	b.n	8007404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f982 	bl	80076f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f4:	e006      	b.n	8007404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f97e 	bl	80076f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007402:	e170      	b.n	80076e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007404:	bf00      	nop
    return;
 8007406:	e16e      	b.n	80076e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	2b01      	cmp	r3, #1
 800740e:	f040 814a 	bne.w	80076a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007416:	f003 0310 	and.w	r3, r3, #16
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 8143 	beq.w	80076a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007424:	f003 0310 	and.w	r3, r3, #16
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 813c 	beq.w	80076a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800742e:	2300      	movs	r3, #0
 8007430:	60bb      	str	r3, [r7, #8]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60bb      	str	r3, [r7, #8]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	60bb      	str	r3, [r7, #8]
 8007442:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744e:	2b40      	cmp	r3, #64	; 0x40
 8007450:	f040 80b4 	bne.w	80075bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007460:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 8140 	beq.w	80076ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800746e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007472:	429a      	cmp	r2, r3
 8007474:	f080 8139 	bcs.w	80076ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800747e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800748a:	f000 8088 	beq.w	800759e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	330c      	adds	r3, #12
 8007494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800749c:	e853 3f00 	ldrex	r3, [r3]
 80074a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	330c      	adds	r3, #12
 80074b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80074ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074ca:	e841 2300 	strex	r3, r2, [r1]
 80074ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1d9      	bne.n	800748e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3314      	adds	r3, #20
 80074e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074ec:	f023 0301 	bic.w	r3, r3, #1
 80074f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3314      	adds	r3, #20
 80074fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007502:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007506:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e1      	bne.n	80074da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3314      	adds	r3, #20
 800751c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800752c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3314      	adds	r3, #20
 8007536:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800753a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800753c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007540:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e3      	bne.n	8007516 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	330c      	adds	r3, #12
 8007562:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800756c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800756e:	f023 0310 	bic.w	r3, r3, #16
 8007572:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	330c      	adds	r3, #12
 800757c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007580:	65ba      	str	r2, [r7, #88]	; 0x58
 8007582:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007586:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800758e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e3      	bne.n	800755c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	4618      	mov	r0, r3
 800759a:	f7fc fb91 	bl	8003cc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f8ac 	bl	800770c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075b4:	e099      	b.n	80076ea <HAL_UART_IRQHandler+0x50e>
 80075b6:	bf00      	nop
 80075b8:	080077eb 	.word	0x080077eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 808b 	beq.w	80076ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80075d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8086 	beq.w	80076ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	330c      	adds	r3, #12
 80075e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	330c      	adds	r3, #12
 8007602:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007606:	647a      	str	r2, [r7, #68]	; 0x44
 8007608:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800760c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e3      	bne.n	80075e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3314      	adds	r3, #20
 8007620:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	623b      	str	r3, [r7, #32]
   return(result);
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	f023 0301 	bic.w	r3, r3, #1
 8007630:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3314      	adds	r3, #20
 800763a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800763e:	633a      	str	r2, [r7, #48]	; 0x30
 8007640:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e3      	bne.n	800761a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2220      	movs	r2, #32
 8007656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	330c      	adds	r3, #12
 8007666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	e853 3f00 	ldrex	r3, [r3]
 800766e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0310 	bic.w	r3, r3, #16
 8007676:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	330c      	adds	r3, #12
 8007680:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007684:	61fa      	str	r2, [r7, #28]
 8007686:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007688:	69b9      	ldr	r1, [r7, #24]
 800768a:	69fa      	ldr	r2, [r7, #28]
 800768c:	e841 2300 	strex	r3, r2, [r1]
 8007690:	617b      	str	r3, [r7, #20]
   return(result);
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e3      	bne.n	8007660 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f834 	bl	800770c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076a4:	e023      	b.n	80076ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d009      	beq.n	80076c6 <HAL_UART_IRQHandler+0x4ea>
 80076b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f8a7 	bl	8007812 <UART_Transmit_IT>
    return;
 80076c4:	e014      	b.n	80076f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00e      	beq.n	80076f0 <HAL_UART_IRQHandler+0x514>
 80076d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d008      	beq.n	80076f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f8e7 	bl	80078b2 <UART_EndTransmit_IT>
    return;
 80076e4:	e004      	b.n	80076f0 <HAL_UART_IRQHandler+0x514>
    return;
 80076e6:	bf00      	nop
 80076e8:	e002      	b.n	80076f0 <HAL_UART_IRQHandler+0x514>
      return;
 80076ea:	bf00      	nop
 80076ec:	e000      	b.n	80076f0 <HAL_UART_IRQHandler+0x514>
      return;
 80076ee:	bf00      	nop
  }
}
 80076f0:	37e8      	adds	r7, #232	; 0xe8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop

080076f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007724:	b480      	push	{r7}
 8007726:	b095      	sub	sp, #84	; 0x54
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	330c      	adds	r3, #12
 8007732:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	330c      	adds	r3, #12
 800774a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800774c:	643a      	str	r2, [r7, #64]	; 0x40
 800774e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007752:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e5      	bne.n	800772c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3314      	adds	r3, #20
 8007766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	f023 0301 	bic.w	r3, r3, #1
 8007776:	64bb      	str	r3, [r7, #72]	; 0x48
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3314      	adds	r3, #20
 800777e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007780:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e5      	bne.n	8007760 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	2b01      	cmp	r3, #1
 800779a:	d119      	bne.n	80077d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	330c      	adds	r3, #12
 80077a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f023 0310 	bic.w	r3, r3, #16
 80077b2:	647b      	str	r3, [r7, #68]	; 0x44
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	330c      	adds	r3, #12
 80077ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077bc:	61ba      	str	r2, [r7, #24]
 80077be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6979      	ldr	r1, [r7, #20]
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	613b      	str	r3, [r7, #16]
   return(result);
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e5      	bne.n	800779c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077de:	bf00      	nop
 80077e0:	3754      	adds	r7, #84	; 0x54
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f7ff ff77 	bl	80076f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007812:	b480      	push	{r7}
 8007814:	b085      	sub	sp, #20
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b21      	cmp	r3, #33	; 0x21
 8007824:	d13e      	bne.n	80078a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800782e:	d114      	bne.n	800785a <UART_Transmit_IT+0x48>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d110      	bne.n	800785a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800784c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	1c9a      	adds	r2, r3, #2
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	621a      	str	r2, [r3, #32]
 8007858:	e008      	b.n	800786c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	1c59      	adds	r1, r3, #1
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	6211      	str	r1, [r2, #32]
 8007864:	781a      	ldrb	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007870:	b29b      	uxth	r3, r3
 8007872:	3b01      	subs	r3, #1
 8007874:	b29b      	uxth	r3, r3
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	4619      	mov	r1, r3
 800787a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10f      	bne.n	80078a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800788e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800789e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	e000      	b.n	80078a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078a4:	2302      	movs	r3, #2
  }
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7f9 f94e 	bl	8000b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b08c      	sub	sp, #48	; 0x30
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b22      	cmp	r3, #34	; 0x22
 80078f4:	f040 80ab 	bne.w	8007a4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007900:	d117      	bne.n	8007932 <UART_Receive_IT+0x50>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d113      	bne.n	8007932 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800790a:	2300      	movs	r3, #0
 800790c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007912:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	b29b      	uxth	r3, r3
 800791c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007920:	b29a      	uxth	r2, r3
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792a:	1c9a      	adds	r2, r3, #2
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	629a      	str	r2, [r3, #40]	; 0x28
 8007930:	e026      	b.n	8007980 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007936:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007938:	2300      	movs	r3, #0
 800793a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007944:	d007      	beq.n	8007956 <UART_Receive_IT+0x74>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <UART_Receive_IT+0x82>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d106      	bne.n	8007964 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	b2da      	uxtb	r2, r3
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	701a      	strb	r2, [r3, #0]
 8007962:	e008      	b.n	8007976 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	b2db      	uxtb	r3, r3
 800796c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007970:	b2da      	uxtb	r2, r3
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007984:	b29b      	uxth	r3, r3
 8007986:	3b01      	subs	r3, #1
 8007988:	b29b      	uxth	r3, r3
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	4619      	mov	r1, r3
 800798e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007990:	2b00      	cmp	r3, #0
 8007992:	d15a      	bne.n	8007a4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68da      	ldr	r2, [r3, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0220 	bic.w	r2, r2, #32
 80079a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68da      	ldr	r2, [r3, #12]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	695a      	ldr	r2, [r3, #20]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0201 	bic.w	r2, r2, #1
 80079c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d135      	bne.n	8007a40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	330c      	adds	r3, #12
 80079e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	613b      	str	r3, [r7, #16]
   return(result);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f023 0310 	bic.w	r3, r3, #16
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fa:	623a      	str	r2, [r7, #32]
 80079fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	69f9      	ldr	r1, [r7, #28]
 8007a00:	6a3a      	ldr	r2, [r7, #32]
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e5      	bne.n	80079da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0310 	and.w	r3, r3, #16
 8007a18:	2b10      	cmp	r3, #16
 8007a1a:	d10a      	bne.n	8007a32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff fe67 	bl	800770c <HAL_UARTEx_RxEventCallback>
 8007a3e:	e002      	b.n	8007a46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7f9 f8ad 	bl	8000ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	e002      	b.n	8007a50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e000      	b.n	8007a50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a4e:	2302      	movs	r3, #2
  }
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3730      	adds	r7, #48	; 0x30
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a5c:	b0c0      	sub	sp, #256	; 0x100
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a74:	68d9      	ldr	r1, [r3, #12]
 8007a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	ea40 0301 	orr.w	r3, r0, r1
 8007a80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	431a      	orrs	r2, r3
 8007a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ab0:	f021 010c 	bic.w	r1, r1, #12
 8007ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007abe:	430b      	orrs	r3, r1
 8007ac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad2:	6999      	ldr	r1, [r3, #24]
 8007ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	ea40 0301 	orr.w	r3, r0, r1
 8007ade:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	4b8f      	ldr	r3, [pc, #572]	; (8007d24 <UART_SetConfig+0x2cc>)
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d005      	beq.n	8007af8 <UART_SetConfig+0xa0>
 8007aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4b8d      	ldr	r3, [pc, #564]	; (8007d28 <UART_SetConfig+0x2d0>)
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d104      	bne.n	8007b02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007af8:	f7fe fc32 	bl	8006360 <HAL_RCC_GetPCLK2Freq>
 8007afc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b00:	e003      	b.n	8007b0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b02:	f7fe fc19 	bl	8006338 <HAL_RCC_GetPCLK1Freq>
 8007b06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b14:	f040 810c 	bne.w	8007d30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b2a:	4622      	mov	r2, r4
 8007b2c:	462b      	mov	r3, r5
 8007b2e:	1891      	adds	r1, r2, r2
 8007b30:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b32:	415b      	adcs	r3, r3
 8007b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	eb12 0801 	adds.w	r8, r2, r1
 8007b40:	4629      	mov	r1, r5
 8007b42:	eb43 0901 	adc.w	r9, r3, r1
 8007b46:	f04f 0200 	mov.w	r2, #0
 8007b4a:	f04f 0300 	mov.w	r3, #0
 8007b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b5a:	4690      	mov	r8, r2
 8007b5c:	4699      	mov	r9, r3
 8007b5e:	4623      	mov	r3, r4
 8007b60:	eb18 0303 	adds.w	r3, r8, r3
 8007b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b68:	462b      	mov	r3, r5
 8007b6a:	eb49 0303 	adc.w	r3, r9, r3
 8007b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b86:	460b      	mov	r3, r1
 8007b88:	18db      	adds	r3, r3, r3
 8007b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	eb42 0303 	adc.w	r3, r2, r3
 8007b92:	657b      	str	r3, [r7, #84]	; 0x54
 8007b94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b9c:	f7f8 fb14 	bl	80001c8 <__aeabi_uldivmod>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4b61      	ldr	r3, [pc, #388]	; (8007d2c <UART_SetConfig+0x2d4>)
 8007ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8007baa:	095b      	lsrs	r3, r3, #5
 8007bac:	011c      	lsls	r4, r3, #4
 8007bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007bbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	1891      	adds	r1, r2, r2
 8007bc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007bc8:	415b      	adcs	r3, r3
 8007bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007bd0:	4641      	mov	r1, r8
 8007bd2:	eb12 0a01 	adds.w	sl, r2, r1
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	eb43 0b01 	adc.w	fp, r3, r1
 8007bdc:	f04f 0200 	mov.w	r2, #0
 8007be0:	f04f 0300 	mov.w	r3, #0
 8007be4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007be8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bf0:	4692      	mov	sl, r2
 8007bf2:	469b      	mov	fp, r3
 8007bf4:	4643      	mov	r3, r8
 8007bf6:	eb1a 0303 	adds.w	r3, sl, r3
 8007bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bfe:	464b      	mov	r3, r9
 8007c00:	eb4b 0303 	adc.w	r3, fp, r3
 8007c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	18db      	adds	r3, r3, r3
 8007c20:	643b      	str	r3, [r7, #64]	; 0x40
 8007c22:	4613      	mov	r3, r2
 8007c24:	eb42 0303 	adc.w	r3, r2, r3
 8007c28:	647b      	str	r3, [r7, #68]	; 0x44
 8007c2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c32:	f7f8 fac9 	bl	80001c8 <__aeabi_uldivmod>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	4b3b      	ldr	r3, [pc, #236]	; (8007d2c <UART_SetConfig+0x2d4>)
 8007c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c42:	095b      	lsrs	r3, r3, #5
 8007c44:	2264      	movs	r2, #100	; 0x64
 8007c46:	fb02 f303 	mul.w	r3, r2, r3
 8007c4a:	1acb      	subs	r3, r1, r3
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c52:	4b36      	ldr	r3, [pc, #216]	; (8007d2c <UART_SetConfig+0x2d4>)
 8007c54:	fba3 2302 	umull	r2, r3, r3, r2
 8007c58:	095b      	lsrs	r3, r3, #5
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c60:	441c      	add	r4, r3
 8007c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c74:	4642      	mov	r2, r8
 8007c76:	464b      	mov	r3, r9
 8007c78:	1891      	adds	r1, r2, r2
 8007c7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c7c:	415b      	adcs	r3, r3
 8007c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c84:	4641      	mov	r1, r8
 8007c86:	1851      	adds	r1, r2, r1
 8007c88:	6339      	str	r1, [r7, #48]	; 0x30
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	414b      	adcs	r3, r1
 8007c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c90:	f04f 0200 	mov.w	r2, #0
 8007c94:	f04f 0300 	mov.w	r3, #0
 8007c98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c9c:	4659      	mov	r1, fp
 8007c9e:	00cb      	lsls	r3, r1, #3
 8007ca0:	4651      	mov	r1, sl
 8007ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ca6:	4651      	mov	r1, sl
 8007ca8:	00ca      	lsls	r2, r1, #3
 8007caa:	4610      	mov	r0, r2
 8007cac:	4619      	mov	r1, r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	4642      	mov	r2, r8
 8007cb2:	189b      	adds	r3, r3, r2
 8007cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cb8:	464b      	mov	r3, r9
 8007cba:	460a      	mov	r2, r1
 8007cbc:	eb42 0303 	adc.w	r3, r2, r3
 8007cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007cd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007cd8:	460b      	mov	r3, r1
 8007cda:	18db      	adds	r3, r3, r3
 8007cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cde:	4613      	mov	r3, r2
 8007ce0:	eb42 0303 	adc.w	r3, r2, r3
 8007ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007cee:	f7f8 fa6b 	bl	80001c8 <__aeabi_uldivmod>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4b0d      	ldr	r3, [pc, #52]	; (8007d2c <UART_SetConfig+0x2d4>)
 8007cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	2164      	movs	r1, #100	; 0x64
 8007d00:	fb01 f303 	mul.w	r3, r1, r3
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	3332      	adds	r3, #50	; 0x32
 8007d0a:	4a08      	ldr	r2, [pc, #32]	; (8007d2c <UART_SetConfig+0x2d4>)
 8007d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d10:	095b      	lsrs	r3, r3, #5
 8007d12:	f003 0207 	and.w	r2, r3, #7
 8007d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4422      	add	r2, r4
 8007d1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d20:	e105      	b.n	8007f2e <UART_SetConfig+0x4d6>
 8007d22:	bf00      	nop
 8007d24:	40011000 	.word	0x40011000
 8007d28:	40011400 	.word	0x40011400
 8007d2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d34:	2200      	movs	r2, #0
 8007d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d42:	4642      	mov	r2, r8
 8007d44:	464b      	mov	r3, r9
 8007d46:	1891      	adds	r1, r2, r2
 8007d48:	6239      	str	r1, [r7, #32]
 8007d4a:	415b      	adcs	r3, r3
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d52:	4641      	mov	r1, r8
 8007d54:	1854      	adds	r4, r2, r1
 8007d56:	4649      	mov	r1, r9
 8007d58:	eb43 0501 	adc.w	r5, r3, r1
 8007d5c:	f04f 0200 	mov.w	r2, #0
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	00eb      	lsls	r3, r5, #3
 8007d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d6a:	00e2      	lsls	r2, r4, #3
 8007d6c:	4614      	mov	r4, r2
 8007d6e:	461d      	mov	r5, r3
 8007d70:	4643      	mov	r3, r8
 8007d72:	18e3      	adds	r3, r4, r3
 8007d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d78:	464b      	mov	r3, r9
 8007d7a:	eb45 0303 	adc.w	r3, r5, r3
 8007d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d92:	f04f 0200 	mov.w	r2, #0
 8007d96:	f04f 0300 	mov.w	r3, #0
 8007d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d9e:	4629      	mov	r1, r5
 8007da0:	008b      	lsls	r3, r1, #2
 8007da2:	4621      	mov	r1, r4
 8007da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007da8:	4621      	mov	r1, r4
 8007daa:	008a      	lsls	r2, r1, #2
 8007dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007db0:	f7f8 fa0a 	bl	80001c8 <__aeabi_uldivmod>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4b60      	ldr	r3, [pc, #384]	; (8007f3c <UART_SetConfig+0x4e4>)
 8007dba:	fba3 2302 	umull	r2, r3, r3, r2
 8007dbe:	095b      	lsrs	r3, r3, #5
 8007dc0:	011c      	lsls	r4, r3, #4
 8007dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007dd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	1891      	adds	r1, r2, r2
 8007dda:	61b9      	str	r1, [r7, #24]
 8007ddc:	415b      	adcs	r3, r3
 8007dde:	61fb      	str	r3, [r7, #28]
 8007de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007de4:	4641      	mov	r1, r8
 8007de6:	1851      	adds	r1, r2, r1
 8007de8:	6139      	str	r1, [r7, #16]
 8007dea:	4649      	mov	r1, r9
 8007dec:	414b      	adcs	r3, r1
 8007dee:	617b      	str	r3, [r7, #20]
 8007df0:	f04f 0200 	mov.w	r2, #0
 8007df4:	f04f 0300 	mov.w	r3, #0
 8007df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dfc:	4659      	mov	r1, fp
 8007dfe:	00cb      	lsls	r3, r1, #3
 8007e00:	4651      	mov	r1, sl
 8007e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e06:	4651      	mov	r1, sl
 8007e08:	00ca      	lsls	r2, r1, #3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4603      	mov	r3, r0
 8007e10:	4642      	mov	r2, r8
 8007e12:	189b      	adds	r3, r3, r2
 8007e14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e18:	464b      	mov	r3, r9
 8007e1a:	460a      	mov	r2, r1
 8007e1c:	eb42 0303 	adc.w	r3, r2, r3
 8007e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e30:	f04f 0200 	mov.w	r2, #0
 8007e34:	f04f 0300 	mov.w	r3, #0
 8007e38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	008b      	lsls	r3, r1, #2
 8007e40:	4641      	mov	r1, r8
 8007e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e46:	4641      	mov	r1, r8
 8007e48:	008a      	lsls	r2, r1, #2
 8007e4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e4e:	f7f8 f9bb 	bl	80001c8 <__aeabi_uldivmod>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4b39      	ldr	r3, [pc, #228]	; (8007f3c <UART_SetConfig+0x4e4>)
 8007e58:	fba3 1302 	umull	r1, r3, r3, r2
 8007e5c:	095b      	lsrs	r3, r3, #5
 8007e5e:	2164      	movs	r1, #100	; 0x64
 8007e60:	fb01 f303 	mul.w	r3, r1, r3
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	011b      	lsls	r3, r3, #4
 8007e68:	3332      	adds	r3, #50	; 0x32
 8007e6a:	4a34      	ldr	r2, [pc, #208]	; (8007f3c <UART_SetConfig+0x4e4>)
 8007e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e70:	095b      	lsrs	r3, r3, #5
 8007e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e76:	441c      	add	r4, r3
 8007e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8007e80:	677a      	str	r2, [r7, #116]	; 0x74
 8007e82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e86:	4642      	mov	r2, r8
 8007e88:	464b      	mov	r3, r9
 8007e8a:	1891      	adds	r1, r2, r2
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	415b      	adcs	r3, r3
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e96:	4641      	mov	r1, r8
 8007e98:	1851      	adds	r1, r2, r1
 8007e9a:	6039      	str	r1, [r7, #0]
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	414b      	adcs	r3, r1
 8007ea0:	607b      	str	r3, [r7, #4]
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007eae:	4659      	mov	r1, fp
 8007eb0:	00cb      	lsls	r3, r1, #3
 8007eb2:	4651      	mov	r1, sl
 8007eb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eb8:	4651      	mov	r1, sl
 8007eba:	00ca      	lsls	r2, r1, #3
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	4642      	mov	r2, r8
 8007ec4:	189b      	adds	r3, r3, r2
 8007ec6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ec8:	464b      	mov	r3, r9
 8007eca:	460a      	mov	r2, r1
 8007ecc:	eb42 0303 	adc.w	r3, r2, r3
 8007ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	663b      	str	r3, [r7, #96]	; 0x60
 8007edc:	667a      	str	r2, [r7, #100]	; 0x64
 8007ede:	f04f 0200 	mov.w	r2, #0
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007eea:	4649      	mov	r1, r9
 8007eec:	008b      	lsls	r3, r1, #2
 8007eee:	4641      	mov	r1, r8
 8007ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ef4:	4641      	mov	r1, r8
 8007ef6:	008a      	lsls	r2, r1, #2
 8007ef8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007efc:	f7f8 f964 	bl	80001c8 <__aeabi_uldivmod>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	4b0d      	ldr	r3, [pc, #52]	; (8007f3c <UART_SetConfig+0x4e4>)
 8007f06:	fba3 1302 	umull	r1, r3, r3, r2
 8007f0a:	095b      	lsrs	r3, r3, #5
 8007f0c:	2164      	movs	r1, #100	; 0x64
 8007f0e:	fb01 f303 	mul.w	r3, r1, r3
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	3332      	adds	r3, #50	; 0x32
 8007f18:	4a08      	ldr	r2, [pc, #32]	; (8007f3c <UART_SetConfig+0x4e4>)
 8007f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	f003 020f 	and.w	r2, r3, #15
 8007f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4422      	add	r2, r4
 8007f2c:	609a      	str	r2, [r3, #8]
}
 8007f2e:	bf00      	nop
 8007f30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f34:	46bd      	mov	sp, r7
 8007f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f3a:	bf00      	nop
 8007f3c:	51eb851f 	.word	0x51eb851f

08007f40 <__libc_init_array>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	4d0d      	ldr	r5, [pc, #52]	; (8007f78 <__libc_init_array+0x38>)
 8007f44:	4c0d      	ldr	r4, [pc, #52]	; (8007f7c <__libc_init_array+0x3c>)
 8007f46:	1b64      	subs	r4, r4, r5
 8007f48:	10a4      	asrs	r4, r4, #2
 8007f4a:	2600      	movs	r6, #0
 8007f4c:	42a6      	cmp	r6, r4
 8007f4e:	d109      	bne.n	8007f64 <__libc_init_array+0x24>
 8007f50:	4d0b      	ldr	r5, [pc, #44]	; (8007f80 <__libc_init_array+0x40>)
 8007f52:	4c0c      	ldr	r4, [pc, #48]	; (8007f84 <__libc_init_array+0x44>)
 8007f54:	f000 f87c 	bl	8008050 <_init>
 8007f58:	1b64      	subs	r4, r4, r5
 8007f5a:	10a4      	asrs	r4, r4, #2
 8007f5c:	2600      	movs	r6, #0
 8007f5e:	42a6      	cmp	r6, r4
 8007f60:	d105      	bne.n	8007f6e <__libc_init_array+0x2e>
 8007f62:	bd70      	pop	{r4, r5, r6, pc}
 8007f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f68:	4798      	blx	r3
 8007f6a:	3601      	adds	r6, #1
 8007f6c:	e7ee      	b.n	8007f4c <__libc_init_array+0xc>
 8007f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f72:	4798      	blx	r3
 8007f74:	3601      	adds	r6, #1
 8007f76:	e7f2      	b.n	8007f5e <__libc_init_array+0x1e>
 8007f78:	0800acf4 	.word	0x0800acf4
 8007f7c:	0800acf4 	.word	0x0800acf4
 8007f80:	0800acf4 	.word	0x0800acf4
 8007f84:	0800acf8 	.word	0x0800acf8

08007f88 <__itoa>:
 8007f88:	1e93      	subs	r3, r2, #2
 8007f8a:	2b22      	cmp	r3, #34	; 0x22
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	460c      	mov	r4, r1
 8007f90:	d904      	bls.n	8007f9c <__itoa+0x14>
 8007f92:	2300      	movs	r3, #0
 8007f94:	700b      	strb	r3, [r1, #0]
 8007f96:	461c      	mov	r4, r3
 8007f98:	4620      	mov	r0, r4
 8007f9a:	bd10      	pop	{r4, pc}
 8007f9c:	2a0a      	cmp	r2, #10
 8007f9e:	d109      	bne.n	8007fb4 <__itoa+0x2c>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	da07      	bge.n	8007fb4 <__itoa+0x2c>
 8007fa4:	232d      	movs	r3, #45	; 0x2d
 8007fa6:	700b      	strb	r3, [r1, #0]
 8007fa8:	4240      	negs	r0, r0
 8007faa:	2101      	movs	r1, #1
 8007fac:	4421      	add	r1, r4
 8007fae:	f000 f80d 	bl	8007fcc <__utoa>
 8007fb2:	e7f1      	b.n	8007f98 <__itoa+0x10>
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	e7f9      	b.n	8007fac <__itoa+0x24>

08007fb8 <itoa>:
 8007fb8:	f7ff bfe6 	b.w	8007f88 <__itoa>

08007fbc <memset>:
 8007fbc:	4402      	add	r2, r0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d100      	bne.n	8007fc6 <memset+0xa>
 8007fc4:	4770      	bx	lr
 8007fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8007fca:	e7f9      	b.n	8007fc0 <memset+0x4>

08007fcc <__utoa>:
 8007fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fce:	4c1f      	ldr	r4, [pc, #124]	; (800804c <__utoa+0x80>)
 8007fd0:	b08b      	sub	sp, #44	; 0x2c
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	466e      	mov	r6, sp
 8007fd8:	f104 0c20 	add.w	ip, r4, #32
 8007fdc:	6820      	ldr	r0, [r4, #0]
 8007fde:	6861      	ldr	r1, [r4, #4]
 8007fe0:	4637      	mov	r7, r6
 8007fe2:	c703      	stmia	r7!, {r0, r1}
 8007fe4:	3408      	adds	r4, #8
 8007fe6:	4564      	cmp	r4, ip
 8007fe8:	463e      	mov	r6, r7
 8007fea:	d1f7      	bne.n	8007fdc <__utoa+0x10>
 8007fec:	7921      	ldrb	r1, [r4, #4]
 8007fee:	7139      	strb	r1, [r7, #4]
 8007ff0:	1e91      	subs	r1, r2, #2
 8007ff2:	6820      	ldr	r0, [r4, #0]
 8007ff4:	6038      	str	r0, [r7, #0]
 8007ff6:	2922      	cmp	r1, #34	; 0x22
 8007ff8:	f04f 0100 	mov.w	r1, #0
 8007ffc:	d904      	bls.n	8008008 <__utoa+0x3c>
 8007ffe:	7019      	strb	r1, [r3, #0]
 8008000:	460b      	mov	r3, r1
 8008002:	4618      	mov	r0, r3
 8008004:	b00b      	add	sp, #44	; 0x2c
 8008006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008008:	1e58      	subs	r0, r3, #1
 800800a:	4684      	mov	ip, r0
 800800c:	fbb5 f7f2 	udiv	r7, r5, r2
 8008010:	fb02 5617 	mls	r6, r2, r7, r5
 8008014:	3628      	adds	r6, #40	; 0x28
 8008016:	446e      	add	r6, sp
 8008018:	460c      	mov	r4, r1
 800801a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800801e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008022:	462e      	mov	r6, r5
 8008024:	42b2      	cmp	r2, r6
 8008026:	f101 0101 	add.w	r1, r1, #1
 800802a:	463d      	mov	r5, r7
 800802c:	d9ee      	bls.n	800800c <__utoa+0x40>
 800802e:	2200      	movs	r2, #0
 8008030:	545a      	strb	r2, [r3, r1]
 8008032:	1919      	adds	r1, r3, r4
 8008034:	1aa5      	subs	r5, r4, r2
 8008036:	42aa      	cmp	r2, r5
 8008038:	dae3      	bge.n	8008002 <__utoa+0x36>
 800803a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800803e:	780e      	ldrb	r6, [r1, #0]
 8008040:	7006      	strb	r6, [r0, #0]
 8008042:	3201      	adds	r2, #1
 8008044:	f801 5901 	strb.w	r5, [r1], #-1
 8008048:	e7f4      	b.n	8008034 <__utoa+0x68>
 800804a:	bf00      	nop
 800804c:	0800acc4 	.word	0x0800acc4

08008050 <_init>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	bf00      	nop
 8008054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008056:	bc08      	pop	{r3}
 8008058:	469e      	mov	lr, r3
 800805a:	4770      	bx	lr

0800805c <_fini>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	bf00      	nop
 8008060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008062:	bc08      	pop	{r3}
 8008064:	469e      	mov	lr, r3
 8008066:	4770      	bx	lr
