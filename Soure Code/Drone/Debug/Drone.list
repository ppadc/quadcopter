
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002108  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a150  0800a150  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a150  0800a150  0001a150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a158  0800a158  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a158  0800a158  0001a158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a15c  0800a15c  0001a15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800a160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000ce4  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d00  20000d00  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ba6c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dba  00000000  00000000  0003bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  0003f878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d0  00000000  00000000  00040fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004e94  00000000  00000000  000425b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e90e  00000000  00000000  0004744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d62af  00000000  00000000  00065d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c009  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061bc  00000000  00000000  0013c05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008030 	.word	0x08008030

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08008030 	.word	0x08008030

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80004d2:	f000 fa29 	bl	8000928 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80004d6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80004da:	2201      	movs	r2, #1
 80004dc:	2178      	movs	r1, #120	; 0x78
 80004de:	485b      	ldr	r0, [pc, #364]	; (800064c <SSD1306_Init+0x180>)
 80004e0:	f004 fc60 	bl	8004da4 <HAL_I2C_IsDeviceReady>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	e0a9      	b.n	8000642 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80004ee:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80004f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80004f4:	e002      	b.n	80004fc <SSD1306_Init+0x30>
		p--;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d1f9      	bne.n	80004f6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000502:	22ae      	movs	r2, #174	; 0xae
 8000504:	2100      	movs	r1, #0
 8000506:	2078      	movs	r0, #120	; 0x78
 8000508:	f000 fa8a 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800050c:	2220      	movs	r2, #32
 800050e:	2100      	movs	r1, #0
 8000510:	2078      	movs	r0, #120	; 0x78
 8000512:	f000 fa85 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000516:	2210      	movs	r2, #16
 8000518:	2100      	movs	r1, #0
 800051a:	2078      	movs	r0, #120	; 0x78
 800051c:	f000 fa80 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000520:	22b0      	movs	r2, #176	; 0xb0
 8000522:	2100      	movs	r1, #0
 8000524:	2078      	movs	r0, #120	; 0x78
 8000526:	f000 fa7b 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800052a:	22c8      	movs	r2, #200	; 0xc8
 800052c:	2100      	movs	r1, #0
 800052e:	2078      	movs	r0, #120	; 0x78
 8000530:	f000 fa76 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fa71 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800053e:	2210      	movs	r2, #16
 8000540:	2100      	movs	r1, #0
 8000542:	2078      	movs	r0, #120	; 0x78
 8000544:	f000 fa6c 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000548:	2240      	movs	r2, #64	; 0x40
 800054a:	2100      	movs	r1, #0
 800054c:	2078      	movs	r0, #120	; 0x78
 800054e:	f000 fa67 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000552:	2281      	movs	r2, #129	; 0x81
 8000554:	2100      	movs	r1, #0
 8000556:	2078      	movs	r0, #120	; 0x78
 8000558:	f000 fa62 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800055c:	22ff      	movs	r2, #255	; 0xff
 800055e:	2100      	movs	r1, #0
 8000560:	2078      	movs	r0, #120	; 0x78
 8000562:	f000 fa5d 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000566:	22a1      	movs	r2, #161	; 0xa1
 8000568:	2100      	movs	r1, #0
 800056a:	2078      	movs	r0, #120	; 0x78
 800056c:	f000 fa58 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000570:	22a6      	movs	r2, #166	; 0xa6
 8000572:	2100      	movs	r1, #0
 8000574:	2078      	movs	r0, #120	; 0x78
 8000576:	f000 fa53 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800057a:	22a8      	movs	r2, #168	; 0xa8
 800057c:	2100      	movs	r1, #0
 800057e:	2078      	movs	r0, #120	; 0x78
 8000580:	f000 fa4e 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000584:	223f      	movs	r2, #63	; 0x3f
 8000586:	2100      	movs	r1, #0
 8000588:	2078      	movs	r0, #120	; 0x78
 800058a:	f000 fa49 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800058e:	22a4      	movs	r2, #164	; 0xa4
 8000590:	2100      	movs	r1, #0
 8000592:	2078      	movs	r0, #120	; 0x78
 8000594:	f000 fa44 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000598:	22d3      	movs	r2, #211	; 0xd3
 800059a:	2100      	movs	r1, #0
 800059c:	2078      	movs	r0, #120	; 0x78
 800059e:	f000 fa3f 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2078      	movs	r0, #120	; 0x78
 80005a8:	f000 fa3a 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80005ac:	22d5      	movs	r2, #213	; 0xd5
 80005ae:	2100      	movs	r1, #0
 80005b0:	2078      	movs	r0, #120	; 0x78
 80005b2:	f000 fa35 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80005b6:	22f0      	movs	r2, #240	; 0xf0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2078      	movs	r0, #120	; 0x78
 80005bc:	f000 fa30 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80005c0:	22d9      	movs	r2, #217	; 0xd9
 80005c2:	2100      	movs	r1, #0
 80005c4:	2078      	movs	r0, #120	; 0x78
 80005c6:	f000 fa2b 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80005ca:	2222      	movs	r2, #34	; 0x22
 80005cc:	2100      	movs	r1, #0
 80005ce:	2078      	movs	r0, #120	; 0x78
 80005d0:	f000 fa26 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80005d4:	22da      	movs	r2, #218	; 0xda
 80005d6:	2100      	movs	r1, #0
 80005d8:	2078      	movs	r0, #120	; 0x78
 80005da:	f000 fa21 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80005de:	2212      	movs	r2, #18
 80005e0:	2100      	movs	r1, #0
 80005e2:	2078      	movs	r0, #120	; 0x78
 80005e4:	f000 fa1c 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80005e8:	22db      	movs	r2, #219	; 0xdb
 80005ea:	2100      	movs	r1, #0
 80005ec:	2078      	movs	r0, #120	; 0x78
 80005ee:	f000 fa17 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80005f2:	2220      	movs	r2, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	2078      	movs	r0, #120	; 0x78
 80005f8:	f000 fa12 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80005fc:	228d      	movs	r2, #141	; 0x8d
 80005fe:	2100      	movs	r1, #0
 8000600:	2078      	movs	r0, #120	; 0x78
 8000602:	f000 fa0d 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000606:	2214      	movs	r2, #20
 8000608:	2100      	movs	r1, #0
 800060a:	2078      	movs	r0, #120	; 0x78
 800060c:	f000 fa08 	bl	8000a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000610:	22af      	movs	r2, #175	; 0xaf
 8000612:	2100      	movs	r1, #0
 8000614:	2078      	movs	r0, #120	; 0x78
 8000616:	f000 fa03 	bl	8000a20 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800061a:	222e      	movs	r2, #46	; 0x2e
 800061c:	2100      	movs	r1, #0
 800061e:	2078      	movs	r0, #120	; 0x78
 8000620:	f000 f9fe 	bl	8000a20 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f843 	bl	80006b0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800062a:	f000 f813 	bl	8000654 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <SSD1306_Init+0x184>)
 8000630:	2200      	movs	r2, #0
 8000632:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <SSD1306_Init+0x184>)
 8000636:	2200      	movs	r2, #0
 8000638:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <SSD1306_Init+0x184>)
 800063c:	2201      	movs	r2, #1
 800063e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000640:	2301      	movs	r3, #1
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200004bc 	.word	0x200004bc
 8000650:	20000438 	.word	0x20000438

08000654 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800065a:	2300      	movs	r3, #0
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	e01d      	b.n	800069c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	3b50      	subs	r3, #80	; 0x50
 8000664:	b2db      	uxtb	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	2078      	movs	r0, #120	; 0x78
 800066c:	f000 f9d8 	bl	8000a20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	2078      	movs	r0, #120	; 0x78
 8000676:	f000 f9d3 	bl	8000a20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800067a:	2210      	movs	r2, #16
 800067c:	2100      	movs	r1, #0
 800067e:	2078      	movs	r0, #120	; 0x78
 8000680:	f000 f9ce 	bl	8000a20 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	01db      	lsls	r3, r3, #7
 8000688:	4a08      	ldr	r2, [pc, #32]	; (80006ac <SSD1306_UpdateScreen+0x58>)
 800068a:	441a      	add	r2, r3
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	2140      	movs	r1, #64	; 0x40
 8000690:	2078      	movs	r0, #120	; 0x78
 8000692:	f000 f95f 	bl	8000954 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	3301      	adds	r3, #1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b07      	cmp	r3, #7
 80006a0:	d9de      	bls.n	8000660 <SSD1306_UpdateScreen+0xc>
	}
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000038 	.word	0x20000038

080006b0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <SSD1306_Fill+0x14>
 80006c0:	2300      	movs	r3, #0
 80006c2:	e000      	b.n	80006c6 <SSD1306_Fill+0x16>
 80006c4:	23ff      	movs	r3, #255	; 0xff
 80006c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ca:	4619      	mov	r1, r3
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <SSD1306_Fill+0x2c>)
 80006ce:	f007 fc65 	bl	8007f9c <memset>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000038 	.word	0x20000038

080006e0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
 80006ea:	460b      	mov	r3, r1
 80006ec:	80bb      	strh	r3, [r7, #4]
 80006ee:	4613      	mov	r3, r2
 80006f0:	70fb      	strb	r3, [r7, #3]
	if (
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	2b7f      	cmp	r3, #127	; 0x7f
 80006f6:	d848      	bhi.n	800078a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80006f8:	88bb      	ldrh	r3, [r7, #4]
 80006fa:	2b3f      	cmp	r3, #63	; 0x3f
 80006fc:	d845      	bhi.n	800078a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SSD1306_DrawPixel+0xb8>)
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000706:	78fb      	ldrb	r3, [r7, #3]
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf0c      	ite	eq
 800070c:	2301      	moveq	r3, #1
 800070e:	2300      	movne	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d11a      	bne.n	8000750 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800071a:	88fa      	ldrh	r2, [r7, #6]
 800071c:	88bb      	ldrh	r3, [r7, #4]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	b298      	uxth	r0, r3
 8000722:	4603      	mov	r3, r0
 8000724:	01db      	lsls	r3, r3, #7
 8000726:	4413      	add	r3, r2
 8000728:	4a1c      	ldr	r2, [pc, #112]	; (800079c <SSD1306_DrawPixel+0xbc>)
 800072a:	5cd3      	ldrb	r3, [r2, r3]
 800072c:	b25a      	sxtb	r2, r3
 800072e:	88bb      	ldrh	r3, [r7, #4]
 8000730:	f003 0307 	and.w	r3, r3, #7
 8000734:	2101      	movs	r1, #1
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	b25b      	sxtb	r3, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	b259      	sxtb	r1, r3
 8000740:	88fa      	ldrh	r2, [r7, #6]
 8000742:	4603      	mov	r3, r0
 8000744:	01db      	lsls	r3, r3, #7
 8000746:	4413      	add	r3, r2
 8000748:	b2c9      	uxtb	r1, r1
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <SSD1306_DrawPixel+0xbc>)
 800074c:	54d1      	strb	r1, [r2, r3]
 800074e:	e01d      	b.n	800078c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000750:	88fa      	ldrh	r2, [r7, #6]
 8000752:	88bb      	ldrh	r3, [r7, #4]
 8000754:	08db      	lsrs	r3, r3, #3
 8000756:	b298      	uxth	r0, r3
 8000758:	4603      	mov	r3, r0
 800075a:	01db      	lsls	r3, r3, #7
 800075c:	4413      	add	r3, r2
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <SSD1306_DrawPixel+0xbc>)
 8000760:	5cd3      	ldrb	r3, [r2, r3]
 8000762:	b25a      	sxtb	r2, r3
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	2101      	movs	r1, #1
 800076c:	fa01 f303 	lsl.w	r3, r1, r3
 8000770:	b25b      	sxtb	r3, r3
 8000772:	43db      	mvns	r3, r3
 8000774:	b25b      	sxtb	r3, r3
 8000776:	4013      	ands	r3, r2
 8000778:	b259      	sxtb	r1, r3
 800077a:	88fa      	ldrh	r2, [r7, #6]
 800077c:	4603      	mov	r3, r0
 800077e:	01db      	lsls	r3, r3, #7
 8000780:	4413      	add	r3, r2
 8000782:	b2c9      	uxtb	r1, r1
 8000784:	4a05      	ldr	r2, [pc, #20]	; (800079c <SSD1306_DrawPixel+0xbc>)
 8000786:	54d1      	strb	r1, [r2, r3]
 8000788:	e000      	b.n	800078c <SSD1306_DrawPixel+0xac>
		return;
 800078a:	bf00      	nop
	}
}
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	20000438 	.word	0x20000438
 800079c:	20000038 	.word	0x20000038

080007a0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	460a      	mov	r2, r1
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	4613      	mov	r3, r2
 80007ae:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80007b0:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <SSD1306_GotoXY+0x28>)
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <SSD1306_GotoXY+0x28>)
 80007b8:	88bb      	ldrh	r3, [r7, #4]
 80007ba:	8053      	strh	r3, [r2, #2]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	20000438 	.word	0x20000438

080007cc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	4613      	mov	r3, r2
 80007da:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80007dc:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <SSD1306_Putc+0xfc>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
	if (
 80007e8:	2b7f      	cmp	r3, #127	; 0x7f
 80007ea:	dc07      	bgt.n	80007fc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80007ec:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <SSD1306_Putc+0xfc>)
 80007ee:	885b      	ldrh	r3, [r3, #2]
 80007f0:	461a      	mov	r2, r3
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	785b      	ldrb	r3, [r3, #1]
 80007f6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80007f8:	2b3f      	cmp	r3, #63	; 0x3f
 80007fa:	dd01      	ble.n	8000800 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	e05e      	b.n	80008be <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	e04b      	b.n	800089e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	3b20      	subs	r3, #32
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	7849      	ldrb	r1, [r1, #1]
 8000812:	fb01 f303 	mul.w	r3, r1, r3
 8000816:	4619      	mov	r1, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	440b      	add	r3, r1
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	e030      	b.n	800088c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000836:	2b00      	cmp	r3, #0
 8000838:	d010      	beq.n	800085c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <SSD1306_Putc+0xfc>)
 800083c:	881a      	ldrh	r2, [r3, #0]
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	b29b      	uxth	r3, r3
 8000842:	4413      	add	r3, r2
 8000844:	b298      	uxth	r0, r3
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <SSD1306_Putc+0xfc>)
 8000848:	885a      	ldrh	r2, [r3, #2]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	b29b      	uxth	r3, r3
 800084e:	4413      	add	r3, r2
 8000850:	b29b      	uxth	r3, r3
 8000852:	79ba      	ldrb	r2, [r7, #6]
 8000854:	4619      	mov	r1, r3
 8000856:	f7ff ff43 	bl	80006e0 <SSD1306_DrawPixel>
 800085a:	e014      	b.n	8000886 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <SSD1306_Putc+0xfc>)
 800085e:	881a      	ldrh	r2, [r3, #0]
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	b29b      	uxth	r3, r3
 8000864:	4413      	add	r3, r2
 8000866:	b298      	uxth	r0, r3
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <SSD1306_Putc+0xfc>)
 800086a:	885a      	ldrh	r2, [r3, #2]
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	b29b      	uxth	r3, r3
 8000870:	4413      	add	r3, r2
 8000872:	b299      	uxth	r1, r3
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	2b00      	cmp	r3, #0
 8000878:	bf0c      	ite	eq
 800087a:	2301      	moveq	r3, #1
 800087c:	2300      	movne	r3, #0
 800087e:	b2db      	uxtb	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	f7ff ff2d 	bl	80006e0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	3301      	adds	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	4293      	cmp	r3, r2
 8000896:	d3c8      	bcc.n	800082a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	3301      	adds	r3, #1
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	785b      	ldrb	r3, [r3, #1]
 80008a2:	461a      	mov	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d3ad      	bcc.n	8000806 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <SSD1306_Putc+0xfc>)
 80008ac:	881a      	ldrh	r2, [r3, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4413      	add	r3, r2
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <SSD1306_Putc+0xfc>)
 80008ba:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000438 	.word	0x20000438

080008cc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	4613      	mov	r3, r2
 80008d8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80008da:	e012      	b.n	8000902 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	79fa      	ldrb	r2, [r7, #7]
 80008e2:	68b9      	ldr	r1, [r7, #8]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff71 	bl	80007cc <SSD1306_Putc>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d002      	beq.n	80008fc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	e008      	b.n	800090e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3301      	adds	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1e8      	bne.n	80008dc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	781b      	ldrb	r3, [r3, #0]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fec8 	bl	80006b0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000920:	f7ff fe98 	bl	8000654 <SSD1306_UpdateScreen>
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <ssd1306_I2C_Init+0x28>)
 8000930:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000932:	e002      	b.n	800093a <ssd1306_I2C_Init+0x12>
		p--;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	607b      	str	r3, [r7, #4]
	while(p>0)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1f9      	bne.n	8000934 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	0003d090 	.word	0x0003d090

08000954 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b0c7      	sub	sp, #284	; 0x11c
 8000958:	af02      	add	r7, sp, #8
 800095a:	4604      	mov	r4, r0
 800095c:	4608      	mov	r0, r1
 800095e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000962:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000966:	600a      	str	r2, [r1, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800096e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000972:	4622      	mov	r2, r4
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800097a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800097e:	4602      	mov	r2, r0
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000986:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800098a:	460a      	mov	r2, r1
 800098c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800098e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000992:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000996:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800099a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800099e:	7812      	ldrb	r2, [r2, #0]
 80009a0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009a8:	e015      	b.n	80009d6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80009aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009b2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80009b6:	6812      	ldr	r2, [r2, #0]
 80009b8:	441a      	add	r2, r3
 80009ba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009be:	3301      	adds	r3, #1
 80009c0:	7811      	ldrb	r1, [r2, #0]
 80009c2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009c6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80009ca:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80009cc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009d0:	3301      	adds	r3, #1
 80009d2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009da:	b29b      	uxth	r3, r3
 80009dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009e0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80009e4:	8812      	ldrh	r2, [r2, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d8df      	bhi.n	80009aa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80009ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009ee:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b299      	uxth	r1, r3
 80009f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	f107 020c 	add.w	r2, r7, #12
 8000a08:	200a      	movs	r0, #10
 8000a0a:	9000      	str	r0, [sp, #0]
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <ssd1306_I2C_WriteMulti+0xc8>)
 8000a0e:	f003 fdab 	bl	8004568 <HAL_I2C_Master_Transmit>
}
 8000a12:	bf00      	nop
 8000a14:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	200004bc 	.word	0x200004bc

08000a20 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	71bb      	strb	r3, [r7, #6]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000a36:	797b      	ldrb	r3, [r7, #5]
 8000a38:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	b299      	uxth	r1, r3
 8000a3e:	f107 020c 	add.w	r2, r7, #12
 8000a42:	230a      	movs	r3, #10
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2302      	movs	r3, #2
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <ssd1306_I2C_Write+0x38>)
 8000a4a:	f003 fd8d 	bl	8004568 <HAL_I2C_Master_Transmit>
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200004bc 	.word	0x200004bc

08000a5c <find_uart_dev_instant>:
		}
	}
	return -1;
}

static int find_uart_dev_instant(UART_HandleTypeDef *huart){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e00e      	b.n	8000a88 <find_uart_dev_instant+0x2c>
		if(uart_drvs[i]->huart->Instance == huart->Instance){
 8000a6a:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <find_uart_dev_instant+0x44>)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d101      	bne.n	8000a82 <find_uart_dev_instant+0x26>
			return i;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	e007      	b.n	8000a92 <find_uart_dev_instant+0x36>
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3301      	adds	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	dded      	ble.n	8000a6a <find_uart_dev_instant+0xe>
		}
	}
	return -1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000440 	.word	0x20000440

08000aa4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	int idx = find_uart_dev_instant(huart);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ffd5 	bl	8000a5c <find_uart_dev_instant>
 8000ab2:	60f8      	str	r0, [r7, #12]
	uart_drvs[idx]->tx_completed = true;
 8000ab4:	4a05      	ldr	r2, [pc, #20]	; (8000acc <HAL_UART_TxCpltCallback+0x28>)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	2201      	movs	r2, #1
 8000abe:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000440 	.word	0x20000440

08000ad0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
	HAL_UART_RxCpltCallback(huart);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

	int idx = find_uart_dev_instant(huart);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ffbf 	bl	8000a5c <find_uart_dev_instant>
 8000ade:	6138      	str	r0, [r7, #16]
	uart_drv_t *uart_drv = uart_drvs[idx];
 8000ae0:	4a20      	ldr	r2, [pc, #128]	; (8000b64 <HAL_UART_RxCpltCallback+0x94>)
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	60fb      	str	r3, [r7, #12]

	uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	817b      	strh	r3, [r7, #10]
	uint16_t length =  sizeof(uart_drv->rx_dma_buffer) - currCNDTR;
 8000af4:	897b      	ldrh	r3, [r7, #10]
 8000af6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000afa:	813b      	strh	r3, [r7, #8]

	/* Copy and process new data */
	for(uint16_t i=0; i<length; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	82fb      	strh	r3, [r7, #22]
 8000b00:	e00d      	b.n	8000b1e <HAL_UART_RxCpltCallback+0x4e>
	{
		cbuf_put(&uart_drv->rx_cbuf_handle, uart_drv->rx_dma_buffer[i]);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f203 601c 	addw	r0, r3, #1564	; 0x61c
 8000b08:	8afb      	ldrh	r3, [r7, #22]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000b12:	4619      	mov	r1, r3
 8000b14:	f000 f828 	bl	8000b68 <cbuf_put>
	for(uint16_t i=0; i<length; i++)
 8000b18:	8afb      	ldrh	r3, [r7, #22]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	82fb      	strh	r3, [r7, #22]
 8000b1e:	8afa      	ldrh	r2, [r7, #22]
 8000b20:	893b      	ldrh	r3, [r7, #8]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d3ed      	bcc.n	8000b02 <HAL_UART_RxCpltCallback+0x32>
	}

	__HAL_DMA_DISABLE(huart->hdmarx);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0201 	bic.w	r2, r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
	huart->hdmarx->Instance->NDTR = sizeof(uart_drv->rx_dma_buffer);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b44:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(huart->hdmarx);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f042 0201 	orr.w	r2, r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000440 	.word	0x20000440

08000b68 <cbuf_put>:
    cbuf->tail = 0;
    cbuf->full = false;
}

int cbuf_put(circular_buf_t* cbuf, char data)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70fb      	strb	r3, [r7, #3]
    if(!cbuf_full(cbuf))
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f82c 	bl	8000bd2 <cbuf_full>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f083 0301 	eor.w	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d01f      	beq.n	8000bc6 <cbuf_put+0x5e>
    {
        cbuf->buffer[cbuf->head] = data;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	4413      	add	r3, r2
 8000b90:	78fa      	ldrb	r2, [r7, #3]
 8000b92:	701a      	strb	r2, [r3, #0]
        cbuf->head = (cbuf->head + 1) % cbuf->size;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	6852      	ldr	r2, [r2, #4]
 8000b9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ba2:	fb01 f202 	mul.w	r2, r1, r2
 8000ba6:	1a9a      	subs	r2, r3, r2
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	609a      	str	r2, [r3, #8]
        cbuf->full = (cbuf->head == cbuf->tail);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	bf0c      	ite	eq
 8000bb8:	2301      	moveq	r3, #1
 8000bba:	2300      	movne	r3, #0
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	741a      	strb	r2, [r3, #16]
        return 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e001      	b.n	8000bca <cbuf_put+0x62>
    }
    return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <cbuf_full>:
{
    return (!cbuf->full && (cbuf->head == cbuf->tail));
}

bool cbuf_full(circular_buf_t *cbuf)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
    return cbuf->full;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7c1b      	ldrb	r3, [r3, #16]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <bno055_write>:
		return -1;
	}
	return 0;
}

static int bno055_write(uint8_t addr, uint8_t *value){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af04      	add	r7, sp, #16
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	9302      	str	r3, [sp, #8]
 8000c00:	2301      	movs	r3, #1
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	2150      	movs	r1, #80	; 0x50
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <bno055_write+0x3c>)
 8000c0e:	f003 fda9 	bl	8004764 <HAL_I2C_Mem_Write>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <bno055_write+0x32>
		return -1;
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	e000      	b.n	8000c20 <bno055_write+0x34>
	return 0;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200004bc 	.word	0x200004bc

08000c2c <bno055_read_bytes>:

static int bno055_read_bytes(uint8_t addr, uint8_t *value, uint8_t len){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af04      	add	r7, sp, #16
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, len, I2C_TIMEOUT_MS)!= HAL_OK){
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	2164      	movs	r1, #100	; 0x64
 8000c46:	9102      	str	r1, [sp, #8]
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	2150      	movs	r1, #80	; 0x50
 8000c52:	480a      	ldr	r0, [pc, #40]	; (8000c7c <bno055_read_bytes+0x50>)
 8000c54:	f003 fe80 	bl	8004958 <HAL_I2C_Mem_Read>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d008      	beq.n	8000c70 <bno055_read_bytes+0x44>
		memset(value,0,len);
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	461a      	mov	r2, r3
 8000c62:	2100      	movs	r1, #0
 8000c64:	6838      	ldr	r0, [r7, #0]
 8000c66:	f007 f999 	bl	8007f9c <memset>
		return -1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e000      	b.n	8000c72 <bno055_read_bytes+0x46>
	}
	return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200004bc 	.word	0x200004bc

08000c80 <bno055_get_temp>:
	*mx = (int16_t)((int16_t)buffer_mag[1]  << 8) | buffer_mag[0]; *mx /= BNO055_MAG_SCALE;
	*my = (int16_t)((int16_t)buffer_mag[3]  << 8) | buffer_mag[2]; *my /= BNO055_MAG_SCALE;
	*mz = (int16_t)((int16_t)buffer_mag[5]  << 8) | buffer_mag[4]; *mz /= BNO055_MAG_SCALE;
	return 0;
}
int bno055_get_temp(float *temp){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_temp[1] = {};
 8000c88:	2300      	movs	r3, #0
 8000c8a:	733b      	strb	r3, [r7, #12]
	tmp = 0x00;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8000c90:	f107 030f 	add.w	r3, r7, #15
 8000c94:	4619      	mov	r1, r3
 8000c96:	2007      	movs	r0, #7
 8000c98:	f7ff ffa8 	bl	8000bec <bno055_write>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da02      	bge.n	8000ca8 <bno055_get_temp+0x28>
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	e015      	b.n	8000cd4 <bno055_get_temp+0x54>
	if(bno055_read_bytes(TEMP,buffer_temp,1)<0){
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2201      	movs	r2, #1
 8000cae:	4619      	mov	r1, r3
 8000cb0:	2034      	movs	r0, #52	; 0x34
 8000cb2:	f7ff ffbb 	bl	8000c2c <bno055_read_bytes>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	da02      	bge.n	8000cc2 <bno055_get_temp+0x42>
				return -1;
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	e008      	b.n	8000cd4 <bno055_get_temp+0x54>
			}
	*temp = buffer_temp[0] / BNO055_TEMP_SCALE;
 8000cc2:	7b3b      	ldrb	r3, [r7, #12]
 8000cc4:	ee07 3a90 	vmov	s15, r3
 8000cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <bno055_get_elu_data>:
int bno055_get_elu_data(float *roll, float *pitch, float *yaw){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_eul[6] = {};
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	2300      	movs	r3, #0
 8000cee:	82bb      	strh	r3, [r7, #20]
	tmp = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	75fb      	strb	r3, [r7, #23]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8000cf4:	f107 0317 	add.w	r3, r7, #23
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2007      	movs	r0, #7
 8000cfc:	f7ff ff76 	bl	8000bec <bno055_write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	da02      	bge.n	8000d0c <bno055_get_elu_data+0x30>
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e052      	b.n	8000db2 <bno055_get_elu_data+0xd6>
	if(bno055_read_bytes(EUL_HEADING_LSB,buffer_eul,6)<0){
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	2206      	movs	r2, #6
 8000d12:	4619      	mov	r1, r3
 8000d14:	201a      	movs	r0, #26
 8000d16:	f7ff ff89 	bl	8000c2c <bno055_read_bytes>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	da02      	bge.n	8000d26 <bno055_get_elu_data+0x4a>
					return -1;
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	e045      	b.n	8000db2 <bno055_get_elu_data+0xd6>
	}
	*yaw = (int16_t)((int16_t)buffer_eul[1]  << 8) | buffer_eul[0]; *yaw /= BNO055_EUL_SCALE;
 8000d26:	7c7b      	ldrb	r3, [r7, #17]
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	7c3b      	ldrb	r3, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	edc3 7a00 	vstr	s15, [r3]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	ed93 7a00 	vldr	s14, [r3]
 8000d46:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	edc3 7a00 	vstr	s15, [r3]
	*roll = (int16_t)((int16_t)buffer_eul[3]  << 8) | buffer_eul[2]; *roll /= BNO055_EUL_SCALE;
 8000d54:	7cfb      	ldrb	r3, [r7, #19]
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	7cbb      	ldrb	r3, [r7, #18]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	ee07 3a90 	vmov	s15, r3
 8000d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	edc3 7a00 	vstr	s15, [r3]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	ed93 7a00 	vldr	s14, [r3]
 8000d74:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000d78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	edc3 7a00 	vstr	s15, [r3]
	*pitch = (int16_t)((int16_t)buffer_eul[5]  << 8) | buffer_eul[4]; *pitch /= BNO055_EUL_SCALE;
 8000d82:	7d7b      	ldrb	r3, [r7, #21]
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	7d3b      	ldrb	r3, [r7, #20]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	ee07 3a90 	vmov	s15, r3
 8000d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	edc3 7a00 	vstr	s15, [r3]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	ed93 7a00 	vldr	s14, [r3]
 8000da2:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000dd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <MX_ADC1_Init+0xa0>)
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e1e:	f002 f8d3 	bl	8002fc8 <HAL_ADC_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e28:	f000 fe41 	bl	8001aae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e2c:	230b      	movs	r3, #11
 8000e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e3e:	f002 f907 	bl	8003050 <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e48:	f000 fe31 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000044c 	.word	0x2000044c
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	0f000001 	.word	0x0f000001

08000e60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a17      	ldr	r2, [pc, #92]	; (8000edc <HAL_ADC_MspInit+0x7c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d127      	bne.n	8000ed2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_ADC_MspInit+0x80>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <HAL_ADC_MspInit+0x80>)
 8000e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <HAL_ADC_MspInit+0x80>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_ADC_MspInit+0x80>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_ADC_MspInit+0x80>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_ADC_MspInit+0x80>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = MCU_ADC_1_Pin|MCU_ADC_2_Pin|MCU_ADC_3_Pin;
 8000eba:	230e      	movs	r3, #14
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_ADC_MspInit+0x84>)
 8000ece:	f003 f837 	bl	8003f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40012000 	.word	0x40012000
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000eee:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <MX_CAN2_Init+0x64>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000ef4:	2210      	movs	r2, #16
 8000ef6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_CAN2_Init+0x60>)
 8000f36:	f002 faa9 	bl	800348c <HAL_CAN_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000f40:	f000 fdb5 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000494 	.word	0x20000494
 8000f4c:	40006800 	.word	0x40006800

08000f50 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <HAL_CAN_MspInit+0xa0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d13a      	bne.n	8000fe8 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000f7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000f98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_CAN_MspInit+0xa4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = MCU_CAN_RX_Pin|MCU_CAN_TX_Pin;
 8000fc6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000fd8:	2309      	movs	r3, #9
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <HAL_CAN_MspInit+0xa8>)
 8000fe4:	f002 ffac 	bl	8003f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	; 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40006800 	.word	0x40006800
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020400 	.word	0x40020400

08000ffc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <MX_DMA_Init+0x108>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a3e      	ldr	r2, [pc, #248]	; (8001104 <MX_DMA_Init+0x108>)
 800100c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b3c      	ldr	r3, [pc, #240]	; (8001104 <MX_DMA_Init+0x108>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	4b38      	ldr	r3, [pc, #224]	; (8001104 <MX_DMA_Init+0x108>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a37      	ldr	r2, [pc, #220]	; (8001104 <MX_DMA_Init+0x108>)
 8001028:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b35      	ldr	r3, [pc, #212]	; (8001104 <MX_DMA_Init+0x108>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	200b      	movs	r0, #11
 8001040:	f002 fbd8 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001044:	200b      	movs	r0, #11
 8001046:	f002 fbf1 	bl	800382c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	200c      	movs	r0, #12
 8001050:	f002 fbd0 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001054:	200c      	movs	r0, #12
 8001056:	f002 fbe9 	bl	800382c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	200d      	movs	r0, #13
 8001060:	f002 fbc8 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001064:	200d      	movs	r0, #13
 8001066:	f002 fbe1 	bl	800382c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	200e      	movs	r0, #14
 8001070:	f002 fbc0 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001074:	200e      	movs	r0, #14
 8001076:	f002 fbd9 	bl	800382c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	200f      	movs	r0, #15
 8001080:	f002 fbb8 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001084:	200f      	movs	r0, #15
 8001086:	f002 fbd1 	bl	800382c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2010      	movs	r0, #16
 8001090:	f002 fbb0 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001094:	2010      	movs	r0, #16
 8001096:	f002 fbc9 	bl	800382c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2011      	movs	r0, #17
 80010a0:	f002 fba8 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010a4:	2011      	movs	r0, #17
 80010a6:	f002 fbc1 	bl	800382c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	202f      	movs	r0, #47	; 0x2f
 80010b0:	f002 fba0 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80010b4:	202f      	movs	r0, #47	; 0x2f
 80010b6:	f002 fbb9 	bl	800382c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2039      	movs	r0, #57	; 0x39
 80010c0:	f002 fb98 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010c4:	2039      	movs	r0, #57	; 0x39
 80010c6:	f002 fbb1 	bl	800382c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	203a      	movs	r0, #58	; 0x3a
 80010d0:	f002 fb90 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010d4:	203a      	movs	r0, #58	; 0x3a
 80010d6:	f002 fba9 	bl	800382c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2045      	movs	r0, #69	; 0x45
 80010e0:	f002 fb88 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80010e4:	2045      	movs	r0, #69	; 0x45
 80010e6:	f002 fba1 	bl	800382c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2046      	movs	r0, #70	; 0x46
 80010f0:	f002 fb80 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80010f4:	2046      	movs	r0, #70	; 0x46
 80010f6:	f002 fb99 	bl	800382c <HAL_NVIC_EnableIRQ>

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <MX_GPIO_Init>:
        * EXTI
     PA15   ------> S_TIM2_CH1_ETR
     PB3   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b54      	ldr	r3, [pc, #336]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a53      	ldr	r2, [pc, #332]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b51      	ldr	r3, [pc, #324]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b4d      	ldr	r3, [pc, #308]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <MX_GPIO_Init+0x16c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b46      	ldr	r3, [pc, #280]	; (8001274 <MX_GPIO_Init+0x16c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a45      	ldr	r2, [pc, #276]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b43      	ldr	r3, [pc, #268]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a3e      	ldr	r2, [pc, #248]	; (8001274 <MX_GPIO_Init+0x16c>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <MX_GPIO_Init+0x16c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 800118e:	2200      	movs	r2, #0
 8001190:	f246 0131 	movw	r1, #24625	; 0x6031
 8001194:	4838      	ldr	r0, [pc, #224]	; (8001278 <MX_GPIO_Init+0x170>)
 8001196:	f003 f86f 	bl	8004278 <HAL_GPIO_WritePin>
                          |ADD_SPI_CSn_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80011a0:	4836      	ldr	r0, [pc, #216]	; (800127c <MX_GPIO_Init+0x174>)
 80011a2:	f003 f869 	bl	8004278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_LORA_RST_GPIO_Port, MCU_LORA_RST_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ac:	4834      	ldr	r0, [pc, #208]	; (8001280 <MX_GPIO_Init+0x178>)
 80011ae:	f003 f863 	bl	8004278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 80011b2:	f246 0331 	movw	r3, #24625	; 0x6031
 80011b6:	617b      	str	r3, [r7, #20]
                          |ADD_SPI_CSn_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	482b      	ldr	r0, [pc, #172]	; (8001278 <MX_GPIO_Init+0x170>)
 80011cc:	f002 feb8 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80011d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4824      	ldr	r0, [pc, #144]	; (8001278 <MX_GPIO_Init+0x170>)
 80011e8:	f002 feaa 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin;
 80011ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	481d      	ldr	r0, [pc, #116]	; (800127c <MX_GPIO_Init+0x174>)
 8001206:	f002 fe9b 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_LORA_RST_Pin;
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_LORA_RST_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4817      	ldr	r0, [pc, #92]	; (8001280 <MX_GPIO_Init+0x178>)
 8001224:	f002 fe8c 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR1_Pin;
 8001228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800123a:	2301      	movs	r3, #1
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR1_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	480e      	ldr	r0, [pc, #56]	; (8001280 <MX_GPIO_Init+0x178>)
 8001246:	f002 fe7b 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR2_Pin;
 800124a:	2308      	movs	r3, #8
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800125a:	2301      	movs	r3, #1
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR2_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_GPIO_Init+0x174>)
 8001266:	f002 fe6b 	bl	8003f40 <HAL_GPIO_Init>

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40020800 	.word	0x40020800
 800127c:	40020400 	.word	0x40020400
 8001280:	40020000 	.word	0x40020000

08001284 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
	__HAL_RCC_I2C1_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_I2C1_Init+0x74>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <MX_I2C1_Init+0x74>)
 8001294:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_I2C1_Init+0x74>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_I2C1_Init+0x78>)
 80012a8:	4a15      	ldr	r2, [pc, #84]	; (8001300 <MX_I2C1_Init+0x7c>)
 80012aa:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_I2C1_Init+0x78>)
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <MX_I2C1_Init+0x80>)
 80012b0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_I2C1_Init+0x78>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_I2C1_Init+0x78>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_I2C1_Init+0x78>)
 80012c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <MX_I2C1_Init+0x78>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_I2C1_Init+0x78>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_I2C1_Init+0x78>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_I2C1_Init+0x78>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012de:	4807      	ldr	r0, [pc, #28]	; (80012fc <MX_I2C1_Init+0x78>)
 80012e0:	f002 fffe 	bl	80042e0 <HAL_I2C_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_I2C1_Init+0x6a>
  {
    Error_Handler();
 80012ea:	f000 fbe0 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	200004bc 	.word	0x200004bc
 8001300:	40005400 	.word	0x40005400
 8001304:	00061a80 	.word	0x00061a80

08001308 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_I2C_MspInit+0x84>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12c      	bne.n	8001384 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_I2C_MspInit+0x88>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_I2C_MspInit+0x88>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_I2C_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MCU_I2C_SCL_Pin|MCU_I2C_SDA_Pin;
 8001346:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134c:	2312      	movs	r3, #18
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001358:	2304      	movs	r3, #4
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	480c      	ldr	r0, [pc, #48]	; (8001394 <HAL_I2C_MspInit+0x8c>)
 8001364:	f002 fdec 	bl	8003f40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_I2C_MspInit+0x88>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_I2C_MspInit+0x88>)
 8001372:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_I2C_MspInit+0x88>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40005400 	.word	0x40005400
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139e:	f001 fdad 	bl	8002efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a2:	f000 fb0b 	bl	80019bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a6:	f7ff feaf 	bl	8001108 <MX_GPIO_Init>
  MX_DMA_Init();
 80013aa:	f7ff fe27 	bl	8000ffc <MX_DMA_Init>
  MX_ADC1_Init();
 80013ae:	f7ff fd05 	bl	8000dbc <MX_ADC1_Init>
  MX_CAN2_Init();
 80013b2:	f7ff fd99 	bl	8000ee8 <MX_CAN2_Init>
  MX_I2C1_Init();
 80013b6:	f7ff ff65 	bl	8001284 <MX_I2C1_Init>
  MX_SPI1_Init();
 80013ba:	f000 fb7d 	bl	8001ab8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80013be:	f000 fd99 	bl	8001ef4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013c2:	f000 fe5b 	bl	800207c <MX_TIM3_Init>
  MX_TIM8_Init();
 80013c6:	f000 fef5 	bl	80021b4 <MX_TIM8_Init>
  MX_UART4_Init();
 80013ca:	f001 f867 	bl	800249c <MX_UART4_Init>
  MX_UART5_Init();
 80013ce:	f001 f88f 	bl	80024f0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80013d2:	f001 f8b7 	bl	8002544 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80013d6:	f001 f8df 	bl	8002598 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80013da:	f001 f907 	bl	80025ec <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80013de:	f001 f92f 	bl	8002640 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 80013e2:	f000 fe99 	bl	8002118 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim5);
  /* USER CODE END 2 */

  SSD1306_Init (); // initialize the display
 80013e6:	f7ff f871 	bl	80004cc <SSD1306_Init>
  SSD1306_GotoXY (10,10); // goto 10, 10
 80013ea:	210a      	movs	r1, #10
 80013ec:	200a      	movs	r0, #10
 80013ee:	f7ff f9d7 	bl	80007a0 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_16x26, 1); // print Hello
 80013f2:	2201      	movs	r2, #1
 80013f4:	49b9      	ldr	r1, [pc, #740]	; (80016dc <main+0x344>)
 80013f6:	48ba      	ldr	r0, [pc, #744]	; (80016e0 <main+0x348>)
 80013f8:	f7ff fa68 	bl	80008cc <SSD1306_Puts>
//  SSD1306_GotoXY (10, 38);
//  SSD1306_Puts ("WORLD!!", &Font_7x10, 1);
  SSD1306_UpdateScreen(); // update screen
 80013fc:	f7ff f92a 	bl	8000654 <SSD1306_UpdateScreen>
  /* Infinite loop */
  //bno055_initization();
    i = 0;
 8001400:	4bb8      	ldr	r3, [pc, #736]	; (80016e4 <main+0x34c>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
    j = 0;
 8001406:	4bb8      	ldr	r3, [pc, #736]	; (80016e8 <main+0x350>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    for(i=0;i<1;i++){
 800140c:	4bb5      	ldr	r3, [pc, #724]	; (80016e4 <main+0x34c>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	e02f      	b.n	8001474 <main+0xdc>
  	  for(j=0;j<3;j++){
 8001414:	4bb4      	ldr	r3, [pc, #720]	; (80016e8 <main+0x350>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	e021      	b.n	8001460 <main+0xc8>
  		  if(HAL_I2C_IsDeviceReady(&BNO055__I2C,BNO055_I2C_ADDR, 1, 100)==HAL_OK){
 800141c:	2364      	movs	r3, #100	; 0x64
 800141e:	2201      	movs	r2, #1
 8001420:	2150      	movs	r1, #80	; 0x50
 8001422:	48b2      	ldr	r0, [pc, #712]	; (80016ec <main+0x354>)
 8001424:	f003 fcbe 	bl	8004da4 <HAL_I2C_IsDeviceReady>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d109      	bne.n	8001442 <main+0xaa>
  			  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 800142e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001432:	48af      	ldr	r0, [pc, #700]	; (80016f0 <main+0x358>)
 8001434:	f002 ff39 	bl	80042aa <HAL_GPIO_TogglePin>
  			  HAL_Delay(500);
 8001438:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800143c:	f001 fda0 	bl	8002f80 <HAL_Delay>
 8001440:	e008      	b.n	8001454 <main+0xbc>
  		  	  }
  		  else{
  			  HAL_GPIO_WritePin(GPIOC,BUZZER_Pin, SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001448:	48a9      	ldr	r0, [pc, #676]	; (80016f0 <main+0x358>)
 800144a:	f002 ff15 	bl	8004278 <HAL_GPIO_WritePin>
  			  HAL_Delay(100);
 800144e:	2064      	movs	r0, #100	; 0x64
 8001450:	f001 fd96 	bl	8002f80 <HAL_Delay>
  	  for(j=0;j<3;j++){
 8001454:	4ba4      	ldr	r3, [pc, #656]	; (80016e8 <main+0x350>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4ba2      	ldr	r3, [pc, #648]	; (80016e8 <main+0x350>)
 800145e:	701a      	strb	r2, [r3, #0]
 8001460:	4ba1      	ldr	r3, [pc, #644]	; (80016e8 <main+0x350>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d9d9      	bls.n	800141c <main+0x84>
    for(i=0;i<1;i++){
 8001468:	4b9e      	ldr	r3, [pc, #632]	; (80016e4 <main+0x34c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b9c      	ldr	r3, [pc, #624]	; (80016e4 <main+0x34c>)
 8001472:	701a      	strb	r2, [r3, #0]
 8001474:	4b9b      	ldr	r3, [pc, #620]	; (80016e4 <main+0x34c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0cb      	beq.n	8001414 <main+0x7c>
  		  }
  	  }
    }
    HAL_GPIO_WritePin(GPIOC,BUZZER_Pin, SET);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	489b      	ldr	r0, [pc, #620]	; (80016f0 <main+0x358>)
 8001484:	f002 fef8 	bl	8004278 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001488:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800148c:	f001 fd78 	bl	8002f80 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC,BUZZER_Pin, RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001496:	4896      	ldr	r0, [pc, #600]	; (80016f0 <main+0x358>)
 8001498:	f002 feee 	bl	8004278 <HAL_GPIO_WritePin>

      tmp = 0x20;
 800149c:	4b95      	ldr	r3, [pc, #596]	; (80016f4 <main+0x35c>)
 800149e:	2220      	movs	r2, #32
 80014a0:	701a      	strb	r2, [r3, #0]
      if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,SYS_TRIGGER, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 80014a2:	2364      	movs	r3, #100	; 0x64
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2301      	movs	r3, #1
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	4b92      	ldr	r3, [pc, #584]	; (80016f4 <main+0x35c>)
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	223f      	movs	r2, #63	; 0x3f
 80014b2:	2150      	movs	r1, #80	; 0x50
 80014b4:	488d      	ldr	r0, [pc, #564]	; (80016ec <main+0x354>)
 80014b6:	f003 f955 	bl	8004764 <HAL_I2C_Mem_Write>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d106      	bne.n	80014ce <main+0x136>
    	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c6:	488a      	ldr	r0, [pc, #552]	; (80016f0 <main+0x358>)
 80014c8:	f002 fed6 	bl	8004278 <HAL_GPIO_WritePin>
 80014cc:	e00b      	b.n	80014e6 <main+0x14e>
      }
      else{
    	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d4:	4886      	ldr	r0, [pc, #536]	; (80016f0 <main+0x358>)
 80014d6:	f002 fecf 	bl	8004278 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOC,BUZZER_Pin, SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e0:	4883      	ldr	r0, [pc, #524]	; (80016f0 <main+0x358>)
 80014e2:	f002 fec9 	bl	8004278 <HAL_GPIO_WritePin>
      }
      HAL_Delay(510);
 80014e6:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 80014ea:	f001 fd49 	bl	8002f80 <HAL_Delay>
      member = 0;
 80014ee:	4b82      	ldr	r3, [pc, #520]	; (80016f8 <main+0x360>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
      if(HAL_I2C_Mem_Read(&BNO055__I2C,BNO055_I2C_ADDR,CHIP_ID_PAGE_0, I2C_MEMADD_SIZE_8BIT, &member, 1, I2C_TIMEOUT_MS)==HAL_OK){
 80014f4:	2364      	movs	r3, #100	; 0x64
 80014f6:	9302      	str	r3, [sp, #8]
 80014f8:	2301      	movs	r3, #1
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	4b7e      	ldr	r3, [pc, #504]	; (80016f8 <main+0x360>)
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2301      	movs	r3, #1
 8001502:	2200      	movs	r2, #0
 8001504:	2150      	movs	r1, #80	; 0x50
 8001506:	4879      	ldr	r0, [pc, #484]	; (80016ec <main+0x354>)
 8001508:	f003 fa26 	bl	8004958 <HAL_I2C_Mem_Read>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d109      	bne.n	8001526 <main+0x18e>
      	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001518:	4875      	ldr	r0, [pc, #468]	; (80016f0 <main+0x358>)
 800151a:	f002 fead 	bl	8004278 <HAL_GPIO_WritePin>
      	  HAL_Delay(100);
 800151e:	2064      	movs	r0, #100	; 0x64
 8001520:	f001 fd2e 	bl	8002f80 <HAL_Delay>
 8001524:	e014      	b.n	8001550 <main+0x1b8>
      }
      else{
      	HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, SET);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152c:	4870      	ldr	r0, [pc, #448]	; (80016f0 <main+0x358>)
 800152e:	f002 fea3 	bl	8004278 <HAL_GPIO_WritePin>
      	HAL_Delay(100);
 8001532:	2064      	movs	r0, #100	; 0x64
 8001534:	f001 fd24 	bl	8002f80 <HAL_Delay>
      	HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153e:	486c      	ldr	r0, [pc, #432]	; (80016f0 <main+0x358>)
 8001540:	f002 fe9a 	bl	8004278 <HAL_GPIO_WritePin>
      	HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154a:	4869      	ldr	r0, [pc, #420]	; (80016f0 <main+0x358>)
 800154c:	f002 fe94 	bl	8004278 <HAL_GPIO_WritePin>
      }
    if(member==BNO055_ID){
 8001550:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <main+0x360>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2ba0      	cmp	r3, #160	; 0xa0
 8001556:	d106      	bne.n	8001566 <main+0x1ce>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800155e:	4864      	ldr	r0, [pc, #400]	; (80016f0 <main+0x358>)
 8001560:	f002 fe8a 	bl	8004278 <HAL_GPIO_WritePin>
 8001564:	e005      	b.n	8001572 <main+0x1da>
    }
    else{
  	 HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, SET);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156c:	4860      	ldr	r0, [pc, #384]	; (80016f0 <main+0x358>)
 800156e:	f002 fe83 	bl	8004278 <HAL_GPIO_WritePin>
    }

    //set operation_mode BNO055_OPERATION_CONFIG_MODE
    tmp = BNO055_OPERATION_CONFIG_MODE;
 8001572:	4b60      	ldr	r3, [pc, #384]	; (80016f4 <main+0x35c>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,OPR_MODE, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2301      	movs	r3, #1
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <main+0x35c>)
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	223d      	movs	r2, #61	; 0x3d
 8001588:	2150      	movs	r1, #80	; 0x50
 800158a:	4858      	ldr	r0, [pc, #352]	; (80016ec <main+0x354>)
 800158c:	f003 f8ea 	bl	8004764 <HAL_I2C_Mem_Write>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d106      	bne.n	80015a4 <main+0x20c>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159c:	4854      	ldr	r0, [pc, #336]	; (80016f0 <main+0x358>)
 800159e:	f002 fe6b 	bl	8004278 <HAL_GPIO_WritePin>
 80015a2:	e005      	b.n	80015b0 <main+0x218>
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015aa:	4851      	ldr	r0, [pc, #324]	; (80016f0 <main+0x358>)
 80015ac:	f002 fe64 	bl	8004278 <HAL_GPIO_WritePin>
    }

    tmp = 0b00;
 80015b0:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <main+0x35c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,PWR_MODE, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 80015b6:	2364      	movs	r3, #100	; 0x64
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	2301      	movs	r3, #1
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	4b4d      	ldr	r3, [pc, #308]	; (80016f4 <main+0x35c>)
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2301      	movs	r3, #1
 80015c4:	223e      	movs	r2, #62	; 0x3e
 80015c6:	2150      	movs	r1, #80	; 0x50
 80015c8:	4848      	ldr	r0, [pc, #288]	; (80016ec <main+0x354>)
 80015ca:	f003 f8cb 	bl	8004764 <HAL_I2C_Mem_Write>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d106      	bne.n	80015e2 <main+0x24a>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015da:	4845      	ldr	r0, [pc, #276]	; (80016f0 <main+0x358>)
 80015dc:	f002 fe4c 	bl	8004278 <HAL_GPIO_WritePin>
 80015e0:	e005      	b.n	80015ee <main+0x256>
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e8:	4841      	ldr	r0, [pc, #260]	; (80016f0 <main+0x358>)
 80015ea:	f002 fe45 	bl	8004278 <HAL_GPIO_WritePin>
    }

    //Move to Page 1//
    tmp = 0x01;
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <main+0x35c>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,PAGE_ID, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 80015f4:	2364      	movs	r3, #100	; 0x64
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	2301      	movs	r3, #1
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <main+0x35c>)
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2301      	movs	r3, #1
 8001602:	2207      	movs	r2, #7
 8001604:	2150      	movs	r1, #80	; 0x50
 8001606:	4839      	ldr	r0, [pc, #228]	; (80016ec <main+0x354>)
 8001608:	f003 f8ac 	bl	8004764 <HAL_I2C_Mem_Write>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <main+0x288>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001612:	2201      	movs	r2, #1
 8001614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001618:	4835      	ldr	r0, [pc, #212]	; (80016f0 <main+0x358>)
 800161a:	f002 fe2d 	bl	8004278 <HAL_GPIO_WritePin>
 800161e:	e005      	b.n	800162c <main+0x294>
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001626:	4832      	ldr	r0, [pc, #200]	; (80016f0 <main+0x358>)
 8001628:	f002 fe26 	bl	8004278 <HAL_GPIO_WritePin>
    }
    /* Configurations Accelerometer */
    tmp = ( 0b000<<5 | 0b011<<2 ) | 0b01;
 800162c:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <main+0x35c>)
 800162e:	220d      	movs	r2, #13
 8001630:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,ACC_CONFIG, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 8001632:	2364      	movs	r3, #100	; 0x64
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	2301      	movs	r3, #1
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <main+0x35c>)
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2301      	movs	r3, #1
 8001640:	2208      	movs	r2, #8
 8001642:	2150      	movs	r1, #80	; 0x50
 8001644:	4829      	ldr	r0, [pc, #164]	; (80016ec <main+0x354>)
 8001646:	f003 f88d 	bl	8004764 <HAL_I2C_Mem_Write>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d106      	bne.n	800165e <main+0x2c6>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001656:	4826      	ldr	r0, [pc, #152]	; (80016f0 <main+0x358>)
 8001658:	f002 fe0e 	bl	8004278 <HAL_GPIO_WritePin>
 800165c:	e005      	b.n	800166a <main+0x2d2>
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001664:	4822      	ldr	r0, [pc, #136]	; (80016f0 <main+0x358>)
 8001666:	f002 fe07 	bl	8004278 <HAL_GPIO_WritePin>
    }

    /* Configurations Gyroscope */
    tmp = 0b111<<3 | 0b000;
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <main+0x35c>)
 800166c:	2238      	movs	r2, #56	; 0x38
 800166e:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,GYR_CONFIG_0, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	9302      	str	r3, [sp, #8]
 8001674:	2301      	movs	r3, #1
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <main+0x35c>)
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2301      	movs	r3, #1
 800167e:	220a      	movs	r2, #10
 8001680:	2150      	movs	r1, #80	; 0x50
 8001682:	481a      	ldr	r0, [pc, #104]	; (80016ec <main+0x354>)
 8001684:	f003 f86e 	bl	8004764 <HAL_I2C_Mem_Write>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d106      	bne.n	800169c <main+0x304>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 800168e:	2201      	movs	r2, #1
 8001690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001694:	4816      	ldr	r0, [pc, #88]	; (80016f0 <main+0x358>)
 8001696:	f002 fdef 	bl	8004278 <HAL_GPIO_WritePin>
 800169a:	e005      	b.n	80016a8 <main+0x310>
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a2:	4813      	ldr	r0, [pc, #76]	; (80016f0 <main+0x358>)
 80016a4:	f002 fde8 	bl	8004278 <HAL_GPIO_WritePin>
    }
    tmp = 0b000;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <main+0x35c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,GYR_CONFIG_1, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 80016ae:	2364      	movs	r3, #100	; 0x64
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	2301      	movs	r3, #1
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <main+0x35c>)
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	220b      	movs	r2, #11
 80016be:	2150      	movs	r1, #80	; 0x50
 80016c0:	480a      	ldr	r0, [pc, #40]	; (80016ec <main+0x354>)
 80016c2:	f003 f84f 	bl	8004764 <HAL_I2C_Mem_Write>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d117      	bne.n	80016fc <main+0x364>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d2:	4807      	ldr	r0, [pc, #28]	; (80016f0 <main+0x358>)
 80016d4:	f002 fdd0 	bl	8004278 <HAL_GPIO_WritePin>
 80016d8:	e016      	b.n	8001708 <main+0x370>
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	08008048 	.word	0x08008048
 80016e4:	20000511 	.word	0x20000511
 80016e8:	20000512 	.word	0x20000512
 80016ec:	200004bc 	.word	0x200004bc
 80016f0:	40020800 	.word	0x40020800
 80016f4:	20000510 	.word	0x20000510
 80016f8:	20000513 	.word	0x20000513
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001702:	48a2      	ldr	r0, [pc, #648]	; (800198c <main+0x5f4>)
 8001704:	f002 fdb8 	bl	8004278 <HAL_GPIO_WritePin>
    }

    /* Configurations Magnetometer */
    tmp = (0b11<<5 | 0b11<<3)| 0b011;
 8001708:	4ba1      	ldr	r3, [pc, #644]	; (8001990 <main+0x5f8>)
 800170a:	227b      	movs	r2, #123	; 0x7b
 800170c:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,MAG_CONFIG, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 800170e:	2364      	movs	r3, #100	; 0x64
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	2301      	movs	r3, #1
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	4b9e      	ldr	r3, [pc, #632]	; (8001990 <main+0x5f8>)
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2301      	movs	r3, #1
 800171c:	2209      	movs	r2, #9
 800171e:	2150      	movs	r1, #80	; 0x50
 8001720:	489c      	ldr	r0, [pc, #624]	; (8001994 <main+0x5fc>)
 8001722:	f003 f81f 	bl	8004764 <HAL_I2C_Mem_Write>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d106      	bne.n	800173a <main+0x3a2>
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001732:	4896      	ldr	r0, [pc, #600]	; (800198c <main+0x5f4>)
 8001734:	f002 fda0 	bl	8004278 <HAL_GPIO_WritePin>
 8001738:	e005      	b.n	8001746 <main+0x3ae>
    }
    else{
  	  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001740:	4892      	ldr	r0, [pc, #584]	; (800198c <main+0x5f4>)
 8001742:	f002 fd99 	bl	8004278 <HAL_GPIO_WritePin>
    }

  	/*Configuration Sensor Unit*/
  	//Move to Page 0//
    	tmp = 0x00;
 8001746:	4b92      	ldr	r3, [pc, #584]	; (8001990 <main+0x5f8>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
    	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,PAGE_ID, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 800174c:	2364      	movs	r3, #100	; 0x64
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	2301      	movs	r3, #1
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	4b8e      	ldr	r3, [pc, #568]	; (8001990 <main+0x5f8>)
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	2207      	movs	r2, #7
 800175c:	2150      	movs	r1, #80	; 0x50
 800175e:	488d      	ldr	r0, [pc, #564]	; (8001994 <main+0x5fc>)
 8001760:	f003 f800 	bl	8004764 <HAL_I2C_Mem_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <main+0x3e0>
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001770:	4886      	ldr	r0, [pc, #536]	; (800198c <main+0x5f4>)
 8001772:	f002 fd81 	bl	8004278 <HAL_GPIO_WritePin>
 8001776:	e005      	b.n	8001784 <main+0x3ec>
    	}
    	else{
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800177e:	4883      	ldr	r0, [pc, #524]	; (800198c <main+0x5f4>)
 8001780:	f002 fd7a 	bl	8004278 <HAL_GPIO_WritePin>
    	}

    	//tmp = (((0b00<<4 | 0b00<<2)| 0b00<<1)| 0b00);
    	tmp = 0b0000000;
 8001784:	4b82      	ldr	r3, [pc, #520]	; (8001990 <main+0x5f8>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
    	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,UNIT_SEL, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 800178a:	2364      	movs	r3, #100	; 0x64
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2301      	movs	r3, #1
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	4b7f      	ldr	r3, [pc, #508]	; (8001990 <main+0x5f8>)
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	223b      	movs	r2, #59	; 0x3b
 800179a:	2150      	movs	r1, #80	; 0x50
 800179c:	487d      	ldr	r0, [pc, #500]	; (8001994 <main+0x5fc>)
 800179e:	f002 ffe1 	bl	8004764 <HAL_I2C_Mem_Write>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d106      	bne.n	80017b6 <main+0x41e>
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ae:	4877      	ldr	r0, [pc, #476]	; (800198c <main+0x5f4>)
 80017b0:	f002 fd62 	bl	8004278 <HAL_GPIO_WritePin>
 80017b4:	e005      	b.n	80017c2 <main+0x42a>
    	}
    	else{
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017bc:	4873      	ldr	r0, [pc, #460]	; (800198c <main+0x5f4>)
 80017be:	f002 fd5b 	bl	8004278 <HAL_GPIO_WritePin>
    	}
    	/* Configure axis mapping*/
    	tmp = REMAP_CONFIG_P1_2_4_7;
 80017c2:	4b73      	ldr	r3, [pc, #460]	; (8001990 <main+0x5f8>)
 80017c4:	2224      	movs	r2, #36	; 0x24
 80017c6:	701a      	strb	r2, [r3, #0]
    	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,AXIS_MAP_CONFIG, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 80017c8:	2364      	movs	r3, #100	; 0x64
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	2301      	movs	r3, #1
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	4b6f      	ldr	r3, [pc, #444]	; (8001990 <main+0x5f8>)
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2301      	movs	r3, #1
 80017d6:	2241      	movs	r2, #65	; 0x41
 80017d8:	2150      	movs	r1, #80	; 0x50
 80017da:	486e      	ldr	r0, [pc, #440]	; (8001994 <main+0x5fc>)
 80017dc:	f002 ffc2 	bl	8004764 <HAL_I2C_Mem_Write>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <main+0x45c>
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ec:	4867      	ldr	r0, [pc, #412]	; (800198c <main+0x5f4>)
 80017ee:	f002 fd43 	bl	8004278 <HAL_GPIO_WritePin>
 80017f2:	e005      	b.n	8001800 <main+0x468>
    	}
    	else{
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017fa:	4864      	ldr	r0, [pc, #400]	; (800198c <main+0x5f4>)
 80017fc:	f002 fd3c 	bl	8004278 <HAL_GPIO_WritePin>
    	}

    	tmp = REMAP_SIGN_P1;
 8001800:	4b63      	ldr	r3, [pc, #396]	; (8001990 <main+0x5f8>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
    	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,AXIS_MAP_CONFIG, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2301      	movs	r3, #1
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	4b60      	ldr	r3, [pc, #384]	; (8001990 <main+0x5f8>)
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	2241      	movs	r2, #65	; 0x41
 8001816:	2150      	movs	r1, #80	; 0x50
 8001818:	485e      	ldr	r0, [pc, #376]	; (8001994 <main+0x5fc>)
 800181a:	f002 ffa3 	bl	8004764 <HAL_I2C_Mem_Write>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d106      	bne.n	8001832 <main+0x49a>
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800182a:	4858      	ldr	r0, [pc, #352]	; (800198c <main+0x5f4>)
 800182c:	f002 fd24 	bl	8004278 <HAL_GPIO_WritePin>
 8001830:	e005      	b.n	800183e <main+0x4a6>
    	}
    	else{
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001838:	4854      	ldr	r0, [pc, #336]	; (800198c <main+0x5f4>)
 800183a:	f002 fd1d 	bl	8004278 <HAL_GPIO_WritePin>
    	}
    //set BNO055_OPERATION_MODE_NDOF
    	tmp = BNO055_OPERATION_MODE_NDOF;
 800183e:	4b54      	ldr	r3, [pc, #336]	; (8001990 <main+0x5f8>)
 8001840:	220c      	movs	r2, #12
 8001842:	701a      	strb	r2, [r3, #0]
    	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR,OPR_MODE, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT_MS)==HAL_OK){
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	2301      	movs	r3, #1
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	4b50      	ldr	r3, [pc, #320]	; (8001990 <main+0x5f8>)
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	223d      	movs	r2, #61	; 0x3d
 8001854:	2150      	movs	r1, #80	; 0x50
 8001856:	484f      	ldr	r0, [pc, #316]	; (8001994 <main+0x5fc>)
 8001858:	f002 ff84 	bl	8004764 <HAL_I2C_Mem_Write>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d106      	bne.n	8001870 <main+0x4d8>
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001862:	2201      	movs	r2, #1
 8001864:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001868:	4848      	ldr	r0, [pc, #288]	; (800198c <main+0x5f4>)
 800186a:	f002 fd05 	bl	8004278 <HAL_GPIO_WritePin>
 800186e:	e005      	b.n	800187c <main+0x4e4>
    	}
    	else{
    		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001876:	4845      	ldr	r0, [pc, #276]	; (800198c <main+0x5f4>)
 8001878:	f002 fcfe 	bl	8004278 <HAL_GPIO_WritePin>
    	}
    	HAL_Delay(1000);
 800187c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001880:	f001 fb7e 	bl	8002f80 <HAL_Delay>
    	SSD1306_Clear();
 8001884:	f7ff f847 	bl	8000916 <SSD1306_Clear>
    	char snum[8];
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  bno055_get_temp(&temp);
 8001888:	4843      	ldr	r0, [pc, #268]	; (8001998 <main+0x600>)
 800188a:	f7ff f9f9 	bl	8000c80 <bno055_get_temp>
	  	  temp = temp*1;
 800188e:	4b42      	ldr	r3, [pc, #264]	; (8001998 <main+0x600>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a41      	ldr	r2, [pc, #260]	; (8001998 <main+0x600>)
 8001894:	6013      	str	r3, [r2, #0]
	  	  if(temp>20 && temp < 40){
 8001896:	4b40      	ldr	r3, [pc, #256]	; (8001998 <main+0x600>)
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80018a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	dd10      	ble.n	80018cc <main+0x534>
 80018aa:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <main+0x600>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800199c <main+0x604>
 80018b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	d506      	bpl.n	80018cc <main+0x534>
	  		  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 80018be:	2201      	movs	r2, #1
 80018c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018c4:	4831      	ldr	r0, [pc, #196]	; (800198c <main+0x5f4>)
 80018c6:	f002 fcd7 	bl	8004278 <HAL_GPIO_WritePin>
 80018ca:	e005      	b.n	80018d8 <main+0x540>
	  	  }
	  	  else
	  		  HAL_GPIO_WritePin(GPIOC, LED_Pin, RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d2:	482e      	ldr	r0, [pc, #184]	; (800198c <main+0x5f4>)
 80018d4:	f002 fcd0 	bl	8004278 <HAL_GPIO_WritePin>

	  bno055_get_elu_data(&roll, &pitch, &yaw);
 80018d8:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <main+0x608>)
 80018da:	4932      	ldr	r1, [pc, #200]	; (80019a4 <main+0x60c>)
 80018dc:	4832      	ldr	r0, [pc, #200]	; (80019a8 <main+0x610>)
 80018de:	f7ff f9fd 	bl	8000cdc <bno055_get_elu_data>
			itoa(roll, snum, 10);
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <main+0x610>)
 80018e4:	edd3 7a00 	vldr	s15, [r3]
 80018e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ec:	463b      	mov	r3, r7
 80018ee:	220a      	movs	r2, #10
 80018f0:	4619      	mov	r1, r3
 80018f2:	ee17 0a90 	vmov	r0, s15
 80018f6:	f006 fb4f 	bl	8007f98 <itoa>
			SSD1306_GotoXY (0, 30);
 80018fa:	211e      	movs	r1, #30
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7fe ff4f 	bl	80007a0 <SSD1306_GotoXY>
			SSD1306_Puts ("             ", &Font_11x18, 1);
 8001902:	2201      	movs	r2, #1
 8001904:	4929      	ldr	r1, [pc, #164]	; (80019ac <main+0x614>)
 8001906:	482a      	ldr	r0, [pc, #168]	; (80019b0 <main+0x618>)
 8001908:	f7fe ffe0 	bl	80008cc <SSD1306_Puts>
			SSD1306_UpdateScreen();
 800190c:	f7fe fea2 	bl	8000654 <SSD1306_UpdateScreen>
			if(roll < 10) {
 8001910:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <main+0x610>)
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800191a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	d504      	bpl.n	800192e <main+0x596>
				SSD1306_GotoXY (53, 30);  // 1 DIGIT
 8001924:	211e      	movs	r1, #30
 8001926:	2035      	movs	r0, #53	; 0x35
 8001928:	f7fe ff3a 	bl	80007a0 <SSD1306_GotoXY>
 800192c:	e021      	b.n	8001972 <main+0x5da>
			}
			else if (roll < 100 ) {
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <main+0x610>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80019b4 <main+0x61c>
 8001938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	d504      	bpl.n	800194c <main+0x5b4>
				SSD1306_GotoXY (45, 30);  // 2 DIGITS
 8001942:	211e      	movs	r1, #30
 8001944:	202d      	movs	r0, #45	; 0x2d
 8001946:	f7fe ff2b 	bl	80007a0 <SSD1306_GotoXY>
 800194a:	e012      	b.n	8001972 <main+0x5da>
			}
			else if (roll < 1000 ) {
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <main+0x610>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80019b8 <main+0x620>
 8001956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	d504      	bpl.n	800196a <main+0x5d2>
				SSD1306_GotoXY (37, 30);  // 3 DIGITS
 8001960:	211e      	movs	r1, #30
 8001962:	2025      	movs	r0, #37	; 0x25
 8001964:	f7fe ff1c 	bl	80007a0 <SSD1306_GotoXY>
 8001968:	e003      	b.n	8001972 <main+0x5da>
			}
			else {
				SSD1306_GotoXY (30, 30);  // 4 DIGIS
 800196a:	211e      	movs	r1, #30
 800196c:	201e      	movs	r0, #30
 800196e:	f7fe ff17 	bl	80007a0 <SSD1306_GotoXY>
			}
			SSD1306_Puts (snum, &Font_11x18, 1);
 8001972:	463b      	mov	r3, r7
 8001974:	2201      	movs	r2, #1
 8001976:	490d      	ldr	r1, [pc, #52]	; (80019ac <main+0x614>)
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe ffa7 	bl	80008cc <SSD1306_Puts>
			SSD1306_UpdateScreen();
 800197e:	f7fe fe69 	bl	8000654 <SSD1306_UpdateScreen>
			HAL_Delay (100);
 8001982:	2064      	movs	r0, #100	; 0x64
 8001984:	f001 fafc 	bl	8002f80 <HAL_Delay>
	  bno055_get_temp(&temp);
 8001988:	e77e      	b.n	8001888 <main+0x4f0>
 800198a:	bf00      	nop
 800198c:	40020800 	.word	0x40020800
 8001990:	20000510 	.word	0x20000510
 8001994:	200004bc 	.word	0x200004bc
 8001998:	20000514 	.word	0x20000514
 800199c:	42200000 	.word	0x42200000
 80019a0:	20000520 	.word	0x20000520
 80019a4:	2000051c 	.word	0x2000051c
 80019a8:	20000518 	.word	0x20000518
 80019ac:	20000000 	.word	0x20000000
 80019b0:	08008050 	.word	0x08008050
 80019b4:	42c80000 	.word	0x42c80000
 80019b8:	447a0000 	.word	0x447a0000

080019bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b094      	sub	sp, #80	; 0x50
 80019c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019c2:	f107 0320 	add.w	r3, r7, #32
 80019c6:	2230      	movs	r2, #48	; 0x30
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f006 fae6 	bl	8007f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <SystemClock_Config+0xcc>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	4a27      	ldr	r2, [pc, #156]	; (8001a88 <SystemClock_Config+0xcc>)
 80019ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ee:	6413      	str	r3, [r2, #64]	; 0x40
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <SystemClock_Config+0xcc>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <SystemClock_Config+0xd0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <SystemClock_Config+0xd0>)
 8001a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <SystemClock_Config+0xd0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a20:	2310      	movs	r3, #16
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a24:	2302      	movs	r3, #2
 8001a26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a30:	23a8      	movs	r3, #168	; 0xa8
 8001a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a34:	2302      	movs	r3, #2
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3c:	f107 0320 	add.w	r3, r7, #32
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 febb 	bl	80057bc <HAL_RCC_OscConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a4c:	f000 f82f 	bl	8001aae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a50:	230f      	movs	r3, #15
 8001a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a54:	2302      	movs	r3, #2
 8001a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	2105      	movs	r1, #5
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f004 f91c 	bl	8005cac <HAL_RCC_ClockConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a7a:	f000 f818 	bl	8001aae <Error_Handler>
  }
}
 8001a7e:	bf00      	nop
 8001a80:	3750      	adds	r7, #80	; 0x50
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40007000 	.word	0x40007000

08001a90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa0:	d101      	bne.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aa2:	f001 fa4d 	bl	8002f40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab2:	b672      	cpsid	i
}
 8001ab4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <Error_Handler+0x8>

08001ab8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001abe:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <MX_SPI1_Init+0x68>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ac8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ae4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ae8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001b04:	220a      	movs	r2, #10
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001b0a:	f004 fae1 	bl	80060d0 <HAL_SPI_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b14:	f7ff ffcb 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000524 	.word	0x20000524
 8001b20:	40013000 	.word	0x40013000

08001b24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <HAL_SPI_MspInit+0x84>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d12b      	bne.n	8001b9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_SPI_MspInit+0x88>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_SPI_MspInit+0x88>)
 8001b50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_SPI_MspInit+0x88>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_SPI_MspInit+0x88>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <HAL_SPI_MspInit+0x88>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_SPI_MspInit+0x88>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADNS_SPI_CSn_Pin|MCU_SPI_SCK_Pin|MCU_SPI_MISO_Pin|MCU_SPI_MOSI_Pin;
 8001b7e:	23f0      	movs	r3, #240	; 0xf0
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b8e:	2305      	movs	r3, #5
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <HAL_SPI_MspInit+0x8c>)
 8001b9a:	f002 f9d1 	bl	8003f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	; 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40013000 	.word	0x40013000
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000

08001bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <HAL_MspInit+0x4c>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_MspInit+0x4c>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800

08001c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	; 0x38
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_InitTick+0xe8>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	4a33      	ldr	r2, [pc, #204]	; (8001cec <HAL_InitTick+0xe8>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6413      	str	r3, [r2, #64]	; 0x40
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_InitTick+0xe8>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c30:	f107 0210 	add.w	r2, r7, #16
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 fa16 	bl	800606c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d103      	bne.n	8001c52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c4a:	f004 f9e7 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8001c4e:	6378      	str	r0, [r7, #52]	; 0x34
 8001c50:	e004      	b.n	8001c5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c52:	f004 f9e3 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8001c56:	4603      	mov	r3, r0
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5e:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <HAL_InitTick+0xec>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	0c9b      	lsrs	r3, r3, #18
 8001c66:	3b01      	subs	r3, #1
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_InitTick+0xf0>)
 8001c6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_InitTick+0xf0>)
 8001c74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c78:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001c7a:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <HAL_InitTick+0xf0>)
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <HAL_InitTick+0xf0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_InitTick+0xf0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_InitTick+0xf0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001c92:	4818      	ldr	r0, [pc, #96]	; (8001cf4 <HAL_InitTick+0xf0>)
 8001c94:	f004 faa5 	bl	80061e2 <HAL_TIM_Base_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d11b      	bne.n	8001cde <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001ca6:	4813      	ldr	r0, [pc, #76]	; (8001cf4 <HAL_InitTick+0xf0>)
 8001ca8:	f004 faea 	bl	8006280 <HAL_TIM_Base_Start_IT>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d111      	bne.n	8001cde <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cba:	201c      	movs	r0, #28
 8001cbc:	f001 fdb6 	bl	800382c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	d808      	bhi.n	8001cd8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	201c      	movs	r0, #28
 8001ccc:	f001 fd92 	bl	80037f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd0:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_InitTick+0xf4>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e002      	b.n	8001cde <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3738      	adds	r7, #56	; 0x38
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	431bde83 	.word	0x431bde83
 8001cf4:	2000057c 	.word	0x2000057c
 8001cf8:	20000014 	.word	0x20000014

08001cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <NMI_Handler+0x4>

08001d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <HardFault_Handler+0x4>

08001d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <MemManage_Handler+0x4>

08001d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <BusFault_Handler+0x4>

08001d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <UsageFault_Handler+0x4>

08001d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <DMA1_Stream0_IRQHandler+0x10>)
 8001d5a:	f001 feb5 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000093c 	.word	0x2000093c

08001d68 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <DMA1_Stream1_IRQHandler+0x10>)
 8001d6e:	f001 feab 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000b7c 	.word	0x20000b7c

08001d7c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <DMA1_Stream2_IRQHandler+0x10>)
 8001d82:	f001 fea1 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000087c 	.word	0x2000087c

08001d90 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <DMA1_Stream3_IRQHandler+0x10>)
 8001d96:	f001 fe97 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000bdc 	.word	0x20000bdc

08001da4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <DMA1_Stream4_IRQHandler+0x10>)
 8001daa:	f001 fe8d 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200008dc 	.word	0x200008dc

08001db8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <DMA1_Stream5_IRQHandler+0x10>)
 8001dbe:	f001 fe83 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000abc 	.word	0x20000abc

08001dcc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <DMA1_Stream6_IRQHandler+0x10>)
 8001dd2:	f001 fe79 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000b1c 	.word	0x20000b1c

08001de0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <TIM2_IRQHandler+0x10>)
 8001de6:	f004 fb14 	bl	8006412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000057c 	.word	0x2000057c

08001df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <USART1_IRQHandler+0x10>)
 8001dfa:	f005 f9df 	bl	80071bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000076c 	.word	0x2000076c

08001e08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <USART2_IRQHandler+0x10>)
 8001e0e:	f005 f9d5 	bl	80071bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200007b0 	.word	0x200007b0

08001e1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <USART3_IRQHandler+0x10>)
 8001e22:	f005 f9cb 	bl	80071bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200007f4 	.word	0x200007f4

08001e30 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <DMA1_Stream7_IRQHandler+0x10>)
 8001e36:	f001 fe47 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000099c 	.word	0x2000099c

08001e44 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <UART4_IRQHandler+0x10>)
 8001e4a:	f005 f9b7 	bl	80071bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200006e4 	.word	0x200006e4

08001e58 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <UART5_IRQHandler+0x10>)
 8001e5e:	f005 f9ad 	bl	80071bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000728 	.word	0x20000728

08001e6c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <DMA2_Stream1_IRQHandler+0x10>)
 8001e72:	f001 fe29 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000c3c 	.word	0x20000c3c

08001e80 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <DMA2_Stream2_IRQHandler+0x10>)
 8001e86:	f001 fe1f 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200009fc 	.word	0x200009fc

08001e94 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <DMA2_Stream6_IRQHandler+0x10>)
 8001e9a:	f001 fe15 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000c9c 	.word	0x20000c9c

08001ea8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <DMA2_Stream7_IRQHandler+0x10>)
 8001eae:	f001 fe0b 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000a5c 	.word	0x20000a5c

08001ebc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <USART6_IRQHandler+0x10>)
 8001ec2:	f005 f97b 	bl	80071bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000838 	.word	0x20000838

08001ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <SystemInit+0x20>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <SystemInit+0x20>)
 8001edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b096      	sub	sp, #88	; 0x58
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001efa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
 8001f22:	615a      	str	r2, [r3, #20]
 8001f24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2220      	movs	r2, #32
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f006 f835 	bl	8007f9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f32:	4b50      	ldr	r3, [pc, #320]	; (8002074 <MX_TIM1_Init+0x180>)
 8001f34:	4a50      	ldr	r2, [pc, #320]	; (8002078 <MX_TIM1_Init+0x184>)
 8001f36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f38:	4b4e      	ldr	r3, [pc, #312]	; (8002074 <MX_TIM1_Init+0x180>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3e:	4b4d      	ldr	r3, [pc, #308]	; (8002074 <MX_TIM1_Init+0x180>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001f44:	4b4b      	ldr	r3, [pc, #300]	; (8002074 <MX_TIM1_Init+0x180>)
 8001f46:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001f4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4c:	4b49      	ldr	r3, [pc, #292]	; (8002074 <MX_TIM1_Init+0x180>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f52:	4b48      	ldr	r3, [pc, #288]	; (8002074 <MX_TIM1_Init+0x180>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f58:	4b46      	ldr	r3, [pc, #280]	; (8002074 <MX_TIM1_Init+0x180>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f5e:	4845      	ldr	r0, [pc, #276]	; (8002074 <MX_TIM1_Init+0x180>)
 8001f60:	f004 f93f 	bl	80061e2 <HAL_TIM_Base_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f6a:	f7ff fda0 	bl	8001aae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f72:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f78:	4619      	mov	r1, r3
 8001f7a:	483e      	ldr	r0, [pc, #248]	; (8002074 <MX_TIM1_Init+0x180>)
 8001f7c:	f004 fc14 	bl	80067a8 <HAL_TIM_ConfigClockSource>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f86:	f7ff fd92 	bl	8001aae <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f8a:	483a      	ldr	r0, [pc, #232]	; (8002074 <MX_TIM1_Init+0x180>)
 8001f8c:	f004 f9e8 	bl	8006360 <HAL_TIM_PWM_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f96:	f7ff fd8a 	bl	8001aae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fa2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4832      	ldr	r0, [pc, #200]	; (8002074 <MX_TIM1_Init+0x180>)
 8001faa:	f004 ffd7 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001fb4:	f7ff fd7b 	bl	8001aae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb8:	2360      	movs	r3, #96	; 0x60
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	2200      	movs	r2, #0
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4825      	ldr	r0, [pc, #148]	; (8002074 <MX_TIM1_Init+0x180>)
 8001fde:	f004 fb21 	bl	8006624 <HAL_TIM_PWM_ConfigChannel>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001fe8:	f7ff fd61 	bl	8001aae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	481f      	ldr	r0, [pc, #124]	; (8002074 <MX_TIM1_Init+0x180>)
 8001ff6:	f004 fb15 	bl	8006624 <HAL_TIM_PWM_ConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002000:	f7ff fd55 	bl	8001aae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	2208      	movs	r2, #8
 800200a:	4619      	mov	r1, r3
 800200c:	4819      	ldr	r0, [pc, #100]	; (8002074 <MX_TIM1_Init+0x180>)
 800200e:	f004 fb09 	bl	8006624 <HAL_TIM_PWM_ConfigChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002018:	f7ff fd49 	bl	8001aae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800201c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002020:	220c      	movs	r2, #12
 8002022:	4619      	mov	r1, r3
 8002024:	4813      	ldr	r0, [pc, #76]	; (8002074 <MX_TIM1_Init+0x180>)
 8002026:	f004 fafd 	bl	8006624 <HAL_TIM_PWM_ConfigChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002030:	f7ff fd3d 	bl	8001aae <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4807      	ldr	r0, [pc, #28]	; (8002074 <MX_TIM1_Init+0x180>)
 8002058:	f004 fffc 	bl	8007054 <HAL_TIMEx_ConfigBreakDeadTime>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002062:	f7ff fd24 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002066:	4803      	ldr	r0, [pc, #12]	; (8002074 <MX_TIM1_Init+0x180>)
 8002068:	f000 f9b4 	bl	80023d4 <HAL_TIM_MspPostInit>

}
 800206c:	bf00      	nop
 800206e:	3758      	adds	r7, #88	; 0x58
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200005c4 	.word	0x200005c4
 8002078:	40010000 	.word	0x40010000

0800207c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002082:	f107 0308 	add.w	r3, r7, #8
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	463b      	mov	r3, r7
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <MX_TIM3_Init+0x94>)
 800209a:	4a1e      	ldr	r2, [pc, #120]	; (8002114 <MX_TIM3_Init+0x98>)
 800209c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800209e:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <MX_TIM3_Init+0x94>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <MX_TIM3_Init+0x94>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <MX_TIM3_Init+0x94>)
 80020ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b2:	4b17      	ldr	r3, [pc, #92]	; (8002110 <MX_TIM3_Init+0x94>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b8:	4b15      	ldr	r3, [pc, #84]	; (8002110 <MX_TIM3_Init+0x94>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020be:	4814      	ldr	r0, [pc, #80]	; (8002110 <MX_TIM3_Init+0x94>)
 80020c0:	f004 f88f 	bl	80061e2 <HAL_TIM_Base_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80020ca:	f7ff fcf0 	bl	8001aae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020d4:	f107 0308 	add.w	r3, r7, #8
 80020d8:	4619      	mov	r1, r3
 80020da:	480d      	ldr	r0, [pc, #52]	; (8002110 <MX_TIM3_Init+0x94>)
 80020dc:	f004 fb64 	bl	80067a8 <HAL_TIM_ConfigClockSource>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80020e6:	f7ff fce2 	bl	8001aae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020f2:	463b      	mov	r3, r7
 80020f4:	4619      	mov	r1, r3
 80020f6:	4806      	ldr	r0, [pc, #24]	; (8002110 <MX_TIM3_Init+0x94>)
 80020f8:	f004 ff30 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002102:	f7ff fcd4 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000060c 	.word	0x2000060c
 8002114:	40000400 	.word	0x40000400

08002118 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211e:	f107 0308 	add.w	r3, r7, #8
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212c:	463b      	mov	r3, r7
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002134:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <MX_TIM5_Init+0x94>)
 8002136:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <MX_TIM5_Init+0x98>)
 8002138:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <MX_TIM5_Init+0x94>)
 800213c:	2253      	movs	r2, #83	; 0x53
 800213e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <MX_TIM5_Init+0x94>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff -1;
 8002146:	4b19      	ldr	r3, [pc, #100]	; (80021ac <MX_TIM5_Init+0x94>)
 8002148:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800214c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <MX_TIM5_Init+0x94>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <MX_TIM5_Init+0x94>)
 8002156:	2200      	movs	r2, #0
 8002158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800215a:	4814      	ldr	r0, [pc, #80]	; (80021ac <MX_TIM5_Init+0x94>)
 800215c:	f004 f841 	bl	80061e2 <HAL_TIM_Base_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002166:	f7ff fca2 	bl	8001aae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800216a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	4619      	mov	r1, r3
 8002176:	480d      	ldr	r0, [pc, #52]	; (80021ac <MX_TIM5_Init+0x94>)
 8002178:	f004 fb16 	bl	80067a8 <HAL_TIM_ConfigClockSource>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002182:	f7ff fc94 	bl	8001aae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800218e:	463b      	mov	r3, r7
 8002190:	4619      	mov	r1, r3
 8002192:	4806      	ldr	r0, [pc, #24]	; (80021ac <MX_TIM5_Init+0x94>)
 8002194:	f004 fee2 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800219e:	f7ff fc86 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000654 	.word	0x20000654
 80021b0:	40000c00 	.word	0x40000c00

080021b4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b096      	sub	sp, #88	; 0x58
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]
 80021e2:	615a      	str	r2, [r3, #20]
 80021e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	2220      	movs	r2, #32
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f005 fed5 	bl	8007f9c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021f2:	4b44      	ldr	r3, [pc, #272]	; (8002304 <MX_TIM8_Init+0x150>)
 80021f4:	4a44      	ldr	r2, [pc, #272]	; (8002308 <MX_TIM8_Init+0x154>)
 80021f6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80021f8:	4b42      	ldr	r3, [pc, #264]	; (8002304 <MX_TIM8_Init+0x150>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <MX_TIM8_Init+0x150>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002204:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <MX_TIM8_Init+0x150>)
 8002206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800220a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220c:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <MX_TIM8_Init+0x150>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002212:	4b3c      	ldr	r3, [pc, #240]	; (8002304 <MX_TIM8_Init+0x150>)
 8002214:	2200      	movs	r2, #0
 8002216:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002218:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <MX_TIM8_Init+0x150>)
 800221a:	2200      	movs	r2, #0
 800221c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800221e:	4839      	ldr	r0, [pc, #228]	; (8002304 <MX_TIM8_Init+0x150>)
 8002220:	f003 ffdf 	bl	80061e2 <HAL_TIM_Base_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800222a:	f7ff fc40 	bl	8001aae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800222e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002234:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002238:	4619      	mov	r1, r3
 800223a:	4832      	ldr	r0, [pc, #200]	; (8002304 <MX_TIM8_Init+0x150>)
 800223c:	f004 fab4 	bl	80067a8 <HAL_TIM_ConfigClockSource>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002246:	f7ff fc32 	bl	8001aae <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800224a:	482e      	ldr	r0, [pc, #184]	; (8002304 <MX_TIM8_Init+0x150>)
 800224c:	f004 f888 	bl	8006360 <HAL_TIM_PWM_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002256:	f7ff fc2a 	bl	8001aae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002262:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002266:	4619      	mov	r1, r3
 8002268:	4826      	ldr	r0, [pc, #152]	; (8002304 <MX_TIM8_Init+0x150>)
 800226a:	f004 fe77 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002274:	f7ff fc1b 	bl	8001aae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002278:	2360      	movs	r3, #96	; 0x60
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002284:	2300      	movs	r3, #0
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002290:	2300      	movs	r3, #0
 8002292:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002298:	2208      	movs	r2, #8
 800229a:	4619      	mov	r1, r3
 800229c:	4819      	ldr	r0, [pc, #100]	; (8002304 <MX_TIM8_Init+0x150>)
 800229e:	f004 f9c1 	bl	8006624 <HAL_TIM_PWM_ConfigChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80022a8:	f7ff fc01 	bl	8001aae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b0:	220c      	movs	r2, #12
 80022b2:	4619      	mov	r1, r3
 80022b4:	4813      	ldr	r0, [pc, #76]	; (8002304 <MX_TIM8_Init+0x150>)
 80022b6:	f004 f9b5 	bl	8006624 <HAL_TIM_PWM_ConfigChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80022c0:	f7ff fbf5 	bl	8001aae <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	4619      	mov	r1, r3
 80022e6:	4807      	ldr	r0, [pc, #28]	; (8002304 <MX_TIM8_Init+0x150>)
 80022e8:	f004 feb4 	bl	8007054 <HAL_TIMEx_ConfigBreakDeadTime>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80022f2:	f7ff fbdc 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80022f6:	4803      	ldr	r0, [pc, #12]	; (8002304 <MX_TIM8_Init+0x150>)
 80022f8:	f000 f86c 	bl	80023d4 <HAL_TIM_MspPostInit>

}
 80022fc:	bf00      	nop
 80022fe:	3758      	adds	r7, #88	; 0x58
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	2000069c 	.word	0x2000069c
 8002308:	40010400 	.word	0x40010400

0800230c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a29      	ldr	r2, [pc, #164]	; (80023c0 <HAL_TIM_Base_MspInit+0xb4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d10e      	bne.n	800233c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800233a:	e03a      	b.n	80023b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <HAL_TIM_Base_MspInit+0xbc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10e      	bne.n	8002364 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_TIM_Base_MspInit+0xb8>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]
}
 8002362:	e026      	b.n	80023b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a18      	ldr	r2, [pc, #96]	; (80023cc <HAL_TIM_Base_MspInit+0xc0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d10e      	bne.n	800238c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002378:	f043 0308 	orr.w	r3, r3, #8
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
}
 800238a:	e012      	b.n	80023b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0f      	ldr	r2, [pc, #60]	; (80023d0 <HAL_TIM_Base_MspInit+0xc4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10d      	bne.n	80023b2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_TIM_Base_MspInit+0xb8>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_TIM_Base_MspInit+0xb8>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_TIM_Base_MspInit+0xb8>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
}
 80023b2:	bf00      	nop
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40010000 	.word	0x40010000
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40000c00 	.word	0x40000c00
 80023d0:	40010400 	.word	0x40010400

080023d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a25      	ldr	r2, [pc, #148]	; (8002488 <HAL_TIM_MspPostInit+0xb4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d11f      	bne.n	8002436 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_TIM_MspPostInit+0xb8>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a23      	ldr	r2, [pc, #140]	; (800248c <HAL_TIM_MspPostInit+0xb8>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_TIM_MspPostInit+0xb8>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MTR1_PWM_MCU_Pin|MTR2_PWM_MCU_Pin|MTR3_PWM_MCU_Pin|MTR4_PWM_MCU_Pin;
 8002412:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002424:	2301      	movs	r3, #1
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	4818      	ldr	r0, [pc, #96]	; (8002490 <HAL_TIM_MspPostInit+0xbc>)
 8002430:	f001 fd86 	bl	8003f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002434:	e023      	b.n	800247e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a16      	ldr	r2, [pc, #88]	; (8002494 <HAL_TIM_MspPostInit+0xc0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d11e      	bne.n	800247e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_TIM_MspPostInit+0xb8>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	4a10      	ldr	r2, [pc, #64]	; (800248c <HAL_TIM_MspPostInit+0xb8>)
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	6313      	str	r3, [r2, #48]	; 0x30
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_TIM_MspPostInit+0xb8>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_PWM_TIM8_CH3_Pin|LED_5050_PWM_IN_Pin;
 800245c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800246e:	2303      	movs	r3, #3
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	4807      	ldr	r0, [pc, #28]	; (8002498 <HAL_TIM_MspPostInit+0xc4>)
 800247a:	f001 fd61 	bl	8003f40 <HAL_GPIO_Init>
}
 800247e:	bf00      	nop
 8002480:	3728      	adds	r7, #40	; 0x28
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40010000 	.word	0x40010000
 800248c:	40023800 	.word	0x40023800
 8002490:	40020000 	.word	0x40020000
 8002494:	40010400 	.word	0x40010400
 8002498:	40020800 	.word	0x40020800

0800249c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <MX_UART4_Init+0x4c>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <MX_UART4_Init+0x50>)
 80024a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <MX_UART4_Init+0x4c>)
 80024a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <MX_UART4_Init+0x4c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <MX_UART4_Init+0x4c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <MX_UART4_Init+0x4c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <MX_UART4_Init+0x4c>)
 80024c2:	220c      	movs	r2, #12
 80024c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <MX_UART4_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <MX_UART4_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024d2:	4805      	ldr	r0, [pc, #20]	; (80024e8 <MX_UART4_Init+0x4c>)
 80024d4:	f004 fe24 	bl	8007120 <HAL_UART_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80024de:	f7ff fae6 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200006e4 	.word	0x200006e4
 80024ec:	40004c00 	.word	0x40004c00

080024f0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_UART5_Init+0x4c>)
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <MX_UART5_Init+0x50>)
 80024f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <MX_UART5_Init+0x4c>)
 80024fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002500:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_UART5_Init+0x4c>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_UART5_Init+0x4c>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <MX_UART5_Init+0x4c>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_UART5_Init+0x4c>)
 8002516:	220c      	movs	r2, #12
 8002518:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <MX_UART5_Init+0x4c>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_UART5_Init+0x4c>)
 8002522:	2200      	movs	r2, #0
 8002524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_UART5_Init+0x4c>)
 8002528:	f004 fdfa 	bl	8007120 <HAL_UART_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002532:	f7ff fabc 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000728 	.word	0x20000728
 8002540:	40005000 	.word	0x40005000

08002544 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <MX_USART1_UART_Init+0x50>)
 800254c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800256a:	220c      	movs	r2, #12
 800256c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800257a:	4805      	ldr	r0, [pc, #20]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800257c:	f004 fdd0 	bl	8007120 <HAL_UART_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002586:	f7ff fa92 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000076c 	.word	0x2000076c
 8002594:	40011000 	.word	0x40011000

08002598 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 800259e:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <MX_USART2_UART_Init+0x50>)
 80025a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025be:	220c      	movs	r2, #12
 80025c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025ce:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025d0:	f004 fda6 	bl	8007120 <HAL_UART_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025da:	f7ff fa68 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200007b0 	.word	0x200007b0
 80025e8:	40004400 	.word	0x40004400

080025ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <MX_USART3_UART_Init+0x50>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 80025f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 8002624:	f004 fd7c 	bl	8007120 <HAL_UART_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800262e:	f7ff fa3e 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200007f4 	.word	0x200007f4
 800263c:	40004800 	.word	0x40004800

08002640 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <MX_USART6_UART_Init+0x4c>)
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <MX_USART6_UART_Init+0x50>)
 8002648:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <MX_USART6_UART_Init+0x4c>)
 800264c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002650:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <MX_USART6_UART_Init+0x4c>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <MX_USART6_UART_Init+0x4c>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <MX_USART6_UART_Init+0x4c>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <MX_USART6_UART_Init+0x4c>)
 8002666:	220c      	movs	r2, #12
 8002668:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <MX_USART6_UART_Init+0x4c>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <MX_USART6_UART_Init+0x4c>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <MX_USART6_UART_Init+0x4c>)
 8002678:	f004 fd52 	bl	8007120 <HAL_UART_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002682:	f7ff fa14 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000838 	.word	0x20000838
 8002690:	40011400 	.word	0x40011400

08002694 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b094      	sub	sp, #80	; 0x50
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a4a      	ldr	r2, [pc, #296]	; (80027dc <HAL_UART_MspInit+0x148>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	f040 80a0 	bne.w	80027f8 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80026b8:	2300      	movs	r3, #0
 80026ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80026bc:	4b48      	ldr	r3, [pc, #288]	; (80027e0 <HAL_UART_MspInit+0x14c>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	4a47      	ldr	r2, [pc, #284]	; (80027e0 <HAL_UART_MspInit+0x14c>)
 80026c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026c6:	6413      	str	r3, [r2, #64]	; 0x40
 80026c8:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <HAL_UART_MspInit+0x14c>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d4:	2300      	movs	r3, #0
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
 80026d8:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <HAL_UART_MspInit+0x14c>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	4a40      	ldr	r2, [pc, #256]	; (80027e0 <HAL_UART_MspInit+0x14c>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6313      	str	r3, [r2, #48]	; 0x30
 80026e4:	4b3e      	ldr	r3, [pc, #248]	; (80027e0 <HAL_UART_MspInit+0x14c>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MCU_ESP32_TX_Pin|MCU_ESP32_RX_Pin;
 80026f0:	2303      	movs	r3, #3
 80026f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fc:	2303      	movs	r3, #3
 80026fe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002700:	2308      	movs	r3, #8
 8002702:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002708:	4619      	mov	r1, r3
 800270a:	4836      	ldr	r0, [pc, #216]	; (80027e4 <HAL_UART_MspInit+0x150>)
 800270c:	f001 fc18 	bl	8003f40 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <HAL_UART_MspInit+0x154>)
 8002712:	4a36      	ldr	r2, [pc, #216]	; (80027ec <HAL_UART_MspInit+0x158>)
 8002714:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002716:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <HAL_UART_MspInit+0x154>)
 8002718:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800271c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800271e:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <HAL_UART_MspInit+0x154>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002724:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_UART_MspInit+0x154>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800272a:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <HAL_UART_MspInit+0x154>)
 800272c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002730:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_UART_MspInit+0x154>)
 8002734:	2200      	movs	r2, #0
 8002736:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_UART_MspInit+0x154>)
 800273a:	2200      	movs	r2, #0
 800273c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800273e:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <HAL_UART_MspInit+0x154>)
 8002740:	2200      	movs	r2, #0
 8002742:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002744:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <HAL_UART_MspInit+0x154>)
 8002746:	2200      	movs	r2, #0
 8002748:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800274a:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_UART_MspInit+0x154>)
 800274c:	2200      	movs	r2, #0
 800274e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002750:	4825      	ldr	r0, [pc, #148]	; (80027e8 <HAL_UART_MspInit+0x154>)
 8002752:	f001 f879 	bl	8003848 <HAL_DMA_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800275c:	f7ff f9a7 	bl	8001aae <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <HAL_UART_MspInit+0x154>)
 8002764:	639a      	str	r2, [r3, #56]	; 0x38
 8002766:	4a20      	ldr	r2, [pc, #128]	; (80027e8 <HAL_UART_MspInit+0x154>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800276c:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_UART_MspInit+0x15c>)
 800276e:	4a21      	ldr	r2, [pc, #132]	; (80027f4 <HAL_UART_MspInit+0x160>)
 8002770:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002772:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <HAL_UART_MspInit+0x15c>)
 8002774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002778:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_UART_MspInit+0x15c>)
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_UART_MspInit+0x15c>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_UART_MspInit+0x15c>)
 8002788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800278c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <HAL_UART_MspInit+0x15c>)
 8002790:	2200      	movs	r2, #0
 8002792:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_UART_MspInit+0x15c>)
 8002796:	2200      	movs	r2, #0
 8002798:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_UART_MspInit+0x15c>)
 800279c:	2200      	movs	r2, #0
 800279e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <HAL_UART_MspInit+0x15c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_UART_MspInit+0x15c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80027ac:	4810      	ldr	r0, [pc, #64]	; (80027f0 <HAL_UART_MspInit+0x15c>)
 80027ae:	f001 f84b 	bl	8003848 <HAL_DMA_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80027b8:	f7ff f979 	bl	8001aae <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <HAL_UART_MspInit+0x15c>)
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34
 80027c2:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <HAL_UART_MspInit+0x15c>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2100      	movs	r1, #0
 80027cc:	2034      	movs	r0, #52	; 0x34
 80027ce:	f001 f811 	bl	80037f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80027d2:	2034      	movs	r0, #52	; 0x34
 80027d4:	f001 f82a 	bl	800382c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80027d8:	e34a      	b.n	8002e70 <HAL_UART_MspInit+0x7dc>
 80027da:	bf00      	nop
 80027dc:	40004c00 	.word	0x40004c00
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020000 	.word	0x40020000
 80027e8:	2000087c 	.word	0x2000087c
 80027ec:	40026040 	.word	0x40026040
 80027f0:	200008dc 	.word	0x200008dc
 80027f4:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a59      	ldr	r2, [pc, #356]	; (8002964 <HAL_UART_MspInit+0x2d0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	f040 80c0 	bne.w	8002984 <HAL_UART_MspInit+0x2f0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002804:	2300      	movs	r3, #0
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
 8002808:	4b57      	ldr	r3, [pc, #348]	; (8002968 <HAL_UART_MspInit+0x2d4>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	4a56      	ldr	r2, [pc, #344]	; (8002968 <HAL_UART_MspInit+0x2d4>)
 800280e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002812:	6413      	str	r3, [r2, #64]	; 0x40
 8002814:	4b54      	ldr	r3, [pc, #336]	; (8002968 <HAL_UART_MspInit+0x2d4>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281c:	633b      	str	r3, [r7, #48]	; 0x30
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002824:	4b50      	ldr	r3, [pc, #320]	; (8002968 <HAL_UART_MspInit+0x2d4>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	4a4f      	ldr	r2, [pc, #316]	; (8002968 <HAL_UART_MspInit+0x2d4>)
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6313      	str	r3, [r2, #48]	; 0x30
 8002830:	4b4d      	ldr	r3, [pc, #308]	; (8002968 <HAL_UART_MspInit+0x2d4>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800283c:	2300      	movs	r3, #0
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002840:	4b49      	ldr	r3, [pc, #292]	; (8002968 <HAL_UART_MspInit+0x2d4>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	4a48      	ldr	r2, [pc, #288]	; (8002968 <HAL_UART_MspInit+0x2d4>)
 8002846:	f043 0308 	orr.w	r3, r3, #8
 800284a:	6313      	str	r3, [r2, #48]	; 0x30
 800284c:	4b46      	ldr	r3, [pc, #280]	; (8002968 <HAL_UART_MspInit+0x2d4>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = MCU_UART5_TX_Pin;
 8002858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002866:	2303      	movs	r3, #3
 8002868:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800286a:	2308      	movs	r3, #8
 800286c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 800286e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002872:	4619      	mov	r1, r3
 8002874:	483d      	ldr	r0, [pc, #244]	; (800296c <HAL_UART_MspInit+0x2d8>)
 8002876:	f001 fb63 	bl	8003f40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MCU_UART5_RX_Pin;
 800287a:	2304      	movs	r3, #4
 800287c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800288a:	2308      	movs	r3, #8
 800288c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 800288e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002892:	4619      	mov	r1, r3
 8002894:	4836      	ldr	r0, [pc, #216]	; (8002970 <HAL_UART_MspInit+0x2dc>)
 8002896:	f001 fb53 	bl	8003f40 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_UART_MspInit+0x2e0>)
 800289c:	4a36      	ldr	r2, [pc, #216]	; (8002978 <HAL_UART_MspInit+0x2e4>)
 800289e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80028a0:	4b34      	ldr	r3, [pc, #208]	; (8002974 <HAL_UART_MspInit+0x2e0>)
 80028a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028a6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a8:	4b32      	ldr	r3, [pc, #200]	; (8002974 <HAL_UART_MspInit+0x2e0>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ae:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_UART_MspInit+0x2e0>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b4:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <HAL_UART_MspInit+0x2e0>)
 80028b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ba:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028bc:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_UART_MspInit+0x2e0>)
 80028be:	2200      	movs	r2, #0
 80028c0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c2:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <HAL_UART_MspInit+0x2e0>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80028c8:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_UART_MspInit+0x2e0>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028ce:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_UART_MspInit+0x2e0>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d4:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_UART_MspInit+0x2e0>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80028da:	4826      	ldr	r0, [pc, #152]	; (8002974 <HAL_UART_MspInit+0x2e0>)
 80028dc:	f000 ffb4 	bl	8003848 <HAL_DMA_Init>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_UART_MspInit+0x256>
      Error_Handler();
 80028e6:	f7ff f8e2 	bl	8001aae <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a21      	ldr	r2, [pc, #132]	; (8002974 <HAL_UART_MspInit+0x2e0>)
 80028ee:	639a      	str	r2, [r3, #56]	; 0x38
 80028f0:	4a20      	ldr	r2, [pc, #128]	; (8002974 <HAL_UART_MspInit+0x2e0>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80028f6:	4b21      	ldr	r3, [pc, #132]	; (800297c <HAL_UART_MspInit+0x2e8>)
 80028f8:	4a21      	ldr	r2, [pc, #132]	; (8002980 <HAL_UART_MspInit+0x2ec>)
 80028fa:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80028fc:	4b1f      	ldr	r3, [pc, #124]	; (800297c <HAL_UART_MspInit+0x2e8>)
 80028fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002902:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002904:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_UART_MspInit+0x2e8>)
 8002906:	2240      	movs	r2, #64	; 0x40
 8002908:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <HAL_UART_MspInit+0x2e8>)
 800290c:	2200      	movs	r2, #0
 800290e:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002910:	4b1a      	ldr	r3, [pc, #104]	; (800297c <HAL_UART_MspInit+0x2e8>)
 8002912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002916:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_UART_MspInit+0x2e8>)
 800291a:	2200      	movs	r2, #0
 800291c:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800291e:	4b17      	ldr	r3, [pc, #92]	; (800297c <HAL_UART_MspInit+0x2e8>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002924:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_UART_MspInit+0x2e8>)
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_UART_MspInit+0x2e8>)
 800292c:	2200      	movs	r2, #0
 800292e:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_UART_MspInit+0x2e8>)
 8002932:	2200      	movs	r2, #0
 8002934:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002936:	4811      	ldr	r0, [pc, #68]	; (800297c <HAL_UART_MspInit+0x2e8>)
 8002938:	f000 ff86 	bl	8003848 <HAL_DMA_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8002942:	f7ff f8b4 	bl	8001aae <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a0c      	ldr	r2, [pc, #48]	; (800297c <HAL_UART_MspInit+0x2e8>)
 800294a:	635a      	str	r2, [r3, #52]	; 0x34
 800294c:	4a0b      	ldr	r2, [pc, #44]	; (800297c <HAL_UART_MspInit+0x2e8>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	2035      	movs	r0, #53	; 0x35
 8002958:	f000 ff4c 	bl	80037f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800295c:	2035      	movs	r0, #53	; 0x35
 800295e:	f000 ff65 	bl	800382c <HAL_NVIC_EnableIRQ>
}
 8002962:	e285      	b.n	8002e70 <HAL_UART_MspInit+0x7dc>
 8002964:	40005000 	.word	0x40005000
 8002968:	40023800 	.word	0x40023800
 800296c:	40020800 	.word	0x40020800
 8002970:	40020c00 	.word	0x40020c00
 8002974:	2000093c 	.word	0x2000093c
 8002978:	40026010 	.word	0x40026010
 800297c:	2000099c 	.word	0x2000099c
 8002980:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a95      	ldr	r2, [pc, #596]	; (8002be0 <HAL_UART_MspInit+0x54c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	f040 8091 	bne.w	8002ab2 <HAL_UART_MspInit+0x41e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
 8002994:	4b93      	ldr	r3, [pc, #588]	; (8002be4 <HAL_UART_MspInit+0x550>)
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	4a92      	ldr	r2, [pc, #584]	; (8002be4 <HAL_UART_MspInit+0x550>)
 800299a:	f043 0310 	orr.w	r3, r3, #16
 800299e:	6453      	str	r3, [r2, #68]	; 0x44
 80029a0:	4b90      	ldr	r3, [pc, #576]	; (8002be4 <HAL_UART_MspInit+0x550>)
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ac:	2300      	movs	r3, #0
 80029ae:	623b      	str	r3, [r7, #32]
 80029b0:	4b8c      	ldr	r3, [pc, #560]	; (8002be4 <HAL_UART_MspInit+0x550>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	4a8b      	ldr	r2, [pc, #556]	; (8002be4 <HAL_UART_MspInit+0x550>)
 80029b6:	f043 0302 	orr.w	r3, r3, #2
 80029ba:	6313      	str	r3, [r2, #48]	; 0x30
 80029bc:	4b89      	ldr	r3, [pc, #548]	; (8002be4 <HAL_UART_MspInit+0x550>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	623b      	str	r3, [r7, #32]
 80029c6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = MCU_USART1_TX_Pin|MCU_USART1_RX_Pin;
 80029c8:	23c0      	movs	r3, #192	; 0xc0
 80029ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029d8:	2307      	movs	r3, #7
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029e0:	4619      	mov	r1, r3
 80029e2:	4881      	ldr	r0, [pc, #516]	; (8002be8 <HAL_UART_MspInit+0x554>)
 80029e4:	f001 faac 	bl	8003f40 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80029e8:	4b80      	ldr	r3, [pc, #512]	; (8002bec <HAL_UART_MspInit+0x558>)
 80029ea:	4a81      	ldr	r2, [pc, #516]	; (8002bf0 <HAL_UART_MspInit+0x55c>)
 80029ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80029ee:	4b7f      	ldr	r3, [pc, #508]	; (8002bec <HAL_UART_MspInit+0x558>)
 80029f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029f6:	4b7d      	ldr	r3, [pc, #500]	; (8002bec <HAL_UART_MspInit+0x558>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029fc:	4b7b      	ldr	r3, [pc, #492]	; (8002bec <HAL_UART_MspInit+0x558>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a02:	4b7a      	ldr	r3, [pc, #488]	; (8002bec <HAL_UART_MspInit+0x558>)
 8002a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a08:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a0a:	4b78      	ldr	r3, [pc, #480]	; (8002bec <HAL_UART_MspInit+0x558>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a10:	4b76      	ldr	r3, [pc, #472]	; (8002bec <HAL_UART_MspInit+0x558>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002a16:	4b75      	ldr	r3, [pc, #468]	; (8002bec <HAL_UART_MspInit+0x558>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a1c:	4b73      	ldr	r3, [pc, #460]	; (8002bec <HAL_UART_MspInit+0x558>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a22:	4b72      	ldr	r3, [pc, #456]	; (8002bec <HAL_UART_MspInit+0x558>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a28:	4870      	ldr	r0, [pc, #448]	; (8002bec <HAL_UART_MspInit+0x558>)
 8002a2a:	f000 ff0d 	bl	8003848 <HAL_DMA_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 8002a34:	f7ff f83b 	bl	8001aae <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a6c      	ldr	r2, [pc, #432]	; (8002bec <HAL_UART_MspInit+0x558>)
 8002a3c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a3e:	4a6b      	ldr	r2, [pc, #428]	; (8002bec <HAL_UART_MspInit+0x558>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002a44:	4b6b      	ldr	r3, [pc, #428]	; (8002bf4 <HAL_UART_MspInit+0x560>)
 8002a46:	4a6c      	ldr	r2, [pc, #432]	; (8002bf8 <HAL_UART_MspInit+0x564>)
 8002a48:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002a4a:	4b6a      	ldr	r3, [pc, #424]	; (8002bf4 <HAL_UART_MspInit+0x560>)
 8002a4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a50:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a52:	4b68      	ldr	r3, [pc, #416]	; (8002bf4 <HAL_UART_MspInit+0x560>)
 8002a54:	2240      	movs	r2, #64	; 0x40
 8002a56:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a58:	4b66      	ldr	r3, [pc, #408]	; (8002bf4 <HAL_UART_MspInit+0x560>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a5e:	4b65      	ldr	r3, [pc, #404]	; (8002bf4 <HAL_UART_MspInit+0x560>)
 8002a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a64:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a66:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <HAL_UART_MspInit+0x560>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a6c:	4b61      	ldr	r3, [pc, #388]	; (8002bf4 <HAL_UART_MspInit+0x560>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a72:	4b60      	ldr	r3, [pc, #384]	; (8002bf4 <HAL_UART_MspInit+0x560>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a78:	4b5e      	ldr	r3, [pc, #376]	; (8002bf4 <HAL_UART_MspInit+0x560>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a7e:	4b5d      	ldr	r3, [pc, #372]	; (8002bf4 <HAL_UART_MspInit+0x560>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a84:	485b      	ldr	r0, [pc, #364]	; (8002bf4 <HAL_UART_MspInit+0x560>)
 8002a86:	f000 fedf 	bl	8003848 <HAL_DMA_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_UART_MspInit+0x400>
      Error_Handler();
 8002a90:	f7ff f80d 	bl	8001aae <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a57      	ldr	r2, [pc, #348]	; (8002bf4 <HAL_UART_MspInit+0x560>)
 8002a98:	635a      	str	r2, [r3, #52]	; 0x34
 8002a9a:	4a56      	ldr	r2, [pc, #344]	; (8002bf4 <HAL_UART_MspInit+0x560>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	2025      	movs	r0, #37	; 0x25
 8002aa6:	f000 fea5 	bl	80037f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002aaa:	2025      	movs	r0, #37	; 0x25
 8002aac:	f000 febe 	bl	800382c <HAL_NVIC_EnableIRQ>
}
 8002ab0:	e1de      	b.n	8002e70 <HAL_UART_MspInit+0x7dc>
  else if(uartHandle->Instance==USART2)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a51      	ldr	r2, [pc, #324]	; (8002bfc <HAL_UART_MspInit+0x568>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	f040 80ab 	bne.w	8002c14 <HAL_UART_MspInit+0x580>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	4b48      	ldr	r3, [pc, #288]	; (8002be4 <HAL_UART_MspInit+0x550>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a47      	ldr	r2, [pc, #284]	; (8002be4 <HAL_UART_MspInit+0x550>)
 8002ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b45      	ldr	r3, [pc, #276]	; (8002be4 <HAL_UART_MspInit+0x550>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_UART_MspInit+0x550>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a40      	ldr	r2, [pc, #256]	; (8002be4 <HAL_UART_MspInit+0x550>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <HAL_UART_MspInit+0x550>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCU_USART2_TX_Pin|MCU_USART2_RX_Pin;
 8002af6:	230c      	movs	r3, #12
 8002af8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b06:	2307      	movs	r3, #7
 8002b08:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	483b      	ldr	r0, [pc, #236]	; (8002c00 <HAL_UART_MspInit+0x56c>)
 8002b12:	f001 fa15 	bl	8003f40 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_UART_MspInit+0x570>)
 8002b18:	4a3b      	ldr	r2, [pc, #236]	; (8002c08 <HAL_UART_MspInit+0x574>)
 8002b1a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002b1c:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <HAL_UART_MspInit+0x570>)
 8002b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b22:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b24:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <HAL_UART_MspInit+0x570>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_UART_MspInit+0x570>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b30:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <HAL_UART_MspInit+0x570>)
 8002b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b36:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b38:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <HAL_UART_MspInit+0x570>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_UART_MspInit+0x570>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b44:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <HAL_UART_MspInit+0x570>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b4a:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <HAL_UART_MspInit+0x570>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b50:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <HAL_UART_MspInit+0x570>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b56:	482b      	ldr	r0, [pc, #172]	; (8002c04 <HAL_UART_MspInit+0x570>)
 8002b58:	f000 fe76 	bl	8003848 <HAL_DMA_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_UART_MspInit+0x4d2>
      Error_Handler();
 8002b62:	f7fe ffa4 	bl	8001aae <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a26      	ldr	r2, [pc, #152]	; (8002c04 <HAL_UART_MspInit+0x570>)
 8002b6a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b6c:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <HAL_UART_MspInit+0x570>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <HAL_UART_MspInit+0x578>)
 8002b74:	4a26      	ldr	r2, [pc, #152]	; (8002c10 <HAL_UART_MspInit+0x57c>)
 8002b76:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_UART_MspInit+0x578>)
 8002b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b7e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_UART_MspInit+0x578>)
 8002b82:	2240      	movs	r2, #64	; 0x40
 8002b84:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b86:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <HAL_UART_MspInit+0x578>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <HAL_UART_MspInit+0x578>)
 8002b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b92:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b94:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <HAL_UART_MspInit+0x578>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_UART_MspInit+0x578>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <HAL_UART_MspInit+0x578>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_UART_MspInit+0x578>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_UART_MspInit+0x578>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002bb2:	4816      	ldr	r0, [pc, #88]	; (8002c0c <HAL_UART_MspInit+0x578>)
 8002bb4:	f000 fe48 	bl	8003848 <HAL_DMA_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_UART_MspInit+0x52e>
      Error_Handler();
 8002bbe:	f7fe ff76 	bl	8001aae <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a11      	ldr	r2, [pc, #68]	; (8002c0c <HAL_UART_MspInit+0x578>)
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc8:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <HAL_UART_MspInit+0x578>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	2026      	movs	r0, #38	; 0x26
 8002bd4:	f000 fe0e 	bl	80037f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bd8:	2026      	movs	r0, #38	; 0x26
 8002bda:	f000 fe27 	bl	800382c <HAL_NVIC_EnableIRQ>
}
 8002bde:	e147      	b.n	8002e70 <HAL_UART_MspInit+0x7dc>
 8002be0:	40011000 	.word	0x40011000
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020400 	.word	0x40020400
 8002bec:	200009fc 	.word	0x200009fc
 8002bf0:	40026440 	.word	0x40026440
 8002bf4:	20000a5c 	.word	0x20000a5c
 8002bf8:	400264b8 	.word	0x400264b8
 8002bfc:	40004400 	.word	0x40004400
 8002c00:	40020000 	.word	0x40020000
 8002c04:	20000abc 	.word	0x20000abc
 8002c08:	40026088 	.word	0x40026088
 8002c0c:	20000b1c 	.word	0x20000b1c
 8002c10:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a97      	ldr	r2, [pc, #604]	; (8002e78 <HAL_UART_MspInit+0x7e4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	f040 8092 	bne.w	8002d44 <HAL_UART_MspInit+0x6b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	4b95      	ldr	r3, [pc, #596]	; (8002e7c <HAL_UART_MspInit+0x7e8>)
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	4a94      	ldr	r2, [pc, #592]	; (8002e7c <HAL_UART_MspInit+0x7e8>)
 8002c2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c30:	4b92      	ldr	r3, [pc, #584]	; (8002e7c <HAL_UART_MspInit+0x7e8>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	4b8e      	ldr	r3, [pc, #568]	; (8002e7c <HAL_UART_MspInit+0x7e8>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	4a8d      	ldr	r2, [pc, #564]	; (8002e7c <HAL_UART_MspInit+0x7e8>)
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4c:	4b8b      	ldr	r3, [pc, #556]	; (8002e7c <HAL_UART_MspInit+0x7e8>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MCU_HLBr_TX_Pin|MCU_HLBr_RX_Pin;
 8002c58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c66:	2303      	movs	r3, #3
 8002c68:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c72:	4619      	mov	r1, r3
 8002c74:	4882      	ldr	r0, [pc, #520]	; (8002e80 <HAL_UART_MspInit+0x7ec>)
 8002c76:	f001 f963 	bl	8003f40 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002c7a:	4b82      	ldr	r3, [pc, #520]	; (8002e84 <HAL_UART_MspInit+0x7f0>)
 8002c7c:	4a82      	ldr	r2, [pc, #520]	; (8002e88 <HAL_UART_MspInit+0x7f4>)
 8002c7e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002c80:	4b80      	ldr	r3, [pc, #512]	; (8002e84 <HAL_UART_MspInit+0x7f0>)
 8002c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c86:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c88:	4b7e      	ldr	r3, [pc, #504]	; (8002e84 <HAL_UART_MspInit+0x7f0>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c8e:	4b7d      	ldr	r3, [pc, #500]	; (8002e84 <HAL_UART_MspInit+0x7f0>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c94:	4b7b      	ldr	r3, [pc, #492]	; (8002e84 <HAL_UART_MspInit+0x7f0>)
 8002c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c9a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c9c:	4b79      	ldr	r3, [pc, #484]	; (8002e84 <HAL_UART_MspInit+0x7f0>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ca2:	4b78      	ldr	r3, [pc, #480]	; (8002e84 <HAL_UART_MspInit+0x7f0>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002ca8:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <HAL_UART_MspInit+0x7f0>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cae:	4b75      	ldr	r3, [pc, #468]	; (8002e84 <HAL_UART_MspInit+0x7f0>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cb4:	4b73      	ldr	r3, [pc, #460]	; (8002e84 <HAL_UART_MspInit+0x7f0>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002cba:	4872      	ldr	r0, [pc, #456]	; (8002e84 <HAL_UART_MspInit+0x7f0>)
 8002cbc:	f000 fdc4 	bl	8003848 <HAL_DMA_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_UART_MspInit+0x636>
      Error_Handler();
 8002cc6:	f7fe fef2 	bl	8001aae <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a6d      	ldr	r2, [pc, #436]	; (8002e84 <HAL_UART_MspInit+0x7f0>)
 8002cce:	639a      	str	r2, [r3, #56]	; 0x38
 8002cd0:	4a6c      	ldr	r2, [pc, #432]	; (8002e84 <HAL_UART_MspInit+0x7f0>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002cd6:	4b6d      	ldr	r3, [pc, #436]	; (8002e8c <HAL_UART_MspInit+0x7f8>)
 8002cd8:	4a6d      	ldr	r2, [pc, #436]	; (8002e90 <HAL_UART_MspInit+0x7fc>)
 8002cda:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002cdc:	4b6b      	ldr	r3, [pc, #428]	; (8002e8c <HAL_UART_MspInit+0x7f8>)
 8002cde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ce2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ce4:	4b69      	ldr	r3, [pc, #420]	; (8002e8c <HAL_UART_MspInit+0x7f8>)
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cea:	4b68      	ldr	r3, [pc, #416]	; (8002e8c <HAL_UART_MspInit+0x7f8>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cf0:	4b66      	ldr	r3, [pc, #408]	; (8002e8c <HAL_UART_MspInit+0x7f8>)
 8002cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cf8:	4b64      	ldr	r3, [pc, #400]	; (8002e8c <HAL_UART_MspInit+0x7f8>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cfe:	4b63      	ldr	r3, [pc, #396]	; (8002e8c <HAL_UART_MspInit+0x7f8>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002d04:	4b61      	ldr	r3, [pc, #388]	; (8002e8c <HAL_UART_MspInit+0x7f8>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d0a:	4b60      	ldr	r3, [pc, #384]	; (8002e8c <HAL_UART_MspInit+0x7f8>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d10:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <HAL_UART_MspInit+0x7f8>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002d16:	485d      	ldr	r0, [pc, #372]	; (8002e8c <HAL_UART_MspInit+0x7f8>)
 8002d18:	f000 fd96 	bl	8003848 <HAL_DMA_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_UART_MspInit+0x692>
      Error_Handler();
 8002d22:	f7fe fec4 	bl	8001aae <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a58      	ldr	r2, [pc, #352]	; (8002e8c <HAL_UART_MspInit+0x7f8>)
 8002d2a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d2c:	4a57      	ldr	r2, [pc, #348]	; (8002e8c <HAL_UART_MspInit+0x7f8>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2100      	movs	r1, #0
 8002d36:	2027      	movs	r0, #39	; 0x27
 8002d38:	f000 fd5c 	bl	80037f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d3c:	2027      	movs	r0, #39	; 0x27
 8002d3e:	f000 fd75 	bl	800382c <HAL_NVIC_EnableIRQ>
}
 8002d42:	e095      	b.n	8002e70 <HAL_UART_MspInit+0x7dc>
  else if(uartHandle->Instance==USART6)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a52      	ldr	r2, [pc, #328]	; (8002e94 <HAL_UART_MspInit+0x800>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	f040 8090 	bne.w	8002e70 <HAL_UART_MspInit+0x7dc>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	4b49      	ldr	r3, [pc, #292]	; (8002e7c <HAL_UART_MspInit+0x7e8>)
 8002d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d58:	4a48      	ldr	r2, [pc, #288]	; (8002e7c <HAL_UART_MspInit+0x7e8>)
 8002d5a:	f043 0320 	orr.w	r3, r3, #32
 8002d5e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d60:	4b46      	ldr	r3, [pc, #280]	; (8002e7c <HAL_UART_MspInit+0x7e8>)
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	4b42      	ldr	r3, [pc, #264]	; (8002e7c <HAL_UART_MspInit+0x7e8>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	4a41      	ldr	r2, [pc, #260]	; (8002e7c <HAL_UART_MspInit+0x7e8>)
 8002d76:	f043 0304 	orr.w	r3, r3, #4
 8002d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_UART_MspInit+0x7e8>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MCU_USART6_TX_Pin|MCU_USART6_RX_Pin;
 8002d88:	23c0      	movs	r3, #192	; 0xc0
 8002d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d94:	2303      	movs	r3, #3
 8002d96:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d98:	2308      	movs	r3, #8
 8002d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002da0:	4619      	mov	r1, r3
 8002da2:	4837      	ldr	r0, [pc, #220]	; (8002e80 <HAL_UART_MspInit+0x7ec>)
 8002da4:	f001 f8cc 	bl	8003f40 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002da8:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_UART_MspInit+0x804>)
 8002daa:	4a3c      	ldr	r2, [pc, #240]	; (8002e9c <HAL_UART_MspInit+0x808>)
 8002dac:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002dae:	4b3a      	ldr	r3, [pc, #232]	; (8002e98 <HAL_UART_MspInit+0x804>)
 8002db0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002db4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002db6:	4b38      	ldr	r3, [pc, #224]	; (8002e98 <HAL_UART_MspInit+0x804>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dbc:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <HAL_UART_MspInit+0x804>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dc2:	4b35      	ldr	r3, [pc, #212]	; (8002e98 <HAL_UART_MspInit+0x804>)
 8002dc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dc8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dca:	4b33      	ldr	r3, [pc, #204]	; (8002e98 <HAL_UART_MspInit+0x804>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dd0:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <HAL_UART_MspInit+0x804>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002dd6:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <HAL_UART_MspInit+0x804>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ddc:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <HAL_UART_MspInit+0x804>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002de2:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <HAL_UART_MspInit+0x804>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002de8:	482b      	ldr	r0, [pc, #172]	; (8002e98 <HAL_UART_MspInit+0x804>)
 8002dea:	f000 fd2d 	bl	8003848 <HAL_DMA_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_UART_MspInit+0x764>
      Error_Handler();
 8002df4:	f7fe fe5b 	bl	8001aae <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <HAL_UART_MspInit+0x804>)
 8002dfc:	639a      	str	r2, [r3, #56]	; 0x38
 8002dfe:	4a26      	ldr	r2, [pc, #152]	; (8002e98 <HAL_UART_MspInit+0x804>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002e04:	4b26      	ldr	r3, [pc, #152]	; (8002ea0 <HAL_UART_MspInit+0x80c>)
 8002e06:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <HAL_UART_MspInit+0x810>)
 8002e08:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002e0a:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <HAL_UART_MspInit+0x80c>)
 8002e0c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002e10:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e12:	4b23      	ldr	r3, [pc, #140]	; (8002ea0 <HAL_UART_MspInit+0x80c>)
 8002e14:	2240      	movs	r2, #64	; 0x40
 8002e16:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_UART_MspInit+0x80c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_UART_MspInit+0x80c>)
 8002e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e24:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_UART_MspInit+0x80c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <HAL_UART_MspInit+0x80c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_UART_MspInit+0x80c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e38:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_UART_MspInit+0x80c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e3e:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <HAL_UART_MspInit+0x80c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002e44:	4816      	ldr	r0, [pc, #88]	; (8002ea0 <HAL_UART_MspInit+0x80c>)
 8002e46:	f000 fcff 	bl	8003848 <HAL_DMA_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_UART_MspInit+0x7c0>
      Error_Handler();
 8002e50:	f7fe fe2d 	bl	8001aae <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <HAL_UART_MspInit+0x80c>)
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34
 8002e5a:	4a11      	ldr	r2, [pc, #68]	; (8002ea0 <HAL_UART_MspInit+0x80c>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2100      	movs	r1, #0
 8002e64:	2047      	movs	r0, #71	; 0x47
 8002e66:	f000 fcc5 	bl	80037f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e6a:	2047      	movs	r0, #71	; 0x47
 8002e6c:	f000 fcde 	bl	800382c <HAL_NVIC_EnableIRQ>
}
 8002e70:	bf00      	nop
 8002e72:	3750      	adds	r7, #80	; 0x50
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40004800 	.word	0x40004800
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40020800 	.word	0x40020800
 8002e84:	20000b7c 	.word	0x20000b7c
 8002e88:	40026028 	.word	0x40026028
 8002e8c:	20000bdc 	.word	0x20000bdc
 8002e90:	40026058 	.word	0x40026058
 8002e94:	40011400 	.word	0x40011400
 8002e98:	20000c3c 	.word	0x20000c3c
 8002e9c:	40026428 	.word	0x40026428
 8002ea0:	20000c9c 	.word	0x20000c9c
 8002ea4:	400264a0 	.word	0x400264a0

08002ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eac:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002eae:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002eb0:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb4:	e002      	b.n	8002ebc <LoopCopyDataInit>

08002eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eba:	3304      	adds	r3, #4

08002ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec0:	d3f9      	bcc.n	8002eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec2:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ec4:	4c0b      	ldr	r4, [pc, #44]	; (8002ef4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec8:	e001      	b.n	8002ece <LoopFillZerobss>

08002eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ecc:	3204      	adds	r2, #4

08002ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed0:	d3fb      	bcc.n	8002eca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ed2:	f7fe fffd 	bl	8001ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ed6:	f005 f823 	bl	8007f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eda:	f7fe fa5d 	bl	8001398 <main>
  bx  lr    
 8002ede:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002eec:	0800a160 	.word	0x0800a160
  ldr r2, =_sbss
 8002ef0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002ef4:	20000d00 	.word	0x20000d00

08002ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef8:	e7fe      	b.n	8002ef8 <ADC_IRQHandler>
	...

08002efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <HAL_Init+0x40>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0d      	ldr	r2, [pc, #52]	; (8002f3c <HAL_Init+0x40>)
 8002f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_Init+0x40>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <HAL_Init+0x40>)
 8002f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f18:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_Init+0x40>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a07      	ldr	r2, [pc, #28]	; (8002f3c <HAL_Init+0x40>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f24:	2003      	movs	r0, #3
 8002f26:	f000 fc5a 	bl	80037de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f2a:	200f      	movs	r0, #15
 8002f2c:	f7fe fe6a 	bl	8001c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f30:	f7fe fe40 	bl	8001bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023c00 	.word	0x40023c00

08002f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_IncTick+0x20>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_IncTick+0x24>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4413      	add	r3, r2
 8002f50:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <HAL_IncTick+0x24>)
 8002f52:	6013      	str	r3, [r2, #0]
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000018 	.word	0x20000018
 8002f64:	20000cfc 	.word	0x20000cfc

08002f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <HAL_GetTick+0x14>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000cfc 	.word	0x20000cfc

08002f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f88:	f7ff ffee 	bl	8002f68 <HAL_GetTick>
 8002f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d005      	beq.n	8002fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_Delay+0x44>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fa6:	bf00      	nop
 8002fa8:	f7ff ffde 	bl	8002f68 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d8f7      	bhi.n	8002fa8 <HAL_Delay+0x28>
  {
  }
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000018 	.word	0x20000018

08002fc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e033      	b.n	8003046 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd ff3a 	bl	8000e60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d118      	bne.n	8003038 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800300e:	f023 0302 	bic.w	r3, r3, #2
 8003012:	f043 0202 	orr.w	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f93a 	bl	8003294 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f023 0303 	bic.w	r3, r3, #3
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
 8003036:	e001      	b.n	800303c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_ADC_ConfigChannel+0x1c>
 8003068:	2302      	movs	r3, #2
 800306a:	e105      	b.n	8003278 <HAL_ADC_ConfigChannel+0x228>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b09      	cmp	r3, #9
 800307a:	d925      	bls.n	80030c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68d9      	ldr	r1, [r3, #12]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	3b1e      	subs	r3, #30
 8003092:	2207      	movs	r2, #7
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43da      	mvns	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	400a      	ands	r2, r1
 80030a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68d9      	ldr	r1, [r3, #12]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	4618      	mov	r0, r3
 80030b4:	4603      	mov	r3, r0
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	4403      	add	r3, r0
 80030ba:	3b1e      	subs	r3, #30
 80030bc:	409a      	lsls	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	e022      	b.n	800310e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6919      	ldr	r1, [r3, #16]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	2207      	movs	r2, #7
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43da      	mvns	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	400a      	ands	r2, r1
 80030ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6919      	ldr	r1, [r3, #16]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	4618      	mov	r0, r3
 80030fe:	4603      	mov	r3, r0
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4403      	add	r3, r0
 8003104:	409a      	lsls	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b06      	cmp	r3, #6
 8003114:	d824      	bhi.n	8003160 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	3b05      	subs	r3, #5
 8003128:	221f      	movs	r2, #31
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	400a      	ands	r2, r1
 8003136:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	4618      	mov	r0, r3
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	3b05      	subs	r3, #5
 8003152:	fa00 f203 	lsl.w	r2, r0, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	635a      	str	r2, [r3, #52]	; 0x34
 800315e:	e04c      	b.n	80031fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b0c      	cmp	r3, #12
 8003166:	d824      	bhi.n	80031b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	3b23      	subs	r3, #35	; 0x23
 800317a:	221f      	movs	r2, #31
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43da      	mvns	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	400a      	ands	r2, r1
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	4618      	mov	r0, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	3b23      	subs	r3, #35	; 0x23
 80031a4:	fa00 f203 	lsl.w	r2, r0, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
 80031b0:	e023      	b.n	80031fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	3b41      	subs	r3, #65	; 0x41
 80031c4:	221f      	movs	r2, #31
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43da      	mvns	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	400a      	ands	r2, r1
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	4618      	mov	r0, r3
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	3b41      	subs	r3, #65	; 0x41
 80031ee:	fa00 f203 	lsl.w	r2, r0, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031fa:	4b22      	ldr	r3, [pc, #136]	; (8003284 <HAL_ADC_ConfigChannel+0x234>)
 80031fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a21      	ldr	r2, [pc, #132]	; (8003288 <HAL_ADC_ConfigChannel+0x238>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d109      	bne.n	800321c <HAL_ADC_ConfigChannel+0x1cc>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b12      	cmp	r3, #18
 800320e:	d105      	bne.n	800321c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <HAL_ADC_ConfigChannel+0x238>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d123      	bne.n	800326e <HAL_ADC_ConfigChannel+0x21e>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b10      	cmp	r3, #16
 800322c:	d003      	beq.n	8003236 <HAL_ADC_ConfigChannel+0x1e6>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b11      	cmp	r3, #17
 8003234:	d11b      	bne.n	800326e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b10      	cmp	r3, #16
 8003248:	d111      	bne.n	800326e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <HAL_ADC_ConfigChannel+0x23c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a10      	ldr	r2, [pc, #64]	; (8003290 <HAL_ADC_ConfigChannel+0x240>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	0c9a      	lsrs	r2, r3, #18
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003260:	e002      	b.n	8003268 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	3b01      	subs	r3, #1
 8003266:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f9      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	40012300 	.word	0x40012300
 8003288:	40012000 	.word	0x40012000
 800328c:	20000010 	.word	0x20000010
 8003290:	431bde83 	.word	0x431bde83

08003294 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800329c:	4b79      	ldr	r3, [pc, #484]	; (8003484 <ADC_Init+0x1f0>)
 800329e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	021a      	lsls	r2, r3, #8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6899      	ldr	r1, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	4a58      	ldr	r2, [pc, #352]	; (8003488 <ADC_Init+0x1f4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d022      	beq.n	8003372 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800333a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6899      	ldr	r1, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800335c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6899      	ldr	r1, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	e00f      	b.n	8003392 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003380:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003390:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0202 	bic.w	r2, r2, #2
 80033a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6899      	ldr	r1, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	7e1b      	ldrb	r3, [r3, #24]
 80033ac:	005a      	lsls	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01b      	beq.n	80033f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6859      	ldr	r1, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	3b01      	subs	r3, #1
 80033ec:	035a      	lsls	r2, r3, #13
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	e007      	b.n	8003408 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003406:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	3b01      	subs	r3, #1
 8003424:	051a      	lsls	r2, r3, #20
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800343c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6899      	ldr	r1, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800344a:	025a      	lsls	r2, r3, #9
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003462:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6899      	ldr	r1, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	029a      	lsls	r2, r3, #10
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40012300 	.word	0x40012300
 8003488:	0f000001 	.word	0x0f000001

0800348c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0ed      	b.n	800367a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd fd50 	bl	8000f50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034c0:	f7ff fd52 	bl	8002f68 <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034c6:	e012      	b.n	80034ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034c8:	f7ff fd4e 	bl	8002f68 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b0a      	cmp	r3, #10
 80034d4:	d90b      	bls.n	80034ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2205      	movs	r2, #5
 80034e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0c5      	b.n	800367a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0e5      	beq.n	80034c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0202 	bic.w	r2, r2, #2
 800350a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800350c:	f7ff fd2c 	bl	8002f68 <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003512:	e012      	b.n	800353a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003514:	f7ff fd28 	bl	8002f68 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b0a      	cmp	r3, #10
 8003520:	d90b      	bls.n	800353a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2205      	movs	r2, #5
 8003532:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e09f      	b.n	800367a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e5      	bne.n	8003514 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	7e1b      	ldrb	r3, [r3, #24]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d108      	bne.n	8003562 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e007      	b.n	8003572 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003570:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	7e5b      	ldrb	r3, [r3, #25]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d108      	bne.n	800358c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e007      	b.n	800359c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	7e9b      	ldrb	r3, [r3, #26]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d108      	bne.n	80035b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0220 	orr.w	r2, r2, #32
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e007      	b.n	80035c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0220 	bic.w	r2, r2, #32
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7edb      	ldrb	r3, [r3, #27]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d108      	bne.n	80035e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0210 	bic.w	r2, r2, #16
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e007      	b.n	80035f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0210 	orr.w	r2, r2, #16
 80035ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7f1b      	ldrb	r3, [r3, #28]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d108      	bne.n	800360a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0208 	orr.w	r2, r2, #8
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	e007      	b.n	800361a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0208 	bic.w	r2, r2, #8
 8003618:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7f5b      	ldrb	r3, [r3, #29]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d108      	bne.n	8003634 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0204 	orr.w	r2, r2, #4
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e007      	b.n	8003644 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0204 	bic.w	r2, r2, #4
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	ea42 0103 	orr.w	r1, r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	1e5a      	subs	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a0:	4013      	ands	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036b6:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <__NVIC_SetPriorityGrouping+0x44>)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	60d3      	str	r3, [r2, #12]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <__NVIC_GetPriorityGrouping+0x18>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	0a1b      	lsrs	r3, r3, #8
 80036d6:	f003 0307 	and.w	r3, r3, #7
}
 80036da:	4618      	mov	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	db0b      	blt.n	8003712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	f003 021f 	and.w	r2, r3, #31
 8003700:	4907      	ldr	r1, [pc, #28]	; (8003720 <__NVIC_EnableIRQ+0x38>)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	2001      	movs	r0, #1
 800370a:	fa00 f202 	lsl.w	r2, r0, r2
 800370e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	e000e100 	.word	0xe000e100

08003724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	6039      	str	r1, [r7, #0]
 800372e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003734:	2b00      	cmp	r3, #0
 8003736:	db0a      	blt.n	800374e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	490c      	ldr	r1, [pc, #48]	; (8003770 <__NVIC_SetPriority+0x4c>)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	0112      	lsls	r2, r2, #4
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	440b      	add	r3, r1
 8003748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800374c:	e00a      	b.n	8003764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4908      	ldr	r1, [pc, #32]	; (8003774 <__NVIC_SetPriority+0x50>)
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	3b04      	subs	r3, #4
 800375c:	0112      	lsls	r2, r2, #4
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	440b      	add	r3, r1
 8003762:	761a      	strb	r2, [r3, #24]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000e100 	.word	0xe000e100
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003778:	b480      	push	{r7}
 800377a:	b089      	sub	sp, #36	; 0x24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f1c3 0307 	rsb	r3, r3, #7
 8003792:	2b04      	cmp	r3, #4
 8003794:	bf28      	it	cs
 8003796:	2304      	movcs	r3, #4
 8003798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3304      	adds	r3, #4
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d902      	bls.n	80037a8 <NVIC_EncodePriority+0x30>
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3b03      	subs	r3, #3
 80037a6:	e000      	b.n	80037aa <NVIC_EncodePriority+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ac:	f04f 32ff 	mov.w	r2, #4294967295
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43da      	mvns	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	401a      	ands	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c0:	f04f 31ff 	mov.w	r1, #4294967295
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ca:	43d9      	mvns	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d0:	4313      	orrs	r3, r2
         );
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3724      	adds	r7, #36	; 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ff4c 	bl	8003684 <__NVIC_SetPriorityGrouping>
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003806:	f7ff ff61 	bl	80036cc <__NVIC_GetPriorityGrouping>
 800380a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	68b9      	ldr	r1, [r7, #8]
 8003810:	6978      	ldr	r0, [r7, #20]
 8003812:	f7ff ffb1 	bl	8003778 <NVIC_EncodePriority>
 8003816:	4602      	mov	r2, r0
 8003818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381c:	4611      	mov	r1, r2
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff ff80 	bl	8003724 <__NVIC_SetPriority>
}
 8003824:	bf00      	nop
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff ff54 	bl	80036e8 <__NVIC_EnableIRQ>
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003854:	f7ff fb88 	bl	8002f68 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e099      	b.n	8003998 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003884:	e00f      	b.n	80038a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003886:	f7ff fb6f 	bl	8002f68 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b05      	cmp	r3, #5
 8003892:	d908      	bls.n	80038a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2203      	movs	r2, #3
 800389e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e078      	b.n	8003998 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e8      	bne.n	8003886 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4b38      	ldr	r3, [pc, #224]	; (80039a0 <HAL_DMA_Init+0x158>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d107      	bne.n	8003910 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	4313      	orrs	r3, r2
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f023 0307 	bic.w	r3, r3, #7
 8003926:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	2b04      	cmp	r3, #4
 8003938:	d117      	bne.n	800396a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00e      	beq.n	800396a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fa7b 	bl	8003e48 <DMA_CheckFifoParam>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2240      	movs	r2, #64	; 0x40
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003966:	2301      	movs	r3, #1
 8003968:	e016      	b.n	8003998 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fa32 	bl	8003ddc <DMA_CalcBaseAndBitshift>
 8003978:	4603      	mov	r3, r0
 800397a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	223f      	movs	r2, #63	; 0x3f
 8003982:	409a      	lsls	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	f010803f 	.word	0xf010803f

080039a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039b2:	f7ff fad9 	bl	8002f68 <HAL_GetTick>
 80039b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d008      	beq.n	80039d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2280      	movs	r2, #128	; 0x80
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e052      	b.n	8003a7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0216 	bic.w	r2, r2, #22
 80039e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <HAL_DMA_Abort+0x62>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0208 	bic.w	r2, r2, #8
 8003a14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a26:	e013      	b.n	8003a50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a28:	f7ff fa9e 	bl	8002f68 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b05      	cmp	r3, #5
 8003a34:	d90c      	bls.n	8003a50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2203      	movs	r2, #3
 8003a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e015      	b.n	8003a7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e4      	bne.n	8003a28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a62:	223f      	movs	r2, #63	; 0x3f
 8003a64:	409a      	lsls	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d004      	beq.n	8003aa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2280      	movs	r2, #128	; 0x80
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e00c      	b.n	8003abc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2205      	movs	r2, #5
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ad4:	4b8e      	ldr	r3, [pc, #568]	; (8003d10 <HAL_DMA_IRQHandler+0x248>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a8e      	ldr	r2, [pc, #568]	; (8003d14 <HAL_DMA_IRQHandler+0x24c>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	0a9b      	lsrs	r3, r3, #10
 8003ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af2:	2208      	movs	r2, #8
 8003af4:	409a      	lsls	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01a      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d013      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0204 	bic.w	r2, r2, #4
 8003b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	2208      	movs	r2, #8
 8003b22:	409a      	lsls	r2, r3
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	f043 0201 	orr.w	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	2201      	movs	r2, #1
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d012      	beq.n	8003b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	2201      	movs	r2, #1
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	f043 0202 	orr.w	r2, r3, #2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	2204      	movs	r2, #4
 8003b70:	409a      	lsls	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d012      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	f043 0204 	orr.w	r2, r3, #4
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d043      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d03c      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc2:	2210      	movs	r2, #16
 8003bc4:	409a      	lsls	r2, r3
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d018      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d108      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d024      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
 8003bf6:	e01f      	b.n	8003c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01b      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
 8003c08:	e016      	b.n	8003c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0208 	bic.w	r2, r2, #8
 8003c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 808f 	beq.w	8003d68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8087 	beq.w	8003d68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	2220      	movs	r2, #32
 8003c60:	409a      	lsls	r2, r3
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d136      	bne.n	8003ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0216 	bic.w	r2, r2, #22
 8003c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d103      	bne.n	8003ca2 <HAL_DMA_IRQHandler+0x1da>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0208 	bic.w	r2, r2, #8
 8003cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb6:	223f      	movs	r2, #63	; 0x3f
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d07e      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
        }
        return;
 8003cde:	e079      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01d      	beq.n	8003d2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10d      	bne.n	8003d18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d031      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
 8003d0c:	e02c      	b.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
 8003d0e:	bf00      	nop
 8003d10:	20000010 	.word	0x20000010
 8003d14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d023      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
 8003d28:	e01e      	b.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10f      	bne.n	8003d58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0210 	bic.w	r2, r2, #16
 8003d46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d032      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d022      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2205      	movs	r2, #5
 8003d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d307      	bcc.n	8003db0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f2      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x2cc>
 8003dae:	e000      	b.n	8003db2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003db0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	4798      	blx	r3
 8003dd2:	e000      	b.n	8003dd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003dd4:	bf00      	nop
    }
  }
}
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	3b10      	subs	r3, #16
 8003dec:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <DMA_CalcBaseAndBitshift+0x64>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003df6:	4a13      	ldr	r2, [pc, #76]	; (8003e44 <DMA_CalcBaseAndBitshift+0x68>)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d909      	bls.n	8003e1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e12:	f023 0303 	bic.w	r3, r3, #3
 8003e16:	1d1a      	adds	r2, r3, #4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e1c:	e007      	b.n	8003e2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	aaaaaaab 	.word	0xaaaaaaab
 8003e44:	0800a120 	.word	0x0800a120

08003e48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d11f      	bne.n	8003ea2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d856      	bhi.n	8003f16 <DMA_CheckFifoParam+0xce>
 8003e68:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <DMA_CheckFifoParam+0x28>)
 8003e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6e:	bf00      	nop
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003e93 	.word	0x08003e93
 8003e78:	08003e81 	.word	0x08003e81
 8003e7c:	08003f17 	.word	0x08003f17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d046      	beq.n	8003f1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e90:	e043      	b.n	8003f1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e9a:	d140      	bne.n	8003f1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ea0:	e03d      	b.n	8003f1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eaa:	d121      	bne.n	8003ef0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d837      	bhi.n	8003f22 <DMA_CheckFifoParam+0xda>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <DMA_CheckFifoParam+0x70>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003ec9 	.word	0x08003ec9
 8003ebc:	08003ecf 	.word	0x08003ecf
 8003ec0:	08003ec9 	.word	0x08003ec9
 8003ec4:	08003ee1 	.word	0x08003ee1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ecc:	e030      	b.n	8003f30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d025      	beq.n	8003f26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ede:	e022      	b.n	8003f26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ee8:	d11f      	bne.n	8003f2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003eee:	e01c      	b.n	8003f2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d903      	bls.n	8003efe <DMA_CheckFifoParam+0xb6>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d003      	beq.n	8003f04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003efc:	e018      	b.n	8003f30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
      break;
 8003f02:	e015      	b.n	8003f30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00e      	beq.n	8003f2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
      break;
 8003f14:	e00b      	b.n	8003f2e <DMA_CheckFifoParam+0xe6>
      break;
 8003f16:	bf00      	nop
 8003f18:	e00a      	b.n	8003f30 <DMA_CheckFifoParam+0xe8>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e008      	b.n	8003f30 <DMA_CheckFifoParam+0xe8>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e006      	b.n	8003f30 <DMA_CheckFifoParam+0xe8>
      break;
 8003f22:	bf00      	nop
 8003f24:	e004      	b.n	8003f30 <DMA_CheckFifoParam+0xe8>
      break;
 8003f26:	bf00      	nop
 8003f28:	e002      	b.n	8003f30 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f2a:	bf00      	nop
 8003f2c:	e000      	b.n	8003f30 <DMA_CheckFifoParam+0xe8>
      break;
 8003f2e:	bf00      	nop
    }
  } 
  
  return status; 
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop

08003f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b089      	sub	sp, #36	; 0x24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	e16b      	b.n	8004234 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	f040 815a 	bne.w	800422e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d005      	beq.n	8003f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d130      	bne.n	8003ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fc8:	2201      	movs	r2, #1
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f003 0201 	and.w	r2, r3, #1
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d017      	beq.n	8004030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	2203      	movs	r2, #3
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4013      	ands	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d123      	bne.n	8004084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	08da      	lsrs	r2, r3, #3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3208      	adds	r2, #8
 8004044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	220f      	movs	r2, #15
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	08da      	lsrs	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3208      	adds	r2, #8
 800407e:	69b9      	ldr	r1, [r7, #24]
 8004080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	2203      	movs	r2, #3
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0203 	and.w	r2, r3, #3
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80b4 	beq.w	800422e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	4b60      	ldr	r3, [pc, #384]	; (800424c <HAL_GPIO_Init+0x30c>)
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	4a5f      	ldr	r2, [pc, #380]	; (800424c <HAL_GPIO_Init+0x30c>)
 80040d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040d4:	6453      	str	r3, [r2, #68]	; 0x44
 80040d6:	4b5d      	ldr	r3, [pc, #372]	; (800424c <HAL_GPIO_Init+0x30c>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040e2:	4a5b      	ldr	r2, [pc, #364]	; (8004250 <HAL_GPIO_Init+0x310>)
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	089b      	lsrs	r3, r3, #2
 80040e8:	3302      	adds	r3, #2
 80040ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	220f      	movs	r2, #15
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43db      	mvns	r3, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4013      	ands	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a52      	ldr	r2, [pc, #328]	; (8004254 <HAL_GPIO_Init+0x314>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d02b      	beq.n	8004166 <HAL_GPIO_Init+0x226>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a51      	ldr	r2, [pc, #324]	; (8004258 <HAL_GPIO_Init+0x318>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d025      	beq.n	8004162 <HAL_GPIO_Init+0x222>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a50      	ldr	r2, [pc, #320]	; (800425c <HAL_GPIO_Init+0x31c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01f      	beq.n	800415e <HAL_GPIO_Init+0x21e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a4f      	ldr	r2, [pc, #316]	; (8004260 <HAL_GPIO_Init+0x320>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d019      	beq.n	800415a <HAL_GPIO_Init+0x21a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a4e      	ldr	r2, [pc, #312]	; (8004264 <HAL_GPIO_Init+0x324>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d013      	beq.n	8004156 <HAL_GPIO_Init+0x216>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a4d      	ldr	r2, [pc, #308]	; (8004268 <HAL_GPIO_Init+0x328>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00d      	beq.n	8004152 <HAL_GPIO_Init+0x212>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a4c      	ldr	r2, [pc, #304]	; (800426c <HAL_GPIO_Init+0x32c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d007      	beq.n	800414e <HAL_GPIO_Init+0x20e>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a4b      	ldr	r2, [pc, #300]	; (8004270 <HAL_GPIO_Init+0x330>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d101      	bne.n	800414a <HAL_GPIO_Init+0x20a>
 8004146:	2307      	movs	r3, #7
 8004148:	e00e      	b.n	8004168 <HAL_GPIO_Init+0x228>
 800414a:	2308      	movs	r3, #8
 800414c:	e00c      	b.n	8004168 <HAL_GPIO_Init+0x228>
 800414e:	2306      	movs	r3, #6
 8004150:	e00a      	b.n	8004168 <HAL_GPIO_Init+0x228>
 8004152:	2305      	movs	r3, #5
 8004154:	e008      	b.n	8004168 <HAL_GPIO_Init+0x228>
 8004156:	2304      	movs	r3, #4
 8004158:	e006      	b.n	8004168 <HAL_GPIO_Init+0x228>
 800415a:	2303      	movs	r3, #3
 800415c:	e004      	b.n	8004168 <HAL_GPIO_Init+0x228>
 800415e:	2302      	movs	r3, #2
 8004160:	e002      	b.n	8004168 <HAL_GPIO_Init+0x228>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <HAL_GPIO_Init+0x228>
 8004166:	2300      	movs	r3, #0
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	f002 0203 	and.w	r2, r2, #3
 800416e:	0092      	lsls	r2, r2, #2
 8004170:	4093      	lsls	r3, r2
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4313      	orrs	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004178:	4935      	ldr	r1, [pc, #212]	; (8004250 <HAL_GPIO_Init+0x310>)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	3302      	adds	r3, #2
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004186:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <HAL_GPIO_Init+0x334>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041aa:	4a32      	ldr	r2, [pc, #200]	; (8004274 <HAL_GPIO_Init+0x334>)
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041b0:	4b30      	ldr	r3, [pc, #192]	; (8004274 <HAL_GPIO_Init+0x334>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4013      	ands	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041d4:	4a27      	ldr	r2, [pc, #156]	; (8004274 <HAL_GPIO_Init+0x334>)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041da:	4b26      	ldr	r3, [pc, #152]	; (8004274 <HAL_GPIO_Init+0x334>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4013      	ands	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041fe:	4a1d      	ldr	r2, [pc, #116]	; (8004274 <HAL_GPIO_Init+0x334>)
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004204:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_GPIO_Init+0x334>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	43db      	mvns	r3, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4013      	ands	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004228:	4a12      	ldr	r2, [pc, #72]	; (8004274 <HAL_GPIO_Init+0x334>)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	3301      	adds	r3, #1
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b0f      	cmp	r3, #15
 8004238:	f67f ae90 	bls.w	8003f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	3724      	adds	r7, #36	; 0x24
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800
 8004250:	40013800 	.word	0x40013800
 8004254:	40020000 	.word	0x40020000
 8004258:	40020400 	.word	0x40020400
 800425c:	40020800 	.word	0x40020800
 8004260:	40020c00 	.word	0x40020c00
 8004264:	40021000 	.word	0x40021000
 8004268:	40021400 	.word	0x40021400
 800426c:	40021800 	.word	0x40021800
 8004270:	40021c00 	.word	0x40021c00
 8004274:	40013c00 	.word	0x40013c00

08004278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	807b      	strh	r3, [r7, #2]
 8004284:	4613      	mov	r3, r2
 8004286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004288:	787b      	ldrb	r3, [r7, #1]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800428e:	887a      	ldrh	r2, [r7, #2]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004294:	e003      	b.n	800429e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004296:	887b      	ldrh	r3, [r7, #2]
 8004298:	041a      	lsls	r2, r3, #16
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	619a      	str	r2, [r3, #24]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	460b      	mov	r3, r1
 80042b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042bc:	887a      	ldrh	r2, [r7, #2]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4013      	ands	r3, r2
 80042c2:	041a      	lsls	r2, r3, #16
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	43d9      	mvns	r1, r3
 80042c8:	887b      	ldrh	r3, [r7, #2]
 80042ca:	400b      	ands	r3, r1
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	619a      	str	r2, [r3, #24]
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e12b      	b.n	800454a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc fffe 	bl	8001308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2224      	movs	r2, #36	; 0x24
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004332:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004342:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004344:	f001 fe6a 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8004348:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4a81      	ldr	r2, [pc, #516]	; (8004554 <HAL_I2C_Init+0x274>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d807      	bhi.n	8004364 <HAL_I2C_Init+0x84>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4a80      	ldr	r2, [pc, #512]	; (8004558 <HAL_I2C_Init+0x278>)
 8004358:	4293      	cmp	r3, r2
 800435a:	bf94      	ite	ls
 800435c:	2301      	movls	r3, #1
 800435e:	2300      	movhi	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	e006      	b.n	8004372 <HAL_I2C_Init+0x92>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a7d      	ldr	r2, [pc, #500]	; (800455c <HAL_I2C_Init+0x27c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	bf94      	ite	ls
 800436c:	2301      	movls	r3, #1
 800436e:	2300      	movhi	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0e7      	b.n	800454a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4a78      	ldr	r2, [pc, #480]	; (8004560 <HAL_I2C_Init+0x280>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	0c9b      	lsrs	r3, r3, #18
 8004384:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	4a6a      	ldr	r2, [pc, #424]	; (8004554 <HAL_I2C_Init+0x274>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d802      	bhi.n	80043b4 <HAL_I2C_Init+0xd4>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	3301      	adds	r3, #1
 80043b2:	e009      	b.n	80043c8 <HAL_I2C_Init+0xe8>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043ba:	fb02 f303 	mul.w	r3, r2, r3
 80043be:	4a69      	ldr	r2, [pc, #420]	; (8004564 <HAL_I2C_Init+0x284>)
 80043c0:	fba2 2303 	umull	r2, r3, r2, r3
 80043c4:	099b      	lsrs	r3, r3, #6
 80043c6:	3301      	adds	r3, #1
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	495c      	ldr	r1, [pc, #368]	; (8004554 <HAL_I2C_Init+0x274>)
 80043e4:	428b      	cmp	r3, r1
 80043e6:	d819      	bhi.n	800441c <HAL_I2C_Init+0x13c>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1e59      	subs	r1, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f6:	1c59      	adds	r1, r3, #1
 80043f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043fc:	400b      	ands	r3, r1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_I2C_Init+0x138>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1e59      	subs	r1, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004410:	3301      	adds	r3, #1
 8004412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004416:	e051      	b.n	80044bc <HAL_I2C_Init+0x1dc>
 8004418:	2304      	movs	r3, #4
 800441a:	e04f      	b.n	80044bc <HAL_I2C_Init+0x1dc>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d111      	bne.n	8004448 <HAL_I2C_Init+0x168>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	1e58      	subs	r0, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	440b      	add	r3, r1
 8004432:	fbb0 f3f3 	udiv	r3, r0, r3
 8004436:	3301      	adds	r3, #1
 8004438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	e012      	b.n	800446e <HAL_I2C_Init+0x18e>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	1e58      	subs	r0, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	0099      	lsls	r1, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	fbb0 f3f3 	udiv	r3, r0, r3
 800445e:	3301      	adds	r3, #1
 8004460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_I2C_Init+0x196>
 8004472:	2301      	movs	r3, #1
 8004474:	e022      	b.n	80044bc <HAL_I2C_Init+0x1dc>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10e      	bne.n	800449c <HAL_I2C_Init+0x1bc>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1e58      	subs	r0, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	440b      	add	r3, r1
 800448c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004490:	3301      	adds	r3, #1
 8004492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800449a:	e00f      	b.n	80044bc <HAL_I2C_Init+0x1dc>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1e58      	subs	r0, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6859      	ldr	r1, [r3, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	0099      	lsls	r1, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b2:	3301      	adds	r3, #1
 80044b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	6809      	ldr	r1, [r1, #0]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6911      	ldr	r1, [r2, #16]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68d2      	ldr	r2, [r2, #12]
 80044f6:	4311      	orrs	r1, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	000186a0 	.word	0x000186a0
 8004558:	001e847f 	.word	0x001e847f
 800455c:	003d08ff 	.word	0x003d08ff
 8004560:	431bde83 	.word	0x431bde83
 8004564:	10624dd3 	.word	0x10624dd3

08004568 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	607a      	str	r2, [r7, #4]
 8004572:	461a      	mov	r2, r3
 8004574:	460b      	mov	r3, r1
 8004576:	817b      	strh	r3, [r7, #10]
 8004578:	4613      	mov	r3, r2
 800457a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800457c:	f7fe fcf4 	bl	8002f68 <HAL_GetTick>
 8004580:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b20      	cmp	r3, #32
 800458c:	f040 80e0 	bne.w	8004750 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	2319      	movs	r3, #25
 8004596:	2201      	movs	r2, #1
 8004598:	4970      	ldr	r1, [pc, #448]	; (800475c <HAL_I2C_Master_Transmit+0x1f4>)
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 ff30 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
 80045a8:	e0d3      	b.n	8004752 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_I2C_Master_Transmit+0x50>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e0cc      	b.n	8004752 <HAL_I2C_Master_Transmit+0x1ea>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d007      	beq.n	80045de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0201 	orr.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2221      	movs	r2, #33	; 0x21
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2210      	movs	r2, #16
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	893a      	ldrh	r2, [r7, #8]
 800460e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4a50      	ldr	r2, [pc, #320]	; (8004760 <HAL_I2C_Master_Transmit+0x1f8>)
 800461e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004620:	8979      	ldrh	r1, [r7, #10]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 fcea 	bl	8005000 <I2C_MasterRequestWrite>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e08d      	b.n	8004752 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800464c:	e066      	b.n	800471c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	6a39      	ldr	r1, [r7, #32]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 ffaa 	bl	80055ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00d      	beq.n	800467a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b04      	cmp	r3, #4
 8004664:	d107      	bne.n	8004676 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004674:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e06b      	b.n	8004752 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	781a      	ldrb	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d11b      	bne.n	80046f0 <HAL_I2C_Master_Transmit+0x188>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d017      	beq.n	80046f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	6a39      	ldr	r1, [r7, #32]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 ff9a 	bl	800562e <I2C_WaitOnBTFFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00d      	beq.n	800471c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	2b04      	cmp	r3, #4
 8004706:	d107      	bne.n	8004718 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004716:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e01a      	b.n	8004752 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	d194      	bne.n	800464e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e000      	b.n	8004752 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	00100002 	.word	0x00100002
 8004760:	ffff0000 	.word	0xffff0000

08004764 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af02      	add	r7, sp, #8
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	4608      	mov	r0, r1
 800476e:	4611      	mov	r1, r2
 8004770:	461a      	mov	r2, r3
 8004772:	4603      	mov	r3, r0
 8004774:	817b      	strh	r3, [r7, #10]
 8004776:	460b      	mov	r3, r1
 8004778:	813b      	strh	r3, [r7, #8]
 800477a:	4613      	mov	r3, r2
 800477c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800477e:	f7fe fbf3 	bl	8002f68 <HAL_GetTick>
 8004782:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b20      	cmp	r3, #32
 800478e:	f040 80d9 	bne.w	8004944 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	2319      	movs	r3, #25
 8004798:	2201      	movs	r2, #1
 800479a:	496d      	ldr	r1, [pc, #436]	; (8004950 <HAL_I2C_Mem_Write+0x1ec>)
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fe2f 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
 80047aa:	e0cc      	b.n	8004946 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_I2C_Mem_Write+0x56>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e0c5      	b.n	8004946 <HAL_I2C_Mem_Write+0x1e2>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d007      	beq.n	80047e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2221      	movs	r2, #33	; 0x21
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2240      	movs	r2, #64	; 0x40
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004810:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a4d      	ldr	r2, [pc, #308]	; (8004954 <HAL_I2C_Mem_Write+0x1f0>)
 8004820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004822:	88f8      	ldrh	r0, [r7, #6]
 8004824:	893a      	ldrh	r2, [r7, #8]
 8004826:	8979      	ldrh	r1, [r7, #10]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	4603      	mov	r3, r0
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fc66 	bl	8005104 <I2C_RequestMemoryWrite>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d052      	beq.n	80048e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e081      	b.n	8004946 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 feb0 	bl	80055ac <I2C_WaitOnTXEFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	2b04      	cmp	r3, #4
 8004858:	d107      	bne.n	800486a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004868:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e06b      	b.n	8004946 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	781a      	ldrb	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d11b      	bne.n	80048e4 <HAL_I2C_Mem_Write+0x180>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d017      	beq.n	80048e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	781a      	ldrb	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1aa      	bne.n	8004842 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fe9c 	bl	800562e <I2C_WaitOnBTFFlagUntilTimeout>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00d      	beq.n	8004918 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	2b04      	cmp	r3, #4
 8004902:	d107      	bne.n	8004914 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004912:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e016      	b.n	8004946 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	e000      	b.n	8004946 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004944:	2302      	movs	r3, #2
  }
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	00100002 	.word	0x00100002
 8004954:	ffff0000 	.word	0xffff0000

08004958 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08c      	sub	sp, #48	; 0x30
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	4608      	mov	r0, r1
 8004962:	4611      	mov	r1, r2
 8004964:	461a      	mov	r2, r3
 8004966:	4603      	mov	r3, r0
 8004968:	817b      	strh	r3, [r7, #10]
 800496a:	460b      	mov	r3, r1
 800496c:	813b      	strh	r3, [r7, #8]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004972:	f7fe faf9 	bl	8002f68 <HAL_GetTick>
 8004976:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b20      	cmp	r3, #32
 8004982:	f040 8208 	bne.w	8004d96 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	2319      	movs	r3, #25
 800498c:	2201      	movs	r2, #1
 800498e:	497b      	ldr	r1, [pc, #492]	; (8004b7c <HAL_I2C_Mem_Read+0x224>)
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fd35 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800499c:	2302      	movs	r3, #2
 800499e:	e1fb      	b.n	8004d98 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_I2C_Mem_Read+0x56>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e1f4      	b.n	8004d98 <HAL_I2C_Mem_Read+0x440>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d007      	beq.n	80049d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2222      	movs	r2, #34	; 0x22
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2240      	movs	r2, #64	; 0x40
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4a5b      	ldr	r2, [pc, #364]	; (8004b80 <HAL_I2C_Mem_Read+0x228>)
 8004a14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a16:	88f8      	ldrh	r0, [r7, #6]
 8004a18:	893a      	ldrh	r2, [r7, #8]
 8004a1a:	8979      	ldrh	r1, [r7, #10]
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4603      	mov	r3, r0
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fc02 	bl	8005230 <I2C_RequestMemoryRead>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e1b0      	b.n	8004d98 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d113      	bne.n	8004a66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	623b      	str	r3, [r7, #32]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	623b      	str	r3, [r7, #32]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e184      	b.n	8004d70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d11b      	bne.n	8004aa6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e164      	b.n	8004d70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d11b      	bne.n	8004ae6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004abc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004acc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61bb      	str	r3, [r7, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	e144      	b.n	8004d70 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004afc:	e138      	b.n	8004d70 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	f200 80f1 	bhi.w	8004cea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d123      	bne.n	8004b58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fdcb 	bl	80056b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e139      	b.n	8004d98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b56:	e10b      	b.n	8004d70 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d14e      	bne.n	8004bfe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b66:	2200      	movs	r2, #0
 8004b68:	4906      	ldr	r1, [pc, #24]	; (8004b84 <HAL_I2C_Mem_Read+0x22c>)
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fc48 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d008      	beq.n	8004b88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e10e      	b.n	8004d98 <HAL_I2C_Mem_Read+0x440>
 8004b7a:	bf00      	nop
 8004b7c:	00100002 	.word	0x00100002
 8004b80:	ffff0000 	.word	0xffff0000
 8004b84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bfc:	e0b8      	b.n	8004d70 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c04:	2200      	movs	r2, #0
 8004c06:	4966      	ldr	r1, [pc, #408]	; (8004da0 <HAL_I2C_Mem_Read+0x448>)
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fbf9 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0bf      	b.n	8004d98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c60:	2200      	movs	r2, #0
 8004c62:	494f      	ldr	r1, [pc, #316]	; (8004da0 <HAL_I2C_Mem_Read+0x448>)
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fbcb 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e091      	b.n	8004d98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ce8:	e042      	b.n	8004d70 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 fcde 	bl	80056b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e04c      	b.n	8004d98 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d118      	bne.n	8004d70 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f47f aec2 	bne.w	8004afe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3728      	adds	r7, #40	; 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	00010004 	.word	0x00010004

08004da4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	460b      	mov	r3, r1
 8004db2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004db4:	f7fe f8d8 	bl	8002f68 <HAL_GetTick>
 8004db8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	f040 8111 	bne.w	8004fee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2319      	movs	r3, #25
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	4988      	ldr	r1, [pc, #544]	; (8004ff8 <HAL_I2C_IsDeviceReady+0x254>)
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fb12 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004de2:	2302      	movs	r3, #2
 8004de4:	e104      	b.n	8004ff0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_I2C_IsDeviceReady+0x50>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e0fd      	b.n	8004ff0 <HAL_I2C_IsDeviceReady+0x24c>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d007      	beq.n	8004e1a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2224      	movs	r2, #36	; 0x24
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4a70      	ldr	r2, [pc, #448]	; (8004ffc <HAL_I2C_IsDeviceReady+0x258>)
 8004e3c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e4c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fad0 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e74:	d103      	bne.n	8004e7e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e0b6      	b.n	8004ff0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e82:	897b      	ldrh	r3, [r7, #10]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e90:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004e92:	f7fe f869 	bl	8002f68 <HAL_GetTick>
 8004e96:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	bf0c      	ite	eq
 8004ea6:	2301      	moveq	r3, #1
 8004ea8:	2300      	movne	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ebc:	bf0c      	ite	eq
 8004ebe:	2301      	moveq	r3, #1
 8004ec0:	2300      	movne	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004ec6:	e025      	b.n	8004f14 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ec8:	f7fe f84e 	bl	8002f68 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d302      	bcc.n	8004ede <HAL_I2C_IsDeviceReady+0x13a>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	22a0      	movs	r2, #160	; 0xa0
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2301      	moveq	r3, #1
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0a:	bf0c      	ite	eq
 8004f0c:	2301      	moveq	r3, #1
 8004f0e:	2300      	movne	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2ba0      	cmp	r3, #160	; 0xa0
 8004f1e:	d005      	beq.n	8004f2c <HAL_I2C_IsDeviceReady+0x188>
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <HAL_I2C_IsDeviceReady+0x188>
 8004f26:	7dbb      	ldrb	r3, [r7, #22]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0cd      	beq.n	8004ec8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d129      	bne.n	8004f96 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f50:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2319      	movs	r3, #25
 8004f6e:	2201      	movs	r2, #1
 8004f70:	4921      	ldr	r1, [pc, #132]	; (8004ff8 <HAL_I2C_IsDeviceReady+0x254>)
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 fa44 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e036      	b.n	8004ff0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e02c      	b.n	8004ff0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2319      	movs	r3, #25
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	490f      	ldr	r1, [pc, #60]	; (8004ff8 <HAL_I2C_IsDeviceReady+0x254>)
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 fa20 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e012      	b.n	8004ff0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	f4ff af32 	bcc.w	8004e3e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004fee:	2302      	movs	r3, #2
  }
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3720      	adds	r7, #32
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	00100002 	.word	0x00100002
 8004ffc:	ffff0000 	.word	0xffff0000

08005000 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	460b      	mov	r3, r1
 800500e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d006      	beq.n	800502a <I2C_MasterRequestWrite+0x2a>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d003      	beq.n	800502a <I2C_MasterRequestWrite+0x2a>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005028:	d108      	bne.n	800503c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e00b      	b.n	8005054 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	2b12      	cmp	r3, #18
 8005042:	d107      	bne.n	8005054 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005052:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f9cd 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00d      	beq.n	8005088 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507a:	d103      	bne.n	8005084 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e035      	b.n	80050f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005090:	d108      	bne.n	80050a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005092:	897b      	ldrh	r3, [r7, #10]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050a0:	611a      	str	r2, [r3, #16]
 80050a2:	e01b      	b.n	80050dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050a4:	897b      	ldrh	r3, [r7, #10]
 80050a6:	11db      	asrs	r3, r3, #7
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f003 0306 	and.w	r3, r3, #6
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f063 030f 	orn	r3, r3, #15
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	490e      	ldr	r1, [pc, #56]	; (80050fc <I2C_MasterRequestWrite+0xfc>)
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f9f3 	bl	80054ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e010      	b.n	80050f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050d2:	897b      	ldrh	r3, [r7, #10]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	4907      	ldr	r1, [pc, #28]	; (8005100 <I2C_MasterRequestWrite+0x100>)
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f9e3 	bl	80054ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	00010008 	.word	0x00010008
 8005100:	00010002 	.word	0x00010002

08005104 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af02      	add	r7, sp, #8
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	4608      	mov	r0, r1
 800510e:	4611      	mov	r1, r2
 8005110:	461a      	mov	r2, r3
 8005112:	4603      	mov	r3, r0
 8005114:	817b      	strh	r3, [r7, #10]
 8005116:	460b      	mov	r3, r1
 8005118:	813b      	strh	r3, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800512c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	2200      	movs	r2, #0
 8005136:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f960 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00d      	beq.n	8005162 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005154:	d103      	bne.n	800515e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800515c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e05f      	b.n	8005222 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005162:	897b      	ldrh	r3, [r7, #10]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005170:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	6a3a      	ldr	r2, [r7, #32]
 8005176:	492d      	ldr	r1, [pc, #180]	; (800522c <I2C_RequestMemoryWrite+0x128>)
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f998 	bl	80054ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e04c      	b.n	8005222 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800519e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a0:	6a39      	ldr	r1, [r7, #32]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fa02 	bl	80055ac <I2C_WaitOnTXEFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00d      	beq.n	80051ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d107      	bne.n	80051c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e02b      	b.n	8005222 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d105      	bne.n	80051dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051d0:	893b      	ldrh	r3, [r7, #8]
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	611a      	str	r2, [r3, #16]
 80051da:	e021      	b.n	8005220 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051dc:	893b      	ldrh	r3, [r7, #8]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ec:	6a39      	ldr	r1, [r7, #32]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f9dc 	bl	80055ac <I2C_WaitOnTXEFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00d      	beq.n	8005216 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d107      	bne.n	8005212 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005210:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e005      	b.n	8005222 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005216:	893b      	ldrh	r3, [r7, #8]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	00010002 	.word	0x00010002

08005230 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af02      	add	r7, sp, #8
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	4608      	mov	r0, r1
 800523a:	4611      	mov	r1, r2
 800523c:	461a      	mov	r2, r3
 800523e:	4603      	mov	r3, r0
 8005240:	817b      	strh	r3, [r7, #10]
 8005242:	460b      	mov	r3, r1
 8005244:	813b      	strh	r3, [r7, #8]
 8005246:	4613      	mov	r3, r2
 8005248:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005258:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005268:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	2200      	movs	r2, #0
 8005272:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f8c2 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00d      	beq.n	800529e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005290:	d103      	bne.n	800529a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005298:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e0aa      	b.n	80053f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800529e:	897b      	ldrh	r3, [r7, #10]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	6a3a      	ldr	r2, [r7, #32]
 80052b2:	4952      	ldr	r1, [pc, #328]	; (80053fc <I2C_RequestMemoryRead+0x1cc>)
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 f8fa 	bl	80054ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e097      	b.n	80053f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052dc:	6a39      	ldr	r1, [r7, #32]
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 f964 	bl	80055ac <I2C_WaitOnTXEFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00d      	beq.n	8005306 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d107      	bne.n	8005302 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005300:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e076      	b.n	80053f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005306:	88fb      	ldrh	r3, [r7, #6]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d105      	bne.n	8005318 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800530c:	893b      	ldrh	r3, [r7, #8]
 800530e:	b2da      	uxtb	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	611a      	str	r2, [r3, #16]
 8005316:	e021      	b.n	800535c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005318:	893b      	ldrh	r3, [r7, #8]
 800531a:	0a1b      	lsrs	r3, r3, #8
 800531c:	b29b      	uxth	r3, r3
 800531e:	b2da      	uxtb	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005328:	6a39      	ldr	r1, [r7, #32]
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f93e 	bl	80055ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00d      	beq.n	8005352 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	2b04      	cmp	r3, #4
 800533c:	d107      	bne.n	800534e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e050      	b.n	80053f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005352:	893b      	ldrh	r3, [r7, #8]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535e:	6a39      	ldr	r1, [r7, #32]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 f923 	bl	80055ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00d      	beq.n	8005388 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	2b04      	cmp	r3, #4
 8005372:	d107      	bne.n	8005384 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005382:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e035      	b.n	80053f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005396:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	2200      	movs	r2, #0
 80053a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f82b 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00d      	beq.n	80053cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053be:	d103      	bne.n	80053c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e013      	b.n	80053f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053cc:	897b      	ldrh	r3, [r7, #10]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	6a3a      	ldr	r2, [r7, #32]
 80053e0:	4906      	ldr	r1, [pc, #24]	; (80053fc <I2C_RequestMemoryRead+0x1cc>)
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f863 	bl	80054ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	00010002 	.word	0x00010002

08005400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	4613      	mov	r3, r2
 800540e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005410:	e025      	b.n	800545e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d021      	beq.n	800545e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541a:	f7fd fda5 	bl	8002f68 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d302      	bcc.n	8005430 <I2C_WaitOnFlagUntilTimeout+0x30>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d116      	bne.n	800545e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e023      	b.n	80054a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	0c1b      	lsrs	r3, r3, #16
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	d10d      	bne.n	8005484 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	43da      	mvns	r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4013      	ands	r3, r2
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	bf0c      	ite	eq
 800547a:	2301      	moveq	r3, #1
 800547c:	2300      	movne	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	e00c      	b.n	800549e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	43da      	mvns	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4013      	ands	r3, r2
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf0c      	ite	eq
 8005496:	2301      	moveq	r3, #1
 8005498:	2300      	movne	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d0b6      	beq.n	8005412 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
 80054ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054bc:	e051      	b.n	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054cc:	d123      	bne.n	8005516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f043 0204 	orr.w	r2, r3, #4
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e046      	b.n	80055a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551c:	d021      	beq.n	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800551e:	f7fd fd23 	bl	8002f68 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	429a      	cmp	r2, r3
 800552c:	d302      	bcc.n	8005534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d116      	bne.n	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2220      	movs	r2, #32
 800553e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f043 0220 	orr.w	r2, r3, #32
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e020      	b.n	80055a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	0c1b      	lsrs	r3, r3, #16
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	d10c      	bne.n	8005586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	43da      	mvns	r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4013      	ands	r3, r2
 8005578:	b29b      	uxth	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	bf14      	ite	ne
 800557e:	2301      	movne	r3, #1
 8005580:	2300      	moveq	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	e00b      	b.n	800559e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	43da      	mvns	r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4013      	ands	r3, r2
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	bf14      	ite	ne
 8005598:	2301      	movne	r3, #1
 800559a:	2300      	moveq	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d18d      	bne.n	80054be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055b8:	e02d      	b.n	8005616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f8ce 	bl	800575c <I2C_IsAcknowledgeFailed>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e02d      	b.n	8005626 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d021      	beq.n	8005616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d2:	f7fd fcc9 	bl	8002f68 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d116      	bne.n	8005616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f043 0220 	orr.w	r2, r3, #32
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e007      	b.n	8005626 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005620:	2b80      	cmp	r3, #128	; 0x80
 8005622:	d1ca      	bne.n	80055ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800563a:	e02d      	b.n	8005698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f88d 	bl	800575c <I2C_IsAcknowledgeFailed>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e02d      	b.n	80056a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005652:	d021      	beq.n	8005698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005654:	f7fd fc88 	bl	8002f68 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	429a      	cmp	r2, r3
 8005662:	d302      	bcc.n	800566a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d116      	bne.n	8005698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f043 0220 	orr.w	r2, r3, #32
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e007      	b.n	80056a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d1ca      	bne.n	800563c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056bc:	e042      	b.n	8005744 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d119      	bne.n	8005700 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0210 	mvn.w	r2, #16
 80056d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e029      	b.n	8005754 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005700:	f7fd fc32 	bl	8002f68 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	429a      	cmp	r2, r3
 800570e:	d302      	bcc.n	8005716 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d116      	bne.n	8005744 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	f043 0220 	orr.w	r2, r3, #32
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e007      	b.n	8005754 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b40      	cmp	r3, #64	; 0x40
 8005750:	d1b5      	bne.n	80056be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005772:	d11b      	bne.n	80057ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800577c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	f043 0204 	orr.w	r2, r3, #4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e000      	b.n	80057ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e267      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d075      	beq.n	80058c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057da:	4b88      	ldr	r3, [pc, #544]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d00c      	beq.n	8005800 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057e6:	4b85      	ldr	r3, [pc, #532]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d112      	bne.n	8005818 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057f2:	4b82      	ldr	r3, [pc, #520]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057fe:	d10b      	bne.n	8005818 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005800:	4b7e      	ldr	r3, [pc, #504]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d05b      	beq.n	80058c4 <HAL_RCC_OscConfig+0x108>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d157      	bne.n	80058c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e242      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005820:	d106      	bne.n	8005830 <HAL_RCC_OscConfig+0x74>
 8005822:	4b76      	ldr	r3, [pc, #472]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a75      	ldr	r2, [pc, #468]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 8005828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	e01d      	b.n	800586c <HAL_RCC_OscConfig+0xb0>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005838:	d10c      	bne.n	8005854 <HAL_RCC_OscConfig+0x98>
 800583a:	4b70      	ldr	r3, [pc, #448]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a6f      	ldr	r2, [pc, #444]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 8005840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	4b6d      	ldr	r3, [pc, #436]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a6c      	ldr	r2, [pc, #432]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 800584c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	e00b      	b.n	800586c <HAL_RCC_OscConfig+0xb0>
 8005854:	4b69      	ldr	r3, [pc, #420]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a68      	ldr	r2, [pc, #416]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 800585a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	4b66      	ldr	r3, [pc, #408]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a65      	ldr	r2, [pc, #404]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 8005866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800586a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d013      	beq.n	800589c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005874:	f7fd fb78 	bl	8002f68 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800587c:	f7fd fb74 	bl	8002f68 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b64      	cmp	r3, #100	; 0x64
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e207      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588e:	4b5b      	ldr	r3, [pc, #364]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f0      	beq.n	800587c <HAL_RCC_OscConfig+0xc0>
 800589a:	e014      	b.n	80058c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589c:	f7fd fb64 	bl	8002f68 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058a4:	f7fd fb60 	bl	8002f68 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b64      	cmp	r3, #100	; 0x64
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e1f3      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058b6:	4b51      	ldr	r3, [pc, #324]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0xe8>
 80058c2:	e000      	b.n	80058c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d063      	beq.n	800599a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058d2:	4b4a      	ldr	r3, [pc, #296]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058de:	4b47      	ldr	r3, [pc, #284]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d11c      	bne.n	8005924 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ea:	4b44      	ldr	r3, [pc, #272]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d116      	bne.n	8005924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058f6:	4b41      	ldr	r3, [pc, #260]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <HAL_RCC_OscConfig+0x152>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d001      	beq.n	800590e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e1c7      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590e:	4b3b      	ldr	r3, [pc, #236]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	4937      	ldr	r1, [pc, #220]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 800591e:	4313      	orrs	r3, r2
 8005920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005922:	e03a      	b.n	800599a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d020      	beq.n	800596e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800592c:	4b34      	ldr	r3, [pc, #208]	; (8005a00 <HAL_RCC_OscConfig+0x244>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005932:	f7fd fb19 	bl	8002f68 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800593a:	f7fd fb15 	bl	8002f68 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e1a8      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800594c:	4b2b      	ldr	r3, [pc, #172]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005958:	4b28      	ldr	r3, [pc, #160]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	4925      	ldr	r1, [pc, #148]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 8005968:	4313      	orrs	r3, r2
 800596a:	600b      	str	r3, [r1, #0]
 800596c:	e015      	b.n	800599a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800596e:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <HAL_RCC_OscConfig+0x244>)
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005974:	f7fd faf8 	bl	8002f68 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800597c:	f7fd faf4 	bl	8002f68 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e187      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800598e:	4b1b      	ldr	r3, [pc, #108]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f0      	bne.n	800597c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d036      	beq.n	8005a14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d016      	beq.n	80059dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ae:	4b15      	ldr	r3, [pc, #84]	; (8005a04 <HAL_RCC_OscConfig+0x248>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b4:	f7fd fad8 	bl	8002f68 <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059bc:	f7fd fad4 	bl	8002f68 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e167      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ce:	4b0b      	ldr	r3, [pc, #44]	; (80059fc <HAL_RCC_OscConfig+0x240>)
 80059d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCC_OscConfig+0x200>
 80059da:	e01b      	b.n	8005a14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059dc:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <HAL_RCC_OscConfig+0x248>)
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e2:	f7fd fac1 	bl	8002f68 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e8:	e00e      	b.n	8005a08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ea:	f7fd fabd 	bl	8002f68 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d907      	bls.n	8005a08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e150      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
 80059fc:	40023800 	.word	0x40023800
 8005a00:	42470000 	.word	0x42470000
 8005a04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a08:	4b88      	ldr	r3, [pc, #544]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1ea      	bne.n	80059ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8097 	beq.w	8005b50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a22:	2300      	movs	r3, #0
 8005a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a26:	4b81      	ldr	r3, [pc, #516]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10f      	bne.n	8005a52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a32:	2300      	movs	r3, #0
 8005a34:	60bb      	str	r3, [r7, #8]
 8005a36:	4b7d      	ldr	r3, [pc, #500]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	4a7c      	ldr	r2, [pc, #496]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a40:	6413      	str	r3, [r2, #64]	; 0x40
 8005a42:	4b7a      	ldr	r3, [pc, #488]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	60bb      	str	r3, [r7, #8]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a52:	4b77      	ldr	r3, [pc, #476]	; (8005c30 <HAL_RCC_OscConfig+0x474>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d118      	bne.n	8005a90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a5e:	4b74      	ldr	r3, [pc, #464]	; (8005c30 <HAL_RCC_OscConfig+0x474>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a73      	ldr	r2, [pc, #460]	; (8005c30 <HAL_RCC_OscConfig+0x474>)
 8005a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a6a:	f7fd fa7d 	bl	8002f68 <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a72:	f7fd fa79 	bl	8002f68 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e10c      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a84:	4b6a      	ldr	r3, [pc, #424]	; (8005c30 <HAL_RCC_OscConfig+0x474>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d106      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x2ea>
 8005a98:	4b64      	ldr	r3, [pc, #400]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9c:	4a63      	ldr	r2, [pc, #396]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa4:	e01c      	b.n	8005ae0 <HAL_RCC_OscConfig+0x324>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2b05      	cmp	r3, #5
 8005aac:	d10c      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x30c>
 8005aae:	4b5f      	ldr	r3, [pc, #380]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab2:	4a5e      	ldr	r2, [pc, #376]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005ab4:	f043 0304 	orr.w	r3, r3, #4
 8005ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aba:	4b5c      	ldr	r3, [pc, #368]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abe:	4a5b      	ldr	r2, [pc, #364]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac6:	e00b      	b.n	8005ae0 <HAL_RCC_OscConfig+0x324>
 8005ac8:	4b58      	ldr	r3, [pc, #352]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005acc:	4a57      	ldr	r2, [pc, #348]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005ace:	f023 0301 	bic.w	r3, r3, #1
 8005ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad4:	4b55      	ldr	r3, [pc, #340]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad8:	4a54      	ldr	r2, [pc, #336]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005ada:	f023 0304 	bic.w	r3, r3, #4
 8005ade:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d015      	beq.n	8005b14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae8:	f7fd fa3e 	bl	8002f68 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aee:	e00a      	b.n	8005b06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005af0:	f7fd fa3a 	bl	8002f68 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e0cb      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b06:	4b49      	ldr	r3, [pc, #292]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0ee      	beq.n	8005af0 <HAL_RCC_OscConfig+0x334>
 8005b12:	e014      	b.n	8005b3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b14:	f7fd fa28 	bl	8002f68 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b1a:	e00a      	b.n	8005b32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b1c:	f7fd fa24 	bl	8002f68 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e0b5      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b32:	4b3e      	ldr	r3, [pc, #248]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1ee      	bne.n	8005b1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d105      	bne.n	8005b50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b44:	4b39      	ldr	r3, [pc, #228]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	4a38      	ldr	r2, [pc, #224]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 80a1 	beq.w	8005c9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b5a:	4b34      	ldr	r3, [pc, #208]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 030c 	and.w	r3, r3, #12
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d05c      	beq.n	8005c20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d141      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b6e:	4b31      	ldr	r3, [pc, #196]	; (8005c34 <HAL_RCC_OscConfig+0x478>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b74:	f7fd f9f8 	bl	8002f68 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b7c:	f7fd f9f4 	bl	8002f68 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e087      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b8e:	4b27      	ldr	r3, [pc, #156]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f0      	bne.n	8005b7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69da      	ldr	r2, [r3, #28]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	019b      	lsls	r3, r3, #6
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	041b      	lsls	r3, r3, #16
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbc:	061b      	lsls	r3, r3, #24
 8005bbe:	491b      	ldr	r1, [pc, #108]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bc4:	4b1b      	ldr	r3, [pc, #108]	; (8005c34 <HAL_RCC_OscConfig+0x478>)
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bca:	f7fd f9cd 	bl	8002f68 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd2:	f7fd f9c9 	bl	8002f68 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e05c      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be4:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x416>
 8005bf0:	e054      	b.n	8005c9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf2:	4b10      	ldr	r3, [pc, #64]	; (8005c34 <HAL_RCC_OscConfig+0x478>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf8:	f7fd f9b6 	bl	8002f68 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c00:	f7fd f9b2 	bl	8002f68 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e045      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f0      	bne.n	8005c00 <HAL_RCC_OscConfig+0x444>
 8005c1e:	e03d      	b.n	8005c9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d107      	bne.n	8005c38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e038      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	40007000 	.word	0x40007000
 8005c34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c38:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <HAL_RCC_OscConfig+0x4ec>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d028      	beq.n	8005c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d121      	bne.n	8005c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d11a      	bne.n	8005c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c68:	4013      	ands	r3, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d111      	bne.n	8005c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	3b01      	subs	r3, #1
 8005c82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d107      	bne.n	8005c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d001      	beq.n	8005c9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40023800 	.word	0x40023800

08005cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e0cc      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cc0:	4b68      	ldr	r3, [pc, #416]	; (8005e64 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d90c      	bls.n	8005ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cce:	4b65      	ldr	r3, [pc, #404]	; (8005e64 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd6:	4b63      	ldr	r3, [pc, #396]	; (8005e64 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d001      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0b8      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d020      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d00:	4b59      	ldr	r3, [pc, #356]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	4a58      	ldr	r2, [pc, #352]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d18:	4b53      	ldr	r3, [pc, #332]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4a52      	ldr	r2, [pc, #328]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d24:	4b50      	ldr	r3, [pc, #320]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	494d      	ldr	r1, [pc, #308]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d044      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d107      	bne.n	8005d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4a:	4b47      	ldr	r3, [pc, #284]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d119      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e07f      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d003      	beq.n	8005d6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d107      	bne.n	8005d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d6a:	4b3f      	ldr	r3, [pc, #252]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e06f      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d7a:	4b3b      	ldr	r3, [pc, #236]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e067      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d8a:	4b37      	ldr	r3, [pc, #220]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f023 0203 	bic.w	r2, r3, #3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	4934      	ldr	r1, [pc, #208]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d9c:	f7fd f8e4 	bl	8002f68 <HAL_GetTick>
 8005da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da2:	e00a      	b.n	8005dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da4:	f7fd f8e0 	bl	8002f68 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e04f      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dba:	4b2b      	ldr	r3, [pc, #172]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 020c 	and.w	r2, r3, #12
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d1eb      	bne.n	8005da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dcc:	4b25      	ldr	r3, [pc, #148]	; (8005e64 <HAL_RCC_ClockConfig+0x1b8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d20c      	bcs.n	8005df4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dda:	4b22      	ldr	r3, [pc, #136]	; (8005e64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de2:	4b20      	ldr	r3, [pc, #128]	; (8005e64 <HAL_RCC_ClockConfig+0x1b8>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d001      	beq.n	8005df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e032      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e00:	4b19      	ldr	r3, [pc, #100]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	4916      	ldr	r1, [pc, #88]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e1e:	4b12      	ldr	r3, [pc, #72]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	490e      	ldr	r1, [pc, #56]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e32:	f000 f821 	bl	8005e78 <HAL_RCC_GetSysClockFreq>
 8005e36:	4602      	mov	r2, r0
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	490a      	ldr	r1, [pc, #40]	; (8005e6c <HAL_RCC_ClockConfig+0x1c0>)
 8005e44:	5ccb      	ldrb	r3, [r1, r3]
 8005e46:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4a:	4a09      	ldr	r2, [pc, #36]	; (8005e70 <HAL_RCC_ClockConfig+0x1c4>)
 8005e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e4e:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fb fed6 	bl	8001c04 <HAL_InitTick>

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40023c00 	.word	0x40023c00
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	0800a108 	.word	0x0800a108
 8005e70:	20000010 	.word	0x20000010
 8005e74:	20000014 	.word	0x20000014

08005e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e7c:	b090      	sub	sp, #64	; 0x40
 8005e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	637b      	str	r3, [r7, #52]	; 0x34
 8005e84:	2300      	movs	r3, #0
 8005e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e88:	2300      	movs	r3, #0
 8005e8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e90:	4b59      	ldr	r3, [pc, #356]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f003 030c 	and.w	r3, r3, #12
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d00d      	beq.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	f200 80a1 	bhi.w	8005fe4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_RCC_GetSysClockFreq+0x34>
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d003      	beq.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005eaa:	e09b      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005eac:	4b53      	ldr	r3, [pc, #332]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x184>)
 8005eae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005eb0:	e09b      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eb2:	4b53      	ldr	r3, [pc, #332]	; (8006000 <HAL_RCC_GetSysClockFreq+0x188>)
 8005eb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005eb6:	e098      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eb8:	4b4f      	ldr	r3, [pc, #316]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ec0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ec2:	4b4d      	ldr	r3, [pc, #308]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d028      	beq.n	8005f20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ece:	4b4a      	ldr	r3, [pc, #296]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	099b      	lsrs	r3, r3, #6
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	623b      	str	r3, [r7, #32]
 8005ed8:	627a      	str	r2, [r7, #36]	; 0x24
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4b47      	ldr	r3, [pc, #284]	; (8006000 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ee4:	fb03 f201 	mul.w	r2, r3, r1
 8005ee8:	2300      	movs	r3, #0
 8005eea:	fb00 f303 	mul.w	r3, r0, r3
 8005eee:	4413      	add	r3, r2
 8005ef0:	4a43      	ldr	r2, [pc, #268]	; (8006000 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ef2:	fba0 1202 	umull	r1, r2, r0, r2
 8005ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ef8:	460a      	mov	r2, r1
 8005efa:	62ba      	str	r2, [r7, #40]	; 0x28
 8005efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005efe:	4413      	add	r3, r2
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	2200      	movs	r2, #0
 8005f06:	61bb      	str	r3, [r7, #24]
 8005f08:	61fa      	str	r2, [r7, #28]
 8005f0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005f12:	f7fa f959 	bl	80001c8 <__aeabi_uldivmod>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f1e:	e053      	b.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f20:	4b35      	ldr	r3, [pc, #212]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	099b      	lsrs	r3, r3, #6
 8005f26:	2200      	movs	r2, #0
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	617a      	str	r2, [r7, #20]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005f32:	f04f 0b00 	mov.w	fp, #0
 8005f36:	4652      	mov	r2, sl
 8005f38:	465b      	mov	r3, fp
 8005f3a:	f04f 0000 	mov.w	r0, #0
 8005f3e:	f04f 0100 	mov.w	r1, #0
 8005f42:	0159      	lsls	r1, r3, #5
 8005f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f48:	0150      	lsls	r0, r2, #5
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	ebb2 080a 	subs.w	r8, r2, sl
 8005f52:	eb63 090b 	sbc.w	r9, r3, fp
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005f62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005f66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005f6a:	ebb2 0408 	subs.w	r4, r2, r8
 8005f6e:	eb63 0509 	sbc.w	r5, r3, r9
 8005f72:	f04f 0200 	mov.w	r2, #0
 8005f76:	f04f 0300 	mov.w	r3, #0
 8005f7a:	00eb      	lsls	r3, r5, #3
 8005f7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f80:	00e2      	lsls	r2, r4, #3
 8005f82:	4614      	mov	r4, r2
 8005f84:	461d      	mov	r5, r3
 8005f86:	eb14 030a 	adds.w	r3, r4, sl
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	eb45 030b 	adc.w	r3, r5, fp
 8005f90:	607b      	str	r3, [r7, #4]
 8005f92:	f04f 0200 	mov.w	r2, #0
 8005f96:	f04f 0300 	mov.w	r3, #0
 8005f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	028b      	lsls	r3, r1, #10
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fa8:	4621      	mov	r1, r4
 8005faa:	028a      	lsls	r2, r1, #10
 8005fac:	4610      	mov	r0, r2
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	60fa      	str	r2, [r7, #12]
 8005fb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fbc:	f7fa f904 	bl	80001c8 <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fc8:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	0c1b      	lsrs	r3, r3, #16
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005fe2:	e002      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x184>)
 8005fe6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3740      	adds	r7, #64	; 0x40
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	00f42400 	.word	0x00f42400
 8006000:	017d7840 	.word	0x017d7840

08006004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006008:	4b03      	ldr	r3, [pc, #12]	; (8006018 <HAL_RCC_GetHCLKFreq+0x14>)
 800600a:	681b      	ldr	r3, [r3, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20000010 	.word	0x20000010

0800601c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006020:	f7ff fff0 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006024:	4602      	mov	r2, r0
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	0a9b      	lsrs	r3, r3, #10
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4903      	ldr	r1, [pc, #12]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006032:	5ccb      	ldrb	r3, [r1, r3]
 8006034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40023800 	.word	0x40023800
 8006040:	0800a118 	.word	0x0800a118

08006044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006048:	f7ff ffdc 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 800604c:	4602      	mov	r2, r0
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	0b5b      	lsrs	r3, r3, #13
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	4903      	ldr	r1, [pc, #12]	; (8006068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800605a:	5ccb      	ldrb	r3, [r1, r3]
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40023800 	.word	0x40023800
 8006068:	0800a118 	.word	0x0800a118

0800606c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	220f      	movs	r2, #15
 800607a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800607c:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <HAL_RCC_GetClockConfig+0x5c>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 0203 	and.w	r2, r3, #3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006088:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <HAL_RCC_GetClockConfig+0x5c>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006094:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <HAL_RCC_GetClockConfig+0x5c>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <HAL_RCC_GetClockConfig+0x5c>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	08db      	lsrs	r3, r3, #3
 80060a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060ae:	4b07      	ldr	r3, [pc, #28]	; (80060cc <HAL_RCC_GetClockConfig+0x60>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0207 	and.w	r2, r3, #7
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	601a      	str	r2, [r3, #0]
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40023800 	.word	0x40023800
 80060cc:	40023c00 	.word	0x40023c00

080060d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e07b      	b.n	80061da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d108      	bne.n	80060fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060f2:	d009      	beq.n	8006108 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	61da      	str	r2, [r3, #28]
 80060fa:	e005      	b.n	8006108 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fb fcfe 	bl	8001b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800613e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618c:	ea42 0103 	orr.w	r1, r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	0c1b      	lsrs	r3, r3, #16
 80061a6:	f003 0104 	and.w	r1, r3, #4
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	f003 0210 	and.w	r2, r3, #16
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e041      	b.n	8006278 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d106      	bne.n	800620e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7fc f87f 	bl	800230c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3304      	adds	r3, #4
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f000 fbb1 	bl	8006988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b01      	cmp	r3, #1
 8006292:	d001      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e04e      	b.n	8006336 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a23      	ldr	r2, [pc, #140]	; (8006344 <HAL_TIM_Base_Start_IT+0xc4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d022      	beq.n	8006300 <HAL_TIM_Base_Start_IT+0x80>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c2:	d01d      	beq.n	8006300 <HAL_TIM_Base_Start_IT+0x80>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <HAL_TIM_Base_Start_IT+0xc8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d018      	beq.n	8006300 <HAL_TIM_Base_Start_IT+0x80>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1e      	ldr	r2, [pc, #120]	; (800634c <HAL_TIM_Base_Start_IT+0xcc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d013      	beq.n	8006300 <HAL_TIM_Base_Start_IT+0x80>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1c      	ldr	r2, [pc, #112]	; (8006350 <HAL_TIM_Base_Start_IT+0xd0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00e      	beq.n	8006300 <HAL_TIM_Base_Start_IT+0x80>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1b      	ldr	r2, [pc, #108]	; (8006354 <HAL_TIM_Base_Start_IT+0xd4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d009      	beq.n	8006300 <HAL_TIM_Base_Start_IT+0x80>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a19      	ldr	r2, [pc, #100]	; (8006358 <HAL_TIM_Base_Start_IT+0xd8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d004      	beq.n	8006300 <HAL_TIM_Base_Start_IT+0x80>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a18      	ldr	r2, [pc, #96]	; (800635c <HAL_TIM_Base_Start_IT+0xdc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d111      	bne.n	8006324 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b06      	cmp	r3, #6
 8006310:	d010      	beq.n	8006334 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f042 0201 	orr.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006322:	e007      	b.n	8006334 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40010000 	.word	0x40010000
 8006348:	40000400 	.word	0x40000400
 800634c:	40000800 	.word	0x40000800
 8006350:	40000c00 	.word	0x40000c00
 8006354:	40010400 	.word	0x40010400
 8006358:	40014000 	.word	0x40014000
 800635c:	40001800 	.word	0x40001800

08006360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e041      	b.n	80063f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f839 	bl	80063fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3304      	adds	r3, #4
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f000 faf2 	bl	8006988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b02      	cmp	r3, #2
 8006426:	d122      	bne.n	800646e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b02      	cmp	r3, #2
 8006434:	d11b      	bne.n	800646e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f06f 0202 	mvn.w	r2, #2
 800643e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fa78 	bl	800694a <HAL_TIM_IC_CaptureCallback>
 800645a:	e005      	b.n	8006468 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fa6a 	bl	8006936 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fa7b 	bl	800695e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b04      	cmp	r3, #4
 800647a:	d122      	bne.n	80064c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b04      	cmp	r3, #4
 8006488:	d11b      	bne.n	80064c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f06f 0204 	mvn.w	r2, #4
 8006492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fa4e 	bl	800694a <HAL_TIM_IC_CaptureCallback>
 80064ae:	e005      	b.n	80064bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fa40 	bl	8006936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa51 	bl	800695e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d122      	bne.n	8006516 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d11b      	bne.n	8006516 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f06f 0208 	mvn.w	r2, #8
 80064e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2204      	movs	r2, #4
 80064ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa24 	bl	800694a <HAL_TIM_IC_CaptureCallback>
 8006502:	e005      	b.n	8006510 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fa16 	bl	8006936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fa27 	bl	800695e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f003 0310 	and.w	r3, r3, #16
 8006520:	2b10      	cmp	r3, #16
 8006522:	d122      	bne.n	800656a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f003 0310 	and.w	r3, r3, #16
 800652e:	2b10      	cmp	r3, #16
 8006530:	d11b      	bne.n	800656a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f06f 0210 	mvn.w	r2, #16
 800653a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2208      	movs	r2, #8
 8006540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f9fa 	bl	800694a <HAL_TIM_IC_CaptureCallback>
 8006556:	e005      	b.n	8006564 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f9ec 	bl	8006936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f9fd 	bl	800695e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b01      	cmp	r3, #1
 8006576:	d10e      	bne.n	8006596 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b01      	cmp	r3, #1
 8006584:	d107      	bne.n	8006596 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f06f 0201 	mvn.w	r2, #1
 800658e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fb fa7d 	bl	8001a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a0:	2b80      	cmp	r3, #128	; 0x80
 80065a2:	d10e      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ae:	2b80      	cmp	r3, #128	; 0x80
 80065b0:	d107      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fda5 	bl	800710c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b40      	cmp	r3, #64	; 0x40
 80065ce:	d10e      	bne.n	80065ee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	d107      	bne.n	80065ee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f9c2 	bl	8006972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d10e      	bne.n	800661a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b20      	cmp	r3, #32
 8006608:	d107      	bne.n	800661a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f06f 0220 	mvn.w	r2, #32
 8006612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fd6f 	bl	80070f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800661a:	bf00      	nop
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800663e:	2302      	movs	r3, #2
 8006640:	e0ae      	b.n	80067a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b0c      	cmp	r3, #12
 800664e:	f200 809f 	bhi.w	8006790 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006652:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	0800668d 	.word	0x0800668d
 800665c:	08006791 	.word	0x08006791
 8006660:	08006791 	.word	0x08006791
 8006664:	08006791 	.word	0x08006791
 8006668:	080066cd 	.word	0x080066cd
 800666c:	08006791 	.word	0x08006791
 8006670:	08006791 	.word	0x08006791
 8006674:	08006791 	.word	0x08006791
 8006678:	0800670f 	.word	0x0800670f
 800667c:	08006791 	.word	0x08006791
 8006680:	08006791 	.word	0x08006791
 8006684:	08006791 	.word	0x08006791
 8006688:	0800674f 	.word	0x0800674f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fa18 	bl	8006ac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0208 	orr.w	r2, r2, #8
 80066a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0204 	bic.w	r2, r2, #4
 80066b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6999      	ldr	r1, [r3, #24]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	619a      	str	r2, [r3, #24]
      break;
 80066ca:	e064      	b.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fa68 	bl	8006ba8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699a      	ldr	r2, [r3, #24]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6999      	ldr	r1, [r3, #24]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	021a      	lsls	r2, r3, #8
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	619a      	str	r2, [r3, #24]
      break;
 800670c:	e043      	b.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fabd 	bl	8006c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69da      	ldr	r2, [r3, #28]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0208 	orr.w	r2, r2, #8
 8006728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69da      	ldr	r2, [r3, #28]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0204 	bic.w	r2, r2, #4
 8006738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69d9      	ldr	r1, [r3, #28]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	61da      	str	r2, [r3, #28]
      break;
 800674c:	e023      	b.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fb11 	bl	8006d7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69da      	ldr	r2, [r3, #28]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69d9      	ldr	r1, [r3, #28]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	021a      	lsls	r2, r3, #8
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	61da      	str	r2, [r3, #28]
      break;
 800678e:	e002      	b.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	75fb      	strb	r3, [r7, #23]
      break;
 8006794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800679e:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_TIM_ConfigClockSource+0x1c>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e0b4      	b.n	800692e <HAL_TIM_ConfigClockSource+0x186>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fc:	d03e      	beq.n	800687c <HAL_TIM_ConfigClockSource+0xd4>
 80067fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006802:	f200 8087 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 8006806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680a:	f000 8086 	beq.w	800691a <HAL_TIM_ConfigClockSource+0x172>
 800680e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006812:	d87f      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 8006814:	2b70      	cmp	r3, #112	; 0x70
 8006816:	d01a      	beq.n	800684e <HAL_TIM_ConfigClockSource+0xa6>
 8006818:	2b70      	cmp	r3, #112	; 0x70
 800681a:	d87b      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 800681c:	2b60      	cmp	r3, #96	; 0x60
 800681e:	d050      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0x11a>
 8006820:	2b60      	cmp	r3, #96	; 0x60
 8006822:	d877      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 8006824:	2b50      	cmp	r3, #80	; 0x50
 8006826:	d03c      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0xfa>
 8006828:	2b50      	cmp	r3, #80	; 0x50
 800682a:	d873      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 800682c:	2b40      	cmp	r3, #64	; 0x40
 800682e:	d058      	beq.n	80068e2 <HAL_TIM_ConfigClockSource+0x13a>
 8006830:	2b40      	cmp	r3, #64	; 0x40
 8006832:	d86f      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 8006834:	2b30      	cmp	r3, #48	; 0x30
 8006836:	d064      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x15a>
 8006838:	2b30      	cmp	r3, #48	; 0x30
 800683a:	d86b      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 800683c:	2b20      	cmp	r3, #32
 800683e:	d060      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x15a>
 8006840:	2b20      	cmp	r3, #32
 8006842:	d867      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d05c      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x15a>
 8006848:	2b10      	cmp	r3, #16
 800684a:	d05a      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x15a>
 800684c:	e062      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6899      	ldr	r1, [r3, #8]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f000 fb5d 	bl	8006f1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	609a      	str	r2, [r3, #8]
      break;
 800687a:	e04f      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	6899      	ldr	r1, [r3, #8]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f000 fb46 	bl	8006f1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800689e:	609a      	str	r2, [r3, #8]
      break;
 80068a0:	e03c      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6859      	ldr	r1, [r3, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	461a      	mov	r2, r3
 80068b0:	f000 faba 	bl	8006e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2150      	movs	r1, #80	; 0x50
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fb13 	bl	8006ee6 <TIM_ITRx_SetConfig>
      break;
 80068c0:	e02c      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	6859      	ldr	r1, [r3, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f000 fad9 	bl	8006e86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2160      	movs	r1, #96	; 0x60
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fb03 	bl	8006ee6 <TIM_ITRx_SetConfig>
      break;
 80068e0:	e01c      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	6859      	ldr	r1, [r3, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f000 fa9a 	bl	8006e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2140      	movs	r1, #64	; 0x40
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 faf3 	bl	8006ee6 <TIM_ITRx_SetConfig>
      break;
 8006900:	e00c      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f000 faea 	bl	8006ee6 <TIM_ITRx_SetConfig>
      break;
 8006912:	e003      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
      break;
 8006918:	e000      	b.n	800691c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800691a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800692c:	7bfb      	ldrb	r3, [r7, #15]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
	...

08006988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a40      	ldr	r2, [pc, #256]	; (8006a9c <TIM_Base_SetConfig+0x114>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d013      	beq.n	80069c8 <TIM_Base_SetConfig+0x40>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a6:	d00f      	beq.n	80069c8 <TIM_Base_SetConfig+0x40>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a3d      	ldr	r2, [pc, #244]	; (8006aa0 <TIM_Base_SetConfig+0x118>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00b      	beq.n	80069c8 <TIM_Base_SetConfig+0x40>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a3c      	ldr	r2, [pc, #240]	; (8006aa4 <TIM_Base_SetConfig+0x11c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d007      	beq.n	80069c8 <TIM_Base_SetConfig+0x40>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a3b      	ldr	r2, [pc, #236]	; (8006aa8 <TIM_Base_SetConfig+0x120>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_Base_SetConfig+0x40>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a3a      	ldr	r2, [pc, #232]	; (8006aac <TIM_Base_SetConfig+0x124>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d108      	bne.n	80069da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a2f      	ldr	r2, [pc, #188]	; (8006a9c <TIM_Base_SetConfig+0x114>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d02b      	beq.n	8006a3a <TIM_Base_SetConfig+0xb2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e8:	d027      	beq.n	8006a3a <TIM_Base_SetConfig+0xb2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a2c      	ldr	r2, [pc, #176]	; (8006aa0 <TIM_Base_SetConfig+0x118>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d023      	beq.n	8006a3a <TIM_Base_SetConfig+0xb2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a2b      	ldr	r2, [pc, #172]	; (8006aa4 <TIM_Base_SetConfig+0x11c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d01f      	beq.n	8006a3a <TIM_Base_SetConfig+0xb2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a2a      	ldr	r2, [pc, #168]	; (8006aa8 <TIM_Base_SetConfig+0x120>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d01b      	beq.n	8006a3a <TIM_Base_SetConfig+0xb2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a29      	ldr	r2, [pc, #164]	; (8006aac <TIM_Base_SetConfig+0x124>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d017      	beq.n	8006a3a <TIM_Base_SetConfig+0xb2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a28      	ldr	r2, [pc, #160]	; (8006ab0 <TIM_Base_SetConfig+0x128>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d013      	beq.n	8006a3a <TIM_Base_SetConfig+0xb2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a27      	ldr	r2, [pc, #156]	; (8006ab4 <TIM_Base_SetConfig+0x12c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00f      	beq.n	8006a3a <TIM_Base_SetConfig+0xb2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a26      	ldr	r2, [pc, #152]	; (8006ab8 <TIM_Base_SetConfig+0x130>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00b      	beq.n	8006a3a <TIM_Base_SetConfig+0xb2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a25      	ldr	r2, [pc, #148]	; (8006abc <TIM_Base_SetConfig+0x134>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d007      	beq.n	8006a3a <TIM_Base_SetConfig+0xb2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a24      	ldr	r2, [pc, #144]	; (8006ac0 <TIM_Base_SetConfig+0x138>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d003      	beq.n	8006a3a <TIM_Base_SetConfig+0xb2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a23      	ldr	r2, [pc, #140]	; (8006ac4 <TIM_Base_SetConfig+0x13c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d108      	bne.n	8006a4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a0a      	ldr	r2, [pc, #40]	; (8006a9c <TIM_Base_SetConfig+0x114>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d003      	beq.n	8006a80 <TIM_Base_SetConfig+0xf8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a0c      	ldr	r2, [pc, #48]	; (8006aac <TIM_Base_SetConfig+0x124>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d103      	bne.n	8006a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	691a      	ldr	r2, [r3, #16]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	615a      	str	r2, [r3, #20]
}
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40010000 	.word	0x40010000
 8006aa0:	40000400 	.word	0x40000400
 8006aa4:	40000800 	.word	0x40000800
 8006aa8:	40000c00 	.word	0x40000c00
 8006aac:	40010400 	.word	0x40010400
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40014400 	.word	0x40014400
 8006ab8:	40014800 	.word	0x40014800
 8006abc:	40001800 	.word	0x40001800
 8006ac0:	40001c00 	.word	0x40001c00
 8006ac4:	40002000 	.word	0x40002000

08006ac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f023 0201 	bic.w	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 0303 	bic.w	r3, r3, #3
 8006afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f023 0302 	bic.w	r3, r3, #2
 8006b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a20      	ldr	r2, [pc, #128]	; (8006ba0 <TIM_OC1_SetConfig+0xd8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_OC1_SetConfig+0x64>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a1f      	ldr	r2, [pc, #124]	; (8006ba4 <TIM_OC1_SetConfig+0xdc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d10c      	bne.n	8006b46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f023 0308 	bic.w	r3, r3, #8
 8006b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f023 0304 	bic.w	r3, r3, #4
 8006b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a15      	ldr	r2, [pc, #84]	; (8006ba0 <TIM_OC1_SetConfig+0xd8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d003      	beq.n	8006b56 <TIM_OC1_SetConfig+0x8e>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a14      	ldr	r2, [pc, #80]	; (8006ba4 <TIM_OC1_SetConfig+0xdc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d111      	bne.n	8006b7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	621a      	str	r2, [r3, #32]
}
 8006b94:	bf00      	nop
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	40010000 	.word	0x40010000
 8006ba4:	40010400 	.word	0x40010400

08006ba8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f023 0210 	bic.w	r2, r3, #16
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	021b      	lsls	r3, r3, #8
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f023 0320 	bic.w	r3, r3, #32
 8006bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a22      	ldr	r2, [pc, #136]	; (8006c8c <TIM_OC2_SetConfig+0xe4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d003      	beq.n	8006c10 <TIM_OC2_SetConfig+0x68>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a21      	ldr	r2, [pc, #132]	; (8006c90 <TIM_OC2_SetConfig+0xe8>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d10d      	bne.n	8006c2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a17      	ldr	r2, [pc, #92]	; (8006c8c <TIM_OC2_SetConfig+0xe4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d003      	beq.n	8006c3c <TIM_OC2_SetConfig+0x94>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a16      	ldr	r2, [pc, #88]	; (8006c90 <TIM_OC2_SetConfig+0xe8>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d113      	bne.n	8006c64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40010000 	.word	0x40010000
 8006c90:	40010400 	.word	0x40010400

08006c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0303 	bic.w	r3, r3, #3
 8006cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a21      	ldr	r2, [pc, #132]	; (8006d74 <TIM_OC3_SetConfig+0xe0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d003      	beq.n	8006cfa <TIM_OC3_SetConfig+0x66>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a20      	ldr	r2, [pc, #128]	; (8006d78 <TIM_OC3_SetConfig+0xe4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d10d      	bne.n	8006d16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	021b      	lsls	r3, r3, #8
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a16      	ldr	r2, [pc, #88]	; (8006d74 <TIM_OC3_SetConfig+0xe0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d003      	beq.n	8006d26 <TIM_OC3_SetConfig+0x92>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a15      	ldr	r2, [pc, #84]	; (8006d78 <TIM_OC3_SetConfig+0xe4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d113      	bne.n	8006d4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	621a      	str	r2, [r3, #32]
}
 8006d68:	bf00      	nop
 8006d6a:	371c      	adds	r7, #28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	40010000 	.word	0x40010000
 8006d78:	40010400 	.word	0x40010400

08006d7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	031b      	lsls	r3, r3, #12
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a12      	ldr	r2, [pc, #72]	; (8006e20 <TIM_OC4_SetConfig+0xa4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_OC4_SetConfig+0x68>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a11      	ldr	r2, [pc, #68]	; (8006e24 <TIM_OC4_SetConfig+0xa8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d109      	bne.n	8006df8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	019b      	lsls	r3, r3, #6
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	621a      	str	r2, [r3, #32]
}
 8006e12:	bf00      	nop
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40010000 	.word	0x40010000
 8006e24:	40010400 	.word	0x40010400

08006e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	f023 0201 	bic.w	r2, r3, #1
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f023 030a 	bic.w	r3, r3, #10
 8006e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	621a      	str	r2, [r3, #32]
}
 8006e7a:	bf00      	nop
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b087      	sub	sp, #28
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	f023 0210 	bic.w	r2, r3, #16
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	031b      	lsls	r3, r3, #12
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ec2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	621a      	str	r2, [r3, #32]
}
 8006eda:	bf00      	nop
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b085      	sub	sp, #20
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f043 0307 	orr.w	r3, r3, #7
 8006f08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	609a      	str	r2, [r3, #8]
}
 8006f10:	bf00      	nop
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	021a      	lsls	r2, r3, #8
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	609a      	str	r2, [r3, #8]
}
 8006f50:	bf00      	nop
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e05a      	b.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a21      	ldr	r2, [pc, #132]	; (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d022      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc0:	d01d      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1d      	ldr	r2, [pc, #116]	; (800703c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d018      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1b      	ldr	r2, [pc, #108]	; (8007040 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d013      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1a      	ldr	r2, [pc, #104]	; (8007044 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00e      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a18      	ldr	r2, [pc, #96]	; (8007048 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a17      	ldr	r2, [pc, #92]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a15      	ldr	r2, [pc, #84]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d10c      	bne.n	8007018 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	4313      	orrs	r3, r2
 800700e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	40010000 	.word	0x40010000
 800703c:	40000400 	.word	0x40000400
 8007040:	40000800 	.word	0x40000800
 8007044:	40000c00 	.word	0x40000c00
 8007048:	40010400 	.word	0x40010400
 800704c:	40014000 	.word	0x40014000
 8007050:	40001800 	.word	0x40001800

08007054 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007068:	2b01      	cmp	r3, #1
 800706a:	d101      	bne.n	8007070 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800706c:	2302      	movs	r3, #2
 800706e:	e03d      	b.n	80070ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e03f      	b.n	80071b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d106      	bne.n	800714c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fb faa4 	bl	8002694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2224      	movs	r2, #36	; 0x24
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fc67 	bl	8007a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	695a      	ldr	r2, [r3, #20]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68da      	ldr	r2, [r3, #12]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b0ba      	sub	sp, #232	; 0xe8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10f      	bne.n	8007222 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <HAL_UART_IRQHandler+0x66>
 800720e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fb51 	bl	80078c2 <UART_Receive_IT>
      return;
 8007220:	e256      	b.n	80076d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 80de 	beq.w	80073e8 <HAL_UART_IRQHandler+0x22c>
 800722c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d106      	bne.n	8007246 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 80d1 	beq.w	80073e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <HAL_UART_IRQHandler+0xae>
 8007252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f043 0201 	orr.w	r2, r3, #1
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800726a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00b      	beq.n	800728e <HAL_UART_IRQHandler+0xd2>
 8007276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	f043 0202 	orr.w	r2, r3, #2
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800728e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00b      	beq.n	80072b2 <HAL_UART_IRQHandler+0xf6>
 800729a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	f043 0204 	orr.w	r2, r3, #4
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b6:	f003 0308 	and.w	r3, r3, #8
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d011      	beq.n	80072e2 <HAL_UART_IRQHandler+0x126>
 80072be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d005      	beq.n	80072e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f043 0208 	orr.w	r2, r3, #8
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 81ed 	beq.w	80076c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d008      	beq.n	800730a <HAL_UART_IRQHandler+0x14e>
 80072f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fadc 	bl	80078c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007314:	2b40      	cmp	r3, #64	; 0x40
 8007316:	bf0c      	ite	eq
 8007318:	2301      	moveq	r3, #1
 800731a:	2300      	movne	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	f003 0308 	and.w	r3, r3, #8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <HAL_UART_IRQHandler+0x17a>
 800732e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d04f      	beq.n	80073d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f9e4 	bl	8007704 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	2b40      	cmp	r3, #64	; 0x40
 8007348:	d141      	bne.n	80073ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3314      	adds	r3, #20
 8007350:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3314      	adds	r3, #20
 8007372:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007376:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800737a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007382:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800738e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1d9      	bne.n	800734a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	2b00      	cmp	r3, #0
 800739c:	d013      	beq.n	80073c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	4a7d      	ldr	r2, [pc, #500]	; (8007598 <HAL_UART_IRQHandler+0x3dc>)
 80073a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fc fb6a 	bl	8003a84 <HAL_DMA_Abort_IT>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d016      	beq.n	80073e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073c0:	4610      	mov	r0, r2
 80073c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c4:	e00e      	b.n	80073e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f986 	bl	80076d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073cc:	e00a      	b.n	80073e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f982 	bl	80076d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d4:	e006      	b.n	80073e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f97e 	bl	80076d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80073e2:	e170      	b.n	80076c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e4:	bf00      	nop
    return;
 80073e6:	e16e      	b.n	80076c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	f040 814a 	bne.w	8007686 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f6:	f003 0310 	and.w	r3, r3, #16
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 8143 	beq.w	8007686 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007404:	f003 0310 	and.w	r3, r3, #16
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 813c 	beq.w	8007686 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60bb      	str	r3, [r7, #8]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	60bb      	str	r3, [r7, #8]
 8007422:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742e:	2b40      	cmp	r3, #64	; 0x40
 8007430:	f040 80b4 	bne.w	800759c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007440:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 8140 	beq.w	80076ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800744e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007452:	429a      	cmp	r2, r3
 8007454:	f080 8139 	bcs.w	80076ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800745e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800746a:	f000 8088 	beq.w	800757e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	330c      	adds	r3, #12
 8007474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800748c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800749a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800749e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074aa:	e841 2300 	strex	r3, r2, [r1]
 80074ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1d9      	bne.n	800746e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3314      	adds	r3, #20
 80074c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074cc:	f023 0301 	bic.w	r3, r3, #1
 80074d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3314      	adds	r3, #20
 80074da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e1      	bne.n	80074ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3314      	adds	r3, #20
 80074fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800750c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3314      	adds	r3, #20
 8007516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800751a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800751c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e3      	bne.n	80074f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	330c      	adds	r3, #12
 8007542:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800754c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754e:	f023 0310 	bic.w	r3, r3, #16
 8007552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	330c      	adds	r3, #12
 800755c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007560:	65ba      	str	r2, [r7, #88]	; 0x58
 8007562:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007566:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800756e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e3      	bne.n	800753c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	4618      	mov	r0, r3
 800757a:	f7fc fa13 	bl	80039a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007586:	b29b      	uxth	r3, r3
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	b29b      	uxth	r3, r3
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f8ac 	bl	80076ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007594:	e099      	b.n	80076ca <HAL_UART_IRQHandler+0x50e>
 8007596:	bf00      	nop
 8007598:	080077cb 	.word	0x080077cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 808b 	beq.w	80076ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80075b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 8086 	beq.w	80076ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	330c      	adds	r3, #12
 80075c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	330c      	adds	r3, #12
 80075e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075e6:	647a      	str	r2, [r7, #68]	; 0x44
 80075e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e3      	bne.n	80075c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3314      	adds	r3, #20
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	623b      	str	r3, [r7, #32]
   return(result);
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	f023 0301 	bic.w	r3, r3, #1
 8007610:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3314      	adds	r3, #20
 800761a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800761e:	633a      	str	r2, [r7, #48]	; 0x30
 8007620:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e3      	bne.n	80075fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2220      	movs	r2, #32
 8007636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	330c      	adds	r3, #12
 8007646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0310 	bic.w	r3, r3, #16
 8007656:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	330c      	adds	r3, #12
 8007660:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007664:	61fa      	str	r2, [r7, #28]
 8007666:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	69b9      	ldr	r1, [r7, #24]
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	617b      	str	r3, [r7, #20]
   return(result);
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e3      	bne.n	8007640 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f834 	bl	80076ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007684:	e023      	b.n	80076ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <HAL_UART_IRQHandler+0x4ea>
 8007692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f8a7 	bl	80077f2 <UART_Transmit_IT>
    return;
 80076a4:	e014      	b.n	80076d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00e      	beq.n	80076d0 <HAL_UART_IRQHandler+0x514>
 80076b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d008      	beq.n	80076d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f8e7 	bl	8007892 <UART_EndTransmit_IT>
    return;
 80076c4:	e004      	b.n	80076d0 <HAL_UART_IRQHandler+0x514>
    return;
 80076c6:	bf00      	nop
 80076c8:	e002      	b.n	80076d0 <HAL_UART_IRQHandler+0x514>
      return;
 80076ca:	bf00      	nop
 80076cc:	e000      	b.n	80076d0 <HAL_UART_IRQHandler+0x514>
      return;
 80076ce:	bf00      	nop
  }
}
 80076d0:	37e8      	adds	r7, #232	; 0xe8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop

080076d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007704:	b480      	push	{r7}
 8007706:	b095      	sub	sp, #84	; 0x54
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	330c      	adds	r3, #12
 8007712:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800772c:	643a      	str	r2, [r7, #64]	; 0x40
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007732:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e5      	bne.n	800770c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3314      	adds	r3, #20
 8007746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	f023 0301 	bic.w	r3, r3, #1
 8007756:	64bb      	str	r3, [r7, #72]	; 0x48
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3314      	adds	r3, #20
 800775e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007760:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007768:	e841 2300 	strex	r3, r2, [r1]
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e5      	bne.n	8007740 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	2b01      	cmp	r3, #1
 800777a:	d119      	bne.n	80077b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	330c      	adds	r3, #12
 8007782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	e853 3f00 	ldrex	r3, [r3]
 800778a:	60bb      	str	r3, [r7, #8]
   return(result);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f023 0310 	bic.w	r3, r3, #16
 8007792:	647b      	str	r3, [r7, #68]	; 0x44
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	330c      	adds	r3, #12
 800779a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800779c:	61ba      	str	r2, [r7, #24]
 800779e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	6979      	ldr	r1, [r7, #20]
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	613b      	str	r3, [r7, #16]
   return(result);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e5      	bne.n	800777c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077be:	bf00      	nop
 80077c0:	3754      	adds	r7, #84	; 0x54
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7ff ff77 	bl	80076d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b085      	sub	sp, #20
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b21      	cmp	r3, #33	; 0x21
 8007804:	d13e      	bne.n	8007884 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780e:	d114      	bne.n	800783a <UART_Transmit_IT+0x48>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d110      	bne.n	800783a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800782c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	1c9a      	adds	r2, r3, #2
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	621a      	str	r2, [r3, #32]
 8007838:	e008      	b.n	800784c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	1c59      	adds	r1, r3, #1
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6211      	str	r1, [r2, #32]
 8007844:	781a      	ldrb	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007850:	b29b      	uxth	r3, r3
 8007852:	3b01      	subs	r3, #1
 8007854:	b29b      	uxth	r3, r3
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	4619      	mov	r1, r3
 800785a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10f      	bne.n	8007880 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800786e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800787e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	e000      	b.n	8007886 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007884:	2302      	movs	r3, #2
  }
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7f9 f8f6 	bl	8000aa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b08c      	sub	sp, #48	; 0x30
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b22      	cmp	r3, #34	; 0x22
 80078d4:	f040 80ab 	bne.w	8007a2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e0:	d117      	bne.n	8007912 <UART_Receive_IT+0x50>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d113      	bne.n	8007912 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007900:	b29a      	uxth	r2, r3
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790a:	1c9a      	adds	r2, r3, #2
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	629a      	str	r2, [r3, #40]	; 0x28
 8007910:	e026      	b.n	8007960 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007918:	2300      	movs	r3, #0
 800791a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007924:	d007      	beq.n	8007936 <UART_Receive_IT+0x74>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10a      	bne.n	8007944 <UART_Receive_IT+0x82>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d106      	bne.n	8007944 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	b2da      	uxtb	r2, r3
 800793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	e008      	b.n	8007956 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007950:	b2da      	uxtb	r2, r3
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	1c5a      	adds	r2, r3, #1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007964:	b29b      	uxth	r3, r3
 8007966:	3b01      	subs	r3, #1
 8007968:	b29b      	uxth	r3, r3
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	4619      	mov	r1, r3
 800796e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007970:	2b00      	cmp	r3, #0
 8007972:	d15a      	bne.n	8007a2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0220 	bic.w	r2, r2, #32
 8007982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007992:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695a      	ldr	r2, [r3, #20]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0201 	bic.w	r2, r2, #1
 80079a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d135      	bne.n	8007a20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	330c      	adds	r3, #12
 80079c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	613b      	str	r3, [r7, #16]
   return(result);
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f023 0310 	bic.w	r3, r3, #16
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	330c      	adds	r3, #12
 80079d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079da:	623a      	str	r2, [r7, #32]
 80079dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	69f9      	ldr	r1, [r7, #28]
 80079e0:	6a3a      	ldr	r2, [r7, #32]
 80079e2:	e841 2300 	strex	r3, r2, [r1]
 80079e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e5      	bne.n	80079ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	2b10      	cmp	r3, #16
 80079fa:	d10a      	bne.n	8007a12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff fe67 	bl	80076ec <HAL_UARTEx_RxEventCallback>
 8007a1e:	e002      	b.n	8007a26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7f9 f855 	bl	8000ad0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	e002      	b.n	8007a30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e000      	b.n	8007a30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a2e:	2302      	movs	r3, #2
  }
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3730      	adds	r7, #48	; 0x30
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a3c:	b0c0      	sub	sp, #256	; 0x100
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a54:	68d9      	ldr	r1, [r3, #12]
 8007a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	ea40 0301 	orr.w	r3, r0, r1
 8007a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	431a      	orrs	r2, r3
 8007a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a90:	f021 010c 	bic.w	r1, r1, #12
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab2:	6999      	ldr	r1, [r3, #24]
 8007ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	ea40 0301 	orr.w	r3, r0, r1
 8007abe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	4b8f      	ldr	r3, [pc, #572]	; (8007d04 <UART_SetConfig+0x2cc>)
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d005      	beq.n	8007ad8 <UART_SetConfig+0xa0>
 8007acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	4b8d      	ldr	r3, [pc, #564]	; (8007d08 <UART_SetConfig+0x2d0>)
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d104      	bne.n	8007ae2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ad8:	f7fe fab4 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 8007adc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ae0:	e003      	b.n	8007aea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ae2:	f7fe fa9b 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007ae6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007af4:	f040 810c 	bne.w	8007d10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007afc:	2200      	movs	r2, #0
 8007afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	1891      	adds	r1, r2, r2
 8007b10:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b12:	415b      	adcs	r3, r3
 8007b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	eb12 0801 	adds.w	r8, r2, r1
 8007b20:	4629      	mov	r1, r5
 8007b22:	eb43 0901 	adc.w	r9, r3, r1
 8007b26:	f04f 0200 	mov.w	r2, #0
 8007b2a:	f04f 0300 	mov.w	r3, #0
 8007b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b3a:	4690      	mov	r8, r2
 8007b3c:	4699      	mov	r9, r3
 8007b3e:	4623      	mov	r3, r4
 8007b40:	eb18 0303 	adds.w	r3, r8, r3
 8007b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b48:	462b      	mov	r3, r5
 8007b4a:	eb49 0303 	adc.w	r3, r9, r3
 8007b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b66:	460b      	mov	r3, r1
 8007b68:	18db      	adds	r3, r3, r3
 8007b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	eb42 0303 	adc.w	r3, r2, r3
 8007b72:	657b      	str	r3, [r7, #84]	; 0x54
 8007b74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b7c:	f7f8 fb24 	bl	80001c8 <__aeabi_uldivmod>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4b61      	ldr	r3, [pc, #388]	; (8007d0c <UART_SetConfig+0x2d4>)
 8007b86:	fba3 2302 	umull	r2, r3, r3, r2
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	011c      	lsls	r4, r3, #4
 8007b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	464b      	mov	r3, r9
 8007ba4:	1891      	adds	r1, r2, r2
 8007ba6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ba8:	415b      	adcs	r3, r3
 8007baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007bb0:	4641      	mov	r1, r8
 8007bb2:	eb12 0a01 	adds.w	sl, r2, r1
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	eb43 0b01 	adc.w	fp, r3, r1
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bd0:	4692      	mov	sl, r2
 8007bd2:	469b      	mov	fp, r3
 8007bd4:	4643      	mov	r3, r8
 8007bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8007bda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bde:	464b      	mov	r3, r9
 8007be0:	eb4b 0303 	adc.w	r3, fp, r3
 8007be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	18db      	adds	r3, r3, r3
 8007c00:	643b      	str	r3, [r7, #64]	; 0x40
 8007c02:	4613      	mov	r3, r2
 8007c04:	eb42 0303 	adc.w	r3, r2, r3
 8007c08:	647b      	str	r3, [r7, #68]	; 0x44
 8007c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c12:	f7f8 fad9 	bl	80001c8 <__aeabi_uldivmod>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	4b3b      	ldr	r3, [pc, #236]	; (8007d0c <UART_SetConfig+0x2d4>)
 8007c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	2264      	movs	r2, #100	; 0x64
 8007c26:	fb02 f303 	mul.w	r3, r2, r3
 8007c2a:	1acb      	subs	r3, r1, r3
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c32:	4b36      	ldr	r3, [pc, #216]	; (8007d0c <UART_SetConfig+0x2d4>)
 8007c34:	fba3 2302 	umull	r2, r3, r3, r2
 8007c38:	095b      	lsrs	r3, r3, #5
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c40:	441c      	add	r4, r3
 8007c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c54:	4642      	mov	r2, r8
 8007c56:	464b      	mov	r3, r9
 8007c58:	1891      	adds	r1, r2, r2
 8007c5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c5c:	415b      	adcs	r3, r3
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c64:	4641      	mov	r1, r8
 8007c66:	1851      	adds	r1, r2, r1
 8007c68:	6339      	str	r1, [r7, #48]	; 0x30
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	414b      	adcs	r3, r1
 8007c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c70:	f04f 0200 	mov.w	r2, #0
 8007c74:	f04f 0300 	mov.w	r3, #0
 8007c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c7c:	4659      	mov	r1, fp
 8007c7e:	00cb      	lsls	r3, r1, #3
 8007c80:	4651      	mov	r1, sl
 8007c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c86:	4651      	mov	r1, sl
 8007c88:	00ca      	lsls	r2, r1, #3
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4642      	mov	r2, r8
 8007c92:	189b      	adds	r3, r3, r2
 8007c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c98:	464b      	mov	r3, r9
 8007c9a:	460a      	mov	r2, r1
 8007c9c:	eb42 0303 	adc.w	r3, r2, r3
 8007ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007cb8:	460b      	mov	r3, r1
 8007cba:	18db      	adds	r3, r3, r3
 8007cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	eb42 0303 	adc.w	r3, r2, r3
 8007cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007cce:	f7f8 fa7b 	bl	80001c8 <__aeabi_uldivmod>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4b0d      	ldr	r3, [pc, #52]	; (8007d0c <UART_SetConfig+0x2d4>)
 8007cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cdc:	095b      	lsrs	r3, r3, #5
 8007cde:	2164      	movs	r1, #100	; 0x64
 8007ce0:	fb01 f303 	mul.w	r3, r1, r3
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	3332      	adds	r3, #50	; 0x32
 8007cea:	4a08      	ldr	r2, [pc, #32]	; (8007d0c <UART_SetConfig+0x2d4>)
 8007cec:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf0:	095b      	lsrs	r3, r3, #5
 8007cf2:	f003 0207 	and.w	r2, r3, #7
 8007cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4422      	add	r2, r4
 8007cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d00:	e105      	b.n	8007f0e <UART_SetConfig+0x4d6>
 8007d02:	bf00      	nop
 8007d04:	40011000 	.word	0x40011000
 8007d08:	40011400 	.word	0x40011400
 8007d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d14:	2200      	movs	r2, #0
 8007d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d22:	4642      	mov	r2, r8
 8007d24:	464b      	mov	r3, r9
 8007d26:	1891      	adds	r1, r2, r2
 8007d28:	6239      	str	r1, [r7, #32]
 8007d2a:	415b      	adcs	r3, r3
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d32:	4641      	mov	r1, r8
 8007d34:	1854      	adds	r4, r2, r1
 8007d36:	4649      	mov	r1, r9
 8007d38:	eb43 0501 	adc.w	r5, r3, r1
 8007d3c:	f04f 0200 	mov.w	r2, #0
 8007d40:	f04f 0300 	mov.w	r3, #0
 8007d44:	00eb      	lsls	r3, r5, #3
 8007d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d4a:	00e2      	lsls	r2, r4, #3
 8007d4c:	4614      	mov	r4, r2
 8007d4e:	461d      	mov	r5, r3
 8007d50:	4643      	mov	r3, r8
 8007d52:	18e3      	adds	r3, r4, r3
 8007d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d58:	464b      	mov	r3, r9
 8007d5a:	eb45 0303 	adc.w	r3, r5, r3
 8007d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d72:	f04f 0200 	mov.w	r2, #0
 8007d76:	f04f 0300 	mov.w	r3, #0
 8007d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d7e:	4629      	mov	r1, r5
 8007d80:	008b      	lsls	r3, r1, #2
 8007d82:	4621      	mov	r1, r4
 8007d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d88:	4621      	mov	r1, r4
 8007d8a:	008a      	lsls	r2, r1, #2
 8007d8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d90:	f7f8 fa1a 	bl	80001c8 <__aeabi_uldivmod>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4b60      	ldr	r3, [pc, #384]	; (8007f1c <UART_SetConfig+0x4e4>)
 8007d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	011c      	lsls	r4, r3, #4
 8007da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007db4:	4642      	mov	r2, r8
 8007db6:	464b      	mov	r3, r9
 8007db8:	1891      	adds	r1, r2, r2
 8007dba:	61b9      	str	r1, [r7, #24]
 8007dbc:	415b      	adcs	r3, r3
 8007dbe:	61fb      	str	r3, [r7, #28]
 8007dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dc4:	4641      	mov	r1, r8
 8007dc6:	1851      	adds	r1, r2, r1
 8007dc8:	6139      	str	r1, [r7, #16]
 8007dca:	4649      	mov	r1, r9
 8007dcc:	414b      	adcs	r3, r1
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	f04f 0300 	mov.w	r3, #0
 8007dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ddc:	4659      	mov	r1, fp
 8007dde:	00cb      	lsls	r3, r1, #3
 8007de0:	4651      	mov	r1, sl
 8007de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007de6:	4651      	mov	r1, sl
 8007de8:	00ca      	lsls	r2, r1, #3
 8007dea:	4610      	mov	r0, r2
 8007dec:	4619      	mov	r1, r3
 8007dee:	4603      	mov	r3, r0
 8007df0:	4642      	mov	r2, r8
 8007df2:	189b      	adds	r3, r3, r2
 8007df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007df8:	464b      	mov	r3, r9
 8007dfa:	460a      	mov	r2, r1
 8007dfc:	eb42 0303 	adc.w	r3, r2, r3
 8007e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e10:	f04f 0200 	mov.w	r2, #0
 8007e14:	f04f 0300 	mov.w	r3, #0
 8007e18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e1c:	4649      	mov	r1, r9
 8007e1e:	008b      	lsls	r3, r1, #2
 8007e20:	4641      	mov	r1, r8
 8007e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e26:	4641      	mov	r1, r8
 8007e28:	008a      	lsls	r2, r1, #2
 8007e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e2e:	f7f8 f9cb 	bl	80001c8 <__aeabi_uldivmod>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4b39      	ldr	r3, [pc, #228]	; (8007f1c <UART_SetConfig+0x4e4>)
 8007e38:	fba3 1302 	umull	r1, r3, r3, r2
 8007e3c:	095b      	lsrs	r3, r3, #5
 8007e3e:	2164      	movs	r1, #100	; 0x64
 8007e40:	fb01 f303 	mul.w	r3, r1, r3
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	3332      	adds	r3, #50	; 0x32
 8007e4a:	4a34      	ldr	r2, [pc, #208]	; (8007f1c <UART_SetConfig+0x4e4>)
 8007e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e50:	095b      	lsrs	r3, r3, #5
 8007e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e56:	441c      	add	r4, r3
 8007e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8007e60:	677a      	str	r2, [r7, #116]	; 0x74
 8007e62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e66:	4642      	mov	r2, r8
 8007e68:	464b      	mov	r3, r9
 8007e6a:	1891      	adds	r1, r2, r2
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	415b      	adcs	r3, r3
 8007e70:	60fb      	str	r3, [r7, #12]
 8007e72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e76:	4641      	mov	r1, r8
 8007e78:	1851      	adds	r1, r2, r1
 8007e7a:	6039      	str	r1, [r7, #0]
 8007e7c:	4649      	mov	r1, r9
 8007e7e:	414b      	adcs	r3, r1
 8007e80:	607b      	str	r3, [r7, #4]
 8007e82:	f04f 0200 	mov.w	r2, #0
 8007e86:	f04f 0300 	mov.w	r3, #0
 8007e8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e8e:	4659      	mov	r1, fp
 8007e90:	00cb      	lsls	r3, r1, #3
 8007e92:	4651      	mov	r1, sl
 8007e94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e98:	4651      	mov	r1, sl
 8007e9a:	00ca      	lsls	r2, r1, #3
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	4642      	mov	r2, r8
 8007ea4:	189b      	adds	r3, r3, r2
 8007ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	460a      	mov	r2, r1
 8007eac:	eb42 0303 	adc.w	r3, r2, r3
 8007eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	663b      	str	r3, [r7, #96]	; 0x60
 8007ebc:	667a      	str	r2, [r7, #100]	; 0x64
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007eca:	4649      	mov	r1, r9
 8007ecc:	008b      	lsls	r3, r1, #2
 8007ece:	4641      	mov	r1, r8
 8007ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ed4:	4641      	mov	r1, r8
 8007ed6:	008a      	lsls	r2, r1, #2
 8007ed8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007edc:	f7f8 f974 	bl	80001c8 <__aeabi_uldivmod>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4b0d      	ldr	r3, [pc, #52]	; (8007f1c <UART_SetConfig+0x4e4>)
 8007ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8007eea:	095b      	lsrs	r3, r3, #5
 8007eec:	2164      	movs	r1, #100	; 0x64
 8007eee:	fb01 f303 	mul.w	r3, r1, r3
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	011b      	lsls	r3, r3, #4
 8007ef6:	3332      	adds	r3, #50	; 0x32
 8007ef8:	4a08      	ldr	r2, [pc, #32]	; (8007f1c <UART_SetConfig+0x4e4>)
 8007efa:	fba2 2303 	umull	r2, r3, r2, r3
 8007efe:	095b      	lsrs	r3, r3, #5
 8007f00:	f003 020f 	and.w	r2, r3, #15
 8007f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4422      	add	r2, r4
 8007f0c:	609a      	str	r2, [r3, #8]
}
 8007f0e:	bf00      	nop
 8007f10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f14:	46bd      	mov	sp, r7
 8007f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f1a:	bf00      	nop
 8007f1c:	51eb851f 	.word	0x51eb851f

08007f20 <__libc_init_array>:
 8007f20:	b570      	push	{r4, r5, r6, lr}
 8007f22:	4d0d      	ldr	r5, [pc, #52]	; (8007f58 <__libc_init_array+0x38>)
 8007f24:	4c0d      	ldr	r4, [pc, #52]	; (8007f5c <__libc_init_array+0x3c>)
 8007f26:	1b64      	subs	r4, r4, r5
 8007f28:	10a4      	asrs	r4, r4, #2
 8007f2a:	2600      	movs	r6, #0
 8007f2c:	42a6      	cmp	r6, r4
 8007f2e:	d109      	bne.n	8007f44 <__libc_init_array+0x24>
 8007f30:	4d0b      	ldr	r5, [pc, #44]	; (8007f60 <__libc_init_array+0x40>)
 8007f32:	4c0c      	ldr	r4, [pc, #48]	; (8007f64 <__libc_init_array+0x44>)
 8007f34:	f000 f87c 	bl	8008030 <_init>
 8007f38:	1b64      	subs	r4, r4, r5
 8007f3a:	10a4      	asrs	r4, r4, #2
 8007f3c:	2600      	movs	r6, #0
 8007f3e:	42a6      	cmp	r6, r4
 8007f40:	d105      	bne.n	8007f4e <__libc_init_array+0x2e>
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
 8007f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f48:	4798      	blx	r3
 8007f4a:	3601      	adds	r6, #1
 8007f4c:	e7ee      	b.n	8007f2c <__libc_init_array+0xc>
 8007f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f52:	4798      	blx	r3
 8007f54:	3601      	adds	r6, #1
 8007f56:	e7f2      	b.n	8007f3e <__libc_init_array+0x1e>
 8007f58:	0800a158 	.word	0x0800a158
 8007f5c:	0800a158 	.word	0x0800a158
 8007f60:	0800a158 	.word	0x0800a158
 8007f64:	0800a15c 	.word	0x0800a15c

08007f68 <__itoa>:
 8007f68:	1e93      	subs	r3, r2, #2
 8007f6a:	2b22      	cmp	r3, #34	; 0x22
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	460c      	mov	r4, r1
 8007f70:	d904      	bls.n	8007f7c <__itoa+0x14>
 8007f72:	2300      	movs	r3, #0
 8007f74:	700b      	strb	r3, [r1, #0]
 8007f76:	461c      	mov	r4, r3
 8007f78:	4620      	mov	r0, r4
 8007f7a:	bd10      	pop	{r4, pc}
 8007f7c:	2a0a      	cmp	r2, #10
 8007f7e:	d109      	bne.n	8007f94 <__itoa+0x2c>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	da07      	bge.n	8007f94 <__itoa+0x2c>
 8007f84:	232d      	movs	r3, #45	; 0x2d
 8007f86:	700b      	strb	r3, [r1, #0]
 8007f88:	4240      	negs	r0, r0
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	4421      	add	r1, r4
 8007f8e:	f000 f80d 	bl	8007fac <__utoa>
 8007f92:	e7f1      	b.n	8007f78 <__itoa+0x10>
 8007f94:	2100      	movs	r1, #0
 8007f96:	e7f9      	b.n	8007f8c <__itoa+0x24>

08007f98 <itoa>:
 8007f98:	f7ff bfe6 	b.w	8007f68 <__itoa>

08007f9c <memset>:
 8007f9c:	4402      	add	r2, r0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d100      	bne.n	8007fa6 <memset+0xa>
 8007fa4:	4770      	bx	lr
 8007fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8007faa:	e7f9      	b.n	8007fa0 <memset+0x4>

08007fac <__utoa>:
 8007fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fae:	4c1f      	ldr	r4, [pc, #124]	; (800802c <__utoa+0x80>)
 8007fb0:	b08b      	sub	sp, #44	; 0x2c
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	466e      	mov	r6, sp
 8007fb8:	f104 0c20 	add.w	ip, r4, #32
 8007fbc:	6820      	ldr	r0, [r4, #0]
 8007fbe:	6861      	ldr	r1, [r4, #4]
 8007fc0:	4637      	mov	r7, r6
 8007fc2:	c703      	stmia	r7!, {r0, r1}
 8007fc4:	3408      	adds	r4, #8
 8007fc6:	4564      	cmp	r4, ip
 8007fc8:	463e      	mov	r6, r7
 8007fca:	d1f7      	bne.n	8007fbc <__utoa+0x10>
 8007fcc:	7921      	ldrb	r1, [r4, #4]
 8007fce:	7139      	strb	r1, [r7, #4]
 8007fd0:	1e91      	subs	r1, r2, #2
 8007fd2:	6820      	ldr	r0, [r4, #0]
 8007fd4:	6038      	str	r0, [r7, #0]
 8007fd6:	2922      	cmp	r1, #34	; 0x22
 8007fd8:	f04f 0100 	mov.w	r1, #0
 8007fdc:	d904      	bls.n	8007fe8 <__utoa+0x3c>
 8007fde:	7019      	strb	r1, [r3, #0]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	b00b      	add	sp, #44	; 0x2c
 8007fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe8:	1e58      	subs	r0, r3, #1
 8007fea:	4684      	mov	ip, r0
 8007fec:	fbb5 f7f2 	udiv	r7, r5, r2
 8007ff0:	fb02 5617 	mls	r6, r2, r7, r5
 8007ff4:	3628      	adds	r6, #40	; 0x28
 8007ff6:	446e      	add	r6, sp
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007ffe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008002:	462e      	mov	r6, r5
 8008004:	42b2      	cmp	r2, r6
 8008006:	f101 0101 	add.w	r1, r1, #1
 800800a:	463d      	mov	r5, r7
 800800c:	d9ee      	bls.n	8007fec <__utoa+0x40>
 800800e:	2200      	movs	r2, #0
 8008010:	545a      	strb	r2, [r3, r1]
 8008012:	1919      	adds	r1, r3, r4
 8008014:	1aa5      	subs	r5, r4, r2
 8008016:	42aa      	cmp	r2, r5
 8008018:	dae3      	bge.n	8007fe2 <__utoa+0x36>
 800801a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800801e:	780e      	ldrb	r6, [r1, #0]
 8008020:	7006      	strb	r6, [r0, #0]
 8008022:	3201      	adds	r2, #1
 8008024:	f801 5901 	strb.w	r5, [r1], #-1
 8008028:	e7f4      	b.n	8008014 <__utoa+0x68>
 800802a:	bf00      	nop
 800802c:	0800a128 	.word	0x0800a128

08008030 <_init>:
 8008030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008032:	bf00      	nop
 8008034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008036:	bc08      	pop	{r3}
 8008038:	469e      	mov	lr, r3
 800803a:	4770      	bx	lr

0800803c <_fini>:
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	bf00      	nop
 8008040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008042:	bc08      	pop	{r3}
 8008044:	469e      	mov	lr, r3
 8008046:	4770      	bx	lr
