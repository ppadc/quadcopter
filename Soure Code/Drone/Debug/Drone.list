
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b84c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022e4  0800b9e0  0800b9e0  0001b9e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcc4  0800dcc4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800dcc4  0800dcc4  0001dcc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dccc  0800dccc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dccc  0800dccc  0001dccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcd0  0800dcd0  0001dcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800dcd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00000c90  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000e7c  20000e7c  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198e0  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b64  00000000  00000000  00039afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0003d660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001470  00000000  00000000  0003ec70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005b0e  00000000  00000000  000400e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d787  00000000  00000000  00045bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7370  00000000  00000000  00063375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a6e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ce4  00000000  00000000  0013a738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9c4 	.word	0x0800b9c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800b9c4 	.word	0x0800b9c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60ba      	str	r2, [r7, #8]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	81fb      	strh	r3, [r7, #14]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	81bb      	strh	r3, [r7, #12]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec6:	3307      	adds	r3, #7
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da00      	bge.n	8000ece <SSD1306_DrawBitmap+0x22>
 8000ecc:	3307      	adds	r3, #7
 8000ece:	10db      	asrs	r3, r3, #3
 8000ed0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	82bb      	strh	r3, [r7, #20]
 8000eda:	e044      	b.n	8000f66 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	827b      	strh	r3, [r7, #18]
 8000ee0:	e02f      	b.n	8000f42 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000ee2:	8a7b      	ldrh	r3, [r7, #18]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	75fb      	strb	r3, [r7, #23]
 8000ef2:	e012      	b.n	8000f1a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000ef4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ef8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000efc:	fb03 f202 	mul.w	r2, r3, r2
 8000f00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	da00      	bge.n	8000f0a <SSD1306_DrawBitmap+0x5e>
 8000f08:	3307      	adds	r3, #7
 8000f0a:	10db      	asrs	r3, r3, #3
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4413      	add	r3, r2
 8000f10:	461a      	mov	r2, r3
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	da09      	bge.n	8000f36 <SSD1306_DrawBitmap+0x8a>
 8000f22:	89fa      	ldrh	r2, [r7, #14]
 8000f24:	8a7b      	ldrh	r3, [r7, #18]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	89b9      	ldrh	r1, [r7, #12]
 8000f2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f92d 	bl	8001190 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000f36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	827b      	strh	r3, [r7, #18]
 8000f42:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	dbc9      	blt.n	8000ee2 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000f4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	3301      	adds	r3, #1
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	82bb      	strh	r3, [r7, #20]
 8000f5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	81bb      	strh	r3, [r7, #12]
 8000f66:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000f6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	dbb4      	blt.n	8000edc <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f82:	f000 fa29 	bl	80013d8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f86:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2178      	movs	r1, #120	; 0x78
 8000f8e:	485b      	ldr	r0, [pc, #364]	; (80010fc <SSD1306_Init+0x180>)
 8000f90:	f004 fe4a 	bl	8005c28 <HAL_I2C_IsDeviceReady>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e0a9      	b.n	80010f2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000f9e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000fa2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fa4:	e002      	b.n	8000fac <SSD1306_Init+0x30>
		p--;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f9      	bne.n	8000fa6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000fb2:	22ae      	movs	r2, #174	; 0xae
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2078      	movs	r0, #120	; 0x78
 8000fb8:	f000 fa8a 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000fbc:	2220      	movs	r2, #32
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2078      	movs	r0, #120	; 0x78
 8000fc2:	f000 fa85 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2078      	movs	r0, #120	; 0x78
 8000fcc:	f000 fa80 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fd0:	22b0      	movs	r2, #176	; 0xb0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2078      	movs	r0, #120	; 0x78
 8000fd6:	f000 fa7b 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000fda:	22c8      	movs	r2, #200	; 0xc8
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2078      	movs	r0, #120	; 0x78
 8000fe0:	f000 fa76 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2078      	movs	r0, #120	; 0x78
 8000fea:	f000 fa71 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000fee:	2210      	movs	r2, #16
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2078      	movs	r0, #120	; 0x78
 8000ff4:	f000 fa6c 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ff8:	2240      	movs	r2, #64	; 0x40
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2078      	movs	r0, #120	; 0x78
 8000ffe:	f000 fa67 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001002:	2281      	movs	r2, #129	; 0x81
 8001004:	2100      	movs	r1, #0
 8001006:	2078      	movs	r0, #120	; 0x78
 8001008:	f000 fa62 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800100c:	22ff      	movs	r2, #255	; 0xff
 800100e:	2100      	movs	r1, #0
 8001010:	2078      	movs	r0, #120	; 0x78
 8001012:	f000 fa5d 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001016:	22a1      	movs	r2, #161	; 0xa1
 8001018:	2100      	movs	r1, #0
 800101a:	2078      	movs	r0, #120	; 0x78
 800101c:	f000 fa58 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001020:	22a6      	movs	r2, #166	; 0xa6
 8001022:	2100      	movs	r1, #0
 8001024:	2078      	movs	r0, #120	; 0x78
 8001026:	f000 fa53 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800102a:	22a8      	movs	r2, #168	; 0xa8
 800102c:	2100      	movs	r1, #0
 800102e:	2078      	movs	r0, #120	; 0x78
 8001030:	f000 fa4e 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001034:	223f      	movs	r2, #63	; 0x3f
 8001036:	2100      	movs	r1, #0
 8001038:	2078      	movs	r0, #120	; 0x78
 800103a:	f000 fa49 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800103e:	22a4      	movs	r2, #164	; 0xa4
 8001040:	2100      	movs	r1, #0
 8001042:	2078      	movs	r0, #120	; 0x78
 8001044:	f000 fa44 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001048:	22d3      	movs	r2, #211	; 0xd3
 800104a:	2100      	movs	r1, #0
 800104c:	2078      	movs	r0, #120	; 0x78
 800104e:	f000 fa3f 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2078      	movs	r0, #120	; 0x78
 8001058:	f000 fa3a 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800105c:	22d5      	movs	r2, #213	; 0xd5
 800105e:	2100      	movs	r1, #0
 8001060:	2078      	movs	r0, #120	; 0x78
 8001062:	f000 fa35 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001066:	22f0      	movs	r2, #240	; 0xf0
 8001068:	2100      	movs	r1, #0
 800106a:	2078      	movs	r0, #120	; 0x78
 800106c:	f000 fa30 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001070:	22d9      	movs	r2, #217	; 0xd9
 8001072:	2100      	movs	r1, #0
 8001074:	2078      	movs	r0, #120	; 0x78
 8001076:	f000 fa2b 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800107a:	2222      	movs	r2, #34	; 0x22
 800107c:	2100      	movs	r1, #0
 800107e:	2078      	movs	r0, #120	; 0x78
 8001080:	f000 fa26 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001084:	22da      	movs	r2, #218	; 0xda
 8001086:	2100      	movs	r1, #0
 8001088:	2078      	movs	r0, #120	; 0x78
 800108a:	f000 fa21 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800108e:	2212      	movs	r2, #18
 8001090:	2100      	movs	r1, #0
 8001092:	2078      	movs	r0, #120	; 0x78
 8001094:	f000 fa1c 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001098:	22db      	movs	r2, #219	; 0xdb
 800109a:	2100      	movs	r1, #0
 800109c:	2078      	movs	r0, #120	; 0x78
 800109e:	f000 fa17 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80010a2:	2220      	movs	r2, #32
 80010a4:	2100      	movs	r1, #0
 80010a6:	2078      	movs	r0, #120	; 0x78
 80010a8:	f000 fa12 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80010ac:	228d      	movs	r2, #141	; 0x8d
 80010ae:	2100      	movs	r1, #0
 80010b0:	2078      	movs	r0, #120	; 0x78
 80010b2:	f000 fa0d 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80010b6:	2214      	movs	r2, #20
 80010b8:	2100      	movs	r1, #0
 80010ba:	2078      	movs	r0, #120	; 0x78
 80010bc:	f000 fa08 	bl	80014d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80010c0:	22af      	movs	r2, #175	; 0xaf
 80010c2:	2100      	movs	r1, #0
 80010c4:	2078      	movs	r0, #120	; 0x78
 80010c6:	f000 fa03 	bl	80014d0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80010ca:	222e      	movs	r2, #46	; 0x2e
 80010cc:	2100      	movs	r1, #0
 80010ce:	2078      	movs	r0, #120	; 0x78
 80010d0:	f000 f9fe 	bl	80014d0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 f843 	bl	8001160 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80010da:	f000 f813 	bl	8001104 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <SSD1306_Init+0x184>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <SSD1306_Init+0x184>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SSD1306_Init+0x184>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80010f0:	2301      	movs	r3, #1
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000068c 	.word	0x2000068c
 8001100:	20000608 	.word	0x20000608

08001104 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800110a:	2300      	movs	r3, #0
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	e01d      	b.n	800114c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	3b50      	subs	r3, #80	; 0x50
 8001114:	b2db      	uxtb	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	2100      	movs	r1, #0
 800111a:	2078      	movs	r0, #120	; 0x78
 800111c:	f000 f9d8 	bl	80014d0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2078      	movs	r0, #120	; 0x78
 8001126:	f000 f9d3 	bl	80014d0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800112a:	2210      	movs	r2, #16
 800112c:	2100      	movs	r1, #0
 800112e:	2078      	movs	r0, #120	; 0x78
 8001130:	f000 f9ce 	bl	80014d0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	01db      	lsls	r3, r3, #7
 8001138:	4a08      	ldr	r2, [pc, #32]	; (800115c <SSD1306_UpdateScreen+0x58>)
 800113a:	441a      	add	r2, r3
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	2140      	movs	r1, #64	; 0x40
 8001140:	2078      	movs	r0, #120	; 0x78
 8001142:	f000 f95f 	bl	8001404 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	3301      	adds	r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b07      	cmp	r3, #7
 8001150:	d9de      	bls.n	8001110 <SSD1306_UpdateScreen+0xc>
	}
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000208 	.word	0x20000208

08001160 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <SSD1306_Fill+0x14>
 8001170:	2300      	movs	r3, #0
 8001172:	e000      	b.n	8001176 <SSD1306_Fill+0x16>
 8001174:	23ff      	movs	r3, #255	; 0xff
 8001176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117a:	4619      	mov	r1, r3
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <SSD1306_Fill+0x2c>)
 800117e:	f007 fd43 	bl	8008c08 <memset>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000208 	.word	0x20000208

08001190 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
 800119a:	460b      	mov	r3, r1
 800119c:	80bb      	strh	r3, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	70fb      	strb	r3, [r7, #3]
	if (
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	2b7f      	cmp	r3, #127	; 0x7f
 80011a6:	d848      	bhi.n	800123a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	2b3f      	cmp	r3, #63	; 0x3f
 80011ac:	d845      	bhi.n	800123a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <SSD1306_DrawPixel+0xb8>)
 80011b0:	791b      	ldrb	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bf0c      	ite	eq
 80011bc:	2301      	moveq	r3, #1
 80011be:	2300      	movne	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d11a      	bne.n	8001200 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011ca:	88fa      	ldrh	r2, [r7, #6]
 80011cc:	88bb      	ldrh	r3, [r7, #4]
 80011ce:	08db      	lsrs	r3, r3, #3
 80011d0:	b298      	uxth	r0, r3
 80011d2:	4603      	mov	r3, r0
 80011d4:	01db      	lsls	r3, r3, #7
 80011d6:	4413      	add	r3, r2
 80011d8:	4a1c      	ldr	r2, [pc, #112]	; (800124c <SSD1306_DrawPixel+0xbc>)
 80011da:	5cd3      	ldrb	r3, [r2, r3]
 80011dc:	b25a      	sxtb	r2, r3
 80011de:	88bb      	ldrh	r3, [r7, #4]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	2101      	movs	r1, #1
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b259      	sxtb	r1, r3
 80011f0:	88fa      	ldrh	r2, [r7, #6]
 80011f2:	4603      	mov	r3, r0
 80011f4:	01db      	lsls	r3, r3, #7
 80011f6:	4413      	add	r3, r2
 80011f8:	b2c9      	uxtb	r1, r1
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <SSD1306_DrawPixel+0xbc>)
 80011fc:	54d1      	strb	r1, [r2, r3]
 80011fe:	e01d      	b.n	800123c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001200:	88fa      	ldrh	r2, [r7, #6]
 8001202:	88bb      	ldrh	r3, [r7, #4]
 8001204:	08db      	lsrs	r3, r3, #3
 8001206:	b298      	uxth	r0, r3
 8001208:	4603      	mov	r3, r0
 800120a:	01db      	lsls	r3, r3, #7
 800120c:	4413      	add	r3, r2
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <SSD1306_DrawPixel+0xbc>)
 8001210:	5cd3      	ldrb	r3, [r2, r3]
 8001212:	b25a      	sxtb	r2, r3
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	2101      	movs	r1, #1
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	b25b      	sxtb	r3, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	b25b      	sxtb	r3, r3
 8001226:	4013      	ands	r3, r2
 8001228:	b259      	sxtb	r1, r3
 800122a:	88fa      	ldrh	r2, [r7, #6]
 800122c:	4603      	mov	r3, r0
 800122e:	01db      	lsls	r3, r3, #7
 8001230:	4413      	add	r3, r2
 8001232:	b2c9      	uxtb	r1, r1
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <SSD1306_DrawPixel+0xbc>)
 8001236:	54d1      	strb	r1, [r2, r3]
 8001238:	e000      	b.n	800123c <SSD1306_DrawPixel+0xac>
		return;
 800123a:	bf00      	nop
	}
}
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000608 	.word	0x20000608
 800124c:	20000208 	.word	0x20000208

08001250 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	80fb      	strh	r3, [r7, #6]
 800125c:	4613      	mov	r3, r2
 800125e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001260:	4a05      	ldr	r2, [pc, #20]	; (8001278 <SSD1306_GotoXY+0x28>)
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <SSD1306_GotoXY+0x28>)
 8001268:	88bb      	ldrh	r3, [r7, #4]
 800126a:	8053      	strh	r3, [r2, #2]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	20000608 	.word	0x20000608

0800127c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	4613      	mov	r3, r2
 800128a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800128c:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <SSD1306_Putc+0xfc>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
	if (
 8001298:	2b7f      	cmp	r3, #127	; 0x7f
 800129a:	dc07      	bgt.n	80012ac <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800129c:	4b36      	ldr	r3, [pc, #216]	; (8001378 <SSD1306_Putc+0xfc>)
 800129e:	885b      	ldrh	r3, [r3, #2]
 80012a0:	461a      	mov	r2, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	785b      	ldrb	r3, [r3, #1]
 80012a6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012a8:	2b3f      	cmp	r3, #63	; 0x3f
 80012aa:	dd01      	ble.n	80012b0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e05e      	b.n	800136e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e04b      	b.n	800134e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	3b20      	subs	r3, #32
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	7849      	ldrb	r1, [r1, #1]
 80012c2:	fb01 f303 	mul.w	r3, r1, r3
 80012c6:	4619      	mov	r1, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	440b      	add	r3, r1
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	e030      	b.n	800133c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d010      	beq.n	800130c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <SSD1306_Putc+0xfc>)
 80012ec:	881a      	ldrh	r2, [r3, #0]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	b298      	uxth	r0, r3
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <SSD1306_Putc+0xfc>)
 80012f8:	885a      	ldrh	r2, [r3, #2]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4413      	add	r3, r2
 8001300:	b29b      	uxth	r3, r3
 8001302:	79ba      	ldrb	r2, [r7, #6]
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff ff43 	bl	8001190 <SSD1306_DrawPixel>
 800130a:	e014      	b.n	8001336 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <SSD1306_Putc+0xfc>)
 800130e:	881a      	ldrh	r2, [r3, #0]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	b29b      	uxth	r3, r3
 8001314:	4413      	add	r3, r2
 8001316:	b298      	uxth	r0, r3
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <SSD1306_Putc+0xfc>)
 800131a:	885a      	ldrh	r2, [r3, #2]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	b299      	uxth	r1, r3
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	f7ff ff2d 	bl	8001190 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	3301      	adds	r3, #1
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4293      	cmp	r3, r2
 8001346:	d3c8      	bcc.n	80012da <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	785b      	ldrb	r3, [r3, #1]
 8001352:	461a      	mov	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	4293      	cmp	r3, r2
 8001358:	d3ad      	bcc.n	80012b6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <SSD1306_Putc+0xfc>)
 800135c:	881a      	ldrh	r2, [r3, #0]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b29b      	uxth	r3, r3
 8001364:	4413      	add	r3, r2
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <SSD1306_Putc+0xfc>)
 800136a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800136c:	79fb      	ldrb	r3, [r7, #7]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000608 	.word	0x20000608

0800137c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	4613      	mov	r3, r2
 8001388:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800138a:	e012      	b.n	80013b2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff71 	bl	800127c <SSD1306_Putc>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d002      	beq.n	80013ac <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	e008      	b.n	80013be <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1e8      	bne.n	800138c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	781b      	ldrb	r3, [r3, #0]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fec8 	bl	8001160 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80013d0:	f7ff fe98 	bl	8001104 <SSD1306_UpdateScreen>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <ssd1306_I2C_Init+0x28>)
 80013e0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013e2:	e002      	b.n	80013ea <ssd1306_I2C_Init+0x12>
		p--;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f9      	bne.n	80013e4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	0003d090 	.word	0x0003d090

08001404 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b0c7      	sub	sp, #284	; 0x11c
 8001408:	af02      	add	r7, sp, #8
 800140a:	4604      	mov	r4, r0
 800140c:	4608      	mov	r0, r1
 800140e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001412:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001416:	600a      	str	r2, [r1, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800141e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001422:	4622      	mov	r2, r4
 8001424:	701a      	strb	r2, [r3, #0]
 8001426:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800142a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800142e:	4602      	mov	r2, r0
 8001430:	701a      	strb	r2, [r3, #0]
 8001432:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001436:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800143a:	460a      	mov	r2, r1
 800143c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800143e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001446:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800144a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800144e:	7812      	ldrb	r2, [r2, #0]
 8001450:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001452:	2300      	movs	r3, #0
 8001454:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001458:	e015      	b.n	8001486 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800145a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800145e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001462:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	441a      	add	r2, r3
 800146a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800146e:	3301      	adds	r3, #1
 8001470:	7811      	ldrb	r1, [r2, #0]
 8001472:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001476:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800147a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800147c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001480:	3301      	adds	r3, #1
 8001482:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001486:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800148a:	b29b      	uxth	r3, r3
 800148c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001490:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001494:	8812      	ldrh	r2, [r2, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d8df      	bhi.n	800145a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&SSD1306_I2C, address, dt, count+1, 10);
 800149a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800149e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b299      	uxth	r1, r3
 80014a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	f107 020c 	add.w	r2, r7, #12
 80014b8:	200a      	movs	r0, #10
 80014ba:	9000      	str	r0, [sp, #0]
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <ssd1306_I2C_WriteMulti+0xc8>)
 80014be:	f003 ff95 	bl	80053ec <HAL_I2C_Master_Transmit>
}
 80014c2:	bf00      	nop
 80014c4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	2000068c 	.word	0x2000068c

080014d0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	460b      	mov	r3, r1
 80014dc:	71bb      	strb	r3, [r7, #6]
 80014de:	4613      	mov	r3, r2
 80014e0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80014e2:	79bb      	ldrb	r3, [r7, #6]
 80014e4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80014e6:	797b      	ldrb	r3, [r7, #5]
 80014e8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&SSD1306_I2C, address, dt, 2, 10);
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	b299      	uxth	r1, r3
 80014ee:	f107 020c 	add.w	r2, r7, #12
 80014f2:	230a      	movs	r3, #10
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2302      	movs	r3, #2
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <ssd1306_I2C_Write+0x38>)
 80014fa:	f003 ff77 	bl	80053ec <HAL_I2C_Master_Transmit>
}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000068c 	.word	0x2000068c

0800150c <find_uart_dev_instant>:
		}
	}
	return -1;
}

static int find_uart_dev_instant(UART_HandleTypeDef *huart){
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	e00e      	b.n	8001538 <find_uart_dev_instant+0x2c>
		if(uart_drvs[i]->huart->Instance == huart->Instance){
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <find_uart_dev_instant+0x44>)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d101      	bne.n	8001532 <find_uart_dev_instant+0x26>
			return i;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	e007      	b.n	8001542 <find_uart_dev_instant+0x36>
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3301      	adds	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b02      	cmp	r3, #2
 800153c:	dded      	ble.n	800151a <find_uart_dev_instant+0xe>
		}
	}
	return -1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000610 	.word	0x20000610

08001554 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	int idx = find_uart_dev_instant(huart);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ffd5 	bl	800150c <find_uart_dev_instant>
 8001562:	60f8      	str	r0, [r7, #12]
	uart_drvs[idx]->tx_completed = true;
 8001564:	4a05      	ldr	r2, [pc, #20]	; (800157c <HAL_UART_TxCpltCallback+0x28>)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000610 	.word	0x20000610

08001580 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
	HAL_UART_RxCpltCallback(huart);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

	int idx = find_uart_dev_instant(huart);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ffbf 	bl	800150c <find_uart_dev_instant>
 800158e:	6138      	str	r0, [r7, #16]
	uart_drv_t *uart_drv = uart_drvs[idx];
 8001590:	4a20      	ldr	r2, [pc, #128]	; (8001614 <HAL_UART_RxCpltCallback+0x94>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001598:	60fb      	str	r3, [r7, #12]

	uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	817b      	strh	r3, [r7, #10]
	uint16_t length =  sizeof(uart_drv->rx_dma_buffer) - currCNDTR;
 80015a4:	897b      	ldrh	r3, [r7, #10]
 80015a6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80015aa:	813b      	strh	r3, [r7, #8]

	/* Copy and process new data */
	for(uint16_t i=0; i<length; i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	82fb      	strh	r3, [r7, #22]
 80015b0:	e00d      	b.n	80015ce <HAL_UART_RxCpltCallback+0x4e>
	{
		cbuf_put(&uart_drv->rx_cbuf_handle, uart_drv->rx_dma_buffer[i]);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f203 601c 	addw	r0, r3, #1564	; 0x61c
 80015b8:	8afb      	ldrh	r3, [r7, #22]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80015c2:	4619      	mov	r1, r3
 80015c4:	f000 f828 	bl	8001618 <cbuf_put>
	for(uint16_t i=0; i<length; i++)
 80015c8:	8afb      	ldrh	r3, [r7, #22]
 80015ca:	3301      	adds	r3, #1
 80015cc:	82fb      	strh	r3, [r7, #22]
 80015ce:	8afa      	ldrh	r2, [r7, #22]
 80015d0:	893b      	ldrh	r3, [r7, #8]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3ed      	bcc.n	80015b2 <HAL_UART_RxCpltCallback+0x32>
	}

	__HAL_DMA_DISABLE(huart->hdmarx);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
	huart->hdmarx->Instance->NDTR = sizeof(uart_drv->rx_dma_buffer);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f4:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(huart->hdmarx);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0201 	orr.w	r2, r2, #1
 8001608:	601a      	str	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000610 	.word	0x20000610

08001618 <cbuf_put>:
    cbuf->tail = 0;
    cbuf->full = false;
}

int cbuf_put(circular_buf_t* cbuf, char data)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
    if(!cbuf_full(cbuf))
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f82c 	bl	8001682 <cbuf_full>
 800162a:	4603      	mov	r3, r0
 800162c:	f083 0301 	eor.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d01f      	beq.n	8001676 <cbuf_put+0x5e>
    {
        cbuf->buffer[cbuf->head] = data;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	4413      	add	r3, r2
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	701a      	strb	r2, [r3, #0]
        cbuf->head = (cbuf->head + 1) % cbuf->size;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	3301      	adds	r3, #1
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6852      	ldr	r2, [r2, #4]
 800164e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001652:	fb01 f202 	mul.w	r2, r1, r2
 8001656:	1a9a      	subs	r2, r3, r2
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	609a      	str	r2, [r3, #8]
        cbuf->full = (cbuf->head == cbuf->tail);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	bf0c      	ite	eq
 8001668:	2301      	moveq	r3, #1
 800166a:	2300      	movne	r3, #0
 800166c:	b2da      	uxtb	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	741a      	strb	r2, [r3, #16]
        return 0;
 8001672:	2300      	movs	r3, #0
 8001674:	e001      	b.n	800167a <cbuf_put+0x62>
    }
    return -1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <cbuf_full>:
{
    return (!cbuf->full && (cbuf->head == cbuf->tail));
}

bool cbuf_full(circular_buf_t *cbuf)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
    return cbuf->full;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7c1b      	ldrb	r3, [r3, #16]
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <bno055_read>:
#define TEMPERATURE_UNITS				 		(0b00 << 4)
#elif BNO055_TEMPERATURE_UNITS == 1
#define TEMPERATURE_UNITS				 		(0b01 << 4)
#endif

static int bno055_read(uint8_t addr, uint8_t *value){
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af04      	add	r7, sp, #16
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK){
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	2364      	movs	r3, #100	; 0x64
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	2150      	movs	r1, #80	; 0x50
 80016bc:	4808      	ldr	r0, [pc, #32]	; (80016e0 <bno055_read+0x44>)
 80016be:	f004 f88d 	bl	80057dc <HAL_I2C_Mem_Read>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <bno055_read+0x38>
		*value = 0;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
		return -1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e000      	b.n	80016d6 <bno055_read+0x3a>
	}
	return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000068c 	.word	0x2000068c

080016e4 <bno055_write>:

static int bno055_write(uint8_t addr, uint8_t *value){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, 1, I2C_TIMEOUT_MS)!= HAL_OK)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	2364      	movs	r3, #100	; 0x64
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2301      	movs	r3, #1
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2301      	movs	r3, #1
 8001702:	2150      	movs	r1, #80	; 0x50
 8001704:	4806      	ldr	r0, [pc, #24]	; (8001720 <bno055_write+0x3c>)
 8001706:	f003 ff6f 	bl	80055e8 <HAL_I2C_Mem_Write>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <bno055_write+0x32>
		return -1;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	e000      	b.n	8001718 <bno055_write+0x34>
	return 0;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2000068c 	.word	0x2000068c

08001724 <bno055_read_bytes>:

static int bno055_read_bytes(uint8_t addr, uint8_t *value, uint8_t len){
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af04      	add	r7, sp, #16
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
 8001730:	4613      	mov	r3, r2
 8001732:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, addr , I2C_MEMADD_SIZE_8BIT, value, len, I2C_TIMEOUT_MS)!= HAL_OK){
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	b29a      	uxth	r2, r3
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	b29b      	uxth	r3, r3
 800173c:	2164      	movs	r1, #100	; 0x64
 800173e:	9102      	str	r1, [sp, #8]
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2301      	movs	r3, #1
 8001748:	2150      	movs	r1, #80	; 0x50
 800174a:	480a      	ldr	r0, [pc, #40]	; (8001774 <bno055_read_bytes+0x50>)
 800174c:	f004 f846 	bl	80057dc <HAL_I2C_Mem_Read>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d008      	beq.n	8001768 <bno055_read_bytes+0x44>
		memset(value,0,len);
 8001756:	79bb      	ldrb	r3, [r7, #6]
 8001758:	461a      	mov	r2, r3
 800175a:	2100      	movs	r1, #0
 800175c:	6838      	ldr	r0, [r7, #0]
 800175e:	f007 fa53 	bl	8008c08 <memset>
		return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	e000      	b.n	800176a <bno055_read_bytes+0x46>
	}
	return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000068c 	.word	0x2000068c

08001778 <bno055_set_operation_mode>:


void bno055_set_operation_mode(bno055_opr_mode_t opr_mode);
void bno055_fusion_data_output_systems(fusion_data_output_systems_t data_systems);

void bno055_set_operation_mode(bno055_opr_mode_t opr_mode){
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(opr_mode){
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	f200 8092 	bhi.w	80018ae <bno055_set_operation_mode+0x136>
 800178a:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <bno055_set_operation_mode+0x18>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	080017c5 	.word	0x080017c5
 8001794:	080017d7 	.word	0x080017d7
 8001798:	080017e9 	.word	0x080017e9
 800179c:	080017fb 	.word	0x080017fb
 80017a0:	0800180d 	.word	0x0800180d
 80017a4:	0800181f 	.word	0x0800181f
 80017a8:	08001831 	.word	0x08001831
 80017ac:	08001843 	.word	0x08001843
 80017b0:	08001855 	.word	0x08001855
 80017b4:	08001867 	.word	0x08001867
 80017b8:	08001879 	.word	0x08001879
 80017bc:	0800188b 	.word	0x0800188b
 80017c0:	0800189d 	.word	0x0800189d
	case BNO055_OPERATION_CONFIG_MODE:
		tmp = BNO055_OPERATION_CONFIG_MODE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80017c8:	f107 030f 	add.w	r3, r7, #15
 80017cc:	4619      	mov	r1, r3
 80017ce:	203d      	movs	r0, #61	; 0x3d
 80017d0:	f7ff ff88 	bl	80016e4 <bno055_write>
	break;
 80017d4:	e06b      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCONLY:
		tmp = BNO055_OPERATION_MODE_ACCONLY;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80017da:	f107 030f 	add.w	r3, r7, #15
 80017de:	4619      	mov	r1, r3
 80017e0:	203d      	movs	r0, #61	; 0x3d
 80017e2:	f7ff ff7f 	bl	80016e4 <bno055_write>
	break;
 80017e6:	e062      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_MAGONLY:
		tmp = BNO055_OPERATION_MODE_MAGONLY;
 80017e8:	2302      	movs	r3, #2
 80017ea:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80017ec:	f107 030f 	add.w	r3, r7, #15
 80017f0:	4619      	mov	r1, r3
 80017f2:	203d      	movs	r0, #61	; 0x3d
 80017f4:	f7ff ff76 	bl	80016e4 <bno055_write>
	break;
 80017f8:	e059      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_GYROONLY:
		tmp = BNO055_OPERATION_MODE_GYROONLY;
 80017fa:	2303      	movs	r3, #3
 80017fc:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80017fe:	f107 030f 	add.w	r3, r7, #15
 8001802:	4619      	mov	r1, r3
 8001804:	203d      	movs	r0, #61	; 0x3d
 8001806:	f7ff ff6d 	bl	80016e4 <bno055_write>
	break;
 800180a:	e050      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCMAG:
		tmp = BNO055_OPERATION_MODE_ACCMAG;
 800180c:	2304      	movs	r3, #4
 800180e:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8001810:	f107 030f 	add.w	r3, r7, #15
 8001814:	4619      	mov	r1, r3
 8001816:	203d      	movs	r0, #61	; 0x3d
 8001818:	f7ff ff64 	bl	80016e4 <bno055_write>
	break;
 800181c:	e047      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_ACCGYRO:
		tmp = BNO055_OPERATION_MODE_ACCGYRO;
 800181e:	2305      	movs	r3, #5
 8001820:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8001822:	f107 030f 	add.w	r3, r7, #15
 8001826:	4619      	mov	r1, r3
 8001828:	203d      	movs	r0, #61	; 0x3d
 800182a:	f7ff ff5b 	bl	80016e4 <bno055_write>
	break;
 800182e:	e03e      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_MAGGYRO:
		tmp = BNO055_OPERATION_MODE_MAGGYRO;
 8001830:	2306      	movs	r3, #6
 8001832:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8001834:	f107 030f 	add.w	r3, r7, #15
 8001838:	4619      	mov	r1, r3
 800183a:	203d      	movs	r0, #61	; 0x3d
 800183c:	f7ff ff52 	bl	80016e4 <bno055_write>
	break;
 8001840:	e035      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_AMG:
		tmp = BNO055_OPERATION_MODE_AMG;
 8001842:	2307      	movs	r3, #7
 8001844:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8001846:	f107 030f 	add.w	r3, r7, #15
 800184a:	4619      	mov	r1, r3
 800184c:	203d      	movs	r0, #61	; 0x3d
 800184e:	f7ff ff49 	bl	80016e4 <bno055_write>
	break;
 8001852:	e02c      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_IMU:
		tmp = BNO055_OPERATION_MODE_IMU;
 8001854:	2308      	movs	r3, #8
 8001856:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 8001858:	f107 030f 	add.w	r3, r7, #15
 800185c:	4619      	mov	r1, r3
 800185e:	203d      	movs	r0, #61	; 0x3d
 8001860:	f7ff ff40 	bl	80016e4 <bno055_write>
	break;
 8001864:	e023      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_COMPASS:
		tmp = BNO055_OPERATION_MODE_COMPASS;
 8001866:	2309      	movs	r3, #9
 8001868:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 800186a:	f107 030f 	add.w	r3, r7, #15
 800186e:	4619      	mov	r1, r3
 8001870:	203d      	movs	r0, #61	; 0x3d
 8001872:	f7ff ff37 	bl	80016e4 <bno055_write>
	break;
 8001876:	e01a      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_M4G:
		tmp = BNO055_OPERATION_MODE_M4G;
 8001878:	230a      	movs	r3, #10
 800187a:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 800187c:	f107 030f 	add.w	r3, r7, #15
 8001880:	4619      	mov	r1, r3
 8001882:	203d      	movs	r0, #61	; 0x3d
 8001884:	f7ff ff2e 	bl	80016e4 <bno055_write>
	break;
 8001888:	e011      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_NDOF_FMC_OFF:
		tmp = BNO055_OPERATION_MODE_NDOF_FMC_OFF;
 800188a:	230b      	movs	r3, #11
 800188c:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 800188e:	f107 030f 	add.w	r3, r7, #15
 8001892:	4619      	mov	r1, r3
 8001894:	203d      	movs	r0, #61	; 0x3d
 8001896:	f7ff ff25 	bl	80016e4 <bno055_write>
	break;
 800189a:	e008      	b.n	80018ae <bno055_set_operation_mode+0x136>
	case BNO055_OPERATION_MODE_NDOF:
		tmp = BNO055_OPERATION_MODE_NDOF;
 800189c:	230c      	movs	r3, #12
 800189e:	73fb      	strb	r3, [r7, #15]
		bno055_write(OPR_MODE,&tmp);
 80018a0:	f107 030f 	add.w	r3, r7, #15
 80018a4:	4619      	mov	r1, r3
 80018a6:	203d      	movs	r0, #61	; 0x3d
 80018a8:	f7ff ff1c 	bl	80016e4 <bno055_write>
	break;
 80018ac:	bf00      	nop
	}
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop

080018b8 <bno055_set_power_mode>:

void bno055_set_power_mode(power_mode_t pwr_mode){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(pwr_mode){
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d018      	beq.n	80018fa <bno055_set_power_mode+0x42>
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	dc1f      	bgt.n	800190c <bno055_set_power_mode+0x54>
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <bno055_set_power_mode+0x1e>
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d009      	beq.n	80018e8 <bno055_set_power_mode+0x30>
	case SUSPEND_MODE:
		tmp = SUSPEND_MODE;
		bno055_write(PWR_MODE,&tmp);
	break;
	}
}
 80018d4:	e01a      	b.n	800190c <bno055_set_power_mode+0x54>
		tmp = NORMAL_MODE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
		bno055_write(PWR_MODE,&tmp);
 80018da:	f107 030f 	add.w	r3, r7, #15
 80018de:	4619      	mov	r1, r3
 80018e0:	203e      	movs	r0, #62	; 0x3e
 80018e2:	f7ff feff 	bl	80016e4 <bno055_write>
	break;
 80018e6:	e011      	b.n	800190c <bno055_set_power_mode+0x54>
		tmp = LOW_POWER_MODE;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
		bno055_write(PWR_MODE,&tmp);
 80018ec:	f107 030f 	add.w	r3, r7, #15
 80018f0:	4619      	mov	r1, r3
 80018f2:	203e      	movs	r0, #62	; 0x3e
 80018f4:	f7ff fef6 	bl	80016e4 <bno055_write>
	break;
 80018f8:	e008      	b.n	800190c <bno055_set_power_mode+0x54>
		tmp = SUSPEND_MODE;
 80018fa:	2302      	movs	r3, #2
 80018fc:	73fb      	strb	r3, [r7, #15]
		bno055_write(PWR_MODE,&tmp);
 80018fe:	f107 030f 	add.w	r3, r7, #15
 8001902:	4619      	mov	r1, r3
 8001904:	203e      	movs	r0, #62	; 0x3e
 8001906:	f7ff feed 	bl	80016e4 <bno055_write>
	break;
 800190a:	bf00      	nop
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <bno055_fusion_data_output_systems>:

void bno055_fusion_data_output_systems(fusion_data_output_systems_t data_systems){
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(data_systems){
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <bno055_fusion_data_output_systems+0x16>
 8001924:	2b80      	cmp	r3, #128	; 0x80
 8001926:	d009      	beq.n	800193c <bno055_fusion_data_output_systems+0x28>
	case ANDROID_FUSION_DATA_OUTPUT:
	tmp = ANDROID_FUSION_DATA_OUTPUT;
	bno055_write(UNIT_SEL,&tmp);
	break;
	}
}
 8001928:	e011      	b.n	800194e <bno055_fusion_data_output_systems+0x3a>
	tmp = WINDOWS_FUSION_DATA_OUTPUT,
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]
	bno055_write(UNIT_SEL,&tmp);
 800192e:	f107 030f 	add.w	r3, r7, #15
 8001932:	4619      	mov	r1, r3
 8001934:	203b      	movs	r0, #59	; 0x3b
 8001936:	f7ff fed5 	bl	80016e4 <bno055_write>
	break;
 800193a:	e008      	b.n	800194e <bno055_fusion_data_output_systems+0x3a>
	tmp = ANDROID_FUSION_DATA_OUTPUT;
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	73fb      	strb	r3, [r7, #15]
	bno055_write(UNIT_SEL,&tmp);
 8001940:	f107 030f 	add.w	r3, r7, #15
 8001944:	4619      	mov	r1, r3
 8001946:	203b      	movs	r0, #59	; 0x3b
 8001948:	f7ff fecc 	bl	80016e4 <bno055_write>
	break;
 800194c:	bf00      	nop
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <bno055_axis_remap_config>:

void bno055_axis_remap_config(bno055_axis_remap_config_t axis_remap){
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(axis_remap){
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b21      	cmp	r3, #33	; 0x21
 8001964:	d002      	beq.n	800196c <bno055_axis_remap_config+0x16>
 8001966:	2b24      	cmp	r3, #36	; 0x24
 8001968:	d009      	beq.n	800197e <bno055_axis_remap_config+0x28>
	case REMAP_CONFIG_P1_2_4_7:
	tmp = REMAP_CONFIG_P1_2_4_7,
	bno055_write(AXIS_MAP_CONFIG,&tmp);
	break;
	}
}
 800196a:	e011      	b.n	8001990 <bno055_axis_remap_config+0x3a>
	tmp = REMAP_CONFIG_P0_3_5_6,
 800196c:	2321      	movs	r3, #33	; 0x21
 800196e:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_CONFIG,&tmp);
 8001970:	f107 030f 	add.w	r3, r7, #15
 8001974:	4619      	mov	r1, r3
 8001976:	2041      	movs	r0, #65	; 0x41
 8001978:	f7ff feb4 	bl	80016e4 <bno055_write>
	break;
 800197c:	e008      	b.n	8001990 <bno055_axis_remap_config+0x3a>
	tmp = REMAP_CONFIG_P1_2_4_7,
 800197e:	2324      	movs	r3, #36	; 0x24
 8001980:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_CONFIG,&tmp);
 8001982:	f107 030f 	add.w	r3, r7, #15
 8001986:	4619      	mov	r1, r3
 8001988:	2041      	movs	r0, #65	; 0x41
 800198a:	f7ff feab 	bl	80016e4 <bno055_write>
	break;
 800198e:	bf00      	nop
}
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <bno055_axis_remap_sign>:

void bno055_axis_remap_sign(bno055_axis_remap_sign_t axis_remap_sign){
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	switch(axis_remap_sign){
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b07      	cmp	r3, #7
 80019a6:	d85b      	bhi.n	8001a60 <bno055_axis_remap_sign+0xc8>
 80019a8:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <bno055_axis_remap_sign+0x18>)
 80019aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ae:	bf00      	nop
 80019b0:	080019e3 	.word	0x080019e3
 80019b4:	08001a2b 	.word	0x08001a2b
 80019b8:	08001a07 	.word	0x08001a07
 80019bc:	08001a19 	.word	0x08001a19
 80019c0:	080019d1 	.word	0x080019d1
 80019c4:	08001a4f 	.word	0x08001a4f
 80019c8:	080019f5 	.word	0x080019f5
 80019cc:	08001a3d 	.word	0x08001a3d
	case REMAP_SIGN_P0:
	tmp = REMAP_SIGN_P0,
 80019d0:	2304      	movs	r3, #4
 80019d2:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 80019d4:	f107 030f 	add.w	r3, r7, #15
 80019d8:	4619      	mov	r1, r3
 80019da:	2042      	movs	r0, #66	; 0x42
 80019dc:	f7ff fe82 	bl	80016e4 <bno055_write>
	break;
 80019e0:	e03e      	b.n	8001a60 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P1:
	tmp = REMAP_SIGN_P1,
 80019e2:	2300      	movs	r3, #0
 80019e4:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 80019e6:	f107 030f 	add.w	r3, r7, #15
 80019ea:	4619      	mov	r1, r3
 80019ec:	2042      	movs	r0, #66	; 0x42
 80019ee:	f7ff fe79 	bl	80016e4 <bno055_write>
	break;
 80019f2:	e035      	b.n	8001a60 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P2:
	tmp = REMAP_SIGN_P2,
 80019f4:	2306      	movs	r3, #6
 80019f6:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 80019f8:	f107 030f 	add.w	r3, r7, #15
 80019fc:	4619      	mov	r1, r3
 80019fe:	2042      	movs	r0, #66	; 0x42
 8001a00:	f7ff fe70 	bl	80016e4 <bno055_write>
	break;
 8001a04:	e02c      	b.n	8001a60 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P3:
	tmp = REMAP_SIGN_P3,
 8001a06:	2302      	movs	r3, #2
 8001a08:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8001a0a:	f107 030f 	add.w	r3, r7, #15
 8001a0e:	4619      	mov	r1, r3
 8001a10:	2042      	movs	r0, #66	; 0x42
 8001a12:	f7ff fe67 	bl	80016e4 <bno055_write>
	break;
 8001a16:	e023      	b.n	8001a60 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P4:
	tmp = REMAP_SIGN_P4,
 8001a18:	2303      	movs	r3, #3
 8001a1a:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8001a1c:	f107 030f 	add.w	r3, r7, #15
 8001a20:	4619      	mov	r1, r3
 8001a22:	2042      	movs	r0, #66	; 0x42
 8001a24:	f7ff fe5e 	bl	80016e4 <bno055_write>
	break;
 8001a28:	e01a      	b.n	8001a60 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P5:
	tmp = REMAP_SIGN_P5,
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8001a2e:	f107 030f 	add.w	r3, r7, #15
 8001a32:	4619      	mov	r1, r3
 8001a34:	2042      	movs	r0, #66	; 0x42
 8001a36:	f7ff fe55 	bl	80016e4 <bno055_write>
	break;
 8001a3a:	e011      	b.n	8001a60 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P6:
	tmp = REMAP_SIGN_P6,
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8001a40:	f107 030f 	add.w	r3, r7, #15
 8001a44:	4619      	mov	r1, r3
 8001a46:	2042      	movs	r0, #66	; 0x42
 8001a48:	f7ff fe4c 	bl	80016e4 <bno055_write>
	break;
 8001a4c:	e008      	b.n	8001a60 <bno055_axis_remap_sign+0xc8>
	case REMAP_SIGN_P7:
	tmp = REMAP_SIGN_P7,
 8001a4e:	2305      	movs	r3, #5
 8001a50:	73fb      	strb	r3, [r7, #15]
	bno055_write(AXIS_MAP_SIGN,&tmp);
 8001a52:	f107 030f 	add.w	r3, r7, #15
 8001a56:	4619      	mov	r1, r3
 8001a58:	2042      	movs	r0, #66	; 0x42
 8001a5a:	f7ff fe43 	bl	80016e4 <bno055_write>
	break;
 8001a5e:	bf00      	nop
	}
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <bno055_calibrations_status>:

int bno055_calibrations_status(char *sys, char *gyr, char *acc, char *mag){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
	uint8_t tmp;
	uint8_t buffer_calib_sta[1] ={};
 8001a76:	2300      	movs	r3, #0
 8001a78:	753b      	strb	r3, [r7, #20]
	tmp = 0x00;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]
	bno055_write(PAGE_ID,&tmp);
 8001a7e:	f107 0317 	add.w	r3, r7, #23
 8001a82:	4619      	mov	r1, r3
 8001a84:	2007      	movs	r0, #7
 8001a86:	f7ff fe2d 	bl	80016e4 <bno055_write>
	if(bno055_read(CALIB_STAT,buffer_calib_sta)<0){
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	2035      	movs	r0, #53	; 0x35
 8001a92:	f7ff fe03 	bl	800169c <bno055_read>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da02      	bge.n	8001aa2 <bno055_calibrations_status+0x3a>
		return -1;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa0:	e012      	b.n	8001ac8 <bno055_calibrations_status+0x60>
		*sys = (int8_t)((int8_t)buffer_calib_sta[0])>>6 & 0b11;
		*gyr = (int8_t)((int8_t)buffer_calib_sta[0])>>4 & 0b11;
		*acc = (int8_t)((int8_t)buffer_calib_sta[0])>>2 & 0b11;
		*mag = (int8_t)((int8_t)buffer_calib_sta[0]) & 0b11;
	}
	if((*sys == 3 && *gyr == 3 && *acc == 3 && *mag == 3)) return 1;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d10d      	bne.n	8001ac6 <bno055_calibrations_status+0x5e>
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d109      	bne.n	8001ac6 <bno055_calibrations_status+0x5e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d105      	bne.n	8001ac6 <bno055_calibrations_status+0x5e>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d101      	bne.n	8001ac6 <bno055_calibrations_status+0x5e>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <bno055_calibrations_status+0x60>
	return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <bno055_initization>:
	st_mcu = (int8_t)((int8_t)buffer_test[0]) & 0b1000;
	if((seft_test = (((st_mcu|st_gyr)|st_mag)|st_acc))!=15) return -1;
	return 0;
}

int bno055_initization(){
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b0a7      	sub	sp, #156	; 0x9c
 8001ad4:	af04      	add	r7, sp, #16
	uint8_t tmp,member;
	char calib_sys;
	char calib_gyr, calib_acc, calib_mag;
    char i_check=0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    char buzzer = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    char data[120];
    //uint8_t Rxbuffer[20];
    uint8_t check_sys[1] = {};
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	713b      	strb	r3, [r7, #4]
//  			  HAL_GPIO_WritePin(GPIOC,BUZZER_Pin, SET);
//  			  HAL_Delay(100);
//  		  }
//  	  }
//    }
    bno055_set_power_mode(NORMAL_MODE);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff fee6 	bl	80018b8 <bno055_set_power_mode>
    /*Calibration IMU*/
    bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
 8001aec:	200b      	movs	r0, #11
 8001aee:	f7ff fe43 	bl	8001778 <bno055_set_operation_mode>
    delay_ms(10); //Switching time 7ms from config mode to any operation mode
 8001af2:	200a      	movs	r0, #10
 8001af4:	f000 fb1c 	bl	8002130 <delay_ms>
    //bno055_calibrations_status(&calib_sys, &calib_gyr, &calib_acc, &calib_mag);
    while(i_check<2){
 8001af8:	e097      	b.n	8001c2a <bno055_initization+0x15a>
       // Still calibrating, out until everything done
       //bno055_calibrations_status(&calib_sys, &calib_gyr, &calib_acc, &calib_mag);
       	if(HAL_I2C_Mem_Read(&BNO055__I2C, BNO055_I2C_ADDR, CALIB_STAT , I2C_MEMADD_SIZE_8BIT, &check_sys[1], 1, I2C_TIMEOUT_MS)==HAL_OK){
 8001afa:	2364      	movs	r3, #100	; 0x64
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	2301      	movs	r3, #1
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	3301      	adds	r3, #1
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	2235      	movs	r2, #53	; 0x35
 8001b0c:	2150      	movs	r1, #80	; 0x50
 8001b0e:	4897      	ldr	r0, [pc, #604]	; (8001d6c <bno055_initization+0x29c>)
 8001b10:	f003 fe64 	bl	80057dc <HAL_I2C_Mem_Read>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d133      	bne.n	8001b82 <bno055_initization+0xb2>
       	    	while(buzzer==0){
 8001b1a:	e013      	b.n	8001b44 <bno055_initization+0x74>
       	             HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b22:	4893      	ldr	r0, [pc, #588]	; (8001d70 <bno055_initization+0x2a0>)
 8001b24:	f003 faea 	bl	80050fc <HAL_GPIO_WritePin>
       	             delay_ms(200);
 8001b28:	20c8      	movs	r0, #200	; 0xc8
 8001b2a:	f000 fb01 	bl	8002130 <delay_ms>
       	             HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b34:	488e      	ldr	r0, [pc, #568]	; (8001d70 <bno055_initization+0x2a0>)
 8001b36:	f003 fae1 	bl	80050fc <HAL_GPIO_WritePin>
       	             buzzer++;
 8001b3a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
       	    	while(buzzer==0){
 8001b44:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0e7      	beq.n	8001b1c <bno055_initization+0x4c>
       	        }
       	    calib_sys = (int8_t)((int8_t)check_sys[0])>>6 & 0b11;
 8001b4c:	793b      	ldrb	r3, [r7, #4]
 8001b4e:	099b      	lsrs	r3, r3, #6
 8001b50:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
       	    calib_gyr = (int8_t)((int8_t)check_sys[0])>>4 & 0b11;
 8001b54:	793b      	ldrb	r3, [r7, #4]
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	111b      	asrs	r3, r3, #4
 8001b5a:	b25b      	sxtb	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
       	    calib_acc = (int8_t)((int8_t)check_sys[0])>>2 & 0b11;
 8001b66:	793b      	ldrb	r3, [r7, #4]
 8001b68:	b25b      	sxtb	r3, r3
 8001b6a:	109b      	asrs	r3, r3, #2
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
       	    calib_mag = (int8_t)((int8_t)check_sys[0]) & 0b11;
 8001b78:	793b      	ldrb	r3, [r7, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
       		}
       	if(calib_sys==3 && calib_gyr == 3 && calib_acc == 3 && calib_mag == 3){
 8001b82:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d12b      	bne.n	8001be2 <bno055_initization+0x112>
 8001b8a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d127      	bne.n	8001be2 <bno055_initization+0x112>
 8001b92:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d123      	bne.n	8001be2 <bno055_initization+0x112>
 8001b9a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d11f      	bne.n	8001be2 <bno055_initization+0x112>
       		HAL_UART_Transmit(&huart6,(uint8_t *)data,sprintf(data,"%d,%d,%d,%d\n",calib_sys,calib_gyr,calib_acc,calib_mag),10);
 8001ba2:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 8001ba6:	f897 4086 	ldrb.w	r4, [r7, #134]	; 0x86
 8001baa:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001bae:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8001bb2:	f107 0008 	add.w	r0, r7, #8
 8001bb6:	9201      	str	r2, [sp, #4]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	4623      	mov	r3, r4
 8001bbc:	460a      	mov	r2, r1
 8001bbe:	496d      	ldr	r1, [pc, #436]	; (8001d74 <bno055_initization+0x2a4>)
 8001bc0:	f007 fc94 	bl	80094ec <siprintf>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	f107 0108 	add.w	r1, r7, #8
 8001bcc:	230a      	movs	r3, #10
 8001bce:	486a      	ldr	r0, [pc, #424]	; (8001d78 <bno055_initization+0x2a8>)
 8001bd0:	f006 f82f 	bl	8007c32 <HAL_UART_Transmit>
   			i_check = 2;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
   			delay_ms(10);
 8001bda:	200a      	movs	r0, #10
 8001bdc:	f000 faa8 	bl	8002130 <delay_ms>
 8001be0:	e023      	b.n	8001c2a <bno055_initization+0x15a>
       	 }
            else{
   			HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8001be2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001be6:	4862      	ldr	r0, [pc, #392]	; (8001d70 <bno055_initization+0x2a0>)
 8001be8:	f003 faa1 	bl	800512e <HAL_GPIO_TogglePin>
   			HAL_UART_Transmit(&huart6,(uint8_t *)data,sprintf(data,"%d,%d,%d,%d\n",calib_sys,calib_gyr,calib_acc,calib_mag),10);
 8001bec:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 8001bf0:	f897 4086 	ldrb.w	r4, [r7, #134]	; 0x86
 8001bf4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001bf8:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8001bfc:	f107 0008 	add.w	r0, r7, #8
 8001c00:	9201      	str	r2, [sp, #4]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4623      	mov	r3, r4
 8001c06:	460a      	mov	r2, r1
 8001c08:	495a      	ldr	r1, [pc, #360]	; (8001d74 <bno055_initization+0x2a4>)
 8001c0a:	f007 fc6f 	bl	80094ec <siprintf>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	f107 0108 	add.w	r1, r7, #8
 8001c16:	230a      	movs	r3, #10
 8001c18:	4857      	ldr	r0, [pc, #348]	; (8001d78 <bno055_initization+0x2a8>)
 8001c1a:	f006 f80a 	bl	8007c32 <HAL_UART_Transmit>
   			delay_ms(100);
 8001c1e:	2064      	movs	r0, #100	; 0x64
 8001c20:	f000 fa86 	bl	8002130 <delay_ms>
   			i_check = 2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    while(i_check<2){
 8001c2a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	f67f af63 	bls.w	8001afa <bno055_initization+0x2a>
            }
       }
	  /*Reset System */
	  tmp = 0x20;
 8001c34:	2320      	movs	r3, #32
 8001c36:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	  bno055_write(SYS_TRIGGER,&tmp);
 8001c3a:	f107 0381 	add.w	r3, r7, #129	; 0x81
 8001c3e:	4619      	mov	r1, r3
 8001c40:	203f      	movs	r0, #63	; 0x3f
 8001c42:	f7ff fd4f 	bl	80016e4 <bno055_write>
      delay_ms(600);
 8001c46:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001c4a:	f000 fa71 	bl	8002130 <delay_ms>
      member = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
      HAL_I2C_Mem_Read(&BNO055__I2C,BNO055_I2C_ADDR,CHIP_ID_PAGE_0, I2C_MEMADD_SIZE_8BIT, &member, 1, I2C_TIMEOUT_MS);
 8001c54:	2364      	movs	r3, #100	; 0x64
 8001c56:	9302      	str	r3, [sp, #8]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2301      	movs	r3, #1
 8001c64:	2200      	movs	r2, #0
 8001c66:	2150      	movs	r1, #80	; 0x50
 8001c68:	4840      	ldr	r0, [pc, #256]	; (8001d6c <bno055_initization+0x29c>)
 8001c6a:	f003 fdb7 	bl	80057dc <HAL_I2C_Mem_Read>
      if(member==BNO055_ID){
 8001c6e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8001c72:	2ba0      	cmp	r3, #160	; 0xa0
 8001c74:	d106      	bne.n	8001c84 <bno055_initization+0x1b4>
    	  HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c7c:	483c      	ldr	r0, [pc, #240]	; (8001d70 <bno055_initization+0x2a0>)
 8001c7e:	f003 fa3d 	bl	80050fc <HAL_GPIO_WritePin>
 8001c82:	e005      	b.n	8001c90 <bno055_initization+0x1c0>
      }
      else{
    	  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin, SET);
 8001c84:	2201      	movs	r2, #1
 8001c86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c8a:	4839      	ldr	r0, [pc, #228]	; (8001d70 <bno055_initization+0x2a0>)
 8001c8c:	f003 fa36 	bl	80050fc <HAL_GPIO_WritePin>
      }
    /* Set operation_mode BNO055_OPERATION_CONFIG_MODE */
    bno055_set_operation_mode(BNO055_OPERATION_CONFIG_MODE);
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7ff fd71 	bl	8001778 <bno055_set_operation_mode>
    delay_ms(50); //switching time 19ms from any operation mode to config mode
 8001c96:	2032      	movs	r0, #50	; 0x32
 8001c98:	f000 fa4a 	bl	8002130 <delay_ms>
	/* Configurations Power Mode */
	tmp = POWER_MODE_NORMAL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	bno055_write(PWR_MODE,&tmp);
 8001ca2:	f107 0381 	add.w	r3, r7, #129	; 0x81
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	203e      	movs	r0, #62	; 0x3e
 8001caa:	f7ff fd1b 	bl	80016e4 <bno055_write>
    //Move to Page 1//
	tmp = 0x01;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	bno055_write(PAGE_ID,&tmp);
 8001cb4:	f107 0381 	add.w	r3, r7, #129	; 0x81
 8001cb8:	4619      	mov	r1, r3
 8001cba:	2007      	movs	r0, #7
 8001cbc:	f7ff fd12 	bl	80016e4 <bno055_write>
    /* Configurations Accelerometer */
	tmp = (ACCEL_OPERATION_MODE_NORMAL | ACCEL_BANDWIDTH)| ACCEL_G_RANGE;
 8001cc0:	230d      	movs	r3, #13
 8001cc2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	bno055_write(ACC_CONFIG,&tmp);
 8001cc6:	f107 0381 	add.w	r3, r7, #129	; 0x81
 8001cca:	4619      	mov	r1, r3
 8001ccc:	2008      	movs	r0, #8
 8001cce:	f7ff fd09 	bl	80016e4 <bno055_write>
    /* Configurations Gyroscope */
	tmp = GYR_BANDWIDTH | GYRO_RANGE;
 8001cd2:	2338      	movs	r3, #56	; 0x38
 8001cd4:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	bno055_write(GYR_CONFIG_0,&tmp);
 8001cd8:	f107 0381 	add.w	r3, r7, #129	; 0x81
 8001cdc:	4619      	mov	r1, r3
 8001cde:	200a      	movs	r0, #10
 8001ce0:	f7ff fd00 	bl	80016e4 <bno055_write>
	tmp = GYR_OPERATION_MODE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	bno055_write(GYR_CONFIG_1,&tmp);
 8001cea:	f107 0381 	add.w	r3, r7, #129	; 0x81
 8001cee:	4619      	mov	r1, r3
 8001cf0:	200b      	movs	r0, #11
 8001cf2:	f7ff fcf7 	bl	80016e4 <bno055_write>
    /* Configurations Magnetometer */
	tmp = (MAG_PWR_MODE | MAG_OPERATION_MODE)| BNO055_MAG_DATA_OUTPUT_RATE;
 8001cf6:	237b      	movs	r3, #123	; 0x7b
 8001cf8:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	bno055_write(MAG_CONFIG,&tmp);
 8001cfc:	f107 0381 	add.w	r3, r7, #129	; 0x81
 8001d00:	4619      	mov	r1, r3
 8001d02:	2009      	movs	r0, #9
 8001d04:	f7ff fcee 	bl	80016e4 <bno055_write>
  	/*Configuration Sensor Unit*/
  	//Move to Page 0//
    tmp = 0x00;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    bno055_write(PAGE_ID,&tmp);
 8001d0e:	f107 0381 	add.w	r3, r7, #129	; 0x81
 8001d12:	4619      	mov	r1, r3
 8001d14:	2007      	movs	r0, #7
 8001d16:	f7ff fce5 	bl	80016e4 <bno055_write>
    tmp = (((TEMPERATURE_UNITS | EULER_ANGLES_UNITS)| ANGULAR_RATE_UNITS)| BNO055_ACCEL_UNITS);
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    bno055_write(UNIT_SEL,&tmp);
 8001d20:	f107 0381 	add.w	r3, r7, #129	; 0x81
 8001d24:	4619      	mov	r1, r3
 8001d26:	203b      	movs	r0, #59	; 0x3b
 8001d28:	f7ff fcdc 	bl	80016e4 <bno055_write>
    bno055_fusion_data_output_systems(ANDROID_FUSION_DATA_OUTPUT);
 8001d2c:	2080      	movs	r0, #128	; 0x80
 8001d2e:	f7ff fdf1 	bl	8001914 <bno055_fusion_data_output_systems>
    /* Configure axis mapping*/
    bno055_axis_remap_config(REMAP_CONFIG_P1_2_4_7);
 8001d32:	2024      	movs	r0, #36	; 0x24
 8001d34:	f7ff fe0f 	bl	8001956 <bno055_axis_remap_config>
    bno055_axis_remap_sign(REMAP_SIGN_P1);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff fe2d 	bl	8001998 <bno055_axis_remap_sign>
    //set BNO055 SYS_TRIGGER TO 0x00
    tmp = 0x00;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    bno055_write(SYS_TRIGGER,&tmp);
 8001d44:	f107 0381 	add.w	r3, r7, #129	; 0x81
 8001d48:	4619      	mov	r1, r3
 8001d4a:	203f      	movs	r0, #63	; 0x3f
 8001d4c:	f7ff fcca 	bl	80016e4 <bno055_write>
    delay_ms(50);
 8001d50:	2032      	movs	r0, #50	; 0x32
 8001d52:	f000 f9ed 	bl	8002130 <delay_ms>
    //set BNO055_OPERATION_MODE_NDOF
    bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8001d56:	200c      	movs	r0, #12
 8001d58:	f7ff fd0e 	bl	8001778 <bno055_set_operation_mode>
    delay_ms(50);
 8001d5c:	2032      	movs	r0, #50	; 0x32
 8001d5e:	f000 f9e7 	bl	8002130 <delay_ms>
    return 0;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	378c      	adds	r7, #140	; 0x8c
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	2000068c 	.word	0x2000068c
 8001d70:	40020800 	.word	0x40020800
 8001d74:	0800b9e0 	.word	0x0800b9e0
 8001d78:	200009a4 	.word	0x200009a4

08001d7c <bno055_get_accel_gyro>:
	*gyrx_ofs = (int16_t)((int16_t)buffer_calibrations[13]) << 8 | buffer_calibrations[12];
	*gyry_ofs = (int16_t)((int16_t)buffer_calibrations[15]) << 8 | buffer_calibrations[14];
	*gyrz_ofs = (int16_t)((int16_t)buffer_calibrations[17]) << 8 | buffer_calibrations[16];
	return 0;
}
int bno055_get_accel_gyro(float *ax,float *ay,float *az ,float *gx ,float *gy ,float *gz){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
	uint8_t tmp;
	uint8_t buffer_accel[6] = {};
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	83bb      	strh	r3, [r7, #28]
	uint8_t buffer_gyro[6] = {};
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	2300      	movs	r3, #0
 8001d98:	82bb      	strh	r3, [r7, #20]
	tmp = 0x00;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	77fb      	strb	r3, [r7, #31]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8001d9e:	f107 031f 	add.w	r3, r7, #31
 8001da2:	4619      	mov	r1, r3
 8001da4:	2007      	movs	r0, #7
 8001da6:	f7ff fc9d 	bl	80016e4 <bno055_write>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	da02      	bge.n	8001db6 <bno055_get_accel_gyro+0x3a>
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	e0a4      	b.n	8001f00 <bno055_get_accel_gyro+0x184>
	if(bno055_read_bytes(ACC_DATA_X_LSB,buffer_accel,6)<0){
 8001db6:	f107 0318 	add.w	r3, r7, #24
 8001dba:	2206      	movs	r2, #6
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	2008      	movs	r0, #8
 8001dc0:	f7ff fcb0 	bl	8001724 <bno055_read_bytes>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da02      	bge.n	8001dd0 <bno055_get_accel_gyro+0x54>
		return -1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e097      	b.n	8001f00 <bno055_get_accel_gyro+0x184>
	}
	*ax = (int16_t)((int16_t)buffer_accel[1]  << 8) | buffer_accel[0]; *ax /= BNO055_ACC_SCALE;
 8001dd0:	7e7b      	ldrb	r3, [r7, #25]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	7e3b      	ldrb	r3, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	edc3 7a00 	vstr	s15, [r3]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	ed93 7a00 	vldr	s14, [r3]
 8001df0:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001f08 <bno055_get_accel_gyro+0x18c>
 8001df4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	edc3 7a00 	vstr	s15, [r3]
	*ay = (int16_t)((int16_t)buffer_accel[3]  << 8) | buffer_accel[2]; *ay /= BNO055_ACC_SCALE;
 8001dfe:	7efb      	ldrb	r3, [r7, #27]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	7ebb      	ldrb	r3, [r7, #26]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	edc3 7a00 	vstr	s15, [r3]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	ed93 7a00 	vldr	s14, [r3]
 8001e1e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001f08 <bno055_get_accel_gyro+0x18c>
 8001e22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	edc3 7a00 	vstr	s15, [r3]
	*az = (int16_t)((int16_t)buffer_accel[5]  << 8) | buffer_accel[4]; *az /= BNO055_ACC_SCALE;
 8001e2c:	7f7b      	ldrb	r3, [r7, #29]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	7f3b      	ldrb	r3, [r7, #28]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	edc3 7a00 	vstr	s15, [r3]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	ed93 7a00 	vldr	s14, [r3]
 8001e4c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001f08 <bno055_get_accel_gyro+0x18c>
 8001e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	edc3 7a00 	vstr	s15, [r3]
	if(bno055_read_bytes(GYR_DATA_X_LSB,buffer_gyro,6)<0){
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	2206      	movs	r2, #6
 8001e60:	4619      	mov	r1, r3
 8001e62:	2014      	movs	r0, #20
 8001e64:	f7ff fc5e 	bl	8001724 <bno055_read_bytes>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	da02      	bge.n	8001e74 <bno055_get_accel_gyro+0xf8>
			return -1;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	e045      	b.n	8001f00 <bno055_get_accel_gyro+0x184>
		}
	*gx = (int16_t)((int16_t)buffer_gyro[1]  << 8) | buffer_gyro[0]; *gx /= BNO055_GYR_SCALE;
 8001e74:	7c7b      	ldrb	r3, [r7, #17]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	7c3b      	ldrb	r3, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	edc3 7a00 	vstr	s15, [r3]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	ed93 7a00 	vldr	s14, [r3]
 8001e94:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001e98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	edc3 7a00 	vstr	s15, [r3]
	*gy = (int16_t)((int16_t)buffer_gyro[3]  << 8) | buffer_gyro[2]; *gy /= BNO055_GYR_SCALE;
 8001ea2:	7cfb      	ldrb	r3, [r7, #19]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	b21b      	sxth	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	7cbb      	ldrb	r3, [r7, #18]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	edc3 7a00 	vstr	s15, [r3]
 8001ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebe:	ed93 7a00 	vldr	s14, [r3]
 8001ec2:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ecc:	edc3 7a00 	vstr	s15, [r3]
	*gz = (int16_t)((int16_t)buffer_gyro[5]  << 8) | buffer_gyro[4]; *gz /= BNO055_GYR_SCALE;
 8001ed0:	7d7b      	ldrb	r3, [r7, #21]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	7d3b      	ldrb	r3, [r7, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee6:	edc3 7a00 	vstr	s15, [r3]
 8001eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eec:	ed93 7a00 	vldr	s14, [r3]
 8001ef0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efa:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3720      	adds	r7, #32
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	42c80000 	.word	0x42c80000

08001f0c <bno055_get_temp>:
	*mx = (int16_t)((int16_t)buffer_mag[1]  << 8) | buffer_mag[0]; *mx /= BNO055_MAG_SCALE;
	*my = (int16_t)((int16_t)buffer_mag[3]  << 8) | buffer_mag[2]; *my /= BNO055_MAG_SCALE;
	*mz = (int16_t)((int16_t)buffer_mag[5]  << 8) | buffer_mag[4]; *mz /= BNO055_MAG_SCALE;
	return 0;
}
int bno055_get_temp(float *temp){
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_temp[1] = {};
 8001f14:	2300      	movs	r3, #0
 8001f16:	733b      	strb	r3, [r7, #12]
	tmp = 0x00;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8001f1c:	f107 030f 	add.w	r3, r7, #15
 8001f20:	4619      	mov	r1, r3
 8001f22:	2007      	movs	r0, #7
 8001f24:	f7ff fbde 	bl	80016e4 <bno055_write>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da02      	bge.n	8001f34 <bno055_get_temp+0x28>
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e015      	b.n	8001f60 <bno055_get_temp+0x54>
	if(bno055_read_bytes(TEMP,buffer_temp,1)<0){
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	2034      	movs	r0, #52	; 0x34
 8001f3e:	f7ff fbf1 	bl	8001724 <bno055_read_bytes>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	da02      	bge.n	8001f4e <bno055_get_temp+0x42>
				return -1;
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4c:	e008      	b.n	8001f60 <bno055_get_temp+0x54>
			}
	*temp = buffer_temp[0] / BNO055_TEMP_SCALE;
 8001f4e:	7b3b      	ldrb	r3, [r7, #12]
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <bno055_get_elu_data>:
int bno055_get_elu_data(float *roll, float *pitch, float *yaw){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_eul[6] = {};
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	82bb      	strh	r3, [r7, #20]
	tmp = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	75fb      	strb	r3, [r7, #23]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8001f80:	f107 0317 	add.w	r3, r7, #23
 8001f84:	4619      	mov	r1, r3
 8001f86:	2007      	movs	r0, #7
 8001f88:	f7ff fbac 	bl	80016e4 <bno055_write>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	da02      	bge.n	8001f98 <bno055_get_elu_data+0x30>
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e052      	b.n	800203e <bno055_get_elu_data+0xd6>
	if(bno055_read_bytes(EUL_HEADING_LSB,buffer_eul,6)<0){
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	2206      	movs	r2, #6
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	201a      	movs	r0, #26
 8001fa2:	f7ff fbbf 	bl	8001724 <bno055_read_bytes>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da02      	bge.n	8001fb2 <bno055_get_elu_data+0x4a>
					return -1;
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb0:	e045      	b.n	800203e <bno055_get_elu_data+0xd6>
	}
	*yaw = (int16_t)((int16_t)buffer_eul[1]  << 8) | buffer_eul[0]; *yaw /= BNO055_EUL_SCALE;
 8001fb2:	7c7b      	ldrb	r3, [r7, #17]
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	7c3b      	ldrb	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	edc3 7a00 	vstr	s15, [r3]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	ed93 7a00 	vldr	s14, [r3]
 8001fd2:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002048 <bno055_get_elu_data+0xe0>
 8001fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	edc3 7a00 	vstr	s15, [r3]
	*roll = (int16_t)((int16_t)buffer_eul[3]  << 8) | buffer_eul[2]; *roll /= BNO055_EUL_SCALE;
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	7cbb      	ldrb	r3, [r7, #18]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	edc3 7a00 	vstr	s15, [r3]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	ed93 7a00 	vldr	s14, [r3]
 8002000:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002048 <bno055_get_elu_data+0xe0>
 8002004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	edc3 7a00 	vstr	s15, [r3]
	*pitch = (int16_t)((int16_t)buffer_eul[5]  << 8) | buffer_eul[4]; *pitch /= BNO055_EUL_SCALE;
 800200e:	7d7b      	ldrb	r3, [r7, #21]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	b21b      	sxth	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	7d3b      	ldrb	r3, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	edc3 7a00 	vstr	s15, [r3]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	ed93 7a00 	vldr	s14, [r3]
 800202e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002048 <bno055_get_elu_data+0xe0>
 8002032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	44610000 	.word	0x44610000

0800204c <bno055_get_lia_data>:
	*qua_x = (int16_t)((int16_t)buffer_qua[3]  << 8) | buffer_qua[2]; *qua_x /= BNO055_QUATERNIONS_SCALE;
	*qua_y = (int16_t)((int16_t)buffer_qua[5]  << 8) | buffer_qua[4]; *qua_y /= BNO055_QUATERNIONS_SCALE;
	*qua_z = (int16_t)((int16_t)buffer_qua[7]  << 8) | buffer_qua[6]; *qua_z /= BNO055_QUATERNIONS_SCALE;
	return 0;
}
int bno055_get_lia_data(float *lia_x, float *lia_y, float *lia_z){
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
	uint8_t tmp;
	uint8_t buffer_lia[6] = {};
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	2300      	movs	r3, #0
 800205e:	82bb      	strh	r3, [r7, #20]
	tmp = 0x00;
 8002060:	2300      	movs	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]
	if(bno055_write(PAGE_ID,&tmp)<0) return -1;
 8002064:	f107 0317 	add.w	r3, r7, #23
 8002068:	4619      	mov	r1, r3
 800206a:	2007      	movs	r0, #7
 800206c:	f7ff fb3a 	bl	80016e4 <bno055_write>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	da02      	bge.n	800207c <bno055_get_lia_data+0x30>
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	e052      	b.n	8002122 <bno055_get_lia_data+0xd6>
	if(bno055_read_bytes(LIA_DATA_X_LSB,buffer_lia,6)<0){
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	2206      	movs	r2, #6
 8002082:	4619      	mov	r1, r3
 8002084:	2028      	movs	r0, #40	; 0x28
 8002086:	f7ff fb4d 	bl	8001724 <bno055_read_bytes>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	da02      	bge.n	8002096 <bno055_get_lia_data+0x4a>
				return -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	e045      	b.n	8002122 <bno055_get_lia_data+0xd6>
			}
	*lia_x = (int16_t)((int16_t)buffer_lia[1]  << 8) | buffer_lia[0]; *lia_x /= BNO055_LIA_SCALE;
 8002096:	7c7b      	ldrb	r3, [r7, #17]
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	b21b      	sxth	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	7c3b      	ldrb	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	edc3 7a00 	vstr	s15, [r3]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	ed93 7a00 	vldr	s14, [r3]
 80020b6:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800212c <bno055_get_lia_data+0xe0>
 80020ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	edc3 7a00 	vstr	s15, [r3]
	*lia_y = (int16_t)((int16_t)buffer_lia[3]  << 8) | buffer_lia[2]; *lia_y /= BNO055_LIA_SCALE;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	7cbb      	ldrb	r3, [r7, #18]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	edc3 7a00 	vstr	s15, [r3]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	ed93 7a00 	vldr	s14, [r3]
 80020e4:	eddf 6a11 	vldr	s13, [pc, #68]	; 800212c <bno055_get_lia_data+0xe0>
 80020e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	edc3 7a00 	vstr	s15, [r3]
	*lia_z = (int16_t)((int16_t)buffer_lia[5]  << 8) | buffer_lia[4]; *lia_z /= BNO055_LIA_SCALE;
 80020f2:	7d7b      	ldrb	r3, [r7, #21]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	7d3b      	ldrb	r3, [r7, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	edc3 7a00 	vstr	s15, [r3]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	ed93 7a00 	vldr	s14, [r3]
 8002112:	eddf 6a06 	vldr	s13, [pc, #24]	; 800212c <bno055_get_lia_data+0xe0>
 8002116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	42c80000 	.word	0x42c80000

08002130 <delay_ms>:
void delay_us(uint32_t us){
    __HAL_TIM_SET_COUNTER(&TIM_DELAY_US,0);  // set the counter value a 0
    while (__HAL_TIM_GET_COUNTER(&TIM_DELAY_US) < us);  // wait for the counter to reach the us input in the parameter
}

void delay_ms(uint32_t ms){
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&TIM_DELAY_MS,0);  // set the counter value a 0
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <delay_ms+0x34>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2200      	movs	r2, #0
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&TIM_DELAY_MS) < ms*1000);  // wait for the counter to reach the us input in the parameter
 8002140:	bf00      	nop
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <delay_ms+0x34>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	429a      	cmp	r2, r3
 8002154:	d3f5      	bcc.n	8002142 <delay_ms+0x12>
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	20000848 	.word	0x20000848

08002168 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800216e:	463b      	mov	r3, r7
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <MX_ADC1_Init+0x98>)
 800217c:	4a21      	ldr	r2, [pc, #132]	; (8002204 <MX_ADC1_Init+0x9c>)
 800217e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002180:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <MX_ADC1_Init+0x98>)
 8002182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002186:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <MX_ADC1_Init+0x98>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <MX_ADC1_Init+0x98>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002194:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <MX_ADC1_Init+0x98>)
 8002196:	2200      	movs	r2, #0
 8002198:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <MX_ADC1_Init+0x98>)
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021a2:	4b17      	ldr	r3, [pc, #92]	; (8002200 <MX_ADC1_Init+0x98>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <MX_ADC1_Init+0x98>)
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <MX_ADC1_Init+0xa0>)
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <MX_ADC1_Init+0x98>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <MX_ADC1_Init+0x98>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_ADC1_Init+0x98>)
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_ADC1_Init+0x98>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <MX_ADC1_Init+0x98>)
 80021ca:	f001 fe0f 	bl	8003dec <HAL_ADC_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80021d4:	f000 fc3a 	bl	8002a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80021d8:	230b      	movs	r3, #11
 80021da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80021dc:	2301      	movs	r3, #1
 80021de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e4:	463b      	mov	r3, r7
 80021e6:	4619      	mov	r1, r3
 80021e8:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_ADC1_Init+0x98>)
 80021ea:	f001 fe43 	bl	8003e74 <HAL_ADC_ConfigChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80021f4:	f000 fc2a 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	2000061c 	.word	0x2000061c
 8002204:	40012000 	.word	0x40012000
 8002208:	0f000001 	.word	0x0f000001

0800220c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a17      	ldr	r2, [pc, #92]	; (8002288 <HAL_ADC_MspInit+0x7c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d127      	bne.n	800227e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_ADC_MspInit+0x80>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a15      	ldr	r2, [pc, #84]	; (800228c <HAL_ADC_MspInit+0x80>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_ADC_MspInit+0x80>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <HAL_ADC_MspInit+0x80>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_ADC_MspInit+0x80>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_ADC_MspInit+0x80>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = MCU_ADC_1_Pin|MCU_ADC_2_Pin|MCU_ADC_3_Pin;
 8002266:	230e      	movs	r3, #14
 8002268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800226a:	2303      	movs	r3, #3
 800226c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	4805      	ldr	r0, [pc, #20]	; (8002290 <HAL_ADC_MspInit+0x84>)
 800227a:	f002 fda3 	bl	8004dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	; 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40012000 	.word	0x40012000
 800228c:	40023800 	.word	0x40023800
 8002290:	40020800 	.word	0x40020800

08002294 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002298:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <MX_CAN2_Init+0x60>)
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <MX_CAN2_Init+0x64>)
 800229c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022a0:	2210      	movs	r2, #16
 80022a2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80022a4:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022be:	2200      	movs	r2, #0
 80022c0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022dc:	2200      	movs	r2, #0
 80022de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80022e0:	4804      	ldr	r0, [pc, #16]	; (80022f4 <MX_CAN2_Init+0x60>)
 80022e2:	f001 ffe5 	bl	80042b0 <HAL_CAN_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80022ec:	f000 fbae 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000664 	.word	0x20000664
 80022f8:	40006800 	.word	0x40006800

080022fc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a20      	ldr	r2, [pc, #128]	; (800239c <HAL_CAN_MspInit+0xa0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d13a      	bne.n	8002394 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a1e      	ldr	r2, [pc, #120]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002328:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a17      	ldr	r2, [pc, #92]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002344:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_CAN_MspInit+0xa4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = MCU_CAN_RX_Pin|MCU_CAN_TX_Pin;
 8002372:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002384:	2309      	movs	r3, #9
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	4805      	ldr	r0, [pc, #20]	; (80023a4 <HAL_CAN_MspInit+0xa8>)
 8002390:	f002 fd18 	bl	8004dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002394:	bf00      	nop
 8002396:	3728      	adds	r7, #40	; 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40006800 	.word	0x40006800
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40020400 	.word	0x40020400

080023a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <MX_DMA_Init+0x108>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a3e      	ldr	r2, [pc, #248]	; (80024b0 <MX_DMA_Init+0x108>)
 80023b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <MX_DMA_Init+0x108>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <MX_DMA_Init+0x108>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a37      	ldr	r2, [pc, #220]	; (80024b0 <MX_DMA_Init+0x108>)
 80023d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b35      	ldr	r3, [pc, #212]	; (80024b0 <MX_DMA_Init+0x108>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	200b      	movs	r0, #11
 80023ec:	f002 f937 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023f0:	200b      	movs	r0, #11
 80023f2:	f002 f950 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	200c      	movs	r0, #12
 80023fc:	f002 f92f 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002400:	200c      	movs	r0, #12
 8002402:	f002 f948 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	200d      	movs	r0, #13
 800240c:	f002 f927 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002410:	200d      	movs	r0, #13
 8002412:	f002 f940 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	200e      	movs	r0, #14
 800241c:	f002 f91f 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002420:	200e      	movs	r0, #14
 8002422:	f002 f938 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	200f      	movs	r0, #15
 800242c:	f002 f917 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002430:	200f      	movs	r0, #15
 8002432:	f002 f930 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	2010      	movs	r0, #16
 800243c:	f002 f90f 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002440:	2010      	movs	r0, #16
 8002442:	f002 f928 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	2011      	movs	r0, #17
 800244c:	f002 f907 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002450:	2011      	movs	r0, #17
 8002452:	f002 f920 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	202f      	movs	r0, #47	; 0x2f
 800245c:	f002 f8ff 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002460:	202f      	movs	r0, #47	; 0x2f
 8002462:	f002 f918 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	2039      	movs	r0, #57	; 0x39
 800246c:	f002 f8f7 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002470:	2039      	movs	r0, #57	; 0x39
 8002472:	f002 f910 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2100      	movs	r1, #0
 800247a:	203a      	movs	r0, #58	; 0x3a
 800247c:	f002 f8ef 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002480:	203a      	movs	r0, #58	; 0x3a
 8002482:	f002 f908 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	2045      	movs	r0, #69	; 0x45
 800248c:	f002 f8e7 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002490:	2045      	movs	r0, #69	; 0x45
 8002492:	f002 f900 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	2046      	movs	r0, #70	; 0x46
 800249c:	f002 f8df 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80024a0:	2046      	movs	r0, #70	; 0x46
 80024a2:	f002 f8f8 	bl	8004696 <HAL_NVIC_EnableIRQ>

}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800

080024b4 <MX_GPIO_Init>:
        * EXTI
     PA15   ------> S_TIM2_CH1_ETR
     PB3   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	4b54      	ldr	r3, [pc, #336]	; (8002620 <MX_GPIO_Init+0x16c>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a53      	ldr	r2, [pc, #332]	; (8002620 <MX_GPIO_Init+0x16c>)
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b51      	ldr	r3, [pc, #324]	; (8002620 <MX_GPIO_Init+0x16c>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <MX_GPIO_Init+0x16c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <MX_GPIO_Init+0x16c>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <MX_GPIO_Init+0x16c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	4b46      	ldr	r3, [pc, #280]	; (8002620 <MX_GPIO_Init+0x16c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a45      	ldr	r2, [pc, #276]	; (8002620 <MX_GPIO_Init+0x16c>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b43      	ldr	r3, [pc, #268]	; (8002620 <MX_GPIO_Init+0x16c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	4b3f      	ldr	r3, [pc, #252]	; (8002620 <MX_GPIO_Init+0x16c>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a3e      	ldr	r2, [pc, #248]	; (8002620 <MX_GPIO_Init+0x16c>)
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <MX_GPIO_Init+0x16c>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 800253a:	2200      	movs	r2, #0
 800253c:	f246 0131 	movw	r1, #24625	; 0x6031
 8002540:	4838      	ldr	r0, [pc, #224]	; (8002624 <MX_GPIO_Init+0x170>)
 8002542:	f002 fddb 	bl	80050fc <HAL_GPIO_WritePin>
                          |ADD_SPI_CSn_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin, GPIO_PIN_RESET);
 8002546:	2200      	movs	r2, #0
 8002548:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800254c:	4836      	ldr	r0, [pc, #216]	; (8002628 <MX_GPIO_Init+0x174>)
 800254e:	f002 fdd5 	bl	80050fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_LORA_RST_GPIO_Port, MCU_LORA_RST_Pin, GPIO_PIN_RESET);
 8002552:	2200      	movs	r2, #0
 8002554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002558:	4834      	ldr	r0, [pc, #208]	; (800262c <MX_GPIO_Init+0x178>)
 800255a:	f002 fdcf 	bl	80050fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_Pin|MCU_RF_LORA_PWR_Pin|LORA_SPI_CSn_2_Pin
 800255e:	f246 0331 	movw	r3, #24625	; 0x6031
 8002562:	617b      	str	r3, [r7, #20]
                          |ADD_SPI_CSn_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002564:	2301      	movs	r3, #1
 8002566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4619      	mov	r1, r3
 8002576:	482b      	ldr	r0, [pc, #172]	; (8002624 <MX_GPIO_Init+0x170>)
 8002578:	f002 fc24 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800257c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002582:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	4824      	ldr	r0, [pc, #144]	; (8002624 <MX_GPIO_Init+0x170>)
 8002594:	f002 fc16 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_GPIO_OUT1_Pin|MCU_GPIO_OUT2_Pin;
 8002598:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800259c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	481d      	ldr	r0, [pc, #116]	; (8002628 <MX_GPIO_Init+0x174>)
 80025b2:	f002 fc07 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_LORA_RST_Pin;
 80025b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025bc:	2301      	movs	r3, #1
 80025be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_LORA_RST_GPIO_Port, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	4817      	ldr	r0, [pc, #92]	; (800262c <MX_GPIO_Init+0x178>)
 80025d0:	f002 fbf8 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR1_Pin;
 80025d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025e6:	2301      	movs	r3, #1
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR1_GPIO_Port, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	480e      	ldr	r0, [pc, #56]	; (800262c <MX_GPIO_Init+0x178>)
 80025f2:	f002 fbe7 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_CIA_MTR2_Pin;
 80025f6:	2308      	movs	r3, #8
 80025f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002606:	2301      	movs	r3, #1
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_CIA_MTR2_GPIO_Port, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	4805      	ldr	r0, [pc, #20]	; (8002628 <MX_GPIO_Init+0x174>)
 8002612:	f002 fbd7 	bl	8004dc4 <HAL_GPIO_Init>

}
 8002616:	bf00      	nop
 8002618:	3728      	adds	r7, #40	; 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40020800 	.word	0x40020800
 8002628:	40020400 	.word	0x40020400
 800262c:	40020000 	.word	0x40020000

08002630 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <MX_I2C1_Init+0x74>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <MX_I2C1_Init+0x74>)
 8002640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <MX_I2C1_Init+0x74>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <MX_I2C1_Init+0x78>)
 8002654:	4a15      	ldr	r2, [pc, #84]	; (80026ac <MX_I2C1_Init+0x7c>)
 8002656:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <MX_I2C1_Init+0x78>)
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <MX_I2C1_Init+0x80>)
 800265c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <MX_I2C1_Init+0x78>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <MX_I2C1_Init+0x78>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <MX_I2C1_Init+0x78>)
 800266c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <MX_I2C1_Init+0x78>)
 8002674:	2200      	movs	r2, #0
 8002676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <MX_I2C1_Init+0x78>)
 800267a:	2200      	movs	r2, #0
 800267c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <MX_I2C1_Init+0x78>)
 8002680:	2200      	movs	r2, #0
 8002682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <MX_I2C1_Init+0x78>)
 8002686:	2200      	movs	r2, #0
 8002688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800268a:	4807      	ldr	r0, [pc, #28]	; (80026a8 <MX_I2C1_Init+0x78>)
 800268c:	f002 fd6a 	bl	8005164 <HAL_I2C_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_I2C1_Init+0x6a>
  {
    Error_Handler();
 8002696:	f000 f9d9 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	2000068c 	.word	0x2000068c
 80026ac:	40005400 	.word	0x40005400
 80026b0:	00061a80 	.word	0x00061a80

080026b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a19      	ldr	r2, [pc, #100]	; (8002738 <HAL_I2C_MspInit+0x84>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d12c      	bne.n	8002730 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_I2C_MspInit+0x88>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a17      	ldr	r2, [pc, #92]	; (800273c <HAL_I2C_MspInit+0x88>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_I2C_MspInit+0x88>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MCU_I2C_SCL_Pin|MCU_I2C_SDA_Pin;
 80026f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f8:	2312      	movs	r3, #18
 80026fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002704:	2304      	movs	r3, #4
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	480c      	ldr	r0, [pc, #48]	; (8002740 <HAL_I2C_MspInit+0x8c>)
 8002710:	f002 fb58 	bl	8004dc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_I2C_MspInit+0x88>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <HAL_I2C_MspInit+0x88>)
 800271e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002722:	6413      	str	r3, [r2, #64]	; 0x40
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_I2C_MspInit+0x88>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002730:	bf00      	nop
 8002732:	3728      	adds	r7, #40	; 0x28
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40005400 	.word	0x40005400
 800273c:	40023800 	.word	0x40023800
 8002740:	40020400 	.word	0x40020400

08002744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002744:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800274c:	f001 fadc 	bl	8003d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002750:	f000 f912 	bl	8002978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002754:	f7ff feae 	bl	80024b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002758:	f7ff fe26 	bl	80023a8 <MX_DMA_Init>
  MX_ADC1_Init();
 800275c:	f7ff fd04 	bl	8002168 <MX_ADC1_Init>
  MX_CAN2_Init();
 8002760:	f7ff fd98 	bl	8002294 <MX_CAN2_Init>
  MX_I2C1_Init();
 8002764:	f7ff ff64 	bl	8002630 <MX_I2C1_Init>
  //MX_SPI1_Init();
  MX_TIM1_Init();
 8002768:	f000 fb36 	bl	8002dd8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800276c:	f000 fbf8 	bl	8002f60 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002770:	f000 fc92 	bl	8003098 <MX_TIM8_Init>
  //MX_UART4_Init();
  MX_UART5_Init();
 8002774:	f000 fe04 	bl	8003380 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8002778:	f000 fe2c 	bl	80033d4 <MX_USART1_UART_Init>
  //MX_USART2_UART_Init();
  MX_USART3_UART_Init();
 800277c:	f000 fe54 	bl	8003428 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002780:	f000 fe7c 	bl	800347c <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8002784:	f000 fc3a 	bl	8002ffc <MX_TIM5_Init>
  HAL_TIM_Base_Start(&TIM_DELAY_US);
 8002788:	485a      	ldr	r0, [pc, #360]	; (80028f4 <main+0x1b0>)
 800278a:	f004 fc01 	bl	8006f90 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the display
 800278e:	f7fe fbf5 	bl	8000f7c <SSD1306_Init>

  SSD1306_GotoXY (10,10); // goto 10, 10
 8002792:	210a      	movs	r1, #10
 8002794:	200a      	movs	r0, #10
 8002796:	f7fe fd5b 	bl	8001250 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_16x26, 1); // print Hello
 800279a:	2201      	movs	r2, #1
 800279c:	4956      	ldr	r1, [pc, #344]	; (80028f8 <main+0x1b4>)
 800279e:	4857      	ldr	r0, [pc, #348]	; (80028fc <main+0x1b8>)
 80027a0:	f7fe fdec 	bl	800137c <SSD1306_Puts>
  SSD1306_GotoXY (10, 38);
 80027a4:	2126      	movs	r1, #38	; 0x26
 80027a6:	200a      	movs	r0, #10
 80027a8:	f7fe fd52 	bl	8001250 <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD!!", &Font_7x10, 1);
 80027ac:	2201      	movs	r2, #1
 80027ae:	4954      	ldr	r1, [pc, #336]	; (8002900 <main+0x1bc>)
 80027b0:	4854      	ldr	r0, [pc, #336]	; (8002904 <main+0x1c0>)
 80027b2:	f7fe fde3 	bl	800137c <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80027b6:	f7fe fca5 	bl	8001104 <SSD1306_UpdateScreen>
  delay_ms(1000);
 80027ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027be:	f7ff fcb7 	bl	8002130 <delay_ms>

  SSD1306_Clear();
 80027c2:	f7fe fe00 	bl	80013c6 <SSD1306_Clear>
  SSD1306_DrawBitmap(0, 0,drone_logo,128, 64, 1);
 80027c6:	2301      	movs	r3, #1
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	2340      	movs	r3, #64	; 0x40
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	4a4d      	ldr	r2, [pc, #308]	; (8002908 <main+0x1c4>)
 80027d2:	2100      	movs	r1, #0
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7fe fb69 	bl	8000eac <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen();
 80027da:	f7fe fc93 	bl	8001104 <SSD1306_UpdateScreen>
  delay_ms(2000);
 80027de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027e2:	f7ff fca5 	bl	8002130 <delay_ms>

  /* Infinite loop */
  bno055_initization();
 80027e6:	f7ff f973 	bl	8001ad0 <bno055_initization>
  delay_ms(1000);
 80027ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ee:	f7ff fc9f 	bl	8002130 <delay_ms>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  bno055_calibrations_status(&sys,&gyr,&acc,&mag);
 80027f2:	4b46      	ldr	r3, [pc, #280]	; (800290c <main+0x1c8>)
 80027f4:	4a46      	ldr	r2, [pc, #280]	; (8002910 <main+0x1cc>)
 80027f6:	4947      	ldr	r1, [pc, #284]	; (8002914 <main+0x1d0>)
 80027f8:	4847      	ldr	r0, [pc, #284]	; (8002918 <main+0x1d4>)
 80027fa:	f7ff f935 	bl	8001a68 <bno055_calibrations_status>
	  bno055_get_elu_data(&roll, &pitch, &yaw);
 80027fe:	4a47      	ldr	r2, [pc, #284]	; (800291c <main+0x1d8>)
 8002800:	4947      	ldr	r1, [pc, #284]	; (8002920 <main+0x1dc>)
 8002802:	4848      	ldr	r0, [pc, #288]	; (8002924 <main+0x1e0>)
 8002804:	f7ff fbb0 	bl	8001f68 <bno055_get_elu_data>
	  bno055_get_temp(&temp);
 8002808:	4847      	ldr	r0, [pc, #284]	; (8002928 <main+0x1e4>)
 800280a:	f7ff fb7f 	bl	8001f0c <bno055_get_temp>
	  bno055_get_accel_gyro(&ax,&ay,&az,&gx,&gy,&gz);
 800280e:	4b47      	ldr	r3, [pc, #284]	; (800292c <main+0x1e8>)
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <main+0x1ec>)
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <main+0x1f0>)
 8002818:	4a47      	ldr	r2, [pc, #284]	; (8002938 <main+0x1f4>)
 800281a:	4948      	ldr	r1, [pc, #288]	; (800293c <main+0x1f8>)
 800281c:	4848      	ldr	r0, [pc, #288]	; (8002940 <main+0x1fc>)
 800281e:	f7ff faad 	bl	8001d7c <bno055_get_accel_gyro>
	  delay_ms(50);
 8002822:	2032      	movs	r0, #50	; 0x32
 8002824:	f7ff fc84 	bl	8002130 <delay_ms>
	  bno055_get_accel_gyro(&ax,&ay,&az,&gyr_x,&gyr_x,&gyr_x);
 8002828:	4b46      	ldr	r3, [pc, #280]	; (8002944 <main+0x200>)
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	4b45      	ldr	r3, [pc, #276]	; (8002944 <main+0x200>)
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	4b44      	ldr	r3, [pc, #272]	; (8002944 <main+0x200>)
 8002832:	4a41      	ldr	r2, [pc, #260]	; (8002938 <main+0x1f4>)
 8002834:	4941      	ldr	r1, [pc, #260]	; (800293c <main+0x1f8>)
 8002836:	4842      	ldr	r0, [pc, #264]	; (8002940 <main+0x1fc>)
 8002838:	f7ff faa0 	bl	8001d7c <bno055_get_accel_gyro>
	  angular_acc_x = (gyr_x - gx ) / 50;
 800283c:	4b41      	ldr	r3, [pc, #260]	; (8002944 <main+0x200>)
 800283e:	ed93 7a00 	vldr	s14, [r3]
 8002842:	4b3c      	ldr	r3, [pc, #240]	; (8002934 <main+0x1f0>)
 8002844:	edd3 7a00 	vldr	s15, [r3]
 8002848:	ee37 7a67 	vsub.f32	s14, s14, s15
 800284c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8002948 <main+0x204>
 8002850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002854:	4b3d      	ldr	r3, [pc, #244]	; (800294c <main+0x208>)
 8002856:	edc3 7a00 	vstr	s15, [r3]
	  angular_acc_y = (gyr_y - gy ) / 50;
 800285a:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <main+0x20c>)
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	4b33      	ldr	r3, [pc, #204]	; (8002930 <main+0x1ec>)
 8002862:	edd3 7a00 	vldr	s15, [r3]
 8002866:	ee37 7a67 	vsub.f32	s14, s14, s15
 800286a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002948 <main+0x204>
 800286e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002872:	4b38      	ldr	r3, [pc, #224]	; (8002954 <main+0x210>)
 8002874:	edc3 7a00 	vstr	s15, [r3]
	  angular_acc_z = (gyr_z - gz ) / 50;
 8002878:	4b37      	ldr	r3, [pc, #220]	; (8002958 <main+0x214>)
 800287a:	ed93 7a00 	vldr	s14, [r3]
 800287e:	4b2b      	ldr	r3, [pc, #172]	; (800292c <main+0x1e8>)
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002888:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002948 <main+0x204>
 800288c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002890:	4b32      	ldr	r3, [pc, #200]	; (800295c <main+0x218>)
 8002892:	edc3 7a00 	vstr	s15, [r3]
	  bno055_get_lia_data(&lia_x, &lia_y, &lia_z);
 8002896:	4a32      	ldr	r2, [pc, #200]	; (8002960 <main+0x21c>)
 8002898:	4932      	ldr	r1, [pc, #200]	; (8002964 <main+0x220>)
 800289a:	4833      	ldr	r0, [pc, #204]	; (8002968 <main+0x224>)
 800289c:	f7ff fbd6 	bl	800204c <bno055_get_lia_data>
	  //HAL_UART_Transmit(&huart6,(uint8_t *)data1, sprintf(data1,"%0.5f,%0.5f,%0.5f,%0.5f,%0.5f,%0.5f,%0.5f\n",roll,pitch,yaw,temp,lia_x,lia_y,lia_z),10);
	  //HAL_UART_Transmit(&huart6,(uint8_t *)data1, sprintf(data1,"%0.5f,%0.5f,%0.5f\n",gx,gy,gz),10);
	  HAL_UART_Transmit(&huart6,(uint8_t *)data2, sprintf(data2,"%0.5f,%0.5f,%0.5f\n",angular_acc_x,angular_acc_y,angular_acc_z),10);
 80028a0:	4b2a      	ldr	r3, [pc, #168]	; (800294c <main+0x208>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fe4f 	bl	8000548 <__aeabi_f2d>
 80028aa:	4680      	mov	r8, r0
 80028ac:	4689      	mov	r9, r1
 80028ae:	4b29      	ldr	r3, [pc, #164]	; (8002954 <main+0x210>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fe48 	bl	8000548 <__aeabi_f2d>
 80028b8:	4604      	mov	r4, r0
 80028ba:	460d      	mov	r5, r1
 80028bc:	4b27      	ldr	r3, [pc, #156]	; (800295c <main+0x218>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fe41 	bl	8000548 <__aeabi_f2d>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028ce:	e9cd 4500 	strd	r4, r5, [sp]
 80028d2:	4642      	mov	r2, r8
 80028d4:	464b      	mov	r3, r9
 80028d6:	4925      	ldr	r1, [pc, #148]	; (800296c <main+0x228>)
 80028d8:	4825      	ldr	r0, [pc, #148]	; (8002970 <main+0x22c>)
 80028da:	f006 fe07 	bl	80094ec <siprintf>
 80028de:	4603      	mov	r3, r0
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	230a      	movs	r3, #10
 80028e4:	4922      	ldr	r1, [pc, #136]	; (8002970 <main+0x22c>)
 80028e6:	4823      	ldr	r0, [pc, #140]	; (8002974 <main+0x230>)
 80028e8:	f005 f9a3 	bl	8007c32 <HAL_UART_Transmit>
	  //sprintf(data2,"%c,%c,%c,%c\n",sys,gyr,acc,mag);
	  //HAL_UART_Transmit(&huart6,(uint8_t *)data2,sprintf(data2,"%d,%d,%d,%d\n",sys,gyr,acc,mag),10);
	  //HAL_UART_Transmit(&huart6,(uint8_t *)data3,sprintf(data3,"%0.5f,%0.5f,%0.5f,%0.5f,%0.5f,%0.5f\n",ax,ay,az,gx,gy,gz),10);
	  delay_ms(100);
 80028ec:	2064      	movs	r0, #100	; 0x64
 80028ee:	f7ff fc1f 	bl	8002130 <delay_ms>
	  bno055_calibrations_status(&sys,&gyr,&acc,&mag);
 80028f2:	e77e      	b.n	80027f2 <main+0xae>
 80028f4:	20000848 	.word	0x20000848
 80028f8:	20000008 	.word	0x20000008
 80028fc:	0800b9f0 	.word	0x0800b9f0
 8002900:	20000000 	.word	0x20000000
 8002904:	0800b9f8 	.word	0x0800b9f8
 8002908:	0800d4cc 	.word	0x0800d4cc
 800290c:	20000798 	.word	0x20000798
 8002910:	20000794 	.word	0x20000794
 8002914:	20000790 	.word	0x20000790
 8002918:	2000078c 	.word	0x2000078c
 800291c:	20000764 	.word	0x20000764
 8002920:	20000760 	.word	0x20000760
 8002924:	2000075c 	.word	0x2000075c
 8002928:	20000758 	.word	0x20000758
 800292c:	200007b0 	.word	0x200007b0
 8002930:	200007ac 	.word	0x200007ac
 8002934:	200007a8 	.word	0x200007a8
 8002938:	200007a4 	.word	0x200007a4
 800293c:	200007a0 	.word	0x200007a0
 8002940:	2000079c 	.word	0x2000079c
 8002944:	20000774 	.word	0x20000774
 8002948:	42480000 	.word	0x42480000
 800294c:	20000780 	.word	0x20000780
 8002950:	20000778 	.word	0x20000778
 8002954:	20000784 	.word	0x20000784
 8002958:	2000077c 	.word	0x2000077c
 800295c:	20000788 	.word	0x20000788
 8002960:	20000770 	.word	0x20000770
 8002964:	2000076c 	.word	0x2000076c
 8002968:	20000768 	.word	0x20000768
 800296c:	0800ba00 	.word	0x0800ba00
 8002970:	200006e0 	.word	0x200006e0
 8002974:	200009a4 	.word	0x200009a4

08002978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b094      	sub	sp, #80	; 0x50
 800297c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800297e:	f107 0320 	add.w	r3, r7, #32
 8002982:	2230      	movs	r2, #48	; 0x30
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f006 f93e 	bl	8008c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <SystemClock_Config+0xcc>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <SystemClock_Config+0xcc>)
 80029a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029aa:	6413      	str	r3, [r2, #64]	; 0x40
 80029ac:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <SystemClock_Config+0xcc>)
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029b8:	2300      	movs	r3, #0
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <SystemClock_Config+0xd0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a21      	ldr	r2, [pc, #132]	; (8002a48 <SystemClock_Config+0xd0>)
 80029c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <SystemClock_Config+0xd0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029d4:	2302      	movs	r3, #2
 80029d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029d8:	2301      	movs	r3, #1
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029dc:	2310      	movs	r3, #16
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029e0:	2302      	movs	r3, #2
 80029e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029e4:	2300      	movs	r3, #0
 80029e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029e8:	2308      	movs	r3, #8
 80029ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80029ec:	23a8      	movs	r3, #168	; 0xa8
 80029ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029f0:	2302      	movs	r3, #2
 80029f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029f4:	2304      	movs	r3, #4
 80029f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029f8:	f107 0320 	add.w	r3, r7, #32
 80029fc:	4618      	mov	r0, r3
 80029fe:	f003 fe1f 	bl	8006640 <HAL_RCC_OscConfig>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a08:	f000 f820 	bl	8002a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a0c:	230f      	movs	r3, #15
 8002a0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a10:	2302      	movs	r3, #2
 8002a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	2105      	movs	r1, #5
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 f880 	bl	8006b30 <HAL_RCC_ClockConfig>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a36:	f000 f809 	bl	8002a4c <Error_Handler>
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	3750      	adds	r7, #80	; 0x50
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40007000 	.word	0x40007000

08002a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a50:	b672      	cpsid	i
}
 8002a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <Error_Handler+0x8>
	...

08002a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <HAL_MspInit+0x4c>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <HAL_MspInit+0x4c>)
 8002a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_MspInit+0x4c>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_MspInit+0x4c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <HAL_MspInit+0x4c>)
 8002a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_MspInit+0x4c>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800

08002aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <NMI_Handler+0x4>

08002aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <HardFault_Handler+0x4>

08002ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <MemManage_Handler+0x4>

08002aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002abe:	e7fe      	b.n	8002abe <BusFault_Handler+0x4>

08002ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac4:	e7fe      	b.n	8002ac4 <UsageFault_Handler+0x4>

08002ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af4:	f001 f95a 	bl	8003dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}

08002afc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <DMA1_Stream0_IRQHandler+0x10>)
 8002b02:	f001 ff23 	bl	800494c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000aa8 	.word	0x20000aa8

08002b10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b14:	4802      	ldr	r0, [pc, #8]	; (8002b20 <DMA1_Stream1_IRQHandler+0x10>)
 8002b16:	f001 ff19 	bl	800494c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000ce8 	.word	0x20000ce8

08002b24 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <DMA1_Stream2_IRQHandler+0x10>)
 8002b2a:	f001 ff0f 	bl	800494c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200009e8 	.word	0x200009e8

08002b38 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002b3c:	4802      	ldr	r0, [pc, #8]	; (8002b48 <DMA1_Stream3_IRQHandler+0x10>)
 8002b3e:	f001 ff05 	bl	800494c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000d48 	.word	0x20000d48

08002b4c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <DMA1_Stream4_IRQHandler+0x10>)
 8002b52:	f001 fefb 	bl	800494c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000a48 	.word	0x20000a48

08002b60 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <DMA1_Stream5_IRQHandler+0x10>)
 8002b66:	f001 fef1 	bl	800494c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000c28 	.word	0x20000c28

08002b74 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <DMA1_Stream6_IRQHandler+0x10>)
 8002b7a:	f001 fee7 	bl	800494c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000c88 	.word	0x20000c88

08002b88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <USART1_IRQHandler+0x10>)
 8002b8e:	f005 f8e3 	bl	8007d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000091c 	.word	0x2000091c

08002b9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <USART3_IRQHandler+0x10>)
 8002ba2:	f005 f8d9 	bl	8007d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000960 	.word	0x20000960

08002bb0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <DMA1_Stream7_IRQHandler+0x10>)
 8002bb6:	f001 fec9 	bl	800494c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000b08 	.word	0x20000b08

08002bc4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <UART5_IRQHandler+0x10>)
 8002bca:	f005 f8c5 	bl	8007d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200008d8 	.word	0x200008d8

08002bd8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002bdc:	4802      	ldr	r0, [pc, #8]	; (8002be8 <DMA2_Stream1_IRQHandler+0x10>)
 8002bde:	f001 feb5 	bl	800494c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000da8 	.word	0x20000da8

08002bec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <DMA2_Stream2_IRQHandler+0x10>)
 8002bf2:	f001 feab 	bl	800494c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000b68 	.word	0x20000b68

08002c00 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <DMA2_Stream6_IRQHandler+0x10>)
 8002c06:	f001 fea1 	bl	800494c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000e08 	.word	0x20000e08

08002c14 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <DMA2_Stream7_IRQHandler+0x10>)
 8002c1a:	f001 fe97 	bl	800494c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000bc8 	.word	0x20000bc8

08002c28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
	return 1;
 8002c2c:	2301      	movs	r3, #1
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <_kill>:

int _kill(int pid, int sig)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c42:	f005 ffa9 	bl	8008b98 <__errno>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2216      	movs	r2, #22
 8002c4a:	601a      	str	r2, [r3, #0]
	return -1;
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_exit>:

void _exit (int status)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c60:	f04f 31ff 	mov.w	r1, #4294967295
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ffe7 	bl	8002c38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c6a:	e7fe      	b.n	8002c6a <_exit+0x12>

08002c6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e00a      	b.n	8002c94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c7e:	f3af 8000 	nop.w
 8002c82:	4601      	mov	r1, r0
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	60ba      	str	r2, [r7, #8]
 8002c8a:	b2ca      	uxtb	r2, r1
 8002c8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	3301      	adds	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	dbf0      	blt.n	8002c7e <_read+0x12>
	}

return len;
 8002c9c:	687b      	ldr	r3, [r7, #4]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	e009      	b.n	8002ccc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	60ba      	str	r2, [r7, #8]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	dbf1      	blt.n	8002cb8 <_write+0x12>
	}
	return len;
 8002cd4:	687b      	ldr	r3, [r7, #4]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <_close>:

int _close(int file)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
	return -1;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d06:	605a      	str	r2, [r3, #4]
	return 0;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <_isatty>:

int _isatty(int file)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d1e:	2301      	movs	r3, #1
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
	return 0;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d50:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <_sbrk+0x5c>)
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <_sbrk+0x60>)
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <_sbrk+0x64>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d64:	4b11      	ldr	r3, [pc, #68]	; (8002dac <_sbrk+0x64>)
 8002d66:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <_sbrk+0x68>)
 8002d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <_sbrk+0x64>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d207      	bcs.n	8002d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d78:	f005 ff0e 	bl	8008b98 <__errno>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	220c      	movs	r2, #12
 8002d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d82:	f04f 33ff 	mov.w	r3, #4294967295
 8002d86:	e009      	b.n	8002d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <_sbrk+0x64>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <_sbrk+0x64>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <_sbrk+0x64>)
 8002d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20020000 	.word	0x20020000
 8002da8:	00000400 	.word	0x00000400
 8002dac:	200007b4 	.word	0x200007b4
 8002db0:	20000e80 	.word	0x20000e80

08002db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <SystemInit+0x20>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <SystemInit+0x20>)
 8002dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b096      	sub	sp, #88	; 0x58
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	609a      	str	r2, [r3, #8]
 8002e02:	60da      	str	r2, [r3, #12]
 8002e04:	611a      	str	r2, [r3, #16]
 8002e06:	615a      	str	r2, [r3, #20]
 8002e08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f005 fef9 	bl	8008c08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e16:	4b50      	ldr	r3, [pc, #320]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002e18:	4a50      	ldr	r2, [pc, #320]	; (8002f5c <MX_TIM1_Init+0x184>)
 8002e1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002e1c:	4b4e      	ldr	r3, [pc, #312]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e22:	4b4d      	ldr	r3, [pc, #308]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8002e28:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002e2a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002e2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e30:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e36:	4b48      	ldr	r3, [pc, #288]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e3c:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e42:	4845      	ldr	r0, [pc, #276]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002e44:	f004 f854 	bl	8006ef0 <HAL_TIM_Base_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002e4e:	f7ff fdfd 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	483e      	ldr	r0, [pc, #248]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002e60:	f004 fa1a 	bl	8007298 <HAL_TIM_ConfigClockSource>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002e6a:	f7ff fdef 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e6e:	483a      	ldr	r0, [pc, #232]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002e70:	f004 f8f6 	bl	8007060 <HAL_TIM_PWM_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002e7a:	f7ff fde7 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4832      	ldr	r0, [pc, #200]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002e8e:	f004 fdb5 	bl	80079fc <HAL_TIMEx_MasterConfigSynchronization>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002e98:	f7ff fdd8 	bl	8002a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e9c:	2360      	movs	r3, #96	; 0x60
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4825      	ldr	r0, [pc, #148]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002ec2:	f004 f927 	bl	8007114 <HAL_TIM_PWM_ConfigChannel>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002ecc:	f7ff fdbe 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	481f      	ldr	r0, [pc, #124]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002eda:	f004 f91b 	bl	8007114 <HAL_TIM_PWM_ConfigChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002ee4:	f7ff fdb2 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eec:	2208      	movs	r2, #8
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4819      	ldr	r0, [pc, #100]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002ef2:	f004 f90f 	bl	8007114 <HAL_TIM_PWM_ConfigChannel>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002efc:	f7ff fda6 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f04:	220c      	movs	r2, #12
 8002f06:	4619      	mov	r1, r3
 8002f08:	4813      	ldr	r0, [pc, #76]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002f0a:	f004 f903 	bl	8007114 <HAL_TIM_PWM_ConfigChannel>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002f14:	f7ff fd9a 	bl	8002a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f36:	1d3b      	adds	r3, r7, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4807      	ldr	r0, [pc, #28]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002f3c:	f004 fdda 	bl	8007af4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002f46:	f7ff fd81 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f4a:	4803      	ldr	r0, [pc, #12]	; (8002f58 <MX_TIM1_Init+0x180>)
 8002f4c:	f000 f9b4 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8002f50:	bf00      	nop
 8002f52:	3758      	adds	r7, #88	; 0x58
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200007b8 	.word	0x200007b8
 8002f5c:	40010000 	.word	0x40010000

08002f60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f66:	f107 0308 	add.w	r3, r7, #8
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f74:	463b      	mov	r3, r7
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002f7e:	4a1e      	ldr	r2, [pc, #120]	; (8002ff8 <MX_TIM3_Init+0x98>)
 8002f80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f82:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f96:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f9c:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fa2:	4814      	ldr	r0, [pc, #80]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002fa4:	f003 ffa4 	bl	8006ef0 <HAL_TIM_Base_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002fae:	f7ff fd4d 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fb8:	f107 0308 	add.w	r3, r7, #8
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002fc0:	f004 f96a 	bl	8007298 <HAL_TIM_ConfigClockSource>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002fca:	f7ff fd3f 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fd6:	463b      	mov	r3, r7
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4806      	ldr	r0, [pc, #24]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002fdc:	f004 fd0e 	bl	80079fc <HAL_TIMEx_MasterConfigSynchronization>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002fe6:	f7ff fd31 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000800 	.word	0x20000800
 8002ff8:	40000400 	.word	0x40000400

08002ffc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003002:	f107 0308 	add.w	r3, r7, #8
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003010:	463b      	mov	r3, r7
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <MX_TIM5_Init+0x94>)
 800301a:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <MX_TIM5_Init+0x98>)
 800301c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 800301e:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <MX_TIM5_Init+0x94>)
 8003020:	2253      	movs	r2, #83	; 0x53
 8003022:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <MX_TIM5_Init+0x94>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffff;
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <MX_TIM5_Init+0x94>)
 800302c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8003030:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <MX_TIM5_Init+0x94>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <MX_TIM5_Init+0x94>)
 800303a:	2200      	movs	r2, #0
 800303c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800303e:	4814      	ldr	r0, [pc, #80]	; (8003090 <MX_TIM5_Init+0x94>)
 8003040:	f003 ff56 	bl	8006ef0 <HAL_TIM_Base_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800304a:	f7ff fcff 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800304e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003052:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003054:	f107 0308 	add.w	r3, r7, #8
 8003058:	4619      	mov	r1, r3
 800305a:	480d      	ldr	r0, [pc, #52]	; (8003090 <MX_TIM5_Init+0x94>)
 800305c:	f004 f91c 	bl	8007298 <HAL_TIM_ConfigClockSource>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003066:	f7ff fcf1 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003072:	463b      	mov	r3, r7
 8003074:	4619      	mov	r1, r3
 8003076:	4806      	ldr	r0, [pc, #24]	; (8003090 <MX_TIM5_Init+0x94>)
 8003078:	f004 fcc0 	bl	80079fc <HAL_TIMEx_MasterConfigSynchronization>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003082:	f7ff fce3 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003086:	bf00      	nop
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000848 	.word	0x20000848
 8003094:	40000c00 	.word	0x40000c00

08003098 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b096      	sub	sp, #88	; 0x58
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800309e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	60da      	str	r2, [r3, #12]
 80030c4:	611a      	str	r2, [r3, #16]
 80030c6:	615a      	str	r2, [r3, #20]
 80030c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	2220      	movs	r2, #32
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f005 fd99 	bl	8008c08 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80030d6:	4b44      	ldr	r3, [pc, #272]	; (80031e8 <MX_TIM8_Init+0x150>)
 80030d8:	4a44      	ldr	r2, [pc, #272]	; (80031ec <MX_TIM8_Init+0x154>)
 80030da:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80030dc:	4b42      	ldr	r3, [pc, #264]	; (80031e8 <MX_TIM8_Init+0x150>)
 80030de:	2200      	movs	r2, #0
 80030e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e2:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <MX_TIM8_Init+0x150>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80030e8:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <MX_TIM8_Init+0x150>)
 80030ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f0:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <MX_TIM8_Init+0x150>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80030f6:	4b3c      	ldr	r3, [pc, #240]	; (80031e8 <MX_TIM8_Init+0x150>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030fc:	4b3a      	ldr	r3, [pc, #232]	; (80031e8 <MX_TIM8_Init+0x150>)
 80030fe:	2200      	movs	r2, #0
 8003100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003102:	4839      	ldr	r0, [pc, #228]	; (80031e8 <MX_TIM8_Init+0x150>)
 8003104:	f003 fef4 	bl	8006ef0 <HAL_TIM_Base_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800310e:	f7ff fc9d 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003116:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003118:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800311c:	4619      	mov	r1, r3
 800311e:	4832      	ldr	r0, [pc, #200]	; (80031e8 <MX_TIM8_Init+0x150>)
 8003120:	f004 f8ba 	bl	8007298 <HAL_TIM_ConfigClockSource>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800312a:	f7ff fc8f 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800312e:	482e      	ldr	r0, [pc, #184]	; (80031e8 <MX_TIM8_Init+0x150>)
 8003130:	f003 ff96 	bl	8007060 <HAL_TIM_PWM_Init>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800313a:	f7ff fc87 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003142:	2300      	movs	r3, #0
 8003144:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003146:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800314a:	4619      	mov	r1, r3
 800314c:	4826      	ldr	r0, [pc, #152]	; (80031e8 <MX_TIM8_Init+0x150>)
 800314e:	f004 fc55 	bl	80079fc <HAL_TIMEx_MasterConfigSynchronization>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003158:	f7ff fc78 	bl	8002a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800315c:	2360      	movs	r3, #96	; 0x60
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003164:	2300      	movs	r3, #0
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003168:	2300      	movs	r3, #0
 800316a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800316c:	2300      	movs	r3, #0
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003170:	2300      	movs	r3, #0
 8003172:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003174:	2300      	movs	r3, #0
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800317c:	2208      	movs	r2, #8
 800317e:	4619      	mov	r1, r3
 8003180:	4819      	ldr	r0, [pc, #100]	; (80031e8 <MX_TIM8_Init+0x150>)
 8003182:	f003 ffc7 	bl	8007114 <HAL_TIM_PWM_ConfigChannel>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800318c:	f7ff fc5e 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003194:	220c      	movs	r2, #12
 8003196:	4619      	mov	r1, r3
 8003198:	4813      	ldr	r0, [pc, #76]	; (80031e8 <MX_TIM8_Init+0x150>)
 800319a:	f003 ffbb 	bl	8007114 <HAL_TIM_PWM_ConfigChannel>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80031a4:	f7ff fc52 	bl	8002a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4807      	ldr	r0, [pc, #28]	; (80031e8 <MX_TIM8_Init+0x150>)
 80031cc:	f004 fc92 	bl	8007af4 <HAL_TIMEx_ConfigBreakDeadTime>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80031d6:	f7ff fc39 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80031da:	4803      	ldr	r0, [pc, #12]	; (80031e8 <MX_TIM8_Init+0x150>)
 80031dc:	f000 f86c 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 80031e0:	bf00      	nop
 80031e2:	3758      	adds	r7, #88	; 0x58
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000890 	.word	0x20000890
 80031ec:	40010400 	.word	0x40010400

080031f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a29      	ldr	r2, [pc, #164]	; (80032a4 <HAL_TIM_Base_MspInit+0xb4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d10e      	bne.n	8003220 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <HAL_TIM_Base_MspInit+0xb8>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <HAL_TIM_Base_MspInit+0xb8>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6453      	str	r3, [r2, #68]	; 0x44
 8003212:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <HAL_TIM_Base_MspInit+0xb8>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800321e:	e03a      	b.n	8003296 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a21      	ldr	r2, [pc, #132]	; (80032ac <HAL_TIM_Base_MspInit+0xbc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d10e      	bne.n	8003248 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <HAL_TIM_Base_MspInit+0xb8>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a1d      	ldr	r2, [pc, #116]	; (80032a8 <HAL_TIM_Base_MspInit+0xb8>)
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_TIM_Base_MspInit+0xb8>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]
}
 8003246:	e026      	b.n	8003296 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <HAL_TIM_Base_MspInit+0xc0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d10e      	bne.n	8003270 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <HAL_TIM_Base_MspInit+0xb8>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <HAL_TIM_Base_MspInit+0xb8>)
 800325c:	f043 0308 	orr.w	r3, r3, #8
 8003260:	6413      	str	r3, [r2, #64]	; 0x40
 8003262:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_TIM_Base_MspInit+0xb8>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
}
 800326e:	e012      	b.n	8003296 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0f      	ldr	r2, [pc, #60]	; (80032b4 <HAL_TIM_Base_MspInit+0xc4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10d      	bne.n	8003296 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_TIM_Base_MspInit+0xb8>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <HAL_TIM_Base_MspInit+0xb8>)
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	6453      	str	r3, [r2, #68]	; 0x44
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_TIM_Base_MspInit+0xb8>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40000400 	.word	0x40000400
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	40010400 	.word	0x40010400

080032b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a25      	ldr	r2, [pc, #148]	; (800336c <HAL_TIM_MspPostInit+0xb4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d11f      	bne.n	800331a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_TIM_MspPostInit+0xb8>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	4a23      	ldr	r2, [pc, #140]	; (8003370 <HAL_TIM_MspPostInit+0xb8>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ea:	4b21      	ldr	r3, [pc, #132]	; (8003370 <HAL_TIM_MspPostInit+0xb8>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MTR1_PWM_MCU_Pin|MTR2_PWM_MCU_Pin|MTR3_PWM_MCU_Pin|MTR4_PWM_MCU_Pin;
 80032f6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80032fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fc:	2302      	movs	r3, #2
 80032fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003304:	2300      	movs	r3, #0
 8003306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003308:	2301      	movs	r3, #1
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	4619      	mov	r1, r3
 8003312:	4818      	ldr	r0, [pc, #96]	; (8003374 <HAL_TIM_MspPostInit+0xbc>)
 8003314:	f001 fd56 	bl	8004dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003318:	e023      	b.n	8003362 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a16      	ldr	r2, [pc, #88]	; (8003378 <HAL_TIM_MspPostInit+0xc0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d11e      	bne.n	8003362 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_TIM_MspPostInit+0xb8>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	4a10      	ldr	r2, [pc, #64]	; (8003370 <HAL_TIM_MspPostInit+0xb8>)
 800332e:	f043 0304 	orr.w	r3, r3, #4
 8003332:	6313      	str	r3, [r2, #48]	; 0x30
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <HAL_TIM_MspPostInit+0xb8>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_PWM_TIM8_CH3_Pin|LED_5050_PWM_IN_Pin;
 8003340:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334e:	2300      	movs	r3, #0
 8003350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003352:	2303      	movs	r3, #3
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003356:	f107 0314 	add.w	r3, r7, #20
 800335a:	4619      	mov	r1, r3
 800335c:	4807      	ldr	r0, [pc, #28]	; (800337c <HAL_TIM_MspPostInit+0xc4>)
 800335e:	f001 fd31 	bl	8004dc4 <HAL_GPIO_Init>
}
 8003362:	bf00      	nop
 8003364:	3728      	adds	r7, #40	; 0x28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40010000 	.word	0x40010000
 8003370:	40023800 	.word	0x40023800
 8003374:	40020000 	.word	0x40020000
 8003378:	40010400 	.word	0x40010400
 800337c:	40020800 	.word	0x40020800

08003380 <MX_UART5_Init>:
  /* USER CODE END UART4_Init 2 */

}
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <MX_UART5_Init+0x4c>)
 8003386:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <MX_UART5_Init+0x50>)
 8003388:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800338a:	4b10      	ldr	r3, [pc, #64]	; (80033cc <MX_UART5_Init+0x4c>)
 800338c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003390:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <MX_UART5_Init+0x4c>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <MX_UART5_Init+0x4c>)
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <MX_UART5_Init+0x4c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <MX_UART5_Init+0x4c>)
 80033a6:	220c      	movs	r2, #12
 80033a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <MX_UART5_Init+0x4c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <MX_UART5_Init+0x4c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80033b6:	4805      	ldr	r0, [pc, #20]	; (80033cc <MX_UART5_Init+0x4c>)
 80033b8:	f004 fbee 	bl	8007b98 <HAL_UART_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80033c2:	f7ff fb43 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	200008d8 	.word	0x200008d8
 80033d0:	40005000 	.word	0x40005000

080033d4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <MX_USART1_UART_Init+0x4c>)
 80033da:	4a12      	ldr	r2, [pc, #72]	; (8003424 <MX_USART1_UART_Init+0x50>)
 80033dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <MX_USART1_UART_Init+0x4c>)
 80033e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <MX_USART1_UART_Init+0x4c>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <MX_USART1_UART_Init+0x4c>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <MX_USART1_UART_Init+0x4c>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <MX_USART1_UART_Init+0x4c>)
 80033fa:	220c      	movs	r2, #12
 80033fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <MX_USART1_UART_Init+0x4c>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <MX_USART1_UART_Init+0x4c>)
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800340a:	4805      	ldr	r0, [pc, #20]	; (8003420 <MX_USART1_UART_Init+0x4c>)
 800340c:	f004 fbc4 	bl	8007b98 <HAL_UART_Init>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003416:	f7ff fb19 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	2000091c 	.word	0x2000091c
 8003424:	40011000 	.word	0x40011000

08003428 <MX_USART3_UART_Init>:

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <MX_USART3_UART_Init+0x4c>)
 800342e:	4a12      	ldr	r2, [pc, #72]	; (8003478 <MX_USART3_UART_Init+0x50>)
 8003430:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <MX_USART3_UART_Init+0x4c>)
 8003434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003438:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800343a:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <MX_USART3_UART_Init+0x4c>)
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <MX_USART3_UART_Init+0x4c>)
 8003442:	2200      	movs	r2, #0
 8003444:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <MX_USART3_UART_Init+0x4c>)
 8003448:	2200      	movs	r2, #0
 800344a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <MX_USART3_UART_Init+0x4c>)
 800344e:	220c      	movs	r2, #12
 8003450:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <MX_USART3_UART_Init+0x4c>)
 8003454:	2200      	movs	r2, #0
 8003456:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <MX_USART3_UART_Init+0x4c>)
 800345a:	2200      	movs	r2, #0
 800345c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800345e:	4805      	ldr	r0, [pc, #20]	; (8003474 <MX_USART3_UART_Init+0x4c>)
 8003460:	f004 fb9a 	bl	8007b98 <HAL_UART_Init>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800346a:	f7ff faef 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000960 	.word	0x20000960
 8003478:	40004800 	.word	0x40004800

0800347c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 8003482:	4a12      	ldr	r2, [pc, #72]	; (80034cc <MX_USART6_UART_Init+0x50>)
 8003484:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 8003488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800348c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 8003496:	2200      	movs	r2, #0
 8003498:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800349a:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 80034a2:	220c      	movs	r2, #12
 80034a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034a6:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80034b2:	4805      	ldr	r0, [pc, #20]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 80034b4:	f004 fb70 	bl	8007b98 <HAL_UART_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80034be:	f7ff fac5 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200009a4 	.word	0x200009a4
 80034cc:	40011400 	.word	0x40011400

080034d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b094      	sub	sp, #80	; 0x50
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a46      	ldr	r2, [pc, #280]	; (8003608 <HAL_UART_MspInit+0x138>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	f040 8098 	bne.w	8003624 <HAL_UART_MspInit+0x154>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80034f4:	2300      	movs	r3, #0
 80034f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034f8:	4b44      	ldr	r3, [pc, #272]	; (800360c <HAL_UART_MspInit+0x13c>)
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	4a43      	ldr	r2, [pc, #268]	; (800360c <HAL_UART_MspInit+0x13c>)
 80034fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003502:	6413      	str	r3, [r2, #64]	; 0x40
 8003504:	4b41      	ldr	r3, [pc, #260]	; (800360c <HAL_UART_MspInit+0x13c>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350c:	63bb      	str	r3, [r7, #56]	; 0x38
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003510:	2300      	movs	r3, #0
 8003512:	637b      	str	r3, [r7, #52]	; 0x34
 8003514:	4b3d      	ldr	r3, [pc, #244]	; (800360c <HAL_UART_MspInit+0x13c>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	4a3c      	ldr	r2, [pc, #240]	; (800360c <HAL_UART_MspInit+0x13c>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6313      	str	r3, [r2, #48]	; 0x30
 8003520:	4b3a      	ldr	r3, [pc, #232]	; (800360c <HAL_UART_MspInit+0x13c>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	637b      	str	r3, [r7, #52]	; 0x34
 800352a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MCU_ESP32_TX_Pin|MCU_ESP32_RX_Pin;
 800352c:	2303      	movs	r3, #3
 800352e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003538:	2303      	movs	r3, #3
 800353a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800353c:	2308      	movs	r3, #8
 800353e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003540:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003544:	4619      	mov	r1, r3
 8003546:	4832      	ldr	r0, [pc, #200]	; (8003610 <HAL_UART_MspInit+0x140>)
 8003548:	f001 fc3c 	bl	8004dc4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800354c:	4b31      	ldr	r3, [pc, #196]	; (8003614 <HAL_UART_MspInit+0x144>)
 800354e:	4a32      	ldr	r2, [pc, #200]	; (8003618 <HAL_UART_MspInit+0x148>)
 8003550:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003552:	4b30      	ldr	r3, [pc, #192]	; (8003614 <HAL_UART_MspInit+0x144>)
 8003554:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003558:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800355a:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <HAL_UART_MspInit+0x144>)
 800355c:	2200      	movs	r2, #0
 800355e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003560:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <HAL_UART_MspInit+0x144>)
 8003562:	2200      	movs	r2, #0
 8003564:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003566:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_UART_MspInit+0x144>)
 8003568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800356c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800356e:	4b29      	ldr	r3, [pc, #164]	; (8003614 <HAL_UART_MspInit+0x144>)
 8003570:	2200      	movs	r2, #0
 8003572:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003574:	4b27      	ldr	r3, [pc, #156]	; (8003614 <HAL_UART_MspInit+0x144>)
 8003576:	2200      	movs	r2, #0
 8003578:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800357a:	4b26      	ldr	r3, [pc, #152]	; (8003614 <HAL_UART_MspInit+0x144>)
 800357c:	2200      	movs	r2, #0
 800357e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003580:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_UART_MspInit+0x144>)
 8003582:	2200      	movs	r2, #0
 8003584:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003586:	4b23      	ldr	r3, [pc, #140]	; (8003614 <HAL_UART_MspInit+0x144>)
 8003588:	2200      	movs	r2, #0
 800358a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800358c:	4821      	ldr	r0, [pc, #132]	; (8003614 <HAL_UART_MspInit+0x144>)
 800358e:	f001 f89d 	bl	80046cc <HAL_DMA_Init>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003598:	f7ff fa58 	bl	8002a4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <HAL_UART_MspInit+0x144>)
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
 80035a2:	4a1c      	ldr	r2, [pc, #112]	; (8003614 <HAL_UART_MspInit+0x144>)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80035a8:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_UART_MspInit+0x14c>)
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <HAL_UART_MspInit+0x150>)
 80035ac:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80035ae:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_UART_MspInit+0x14c>)
 80035b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035b4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_UART_MspInit+0x14c>)
 80035b8:	2240      	movs	r2, #64	; 0x40
 80035ba:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035bc:	4b17      	ldr	r3, [pc, #92]	; (800361c <HAL_UART_MspInit+0x14c>)
 80035be:	2200      	movs	r2, #0
 80035c0:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <HAL_UART_MspInit+0x14c>)
 80035c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035c8:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035ca:	4b14      	ldr	r3, [pc, #80]	; (800361c <HAL_UART_MspInit+0x14c>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <HAL_UART_MspInit+0x14c>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_UART_MspInit+0x14c>)
 80035d8:	2200      	movs	r2, #0
 80035da:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <HAL_UART_MspInit+0x14c>)
 80035de:	2200      	movs	r2, #0
 80035e0:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_UART_MspInit+0x14c>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80035e8:	480c      	ldr	r0, [pc, #48]	; (800361c <HAL_UART_MspInit+0x14c>)
 80035ea:	f001 f86f 	bl	80046cc <HAL_DMA_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80035f4:	f7ff fa2a 	bl	8002a4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a08      	ldr	r2, [pc, #32]	; (800361c <HAL_UART_MspInit+0x14c>)
 80035fc:	635a      	str	r2, [r3, #52]	; 0x34
 80035fe:	4a07      	ldr	r2, [pc, #28]	; (800361c <HAL_UART_MspInit+0x14c>)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003604:	e33a      	b.n	8003c7c <HAL_UART_MspInit+0x7ac>
 8003606:	bf00      	nop
 8003608:	40004c00 	.word	0x40004c00
 800360c:	40023800 	.word	0x40023800
 8003610:	40020000 	.word	0x40020000
 8003614:	200009e8 	.word	0x200009e8
 8003618:	40026040 	.word	0x40026040
 800361c:	20000a48 	.word	0x20000a48
 8003620:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a59      	ldr	r2, [pc, #356]	; (8003790 <HAL_UART_MspInit+0x2c0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	f040 80c0 	bne.w	80037b0 <HAL_UART_MspInit+0x2e0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003630:	2300      	movs	r3, #0
 8003632:	633b      	str	r3, [r7, #48]	; 0x30
 8003634:	4b57      	ldr	r3, [pc, #348]	; (8003794 <HAL_UART_MspInit+0x2c4>)
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	4a56      	ldr	r2, [pc, #344]	; (8003794 <HAL_UART_MspInit+0x2c4>)
 800363a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800363e:	6413      	str	r3, [r2, #64]	; 0x40
 8003640:	4b54      	ldr	r3, [pc, #336]	; (8003794 <HAL_UART_MspInit+0x2c4>)
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003648:	633b      	str	r3, [r7, #48]	; 0x30
 800364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800364c:	2300      	movs	r3, #0
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003650:	4b50      	ldr	r3, [pc, #320]	; (8003794 <HAL_UART_MspInit+0x2c4>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	4a4f      	ldr	r2, [pc, #316]	; (8003794 <HAL_UART_MspInit+0x2c4>)
 8003656:	f043 0304 	orr.w	r3, r3, #4
 800365a:	6313      	str	r3, [r2, #48]	; 0x30
 800365c:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <HAL_UART_MspInit+0x2c4>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003668:	2300      	movs	r3, #0
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
 800366c:	4b49      	ldr	r3, [pc, #292]	; (8003794 <HAL_UART_MspInit+0x2c4>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	4a48      	ldr	r2, [pc, #288]	; (8003794 <HAL_UART_MspInit+0x2c4>)
 8003672:	f043 0308 	orr.w	r3, r3, #8
 8003676:	6313      	str	r3, [r2, #48]	; 0x30
 8003678:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_UART_MspInit+0x2c4>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = MCU_UART5_TX_Pin;
 8003684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003688:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003692:	2303      	movs	r3, #3
 8003694:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003696:	2308      	movs	r3, #8
 8003698:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 800369a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800369e:	4619      	mov	r1, r3
 80036a0:	483d      	ldr	r0, [pc, #244]	; (8003798 <HAL_UART_MspInit+0x2c8>)
 80036a2:	f001 fb8f 	bl	8004dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MCU_UART5_RX_Pin;
 80036a6:	2304      	movs	r3, #4
 80036a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b2:	2303      	movs	r3, #3
 80036b4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80036b6:	2308      	movs	r3, #8
 80036b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MCU_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80036ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036be:	4619      	mov	r1, r3
 80036c0:	4836      	ldr	r0, [pc, #216]	; (800379c <HAL_UART_MspInit+0x2cc>)
 80036c2:	f001 fb7f 	bl	8004dc4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80036c6:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_UART_MspInit+0x2d0>)
 80036c8:	4a36      	ldr	r2, [pc, #216]	; (80037a4 <HAL_UART_MspInit+0x2d4>)
 80036ca:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80036cc:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_UART_MspInit+0x2d0>)
 80036ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036d2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036d4:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <HAL_UART_MspInit+0x2d0>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036da:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <HAL_UART_MspInit+0x2d0>)
 80036dc:	2200      	movs	r2, #0
 80036de:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036e0:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <HAL_UART_MspInit+0x2d0>)
 80036e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036e6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036e8:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <HAL_UART_MspInit+0x2d0>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036ee:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <HAL_UART_MspInit+0x2d0>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80036f4:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <HAL_UART_MspInit+0x2d0>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036fa:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_UART_MspInit+0x2d0>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003700:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <HAL_UART_MspInit+0x2d0>)
 8003702:	2200      	movs	r2, #0
 8003704:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003706:	4826      	ldr	r0, [pc, #152]	; (80037a0 <HAL_UART_MspInit+0x2d0>)
 8003708:	f000 ffe0 	bl	80046cc <HAL_DMA_Init>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_UART_MspInit+0x246>
      Error_Handler();
 8003712:	f7ff f99b 	bl	8002a4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a21      	ldr	r2, [pc, #132]	; (80037a0 <HAL_UART_MspInit+0x2d0>)
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
 800371c:	4a20      	ldr	r2, [pc, #128]	; (80037a0 <HAL_UART_MspInit+0x2d0>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8003722:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <HAL_UART_MspInit+0x2d8>)
 8003724:	4a21      	ldr	r2, [pc, #132]	; (80037ac <HAL_UART_MspInit+0x2dc>)
 8003726:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8003728:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_UART_MspInit+0x2d8>)
 800372a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800372e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003730:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_UART_MspInit+0x2d8>)
 8003732:	2240      	movs	r2, #64	; 0x40
 8003734:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <HAL_UART_MspInit+0x2d8>)
 8003738:	2200      	movs	r2, #0
 800373a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <HAL_UART_MspInit+0x2d8>)
 800373e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003742:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003744:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <HAL_UART_MspInit+0x2d8>)
 8003746:	2200      	movs	r2, #0
 8003748:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <HAL_UART_MspInit+0x2d8>)
 800374c:	2200      	movs	r2, #0
 800374e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8003750:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_UART_MspInit+0x2d8>)
 8003752:	2200      	movs	r2, #0
 8003754:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003756:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <HAL_UART_MspInit+0x2d8>)
 8003758:	2200      	movs	r2, #0
 800375a:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_UART_MspInit+0x2d8>)
 800375e:	2200      	movs	r2, #0
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8003762:	4811      	ldr	r0, [pc, #68]	; (80037a8 <HAL_UART_MspInit+0x2d8>)
 8003764:	f000 ffb2 	bl	80046cc <HAL_DMA_Init>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_UART_MspInit+0x2a2>
      Error_Handler();
 800376e:	f7ff f96d 	bl	8002a4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <HAL_UART_MspInit+0x2d8>)
 8003776:	635a      	str	r2, [r3, #52]	; 0x34
 8003778:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <HAL_UART_MspInit+0x2d8>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	2035      	movs	r0, #53	; 0x35
 8003784:	f000 ff6b 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003788:	2035      	movs	r0, #53	; 0x35
 800378a:	f000 ff84 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 800378e:	e275      	b.n	8003c7c <HAL_UART_MspInit+0x7ac>
 8003790:	40005000 	.word	0x40005000
 8003794:	40023800 	.word	0x40023800
 8003798:	40020800 	.word	0x40020800
 800379c:	40020c00 	.word	0x40020c00
 80037a0:	20000aa8 	.word	0x20000aa8
 80037a4:	40026010 	.word	0x40026010
 80037a8:	20000b08 	.word	0x20000b08
 80037ac:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a91      	ldr	r2, [pc, #580]	; (80039fc <HAL_UART_MspInit+0x52c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	f040 8091 	bne.w	80038de <HAL_UART_MspInit+0x40e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80037bc:	2300      	movs	r3, #0
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
 80037c0:	4b8f      	ldr	r3, [pc, #572]	; (8003a00 <HAL_UART_MspInit+0x530>)
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	4a8e      	ldr	r2, [pc, #568]	; (8003a00 <HAL_UART_MspInit+0x530>)
 80037c6:	f043 0310 	orr.w	r3, r3, #16
 80037ca:	6453      	str	r3, [r2, #68]	; 0x44
 80037cc:	4b8c      	ldr	r3, [pc, #560]	; (8003a00 <HAL_UART_MspInit+0x530>)
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d8:	2300      	movs	r3, #0
 80037da:	623b      	str	r3, [r7, #32]
 80037dc:	4b88      	ldr	r3, [pc, #544]	; (8003a00 <HAL_UART_MspInit+0x530>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	4a87      	ldr	r2, [pc, #540]	; (8003a00 <HAL_UART_MspInit+0x530>)
 80037e2:	f043 0302 	orr.w	r3, r3, #2
 80037e6:	6313      	str	r3, [r2, #48]	; 0x30
 80037e8:	4b85      	ldr	r3, [pc, #532]	; (8003a00 <HAL_UART_MspInit+0x530>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	623b      	str	r3, [r7, #32]
 80037f2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = MCU_USART1_TX_Pin|MCU_USART1_RX_Pin;
 80037f4:	23c0      	movs	r3, #192	; 0xc0
 80037f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f8:	2302      	movs	r3, #2
 80037fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003800:	2303      	movs	r3, #3
 8003802:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003804:	2307      	movs	r3, #7
 8003806:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003808:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800380c:	4619      	mov	r1, r3
 800380e:	487d      	ldr	r0, [pc, #500]	; (8003a04 <HAL_UART_MspInit+0x534>)
 8003810:	f001 fad8 	bl	8004dc4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003814:	4b7c      	ldr	r3, [pc, #496]	; (8003a08 <HAL_UART_MspInit+0x538>)
 8003816:	4a7d      	ldr	r2, [pc, #500]	; (8003a0c <HAL_UART_MspInit+0x53c>)
 8003818:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800381a:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <HAL_UART_MspInit+0x538>)
 800381c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003820:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003822:	4b79      	ldr	r3, [pc, #484]	; (8003a08 <HAL_UART_MspInit+0x538>)
 8003824:	2200      	movs	r2, #0
 8003826:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003828:	4b77      	ldr	r3, [pc, #476]	; (8003a08 <HAL_UART_MspInit+0x538>)
 800382a:	2200      	movs	r2, #0
 800382c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800382e:	4b76      	ldr	r3, [pc, #472]	; (8003a08 <HAL_UART_MspInit+0x538>)
 8003830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003834:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003836:	4b74      	ldr	r3, [pc, #464]	; (8003a08 <HAL_UART_MspInit+0x538>)
 8003838:	2200      	movs	r2, #0
 800383a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800383c:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <HAL_UART_MspInit+0x538>)
 800383e:	2200      	movs	r2, #0
 8003840:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003842:	4b71      	ldr	r3, [pc, #452]	; (8003a08 <HAL_UART_MspInit+0x538>)
 8003844:	2200      	movs	r2, #0
 8003846:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003848:	4b6f      	ldr	r3, [pc, #444]	; (8003a08 <HAL_UART_MspInit+0x538>)
 800384a:	2200      	movs	r2, #0
 800384c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800384e:	4b6e      	ldr	r3, [pc, #440]	; (8003a08 <HAL_UART_MspInit+0x538>)
 8003850:	2200      	movs	r2, #0
 8003852:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003854:	486c      	ldr	r0, [pc, #432]	; (8003a08 <HAL_UART_MspInit+0x538>)
 8003856:	f000 ff39 	bl	80046cc <HAL_DMA_Init>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_UART_MspInit+0x394>
      Error_Handler();
 8003860:	f7ff f8f4 	bl	8002a4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a68      	ldr	r2, [pc, #416]	; (8003a08 <HAL_UART_MspInit+0x538>)
 8003868:	639a      	str	r2, [r3, #56]	; 0x38
 800386a:	4a67      	ldr	r2, [pc, #412]	; (8003a08 <HAL_UART_MspInit+0x538>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003870:	4b67      	ldr	r3, [pc, #412]	; (8003a10 <HAL_UART_MspInit+0x540>)
 8003872:	4a68      	ldr	r2, [pc, #416]	; (8003a14 <HAL_UART_MspInit+0x544>)
 8003874:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003876:	4b66      	ldr	r3, [pc, #408]	; (8003a10 <HAL_UART_MspInit+0x540>)
 8003878:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800387c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800387e:	4b64      	ldr	r3, [pc, #400]	; (8003a10 <HAL_UART_MspInit+0x540>)
 8003880:	2240      	movs	r2, #64	; 0x40
 8003882:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003884:	4b62      	ldr	r3, [pc, #392]	; (8003a10 <HAL_UART_MspInit+0x540>)
 8003886:	2200      	movs	r2, #0
 8003888:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800388a:	4b61      	ldr	r3, [pc, #388]	; (8003a10 <HAL_UART_MspInit+0x540>)
 800388c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003890:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003892:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <HAL_UART_MspInit+0x540>)
 8003894:	2200      	movs	r2, #0
 8003896:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003898:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <HAL_UART_MspInit+0x540>)
 800389a:	2200      	movs	r2, #0
 800389c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800389e:	4b5c      	ldr	r3, [pc, #368]	; (8003a10 <HAL_UART_MspInit+0x540>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038a4:	4b5a      	ldr	r3, [pc, #360]	; (8003a10 <HAL_UART_MspInit+0x540>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038aa:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_UART_MspInit+0x540>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80038b0:	4857      	ldr	r0, [pc, #348]	; (8003a10 <HAL_UART_MspInit+0x540>)
 80038b2:	f000 ff0b 	bl	80046cc <HAL_DMA_Init>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_UART_MspInit+0x3f0>
      Error_Handler();
 80038bc:	f7ff f8c6 	bl	8002a4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a53      	ldr	r2, [pc, #332]	; (8003a10 <HAL_UART_MspInit+0x540>)
 80038c4:	635a      	str	r2, [r3, #52]	; 0x34
 80038c6:	4a52      	ldr	r2, [pc, #328]	; (8003a10 <HAL_UART_MspInit+0x540>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80038cc:	2200      	movs	r2, #0
 80038ce:	2100      	movs	r1, #0
 80038d0:	2025      	movs	r0, #37	; 0x25
 80038d2:	f000 fec4 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038d6:	2025      	movs	r0, #37	; 0x25
 80038d8:	f000 fedd 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 80038dc:	e1ce      	b.n	8003c7c <HAL_UART_MspInit+0x7ac>
  else if(uartHandle->Instance==USART2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a4d      	ldr	r2, [pc, #308]	; (8003a18 <HAL_UART_MspInit+0x548>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	f040 80a3 	bne.w	8003a30 <HAL_UART_MspInit+0x560>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	4b44      	ldr	r3, [pc, #272]	; (8003a00 <HAL_UART_MspInit+0x530>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a43      	ldr	r2, [pc, #268]	; (8003a00 <HAL_UART_MspInit+0x530>)
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
 80038fa:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <HAL_UART_MspInit+0x530>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <HAL_UART_MspInit+0x530>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a3c      	ldr	r2, [pc, #240]	; (8003a00 <HAL_UART_MspInit+0x530>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	4b3a      	ldr	r3, [pc, #232]	; (8003a00 <HAL_UART_MspInit+0x530>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCU_USART2_TX_Pin|MCU_USART2_RX_Pin;
 8003922:	230c      	movs	r3, #12
 8003924:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003926:	2302      	movs	r3, #2
 8003928:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392e:	2303      	movs	r3, #3
 8003930:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003932:	2307      	movs	r3, #7
 8003934:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003936:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800393a:	4619      	mov	r1, r3
 800393c:	4837      	ldr	r0, [pc, #220]	; (8003a1c <HAL_UART_MspInit+0x54c>)
 800393e:	f001 fa41 	bl	8004dc4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003942:	4b37      	ldr	r3, [pc, #220]	; (8003a20 <HAL_UART_MspInit+0x550>)
 8003944:	4a37      	ldr	r2, [pc, #220]	; (8003a24 <HAL_UART_MspInit+0x554>)
 8003946:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003948:	4b35      	ldr	r3, [pc, #212]	; (8003a20 <HAL_UART_MspInit+0x550>)
 800394a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800394e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003950:	4b33      	ldr	r3, [pc, #204]	; (8003a20 <HAL_UART_MspInit+0x550>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003956:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <HAL_UART_MspInit+0x550>)
 8003958:	2200      	movs	r2, #0
 800395a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800395c:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <HAL_UART_MspInit+0x550>)
 800395e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003962:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003964:	4b2e      	ldr	r3, [pc, #184]	; (8003a20 <HAL_UART_MspInit+0x550>)
 8003966:	2200      	movs	r2, #0
 8003968:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800396a:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <HAL_UART_MspInit+0x550>)
 800396c:	2200      	movs	r2, #0
 800396e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003970:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <HAL_UART_MspInit+0x550>)
 8003972:	2200      	movs	r2, #0
 8003974:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003976:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <HAL_UART_MspInit+0x550>)
 8003978:	2200      	movs	r2, #0
 800397a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800397c:	4b28      	ldr	r3, [pc, #160]	; (8003a20 <HAL_UART_MspInit+0x550>)
 800397e:	2200      	movs	r2, #0
 8003980:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003982:	4827      	ldr	r0, [pc, #156]	; (8003a20 <HAL_UART_MspInit+0x550>)
 8003984:	f000 fea2 	bl	80046cc <HAL_DMA_Init>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_UART_MspInit+0x4c2>
      Error_Handler();
 800398e:	f7ff f85d 	bl	8002a4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <HAL_UART_MspInit+0x550>)
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
 8003998:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <HAL_UART_MspInit+0x550>)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800399e:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <HAL_UART_MspInit+0x558>)
 80039a0:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <HAL_UART_MspInit+0x55c>)
 80039a2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80039a4:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <HAL_UART_MspInit+0x558>)
 80039a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039ac:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <HAL_UART_MspInit+0x558>)
 80039ae:	2240      	movs	r2, #64	; 0x40
 80039b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_UART_MspInit+0x558>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039b8:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <HAL_UART_MspInit+0x558>)
 80039ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039be:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039c0:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <HAL_UART_MspInit+0x558>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039c6:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <HAL_UART_MspInit+0x558>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80039cc:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <HAL_UART_MspInit+0x558>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039d2:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <HAL_UART_MspInit+0x558>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <HAL_UART_MspInit+0x558>)
 80039da:	2200      	movs	r2, #0
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80039de:	4812      	ldr	r0, [pc, #72]	; (8003a28 <HAL_UART_MspInit+0x558>)
 80039e0:	f000 fe74 	bl	80046cc <HAL_DMA_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_UART_MspInit+0x51e>
      Error_Handler();
 80039ea:	f7ff f82f 	bl	8002a4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <HAL_UART_MspInit+0x558>)
 80039f2:	635a      	str	r2, [r3, #52]	; 0x34
 80039f4:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <HAL_UART_MspInit+0x558>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80039fa:	e13f      	b.n	8003c7c <HAL_UART_MspInit+0x7ac>
 80039fc:	40011000 	.word	0x40011000
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40020400 	.word	0x40020400
 8003a08:	20000b68 	.word	0x20000b68
 8003a0c:	40026440 	.word	0x40026440
 8003a10:	20000bc8 	.word	0x20000bc8
 8003a14:	400264b8 	.word	0x400264b8
 8003a18:	40004400 	.word	0x40004400
 8003a1c:	40020000 	.word	0x40020000
 8003a20:	20000c28 	.word	0x20000c28
 8003a24:	40026088 	.word	0x40026088
 8003a28:	20000c88 	.word	0x20000c88
 8003a2c:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a93      	ldr	r2, [pc, #588]	; (8003c84 <HAL_UART_MspInit+0x7b4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	f040 8092 	bne.w	8003b60 <HAL_UART_MspInit+0x690>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	4b91      	ldr	r3, [pc, #580]	; (8003c88 <HAL_UART_MspInit+0x7b8>)
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	4a90      	ldr	r2, [pc, #576]	; (8003c88 <HAL_UART_MspInit+0x7b8>)
 8003a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4c:	4b8e      	ldr	r3, [pc, #568]	; (8003c88 <HAL_UART_MspInit+0x7b8>)
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a58:	2300      	movs	r3, #0
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	4b8a      	ldr	r3, [pc, #552]	; (8003c88 <HAL_UART_MspInit+0x7b8>)
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	4a89      	ldr	r2, [pc, #548]	; (8003c88 <HAL_UART_MspInit+0x7b8>)
 8003a62:	f043 0304 	orr.w	r3, r3, #4
 8003a66:	6313      	str	r3, [r2, #48]	; 0x30
 8003a68:	4b87      	ldr	r3, [pc, #540]	; (8003c88 <HAL_UART_MspInit+0x7b8>)
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MCU_HLBr_TX_Pin|MCU_HLBr_RX_Pin;
 8003a74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a78:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a86:	2307      	movs	r3, #7
 8003a88:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a8e:	4619      	mov	r1, r3
 8003a90:	487e      	ldr	r0, [pc, #504]	; (8003c8c <HAL_UART_MspInit+0x7bc>)
 8003a92:	f001 f997 	bl	8004dc4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003a96:	4b7e      	ldr	r3, [pc, #504]	; (8003c90 <HAL_UART_MspInit+0x7c0>)
 8003a98:	4a7e      	ldr	r2, [pc, #504]	; (8003c94 <HAL_UART_MspInit+0x7c4>)
 8003a9a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003a9c:	4b7c      	ldr	r3, [pc, #496]	; (8003c90 <HAL_UART_MspInit+0x7c0>)
 8003a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003aa2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aa4:	4b7a      	ldr	r3, [pc, #488]	; (8003c90 <HAL_UART_MspInit+0x7c0>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aaa:	4b79      	ldr	r3, [pc, #484]	; (8003c90 <HAL_UART_MspInit+0x7c0>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ab0:	4b77      	ldr	r3, [pc, #476]	; (8003c90 <HAL_UART_MspInit+0x7c0>)
 8003ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ab8:	4b75      	ldr	r3, [pc, #468]	; (8003c90 <HAL_UART_MspInit+0x7c0>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003abe:	4b74      	ldr	r3, [pc, #464]	; (8003c90 <HAL_UART_MspInit+0x7c0>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003ac4:	4b72      	ldr	r3, [pc, #456]	; (8003c90 <HAL_UART_MspInit+0x7c0>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003aca:	4b71      	ldr	r3, [pc, #452]	; (8003c90 <HAL_UART_MspInit+0x7c0>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ad0:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_UART_MspInit+0x7c0>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003ad6:	486e      	ldr	r0, [pc, #440]	; (8003c90 <HAL_UART_MspInit+0x7c0>)
 8003ad8:	f000 fdf8 	bl	80046cc <HAL_DMA_Init>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_UART_MspInit+0x616>
      Error_Handler();
 8003ae2:	f7fe ffb3 	bl	8002a4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a69      	ldr	r2, [pc, #420]	; (8003c90 <HAL_UART_MspInit+0x7c0>)
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38
 8003aec:	4a68      	ldr	r2, [pc, #416]	; (8003c90 <HAL_UART_MspInit+0x7c0>)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003af2:	4b69      	ldr	r3, [pc, #420]	; (8003c98 <HAL_UART_MspInit+0x7c8>)
 8003af4:	4a69      	ldr	r2, [pc, #420]	; (8003c9c <HAL_UART_MspInit+0x7cc>)
 8003af6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003af8:	4b67      	ldr	r3, [pc, #412]	; (8003c98 <HAL_UART_MspInit+0x7c8>)
 8003afa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003afe:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b00:	4b65      	ldr	r3, [pc, #404]	; (8003c98 <HAL_UART_MspInit+0x7c8>)
 8003b02:	2240      	movs	r2, #64	; 0x40
 8003b04:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b06:	4b64      	ldr	r3, [pc, #400]	; (8003c98 <HAL_UART_MspInit+0x7c8>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b0c:	4b62      	ldr	r3, [pc, #392]	; (8003c98 <HAL_UART_MspInit+0x7c8>)
 8003b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b12:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b14:	4b60      	ldr	r3, [pc, #384]	; (8003c98 <HAL_UART_MspInit+0x7c8>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b1a:	4b5f      	ldr	r3, [pc, #380]	; (8003c98 <HAL_UART_MspInit+0x7c8>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003b20:	4b5d      	ldr	r3, [pc, #372]	; (8003c98 <HAL_UART_MspInit+0x7c8>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b26:	4b5c      	ldr	r3, [pc, #368]	; (8003c98 <HAL_UART_MspInit+0x7c8>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b2c:	4b5a      	ldr	r3, [pc, #360]	; (8003c98 <HAL_UART_MspInit+0x7c8>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003b32:	4859      	ldr	r0, [pc, #356]	; (8003c98 <HAL_UART_MspInit+0x7c8>)
 8003b34:	f000 fdca 	bl	80046cc <HAL_DMA_Init>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_UART_MspInit+0x672>
      Error_Handler();
 8003b3e:	f7fe ff85 	bl	8002a4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a54      	ldr	r2, [pc, #336]	; (8003c98 <HAL_UART_MspInit+0x7c8>)
 8003b46:	635a      	str	r2, [r3, #52]	; 0x34
 8003b48:	4a53      	ldr	r2, [pc, #332]	; (8003c98 <HAL_UART_MspInit+0x7c8>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2100      	movs	r1, #0
 8003b52:	2027      	movs	r0, #39	; 0x27
 8003b54:	f000 fd83 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003b58:	2027      	movs	r0, #39	; 0x27
 8003b5a:	f000 fd9c 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 8003b5e:	e08d      	b.n	8003c7c <HAL_UART_MspInit+0x7ac>
  else if(uartHandle->Instance==USART6)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a4e      	ldr	r2, [pc, #312]	; (8003ca0 <HAL_UART_MspInit+0x7d0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	f040 8088 	bne.w	8003c7c <HAL_UART_MspInit+0x7ac>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	4b45      	ldr	r3, [pc, #276]	; (8003c88 <HAL_UART_MspInit+0x7b8>)
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	4a44      	ldr	r2, [pc, #272]	; (8003c88 <HAL_UART_MspInit+0x7b8>)
 8003b76:	f043 0320 	orr.w	r3, r3, #32
 8003b7a:	6453      	str	r3, [r2, #68]	; 0x44
 8003b7c:	4b42      	ldr	r3, [pc, #264]	; (8003c88 <HAL_UART_MspInit+0x7b8>)
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	4b3e      	ldr	r3, [pc, #248]	; (8003c88 <HAL_UART_MspInit+0x7b8>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	4a3d      	ldr	r2, [pc, #244]	; (8003c88 <HAL_UART_MspInit+0x7b8>)
 8003b92:	f043 0304 	orr.w	r3, r3, #4
 8003b96:	6313      	str	r3, [r2, #48]	; 0x30
 8003b98:	4b3b      	ldr	r3, [pc, #236]	; (8003c88 <HAL_UART_MspInit+0x7b8>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MCU_USART6_TX_Pin|MCU_USART6_RX_Pin;
 8003ba4:	23c0      	movs	r3, #192	; 0xc0
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003bb4:	2308      	movs	r3, #8
 8003bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4833      	ldr	r0, [pc, #204]	; (8003c8c <HAL_UART_MspInit+0x7bc>)
 8003bc0:	f001 f900 	bl	8004dc4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003bc4:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <HAL_UART_MspInit+0x7d4>)
 8003bc6:	4a38      	ldr	r2, [pc, #224]	; (8003ca8 <HAL_UART_MspInit+0x7d8>)
 8003bc8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003bca:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <HAL_UART_MspInit+0x7d4>)
 8003bcc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003bd0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bd2:	4b34      	ldr	r3, [pc, #208]	; (8003ca4 <HAL_UART_MspInit+0x7d4>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bd8:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <HAL_UART_MspInit+0x7d4>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bde:	4b31      	ldr	r3, [pc, #196]	; (8003ca4 <HAL_UART_MspInit+0x7d4>)
 8003be0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003be4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003be6:	4b2f      	ldr	r3, [pc, #188]	; (8003ca4 <HAL_UART_MspInit+0x7d4>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bec:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <HAL_UART_MspInit+0x7d4>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003bf2:	4b2c      	ldr	r3, [pc, #176]	; (8003ca4 <HAL_UART_MspInit+0x7d4>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003bf8:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <HAL_UART_MspInit+0x7d4>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bfe:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <HAL_UART_MspInit+0x7d4>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003c04:	4827      	ldr	r0, [pc, #156]	; (8003ca4 <HAL_UART_MspInit+0x7d4>)
 8003c06:	f000 fd61 	bl	80046cc <HAL_DMA_Init>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_UART_MspInit+0x744>
      Error_Handler();
 8003c10:	f7fe ff1c 	bl	8002a4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a23      	ldr	r2, [pc, #140]	; (8003ca4 <HAL_UART_MspInit+0x7d4>)
 8003c18:	639a      	str	r2, [r3, #56]	; 0x38
 8003c1a:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <HAL_UART_MspInit+0x7d4>)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003c20:	4b22      	ldr	r3, [pc, #136]	; (8003cac <HAL_UART_MspInit+0x7dc>)
 8003c22:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <HAL_UART_MspInit+0x7e0>)
 8003c24:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003c26:	4b21      	ldr	r3, [pc, #132]	; (8003cac <HAL_UART_MspInit+0x7dc>)
 8003c28:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003c2c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c2e:	4b1f      	ldr	r3, [pc, #124]	; (8003cac <HAL_UART_MspInit+0x7dc>)
 8003c30:	2240      	movs	r2, #64	; 0x40
 8003c32:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c34:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <HAL_UART_MspInit+0x7dc>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c3a:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <HAL_UART_MspInit+0x7dc>)
 8003c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c40:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c42:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <HAL_UART_MspInit+0x7dc>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c48:	4b18      	ldr	r3, [pc, #96]	; (8003cac <HAL_UART_MspInit+0x7dc>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003c4e:	4b17      	ldr	r3, [pc, #92]	; (8003cac <HAL_UART_MspInit+0x7dc>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c54:	4b15      	ldr	r3, [pc, #84]	; (8003cac <HAL_UART_MspInit+0x7dc>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <HAL_UART_MspInit+0x7dc>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003c60:	4812      	ldr	r0, [pc, #72]	; (8003cac <HAL_UART_MspInit+0x7dc>)
 8003c62:	f000 fd33 	bl	80046cc <HAL_DMA_Init>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_UART_MspInit+0x7a0>
      Error_Handler();
 8003c6c:	f7fe feee 	bl	8002a4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <HAL_UART_MspInit+0x7dc>)
 8003c74:	635a      	str	r2, [r3, #52]	; 0x34
 8003c76:	4a0d      	ldr	r2, [pc, #52]	; (8003cac <HAL_UART_MspInit+0x7dc>)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003c7c:	bf00      	nop
 8003c7e:	3750      	adds	r7, #80	; 0x50
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40004800 	.word	0x40004800
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40020800 	.word	0x40020800
 8003c90:	20000ce8 	.word	0x20000ce8
 8003c94:	40026028 	.word	0x40026028
 8003c98:	20000d48 	.word	0x20000d48
 8003c9c:	40026058 	.word	0x40026058
 8003ca0:	40011400 	.word	0x40011400
 8003ca4:	20000da8 	.word	0x20000da8
 8003ca8:	40026428 	.word	0x40026428
 8003cac:	20000e08 	.word	0x20000e08
 8003cb0:	400264a0 	.word	0x400264a0

08003cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cb8:	480d      	ldr	r0, [pc, #52]	; (8003cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cba:	490e      	ldr	r1, [pc, #56]	; (8003cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cbc:	4a0e      	ldr	r2, [pc, #56]	; (8003cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cc0:	e002      	b.n	8003cc8 <LoopCopyDataInit>

08003cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cc6:	3304      	adds	r3, #4

08003cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ccc:	d3f9      	bcc.n	8003cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cce:	4a0b      	ldr	r2, [pc, #44]	; (8003cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003cd0:	4c0b      	ldr	r4, [pc, #44]	; (8003d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cd4:	e001      	b.n	8003cda <LoopFillZerobss>

08003cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cd8:	3204      	adds	r2, #4

08003cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cdc:	d3fb      	bcc.n	8003cd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cde:	f7ff f869 	bl	8002db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ce2:	f004 ff5f 	bl	8008ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ce6:	f7fe fd2d 	bl	8002744 <main>
  bx  lr    
 8003cea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cf4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003cf8:	0800dcd4 	.word	0x0800dcd4
  ldr r2, =_sbss
 8003cfc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003d00:	20000e7c 	.word	0x20000e7c

08003d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d04:	e7fe      	b.n	8003d04 <ADC_IRQHandler>
	...

08003d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <HAL_Init+0x40>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <HAL_Init+0x40>)
 8003d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_Init+0x40>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <HAL_Init+0x40>)
 8003d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d24:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <HAL_Init+0x40>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <HAL_Init+0x40>)
 8003d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d30:	2003      	movs	r0, #3
 8003d32:	f000 fc89 	bl	8004648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d36:	2000      	movs	r0, #0
 8003d38:	f000 f808 	bl	8003d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d3c:	f7fe fe8c 	bl	8002a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023c00 	.word	0x40023c00

08003d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <HAL_InitTick+0x54>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <HAL_InitTick+0x58>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fca1 	bl	80046b2 <HAL_SYSTICK_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e00e      	b.n	8003d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b0f      	cmp	r3, #15
 8003d7e:	d80a      	bhi.n	8003d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d80:	2200      	movs	r2, #0
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	f000 fc69 	bl	800465e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d8c:	4a06      	ldr	r2, [pc, #24]	; (8003da8 <HAL_InitTick+0x5c>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e000      	b.n	8003d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000010 	.word	0x20000010
 8003da4:	20000018 	.word	0x20000018
 8003da8:	20000014 	.word	0x20000014

08003dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_IncTick+0x20>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_IncTick+0x24>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4413      	add	r3, r2
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <HAL_IncTick+0x24>)
 8003dbe:	6013      	str	r3, [r2, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000018 	.word	0x20000018
 8003dd0:	20000e68 	.word	0x20000e68

08003dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_GetTick+0x14>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000e68 	.word	0x20000e68

08003dec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e033      	b.n	8003e6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fe f9fe 	bl	800220c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d118      	bne.n	8003e5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e32:	f023 0302 	bic.w	r3, r3, #2
 8003e36:	f043 0202 	orr.w	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f93a 	bl	80040b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	f043 0201 	orr.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
 8003e5a:	e001      	b.n	8003e60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x1c>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e105      	b.n	800409c <HAL_ADC_ConfigChannel+0x228>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b09      	cmp	r3, #9
 8003e9e:	d925      	bls.n	8003eec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68d9      	ldr	r1, [r3, #12]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3b1e      	subs	r3, #30
 8003eb6:	2207      	movs	r2, #7
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	43da      	mvns	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	400a      	ands	r2, r1
 8003ec4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68d9      	ldr	r1, [r3, #12]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	4603      	mov	r3, r0
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4403      	add	r3, r0
 8003ede:	3b1e      	subs	r3, #30
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	e022      	b.n	8003f32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6919      	ldr	r1, [r3, #16]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4613      	mov	r3, r2
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4413      	add	r3, r2
 8003f00:	2207      	movs	r2, #7
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43da      	mvns	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6919      	ldr	r1, [r3, #16]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	4618      	mov	r0, r3
 8003f22:	4603      	mov	r3, r0
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	4403      	add	r3, r0
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b06      	cmp	r3, #6
 8003f38:	d824      	bhi.n	8003f84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	3b05      	subs	r3, #5
 8003f4c:	221f      	movs	r2, #31
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43da      	mvns	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	400a      	ands	r2, r1
 8003f5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	4618      	mov	r0, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	3b05      	subs	r3, #5
 8003f76:	fa00 f203 	lsl.w	r2, r0, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	635a      	str	r2, [r3, #52]	; 0x34
 8003f82:	e04c      	b.n	800401e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	d824      	bhi.n	8003fd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3b23      	subs	r3, #35	; 0x23
 8003f9e:	221f      	movs	r2, #31
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43da      	mvns	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	400a      	ands	r2, r1
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	4618      	mov	r0, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3b23      	subs	r3, #35	; 0x23
 8003fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003fd4:	e023      	b.n	800401e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3b41      	subs	r3, #65	; 0x41
 8003fe8:	221f      	movs	r2, #31
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43da      	mvns	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	b29b      	uxth	r3, r3
 8004004:	4618      	mov	r0, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	3b41      	subs	r3, #65	; 0x41
 8004012:	fa00 f203 	lsl.w	r2, r0, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800401e:	4b22      	ldr	r3, [pc, #136]	; (80040a8 <HAL_ADC_ConfigChannel+0x234>)
 8004020:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a21      	ldr	r2, [pc, #132]	; (80040ac <HAL_ADC_ConfigChannel+0x238>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d109      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x1cc>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b12      	cmp	r3, #18
 8004032:	d105      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a19      	ldr	r2, [pc, #100]	; (80040ac <HAL_ADC_ConfigChannel+0x238>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d123      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x21e>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b10      	cmp	r3, #16
 8004050:	d003      	beq.n	800405a <HAL_ADC_ConfigChannel+0x1e6>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b11      	cmp	r3, #17
 8004058:	d11b      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b10      	cmp	r3, #16
 800406c:	d111      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800406e:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <HAL_ADC_ConfigChannel+0x23c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a10      	ldr	r2, [pc, #64]	; (80040b4 <HAL_ADC_ConfigChannel+0x240>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	0c9a      	lsrs	r2, r3, #18
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004084:	e002      	b.n	800408c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	3b01      	subs	r3, #1
 800408a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f9      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	40012300 	.word	0x40012300
 80040ac:	40012000 	.word	0x40012000
 80040b0:	20000010 	.word	0x20000010
 80040b4:	431bde83 	.word	0x431bde83

080040b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040c0:	4b79      	ldr	r3, [pc, #484]	; (80042a8 <ADC_Init+0x1f0>)
 80040c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	431a      	orrs	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6859      	ldr	r1, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	021a      	lsls	r2, r3, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6899      	ldr	r1, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	4a58      	ldr	r2, [pc, #352]	; (80042ac <ADC_Init+0x1f4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800415e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6899      	ldr	r1, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
 8004194:	e00f      	b.n	80041b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0202 	bic.w	r2, r2, #2
 80041c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6899      	ldr	r1, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	7e1b      	ldrb	r3, [r3, #24]
 80041d0:	005a      	lsls	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01b      	beq.n	800421c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004202:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	3b01      	subs	r3, #1
 8004210:	035a      	lsls	r2, r3, #13
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	e007      	b.n	800422c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800422a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	3b01      	subs	r3, #1
 8004248:	051a      	lsls	r2, r3, #20
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6899      	ldr	r1, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800426e:	025a      	lsls	r2, r3, #9
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6899      	ldr	r1, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	029a      	lsls	r2, r3, #10
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	40012300 	.word	0x40012300
 80042ac:	0f000001 	.word	0x0f000001

080042b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e0ed      	b.n	800449e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fe f814 	bl	80022fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042e4:	f7ff fd76 	bl	8003dd4 <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80042ea:	e012      	b.n	8004312 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042ec:	f7ff fd72 	bl	8003dd4 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b0a      	cmp	r3, #10
 80042f8:	d90b      	bls.n	8004312 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2205      	movs	r2, #5
 800430a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e0c5      	b.n	800449e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0e5      	beq.n	80042ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0202 	bic.w	r2, r2, #2
 800432e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004330:	f7ff fd50 	bl	8003dd4 <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004336:	e012      	b.n	800435e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004338:	f7ff fd4c 	bl	8003dd4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b0a      	cmp	r3, #10
 8004344:	d90b      	bls.n	800435e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2205      	movs	r2, #5
 8004356:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e09f      	b.n	800449e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7e1b      	ldrb	r3, [r3, #24]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d108      	bne.n	8004386 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e007      	b.n	8004396 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004394:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	7e5b      	ldrb	r3, [r3, #25]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d108      	bne.n	80043b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e007      	b.n	80043c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	7e9b      	ldrb	r3, [r3, #26]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d108      	bne.n	80043da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0220 	orr.w	r2, r2, #32
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	e007      	b.n	80043ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0220 	bic.w	r2, r2, #32
 80043e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	7edb      	ldrb	r3, [r3, #27]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d108      	bne.n	8004404 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0210 	bic.w	r2, r2, #16
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	e007      	b.n	8004414 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0210 	orr.w	r2, r2, #16
 8004412:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	7f1b      	ldrb	r3, [r3, #28]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d108      	bne.n	800442e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0208 	orr.w	r2, r2, #8
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	e007      	b.n	800443e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0208 	bic.w	r2, r2, #8
 800443c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	7f5b      	ldrb	r3, [r3, #29]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d108      	bne.n	8004458 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0204 	orr.w	r2, r2, #4
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	e007      	b.n	8004468 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0204 	bic.w	r2, r2, #4
 8004466:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	ea42 0103 	orr.w	r1, r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	1e5a      	subs	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <__NVIC_SetPriorityGrouping+0x44>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044c4:	4013      	ands	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044da:	4a04      	ldr	r2, [pc, #16]	; (80044ec <__NVIC_SetPriorityGrouping+0x44>)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	60d3      	str	r3, [r2, #12]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <__NVIC_GetPriorityGrouping+0x18>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	f003 0307 	and.w	r3, r3, #7
}
 80044fe:	4618      	mov	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	2b00      	cmp	r3, #0
 800451c:	db0b      	blt.n	8004536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	f003 021f 	and.w	r2, r3, #31
 8004524:	4907      	ldr	r1, [pc, #28]	; (8004544 <__NVIC_EnableIRQ+0x38>)
 8004526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2001      	movs	r0, #1
 800452e:	fa00 f202 	lsl.w	r2, r0, r2
 8004532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	e000e100 	.word	0xe000e100

08004548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	6039      	str	r1, [r7, #0]
 8004552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004558:	2b00      	cmp	r3, #0
 800455a:	db0a      	blt.n	8004572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	490c      	ldr	r1, [pc, #48]	; (8004594 <__NVIC_SetPriority+0x4c>)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	0112      	lsls	r2, r2, #4
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	440b      	add	r3, r1
 800456c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004570:	e00a      	b.n	8004588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	4908      	ldr	r1, [pc, #32]	; (8004598 <__NVIC_SetPriority+0x50>)
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	3b04      	subs	r3, #4
 8004580:	0112      	lsls	r2, r2, #4
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	440b      	add	r3, r1
 8004586:	761a      	strb	r2, [r3, #24]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	e000e100 	.word	0xe000e100
 8004598:	e000ed00 	.word	0xe000ed00

0800459c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	; 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f1c3 0307 	rsb	r3, r3, #7
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	bf28      	it	cs
 80045ba:	2304      	movcs	r3, #4
 80045bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3304      	adds	r3, #4
 80045c2:	2b06      	cmp	r3, #6
 80045c4:	d902      	bls.n	80045cc <NVIC_EncodePriority+0x30>
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	3b03      	subs	r3, #3
 80045ca:	e000      	b.n	80045ce <NVIC_EncodePriority+0x32>
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d0:	f04f 32ff 	mov.w	r2, #4294967295
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43da      	mvns	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	401a      	ands	r2, r3
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e4:	f04f 31ff 	mov.w	r1, #4294967295
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	fa01 f303 	lsl.w	r3, r1, r3
 80045ee:	43d9      	mvns	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f4:	4313      	orrs	r3, r2
         );
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3724      	adds	r7, #36	; 0x24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3b01      	subs	r3, #1
 8004610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004614:	d301      	bcc.n	800461a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004616:	2301      	movs	r3, #1
 8004618:	e00f      	b.n	800463a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800461a:	4a0a      	ldr	r2, [pc, #40]	; (8004644 <SysTick_Config+0x40>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004622:	210f      	movs	r1, #15
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	f7ff ff8e 	bl	8004548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <SysTick_Config+0x40>)
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <SysTick_Config+0x40>)
 8004634:	2207      	movs	r2, #7
 8004636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	e000e010 	.word	0xe000e010

08004648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff ff29 	bl	80044a8 <__NVIC_SetPriorityGrouping>
}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004670:	f7ff ff3e 	bl	80044f0 <__NVIC_GetPriorityGrouping>
 8004674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f7ff ff8e 	bl	800459c <NVIC_EncodePriority>
 8004680:	4602      	mov	r2, r0
 8004682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ff5d 	bl	8004548 <__NVIC_SetPriority>
}
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	4603      	mov	r3, r0
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff31 	bl	800450c <__NVIC_EnableIRQ>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff ffa2 	bl	8004604 <SysTick_Config>
 80046c0:	4603      	mov	r3, r0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046d8:	f7ff fb7c 	bl	8003dd4 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e099      	b.n	800481c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004708:	e00f      	b.n	800472a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800470a:	f7ff fb63 	bl	8003dd4 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b05      	cmp	r3, #5
 8004716:	d908      	bls.n	800472a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2203      	movs	r2, #3
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e078      	b.n	800481c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e8      	bne.n	800470a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4b38      	ldr	r3, [pc, #224]	; (8004824 <HAL_DMA_Init+0x158>)
 8004744:	4013      	ands	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004756:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800476e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	2b04      	cmp	r3, #4
 8004782:	d107      	bne.n	8004794 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	4313      	orrs	r3, r2
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f023 0307 	bic.w	r3, r3, #7
 80047aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d117      	bne.n	80047ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00e      	beq.n	80047ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fa7b 	bl	8004ccc <DMA_CheckFifoParam>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d008      	beq.n	80047ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2240      	movs	r2, #64	; 0x40
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047ea:	2301      	movs	r3, #1
 80047ec:	e016      	b.n	800481c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fa32 	bl	8004c60 <DMA_CalcBaseAndBitshift>
 80047fc:	4603      	mov	r3, r0
 80047fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004804:	223f      	movs	r2, #63	; 0x3f
 8004806:	409a      	lsls	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	f010803f 	.word	0xf010803f

08004828 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004834:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004836:	f7ff facd 	bl	8003dd4 <HAL_GetTick>
 800483a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d008      	beq.n	800485a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e052      	b.n	8004900 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0216 	bic.w	r2, r2, #22
 8004868:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004878:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	2b00      	cmp	r3, #0
 8004880:	d103      	bne.n	800488a <HAL_DMA_Abort+0x62>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0208 	bic.w	r2, r2, #8
 8004898:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0201 	bic.w	r2, r2, #1
 80048a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048aa:	e013      	b.n	80048d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048ac:	f7ff fa92 	bl	8003dd4 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	d90c      	bls.n	80048d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2203      	movs	r2, #3
 80048c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e015      	b.n	8004900 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e4      	bne.n	80048ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e6:	223f      	movs	r2, #63	; 0x3f
 80048e8:	409a      	lsls	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d004      	beq.n	8004926 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2280      	movs	r2, #128	; 0x80
 8004920:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e00c      	b.n	8004940 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2205      	movs	r2, #5
 800492a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004958:	4b8e      	ldr	r3, [pc, #568]	; (8004b94 <HAL_DMA_IRQHandler+0x248>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a8e      	ldr	r2, [pc, #568]	; (8004b98 <HAL_DMA_IRQHandler+0x24c>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	0a9b      	lsrs	r3, r3, #10
 8004964:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004976:	2208      	movs	r2, #8
 8004978:	409a      	lsls	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d01a      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d013      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0204 	bic.w	r2, r2, #4
 800499e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a4:	2208      	movs	r2, #8
 80049a6:	409a      	lsls	r2, r3
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b0:	f043 0201 	orr.w	r2, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049bc:	2201      	movs	r2, #1
 80049be:	409a      	lsls	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d012      	beq.n	80049ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049da:	2201      	movs	r2, #1
 80049dc:	409a      	lsls	r2, r3
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e6:	f043 0202 	orr.w	r2, r3, #2
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f2:	2204      	movs	r2, #4
 80049f4:	409a      	lsls	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d012      	beq.n	8004a24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00b      	beq.n	8004a24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a10:	2204      	movs	r2, #4
 8004a12:	409a      	lsls	r2, r3
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	f043 0204 	orr.w	r2, r3, #4
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	2210      	movs	r2, #16
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d043      	beq.n	8004abc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d03c      	beq.n	8004abc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	2210      	movs	r2, #16
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d018      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d108      	bne.n	8004a7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d024      	beq.n	8004abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	4798      	blx	r3
 8004a7a:	e01f      	b.n	8004abc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01b      	beq.n	8004abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	4798      	blx	r3
 8004a8c:	e016      	b.n	8004abc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d107      	bne.n	8004aac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0208 	bic.w	r2, r2, #8
 8004aaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 808f 	beq.w	8004bec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 8087 	beq.w	8004bec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b05      	cmp	r3, #5
 8004af4:	d136      	bne.n	8004b64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0216 	bic.w	r2, r2, #22
 8004b04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <HAL_DMA_IRQHandler+0x1da>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0208 	bic.w	r2, r2, #8
 8004b34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3a:	223f      	movs	r2, #63	; 0x3f
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d07e      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
        }
        return;
 8004b62:	e079      	b.n	8004c58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01d      	beq.n	8004bae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10d      	bne.n	8004b9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d031      	beq.n	8004bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
 8004b90:	e02c      	b.n	8004bec <HAL_DMA_IRQHandler+0x2a0>
 8004b92:	bf00      	nop
 8004b94:	20000010 	.word	0x20000010
 8004b98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d023      	beq.n	8004bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	4798      	blx	r3
 8004bac:	e01e      	b.n	8004bec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10f      	bne.n	8004bdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0210 	bic.w	r2, r2, #16
 8004bca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d032      	beq.n	8004c5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d022      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2205      	movs	r2, #5
 8004c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0201 	bic.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d307      	bcc.n	8004c34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f2      	bne.n	8004c18 <HAL_DMA_IRQHandler+0x2cc>
 8004c32:	e000      	b.n	8004c36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	4798      	blx	r3
 8004c56:	e000      	b.n	8004c5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c58:	bf00      	nop
    }
  }
}
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	3b10      	subs	r3, #16
 8004c70:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <DMA_CalcBaseAndBitshift+0x64>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	091b      	lsrs	r3, r3, #4
 8004c78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c7a:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <DMA_CalcBaseAndBitshift+0x68>)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d909      	bls.n	8004ca2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c96:	f023 0303 	bic.w	r3, r3, #3
 8004c9a:	1d1a      	adds	r2, r3, #4
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	659a      	str	r2, [r3, #88]	; 0x58
 8004ca0:	e007      	b.n	8004cb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	aaaaaaab 	.word	0xaaaaaaab
 8004cc8:	0800d8e4 	.word	0x0800d8e4

08004ccc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11f      	bne.n	8004d26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d856      	bhi.n	8004d9a <DMA_CheckFifoParam+0xce>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <DMA_CheckFifoParam+0x28>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d05 	.word	0x08004d05
 8004cf8:	08004d17 	.word	0x08004d17
 8004cfc:	08004d05 	.word	0x08004d05
 8004d00:	08004d9b 	.word	0x08004d9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d046      	beq.n	8004d9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d14:	e043      	b.n	8004d9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d1e:	d140      	bne.n	8004da2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d24:	e03d      	b.n	8004da2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2e:	d121      	bne.n	8004d74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d837      	bhi.n	8004da6 <DMA_CheckFifoParam+0xda>
 8004d36:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <DMA_CheckFifoParam+0x70>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d4d 	.word	0x08004d4d
 8004d40:	08004d53 	.word	0x08004d53
 8004d44:	08004d4d 	.word	0x08004d4d
 8004d48:	08004d65 	.word	0x08004d65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d50:	e030      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d025      	beq.n	8004daa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d62:	e022      	b.n	8004daa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d6c:	d11f      	bne.n	8004dae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d72:	e01c      	b.n	8004dae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d903      	bls.n	8004d82 <DMA_CheckFifoParam+0xb6>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d003      	beq.n	8004d88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d80:	e018      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
      break;
 8004d86:	e015      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00e      	beq.n	8004db2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
      break;
 8004d98:	e00b      	b.n	8004db2 <DMA_CheckFifoParam+0xe6>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e00a      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004d9e:	bf00      	nop
 8004da0:	e008      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004da2:	bf00      	nop
 8004da4:	e006      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004da6:	bf00      	nop
 8004da8:	e004      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004daa:	bf00      	nop
 8004dac:	e002      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004dae:	bf00      	nop
 8004db0:	e000      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004db2:	bf00      	nop
    }
  } 
  
  return status; 
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop

08004dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b089      	sub	sp, #36	; 0x24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	e16b      	b.n	80050b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004de0:	2201      	movs	r2, #1
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4013      	ands	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	f040 815a 	bne.w	80050b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d005      	beq.n	8004e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d130      	bne.n	8004e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	2203      	movs	r2, #3
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	43db      	mvns	r3, r3
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	f003 0201 	and.w	r2, r3, #1
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d017      	beq.n	8004eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	2203      	movs	r2, #3
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d123      	bne.n	8004f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	08da      	lsrs	r2, r3, #3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3208      	adds	r2, #8
 8004ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	220f      	movs	r2, #15
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	43db      	mvns	r3, r3
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	08da      	lsrs	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3208      	adds	r2, #8
 8004f02:	69b9      	ldr	r1, [r7, #24]
 8004f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	2203      	movs	r2, #3
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 0203 	and.w	r2, r3, #3
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80b4 	beq.w	80050b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	4b60      	ldr	r3, [pc, #384]	; (80050d0 <HAL_GPIO_Init+0x30c>)
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	4a5f      	ldr	r2, [pc, #380]	; (80050d0 <HAL_GPIO_Init+0x30c>)
 8004f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f58:	6453      	str	r3, [r2, #68]	; 0x44
 8004f5a:	4b5d      	ldr	r3, [pc, #372]	; (80050d0 <HAL_GPIO_Init+0x30c>)
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f66:	4a5b      	ldr	r2, [pc, #364]	; (80050d4 <HAL_GPIO_Init+0x310>)
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	089b      	lsrs	r3, r3, #2
 8004f6c:	3302      	adds	r3, #2
 8004f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	220f      	movs	r2, #15
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	43db      	mvns	r3, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4013      	ands	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a52      	ldr	r2, [pc, #328]	; (80050d8 <HAL_GPIO_Init+0x314>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d02b      	beq.n	8004fea <HAL_GPIO_Init+0x226>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a51      	ldr	r2, [pc, #324]	; (80050dc <HAL_GPIO_Init+0x318>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d025      	beq.n	8004fe6 <HAL_GPIO_Init+0x222>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a50      	ldr	r2, [pc, #320]	; (80050e0 <HAL_GPIO_Init+0x31c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d01f      	beq.n	8004fe2 <HAL_GPIO_Init+0x21e>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a4f      	ldr	r2, [pc, #316]	; (80050e4 <HAL_GPIO_Init+0x320>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d019      	beq.n	8004fde <HAL_GPIO_Init+0x21a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a4e      	ldr	r2, [pc, #312]	; (80050e8 <HAL_GPIO_Init+0x324>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <HAL_GPIO_Init+0x216>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a4d      	ldr	r2, [pc, #308]	; (80050ec <HAL_GPIO_Init+0x328>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00d      	beq.n	8004fd6 <HAL_GPIO_Init+0x212>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a4c      	ldr	r2, [pc, #304]	; (80050f0 <HAL_GPIO_Init+0x32c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d007      	beq.n	8004fd2 <HAL_GPIO_Init+0x20e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a4b      	ldr	r2, [pc, #300]	; (80050f4 <HAL_GPIO_Init+0x330>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d101      	bne.n	8004fce <HAL_GPIO_Init+0x20a>
 8004fca:	2307      	movs	r3, #7
 8004fcc:	e00e      	b.n	8004fec <HAL_GPIO_Init+0x228>
 8004fce:	2308      	movs	r3, #8
 8004fd0:	e00c      	b.n	8004fec <HAL_GPIO_Init+0x228>
 8004fd2:	2306      	movs	r3, #6
 8004fd4:	e00a      	b.n	8004fec <HAL_GPIO_Init+0x228>
 8004fd6:	2305      	movs	r3, #5
 8004fd8:	e008      	b.n	8004fec <HAL_GPIO_Init+0x228>
 8004fda:	2304      	movs	r3, #4
 8004fdc:	e006      	b.n	8004fec <HAL_GPIO_Init+0x228>
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e004      	b.n	8004fec <HAL_GPIO_Init+0x228>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e002      	b.n	8004fec <HAL_GPIO_Init+0x228>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <HAL_GPIO_Init+0x228>
 8004fea:	2300      	movs	r3, #0
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	f002 0203 	and.w	r2, r2, #3
 8004ff2:	0092      	lsls	r2, r2, #2
 8004ff4:	4093      	lsls	r3, r2
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ffc:	4935      	ldr	r1, [pc, #212]	; (80050d4 <HAL_GPIO_Init+0x310>)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	089b      	lsrs	r3, r3, #2
 8005002:	3302      	adds	r3, #2
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800500a:	4b3b      	ldr	r3, [pc, #236]	; (80050f8 <HAL_GPIO_Init+0x334>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800502e:	4a32      	ldr	r2, [pc, #200]	; (80050f8 <HAL_GPIO_Init+0x334>)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005034:	4b30      	ldr	r3, [pc, #192]	; (80050f8 <HAL_GPIO_Init+0x334>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	43db      	mvns	r3, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4013      	ands	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005058:	4a27      	ldr	r2, [pc, #156]	; (80050f8 <HAL_GPIO_Init+0x334>)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800505e:	4b26      	ldr	r3, [pc, #152]	; (80050f8 <HAL_GPIO_Init+0x334>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	43db      	mvns	r3, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4013      	ands	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005082:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <HAL_GPIO_Init+0x334>)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_GPIO_Init+0x334>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	43db      	mvns	r3, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4013      	ands	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050ac:	4a12      	ldr	r2, [pc, #72]	; (80050f8 <HAL_GPIO_Init+0x334>)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	3301      	adds	r3, #1
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	2b0f      	cmp	r3, #15
 80050bc:	f67f ae90 	bls.w	8004de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	3724      	adds	r7, #36	; 0x24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40013800 	.word	0x40013800
 80050d8:	40020000 	.word	0x40020000
 80050dc:	40020400 	.word	0x40020400
 80050e0:	40020800 	.word	0x40020800
 80050e4:	40020c00 	.word	0x40020c00
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40021400 	.word	0x40021400
 80050f0:	40021800 	.word	0x40021800
 80050f4:	40021c00 	.word	0x40021c00
 80050f8:	40013c00 	.word	0x40013c00

080050fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	807b      	strh	r3, [r7, #2]
 8005108:	4613      	mov	r3, r2
 800510a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800510c:	787b      	ldrb	r3, [r7, #1]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005112:	887a      	ldrh	r2, [r7, #2]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005118:	e003      	b.n	8005122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800511a:	887b      	ldrh	r3, [r7, #2]
 800511c:	041a      	lsls	r2, r3, #16
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	619a      	str	r2, [r3, #24]
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	460b      	mov	r3, r1
 8005138:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005140:	887a      	ldrh	r2, [r7, #2]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4013      	ands	r3, r2
 8005146:	041a      	lsls	r2, r3, #16
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	43d9      	mvns	r1, r3
 800514c:	887b      	ldrh	r3, [r7, #2]
 800514e:	400b      	ands	r3, r1
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	619a      	str	r2, [r3, #24]
}
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e12b      	b.n	80053ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fd fa92 	bl	80026b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2224      	movs	r2, #36	; 0x24
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0201 	bic.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051c8:	f001 fe6a 	bl	8006ea0 <HAL_RCC_GetPCLK1Freq>
 80051cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4a81      	ldr	r2, [pc, #516]	; (80053d8 <HAL_I2C_Init+0x274>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d807      	bhi.n	80051e8 <HAL_I2C_Init+0x84>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a80      	ldr	r2, [pc, #512]	; (80053dc <HAL_I2C_Init+0x278>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	bf94      	ite	ls
 80051e0:	2301      	movls	r3, #1
 80051e2:	2300      	movhi	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	e006      	b.n	80051f6 <HAL_I2C_Init+0x92>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4a7d      	ldr	r2, [pc, #500]	; (80053e0 <HAL_I2C_Init+0x27c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	bf94      	ite	ls
 80051f0:	2301      	movls	r3, #1
 80051f2:	2300      	movhi	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e0e7      	b.n	80053ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a78      	ldr	r2, [pc, #480]	; (80053e4 <HAL_I2C_Init+0x280>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	0c9b      	lsrs	r3, r3, #18
 8005208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	4a6a      	ldr	r2, [pc, #424]	; (80053d8 <HAL_I2C_Init+0x274>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d802      	bhi.n	8005238 <HAL_I2C_Init+0xd4>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	3301      	adds	r3, #1
 8005236:	e009      	b.n	800524c <HAL_I2C_Init+0xe8>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800523e:	fb02 f303 	mul.w	r3, r2, r3
 8005242:	4a69      	ldr	r2, [pc, #420]	; (80053e8 <HAL_I2C_Init+0x284>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	099b      	lsrs	r3, r3, #6
 800524a:	3301      	adds	r3, #1
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	430b      	orrs	r3, r1
 8005252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800525e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	495c      	ldr	r1, [pc, #368]	; (80053d8 <HAL_I2C_Init+0x274>)
 8005268:	428b      	cmp	r3, r1
 800526a:	d819      	bhi.n	80052a0 <HAL_I2C_Init+0x13c>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1e59      	subs	r1, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	fbb1 f3f3 	udiv	r3, r1, r3
 800527a:	1c59      	adds	r1, r3, #1
 800527c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005280:	400b      	ands	r3, r1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_I2C_Init+0x138>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1e59      	subs	r1, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	fbb1 f3f3 	udiv	r3, r1, r3
 8005294:	3301      	adds	r3, #1
 8005296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800529a:	e051      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 800529c:	2304      	movs	r3, #4
 800529e:	e04f      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d111      	bne.n	80052cc <HAL_I2C_Init+0x168>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	1e58      	subs	r0, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6859      	ldr	r1, [r3, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	440b      	add	r3, r1
 80052b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ba:	3301      	adds	r3, #1
 80052bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e012      	b.n	80052f2 <HAL_I2C_Init+0x18e>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1e58      	subs	r0, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6859      	ldr	r1, [r3, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	0099      	lsls	r1, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e2:	3301      	adds	r3, #1
 80052e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_I2C_Init+0x196>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e022      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10e      	bne.n	8005320 <HAL_I2C_Init+0x1bc>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1e58      	subs	r0, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	440b      	add	r3, r1
 8005310:	fbb0 f3f3 	udiv	r3, r0, r3
 8005314:	3301      	adds	r3, #1
 8005316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800531a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531e:	e00f      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1e58      	subs	r0, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6859      	ldr	r1, [r3, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	0099      	lsls	r1, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	fbb0 f3f3 	udiv	r3, r0, r3
 8005336:	3301      	adds	r3, #1
 8005338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	6809      	ldr	r1, [r1, #0]
 8005344:	4313      	orrs	r3, r2
 8005346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69da      	ldr	r2, [r3, #28]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800536e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6911      	ldr	r1, [r2, #16]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68d2      	ldr	r2, [r2, #12]
 800537a:	4311      	orrs	r1, r2
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	430b      	orrs	r3, r1
 8005382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695a      	ldr	r2, [r3, #20]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	000186a0 	.word	0x000186a0
 80053dc:	001e847f 	.word	0x001e847f
 80053e0:	003d08ff 	.word	0x003d08ff
 80053e4:	431bde83 	.word	0x431bde83
 80053e8:	10624dd3 	.word	0x10624dd3

080053ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	461a      	mov	r2, r3
 80053f8:	460b      	mov	r3, r1
 80053fa:	817b      	strh	r3, [r7, #10]
 80053fc:	4613      	mov	r3, r2
 80053fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005400:	f7fe fce8 	bl	8003dd4 <HAL_GetTick>
 8005404:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b20      	cmp	r3, #32
 8005410:	f040 80e0 	bne.w	80055d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	2319      	movs	r3, #25
 800541a:	2201      	movs	r2, #1
 800541c:	4970      	ldr	r1, [pc, #448]	; (80055e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 ff30 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800542a:	2302      	movs	r3, #2
 800542c:	e0d3      	b.n	80055d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_I2C_Master_Transmit+0x50>
 8005438:	2302      	movs	r3, #2
 800543a:	e0cc      	b.n	80055d6 <HAL_I2C_Master_Transmit+0x1ea>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b01      	cmp	r3, #1
 8005450:	d007      	beq.n	8005462 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0201 	orr.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005470:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2221      	movs	r2, #33	; 0x21
 8005476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2210      	movs	r2, #16
 800547e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	893a      	ldrh	r2, [r7, #8]
 8005492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4a50      	ldr	r2, [pc, #320]	; (80055e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80054a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80054a4:	8979      	ldrh	r1, [r7, #10]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	6a3a      	ldr	r2, [r7, #32]
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 fcea 	bl	8005e84 <I2C_MasterRequestWrite>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e08d      	b.n	80055d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80054d0:	e066      	b.n	80055a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	6a39      	ldr	r1, [r7, #32]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 ffaa 	bl	8006430 <I2C_WaitOnTXEFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00d      	beq.n	80054fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d107      	bne.n	80054fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e06b      	b.n	80055d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	781a      	ldrb	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b04      	cmp	r3, #4
 800553a:	d11b      	bne.n	8005574 <HAL_I2C_Master_Transmit+0x188>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005540:	2b00      	cmp	r3, #0
 8005542:	d017      	beq.n	8005574 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	781a      	ldrb	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	6a39      	ldr	r1, [r7, #32]
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 ff9a 	bl	80064b2 <I2C_WaitOnBTFFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00d      	beq.n	80055a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	2b04      	cmp	r3, #4
 800558a:	d107      	bne.n	800559c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e01a      	b.n	80055d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d194      	bne.n	80054d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	e000      	b.n	80055d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80055d4:	2302      	movs	r3, #2
  }
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	00100002 	.word	0x00100002
 80055e4:	ffff0000 	.word	0xffff0000

080055e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	4608      	mov	r0, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	461a      	mov	r2, r3
 80055f6:	4603      	mov	r3, r0
 80055f8:	817b      	strh	r3, [r7, #10]
 80055fa:	460b      	mov	r3, r1
 80055fc:	813b      	strh	r3, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005602:	f7fe fbe7 	bl	8003dd4 <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b20      	cmp	r3, #32
 8005612:	f040 80d9 	bne.w	80057c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2319      	movs	r3, #25
 800561c:	2201      	movs	r2, #1
 800561e:	496d      	ldr	r1, [pc, #436]	; (80057d4 <HAL_I2C_Mem_Write+0x1ec>)
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fe2f 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800562c:	2302      	movs	r3, #2
 800562e:	e0cc      	b.n	80057ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_I2C_Mem_Write+0x56>
 800563a:	2302      	movs	r3, #2
 800563c:	e0c5      	b.n	80057ca <HAL_I2C_Mem_Write+0x1e2>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b01      	cmp	r3, #1
 8005652:	d007      	beq.n	8005664 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005672:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2221      	movs	r2, #33	; 0x21
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2240      	movs	r2, #64	; 0x40
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a3a      	ldr	r2, [r7, #32]
 800568e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4a4d      	ldr	r2, [pc, #308]	; (80057d8 <HAL_I2C_Mem_Write+0x1f0>)
 80056a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056a6:	88f8      	ldrh	r0, [r7, #6]
 80056a8:	893a      	ldrh	r2, [r7, #8]
 80056aa:	8979      	ldrh	r1, [r7, #10]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	9301      	str	r3, [sp, #4]
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	4603      	mov	r3, r0
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fc66 	bl	8005f88 <I2C_RequestMemoryWrite>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d052      	beq.n	8005768 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e081      	b.n	80057ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 feb0 	bl	8006430 <I2C_WaitOnTXEFlagUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00d      	beq.n	80056f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d107      	bne.n	80056ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e06b      	b.n	80057ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	781a      	ldrb	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b04      	cmp	r3, #4
 800572e:	d11b      	bne.n	8005768 <HAL_I2C_Mem_Write+0x180>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005734:	2b00      	cmp	r3, #0
 8005736:	d017      	beq.n	8005768 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	781a      	ldrb	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1aa      	bne.n	80056c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 fe9c 	bl	80064b2 <I2C_WaitOnBTFFlagUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00d      	beq.n	800579c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	2b04      	cmp	r3, #4
 8005786:	d107      	bne.n	8005798 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005796:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e016      	b.n	80057ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	e000      	b.n	80057ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80057c8:	2302      	movs	r3, #2
  }
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	00100002 	.word	0x00100002
 80057d8:	ffff0000 	.word	0xffff0000

080057dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08c      	sub	sp, #48	; 0x30
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	4608      	mov	r0, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	817b      	strh	r3, [r7, #10]
 80057ee:	460b      	mov	r3, r1
 80057f0:	813b      	strh	r3, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057f6:	f7fe faed 	bl	8003dd4 <HAL_GetTick>
 80057fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b20      	cmp	r3, #32
 8005806:	f040 8208 	bne.w	8005c1a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	2319      	movs	r3, #25
 8005810:	2201      	movs	r2, #1
 8005812:	497b      	ldr	r1, [pc, #492]	; (8005a00 <HAL_I2C_Mem_Read+0x224>)
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 fd35 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
 8005822:	e1fb      	b.n	8005c1c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_I2C_Mem_Read+0x56>
 800582e:	2302      	movs	r3, #2
 8005830:	e1f4      	b.n	8005c1c <HAL_I2C_Mem_Read+0x440>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b01      	cmp	r3, #1
 8005846:	d007      	beq.n	8005858 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005866:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2222      	movs	r2, #34	; 0x22
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2240      	movs	r2, #64	; 0x40
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005882:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005888:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4a5b      	ldr	r2, [pc, #364]	; (8005a04 <HAL_I2C_Mem_Read+0x228>)
 8005898:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800589a:	88f8      	ldrh	r0, [r7, #6]
 800589c:	893a      	ldrh	r2, [r7, #8]
 800589e:	8979      	ldrh	r1, [r7, #10]
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	4603      	mov	r3, r0
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 fc02 	bl	80060b4 <I2C_RequestMemoryRead>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e1b0      	b.n	8005c1c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d113      	bne.n	80058ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c2:	2300      	movs	r3, #0
 80058c4:	623b      	str	r3, [r7, #32]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	623b      	str	r3, [r7, #32]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	623b      	str	r3, [r7, #32]
 80058d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	e184      	b.n	8005bf4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d11b      	bne.n	800592a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005900:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	61fb      	str	r3, [r7, #28]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	e164      	b.n	8005bf4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800592e:	2b02      	cmp	r3, #2
 8005930:	d11b      	bne.n	800596a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005940:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005950:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	61bb      	str	r3, [r7, #24]
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	e144      	b.n	8005bf4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005980:	e138      	b.n	8005bf4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005986:	2b03      	cmp	r3, #3
 8005988:	f200 80f1 	bhi.w	8005b6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005990:	2b01      	cmp	r3, #1
 8005992:	d123      	bne.n	80059dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 fdcb 	bl	8006534 <I2C_WaitOnRXNEFlagUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e139      	b.n	8005c1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059da:	e10b      	b.n	8005bf4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d14e      	bne.n	8005a82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	2200      	movs	r2, #0
 80059ec:	4906      	ldr	r1, [pc, #24]	; (8005a08 <HAL_I2C_Mem_Read+0x22c>)
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fc48 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d008      	beq.n	8005a0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e10e      	b.n	8005c1c <HAL_I2C_Mem_Read+0x440>
 80059fe:	bf00      	nop
 8005a00:	00100002 	.word	0x00100002
 8005a04:	ffff0000 	.word	0xffff0000
 8005a08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a80:	e0b8      	b.n	8005bf4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4966      	ldr	r1, [pc, #408]	; (8005c24 <HAL_I2C_Mem_Read+0x448>)
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 fbf9 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0bf      	b.n	8005c1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691a      	ldr	r2, [r3, #16]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	494f      	ldr	r1, [pc, #316]	; (8005c24 <HAL_I2C_Mem_Read+0x448>)
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fbcb 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e091      	b.n	8005c1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b6c:	e042      	b.n	8005bf4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 fcde 	bl	8006534 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e04c      	b.n	8005c1c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d118      	bne.n	8005bf4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f47f aec2 	bne.w	8005982 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	e000      	b.n	8005c1c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c1a:	2302      	movs	r3, #2
  }
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3728      	adds	r7, #40	; 0x28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	00010004 	.word	0x00010004

08005c28 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	607a      	str	r2, [r7, #4]
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	460b      	mov	r3, r1
 8005c36:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005c38:	f7fe f8cc 	bl	8003dd4 <HAL_GetTick>
 8005c3c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	f040 8111 	bne.w	8005e72 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	2319      	movs	r3, #25
 8005c56:	2201      	movs	r2, #1
 8005c58:	4988      	ldr	r1, [pc, #544]	; (8005e7c <HAL_I2C_IsDeviceReady+0x254>)
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fb12 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005c66:	2302      	movs	r3, #2
 8005c68:	e104      	b.n	8005e74 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_I2C_IsDeviceReady+0x50>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e0fd      	b.n	8005e74 <HAL_I2C_IsDeviceReady+0x24c>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d007      	beq.n	8005c9e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0201 	orr.w	r2, r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2224      	movs	r2, #36	; 0x24
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a70      	ldr	r2, [pc, #448]	; (8005e80 <HAL_I2C_IsDeviceReady+0x258>)
 8005cc0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cd0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fad0 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00d      	beq.n	8005d06 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cf8:	d103      	bne.n	8005d02 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e0b6      	b.n	8005e74 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d06:	897b      	ldrh	r3, [r7, #10]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d14:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005d16:	f7fe f85d 	bl	8003dd4 <HAL_GetTick>
 8005d1a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	bf0c      	ite	eq
 8005d2a:	2301      	moveq	r3, #1
 8005d2c:	2300      	movne	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d40:	bf0c      	ite	eq
 8005d42:	2301      	moveq	r3, #1
 8005d44:	2300      	movne	r3, #0
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005d4a:	e025      	b.n	8005d98 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d4c:	f7fe f842 	bl	8003dd4 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d302      	bcc.n	8005d62 <HAL_I2C_IsDeviceReady+0x13a>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d103      	bne.n	8005d6a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	22a0      	movs	r2, #160	; 0xa0
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	bf0c      	ite	eq
 8005d78:	2301      	moveq	r3, #1
 8005d7a:	2300      	movne	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8e:	bf0c      	ite	eq
 8005d90:	2301      	moveq	r3, #1
 8005d92:	2300      	movne	r3, #0
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2ba0      	cmp	r3, #160	; 0xa0
 8005da2:	d005      	beq.n	8005db0 <HAL_I2C_IsDeviceReady+0x188>
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d102      	bne.n	8005db0 <HAL_I2C_IsDeviceReady+0x188>
 8005daa:	7dbb      	ldrb	r3, [r7, #22]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0cd      	beq.n	8005d4c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d129      	bne.n	8005e1a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2319      	movs	r3, #25
 8005df2:	2201      	movs	r2, #1
 8005df4:	4921      	ldr	r1, [pc, #132]	; (8005e7c <HAL_I2C_IsDeviceReady+0x254>)
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 fa44 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e036      	b.n	8005e74 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	e02c      	b.n	8005e74 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e28:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e32:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	2319      	movs	r3, #25
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	490f      	ldr	r1, [pc, #60]	; (8005e7c <HAL_I2C_IsDeviceReady+0x254>)
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 fa20 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e012      	b.n	8005e74 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	3301      	adds	r3, #1
 8005e52:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	f4ff af32 	bcc.w	8005cc2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005e72:	2302      	movs	r3, #2
  }
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3720      	adds	r7, #32
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	00100002 	.word	0x00100002
 8005e80:	ffff0000 	.word	0xffff0000

08005e84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	460b      	mov	r3, r1
 8005e92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d006      	beq.n	8005eae <I2C_MasterRequestWrite+0x2a>
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d003      	beq.n	8005eae <I2C_MasterRequestWrite+0x2a>
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005eac:	d108      	bne.n	8005ec0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e00b      	b.n	8005ed8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	2b12      	cmp	r3, #18
 8005ec6:	d107      	bne.n	8005ed8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ed6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 f9cd 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00d      	beq.n	8005f0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efe:	d103      	bne.n	8005f08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e035      	b.n	8005f78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f14:	d108      	bne.n	8005f28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f16:	897b      	ldrh	r3, [r7, #10]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f24:	611a      	str	r2, [r3, #16]
 8005f26:	e01b      	b.n	8005f60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f28:	897b      	ldrh	r3, [r7, #10]
 8005f2a:	11db      	asrs	r3, r3, #7
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f003 0306 	and.w	r3, r3, #6
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f063 030f 	orn	r3, r3, #15
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	490e      	ldr	r1, [pc, #56]	; (8005f80 <I2C_MasterRequestWrite+0xfc>)
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 f9f3 	bl	8006332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e010      	b.n	8005f78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f56:	897b      	ldrh	r3, [r7, #10]
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	4907      	ldr	r1, [pc, #28]	; (8005f84 <I2C_MasterRequestWrite+0x100>)
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 f9e3 	bl	8006332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	00010008 	.word	0x00010008
 8005f84:	00010002 	.word	0x00010002

08005f88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	4608      	mov	r0, r1
 8005f92:	4611      	mov	r1, r2
 8005f94:	461a      	mov	r2, r3
 8005f96:	4603      	mov	r3, r0
 8005f98:	817b      	strh	r3, [r7, #10]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	813b      	strh	r3, [r7, #8]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f960 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00d      	beq.n	8005fe6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd8:	d103      	bne.n	8005fe2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e05f      	b.n	80060a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fe6:	897b      	ldrh	r3, [r7, #10]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ff4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	6a3a      	ldr	r2, [r7, #32]
 8005ffa:	492d      	ldr	r1, [pc, #180]	; (80060b0 <I2C_RequestMemoryWrite+0x128>)
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f998 	bl	8006332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e04c      	b.n	80060a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006024:	6a39      	ldr	r1, [r7, #32]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fa02 	bl	8006430 <I2C_WaitOnTXEFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00d      	beq.n	800604e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	2b04      	cmp	r3, #4
 8006038:	d107      	bne.n	800604a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006048:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e02b      	b.n	80060a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d105      	bne.n	8006060 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006054:	893b      	ldrh	r3, [r7, #8]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	611a      	str	r2, [r3, #16]
 800605e:	e021      	b.n	80060a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006060:	893b      	ldrh	r3, [r7, #8]
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	b29b      	uxth	r3, r3
 8006066:	b2da      	uxtb	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800606e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006070:	6a39      	ldr	r1, [r7, #32]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 f9dc 	bl	8006430 <I2C_WaitOnTXEFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00d      	beq.n	800609a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	2b04      	cmp	r3, #4
 8006084:	d107      	bne.n	8006096 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006094:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e005      	b.n	80060a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800609a:	893b      	ldrh	r3, [r7, #8]
 800609c:	b2da      	uxtb	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	00010002 	.word	0x00010002

080060b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	4608      	mov	r0, r1
 80060be:	4611      	mov	r1, r2
 80060c0:	461a      	mov	r2, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	817b      	strh	r3, [r7, #10]
 80060c6:	460b      	mov	r3, r1
 80060c8:	813b      	strh	r3, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 f8c2 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00d      	beq.n	8006122 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006114:	d103      	bne.n	800611e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800611c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e0aa      	b.n	8006278 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006122:	897b      	ldrh	r3, [r7, #10]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006130:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	6a3a      	ldr	r2, [r7, #32]
 8006136:	4952      	ldr	r1, [pc, #328]	; (8006280 <I2C_RequestMemoryRead+0x1cc>)
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f8fa 	bl	8006332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e097      	b.n	8006278 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800615e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006160:	6a39      	ldr	r1, [r7, #32]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f964 	bl	8006430 <I2C_WaitOnTXEFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00d      	beq.n	800618a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	2b04      	cmp	r3, #4
 8006174:	d107      	bne.n	8006186 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006184:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e076      	b.n	8006278 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d105      	bne.n	800619c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006190:	893b      	ldrh	r3, [r7, #8]
 8006192:	b2da      	uxtb	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	611a      	str	r2, [r3, #16]
 800619a:	e021      	b.n	80061e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800619c:	893b      	ldrh	r3, [r7, #8]
 800619e:	0a1b      	lsrs	r3, r3, #8
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ac:	6a39      	ldr	r1, [r7, #32]
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 f93e 	bl	8006430 <I2C_WaitOnTXEFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00d      	beq.n	80061d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d107      	bne.n	80061d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e050      	b.n	8006278 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061d6:	893b      	ldrh	r3, [r7, #8]
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e2:	6a39      	ldr	r1, [r7, #32]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f923 	bl	8006430 <I2C_WaitOnTXEFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00d      	beq.n	800620c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d107      	bne.n	8006208 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006206:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e035      	b.n	8006278 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800621a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2200      	movs	r2, #0
 8006224:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 f82b 	bl	8006284 <I2C_WaitOnFlagUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00d      	beq.n	8006250 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006242:	d103      	bne.n	800624c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800624a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e013      	b.n	8006278 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006250:	897b      	ldrh	r3, [r7, #10]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f043 0301 	orr.w	r3, r3, #1
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	6a3a      	ldr	r2, [r7, #32]
 8006264:	4906      	ldr	r1, [pc, #24]	; (8006280 <I2C_RequestMemoryRead+0x1cc>)
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 f863 	bl	8006332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e000      	b.n	8006278 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	00010002 	.word	0x00010002

08006284 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	603b      	str	r3, [r7, #0]
 8006290:	4613      	mov	r3, r2
 8006292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006294:	e025      	b.n	80062e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629c:	d021      	beq.n	80062e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800629e:	f7fd fd99 	bl	8003dd4 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d302      	bcc.n	80062b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d116      	bne.n	80062e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2220      	movs	r2, #32
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	f043 0220 	orr.w	r2, r3, #32
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e023      	b.n	800632a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	0c1b      	lsrs	r3, r3, #16
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d10d      	bne.n	8006308 <I2C_WaitOnFlagUntilTimeout+0x84>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	43da      	mvns	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4013      	ands	r3, r2
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	bf0c      	ite	eq
 80062fe:	2301      	moveq	r3, #1
 8006300:	2300      	movne	r3, #0
 8006302:	b2db      	uxtb	r3, r3
 8006304:	461a      	mov	r2, r3
 8006306:	e00c      	b.n	8006322 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	43da      	mvns	r2, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4013      	ands	r3, r2
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	bf0c      	ite	eq
 800631a:	2301      	moveq	r3, #1
 800631c:	2300      	movne	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	429a      	cmp	r2, r3
 8006326:	d0b6      	beq.n	8006296 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
 800633e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006340:	e051      	b.n	80063e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800634c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006350:	d123      	bne.n	800639a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006360:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800636a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f043 0204 	orr.w	r2, r3, #4
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e046      	b.n	8006428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d021      	beq.n	80063e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a2:	f7fd fd17 	bl	8003dd4 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d302      	bcc.n	80063b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d116      	bne.n	80063e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	f043 0220 	orr.w	r2, r3, #32
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e020      	b.n	8006428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	0c1b      	lsrs	r3, r3, #16
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d10c      	bne.n	800640a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	43da      	mvns	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	4013      	ands	r3, r2
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bf14      	ite	ne
 8006402:	2301      	movne	r3, #1
 8006404:	2300      	moveq	r3, #0
 8006406:	b2db      	uxtb	r3, r3
 8006408:	e00b      	b.n	8006422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	43da      	mvns	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4013      	ands	r3, r2
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	bf14      	ite	ne
 800641c:	2301      	movne	r3, #1
 800641e:	2300      	moveq	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d18d      	bne.n	8006342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800643c:	e02d      	b.n	800649a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 f8ce 	bl	80065e0 <I2C_IsAcknowledgeFailed>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e02d      	b.n	80064aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d021      	beq.n	800649a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006456:	f7fd fcbd 	bl	8003dd4 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	429a      	cmp	r2, r3
 8006464:	d302      	bcc.n	800646c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d116      	bne.n	800649a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2220      	movs	r2, #32
 8006476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	f043 0220 	orr.w	r2, r3, #32
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e007      	b.n	80064aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a4:	2b80      	cmp	r3, #128	; 0x80
 80064a6:	d1ca      	bne.n	800643e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	60f8      	str	r0, [r7, #12]
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064be:	e02d      	b.n	800651c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f88d 	bl	80065e0 <I2C_IsAcknowledgeFailed>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e02d      	b.n	800652c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d6:	d021      	beq.n	800651c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d8:	f7fd fc7c 	bl	8003dd4 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d302      	bcc.n	80064ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d116      	bne.n	800651c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	f043 0220 	orr.w	r2, r3, #32
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e007      	b.n	800652c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b04      	cmp	r3, #4
 8006528:	d1ca      	bne.n	80064c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006540:	e042      	b.n	80065c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	f003 0310 	and.w	r3, r3, #16
 800654c:	2b10      	cmp	r3, #16
 800654e:	d119      	bne.n	8006584 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0210 	mvn.w	r2, #16
 8006558:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e029      	b.n	80065d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006584:	f7fd fc26 	bl	8003dd4 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	429a      	cmp	r2, r3
 8006592:	d302      	bcc.n	800659a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d116      	bne.n	80065c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	f043 0220 	orr.w	r2, r3, #32
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e007      	b.n	80065d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d1b5      	bne.n	8006542 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f6:	d11b      	bne.n	8006630 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006600:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	f043 0204 	orr.w	r2, r3, #4
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e267      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d075      	beq.n	800674a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800665e:	4b88      	ldr	r3, [pc, #544]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 030c 	and.w	r3, r3, #12
 8006666:	2b04      	cmp	r3, #4
 8006668:	d00c      	beq.n	8006684 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800666a:	4b85      	ldr	r3, [pc, #532]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006672:	2b08      	cmp	r3, #8
 8006674:	d112      	bne.n	800669c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006676:	4b82      	ldr	r3, [pc, #520]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800667e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006682:	d10b      	bne.n	800669c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006684:	4b7e      	ldr	r3, [pc, #504]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d05b      	beq.n	8006748 <HAL_RCC_OscConfig+0x108>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d157      	bne.n	8006748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e242      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066a4:	d106      	bne.n	80066b4 <HAL_RCC_OscConfig+0x74>
 80066a6:	4b76      	ldr	r3, [pc, #472]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a75      	ldr	r2, [pc, #468]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80066ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	e01d      	b.n	80066f0 <HAL_RCC_OscConfig+0xb0>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066bc:	d10c      	bne.n	80066d8 <HAL_RCC_OscConfig+0x98>
 80066be:	4b70      	ldr	r3, [pc, #448]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a6f      	ldr	r2, [pc, #444]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80066c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	4b6d      	ldr	r3, [pc, #436]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a6c      	ldr	r2, [pc, #432]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80066d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	e00b      	b.n	80066f0 <HAL_RCC_OscConfig+0xb0>
 80066d8:	4b69      	ldr	r3, [pc, #420]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a68      	ldr	r2, [pc, #416]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80066de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	4b66      	ldr	r3, [pc, #408]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a65      	ldr	r2, [pc, #404]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80066ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d013      	beq.n	8006720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f8:	f7fd fb6c 	bl	8003dd4 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006700:	f7fd fb68 	bl	8003dd4 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b64      	cmp	r3, #100	; 0x64
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e207      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006712:	4b5b      	ldr	r3, [pc, #364]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0f0      	beq.n	8006700 <HAL_RCC_OscConfig+0xc0>
 800671e:	e014      	b.n	800674a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006720:	f7fd fb58 	bl	8003dd4 <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006728:	f7fd fb54 	bl	8003dd4 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b64      	cmp	r3, #100	; 0x64
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e1f3      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800673a:	4b51      	ldr	r3, [pc, #324]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1f0      	bne.n	8006728 <HAL_RCC_OscConfig+0xe8>
 8006746:	e000      	b.n	800674a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d063      	beq.n	800681e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006756:	4b4a      	ldr	r3, [pc, #296]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 030c 	and.w	r3, r3, #12
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00b      	beq.n	800677a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006762:	4b47      	ldr	r3, [pc, #284]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800676a:	2b08      	cmp	r3, #8
 800676c:	d11c      	bne.n	80067a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800676e:	4b44      	ldr	r3, [pc, #272]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d116      	bne.n	80067a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800677a:	4b41      	ldr	r3, [pc, #260]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <HAL_RCC_OscConfig+0x152>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d001      	beq.n	8006792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e1c7      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006792:	4b3b      	ldr	r3, [pc, #236]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	4937      	ldr	r1, [pc, #220]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067a6:	e03a      	b.n	800681e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d020      	beq.n	80067f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067b0:	4b34      	ldr	r3, [pc, #208]	; (8006884 <HAL_RCC_OscConfig+0x244>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b6:	f7fd fb0d 	bl	8003dd4 <HAL_GetTick>
 80067ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067be:	f7fd fb09 	bl	8003dd4 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e1a8      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d0:	4b2b      	ldr	r3, [pc, #172]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0f0      	beq.n	80067be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067dc:	4b28      	ldr	r3, [pc, #160]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	4925      	ldr	r1, [pc, #148]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	600b      	str	r3, [r1, #0]
 80067f0:	e015      	b.n	800681e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067f2:	4b24      	ldr	r3, [pc, #144]	; (8006884 <HAL_RCC_OscConfig+0x244>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f8:	f7fd faec 	bl	8003dd4 <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006800:	f7fd fae8 	bl	8003dd4 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e187      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006812:	4b1b      	ldr	r3, [pc, #108]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1f0      	bne.n	8006800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0308 	and.w	r3, r3, #8
 8006826:	2b00      	cmp	r3, #0
 8006828:	d036      	beq.n	8006898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d016      	beq.n	8006860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006832:	4b15      	ldr	r3, [pc, #84]	; (8006888 <HAL_RCC_OscConfig+0x248>)
 8006834:	2201      	movs	r2, #1
 8006836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006838:	f7fd facc 	bl	8003dd4 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006840:	f7fd fac8 	bl	8003dd4 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e167      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006852:	4b0b      	ldr	r3, [pc, #44]	; (8006880 <HAL_RCC_OscConfig+0x240>)
 8006854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0f0      	beq.n	8006840 <HAL_RCC_OscConfig+0x200>
 800685e:	e01b      	b.n	8006898 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006860:	4b09      	ldr	r3, [pc, #36]	; (8006888 <HAL_RCC_OscConfig+0x248>)
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006866:	f7fd fab5 	bl	8003dd4 <HAL_GetTick>
 800686a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800686c:	e00e      	b.n	800688c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800686e:	f7fd fab1 	bl	8003dd4 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d907      	bls.n	800688c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e150      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
 8006880:	40023800 	.word	0x40023800
 8006884:	42470000 	.word	0x42470000
 8006888:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800688c:	4b88      	ldr	r3, [pc, #544]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 800688e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1ea      	bne.n	800686e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 8097 	beq.w	80069d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068a6:	2300      	movs	r3, #0
 80068a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068aa:	4b81      	ldr	r3, [pc, #516]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10f      	bne.n	80068d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b6:	2300      	movs	r3, #0
 80068b8:	60bb      	str	r3, [r7, #8]
 80068ba:	4b7d      	ldr	r3, [pc, #500]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	4a7c      	ldr	r2, [pc, #496]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 80068c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c4:	6413      	str	r3, [r2, #64]	; 0x40
 80068c6:	4b7a      	ldr	r3, [pc, #488]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ce:	60bb      	str	r3, [r7, #8]
 80068d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068d2:	2301      	movs	r3, #1
 80068d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068d6:	4b77      	ldr	r3, [pc, #476]	; (8006ab4 <HAL_RCC_OscConfig+0x474>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d118      	bne.n	8006914 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068e2:	4b74      	ldr	r3, [pc, #464]	; (8006ab4 <HAL_RCC_OscConfig+0x474>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a73      	ldr	r2, [pc, #460]	; (8006ab4 <HAL_RCC_OscConfig+0x474>)
 80068e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068ee:	f7fd fa71 	bl	8003dd4 <HAL_GetTick>
 80068f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f4:	e008      	b.n	8006908 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068f6:	f7fd fa6d 	bl	8003dd4 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e10c      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006908:	4b6a      	ldr	r3, [pc, #424]	; (8006ab4 <HAL_RCC_OscConfig+0x474>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0f0      	beq.n	80068f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d106      	bne.n	800692a <HAL_RCC_OscConfig+0x2ea>
 800691c:	4b64      	ldr	r3, [pc, #400]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 800691e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006920:	4a63      	ldr	r2, [pc, #396]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 8006922:	f043 0301 	orr.w	r3, r3, #1
 8006926:	6713      	str	r3, [r2, #112]	; 0x70
 8006928:	e01c      	b.n	8006964 <HAL_RCC_OscConfig+0x324>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	2b05      	cmp	r3, #5
 8006930:	d10c      	bne.n	800694c <HAL_RCC_OscConfig+0x30c>
 8006932:	4b5f      	ldr	r3, [pc, #380]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 8006934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006936:	4a5e      	ldr	r2, [pc, #376]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 8006938:	f043 0304 	orr.w	r3, r3, #4
 800693c:	6713      	str	r3, [r2, #112]	; 0x70
 800693e:	4b5c      	ldr	r3, [pc, #368]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 8006940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006942:	4a5b      	ldr	r2, [pc, #364]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 8006944:	f043 0301 	orr.w	r3, r3, #1
 8006948:	6713      	str	r3, [r2, #112]	; 0x70
 800694a:	e00b      	b.n	8006964 <HAL_RCC_OscConfig+0x324>
 800694c:	4b58      	ldr	r3, [pc, #352]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 800694e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006950:	4a57      	ldr	r2, [pc, #348]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 8006952:	f023 0301 	bic.w	r3, r3, #1
 8006956:	6713      	str	r3, [r2, #112]	; 0x70
 8006958:	4b55      	ldr	r3, [pc, #340]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 800695a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695c:	4a54      	ldr	r2, [pc, #336]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 800695e:	f023 0304 	bic.w	r3, r3, #4
 8006962:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d015      	beq.n	8006998 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696c:	f7fd fa32 	bl	8003dd4 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006972:	e00a      	b.n	800698a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006974:	f7fd fa2e 	bl	8003dd4 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006982:	4293      	cmp	r3, r2
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e0cb      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800698a:	4b49      	ldr	r3, [pc, #292]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d0ee      	beq.n	8006974 <HAL_RCC_OscConfig+0x334>
 8006996:	e014      	b.n	80069c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006998:	f7fd fa1c 	bl	8003dd4 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800699e:	e00a      	b.n	80069b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069a0:	f7fd fa18 	bl	8003dd4 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e0b5      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069b6:	4b3e      	ldr	r3, [pc, #248]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 80069b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1ee      	bne.n	80069a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d105      	bne.n	80069d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069c8:	4b39      	ldr	r3, [pc, #228]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	4a38      	ldr	r2, [pc, #224]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 80069ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 80a1 	beq.w	8006b20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069de:	4b34      	ldr	r3, [pc, #208]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 030c 	and.w	r3, r3, #12
 80069e6:	2b08      	cmp	r3, #8
 80069e8:	d05c      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d141      	bne.n	8006a76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069f2:	4b31      	ldr	r3, [pc, #196]	; (8006ab8 <HAL_RCC_OscConfig+0x478>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f8:	f7fd f9ec 	bl	8003dd4 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a00:	f7fd f9e8 	bl	8003dd4 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e087      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a12:	4b27      	ldr	r3, [pc, #156]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f0      	bne.n	8006a00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69da      	ldr	r2, [r3, #28]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	019b      	lsls	r3, r3, #6
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	3b01      	subs	r3, #1
 8006a38:	041b      	lsls	r3, r3, #16
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	061b      	lsls	r3, r3, #24
 8006a42:	491b      	ldr	r1, [pc, #108]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a48:	4b1b      	ldr	r3, [pc, #108]	; (8006ab8 <HAL_RCC_OscConfig+0x478>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4e:	f7fd f9c1 	bl	8003dd4 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a56:	f7fd f9bd 	bl	8003dd4 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e05c      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a68:	4b11      	ldr	r3, [pc, #68]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f0      	beq.n	8006a56 <HAL_RCC_OscConfig+0x416>
 8006a74:	e054      	b.n	8006b20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a76:	4b10      	ldr	r3, [pc, #64]	; (8006ab8 <HAL_RCC_OscConfig+0x478>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7c:	f7fd f9aa 	bl	8003dd4 <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a84:	f7fd f9a6 	bl	8003dd4 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e045      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a96:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <HAL_RCC_OscConfig+0x470>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1f0      	bne.n	8006a84 <HAL_RCC_OscConfig+0x444>
 8006aa2:	e03d      	b.n	8006b20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d107      	bne.n	8006abc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e038      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
 8006ab0:	40023800 	.word	0x40023800
 8006ab4:	40007000 	.word	0x40007000
 8006ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006abc:	4b1b      	ldr	r3, [pc, #108]	; (8006b2c <HAL_RCC_OscConfig+0x4ec>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d028      	beq.n	8006b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d121      	bne.n	8006b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d11a      	bne.n	8006b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006aec:	4013      	ands	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d111      	bne.n	8006b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	3b01      	subs	r3, #1
 8006b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d107      	bne.n	8006b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d001      	beq.n	8006b20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e000      	b.n	8006b22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40023800 	.word	0x40023800

08006b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e0cc      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b44:	4b68      	ldr	r3, [pc, #416]	; (8006ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d90c      	bls.n	8006b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b52:	4b65      	ldr	r3, [pc, #404]	; (8006ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b5a:	4b63      	ldr	r3, [pc, #396]	; (8006ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0307 	and.w	r3, r3, #7
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d001      	beq.n	8006b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e0b8      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d020      	beq.n	8006bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b84:	4b59      	ldr	r3, [pc, #356]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	4a58      	ldr	r2, [pc, #352]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0308 	and.w	r3, r3, #8
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d005      	beq.n	8006ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b9c:	4b53      	ldr	r3, [pc, #332]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	4a52      	ldr	r2, [pc, #328]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ba8:	4b50      	ldr	r3, [pc, #320]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	494d      	ldr	r1, [pc, #308]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d044      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d107      	bne.n	8006bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bce:	4b47      	ldr	r3, [pc, #284]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d119      	bne.n	8006c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e07f      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d003      	beq.n	8006bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d107      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bee:	4b3f      	ldr	r3, [pc, #252]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d109      	bne.n	8006c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e06f      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bfe:	4b3b      	ldr	r3, [pc, #236]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e067      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c0e:	4b37      	ldr	r3, [pc, #220]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f023 0203 	bic.w	r2, r3, #3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	4934      	ldr	r1, [pc, #208]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c20:	f7fd f8d8 	bl	8003dd4 <HAL_GetTick>
 8006c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c26:	e00a      	b.n	8006c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c28:	f7fd f8d4 	bl	8003dd4 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e04f      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c3e:	4b2b      	ldr	r3, [pc, #172]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 020c 	and.w	r2, r3, #12
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d1eb      	bne.n	8006c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c50:	4b25      	ldr	r3, [pc, #148]	; (8006ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0307 	and.w	r3, r3, #7
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d20c      	bcs.n	8006c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c5e:	4b22      	ldr	r3, [pc, #136]	; (8006ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c66:	4b20      	ldr	r3, [pc, #128]	; (8006ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d001      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e032      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c84:	4b19      	ldr	r3, [pc, #100]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	4916      	ldr	r1, [pc, #88]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d009      	beq.n	8006cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ca2:	4b12      	ldr	r3, [pc, #72]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	490e      	ldr	r1, [pc, #56]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cb6:	f000 f821 	bl	8006cfc <HAL_RCC_GetSysClockFreq>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <HAL_RCC_ClockConfig+0x1bc>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	091b      	lsrs	r3, r3, #4
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	490a      	ldr	r1, [pc, #40]	; (8006cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8006cc8:	5ccb      	ldrb	r3, [r1, r3]
 8006cca:	fa22 f303 	lsr.w	r3, r2, r3
 8006cce:	4a09      	ldr	r2, [pc, #36]	; (8006cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cd2:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fd f838 	bl	8003d4c <HAL_InitTick>

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	40023c00 	.word	0x40023c00
 8006cec:	40023800 	.word	0x40023800
 8006cf0:	0800d8cc 	.word	0x0800d8cc
 8006cf4:	20000010 	.word	0x20000010
 8006cf8:	20000014 	.word	0x20000014

08006cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d00:	b090      	sub	sp, #64	; 0x40
 8006d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
 8006d08:	2300      	movs	r3, #0
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d14:	4b59      	ldr	r3, [pc, #356]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f003 030c 	and.w	r3, r3, #12
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d00d      	beq.n	8006d3c <HAL_RCC_GetSysClockFreq+0x40>
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	f200 80a1 	bhi.w	8006e68 <HAL_RCC_GetSysClockFreq+0x16c>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <HAL_RCC_GetSysClockFreq+0x34>
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d003      	beq.n	8006d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d2e:	e09b      	b.n	8006e68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d30:	4b53      	ldr	r3, [pc, #332]	; (8006e80 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006d34:	e09b      	b.n	8006e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d36:	4b53      	ldr	r3, [pc, #332]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d3a:	e098      	b.n	8006e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d3c:	4b4f      	ldr	r3, [pc, #316]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d46:	4b4d      	ldr	r3, [pc, #308]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d028      	beq.n	8006da4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d52:	4b4a      	ldr	r3, [pc, #296]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	099b      	lsrs	r3, r3, #6
 8006d58:	2200      	movs	r2, #0
 8006d5a:	623b      	str	r3, [r7, #32]
 8006d5c:	627a      	str	r2, [r7, #36]	; 0x24
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006d64:	2100      	movs	r1, #0
 8006d66:	4b47      	ldr	r3, [pc, #284]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d68:	fb03 f201 	mul.w	r2, r3, r1
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	fb00 f303 	mul.w	r3, r0, r3
 8006d72:	4413      	add	r3, r2
 8006d74:	4a43      	ldr	r2, [pc, #268]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d76:	fba0 1202 	umull	r1, r2, r0, r2
 8006d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d7c:	460a      	mov	r2, r1
 8006d7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d82:	4413      	add	r3, r2
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d88:	2200      	movs	r2, #0
 8006d8a:	61bb      	str	r3, [r7, #24]
 8006d8c:	61fa      	str	r2, [r7, #28]
 8006d8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006d96:	f7f9 ff07 	bl	8000ba8 <__aeabi_uldivmod>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4613      	mov	r3, r2
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da2:	e053      	b.n	8006e4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006da4:	4b35      	ldr	r3, [pc, #212]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	099b      	lsrs	r3, r3, #6
 8006daa:	2200      	movs	r2, #0
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	617a      	str	r2, [r7, #20]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006db6:	f04f 0b00 	mov.w	fp, #0
 8006dba:	4652      	mov	r2, sl
 8006dbc:	465b      	mov	r3, fp
 8006dbe:	f04f 0000 	mov.w	r0, #0
 8006dc2:	f04f 0100 	mov.w	r1, #0
 8006dc6:	0159      	lsls	r1, r3, #5
 8006dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dcc:	0150      	lsls	r0, r2, #5
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	ebb2 080a 	subs.w	r8, r2, sl
 8006dd6:	eb63 090b 	sbc.w	r9, r3, fp
 8006dda:	f04f 0200 	mov.w	r2, #0
 8006dde:	f04f 0300 	mov.w	r3, #0
 8006de2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006de6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006dea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006dee:	ebb2 0408 	subs.w	r4, r2, r8
 8006df2:	eb63 0509 	sbc.w	r5, r3, r9
 8006df6:	f04f 0200 	mov.w	r2, #0
 8006dfa:	f04f 0300 	mov.w	r3, #0
 8006dfe:	00eb      	lsls	r3, r5, #3
 8006e00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e04:	00e2      	lsls	r2, r4, #3
 8006e06:	4614      	mov	r4, r2
 8006e08:	461d      	mov	r5, r3
 8006e0a:	eb14 030a 	adds.w	r3, r4, sl
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	eb45 030b 	adc.w	r3, r5, fp
 8006e14:	607b      	str	r3, [r7, #4]
 8006e16:	f04f 0200 	mov.w	r2, #0
 8006e1a:	f04f 0300 	mov.w	r3, #0
 8006e1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e22:	4629      	mov	r1, r5
 8006e24:	028b      	lsls	r3, r1, #10
 8006e26:	4621      	mov	r1, r4
 8006e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	028a      	lsls	r2, r1, #10
 8006e30:	4610      	mov	r0, r2
 8006e32:	4619      	mov	r1, r3
 8006e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e36:	2200      	movs	r2, #0
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	60fa      	str	r2, [r7, #12]
 8006e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e40:	f7f9 feb2 	bl	8000ba8 <__aeabi_uldivmod>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4613      	mov	r3, r2
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e4c:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	0c1b      	lsrs	r3, r3, #16
 8006e52:	f003 0303 	and.w	r3, r3, #3
 8006e56:	3301      	adds	r3, #1
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006e5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e66:	e002      	b.n	8006e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3740      	adds	r7, #64	; 0x40
 8006e74:	46bd      	mov	sp, r7
 8006e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	00f42400 	.word	0x00f42400
 8006e84:	017d7840 	.word	0x017d7840

08006e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e8c:	4b03      	ldr	r3, [pc, #12]	; (8006e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	20000010 	.word	0x20000010

08006ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ea4:	f7ff fff0 	bl	8006e88 <HAL_RCC_GetHCLKFreq>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	0a9b      	lsrs	r3, r3, #10
 8006eb0:	f003 0307 	and.w	r3, r3, #7
 8006eb4:	4903      	ldr	r1, [pc, #12]	; (8006ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eb6:	5ccb      	ldrb	r3, [r1, r3]
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	0800d8dc 	.word	0x0800d8dc

08006ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ecc:	f7ff ffdc 	bl	8006e88 <HAL_RCC_GetHCLKFreq>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	0b5b      	lsrs	r3, r3, #13
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	4903      	ldr	r1, [pc, #12]	; (8006eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ede:	5ccb      	ldrb	r3, [r1, r3]
 8006ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40023800 	.word	0x40023800
 8006eec:	0800d8dc 	.word	0x0800d8dc

08006ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e041      	b.n	8006f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d106      	bne.n	8006f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fc f96a 	bl	80031f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4610      	mov	r0, r2
 8006f30:	f000 fa7a 	bl	8007428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d001      	beq.n	8006fa8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e046      	b.n	8007036 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a23      	ldr	r2, [pc, #140]	; (8007044 <HAL_TIM_Base_Start+0xb4>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d022      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc2:	d01d      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a1f      	ldr	r2, [pc, #124]	; (8007048 <HAL_TIM_Base_Start+0xb8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d018      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a1e      	ldr	r2, [pc, #120]	; (800704c <HAL_TIM_Base_Start+0xbc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d013      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a1c      	ldr	r2, [pc, #112]	; (8007050 <HAL_TIM_Base_Start+0xc0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00e      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a1b      	ldr	r2, [pc, #108]	; (8007054 <HAL_TIM_Base_Start+0xc4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d009      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a19      	ldr	r2, [pc, #100]	; (8007058 <HAL_TIM_Base_Start+0xc8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d004      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a18      	ldr	r2, [pc, #96]	; (800705c <HAL_TIM_Base_Start+0xcc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d111      	bne.n	8007024 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b06      	cmp	r3, #6
 8007010:	d010      	beq.n	8007034 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f042 0201 	orr.w	r2, r2, #1
 8007020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007022:	e007      	b.n	8007034 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40010000 	.word	0x40010000
 8007048:	40000400 	.word	0x40000400
 800704c:	40000800 	.word	0x40000800
 8007050:	40000c00 	.word	0x40000c00
 8007054:	40010400 	.word	0x40010400
 8007058:	40014000 	.word	0x40014000
 800705c:	40001800 	.word	0x40001800

08007060 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e041      	b.n	80070f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d106      	bne.n	800708c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f839 	bl	80070fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3304      	adds	r3, #4
 800709c:	4619      	mov	r1, r3
 800709e:	4610      	mov	r0, r2
 80070a0:	f000 f9c2 	bl	8007428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800712e:	2302      	movs	r3, #2
 8007130:	e0ae      	b.n	8007290 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b0c      	cmp	r3, #12
 800713e:	f200 809f 	bhi.w	8007280 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007142:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007148:	0800717d 	.word	0x0800717d
 800714c:	08007281 	.word	0x08007281
 8007150:	08007281 	.word	0x08007281
 8007154:	08007281 	.word	0x08007281
 8007158:	080071bd 	.word	0x080071bd
 800715c:	08007281 	.word	0x08007281
 8007160:	08007281 	.word	0x08007281
 8007164:	08007281 	.word	0x08007281
 8007168:	080071ff 	.word	0x080071ff
 800716c:	08007281 	.word	0x08007281
 8007170:	08007281 	.word	0x08007281
 8007174:	08007281 	.word	0x08007281
 8007178:	0800723f 	.word	0x0800723f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 f9f0 	bl	8007568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0208 	orr.w	r2, r2, #8
 8007196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0204 	bic.w	r2, r2, #4
 80071a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6999      	ldr	r1, [r3, #24]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691a      	ldr	r2, [r3, #16]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	619a      	str	r2, [r3, #24]
      break;
 80071ba:	e064      	b.n	8007286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fa40 	bl	8007648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6999      	ldr	r1, [r3, #24]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	021a      	lsls	r2, r3, #8
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	619a      	str	r2, [r3, #24]
      break;
 80071fc:	e043      	b.n	8007286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	4618      	mov	r0, r3
 8007206:	f000 fa95 	bl	8007734 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f042 0208 	orr.w	r2, r2, #8
 8007218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0204 	bic.w	r2, r2, #4
 8007228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69d9      	ldr	r1, [r3, #28]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	691a      	ldr	r2, [r3, #16]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	61da      	str	r2, [r3, #28]
      break;
 800723c:	e023      	b.n	8007286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fae9 	bl	800781c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69da      	ldr	r2, [r3, #28]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69da      	ldr	r2, [r3, #28]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69d9      	ldr	r1, [r3, #28]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	021a      	lsls	r2, r3, #8
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	61da      	str	r2, [r3, #28]
      break;
 800727e:	e002      	b.n	8007286 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	75fb      	strb	r3, [r7, #23]
      break;
 8007284:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800728e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_TIM_ConfigClockSource+0x1c>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e0b4      	b.n	800741e <HAL_TIM_ConfigClockSource+0x186>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ec:	d03e      	beq.n	800736c <HAL_TIM_ConfigClockSource+0xd4>
 80072ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f2:	f200 8087 	bhi.w	8007404 <HAL_TIM_ConfigClockSource+0x16c>
 80072f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fa:	f000 8086 	beq.w	800740a <HAL_TIM_ConfigClockSource+0x172>
 80072fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007302:	d87f      	bhi.n	8007404 <HAL_TIM_ConfigClockSource+0x16c>
 8007304:	2b70      	cmp	r3, #112	; 0x70
 8007306:	d01a      	beq.n	800733e <HAL_TIM_ConfigClockSource+0xa6>
 8007308:	2b70      	cmp	r3, #112	; 0x70
 800730a:	d87b      	bhi.n	8007404 <HAL_TIM_ConfigClockSource+0x16c>
 800730c:	2b60      	cmp	r3, #96	; 0x60
 800730e:	d050      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x11a>
 8007310:	2b60      	cmp	r3, #96	; 0x60
 8007312:	d877      	bhi.n	8007404 <HAL_TIM_ConfigClockSource+0x16c>
 8007314:	2b50      	cmp	r3, #80	; 0x50
 8007316:	d03c      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0xfa>
 8007318:	2b50      	cmp	r3, #80	; 0x50
 800731a:	d873      	bhi.n	8007404 <HAL_TIM_ConfigClockSource+0x16c>
 800731c:	2b40      	cmp	r3, #64	; 0x40
 800731e:	d058      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x13a>
 8007320:	2b40      	cmp	r3, #64	; 0x40
 8007322:	d86f      	bhi.n	8007404 <HAL_TIM_ConfigClockSource+0x16c>
 8007324:	2b30      	cmp	r3, #48	; 0x30
 8007326:	d064      	beq.n	80073f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007328:	2b30      	cmp	r3, #48	; 0x30
 800732a:	d86b      	bhi.n	8007404 <HAL_TIM_ConfigClockSource+0x16c>
 800732c:	2b20      	cmp	r3, #32
 800732e:	d060      	beq.n	80073f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007330:	2b20      	cmp	r3, #32
 8007332:	d867      	bhi.n	8007404 <HAL_TIM_ConfigClockSource+0x16c>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d05c      	beq.n	80073f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007338:	2b10      	cmp	r3, #16
 800733a:	d05a      	beq.n	80073f2 <HAL_TIM_ConfigClockSource+0x15a>
 800733c:	e062      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6818      	ldr	r0, [r3, #0]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	6899      	ldr	r1, [r3, #8]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f000 fb35 	bl	80079bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	609a      	str	r2, [r3, #8]
      break;
 800736a:	e04f      	b.n	800740c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6818      	ldr	r0, [r3, #0]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	6899      	ldr	r1, [r3, #8]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	f000 fb1e 	bl	80079bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689a      	ldr	r2, [r3, #8]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800738e:	609a      	str	r2, [r3, #8]
      break;
 8007390:	e03c      	b.n	800740c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6859      	ldr	r1, [r3, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	461a      	mov	r2, r3
 80073a0:	f000 fa92 	bl	80078c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2150      	movs	r1, #80	; 0x50
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 faeb 	bl	8007986 <TIM_ITRx_SetConfig>
      break;
 80073b0:	e02c      	b.n	800740c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6859      	ldr	r1, [r3, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	461a      	mov	r2, r3
 80073c0:	f000 fab1 	bl	8007926 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2160      	movs	r1, #96	; 0x60
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fadb 	bl	8007986 <TIM_ITRx_SetConfig>
      break;
 80073d0:	e01c      	b.n	800740c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6818      	ldr	r0, [r3, #0]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6859      	ldr	r1, [r3, #4]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	461a      	mov	r2, r3
 80073e0:	f000 fa72 	bl	80078c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2140      	movs	r1, #64	; 0x40
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 facb 	bl	8007986 <TIM_ITRx_SetConfig>
      break;
 80073f0:	e00c      	b.n	800740c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4619      	mov	r1, r3
 80073fc:	4610      	mov	r0, r2
 80073fe:	f000 fac2 	bl	8007986 <TIM_ITRx_SetConfig>
      break;
 8007402:	e003      	b.n	800740c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	73fb      	strb	r3, [r7, #15]
      break;
 8007408:	e000      	b.n	800740c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800740a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a40      	ldr	r2, [pc, #256]	; (800753c <TIM_Base_SetConfig+0x114>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d013      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007446:	d00f      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a3d      	ldr	r2, [pc, #244]	; (8007540 <TIM_Base_SetConfig+0x118>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d00b      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a3c      	ldr	r2, [pc, #240]	; (8007544 <TIM_Base_SetConfig+0x11c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d007      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a3b      	ldr	r2, [pc, #236]	; (8007548 <TIM_Base_SetConfig+0x120>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d003      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a3a      	ldr	r2, [pc, #232]	; (800754c <TIM_Base_SetConfig+0x124>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d108      	bne.n	800747a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a2f      	ldr	r2, [pc, #188]	; (800753c <TIM_Base_SetConfig+0x114>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d02b      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007488:	d027      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a2c      	ldr	r2, [pc, #176]	; (8007540 <TIM_Base_SetConfig+0x118>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d023      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a2b      	ldr	r2, [pc, #172]	; (8007544 <TIM_Base_SetConfig+0x11c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d01f      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a2a      	ldr	r2, [pc, #168]	; (8007548 <TIM_Base_SetConfig+0x120>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d01b      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a29      	ldr	r2, [pc, #164]	; (800754c <TIM_Base_SetConfig+0x124>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d017      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a28      	ldr	r2, [pc, #160]	; (8007550 <TIM_Base_SetConfig+0x128>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d013      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a27      	ldr	r2, [pc, #156]	; (8007554 <TIM_Base_SetConfig+0x12c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00f      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a26      	ldr	r2, [pc, #152]	; (8007558 <TIM_Base_SetConfig+0x130>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00b      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a25      	ldr	r2, [pc, #148]	; (800755c <TIM_Base_SetConfig+0x134>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d007      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a24      	ldr	r2, [pc, #144]	; (8007560 <TIM_Base_SetConfig+0x138>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d003      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a23      	ldr	r2, [pc, #140]	; (8007564 <TIM_Base_SetConfig+0x13c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d108      	bne.n	80074ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a0a      	ldr	r2, [pc, #40]	; (800753c <TIM_Base_SetConfig+0x114>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_Base_SetConfig+0xf8>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a0c      	ldr	r2, [pc, #48]	; (800754c <TIM_Base_SetConfig+0x124>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d103      	bne.n	8007528 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	615a      	str	r2, [r3, #20]
}
 800752e:	bf00      	nop
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40010000 	.word	0x40010000
 8007540:	40000400 	.word	0x40000400
 8007544:	40000800 	.word	0x40000800
 8007548:	40000c00 	.word	0x40000c00
 800754c:	40010400 	.word	0x40010400
 8007550:	40014000 	.word	0x40014000
 8007554:	40014400 	.word	0x40014400
 8007558:	40014800 	.word	0x40014800
 800755c:	40001800 	.word	0x40001800
 8007560:	40001c00 	.word	0x40001c00
 8007564:	40002000 	.word	0x40002000

08007568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007568:	b480      	push	{r7}
 800756a:	b087      	sub	sp, #28
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f023 0201 	bic.w	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0303 	bic.w	r3, r3, #3
 800759e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f023 0302 	bic.w	r3, r3, #2
 80075b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a20      	ldr	r2, [pc, #128]	; (8007640 <TIM_OC1_SetConfig+0xd8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d003      	beq.n	80075cc <TIM_OC1_SetConfig+0x64>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a1f      	ldr	r2, [pc, #124]	; (8007644 <TIM_OC1_SetConfig+0xdc>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d10c      	bne.n	80075e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f023 0308 	bic.w	r3, r3, #8
 80075d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f023 0304 	bic.w	r3, r3, #4
 80075e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a15      	ldr	r2, [pc, #84]	; (8007640 <TIM_OC1_SetConfig+0xd8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <TIM_OC1_SetConfig+0x8e>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a14      	ldr	r2, [pc, #80]	; (8007644 <TIM_OC1_SetConfig+0xdc>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d111      	bne.n	800761a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	621a      	str	r2, [r3, #32]
}
 8007634:	bf00      	nop
 8007636:	371c      	adds	r7, #28
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	40010000 	.word	0x40010000
 8007644:	40010400 	.word	0x40010400

08007648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f023 0210 	bic.w	r2, r3, #16
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800767e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f023 0320 	bic.w	r3, r3, #32
 8007692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a22      	ldr	r2, [pc, #136]	; (800772c <TIM_OC2_SetConfig+0xe4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d003      	beq.n	80076b0 <TIM_OC2_SetConfig+0x68>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a21      	ldr	r2, [pc, #132]	; (8007730 <TIM_OC2_SetConfig+0xe8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d10d      	bne.n	80076cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a17      	ldr	r2, [pc, #92]	; (800772c <TIM_OC2_SetConfig+0xe4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d003      	beq.n	80076dc <TIM_OC2_SetConfig+0x94>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a16      	ldr	r2, [pc, #88]	; (8007730 <TIM_OC2_SetConfig+0xe8>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d113      	bne.n	8007704 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	621a      	str	r2, [r3, #32]
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40010000 	.word	0x40010000
 8007730:	40010400 	.word	0x40010400

08007734 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0303 	bic.w	r3, r3, #3
 800776a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800777c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	021b      	lsls	r3, r3, #8
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	4313      	orrs	r3, r2
 8007788:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a21      	ldr	r2, [pc, #132]	; (8007814 <TIM_OC3_SetConfig+0xe0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d003      	beq.n	800779a <TIM_OC3_SetConfig+0x66>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a20      	ldr	r2, [pc, #128]	; (8007818 <TIM_OC3_SetConfig+0xe4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d10d      	bne.n	80077b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a16      	ldr	r2, [pc, #88]	; (8007814 <TIM_OC3_SetConfig+0xe0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d003      	beq.n	80077c6 <TIM_OC3_SetConfig+0x92>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a15      	ldr	r2, [pc, #84]	; (8007818 <TIM_OC3_SetConfig+0xe4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d113      	bne.n	80077ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	011b      	lsls	r3, r3, #4
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	4313      	orrs	r3, r2
 80077e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	621a      	str	r2, [r3, #32]
}
 8007808:	bf00      	nop
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	40010000 	.word	0x40010000
 8007818:	40010400 	.word	0x40010400

0800781c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800784a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	021b      	lsls	r3, r3, #8
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4313      	orrs	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	031b      	lsls	r3, r3, #12
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a12      	ldr	r2, [pc, #72]	; (80078c0 <TIM_OC4_SetConfig+0xa4>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d003      	beq.n	8007884 <TIM_OC4_SetConfig+0x68>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a11      	ldr	r2, [pc, #68]	; (80078c4 <TIM_OC4_SetConfig+0xa8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d109      	bne.n	8007898 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800788a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	019b      	lsls	r3, r3, #6
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	4313      	orrs	r3, r2
 8007896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	621a      	str	r2, [r3, #32]
}
 80078b2:	bf00      	nop
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	40010000 	.word	0x40010000
 80078c4:	40010400 	.word	0x40010400

080078c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	f023 0201 	bic.w	r2, r3, #1
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f023 030a 	bic.w	r3, r3, #10
 8007904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4313      	orrs	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	621a      	str	r2, [r3, #32]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007926:	b480      	push	{r7}
 8007928:	b087      	sub	sp, #28
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f023 0210 	bic.w	r2, r3, #16
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	031b      	lsls	r3, r3, #12
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	4313      	orrs	r3, r2
 800795a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	4313      	orrs	r3, r2
 800796c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	621a      	str	r2, [r3, #32]
}
 800797a:	bf00      	nop
 800797c:	371c      	adds	r7, #28
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007986:	b480      	push	{r7}
 8007988:	b085      	sub	sp, #20
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	f043 0307 	orr.w	r3, r3, #7
 80079a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	609a      	str	r2, [r3, #8]
}
 80079b0:	bf00      	nop
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	021a      	lsls	r2, r3, #8
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	431a      	orrs	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	609a      	str	r2, [r3, #8]
}
 80079f0:	bf00      	nop
 80079f2:	371c      	adds	r7, #28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e05a      	b.n	8007aca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a21      	ldr	r2, [pc, #132]	; (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d022      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a60:	d01d      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a1d      	ldr	r2, [pc, #116]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d018      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a1b      	ldr	r2, [pc, #108]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d013      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d00e      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a18      	ldr	r2, [pc, #96]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d009      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a17      	ldr	r2, [pc, #92]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d004      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a15      	ldr	r2, [pc, #84]	; (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d10c      	bne.n	8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	40010000 	.word	0x40010000
 8007adc:	40000400 	.word	0x40000400
 8007ae0:	40000800 	.word	0x40000800
 8007ae4:	40000c00 	.word	0x40000c00
 8007ae8:	40010400 	.word	0x40010400
 8007aec:	40014000 	.word	0x40014000
 8007af0:	40001800 	.word	0x40001800

08007af4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e03d      	b.n	8007b8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e03f      	b.n	8007c2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7fb fc86 	bl	80034d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2224      	movs	r2, #36	; 0x24
 8007bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fd67 	bl	80086b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	691a      	ldr	r2, [r3, #16]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	695a      	ldr	r2, [r3, #20]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b08a      	sub	sp, #40	; 0x28
 8007c36:	af02      	add	r7, sp, #8
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	603b      	str	r3, [r7, #0]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	d17c      	bne.n	8007d4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <HAL_UART_Transmit+0x2c>
 8007c58:	88fb      	ldrh	r3, [r7, #6]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e075      	b.n	8007d4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_UART_Transmit+0x3e>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e06e      	b.n	8007d4e <HAL_UART_Transmit+0x11c>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2221      	movs	r2, #33	; 0x21
 8007c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c86:	f7fc f8a5 	bl	8003dd4 <HAL_GetTick>
 8007c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	88fa      	ldrh	r2, [r7, #6]
 8007c90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	88fa      	ldrh	r2, [r7, #6]
 8007c96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca0:	d108      	bne.n	8007cb4 <HAL_UART_Transmit+0x82>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d104      	bne.n	8007cb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	61bb      	str	r3, [r7, #24]
 8007cb2:	e003      	b.n	8007cbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007cc4:	e02a      	b.n	8007d1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2180      	movs	r1, #128	; 0x80
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 fae5 	bl	80082a0 <UART_WaitOnFlagUntilTimeout>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e036      	b.n	8007d4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	3302      	adds	r3, #2
 8007cfa:	61bb      	str	r3, [r7, #24]
 8007cfc:	e007      	b.n	8007d0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	781a      	ldrb	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	3b01      	subs	r3, #1
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1cf      	bne.n	8007cc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2140      	movs	r1, #64	; 0x40
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 fab5 	bl	80082a0 <UART_WaitOnFlagUntilTimeout>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e006      	b.n	8007d4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	e000      	b.n	8007d4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d4c:	2302      	movs	r3, #2
  }
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3720      	adds	r7, #32
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b0ba      	sub	sp, #232	; 0xe8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10f      	bne.n	8007dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da2:	f003 0320 	and.w	r3, r3, #32
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <HAL_UART_IRQHandler+0x66>
 8007daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fbbf 	bl	800853a <UART_Receive_IT>
      return;
 8007dbc:	e256      	b.n	800826c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 80de 	beq.w	8007f84 <HAL_UART_IRQHandler+0x22c>
 8007dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d106      	bne.n	8007de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 80d1 	beq.w	8007f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <HAL_UART_IRQHandler+0xae>
 8007dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	f043 0201 	orr.w	r2, r3, #1
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e0a:	f003 0304 	and.w	r3, r3, #4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00b      	beq.n	8007e2a <HAL_UART_IRQHandler+0xd2>
 8007e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d005      	beq.n	8007e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	f043 0202 	orr.w	r2, r3, #2
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00b      	beq.n	8007e4e <HAL_UART_IRQHandler+0xf6>
 8007e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d005      	beq.n	8007e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e46:	f043 0204 	orr.w	r2, r3, #4
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e52:	f003 0308 	and.w	r3, r3, #8
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d011      	beq.n	8007e7e <HAL_UART_IRQHandler+0x126>
 8007e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e5e:	f003 0320 	and.w	r3, r3, #32
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d105      	bne.n	8007e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d005      	beq.n	8007e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e76:	f043 0208 	orr.w	r2, r3, #8
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 81ed 	beq.w	8008262 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8c:	f003 0320 	and.w	r3, r3, #32
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d008      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x14e>
 8007e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fb4a 	bl	800853a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	bf0c      	ite	eq
 8007eb4:	2301      	moveq	r3, #1
 8007eb6:	2300      	movne	r3, #0
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	f003 0308 	and.w	r3, r3, #8
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d103      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x17a>
 8007eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d04f      	beq.n	8007f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fa52 	bl	800837c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee2:	2b40      	cmp	r3, #64	; 0x40
 8007ee4:	d141      	bne.n	8007f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3314      	adds	r3, #20
 8007eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3314      	adds	r3, #20
 8007f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f22:	e841 2300 	strex	r3, r2, [r1]
 8007f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1d9      	bne.n	8007ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d013      	beq.n	8007f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3e:	4a7d      	ldr	r2, [pc, #500]	; (8008134 <HAL_UART_IRQHandler+0x3dc>)
 8007f40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fc fcde 	bl	8004908 <HAL_DMA_Abort_IT>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d016      	beq.n	8007f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f60:	e00e      	b.n	8007f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f986 	bl	8008274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f68:	e00a      	b.n	8007f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f982 	bl	8008274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f70:	e006      	b.n	8007f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f97e 	bl	8008274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007f7e:	e170      	b.n	8008262 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f80:	bf00      	nop
    return;
 8007f82:	e16e      	b.n	8008262 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	f040 814a 	bne.w	8008222 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f92:	f003 0310 	and.w	r3, r3, #16
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 8143 	beq.w	8008222 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa0:	f003 0310 	and.w	r3, r3, #16
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 813c 	beq.w	8008222 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007faa:	2300      	movs	r3, #0
 8007fac:	60bb      	str	r3, [r7, #8]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	60bb      	str	r3, [r7, #8]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	60bb      	str	r3, [r7, #8]
 8007fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fca:	2b40      	cmp	r3, #64	; 0x40
 8007fcc:	f040 80b4 	bne.w	8008138 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 8140 	beq.w	8008266 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	f080 8139 	bcs.w	8008266 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008006:	f000 8088 	beq.w	800811a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	330c      	adds	r3, #12
 8008010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008018:	e853 3f00 	ldrex	r3, [r3]
 800801c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	330c      	adds	r3, #12
 8008032:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008036:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800803a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008042:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008046:	e841 2300 	strex	r3, r2, [r1]
 800804a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800804e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1d9      	bne.n	800800a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3314      	adds	r3, #20
 800805c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008060:	e853 3f00 	ldrex	r3, [r3]
 8008064:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008068:	f023 0301 	bic.w	r3, r3, #1
 800806c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3314      	adds	r3, #20
 8008076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800807a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800807e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008082:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008086:	e841 2300 	strex	r3, r2, [r1]
 800808a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800808c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1e1      	bne.n	8008056 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3314      	adds	r3, #20
 8008098:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800809c:	e853 3f00 	ldrex	r3, [r3]
 80080a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3314      	adds	r3, #20
 80080b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80080b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80080c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e3      	bne.n	8008092 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	330c      	adds	r3, #12
 80080de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e2:	e853 3f00 	ldrex	r3, [r3]
 80080e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ea:	f023 0310 	bic.w	r3, r3, #16
 80080ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	330c      	adds	r3, #12
 80080f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80080fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80080fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008100:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008102:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008104:	e841 2300 	strex	r3, r2, [r1]
 8008108:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800810a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e3      	bne.n	80080d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008114:	4618      	mov	r0, r3
 8008116:	f7fc fb87 	bl	8004828 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008122:	b29b      	uxth	r3, r3
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	b29b      	uxth	r3, r3
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f8ac 	bl	8008288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008130:	e099      	b.n	8008266 <HAL_UART_IRQHandler+0x50e>
 8008132:	bf00      	nop
 8008134:	08008443 	.word	0x08008443
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008140:	b29b      	uxth	r3, r3
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800814c:	b29b      	uxth	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 808b 	beq.w	800826a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 8086 	beq.w	800826a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	330c      	adds	r3, #12
 8008164:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800816e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008174:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	330c      	adds	r3, #12
 800817e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008182:	647a      	str	r2, [r7, #68]	; 0x44
 8008184:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008186:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008188:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1e3      	bne.n	800815e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3314      	adds	r3, #20
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	623b      	str	r3, [r7, #32]
   return(result);
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	f023 0301 	bic.w	r3, r3, #1
 80081ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3314      	adds	r3, #20
 80081b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80081ba:	633a      	str	r2, [r7, #48]	; 0x30
 80081bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e3      	bne.n	8008196 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2220      	movs	r2, #32
 80081d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	330c      	adds	r3, #12
 80081e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	e853 3f00 	ldrex	r3, [r3]
 80081ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0310 	bic.w	r3, r3, #16
 80081f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	330c      	adds	r3, #12
 80081fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008200:	61fa      	str	r2, [r7, #28]
 8008202:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008204:	69b9      	ldr	r1, [r7, #24]
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	e841 2300 	strex	r3, r2, [r1]
 800820c:	617b      	str	r3, [r7, #20]
   return(result);
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1e3      	bne.n	80081dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f834 	bl	8008288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008220:	e023      	b.n	800826a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800822a:	2b00      	cmp	r3, #0
 800822c:	d009      	beq.n	8008242 <HAL_UART_IRQHandler+0x4ea>
 800822e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f915 	bl	800846a <UART_Transmit_IT>
    return;
 8008240:	e014      	b.n	800826c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00e      	beq.n	800826c <HAL_UART_IRQHandler+0x514>
 800824e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008256:	2b00      	cmp	r3, #0
 8008258:	d008      	beq.n	800826c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f955 	bl	800850a <UART_EndTransmit_IT>
    return;
 8008260:	e004      	b.n	800826c <HAL_UART_IRQHandler+0x514>
    return;
 8008262:	bf00      	nop
 8008264:	e002      	b.n	800826c <HAL_UART_IRQHandler+0x514>
      return;
 8008266:	bf00      	nop
 8008268:	e000      	b.n	800826c <HAL_UART_IRQHandler+0x514>
      return;
 800826a:	bf00      	nop
  }
}
 800826c:	37e8      	adds	r7, #232	; 0xe8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop

08008274 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b090      	sub	sp, #64	; 0x40
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	603b      	str	r3, [r7, #0]
 80082ac:	4613      	mov	r3, r2
 80082ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082b0:	e050      	b.n	8008354 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b8:	d04c      	beq.n	8008354 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80082ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d007      	beq.n	80082d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80082c0:	f7fb fd88 	bl	8003dd4 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d241      	bcs.n	8008354 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	330c      	adds	r3, #12
 80082d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	330c      	adds	r3, #12
 80082ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082f0:	637a      	str	r2, [r7, #52]	; 0x34
 80082f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e5      	bne.n	80082d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3314      	adds	r3, #20
 800830a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	613b      	str	r3, [r7, #16]
   return(result);
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	63bb      	str	r3, [r7, #56]	; 0x38
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3314      	adds	r3, #20
 8008322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008324:	623a      	str	r2, [r7, #32]
 8008326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	69f9      	ldr	r1, [r7, #28]
 800832a:	6a3a      	ldr	r2, [r7, #32]
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	61bb      	str	r3, [r7, #24]
   return(result);
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e5      	bne.n	8008304 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2220      	movs	r2, #32
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2220      	movs	r2, #32
 8008344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e00f      	b.n	8008374 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	4013      	ands	r3, r2
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	429a      	cmp	r2, r3
 8008362:	bf0c      	ite	eq
 8008364:	2301      	moveq	r3, #1
 8008366:	2300      	movne	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	461a      	mov	r2, r3
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	429a      	cmp	r2, r3
 8008370:	d09f      	beq.n	80082b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3740      	adds	r7, #64	; 0x40
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800837c:	b480      	push	{r7}
 800837e:	b095      	sub	sp, #84	; 0x54
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	330c      	adds	r3, #12
 800838a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838e:	e853 3f00 	ldrex	r3, [r3]
 8008392:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800839a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	330c      	adds	r3, #12
 80083a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083a4:	643a      	str	r2, [r7, #64]	; 0x40
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083ac:	e841 2300 	strex	r3, r2, [r1]
 80083b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1e5      	bne.n	8008384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3314      	adds	r3, #20
 80083be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	e853 3f00 	ldrex	r3, [r3]
 80083c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	f023 0301 	bic.w	r3, r3, #1
 80083ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3314      	adds	r3, #20
 80083d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e5      	bne.n	80083b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d119      	bne.n	8008428 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	330c      	adds	r3, #12
 80083fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	e853 3f00 	ldrex	r3, [r3]
 8008402:	60bb      	str	r3, [r7, #8]
   return(result);
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f023 0310 	bic.w	r3, r3, #16
 800840a:	647b      	str	r3, [r7, #68]	; 0x44
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	330c      	adds	r3, #12
 8008412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008414:	61ba      	str	r2, [r7, #24]
 8008416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008418:	6979      	ldr	r1, [r7, #20]
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	e841 2300 	strex	r3, r2, [r1]
 8008420:	613b      	str	r3, [r7, #16]
   return(result);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1e5      	bne.n	80083f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008436:	bf00      	nop
 8008438:	3754      	adds	r7, #84	; 0x54
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7ff ff09 	bl	8008274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008462:	bf00      	nop
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b21      	cmp	r3, #33	; 0x21
 800847c:	d13e      	bne.n	80084fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008486:	d114      	bne.n	80084b2 <UART_Transmit_IT+0x48>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d110      	bne.n	80084b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	1c9a      	adds	r2, r3, #2
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	621a      	str	r2, [r3, #32]
 80084b0:	e008      	b.n	80084c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	1c59      	adds	r1, r3, #1
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	6211      	str	r1, [r2, #32]
 80084bc:	781a      	ldrb	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	3b01      	subs	r3, #1
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	4619      	mov	r1, r3
 80084d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10f      	bne.n	80084f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	e000      	b.n	80084fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084fc:	2302      	movs	r3, #2
  }
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008520:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2220      	movs	r2, #32
 8008526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7f9 f812 	bl	8001554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b08c      	sub	sp, #48	; 0x30
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b22      	cmp	r3, #34	; 0x22
 800854c:	f040 80ab 	bne.w	80086a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008558:	d117      	bne.n	800858a <UART_Receive_IT+0x50>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d113      	bne.n	800858a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	b29b      	uxth	r3, r3
 8008574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008578:	b29a      	uxth	r2, r3
 800857a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008582:	1c9a      	adds	r2, r3, #2
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	629a      	str	r2, [r3, #40]	; 0x28
 8008588:	e026      	b.n	80085d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800859c:	d007      	beq.n	80085ae <UART_Receive_IT+0x74>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10a      	bne.n	80085bc <UART_Receive_IT+0x82>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d106      	bne.n	80085bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	e008      	b.n	80085ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085dc:	b29b      	uxth	r3, r3
 80085de:	3b01      	subs	r3, #1
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	4619      	mov	r1, r3
 80085e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d15a      	bne.n	80086a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0220 	bic.w	r2, r2, #32
 80085fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800860a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	695a      	ldr	r2, [r3, #20]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f022 0201 	bic.w	r2, r2, #1
 800861a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2220      	movs	r2, #32
 8008620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008628:	2b01      	cmp	r3, #1
 800862a:	d135      	bne.n	8008698 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	330c      	adds	r3, #12
 8008638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	613b      	str	r3, [r7, #16]
   return(result);
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	f023 0310 	bic.w	r3, r3, #16
 8008648:	627b      	str	r3, [r7, #36]	; 0x24
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	330c      	adds	r3, #12
 8008650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008652:	623a      	str	r2, [r7, #32]
 8008654:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	69f9      	ldr	r1, [r7, #28]
 8008658:	6a3a      	ldr	r2, [r7, #32]
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e5      	bne.n	8008632 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0310 	and.w	r3, r3, #16
 8008670:	2b10      	cmp	r3, #16
 8008672:	d10a      	bne.n	800868a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008674:	2300      	movs	r3, #0
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff fdf9 	bl	8008288 <HAL_UARTEx_RxEventCallback>
 8008696:	e002      	b.n	800869e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7f8 ff71 	bl	8001580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	e002      	b.n	80086a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	e000      	b.n	80086a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80086a6:	2302      	movs	r3, #2
  }
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3730      	adds	r7, #48	; 0x30
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086b4:	b0c0      	sub	sp, #256	; 0x100
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80086c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086cc:	68d9      	ldr	r1, [r3, #12]
 80086ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	ea40 0301 	orr.w	r3, r0, r1
 80086d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	431a      	orrs	r2, r3
 80086e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	431a      	orrs	r2, r3
 80086f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80086fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008708:	f021 010c 	bic.w	r1, r1, #12
 800870c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008716:	430b      	orrs	r3, r1
 8008718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800871a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800872a:	6999      	ldr	r1, [r3, #24]
 800872c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	ea40 0301 	orr.w	r3, r0, r1
 8008736:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	4b8f      	ldr	r3, [pc, #572]	; (800897c <UART_SetConfig+0x2cc>)
 8008740:	429a      	cmp	r2, r3
 8008742:	d005      	beq.n	8008750 <UART_SetConfig+0xa0>
 8008744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	4b8d      	ldr	r3, [pc, #564]	; (8008980 <UART_SetConfig+0x2d0>)
 800874c:	429a      	cmp	r2, r3
 800874e:	d104      	bne.n	800875a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008750:	f7fe fbba 	bl	8006ec8 <HAL_RCC_GetPCLK2Freq>
 8008754:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008758:	e003      	b.n	8008762 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800875a:	f7fe fba1 	bl	8006ea0 <HAL_RCC_GetPCLK1Freq>
 800875e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800876c:	f040 810c 	bne.w	8008988 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008774:	2200      	movs	r2, #0
 8008776:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800877a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800877e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008782:	4622      	mov	r2, r4
 8008784:	462b      	mov	r3, r5
 8008786:	1891      	adds	r1, r2, r2
 8008788:	65b9      	str	r1, [r7, #88]	; 0x58
 800878a:	415b      	adcs	r3, r3
 800878c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800878e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008792:	4621      	mov	r1, r4
 8008794:	eb12 0801 	adds.w	r8, r2, r1
 8008798:	4629      	mov	r1, r5
 800879a:	eb43 0901 	adc.w	r9, r3, r1
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	f04f 0300 	mov.w	r3, #0
 80087a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087b2:	4690      	mov	r8, r2
 80087b4:	4699      	mov	r9, r3
 80087b6:	4623      	mov	r3, r4
 80087b8:	eb18 0303 	adds.w	r3, r8, r3
 80087bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087c0:	462b      	mov	r3, r5
 80087c2:	eb49 0303 	adc.w	r3, r9, r3
 80087c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80087da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80087de:	460b      	mov	r3, r1
 80087e0:	18db      	adds	r3, r3, r3
 80087e2:	653b      	str	r3, [r7, #80]	; 0x50
 80087e4:	4613      	mov	r3, r2
 80087e6:	eb42 0303 	adc.w	r3, r2, r3
 80087ea:	657b      	str	r3, [r7, #84]	; 0x54
 80087ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80087f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80087f4:	f7f8 f9d8 	bl	8000ba8 <__aeabi_uldivmod>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4b61      	ldr	r3, [pc, #388]	; (8008984 <UART_SetConfig+0x2d4>)
 80087fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008802:	095b      	lsrs	r3, r3, #5
 8008804:	011c      	lsls	r4, r3, #4
 8008806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800880a:	2200      	movs	r2, #0
 800880c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008810:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008814:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008818:	4642      	mov	r2, r8
 800881a:	464b      	mov	r3, r9
 800881c:	1891      	adds	r1, r2, r2
 800881e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008820:	415b      	adcs	r3, r3
 8008822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008824:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008828:	4641      	mov	r1, r8
 800882a:	eb12 0a01 	adds.w	sl, r2, r1
 800882e:	4649      	mov	r1, r9
 8008830:	eb43 0b01 	adc.w	fp, r3, r1
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	f04f 0300 	mov.w	r3, #0
 800883c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008840:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008848:	4692      	mov	sl, r2
 800884a:	469b      	mov	fp, r3
 800884c:	4643      	mov	r3, r8
 800884e:	eb1a 0303 	adds.w	r3, sl, r3
 8008852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008856:	464b      	mov	r3, r9
 8008858:	eb4b 0303 	adc.w	r3, fp, r3
 800885c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800886c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008870:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008874:	460b      	mov	r3, r1
 8008876:	18db      	adds	r3, r3, r3
 8008878:	643b      	str	r3, [r7, #64]	; 0x40
 800887a:	4613      	mov	r3, r2
 800887c:	eb42 0303 	adc.w	r3, r2, r3
 8008880:	647b      	str	r3, [r7, #68]	; 0x44
 8008882:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008886:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800888a:	f7f8 f98d 	bl	8000ba8 <__aeabi_uldivmod>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4611      	mov	r1, r2
 8008894:	4b3b      	ldr	r3, [pc, #236]	; (8008984 <UART_SetConfig+0x2d4>)
 8008896:	fba3 2301 	umull	r2, r3, r3, r1
 800889a:	095b      	lsrs	r3, r3, #5
 800889c:	2264      	movs	r2, #100	; 0x64
 800889e:	fb02 f303 	mul.w	r3, r2, r3
 80088a2:	1acb      	subs	r3, r1, r3
 80088a4:	00db      	lsls	r3, r3, #3
 80088a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80088aa:	4b36      	ldr	r3, [pc, #216]	; (8008984 <UART_SetConfig+0x2d4>)
 80088ac:	fba3 2302 	umull	r2, r3, r3, r2
 80088b0:	095b      	lsrs	r3, r3, #5
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088b8:	441c      	add	r4, r3
 80088ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088be:	2200      	movs	r2, #0
 80088c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80088c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80088cc:	4642      	mov	r2, r8
 80088ce:	464b      	mov	r3, r9
 80088d0:	1891      	adds	r1, r2, r2
 80088d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80088d4:	415b      	adcs	r3, r3
 80088d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088dc:	4641      	mov	r1, r8
 80088de:	1851      	adds	r1, r2, r1
 80088e0:	6339      	str	r1, [r7, #48]	; 0x30
 80088e2:	4649      	mov	r1, r9
 80088e4:	414b      	adcs	r3, r1
 80088e6:	637b      	str	r3, [r7, #52]	; 0x34
 80088e8:	f04f 0200 	mov.w	r2, #0
 80088ec:	f04f 0300 	mov.w	r3, #0
 80088f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80088f4:	4659      	mov	r1, fp
 80088f6:	00cb      	lsls	r3, r1, #3
 80088f8:	4651      	mov	r1, sl
 80088fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088fe:	4651      	mov	r1, sl
 8008900:	00ca      	lsls	r2, r1, #3
 8008902:	4610      	mov	r0, r2
 8008904:	4619      	mov	r1, r3
 8008906:	4603      	mov	r3, r0
 8008908:	4642      	mov	r2, r8
 800890a:	189b      	adds	r3, r3, r2
 800890c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008910:	464b      	mov	r3, r9
 8008912:	460a      	mov	r2, r1
 8008914:	eb42 0303 	adc.w	r3, r2, r3
 8008918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800891c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008928:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800892c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008930:	460b      	mov	r3, r1
 8008932:	18db      	adds	r3, r3, r3
 8008934:	62bb      	str	r3, [r7, #40]	; 0x28
 8008936:	4613      	mov	r3, r2
 8008938:	eb42 0303 	adc.w	r3, r2, r3
 800893c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800893e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008942:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008946:	f7f8 f92f 	bl	8000ba8 <__aeabi_uldivmod>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4b0d      	ldr	r3, [pc, #52]	; (8008984 <UART_SetConfig+0x2d4>)
 8008950:	fba3 1302 	umull	r1, r3, r3, r2
 8008954:	095b      	lsrs	r3, r3, #5
 8008956:	2164      	movs	r1, #100	; 0x64
 8008958:	fb01 f303 	mul.w	r3, r1, r3
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	3332      	adds	r3, #50	; 0x32
 8008962:	4a08      	ldr	r2, [pc, #32]	; (8008984 <UART_SetConfig+0x2d4>)
 8008964:	fba2 2303 	umull	r2, r3, r2, r3
 8008968:	095b      	lsrs	r3, r3, #5
 800896a:	f003 0207 	and.w	r2, r3, #7
 800896e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4422      	add	r2, r4
 8008976:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008978:	e105      	b.n	8008b86 <UART_SetConfig+0x4d6>
 800897a:	bf00      	nop
 800897c:	40011000 	.word	0x40011000
 8008980:	40011400 	.word	0x40011400
 8008984:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800898c:	2200      	movs	r2, #0
 800898e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008992:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008996:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800899a:	4642      	mov	r2, r8
 800899c:	464b      	mov	r3, r9
 800899e:	1891      	adds	r1, r2, r2
 80089a0:	6239      	str	r1, [r7, #32]
 80089a2:	415b      	adcs	r3, r3
 80089a4:	627b      	str	r3, [r7, #36]	; 0x24
 80089a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089aa:	4641      	mov	r1, r8
 80089ac:	1854      	adds	r4, r2, r1
 80089ae:	4649      	mov	r1, r9
 80089b0:	eb43 0501 	adc.w	r5, r3, r1
 80089b4:	f04f 0200 	mov.w	r2, #0
 80089b8:	f04f 0300 	mov.w	r3, #0
 80089bc:	00eb      	lsls	r3, r5, #3
 80089be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089c2:	00e2      	lsls	r2, r4, #3
 80089c4:	4614      	mov	r4, r2
 80089c6:	461d      	mov	r5, r3
 80089c8:	4643      	mov	r3, r8
 80089ca:	18e3      	adds	r3, r4, r3
 80089cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80089d0:	464b      	mov	r3, r9
 80089d2:	eb45 0303 	adc.w	r3, r5, r3
 80089d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80089da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089ea:	f04f 0200 	mov.w	r2, #0
 80089ee:	f04f 0300 	mov.w	r3, #0
 80089f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80089f6:	4629      	mov	r1, r5
 80089f8:	008b      	lsls	r3, r1, #2
 80089fa:	4621      	mov	r1, r4
 80089fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a00:	4621      	mov	r1, r4
 8008a02:	008a      	lsls	r2, r1, #2
 8008a04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008a08:	f7f8 f8ce 	bl	8000ba8 <__aeabi_uldivmod>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4b60      	ldr	r3, [pc, #384]	; (8008b94 <UART_SetConfig+0x4e4>)
 8008a12:	fba3 2302 	umull	r2, r3, r3, r2
 8008a16:	095b      	lsrs	r3, r3, #5
 8008a18:	011c      	lsls	r4, r3, #4
 8008a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	464b      	mov	r3, r9
 8008a30:	1891      	adds	r1, r2, r2
 8008a32:	61b9      	str	r1, [r7, #24]
 8008a34:	415b      	adcs	r3, r3
 8008a36:	61fb      	str	r3, [r7, #28]
 8008a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a3c:	4641      	mov	r1, r8
 8008a3e:	1851      	adds	r1, r2, r1
 8008a40:	6139      	str	r1, [r7, #16]
 8008a42:	4649      	mov	r1, r9
 8008a44:	414b      	adcs	r3, r1
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	f04f 0200 	mov.w	r2, #0
 8008a4c:	f04f 0300 	mov.w	r3, #0
 8008a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a54:	4659      	mov	r1, fp
 8008a56:	00cb      	lsls	r3, r1, #3
 8008a58:	4651      	mov	r1, sl
 8008a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a5e:	4651      	mov	r1, sl
 8008a60:	00ca      	lsls	r2, r1, #3
 8008a62:	4610      	mov	r0, r2
 8008a64:	4619      	mov	r1, r3
 8008a66:	4603      	mov	r3, r0
 8008a68:	4642      	mov	r2, r8
 8008a6a:	189b      	adds	r3, r3, r2
 8008a6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a70:	464b      	mov	r3, r9
 8008a72:	460a      	mov	r2, r1
 8008a74:	eb42 0303 	adc.w	r3, r2, r3
 8008a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a88:	f04f 0200 	mov.w	r2, #0
 8008a8c:	f04f 0300 	mov.w	r3, #0
 8008a90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008a94:	4649      	mov	r1, r9
 8008a96:	008b      	lsls	r3, r1, #2
 8008a98:	4641      	mov	r1, r8
 8008a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a9e:	4641      	mov	r1, r8
 8008aa0:	008a      	lsls	r2, r1, #2
 8008aa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008aa6:	f7f8 f87f 	bl	8000ba8 <__aeabi_uldivmod>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4b39      	ldr	r3, [pc, #228]	; (8008b94 <UART_SetConfig+0x4e4>)
 8008ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ab4:	095b      	lsrs	r3, r3, #5
 8008ab6:	2164      	movs	r1, #100	; 0x64
 8008ab8:	fb01 f303 	mul.w	r3, r1, r3
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	011b      	lsls	r3, r3, #4
 8008ac0:	3332      	adds	r3, #50	; 0x32
 8008ac2:	4a34      	ldr	r2, [pc, #208]	; (8008b94 <UART_SetConfig+0x4e4>)
 8008ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac8:	095b      	lsrs	r3, r3, #5
 8008aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ace:	441c      	add	r4, r3
 8008ad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	673b      	str	r3, [r7, #112]	; 0x70
 8008ad8:	677a      	str	r2, [r7, #116]	; 0x74
 8008ada:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008ade:	4642      	mov	r2, r8
 8008ae0:	464b      	mov	r3, r9
 8008ae2:	1891      	adds	r1, r2, r2
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	415b      	adcs	r3, r3
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008aee:	4641      	mov	r1, r8
 8008af0:	1851      	adds	r1, r2, r1
 8008af2:	6039      	str	r1, [r7, #0]
 8008af4:	4649      	mov	r1, r9
 8008af6:	414b      	adcs	r3, r1
 8008af8:	607b      	str	r3, [r7, #4]
 8008afa:	f04f 0200 	mov.w	r2, #0
 8008afe:	f04f 0300 	mov.w	r3, #0
 8008b02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b06:	4659      	mov	r1, fp
 8008b08:	00cb      	lsls	r3, r1, #3
 8008b0a:	4651      	mov	r1, sl
 8008b0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b10:	4651      	mov	r1, sl
 8008b12:	00ca      	lsls	r2, r1, #3
 8008b14:	4610      	mov	r0, r2
 8008b16:	4619      	mov	r1, r3
 8008b18:	4603      	mov	r3, r0
 8008b1a:	4642      	mov	r2, r8
 8008b1c:	189b      	adds	r3, r3, r2
 8008b1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b20:	464b      	mov	r3, r9
 8008b22:	460a      	mov	r2, r1
 8008b24:	eb42 0303 	adc.w	r3, r2, r3
 8008b28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	663b      	str	r3, [r7, #96]	; 0x60
 8008b34:	667a      	str	r2, [r7, #100]	; 0x64
 8008b36:	f04f 0200 	mov.w	r2, #0
 8008b3a:	f04f 0300 	mov.w	r3, #0
 8008b3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008b42:	4649      	mov	r1, r9
 8008b44:	008b      	lsls	r3, r1, #2
 8008b46:	4641      	mov	r1, r8
 8008b48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b4c:	4641      	mov	r1, r8
 8008b4e:	008a      	lsls	r2, r1, #2
 8008b50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008b54:	f7f8 f828 	bl	8000ba8 <__aeabi_uldivmod>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4b0d      	ldr	r3, [pc, #52]	; (8008b94 <UART_SetConfig+0x4e4>)
 8008b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8008b62:	095b      	lsrs	r3, r3, #5
 8008b64:	2164      	movs	r1, #100	; 0x64
 8008b66:	fb01 f303 	mul.w	r3, r1, r3
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	011b      	lsls	r3, r3, #4
 8008b6e:	3332      	adds	r3, #50	; 0x32
 8008b70:	4a08      	ldr	r2, [pc, #32]	; (8008b94 <UART_SetConfig+0x4e4>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	095b      	lsrs	r3, r3, #5
 8008b78:	f003 020f 	and.w	r2, r3, #15
 8008b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4422      	add	r2, r4
 8008b84:	609a      	str	r2, [r3, #8]
}
 8008b86:	bf00      	nop
 8008b88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b92:	bf00      	nop
 8008b94:	51eb851f 	.word	0x51eb851f

08008b98 <__errno>:
 8008b98:	4b01      	ldr	r3, [pc, #4]	; (8008ba0 <__errno+0x8>)
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	2000001c 	.word	0x2000001c

08008ba4 <__libc_init_array>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	4d0d      	ldr	r5, [pc, #52]	; (8008bdc <__libc_init_array+0x38>)
 8008ba8:	4c0d      	ldr	r4, [pc, #52]	; (8008be0 <__libc_init_array+0x3c>)
 8008baa:	1b64      	subs	r4, r4, r5
 8008bac:	10a4      	asrs	r4, r4, #2
 8008bae:	2600      	movs	r6, #0
 8008bb0:	42a6      	cmp	r6, r4
 8008bb2:	d109      	bne.n	8008bc8 <__libc_init_array+0x24>
 8008bb4:	4d0b      	ldr	r5, [pc, #44]	; (8008be4 <__libc_init_array+0x40>)
 8008bb6:	4c0c      	ldr	r4, [pc, #48]	; (8008be8 <__libc_init_array+0x44>)
 8008bb8:	f002 ff04 	bl	800b9c4 <_init>
 8008bbc:	1b64      	subs	r4, r4, r5
 8008bbe:	10a4      	asrs	r4, r4, #2
 8008bc0:	2600      	movs	r6, #0
 8008bc2:	42a6      	cmp	r6, r4
 8008bc4:	d105      	bne.n	8008bd2 <__libc_init_array+0x2e>
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bcc:	4798      	blx	r3
 8008bce:	3601      	adds	r6, #1
 8008bd0:	e7ee      	b.n	8008bb0 <__libc_init_array+0xc>
 8008bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd6:	4798      	blx	r3
 8008bd8:	3601      	adds	r6, #1
 8008bda:	e7f2      	b.n	8008bc2 <__libc_init_array+0x1e>
 8008bdc:	0800dccc 	.word	0x0800dccc
 8008be0:	0800dccc 	.word	0x0800dccc
 8008be4:	0800dccc 	.word	0x0800dccc
 8008be8:	0800dcd0 	.word	0x0800dcd0

08008bec <memcpy>:
 8008bec:	440a      	add	r2, r1
 8008bee:	4291      	cmp	r1, r2
 8008bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bf4:	d100      	bne.n	8008bf8 <memcpy+0xc>
 8008bf6:	4770      	bx	lr
 8008bf8:	b510      	push	{r4, lr}
 8008bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c02:	4291      	cmp	r1, r2
 8008c04:	d1f9      	bne.n	8008bfa <memcpy+0xe>
 8008c06:	bd10      	pop	{r4, pc}

08008c08 <memset>:
 8008c08:	4402      	add	r2, r0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d100      	bne.n	8008c12 <memset+0xa>
 8008c10:	4770      	bx	lr
 8008c12:	f803 1b01 	strb.w	r1, [r3], #1
 8008c16:	e7f9      	b.n	8008c0c <memset+0x4>

08008c18 <__cvt>:
 8008c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c1c:	ec55 4b10 	vmov	r4, r5, d0
 8008c20:	2d00      	cmp	r5, #0
 8008c22:	460e      	mov	r6, r1
 8008c24:	4619      	mov	r1, r3
 8008c26:	462b      	mov	r3, r5
 8008c28:	bfbb      	ittet	lt
 8008c2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008c2e:	461d      	movlt	r5, r3
 8008c30:	2300      	movge	r3, #0
 8008c32:	232d      	movlt	r3, #45	; 0x2d
 8008c34:	700b      	strb	r3, [r1, #0]
 8008c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008c3c:	4691      	mov	r9, r2
 8008c3e:	f023 0820 	bic.w	r8, r3, #32
 8008c42:	bfbc      	itt	lt
 8008c44:	4622      	movlt	r2, r4
 8008c46:	4614      	movlt	r4, r2
 8008c48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c4c:	d005      	beq.n	8008c5a <__cvt+0x42>
 8008c4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c52:	d100      	bne.n	8008c56 <__cvt+0x3e>
 8008c54:	3601      	adds	r6, #1
 8008c56:	2102      	movs	r1, #2
 8008c58:	e000      	b.n	8008c5c <__cvt+0x44>
 8008c5a:	2103      	movs	r1, #3
 8008c5c:	ab03      	add	r3, sp, #12
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	ab02      	add	r3, sp, #8
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	ec45 4b10 	vmov	d0, r4, r5
 8008c68:	4653      	mov	r3, sl
 8008c6a:	4632      	mov	r2, r6
 8008c6c:	f000 fcec 	bl	8009648 <_dtoa_r>
 8008c70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008c74:	4607      	mov	r7, r0
 8008c76:	d102      	bne.n	8008c7e <__cvt+0x66>
 8008c78:	f019 0f01 	tst.w	r9, #1
 8008c7c:	d022      	beq.n	8008cc4 <__cvt+0xac>
 8008c7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c82:	eb07 0906 	add.w	r9, r7, r6
 8008c86:	d110      	bne.n	8008caa <__cvt+0x92>
 8008c88:	783b      	ldrb	r3, [r7, #0]
 8008c8a:	2b30      	cmp	r3, #48	; 0x30
 8008c8c:	d10a      	bne.n	8008ca4 <__cvt+0x8c>
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2300      	movs	r3, #0
 8008c92:	4620      	mov	r0, r4
 8008c94:	4629      	mov	r1, r5
 8008c96:	f7f7 ff17 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c9a:	b918      	cbnz	r0, 8008ca4 <__cvt+0x8c>
 8008c9c:	f1c6 0601 	rsb	r6, r6, #1
 8008ca0:	f8ca 6000 	str.w	r6, [sl]
 8008ca4:	f8da 3000 	ldr.w	r3, [sl]
 8008ca8:	4499      	add	r9, r3
 8008caa:	2200      	movs	r2, #0
 8008cac:	2300      	movs	r3, #0
 8008cae:	4620      	mov	r0, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f7f7 ff09 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cb6:	b108      	cbz	r0, 8008cbc <__cvt+0xa4>
 8008cb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008cbc:	2230      	movs	r2, #48	; 0x30
 8008cbe:	9b03      	ldr	r3, [sp, #12]
 8008cc0:	454b      	cmp	r3, r9
 8008cc2:	d307      	bcc.n	8008cd4 <__cvt+0xbc>
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cc8:	1bdb      	subs	r3, r3, r7
 8008cca:	4638      	mov	r0, r7
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	b004      	add	sp, #16
 8008cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd4:	1c59      	adds	r1, r3, #1
 8008cd6:	9103      	str	r1, [sp, #12]
 8008cd8:	701a      	strb	r2, [r3, #0]
 8008cda:	e7f0      	b.n	8008cbe <__cvt+0xa6>

08008cdc <__exponent>:
 8008cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2900      	cmp	r1, #0
 8008ce2:	bfb8      	it	lt
 8008ce4:	4249      	neglt	r1, r1
 8008ce6:	f803 2b02 	strb.w	r2, [r3], #2
 8008cea:	bfb4      	ite	lt
 8008cec:	222d      	movlt	r2, #45	; 0x2d
 8008cee:	222b      	movge	r2, #43	; 0x2b
 8008cf0:	2909      	cmp	r1, #9
 8008cf2:	7042      	strb	r2, [r0, #1]
 8008cf4:	dd2a      	ble.n	8008d4c <__exponent+0x70>
 8008cf6:	f10d 0407 	add.w	r4, sp, #7
 8008cfa:	46a4      	mov	ip, r4
 8008cfc:	270a      	movs	r7, #10
 8008cfe:	46a6      	mov	lr, r4
 8008d00:	460a      	mov	r2, r1
 8008d02:	fb91 f6f7 	sdiv	r6, r1, r7
 8008d06:	fb07 1516 	mls	r5, r7, r6, r1
 8008d0a:	3530      	adds	r5, #48	; 0x30
 8008d0c:	2a63      	cmp	r2, #99	; 0x63
 8008d0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008d12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008d16:	4631      	mov	r1, r6
 8008d18:	dcf1      	bgt.n	8008cfe <__exponent+0x22>
 8008d1a:	3130      	adds	r1, #48	; 0x30
 8008d1c:	f1ae 0502 	sub.w	r5, lr, #2
 8008d20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008d24:	1c44      	adds	r4, r0, #1
 8008d26:	4629      	mov	r1, r5
 8008d28:	4561      	cmp	r1, ip
 8008d2a:	d30a      	bcc.n	8008d42 <__exponent+0x66>
 8008d2c:	f10d 0209 	add.w	r2, sp, #9
 8008d30:	eba2 020e 	sub.w	r2, r2, lr
 8008d34:	4565      	cmp	r5, ip
 8008d36:	bf88      	it	hi
 8008d38:	2200      	movhi	r2, #0
 8008d3a:	4413      	add	r3, r2
 8008d3c:	1a18      	subs	r0, r3, r0
 8008d3e:	b003      	add	sp, #12
 8008d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008d4a:	e7ed      	b.n	8008d28 <__exponent+0x4c>
 8008d4c:	2330      	movs	r3, #48	; 0x30
 8008d4e:	3130      	adds	r1, #48	; 0x30
 8008d50:	7083      	strb	r3, [r0, #2]
 8008d52:	70c1      	strb	r1, [r0, #3]
 8008d54:	1d03      	adds	r3, r0, #4
 8008d56:	e7f1      	b.n	8008d3c <__exponent+0x60>

08008d58 <_printf_float>:
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	ed2d 8b02 	vpush	{d8}
 8008d60:	b08d      	sub	sp, #52	; 0x34
 8008d62:	460c      	mov	r4, r1
 8008d64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008d68:	4616      	mov	r6, r2
 8008d6a:	461f      	mov	r7, r3
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	f001 fa59 	bl	800a224 <_localeconv_r>
 8008d72:	f8d0 a000 	ldr.w	sl, [r0]
 8008d76:	4650      	mov	r0, sl
 8008d78:	f7f7 fa2a 	bl	80001d0 <strlen>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	9305      	str	r3, [sp, #20]
 8008d84:	f8d8 3000 	ldr.w	r3, [r8]
 8008d88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008d8c:	3307      	adds	r3, #7
 8008d8e:	f023 0307 	bic.w	r3, r3, #7
 8008d92:	f103 0208 	add.w	r2, r3, #8
 8008d96:	f8c8 2000 	str.w	r2, [r8]
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008da2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008da6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008daa:	9307      	str	r3, [sp, #28]
 8008dac:	f8cd 8018 	str.w	r8, [sp, #24]
 8008db0:	ee08 0a10 	vmov	s16, r0
 8008db4:	4b9f      	ldr	r3, [pc, #636]	; (8009034 <_printf_float+0x2dc>)
 8008db6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dba:	f04f 32ff 	mov.w	r2, #4294967295
 8008dbe:	f7f7 feb5 	bl	8000b2c <__aeabi_dcmpun>
 8008dc2:	bb88      	cbnz	r0, 8008e28 <_printf_float+0xd0>
 8008dc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dc8:	4b9a      	ldr	r3, [pc, #616]	; (8009034 <_printf_float+0x2dc>)
 8008dca:	f04f 32ff 	mov.w	r2, #4294967295
 8008dce:	f7f7 fe8f 	bl	8000af0 <__aeabi_dcmple>
 8008dd2:	bb48      	cbnz	r0, 8008e28 <_printf_float+0xd0>
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	4640      	mov	r0, r8
 8008dda:	4649      	mov	r1, r9
 8008ddc:	f7f7 fe7e 	bl	8000adc <__aeabi_dcmplt>
 8008de0:	b110      	cbz	r0, 8008de8 <_printf_float+0x90>
 8008de2:	232d      	movs	r3, #45	; 0x2d
 8008de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008de8:	4b93      	ldr	r3, [pc, #588]	; (8009038 <_printf_float+0x2e0>)
 8008dea:	4894      	ldr	r0, [pc, #592]	; (800903c <_printf_float+0x2e4>)
 8008dec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008df0:	bf94      	ite	ls
 8008df2:	4698      	movls	r8, r3
 8008df4:	4680      	movhi	r8, r0
 8008df6:	2303      	movs	r3, #3
 8008df8:	6123      	str	r3, [r4, #16]
 8008dfa:	9b05      	ldr	r3, [sp, #20]
 8008dfc:	f023 0204 	bic.w	r2, r3, #4
 8008e00:	6022      	str	r2, [r4, #0]
 8008e02:	f04f 0900 	mov.w	r9, #0
 8008e06:	9700      	str	r7, [sp, #0]
 8008e08:	4633      	mov	r3, r6
 8008e0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f000 f9d8 	bl	80091c4 <_printf_common>
 8008e14:	3001      	adds	r0, #1
 8008e16:	f040 8090 	bne.w	8008f3a <_printf_float+0x1e2>
 8008e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1e:	b00d      	add	sp, #52	; 0x34
 8008e20:	ecbd 8b02 	vpop	{d8}
 8008e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e28:	4642      	mov	r2, r8
 8008e2a:	464b      	mov	r3, r9
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	4649      	mov	r1, r9
 8008e30:	f7f7 fe7c 	bl	8000b2c <__aeabi_dcmpun>
 8008e34:	b140      	cbz	r0, 8008e48 <_printf_float+0xf0>
 8008e36:	464b      	mov	r3, r9
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	bfbc      	itt	lt
 8008e3c:	232d      	movlt	r3, #45	; 0x2d
 8008e3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e42:	487f      	ldr	r0, [pc, #508]	; (8009040 <_printf_float+0x2e8>)
 8008e44:	4b7f      	ldr	r3, [pc, #508]	; (8009044 <_printf_float+0x2ec>)
 8008e46:	e7d1      	b.n	8008dec <_printf_float+0x94>
 8008e48:	6863      	ldr	r3, [r4, #4]
 8008e4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008e4e:	9206      	str	r2, [sp, #24]
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	d13f      	bne.n	8008ed4 <_printf_float+0x17c>
 8008e54:	2306      	movs	r3, #6
 8008e56:	6063      	str	r3, [r4, #4]
 8008e58:	9b05      	ldr	r3, [sp, #20]
 8008e5a:	6861      	ldr	r1, [r4, #4]
 8008e5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008e60:	2300      	movs	r3, #0
 8008e62:	9303      	str	r3, [sp, #12]
 8008e64:	ab0a      	add	r3, sp, #40	; 0x28
 8008e66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008e6a:	ab09      	add	r3, sp, #36	; 0x24
 8008e6c:	ec49 8b10 	vmov	d0, r8, r9
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	6022      	str	r2, [r4, #0]
 8008e74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f7ff fecd 	bl	8008c18 <__cvt>
 8008e7e:	9b06      	ldr	r3, [sp, #24]
 8008e80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e82:	2b47      	cmp	r3, #71	; 0x47
 8008e84:	4680      	mov	r8, r0
 8008e86:	d108      	bne.n	8008e9a <_printf_float+0x142>
 8008e88:	1cc8      	adds	r0, r1, #3
 8008e8a:	db02      	blt.n	8008e92 <_printf_float+0x13a>
 8008e8c:	6863      	ldr	r3, [r4, #4]
 8008e8e:	4299      	cmp	r1, r3
 8008e90:	dd41      	ble.n	8008f16 <_printf_float+0x1be>
 8008e92:	f1ab 0b02 	sub.w	fp, fp, #2
 8008e96:	fa5f fb8b 	uxtb.w	fp, fp
 8008e9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e9e:	d820      	bhi.n	8008ee2 <_printf_float+0x18a>
 8008ea0:	3901      	subs	r1, #1
 8008ea2:	465a      	mov	r2, fp
 8008ea4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ea8:	9109      	str	r1, [sp, #36]	; 0x24
 8008eaa:	f7ff ff17 	bl	8008cdc <__exponent>
 8008eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eb0:	1813      	adds	r3, r2, r0
 8008eb2:	2a01      	cmp	r2, #1
 8008eb4:	4681      	mov	r9, r0
 8008eb6:	6123      	str	r3, [r4, #16]
 8008eb8:	dc02      	bgt.n	8008ec0 <_printf_float+0x168>
 8008eba:	6822      	ldr	r2, [r4, #0]
 8008ebc:	07d2      	lsls	r2, r2, #31
 8008ebe:	d501      	bpl.n	8008ec4 <_printf_float+0x16c>
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	6123      	str	r3, [r4, #16]
 8008ec4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d09c      	beq.n	8008e06 <_printf_float+0xae>
 8008ecc:	232d      	movs	r3, #45	; 0x2d
 8008ece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ed2:	e798      	b.n	8008e06 <_printf_float+0xae>
 8008ed4:	9a06      	ldr	r2, [sp, #24]
 8008ed6:	2a47      	cmp	r2, #71	; 0x47
 8008ed8:	d1be      	bne.n	8008e58 <_printf_float+0x100>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1bc      	bne.n	8008e58 <_printf_float+0x100>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e7b9      	b.n	8008e56 <_printf_float+0xfe>
 8008ee2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008ee6:	d118      	bne.n	8008f1a <_printf_float+0x1c2>
 8008ee8:	2900      	cmp	r1, #0
 8008eea:	6863      	ldr	r3, [r4, #4]
 8008eec:	dd0b      	ble.n	8008f06 <_printf_float+0x1ae>
 8008eee:	6121      	str	r1, [r4, #16]
 8008ef0:	b913      	cbnz	r3, 8008ef8 <_printf_float+0x1a0>
 8008ef2:	6822      	ldr	r2, [r4, #0]
 8008ef4:	07d0      	lsls	r0, r2, #31
 8008ef6:	d502      	bpl.n	8008efe <_printf_float+0x1a6>
 8008ef8:	3301      	adds	r3, #1
 8008efa:	440b      	add	r3, r1
 8008efc:	6123      	str	r3, [r4, #16]
 8008efe:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f00:	f04f 0900 	mov.w	r9, #0
 8008f04:	e7de      	b.n	8008ec4 <_printf_float+0x16c>
 8008f06:	b913      	cbnz	r3, 8008f0e <_printf_float+0x1b6>
 8008f08:	6822      	ldr	r2, [r4, #0]
 8008f0a:	07d2      	lsls	r2, r2, #31
 8008f0c:	d501      	bpl.n	8008f12 <_printf_float+0x1ba>
 8008f0e:	3302      	adds	r3, #2
 8008f10:	e7f4      	b.n	8008efc <_printf_float+0x1a4>
 8008f12:	2301      	movs	r3, #1
 8008f14:	e7f2      	b.n	8008efc <_printf_float+0x1a4>
 8008f16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f1c:	4299      	cmp	r1, r3
 8008f1e:	db05      	blt.n	8008f2c <_printf_float+0x1d4>
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	6121      	str	r1, [r4, #16]
 8008f24:	07d8      	lsls	r0, r3, #31
 8008f26:	d5ea      	bpl.n	8008efe <_printf_float+0x1a6>
 8008f28:	1c4b      	adds	r3, r1, #1
 8008f2a:	e7e7      	b.n	8008efc <_printf_float+0x1a4>
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	bfd4      	ite	le
 8008f30:	f1c1 0202 	rsble	r2, r1, #2
 8008f34:	2201      	movgt	r2, #1
 8008f36:	4413      	add	r3, r2
 8008f38:	e7e0      	b.n	8008efc <_printf_float+0x1a4>
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	055a      	lsls	r2, r3, #21
 8008f3e:	d407      	bmi.n	8008f50 <_printf_float+0x1f8>
 8008f40:	6923      	ldr	r3, [r4, #16]
 8008f42:	4642      	mov	r2, r8
 8008f44:	4631      	mov	r1, r6
 8008f46:	4628      	mov	r0, r5
 8008f48:	47b8      	blx	r7
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	d12c      	bne.n	8008fa8 <_printf_float+0x250>
 8008f4e:	e764      	b.n	8008e1a <_printf_float+0xc2>
 8008f50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f54:	f240 80e0 	bls.w	8009118 <_printf_float+0x3c0>
 8008f58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f7f7 fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d034      	beq.n	8008fd2 <_printf_float+0x27a>
 8008f68:	4a37      	ldr	r2, [pc, #220]	; (8009048 <_printf_float+0x2f0>)
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	4631      	mov	r1, r6
 8008f6e:	4628      	mov	r0, r5
 8008f70:	47b8      	blx	r7
 8008f72:	3001      	adds	r0, #1
 8008f74:	f43f af51 	beq.w	8008e1a <_printf_float+0xc2>
 8008f78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	db02      	blt.n	8008f86 <_printf_float+0x22e>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	07d8      	lsls	r0, r3, #31
 8008f84:	d510      	bpl.n	8008fa8 <_printf_float+0x250>
 8008f86:	ee18 3a10 	vmov	r3, s16
 8008f8a:	4652      	mov	r2, sl
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4628      	mov	r0, r5
 8008f90:	47b8      	blx	r7
 8008f92:	3001      	adds	r0, #1
 8008f94:	f43f af41 	beq.w	8008e1a <_printf_float+0xc2>
 8008f98:	f04f 0800 	mov.w	r8, #0
 8008f9c:	f104 091a 	add.w	r9, r4, #26
 8008fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	4543      	cmp	r3, r8
 8008fa6:	dc09      	bgt.n	8008fbc <_printf_float+0x264>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	079b      	lsls	r3, r3, #30
 8008fac:	f100 8105 	bmi.w	80091ba <_printf_float+0x462>
 8008fb0:	68e0      	ldr	r0, [r4, #12]
 8008fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fb4:	4298      	cmp	r0, r3
 8008fb6:	bfb8      	it	lt
 8008fb8:	4618      	movlt	r0, r3
 8008fba:	e730      	b.n	8008e1e <_printf_float+0xc6>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	464a      	mov	r2, r9
 8008fc0:	4631      	mov	r1, r6
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	47b8      	blx	r7
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	f43f af27 	beq.w	8008e1a <_printf_float+0xc2>
 8008fcc:	f108 0801 	add.w	r8, r8, #1
 8008fd0:	e7e6      	b.n	8008fa0 <_printf_float+0x248>
 8008fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	dc39      	bgt.n	800904c <_printf_float+0x2f4>
 8008fd8:	4a1b      	ldr	r2, [pc, #108]	; (8009048 <_printf_float+0x2f0>)
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4631      	mov	r1, r6
 8008fde:	4628      	mov	r0, r5
 8008fe0:	47b8      	blx	r7
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	f43f af19 	beq.w	8008e1a <_printf_float+0xc2>
 8008fe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fec:	4313      	orrs	r3, r2
 8008fee:	d102      	bne.n	8008ff6 <_printf_float+0x29e>
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	07d9      	lsls	r1, r3, #31
 8008ff4:	d5d8      	bpl.n	8008fa8 <_printf_float+0x250>
 8008ff6:	ee18 3a10 	vmov	r3, s16
 8008ffa:	4652      	mov	r2, sl
 8008ffc:	4631      	mov	r1, r6
 8008ffe:	4628      	mov	r0, r5
 8009000:	47b8      	blx	r7
 8009002:	3001      	adds	r0, #1
 8009004:	f43f af09 	beq.w	8008e1a <_printf_float+0xc2>
 8009008:	f04f 0900 	mov.w	r9, #0
 800900c:	f104 0a1a 	add.w	sl, r4, #26
 8009010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009012:	425b      	negs	r3, r3
 8009014:	454b      	cmp	r3, r9
 8009016:	dc01      	bgt.n	800901c <_printf_float+0x2c4>
 8009018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800901a:	e792      	b.n	8008f42 <_printf_float+0x1ea>
 800901c:	2301      	movs	r3, #1
 800901e:	4652      	mov	r2, sl
 8009020:	4631      	mov	r1, r6
 8009022:	4628      	mov	r0, r5
 8009024:	47b8      	blx	r7
 8009026:	3001      	adds	r0, #1
 8009028:	f43f aef7 	beq.w	8008e1a <_printf_float+0xc2>
 800902c:	f109 0901 	add.w	r9, r9, #1
 8009030:	e7ee      	b.n	8009010 <_printf_float+0x2b8>
 8009032:	bf00      	nop
 8009034:	7fefffff 	.word	0x7fefffff
 8009038:	0800d8f0 	.word	0x0800d8f0
 800903c:	0800d8f4 	.word	0x0800d8f4
 8009040:	0800d8fc 	.word	0x0800d8fc
 8009044:	0800d8f8 	.word	0x0800d8f8
 8009048:	0800d900 	.word	0x0800d900
 800904c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800904e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009050:	429a      	cmp	r2, r3
 8009052:	bfa8      	it	ge
 8009054:	461a      	movge	r2, r3
 8009056:	2a00      	cmp	r2, #0
 8009058:	4691      	mov	r9, r2
 800905a:	dc37      	bgt.n	80090cc <_printf_float+0x374>
 800905c:	f04f 0b00 	mov.w	fp, #0
 8009060:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009064:	f104 021a 	add.w	r2, r4, #26
 8009068:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800906a:	9305      	str	r3, [sp, #20]
 800906c:	eba3 0309 	sub.w	r3, r3, r9
 8009070:	455b      	cmp	r3, fp
 8009072:	dc33      	bgt.n	80090dc <_printf_float+0x384>
 8009074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009078:	429a      	cmp	r2, r3
 800907a:	db3b      	blt.n	80090f4 <_printf_float+0x39c>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	07da      	lsls	r2, r3, #31
 8009080:	d438      	bmi.n	80090f4 <_printf_float+0x39c>
 8009082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009084:	9a05      	ldr	r2, [sp, #20]
 8009086:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009088:	1a9a      	subs	r2, r3, r2
 800908a:	eba3 0901 	sub.w	r9, r3, r1
 800908e:	4591      	cmp	r9, r2
 8009090:	bfa8      	it	ge
 8009092:	4691      	movge	r9, r2
 8009094:	f1b9 0f00 	cmp.w	r9, #0
 8009098:	dc35      	bgt.n	8009106 <_printf_float+0x3ae>
 800909a:	f04f 0800 	mov.w	r8, #0
 800909e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090a2:	f104 0a1a 	add.w	sl, r4, #26
 80090a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	eba3 0309 	sub.w	r3, r3, r9
 80090b0:	4543      	cmp	r3, r8
 80090b2:	f77f af79 	ble.w	8008fa8 <_printf_float+0x250>
 80090b6:	2301      	movs	r3, #1
 80090b8:	4652      	mov	r2, sl
 80090ba:	4631      	mov	r1, r6
 80090bc:	4628      	mov	r0, r5
 80090be:	47b8      	blx	r7
 80090c0:	3001      	adds	r0, #1
 80090c2:	f43f aeaa 	beq.w	8008e1a <_printf_float+0xc2>
 80090c6:	f108 0801 	add.w	r8, r8, #1
 80090ca:	e7ec      	b.n	80090a6 <_printf_float+0x34e>
 80090cc:	4613      	mov	r3, r2
 80090ce:	4631      	mov	r1, r6
 80090d0:	4642      	mov	r2, r8
 80090d2:	4628      	mov	r0, r5
 80090d4:	47b8      	blx	r7
 80090d6:	3001      	adds	r0, #1
 80090d8:	d1c0      	bne.n	800905c <_printf_float+0x304>
 80090da:	e69e      	b.n	8008e1a <_printf_float+0xc2>
 80090dc:	2301      	movs	r3, #1
 80090de:	4631      	mov	r1, r6
 80090e0:	4628      	mov	r0, r5
 80090e2:	9205      	str	r2, [sp, #20]
 80090e4:	47b8      	blx	r7
 80090e6:	3001      	adds	r0, #1
 80090e8:	f43f ae97 	beq.w	8008e1a <_printf_float+0xc2>
 80090ec:	9a05      	ldr	r2, [sp, #20]
 80090ee:	f10b 0b01 	add.w	fp, fp, #1
 80090f2:	e7b9      	b.n	8009068 <_printf_float+0x310>
 80090f4:	ee18 3a10 	vmov	r3, s16
 80090f8:	4652      	mov	r2, sl
 80090fa:	4631      	mov	r1, r6
 80090fc:	4628      	mov	r0, r5
 80090fe:	47b8      	blx	r7
 8009100:	3001      	adds	r0, #1
 8009102:	d1be      	bne.n	8009082 <_printf_float+0x32a>
 8009104:	e689      	b.n	8008e1a <_printf_float+0xc2>
 8009106:	9a05      	ldr	r2, [sp, #20]
 8009108:	464b      	mov	r3, r9
 800910a:	4442      	add	r2, r8
 800910c:	4631      	mov	r1, r6
 800910e:	4628      	mov	r0, r5
 8009110:	47b8      	blx	r7
 8009112:	3001      	adds	r0, #1
 8009114:	d1c1      	bne.n	800909a <_printf_float+0x342>
 8009116:	e680      	b.n	8008e1a <_printf_float+0xc2>
 8009118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800911a:	2a01      	cmp	r2, #1
 800911c:	dc01      	bgt.n	8009122 <_printf_float+0x3ca>
 800911e:	07db      	lsls	r3, r3, #31
 8009120:	d538      	bpl.n	8009194 <_printf_float+0x43c>
 8009122:	2301      	movs	r3, #1
 8009124:	4642      	mov	r2, r8
 8009126:	4631      	mov	r1, r6
 8009128:	4628      	mov	r0, r5
 800912a:	47b8      	blx	r7
 800912c:	3001      	adds	r0, #1
 800912e:	f43f ae74 	beq.w	8008e1a <_printf_float+0xc2>
 8009132:	ee18 3a10 	vmov	r3, s16
 8009136:	4652      	mov	r2, sl
 8009138:	4631      	mov	r1, r6
 800913a:	4628      	mov	r0, r5
 800913c:	47b8      	blx	r7
 800913e:	3001      	adds	r0, #1
 8009140:	f43f ae6b 	beq.w	8008e1a <_printf_float+0xc2>
 8009144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009148:	2200      	movs	r2, #0
 800914a:	2300      	movs	r3, #0
 800914c:	f7f7 fcbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009150:	b9d8      	cbnz	r0, 800918a <_printf_float+0x432>
 8009152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009154:	f108 0201 	add.w	r2, r8, #1
 8009158:	3b01      	subs	r3, #1
 800915a:	4631      	mov	r1, r6
 800915c:	4628      	mov	r0, r5
 800915e:	47b8      	blx	r7
 8009160:	3001      	adds	r0, #1
 8009162:	d10e      	bne.n	8009182 <_printf_float+0x42a>
 8009164:	e659      	b.n	8008e1a <_printf_float+0xc2>
 8009166:	2301      	movs	r3, #1
 8009168:	4652      	mov	r2, sl
 800916a:	4631      	mov	r1, r6
 800916c:	4628      	mov	r0, r5
 800916e:	47b8      	blx	r7
 8009170:	3001      	adds	r0, #1
 8009172:	f43f ae52 	beq.w	8008e1a <_printf_float+0xc2>
 8009176:	f108 0801 	add.w	r8, r8, #1
 800917a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800917c:	3b01      	subs	r3, #1
 800917e:	4543      	cmp	r3, r8
 8009180:	dcf1      	bgt.n	8009166 <_printf_float+0x40e>
 8009182:	464b      	mov	r3, r9
 8009184:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009188:	e6dc      	b.n	8008f44 <_printf_float+0x1ec>
 800918a:	f04f 0800 	mov.w	r8, #0
 800918e:	f104 0a1a 	add.w	sl, r4, #26
 8009192:	e7f2      	b.n	800917a <_printf_float+0x422>
 8009194:	2301      	movs	r3, #1
 8009196:	4642      	mov	r2, r8
 8009198:	e7df      	b.n	800915a <_printf_float+0x402>
 800919a:	2301      	movs	r3, #1
 800919c:	464a      	mov	r2, r9
 800919e:	4631      	mov	r1, r6
 80091a0:	4628      	mov	r0, r5
 80091a2:	47b8      	blx	r7
 80091a4:	3001      	adds	r0, #1
 80091a6:	f43f ae38 	beq.w	8008e1a <_printf_float+0xc2>
 80091aa:	f108 0801 	add.w	r8, r8, #1
 80091ae:	68e3      	ldr	r3, [r4, #12]
 80091b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091b2:	1a5b      	subs	r3, r3, r1
 80091b4:	4543      	cmp	r3, r8
 80091b6:	dcf0      	bgt.n	800919a <_printf_float+0x442>
 80091b8:	e6fa      	b.n	8008fb0 <_printf_float+0x258>
 80091ba:	f04f 0800 	mov.w	r8, #0
 80091be:	f104 0919 	add.w	r9, r4, #25
 80091c2:	e7f4      	b.n	80091ae <_printf_float+0x456>

080091c4 <_printf_common>:
 80091c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c8:	4616      	mov	r6, r2
 80091ca:	4699      	mov	r9, r3
 80091cc:	688a      	ldr	r2, [r1, #8]
 80091ce:	690b      	ldr	r3, [r1, #16]
 80091d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091d4:	4293      	cmp	r3, r2
 80091d6:	bfb8      	it	lt
 80091d8:	4613      	movlt	r3, r2
 80091da:	6033      	str	r3, [r6, #0]
 80091dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091e0:	4607      	mov	r7, r0
 80091e2:	460c      	mov	r4, r1
 80091e4:	b10a      	cbz	r2, 80091ea <_printf_common+0x26>
 80091e6:	3301      	adds	r3, #1
 80091e8:	6033      	str	r3, [r6, #0]
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	0699      	lsls	r1, r3, #26
 80091ee:	bf42      	ittt	mi
 80091f0:	6833      	ldrmi	r3, [r6, #0]
 80091f2:	3302      	addmi	r3, #2
 80091f4:	6033      	strmi	r3, [r6, #0]
 80091f6:	6825      	ldr	r5, [r4, #0]
 80091f8:	f015 0506 	ands.w	r5, r5, #6
 80091fc:	d106      	bne.n	800920c <_printf_common+0x48>
 80091fe:	f104 0a19 	add.w	sl, r4, #25
 8009202:	68e3      	ldr	r3, [r4, #12]
 8009204:	6832      	ldr	r2, [r6, #0]
 8009206:	1a9b      	subs	r3, r3, r2
 8009208:	42ab      	cmp	r3, r5
 800920a:	dc26      	bgt.n	800925a <_printf_common+0x96>
 800920c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009210:	1e13      	subs	r3, r2, #0
 8009212:	6822      	ldr	r2, [r4, #0]
 8009214:	bf18      	it	ne
 8009216:	2301      	movne	r3, #1
 8009218:	0692      	lsls	r2, r2, #26
 800921a:	d42b      	bmi.n	8009274 <_printf_common+0xb0>
 800921c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009220:	4649      	mov	r1, r9
 8009222:	4638      	mov	r0, r7
 8009224:	47c0      	blx	r8
 8009226:	3001      	adds	r0, #1
 8009228:	d01e      	beq.n	8009268 <_printf_common+0xa4>
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	68e5      	ldr	r5, [r4, #12]
 800922e:	6832      	ldr	r2, [r6, #0]
 8009230:	f003 0306 	and.w	r3, r3, #6
 8009234:	2b04      	cmp	r3, #4
 8009236:	bf08      	it	eq
 8009238:	1aad      	subeq	r5, r5, r2
 800923a:	68a3      	ldr	r3, [r4, #8]
 800923c:	6922      	ldr	r2, [r4, #16]
 800923e:	bf0c      	ite	eq
 8009240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009244:	2500      	movne	r5, #0
 8009246:	4293      	cmp	r3, r2
 8009248:	bfc4      	itt	gt
 800924a:	1a9b      	subgt	r3, r3, r2
 800924c:	18ed      	addgt	r5, r5, r3
 800924e:	2600      	movs	r6, #0
 8009250:	341a      	adds	r4, #26
 8009252:	42b5      	cmp	r5, r6
 8009254:	d11a      	bne.n	800928c <_printf_common+0xc8>
 8009256:	2000      	movs	r0, #0
 8009258:	e008      	b.n	800926c <_printf_common+0xa8>
 800925a:	2301      	movs	r3, #1
 800925c:	4652      	mov	r2, sl
 800925e:	4649      	mov	r1, r9
 8009260:	4638      	mov	r0, r7
 8009262:	47c0      	blx	r8
 8009264:	3001      	adds	r0, #1
 8009266:	d103      	bne.n	8009270 <_printf_common+0xac>
 8009268:	f04f 30ff 	mov.w	r0, #4294967295
 800926c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009270:	3501      	adds	r5, #1
 8009272:	e7c6      	b.n	8009202 <_printf_common+0x3e>
 8009274:	18e1      	adds	r1, r4, r3
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	2030      	movs	r0, #48	; 0x30
 800927a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800927e:	4422      	add	r2, r4
 8009280:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009284:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009288:	3302      	adds	r3, #2
 800928a:	e7c7      	b.n	800921c <_printf_common+0x58>
 800928c:	2301      	movs	r3, #1
 800928e:	4622      	mov	r2, r4
 8009290:	4649      	mov	r1, r9
 8009292:	4638      	mov	r0, r7
 8009294:	47c0      	blx	r8
 8009296:	3001      	adds	r0, #1
 8009298:	d0e6      	beq.n	8009268 <_printf_common+0xa4>
 800929a:	3601      	adds	r6, #1
 800929c:	e7d9      	b.n	8009252 <_printf_common+0x8e>
	...

080092a0 <_printf_i>:
 80092a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092a4:	7e0f      	ldrb	r7, [r1, #24]
 80092a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092a8:	2f78      	cmp	r7, #120	; 0x78
 80092aa:	4691      	mov	r9, r2
 80092ac:	4680      	mov	r8, r0
 80092ae:	460c      	mov	r4, r1
 80092b0:	469a      	mov	sl, r3
 80092b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092b6:	d807      	bhi.n	80092c8 <_printf_i+0x28>
 80092b8:	2f62      	cmp	r7, #98	; 0x62
 80092ba:	d80a      	bhi.n	80092d2 <_printf_i+0x32>
 80092bc:	2f00      	cmp	r7, #0
 80092be:	f000 80d8 	beq.w	8009472 <_printf_i+0x1d2>
 80092c2:	2f58      	cmp	r7, #88	; 0x58
 80092c4:	f000 80a3 	beq.w	800940e <_printf_i+0x16e>
 80092c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092d0:	e03a      	b.n	8009348 <_printf_i+0xa8>
 80092d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092d6:	2b15      	cmp	r3, #21
 80092d8:	d8f6      	bhi.n	80092c8 <_printf_i+0x28>
 80092da:	a101      	add	r1, pc, #4	; (adr r1, 80092e0 <_printf_i+0x40>)
 80092dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092e0:	08009339 	.word	0x08009339
 80092e4:	0800934d 	.word	0x0800934d
 80092e8:	080092c9 	.word	0x080092c9
 80092ec:	080092c9 	.word	0x080092c9
 80092f0:	080092c9 	.word	0x080092c9
 80092f4:	080092c9 	.word	0x080092c9
 80092f8:	0800934d 	.word	0x0800934d
 80092fc:	080092c9 	.word	0x080092c9
 8009300:	080092c9 	.word	0x080092c9
 8009304:	080092c9 	.word	0x080092c9
 8009308:	080092c9 	.word	0x080092c9
 800930c:	08009459 	.word	0x08009459
 8009310:	0800937d 	.word	0x0800937d
 8009314:	0800943b 	.word	0x0800943b
 8009318:	080092c9 	.word	0x080092c9
 800931c:	080092c9 	.word	0x080092c9
 8009320:	0800947b 	.word	0x0800947b
 8009324:	080092c9 	.word	0x080092c9
 8009328:	0800937d 	.word	0x0800937d
 800932c:	080092c9 	.word	0x080092c9
 8009330:	080092c9 	.word	0x080092c9
 8009334:	08009443 	.word	0x08009443
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	1d1a      	adds	r2, r3, #4
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	602a      	str	r2, [r5, #0]
 8009340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009348:	2301      	movs	r3, #1
 800934a:	e0a3      	b.n	8009494 <_printf_i+0x1f4>
 800934c:	6820      	ldr	r0, [r4, #0]
 800934e:	6829      	ldr	r1, [r5, #0]
 8009350:	0606      	lsls	r6, r0, #24
 8009352:	f101 0304 	add.w	r3, r1, #4
 8009356:	d50a      	bpl.n	800936e <_printf_i+0xce>
 8009358:	680e      	ldr	r6, [r1, #0]
 800935a:	602b      	str	r3, [r5, #0]
 800935c:	2e00      	cmp	r6, #0
 800935e:	da03      	bge.n	8009368 <_printf_i+0xc8>
 8009360:	232d      	movs	r3, #45	; 0x2d
 8009362:	4276      	negs	r6, r6
 8009364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009368:	485e      	ldr	r0, [pc, #376]	; (80094e4 <_printf_i+0x244>)
 800936a:	230a      	movs	r3, #10
 800936c:	e019      	b.n	80093a2 <_printf_i+0x102>
 800936e:	680e      	ldr	r6, [r1, #0]
 8009370:	602b      	str	r3, [r5, #0]
 8009372:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009376:	bf18      	it	ne
 8009378:	b236      	sxthne	r6, r6
 800937a:	e7ef      	b.n	800935c <_printf_i+0xbc>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	6820      	ldr	r0, [r4, #0]
 8009380:	1d19      	adds	r1, r3, #4
 8009382:	6029      	str	r1, [r5, #0]
 8009384:	0601      	lsls	r1, r0, #24
 8009386:	d501      	bpl.n	800938c <_printf_i+0xec>
 8009388:	681e      	ldr	r6, [r3, #0]
 800938a:	e002      	b.n	8009392 <_printf_i+0xf2>
 800938c:	0646      	lsls	r6, r0, #25
 800938e:	d5fb      	bpl.n	8009388 <_printf_i+0xe8>
 8009390:	881e      	ldrh	r6, [r3, #0]
 8009392:	4854      	ldr	r0, [pc, #336]	; (80094e4 <_printf_i+0x244>)
 8009394:	2f6f      	cmp	r7, #111	; 0x6f
 8009396:	bf0c      	ite	eq
 8009398:	2308      	moveq	r3, #8
 800939a:	230a      	movne	r3, #10
 800939c:	2100      	movs	r1, #0
 800939e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093a2:	6865      	ldr	r5, [r4, #4]
 80093a4:	60a5      	str	r5, [r4, #8]
 80093a6:	2d00      	cmp	r5, #0
 80093a8:	bfa2      	ittt	ge
 80093aa:	6821      	ldrge	r1, [r4, #0]
 80093ac:	f021 0104 	bicge.w	r1, r1, #4
 80093b0:	6021      	strge	r1, [r4, #0]
 80093b2:	b90e      	cbnz	r6, 80093b8 <_printf_i+0x118>
 80093b4:	2d00      	cmp	r5, #0
 80093b6:	d04d      	beq.n	8009454 <_printf_i+0x1b4>
 80093b8:	4615      	mov	r5, r2
 80093ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80093be:	fb03 6711 	mls	r7, r3, r1, r6
 80093c2:	5dc7      	ldrb	r7, [r0, r7]
 80093c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093c8:	4637      	mov	r7, r6
 80093ca:	42bb      	cmp	r3, r7
 80093cc:	460e      	mov	r6, r1
 80093ce:	d9f4      	bls.n	80093ba <_printf_i+0x11a>
 80093d0:	2b08      	cmp	r3, #8
 80093d2:	d10b      	bne.n	80093ec <_printf_i+0x14c>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	07de      	lsls	r6, r3, #31
 80093d8:	d508      	bpl.n	80093ec <_printf_i+0x14c>
 80093da:	6923      	ldr	r3, [r4, #16]
 80093dc:	6861      	ldr	r1, [r4, #4]
 80093de:	4299      	cmp	r1, r3
 80093e0:	bfde      	ittt	le
 80093e2:	2330      	movle	r3, #48	; 0x30
 80093e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093ec:	1b52      	subs	r2, r2, r5
 80093ee:	6122      	str	r2, [r4, #16]
 80093f0:	f8cd a000 	str.w	sl, [sp]
 80093f4:	464b      	mov	r3, r9
 80093f6:	aa03      	add	r2, sp, #12
 80093f8:	4621      	mov	r1, r4
 80093fa:	4640      	mov	r0, r8
 80093fc:	f7ff fee2 	bl	80091c4 <_printf_common>
 8009400:	3001      	adds	r0, #1
 8009402:	d14c      	bne.n	800949e <_printf_i+0x1fe>
 8009404:	f04f 30ff 	mov.w	r0, #4294967295
 8009408:	b004      	add	sp, #16
 800940a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940e:	4835      	ldr	r0, [pc, #212]	; (80094e4 <_printf_i+0x244>)
 8009410:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009414:	6829      	ldr	r1, [r5, #0]
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	f851 6b04 	ldr.w	r6, [r1], #4
 800941c:	6029      	str	r1, [r5, #0]
 800941e:	061d      	lsls	r5, r3, #24
 8009420:	d514      	bpl.n	800944c <_printf_i+0x1ac>
 8009422:	07df      	lsls	r7, r3, #31
 8009424:	bf44      	itt	mi
 8009426:	f043 0320 	orrmi.w	r3, r3, #32
 800942a:	6023      	strmi	r3, [r4, #0]
 800942c:	b91e      	cbnz	r6, 8009436 <_printf_i+0x196>
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	f023 0320 	bic.w	r3, r3, #32
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	2310      	movs	r3, #16
 8009438:	e7b0      	b.n	800939c <_printf_i+0xfc>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	f043 0320 	orr.w	r3, r3, #32
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	2378      	movs	r3, #120	; 0x78
 8009444:	4828      	ldr	r0, [pc, #160]	; (80094e8 <_printf_i+0x248>)
 8009446:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800944a:	e7e3      	b.n	8009414 <_printf_i+0x174>
 800944c:	0659      	lsls	r1, r3, #25
 800944e:	bf48      	it	mi
 8009450:	b2b6      	uxthmi	r6, r6
 8009452:	e7e6      	b.n	8009422 <_printf_i+0x182>
 8009454:	4615      	mov	r5, r2
 8009456:	e7bb      	b.n	80093d0 <_printf_i+0x130>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	6826      	ldr	r6, [r4, #0]
 800945c:	6961      	ldr	r1, [r4, #20]
 800945e:	1d18      	adds	r0, r3, #4
 8009460:	6028      	str	r0, [r5, #0]
 8009462:	0635      	lsls	r5, r6, #24
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	d501      	bpl.n	800946c <_printf_i+0x1cc>
 8009468:	6019      	str	r1, [r3, #0]
 800946a:	e002      	b.n	8009472 <_printf_i+0x1d2>
 800946c:	0670      	lsls	r0, r6, #25
 800946e:	d5fb      	bpl.n	8009468 <_printf_i+0x1c8>
 8009470:	8019      	strh	r1, [r3, #0]
 8009472:	2300      	movs	r3, #0
 8009474:	6123      	str	r3, [r4, #16]
 8009476:	4615      	mov	r5, r2
 8009478:	e7ba      	b.n	80093f0 <_printf_i+0x150>
 800947a:	682b      	ldr	r3, [r5, #0]
 800947c:	1d1a      	adds	r2, r3, #4
 800947e:	602a      	str	r2, [r5, #0]
 8009480:	681d      	ldr	r5, [r3, #0]
 8009482:	6862      	ldr	r2, [r4, #4]
 8009484:	2100      	movs	r1, #0
 8009486:	4628      	mov	r0, r5
 8009488:	f7f6 feaa 	bl	80001e0 <memchr>
 800948c:	b108      	cbz	r0, 8009492 <_printf_i+0x1f2>
 800948e:	1b40      	subs	r0, r0, r5
 8009490:	6060      	str	r0, [r4, #4]
 8009492:	6863      	ldr	r3, [r4, #4]
 8009494:	6123      	str	r3, [r4, #16]
 8009496:	2300      	movs	r3, #0
 8009498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800949c:	e7a8      	b.n	80093f0 <_printf_i+0x150>
 800949e:	6923      	ldr	r3, [r4, #16]
 80094a0:	462a      	mov	r2, r5
 80094a2:	4649      	mov	r1, r9
 80094a4:	4640      	mov	r0, r8
 80094a6:	47d0      	blx	sl
 80094a8:	3001      	adds	r0, #1
 80094aa:	d0ab      	beq.n	8009404 <_printf_i+0x164>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	079b      	lsls	r3, r3, #30
 80094b0:	d413      	bmi.n	80094da <_printf_i+0x23a>
 80094b2:	68e0      	ldr	r0, [r4, #12]
 80094b4:	9b03      	ldr	r3, [sp, #12]
 80094b6:	4298      	cmp	r0, r3
 80094b8:	bfb8      	it	lt
 80094ba:	4618      	movlt	r0, r3
 80094bc:	e7a4      	b.n	8009408 <_printf_i+0x168>
 80094be:	2301      	movs	r3, #1
 80094c0:	4632      	mov	r2, r6
 80094c2:	4649      	mov	r1, r9
 80094c4:	4640      	mov	r0, r8
 80094c6:	47d0      	blx	sl
 80094c8:	3001      	adds	r0, #1
 80094ca:	d09b      	beq.n	8009404 <_printf_i+0x164>
 80094cc:	3501      	adds	r5, #1
 80094ce:	68e3      	ldr	r3, [r4, #12]
 80094d0:	9903      	ldr	r1, [sp, #12]
 80094d2:	1a5b      	subs	r3, r3, r1
 80094d4:	42ab      	cmp	r3, r5
 80094d6:	dcf2      	bgt.n	80094be <_printf_i+0x21e>
 80094d8:	e7eb      	b.n	80094b2 <_printf_i+0x212>
 80094da:	2500      	movs	r5, #0
 80094dc:	f104 0619 	add.w	r6, r4, #25
 80094e0:	e7f5      	b.n	80094ce <_printf_i+0x22e>
 80094e2:	bf00      	nop
 80094e4:	0800d902 	.word	0x0800d902
 80094e8:	0800d913 	.word	0x0800d913

080094ec <siprintf>:
 80094ec:	b40e      	push	{r1, r2, r3}
 80094ee:	b500      	push	{lr}
 80094f0:	b09c      	sub	sp, #112	; 0x70
 80094f2:	ab1d      	add	r3, sp, #116	; 0x74
 80094f4:	9002      	str	r0, [sp, #8]
 80094f6:	9006      	str	r0, [sp, #24]
 80094f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094fc:	4809      	ldr	r0, [pc, #36]	; (8009524 <siprintf+0x38>)
 80094fe:	9107      	str	r1, [sp, #28]
 8009500:	9104      	str	r1, [sp, #16]
 8009502:	4909      	ldr	r1, [pc, #36]	; (8009528 <siprintf+0x3c>)
 8009504:	f853 2b04 	ldr.w	r2, [r3], #4
 8009508:	9105      	str	r1, [sp, #20]
 800950a:	6800      	ldr	r0, [r0, #0]
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	a902      	add	r1, sp, #8
 8009510:	f001 fb6a 	bl	800abe8 <_svfiprintf_r>
 8009514:	9b02      	ldr	r3, [sp, #8]
 8009516:	2200      	movs	r2, #0
 8009518:	701a      	strb	r2, [r3, #0]
 800951a:	b01c      	add	sp, #112	; 0x70
 800951c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009520:	b003      	add	sp, #12
 8009522:	4770      	bx	lr
 8009524:	2000001c 	.word	0x2000001c
 8009528:	ffff0208 	.word	0xffff0208

0800952c <quorem>:
 800952c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009530:	6903      	ldr	r3, [r0, #16]
 8009532:	690c      	ldr	r4, [r1, #16]
 8009534:	42a3      	cmp	r3, r4
 8009536:	4607      	mov	r7, r0
 8009538:	f2c0 8081 	blt.w	800963e <quorem+0x112>
 800953c:	3c01      	subs	r4, #1
 800953e:	f101 0814 	add.w	r8, r1, #20
 8009542:	f100 0514 	add.w	r5, r0, #20
 8009546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800954a:	9301      	str	r3, [sp, #4]
 800954c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009554:	3301      	adds	r3, #1
 8009556:	429a      	cmp	r2, r3
 8009558:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800955c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009560:	fbb2 f6f3 	udiv	r6, r2, r3
 8009564:	d331      	bcc.n	80095ca <quorem+0x9e>
 8009566:	f04f 0e00 	mov.w	lr, #0
 800956a:	4640      	mov	r0, r8
 800956c:	46ac      	mov	ip, r5
 800956e:	46f2      	mov	sl, lr
 8009570:	f850 2b04 	ldr.w	r2, [r0], #4
 8009574:	b293      	uxth	r3, r2
 8009576:	fb06 e303 	mla	r3, r6, r3, lr
 800957a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800957e:	b29b      	uxth	r3, r3
 8009580:	ebaa 0303 	sub.w	r3, sl, r3
 8009584:	f8dc a000 	ldr.w	sl, [ip]
 8009588:	0c12      	lsrs	r2, r2, #16
 800958a:	fa13 f38a 	uxtah	r3, r3, sl
 800958e:	fb06 e202 	mla	r2, r6, r2, lr
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	9b00      	ldr	r3, [sp, #0]
 8009596:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800959a:	b292      	uxth	r2, r2
 800959c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80095a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80095a8:	4581      	cmp	r9, r0
 80095aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095ae:	f84c 3b04 	str.w	r3, [ip], #4
 80095b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80095b6:	d2db      	bcs.n	8009570 <quorem+0x44>
 80095b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80095bc:	b92b      	cbnz	r3, 80095ca <quorem+0x9e>
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	3b04      	subs	r3, #4
 80095c2:	429d      	cmp	r5, r3
 80095c4:	461a      	mov	r2, r3
 80095c6:	d32e      	bcc.n	8009626 <quorem+0xfa>
 80095c8:	613c      	str	r4, [r7, #16]
 80095ca:	4638      	mov	r0, r7
 80095cc:	f001 f8b8 	bl	800a740 <__mcmp>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	db24      	blt.n	800961e <quorem+0xf2>
 80095d4:	3601      	adds	r6, #1
 80095d6:	4628      	mov	r0, r5
 80095d8:	f04f 0c00 	mov.w	ip, #0
 80095dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80095e0:	f8d0 e000 	ldr.w	lr, [r0]
 80095e4:	b293      	uxth	r3, r2
 80095e6:	ebac 0303 	sub.w	r3, ip, r3
 80095ea:	0c12      	lsrs	r2, r2, #16
 80095ec:	fa13 f38e 	uxtah	r3, r3, lr
 80095f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80095f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095fe:	45c1      	cmp	r9, r8
 8009600:	f840 3b04 	str.w	r3, [r0], #4
 8009604:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009608:	d2e8      	bcs.n	80095dc <quorem+0xb0>
 800960a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800960e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009612:	b922      	cbnz	r2, 800961e <quorem+0xf2>
 8009614:	3b04      	subs	r3, #4
 8009616:	429d      	cmp	r5, r3
 8009618:	461a      	mov	r2, r3
 800961a:	d30a      	bcc.n	8009632 <quorem+0x106>
 800961c:	613c      	str	r4, [r7, #16]
 800961e:	4630      	mov	r0, r6
 8009620:	b003      	add	sp, #12
 8009622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009626:	6812      	ldr	r2, [r2, #0]
 8009628:	3b04      	subs	r3, #4
 800962a:	2a00      	cmp	r2, #0
 800962c:	d1cc      	bne.n	80095c8 <quorem+0x9c>
 800962e:	3c01      	subs	r4, #1
 8009630:	e7c7      	b.n	80095c2 <quorem+0x96>
 8009632:	6812      	ldr	r2, [r2, #0]
 8009634:	3b04      	subs	r3, #4
 8009636:	2a00      	cmp	r2, #0
 8009638:	d1f0      	bne.n	800961c <quorem+0xf0>
 800963a:	3c01      	subs	r4, #1
 800963c:	e7eb      	b.n	8009616 <quorem+0xea>
 800963e:	2000      	movs	r0, #0
 8009640:	e7ee      	b.n	8009620 <quorem+0xf4>
 8009642:	0000      	movs	r0, r0
 8009644:	0000      	movs	r0, r0
	...

08009648 <_dtoa_r>:
 8009648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964c:	ed2d 8b04 	vpush	{d8-d9}
 8009650:	ec57 6b10 	vmov	r6, r7, d0
 8009654:	b093      	sub	sp, #76	; 0x4c
 8009656:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009658:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800965c:	9106      	str	r1, [sp, #24]
 800965e:	ee10 aa10 	vmov	sl, s0
 8009662:	4604      	mov	r4, r0
 8009664:	9209      	str	r2, [sp, #36]	; 0x24
 8009666:	930c      	str	r3, [sp, #48]	; 0x30
 8009668:	46bb      	mov	fp, r7
 800966a:	b975      	cbnz	r5, 800968a <_dtoa_r+0x42>
 800966c:	2010      	movs	r0, #16
 800966e:	f000 fddd 	bl	800a22c <malloc>
 8009672:	4602      	mov	r2, r0
 8009674:	6260      	str	r0, [r4, #36]	; 0x24
 8009676:	b920      	cbnz	r0, 8009682 <_dtoa_r+0x3a>
 8009678:	4ba7      	ldr	r3, [pc, #668]	; (8009918 <_dtoa_r+0x2d0>)
 800967a:	21ea      	movs	r1, #234	; 0xea
 800967c:	48a7      	ldr	r0, [pc, #668]	; (800991c <_dtoa_r+0x2d4>)
 800967e:	f001 fbc3 	bl	800ae08 <__assert_func>
 8009682:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009686:	6005      	str	r5, [r0, #0]
 8009688:	60c5      	str	r5, [r0, #12]
 800968a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800968c:	6819      	ldr	r1, [r3, #0]
 800968e:	b151      	cbz	r1, 80096a6 <_dtoa_r+0x5e>
 8009690:	685a      	ldr	r2, [r3, #4]
 8009692:	604a      	str	r2, [r1, #4]
 8009694:	2301      	movs	r3, #1
 8009696:	4093      	lsls	r3, r2
 8009698:	608b      	str	r3, [r1, #8]
 800969a:	4620      	mov	r0, r4
 800969c:	f000 fe0e 	bl	800a2bc <_Bfree>
 80096a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]
 80096a6:	1e3b      	subs	r3, r7, #0
 80096a8:	bfaa      	itet	ge
 80096aa:	2300      	movge	r3, #0
 80096ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80096b0:	f8c8 3000 	strge.w	r3, [r8]
 80096b4:	4b9a      	ldr	r3, [pc, #616]	; (8009920 <_dtoa_r+0x2d8>)
 80096b6:	bfbc      	itt	lt
 80096b8:	2201      	movlt	r2, #1
 80096ba:	f8c8 2000 	strlt.w	r2, [r8]
 80096be:	ea33 030b 	bics.w	r3, r3, fp
 80096c2:	d11b      	bne.n	80096fc <_dtoa_r+0xb4>
 80096c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80096ca:	6013      	str	r3, [r2, #0]
 80096cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096d0:	4333      	orrs	r3, r6
 80096d2:	f000 8592 	beq.w	800a1fa <_dtoa_r+0xbb2>
 80096d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096d8:	b963      	cbnz	r3, 80096f4 <_dtoa_r+0xac>
 80096da:	4b92      	ldr	r3, [pc, #584]	; (8009924 <_dtoa_r+0x2dc>)
 80096dc:	e022      	b.n	8009724 <_dtoa_r+0xdc>
 80096de:	4b92      	ldr	r3, [pc, #584]	; (8009928 <_dtoa_r+0x2e0>)
 80096e0:	9301      	str	r3, [sp, #4]
 80096e2:	3308      	adds	r3, #8
 80096e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	9801      	ldr	r0, [sp, #4]
 80096ea:	b013      	add	sp, #76	; 0x4c
 80096ec:	ecbd 8b04 	vpop	{d8-d9}
 80096f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f4:	4b8b      	ldr	r3, [pc, #556]	; (8009924 <_dtoa_r+0x2dc>)
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	3303      	adds	r3, #3
 80096fa:	e7f3      	b.n	80096e4 <_dtoa_r+0x9c>
 80096fc:	2200      	movs	r2, #0
 80096fe:	2300      	movs	r3, #0
 8009700:	4650      	mov	r0, sl
 8009702:	4659      	mov	r1, fp
 8009704:	f7f7 f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009708:	ec4b ab19 	vmov	d9, sl, fp
 800970c:	4680      	mov	r8, r0
 800970e:	b158      	cbz	r0, 8009728 <_dtoa_r+0xe0>
 8009710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009712:	2301      	movs	r3, #1
 8009714:	6013      	str	r3, [r2, #0]
 8009716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 856b 	beq.w	800a1f4 <_dtoa_r+0xbac>
 800971e:	4883      	ldr	r0, [pc, #524]	; (800992c <_dtoa_r+0x2e4>)
 8009720:	6018      	str	r0, [r3, #0]
 8009722:	1e43      	subs	r3, r0, #1
 8009724:	9301      	str	r3, [sp, #4]
 8009726:	e7df      	b.n	80096e8 <_dtoa_r+0xa0>
 8009728:	ec4b ab10 	vmov	d0, sl, fp
 800972c:	aa10      	add	r2, sp, #64	; 0x40
 800972e:	a911      	add	r1, sp, #68	; 0x44
 8009730:	4620      	mov	r0, r4
 8009732:	f001 f8ab 	bl	800a88c <__d2b>
 8009736:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800973a:	ee08 0a10 	vmov	s16, r0
 800973e:	2d00      	cmp	r5, #0
 8009740:	f000 8084 	beq.w	800984c <_dtoa_r+0x204>
 8009744:	ee19 3a90 	vmov	r3, s19
 8009748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800974c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009750:	4656      	mov	r6, sl
 8009752:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009756:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800975a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800975e:	4b74      	ldr	r3, [pc, #464]	; (8009930 <_dtoa_r+0x2e8>)
 8009760:	2200      	movs	r2, #0
 8009762:	4630      	mov	r0, r6
 8009764:	4639      	mov	r1, r7
 8009766:	f7f6 fd8f 	bl	8000288 <__aeabi_dsub>
 800976a:	a365      	add	r3, pc, #404	; (adr r3, 8009900 <_dtoa_r+0x2b8>)
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	f7f6 ff42 	bl	80005f8 <__aeabi_dmul>
 8009774:	a364      	add	r3, pc, #400	; (adr r3, 8009908 <_dtoa_r+0x2c0>)
 8009776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977a:	f7f6 fd87 	bl	800028c <__adddf3>
 800977e:	4606      	mov	r6, r0
 8009780:	4628      	mov	r0, r5
 8009782:	460f      	mov	r7, r1
 8009784:	f7f6 fece 	bl	8000524 <__aeabi_i2d>
 8009788:	a361      	add	r3, pc, #388	; (adr r3, 8009910 <_dtoa_r+0x2c8>)
 800978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978e:	f7f6 ff33 	bl	80005f8 <__aeabi_dmul>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	4630      	mov	r0, r6
 8009798:	4639      	mov	r1, r7
 800979a:	f7f6 fd77 	bl	800028c <__adddf3>
 800979e:	4606      	mov	r6, r0
 80097a0:	460f      	mov	r7, r1
 80097a2:	f7f7 f9d9 	bl	8000b58 <__aeabi_d2iz>
 80097a6:	2200      	movs	r2, #0
 80097a8:	9000      	str	r0, [sp, #0]
 80097aa:	2300      	movs	r3, #0
 80097ac:	4630      	mov	r0, r6
 80097ae:	4639      	mov	r1, r7
 80097b0:	f7f7 f994 	bl	8000adc <__aeabi_dcmplt>
 80097b4:	b150      	cbz	r0, 80097cc <_dtoa_r+0x184>
 80097b6:	9800      	ldr	r0, [sp, #0]
 80097b8:	f7f6 feb4 	bl	8000524 <__aeabi_i2d>
 80097bc:	4632      	mov	r2, r6
 80097be:	463b      	mov	r3, r7
 80097c0:	f7f7 f982 	bl	8000ac8 <__aeabi_dcmpeq>
 80097c4:	b910      	cbnz	r0, 80097cc <_dtoa_r+0x184>
 80097c6:	9b00      	ldr	r3, [sp, #0]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	9b00      	ldr	r3, [sp, #0]
 80097ce:	2b16      	cmp	r3, #22
 80097d0:	d85a      	bhi.n	8009888 <_dtoa_r+0x240>
 80097d2:	9a00      	ldr	r2, [sp, #0]
 80097d4:	4b57      	ldr	r3, [pc, #348]	; (8009934 <_dtoa_r+0x2ec>)
 80097d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	ec51 0b19 	vmov	r0, r1, d9
 80097e2:	f7f7 f97b 	bl	8000adc <__aeabi_dcmplt>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d050      	beq.n	800988c <_dtoa_r+0x244>
 80097ea:	9b00      	ldr	r3, [sp, #0]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	2300      	movs	r3, #0
 80097f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80097f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097f6:	1b5d      	subs	r5, r3, r5
 80097f8:	1e6b      	subs	r3, r5, #1
 80097fa:	9305      	str	r3, [sp, #20]
 80097fc:	bf45      	ittet	mi
 80097fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8009802:	9304      	strmi	r3, [sp, #16]
 8009804:	2300      	movpl	r3, #0
 8009806:	2300      	movmi	r3, #0
 8009808:	bf4c      	ite	mi
 800980a:	9305      	strmi	r3, [sp, #20]
 800980c:	9304      	strpl	r3, [sp, #16]
 800980e:	9b00      	ldr	r3, [sp, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	db3d      	blt.n	8009890 <_dtoa_r+0x248>
 8009814:	9b05      	ldr	r3, [sp, #20]
 8009816:	9a00      	ldr	r2, [sp, #0]
 8009818:	920a      	str	r2, [sp, #40]	; 0x28
 800981a:	4413      	add	r3, r2
 800981c:	9305      	str	r3, [sp, #20]
 800981e:	2300      	movs	r3, #0
 8009820:	9307      	str	r3, [sp, #28]
 8009822:	9b06      	ldr	r3, [sp, #24]
 8009824:	2b09      	cmp	r3, #9
 8009826:	f200 8089 	bhi.w	800993c <_dtoa_r+0x2f4>
 800982a:	2b05      	cmp	r3, #5
 800982c:	bfc4      	itt	gt
 800982e:	3b04      	subgt	r3, #4
 8009830:	9306      	strgt	r3, [sp, #24]
 8009832:	9b06      	ldr	r3, [sp, #24]
 8009834:	f1a3 0302 	sub.w	r3, r3, #2
 8009838:	bfcc      	ite	gt
 800983a:	2500      	movgt	r5, #0
 800983c:	2501      	movle	r5, #1
 800983e:	2b03      	cmp	r3, #3
 8009840:	f200 8087 	bhi.w	8009952 <_dtoa_r+0x30a>
 8009844:	e8df f003 	tbb	[pc, r3]
 8009848:	59383a2d 	.word	0x59383a2d
 800984c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009850:	441d      	add	r5, r3
 8009852:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009856:	2b20      	cmp	r3, #32
 8009858:	bfc1      	itttt	gt
 800985a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800985e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009862:	fa0b f303 	lslgt.w	r3, fp, r3
 8009866:	fa26 f000 	lsrgt.w	r0, r6, r0
 800986a:	bfda      	itte	le
 800986c:	f1c3 0320 	rsble	r3, r3, #32
 8009870:	fa06 f003 	lslle.w	r0, r6, r3
 8009874:	4318      	orrgt	r0, r3
 8009876:	f7f6 fe45 	bl	8000504 <__aeabi_ui2d>
 800987a:	2301      	movs	r3, #1
 800987c:	4606      	mov	r6, r0
 800987e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009882:	3d01      	subs	r5, #1
 8009884:	930e      	str	r3, [sp, #56]	; 0x38
 8009886:	e76a      	b.n	800975e <_dtoa_r+0x116>
 8009888:	2301      	movs	r3, #1
 800988a:	e7b2      	b.n	80097f2 <_dtoa_r+0x1aa>
 800988c:	900b      	str	r0, [sp, #44]	; 0x2c
 800988e:	e7b1      	b.n	80097f4 <_dtoa_r+0x1ac>
 8009890:	9b04      	ldr	r3, [sp, #16]
 8009892:	9a00      	ldr	r2, [sp, #0]
 8009894:	1a9b      	subs	r3, r3, r2
 8009896:	9304      	str	r3, [sp, #16]
 8009898:	4253      	negs	r3, r2
 800989a:	9307      	str	r3, [sp, #28]
 800989c:	2300      	movs	r3, #0
 800989e:	930a      	str	r3, [sp, #40]	; 0x28
 80098a0:	e7bf      	b.n	8009822 <_dtoa_r+0x1da>
 80098a2:	2300      	movs	r3, #0
 80098a4:	9308      	str	r3, [sp, #32]
 80098a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	dc55      	bgt.n	8009958 <_dtoa_r+0x310>
 80098ac:	2301      	movs	r3, #1
 80098ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098b2:	461a      	mov	r2, r3
 80098b4:	9209      	str	r2, [sp, #36]	; 0x24
 80098b6:	e00c      	b.n	80098d2 <_dtoa_r+0x28a>
 80098b8:	2301      	movs	r3, #1
 80098ba:	e7f3      	b.n	80098a4 <_dtoa_r+0x25c>
 80098bc:	2300      	movs	r3, #0
 80098be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098c0:	9308      	str	r3, [sp, #32]
 80098c2:	9b00      	ldr	r3, [sp, #0]
 80098c4:	4413      	add	r3, r2
 80098c6:	9302      	str	r3, [sp, #8]
 80098c8:	3301      	adds	r3, #1
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	9303      	str	r3, [sp, #12]
 80098ce:	bfb8      	it	lt
 80098d0:	2301      	movlt	r3, #1
 80098d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80098d4:	2200      	movs	r2, #0
 80098d6:	6042      	str	r2, [r0, #4]
 80098d8:	2204      	movs	r2, #4
 80098da:	f102 0614 	add.w	r6, r2, #20
 80098de:	429e      	cmp	r6, r3
 80098e0:	6841      	ldr	r1, [r0, #4]
 80098e2:	d93d      	bls.n	8009960 <_dtoa_r+0x318>
 80098e4:	4620      	mov	r0, r4
 80098e6:	f000 fca9 	bl	800a23c <_Balloc>
 80098ea:	9001      	str	r0, [sp, #4]
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d13b      	bne.n	8009968 <_dtoa_r+0x320>
 80098f0:	4b11      	ldr	r3, [pc, #68]	; (8009938 <_dtoa_r+0x2f0>)
 80098f2:	4602      	mov	r2, r0
 80098f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80098f8:	e6c0      	b.n	800967c <_dtoa_r+0x34>
 80098fa:	2301      	movs	r3, #1
 80098fc:	e7df      	b.n	80098be <_dtoa_r+0x276>
 80098fe:	bf00      	nop
 8009900:	636f4361 	.word	0x636f4361
 8009904:	3fd287a7 	.word	0x3fd287a7
 8009908:	8b60c8b3 	.word	0x8b60c8b3
 800990c:	3fc68a28 	.word	0x3fc68a28
 8009910:	509f79fb 	.word	0x509f79fb
 8009914:	3fd34413 	.word	0x3fd34413
 8009918:	0800d931 	.word	0x0800d931
 800991c:	0800d948 	.word	0x0800d948
 8009920:	7ff00000 	.word	0x7ff00000
 8009924:	0800d92d 	.word	0x0800d92d
 8009928:	0800d924 	.word	0x0800d924
 800992c:	0800d901 	.word	0x0800d901
 8009930:	3ff80000 	.word	0x3ff80000
 8009934:	0800da38 	.word	0x0800da38
 8009938:	0800d9a3 	.word	0x0800d9a3
 800993c:	2501      	movs	r5, #1
 800993e:	2300      	movs	r3, #0
 8009940:	9306      	str	r3, [sp, #24]
 8009942:	9508      	str	r5, [sp, #32]
 8009944:	f04f 33ff 	mov.w	r3, #4294967295
 8009948:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800994c:	2200      	movs	r2, #0
 800994e:	2312      	movs	r3, #18
 8009950:	e7b0      	b.n	80098b4 <_dtoa_r+0x26c>
 8009952:	2301      	movs	r3, #1
 8009954:	9308      	str	r3, [sp, #32]
 8009956:	e7f5      	b.n	8009944 <_dtoa_r+0x2fc>
 8009958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800995e:	e7b8      	b.n	80098d2 <_dtoa_r+0x28a>
 8009960:	3101      	adds	r1, #1
 8009962:	6041      	str	r1, [r0, #4]
 8009964:	0052      	lsls	r2, r2, #1
 8009966:	e7b8      	b.n	80098da <_dtoa_r+0x292>
 8009968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800996a:	9a01      	ldr	r2, [sp, #4]
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	2b0e      	cmp	r3, #14
 8009972:	f200 809d 	bhi.w	8009ab0 <_dtoa_r+0x468>
 8009976:	2d00      	cmp	r5, #0
 8009978:	f000 809a 	beq.w	8009ab0 <_dtoa_r+0x468>
 800997c:	9b00      	ldr	r3, [sp, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	dd32      	ble.n	80099e8 <_dtoa_r+0x3a0>
 8009982:	4ab7      	ldr	r2, [pc, #732]	; (8009c60 <_dtoa_r+0x618>)
 8009984:	f003 030f 	and.w	r3, r3, #15
 8009988:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800998c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009990:	9b00      	ldr	r3, [sp, #0]
 8009992:	05d8      	lsls	r0, r3, #23
 8009994:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009998:	d516      	bpl.n	80099c8 <_dtoa_r+0x380>
 800999a:	4bb2      	ldr	r3, [pc, #712]	; (8009c64 <_dtoa_r+0x61c>)
 800999c:	ec51 0b19 	vmov	r0, r1, d9
 80099a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099a4:	f7f6 ff52 	bl	800084c <__aeabi_ddiv>
 80099a8:	f007 070f 	and.w	r7, r7, #15
 80099ac:	4682      	mov	sl, r0
 80099ae:	468b      	mov	fp, r1
 80099b0:	2503      	movs	r5, #3
 80099b2:	4eac      	ldr	r6, [pc, #688]	; (8009c64 <_dtoa_r+0x61c>)
 80099b4:	b957      	cbnz	r7, 80099cc <_dtoa_r+0x384>
 80099b6:	4642      	mov	r2, r8
 80099b8:	464b      	mov	r3, r9
 80099ba:	4650      	mov	r0, sl
 80099bc:	4659      	mov	r1, fp
 80099be:	f7f6 ff45 	bl	800084c <__aeabi_ddiv>
 80099c2:	4682      	mov	sl, r0
 80099c4:	468b      	mov	fp, r1
 80099c6:	e028      	b.n	8009a1a <_dtoa_r+0x3d2>
 80099c8:	2502      	movs	r5, #2
 80099ca:	e7f2      	b.n	80099b2 <_dtoa_r+0x36a>
 80099cc:	07f9      	lsls	r1, r7, #31
 80099ce:	d508      	bpl.n	80099e2 <_dtoa_r+0x39a>
 80099d0:	4640      	mov	r0, r8
 80099d2:	4649      	mov	r1, r9
 80099d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099d8:	f7f6 fe0e 	bl	80005f8 <__aeabi_dmul>
 80099dc:	3501      	adds	r5, #1
 80099de:	4680      	mov	r8, r0
 80099e0:	4689      	mov	r9, r1
 80099e2:	107f      	asrs	r7, r7, #1
 80099e4:	3608      	adds	r6, #8
 80099e6:	e7e5      	b.n	80099b4 <_dtoa_r+0x36c>
 80099e8:	f000 809b 	beq.w	8009b22 <_dtoa_r+0x4da>
 80099ec:	9b00      	ldr	r3, [sp, #0]
 80099ee:	4f9d      	ldr	r7, [pc, #628]	; (8009c64 <_dtoa_r+0x61c>)
 80099f0:	425e      	negs	r6, r3
 80099f2:	4b9b      	ldr	r3, [pc, #620]	; (8009c60 <_dtoa_r+0x618>)
 80099f4:	f006 020f 	and.w	r2, r6, #15
 80099f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a00:	ec51 0b19 	vmov	r0, r1, d9
 8009a04:	f7f6 fdf8 	bl	80005f8 <__aeabi_dmul>
 8009a08:	1136      	asrs	r6, r6, #4
 8009a0a:	4682      	mov	sl, r0
 8009a0c:	468b      	mov	fp, r1
 8009a0e:	2300      	movs	r3, #0
 8009a10:	2502      	movs	r5, #2
 8009a12:	2e00      	cmp	r6, #0
 8009a14:	d17a      	bne.n	8009b0c <_dtoa_r+0x4c4>
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1d3      	bne.n	80099c2 <_dtoa_r+0x37a>
 8009a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 8082 	beq.w	8009b26 <_dtoa_r+0x4de>
 8009a22:	4b91      	ldr	r3, [pc, #580]	; (8009c68 <_dtoa_r+0x620>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	4650      	mov	r0, sl
 8009a28:	4659      	mov	r1, fp
 8009a2a:	f7f7 f857 	bl	8000adc <__aeabi_dcmplt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d079      	beq.n	8009b26 <_dtoa_r+0x4de>
 8009a32:	9b03      	ldr	r3, [sp, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d076      	beq.n	8009b26 <_dtoa_r+0x4de>
 8009a38:	9b02      	ldr	r3, [sp, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	dd36      	ble.n	8009aac <_dtoa_r+0x464>
 8009a3e:	9b00      	ldr	r3, [sp, #0]
 8009a40:	4650      	mov	r0, sl
 8009a42:	4659      	mov	r1, fp
 8009a44:	1e5f      	subs	r7, r3, #1
 8009a46:	2200      	movs	r2, #0
 8009a48:	4b88      	ldr	r3, [pc, #544]	; (8009c6c <_dtoa_r+0x624>)
 8009a4a:	f7f6 fdd5 	bl	80005f8 <__aeabi_dmul>
 8009a4e:	9e02      	ldr	r6, [sp, #8]
 8009a50:	4682      	mov	sl, r0
 8009a52:	468b      	mov	fp, r1
 8009a54:	3501      	adds	r5, #1
 8009a56:	4628      	mov	r0, r5
 8009a58:	f7f6 fd64 	bl	8000524 <__aeabi_i2d>
 8009a5c:	4652      	mov	r2, sl
 8009a5e:	465b      	mov	r3, fp
 8009a60:	f7f6 fdca 	bl	80005f8 <__aeabi_dmul>
 8009a64:	4b82      	ldr	r3, [pc, #520]	; (8009c70 <_dtoa_r+0x628>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	f7f6 fc10 	bl	800028c <__adddf3>
 8009a6c:	46d0      	mov	r8, sl
 8009a6e:	46d9      	mov	r9, fp
 8009a70:	4682      	mov	sl, r0
 8009a72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009a76:	2e00      	cmp	r6, #0
 8009a78:	d158      	bne.n	8009b2c <_dtoa_r+0x4e4>
 8009a7a:	4b7e      	ldr	r3, [pc, #504]	; (8009c74 <_dtoa_r+0x62c>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	4640      	mov	r0, r8
 8009a80:	4649      	mov	r1, r9
 8009a82:	f7f6 fc01 	bl	8000288 <__aeabi_dsub>
 8009a86:	4652      	mov	r2, sl
 8009a88:	465b      	mov	r3, fp
 8009a8a:	4680      	mov	r8, r0
 8009a8c:	4689      	mov	r9, r1
 8009a8e:	f7f7 f843 	bl	8000b18 <__aeabi_dcmpgt>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	f040 8295 	bne.w	8009fc2 <_dtoa_r+0x97a>
 8009a98:	4652      	mov	r2, sl
 8009a9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009a9e:	4640      	mov	r0, r8
 8009aa0:	4649      	mov	r1, r9
 8009aa2:	f7f7 f81b 	bl	8000adc <__aeabi_dcmplt>
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	f040 8289 	bne.w	8009fbe <_dtoa_r+0x976>
 8009aac:	ec5b ab19 	vmov	sl, fp, d9
 8009ab0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f2c0 8148 	blt.w	8009d48 <_dtoa_r+0x700>
 8009ab8:	9a00      	ldr	r2, [sp, #0]
 8009aba:	2a0e      	cmp	r2, #14
 8009abc:	f300 8144 	bgt.w	8009d48 <_dtoa_r+0x700>
 8009ac0:	4b67      	ldr	r3, [pc, #412]	; (8009c60 <_dtoa_r+0x618>)
 8009ac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ac6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f280 80d5 	bge.w	8009c7c <_dtoa_r+0x634>
 8009ad2:	9b03      	ldr	r3, [sp, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f300 80d1 	bgt.w	8009c7c <_dtoa_r+0x634>
 8009ada:	f040 826f 	bne.w	8009fbc <_dtoa_r+0x974>
 8009ade:	4b65      	ldr	r3, [pc, #404]	; (8009c74 <_dtoa_r+0x62c>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	f7f6 fd87 	bl	80005f8 <__aeabi_dmul>
 8009aea:	4652      	mov	r2, sl
 8009aec:	465b      	mov	r3, fp
 8009aee:	f7f7 f809 	bl	8000b04 <__aeabi_dcmpge>
 8009af2:	9e03      	ldr	r6, [sp, #12]
 8009af4:	4637      	mov	r7, r6
 8009af6:	2800      	cmp	r0, #0
 8009af8:	f040 8245 	bne.w	8009f86 <_dtoa_r+0x93e>
 8009afc:	9d01      	ldr	r5, [sp, #4]
 8009afe:	2331      	movs	r3, #49	; 0x31
 8009b00:	f805 3b01 	strb.w	r3, [r5], #1
 8009b04:	9b00      	ldr	r3, [sp, #0]
 8009b06:	3301      	adds	r3, #1
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	e240      	b.n	8009f8e <_dtoa_r+0x946>
 8009b0c:	07f2      	lsls	r2, r6, #31
 8009b0e:	d505      	bpl.n	8009b1c <_dtoa_r+0x4d4>
 8009b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b14:	f7f6 fd70 	bl	80005f8 <__aeabi_dmul>
 8009b18:	3501      	adds	r5, #1
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	1076      	asrs	r6, r6, #1
 8009b1e:	3708      	adds	r7, #8
 8009b20:	e777      	b.n	8009a12 <_dtoa_r+0x3ca>
 8009b22:	2502      	movs	r5, #2
 8009b24:	e779      	b.n	8009a1a <_dtoa_r+0x3d2>
 8009b26:	9f00      	ldr	r7, [sp, #0]
 8009b28:	9e03      	ldr	r6, [sp, #12]
 8009b2a:	e794      	b.n	8009a56 <_dtoa_r+0x40e>
 8009b2c:	9901      	ldr	r1, [sp, #4]
 8009b2e:	4b4c      	ldr	r3, [pc, #304]	; (8009c60 <_dtoa_r+0x618>)
 8009b30:	4431      	add	r1, r6
 8009b32:	910d      	str	r1, [sp, #52]	; 0x34
 8009b34:	9908      	ldr	r1, [sp, #32]
 8009b36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b3e:	2900      	cmp	r1, #0
 8009b40:	d043      	beq.n	8009bca <_dtoa_r+0x582>
 8009b42:	494d      	ldr	r1, [pc, #308]	; (8009c78 <_dtoa_r+0x630>)
 8009b44:	2000      	movs	r0, #0
 8009b46:	f7f6 fe81 	bl	800084c <__aeabi_ddiv>
 8009b4a:	4652      	mov	r2, sl
 8009b4c:	465b      	mov	r3, fp
 8009b4e:	f7f6 fb9b 	bl	8000288 <__aeabi_dsub>
 8009b52:	9d01      	ldr	r5, [sp, #4]
 8009b54:	4682      	mov	sl, r0
 8009b56:	468b      	mov	fp, r1
 8009b58:	4649      	mov	r1, r9
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	f7f6 fffc 	bl	8000b58 <__aeabi_d2iz>
 8009b60:	4606      	mov	r6, r0
 8009b62:	f7f6 fcdf 	bl	8000524 <__aeabi_i2d>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4640      	mov	r0, r8
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	f7f6 fb8b 	bl	8000288 <__aeabi_dsub>
 8009b72:	3630      	adds	r6, #48	; 0x30
 8009b74:	f805 6b01 	strb.w	r6, [r5], #1
 8009b78:	4652      	mov	r2, sl
 8009b7a:	465b      	mov	r3, fp
 8009b7c:	4680      	mov	r8, r0
 8009b7e:	4689      	mov	r9, r1
 8009b80:	f7f6 ffac 	bl	8000adc <__aeabi_dcmplt>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d163      	bne.n	8009c50 <_dtoa_r+0x608>
 8009b88:	4642      	mov	r2, r8
 8009b8a:	464b      	mov	r3, r9
 8009b8c:	4936      	ldr	r1, [pc, #216]	; (8009c68 <_dtoa_r+0x620>)
 8009b8e:	2000      	movs	r0, #0
 8009b90:	f7f6 fb7a 	bl	8000288 <__aeabi_dsub>
 8009b94:	4652      	mov	r2, sl
 8009b96:	465b      	mov	r3, fp
 8009b98:	f7f6 ffa0 	bl	8000adc <__aeabi_dcmplt>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	f040 80b5 	bne.w	8009d0c <_dtoa_r+0x6c4>
 8009ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ba4:	429d      	cmp	r5, r3
 8009ba6:	d081      	beq.n	8009aac <_dtoa_r+0x464>
 8009ba8:	4b30      	ldr	r3, [pc, #192]	; (8009c6c <_dtoa_r+0x624>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	4650      	mov	r0, sl
 8009bae:	4659      	mov	r1, fp
 8009bb0:	f7f6 fd22 	bl	80005f8 <__aeabi_dmul>
 8009bb4:	4b2d      	ldr	r3, [pc, #180]	; (8009c6c <_dtoa_r+0x624>)
 8009bb6:	4682      	mov	sl, r0
 8009bb8:	468b      	mov	fp, r1
 8009bba:	4640      	mov	r0, r8
 8009bbc:	4649      	mov	r1, r9
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f7f6 fd1a 	bl	80005f8 <__aeabi_dmul>
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	4689      	mov	r9, r1
 8009bc8:	e7c6      	b.n	8009b58 <_dtoa_r+0x510>
 8009bca:	4650      	mov	r0, sl
 8009bcc:	4659      	mov	r1, fp
 8009bce:	f7f6 fd13 	bl	80005f8 <__aeabi_dmul>
 8009bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bd4:	9d01      	ldr	r5, [sp, #4]
 8009bd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bd8:	4682      	mov	sl, r0
 8009bda:	468b      	mov	fp, r1
 8009bdc:	4649      	mov	r1, r9
 8009bde:	4640      	mov	r0, r8
 8009be0:	f7f6 ffba 	bl	8000b58 <__aeabi_d2iz>
 8009be4:	4606      	mov	r6, r0
 8009be6:	f7f6 fc9d 	bl	8000524 <__aeabi_i2d>
 8009bea:	3630      	adds	r6, #48	; 0x30
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	4649      	mov	r1, r9
 8009bf4:	f7f6 fb48 	bl	8000288 <__aeabi_dsub>
 8009bf8:	f805 6b01 	strb.w	r6, [r5], #1
 8009bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bfe:	429d      	cmp	r5, r3
 8009c00:	4680      	mov	r8, r0
 8009c02:	4689      	mov	r9, r1
 8009c04:	f04f 0200 	mov.w	r2, #0
 8009c08:	d124      	bne.n	8009c54 <_dtoa_r+0x60c>
 8009c0a:	4b1b      	ldr	r3, [pc, #108]	; (8009c78 <_dtoa_r+0x630>)
 8009c0c:	4650      	mov	r0, sl
 8009c0e:	4659      	mov	r1, fp
 8009c10:	f7f6 fb3c 	bl	800028c <__adddf3>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4640      	mov	r0, r8
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	f7f6 ff7c 	bl	8000b18 <__aeabi_dcmpgt>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d173      	bne.n	8009d0c <_dtoa_r+0x6c4>
 8009c24:	4652      	mov	r2, sl
 8009c26:	465b      	mov	r3, fp
 8009c28:	4913      	ldr	r1, [pc, #76]	; (8009c78 <_dtoa_r+0x630>)
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	f7f6 fb2c 	bl	8000288 <__aeabi_dsub>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	4640      	mov	r0, r8
 8009c36:	4649      	mov	r1, r9
 8009c38:	f7f6 ff50 	bl	8000adc <__aeabi_dcmplt>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	f43f af35 	beq.w	8009aac <_dtoa_r+0x464>
 8009c42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c44:	1e6b      	subs	r3, r5, #1
 8009c46:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c4c:	2b30      	cmp	r3, #48	; 0x30
 8009c4e:	d0f8      	beq.n	8009c42 <_dtoa_r+0x5fa>
 8009c50:	9700      	str	r7, [sp, #0]
 8009c52:	e049      	b.n	8009ce8 <_dtoa_r+0x6a0>
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <_dtoa_r+0x624>)
 8009c56:	f7f6 fccf 	bl	80005f8 <__aeabi_dmul>
 8009c5a:	4680      	mov	r8, r0
 8009c5c:	4689      	mov	r9, r1
 8009c5e:	e7bd      	b.n	8009bdc <_dtoa_r+0x594>
 8009c60:	0800da38 	.word	0x0800da38
 8009c64:	0800da10 	.word	0x0800da10
 8009c68:	3ff00000 	.word	0x3ff00000
 8009c6c:	40240000 	.word	0x40240000
 8009c70:	401c0000 	.word	0x401c0000
 8009c74:	40140000 	.word	0x40140000
 8009c78:	3fe00000 	.word	0x3fe00000
 8009c7c:	9d01      	ldr	r5, [sp, #4]
 8009c7e:	4656      	mov	r6, sl
 8009c80:	465f      	mov	r7, fp
 8009c82:	4642      	mov	r2, r8
 8009c84:	464b      	mov	r3, r9
 8009c86:	4630      	mov	r0, r6
 8009c88:	4639      	mov	r1, r7
 8009c8a:	f7f6 fddf 	bl	800084c <__aeabi_ddiv>
 8009c8e:	f7f6 ff63 	bl	8000b58 <__aeabi_d2iz>
 8009c92:	4682      	mov	sl, r0
 8009c94:	f7f6 fc46 	bl	8000524 <__aeabi_i2d>
 8009c98:	4642      	mov	r2, r8
 8009c9a:	464b      	mov	r3, r9
 8009c9c:	f7f6 fcac 	bl	80005f8 <__aeabi_dmul>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009cac:	f7f6 faec 	bl	8000288 <__aeabi_dsub>
 8009cb0:	f805 6b01 	strb.w	r6, [r5], #1
 8009cb4:	9e01      	ldr	r6, [sp, #4]
 8009cb6:	9f03      	ldr	r7, [sp, #12]
 8009cb8:	1bae      	subs	r6, r5, r6
 8009cba:	42b7      	cmp	r7, r6
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	d135      	bne.n	8009d2e <_dtoa_r+0x6e6>
 8009cc2:	f7f6 fae3 	bl	800028c <__adddf3>
 8009cc6:	4642      	mov	r2, r8
 8009cc8:	464b      	mov	r3, r9
 8009cca:	4606      	mov	r6, r0
 8009ccc:	460f      	mov	r7, r1
 8009cce:	f7f6 ff23 	bl	8000b18 <__aeabi_dcmpgt>
 8009cd2:	b9d0      	cbnz	r0, 8009d0a <_dtoa_r+0x6c2>
 8009cd4:	4642      	mov	r2, r8
 8009cd6:	464b      	mov	r3, r9
 8009cd8:	4630      	mov	r0, r6
 8009cda:	4639      	mov	r1, r7
 8009cdc:	f7f6 fef4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ce0:	b110      	cbz	r0, 8009ce8 <_dtoa_r+0x6a0>
 8009ce2:	f01a 0f01 	tst.w	sl, #1
 8009ce6:	d110      	bne.n	8009d0a <_dtoa_r+0x6c2>
 8009ce8:	4620      	mov	r0, r4
 8009cea:	ee18 1a10 	vmov	r1, s16
 8009cee:	f000 fae5 	bl	800a2bc <_Bfree>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	9800      	ldr	r0, [sp, #0]
 8009cf6:	702b      	strb	r3, [r5, #0]
 8009cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	6018      	str	r0, [r3, #0]
 8009cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f43f acf1 	beq.w	80096e8 <_dtoa_r+0xa0>
 8009d06:	601d      	str	r5, [r3, #0]
 8009d08:	e4ee      	b.n	80096e8 <_dtoa_r+0xa0>
 8009d0a:	9f00      	ldr	r7, [sp, #0]
 8009d0c:	462b      	mov	r3, r5
 8009d0e:	461d      	mov	r5, r3
 8009d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d14:	2a39      	cmp	r2, #57	; 0x39
 8009d16:	d106      	bne.n	8009d26 <_dtoa_r+0x6de>
 8009d18:	9a01      	ldr	r2, [sp, #4]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d1f7      	bne.n	8009d0e <_dtoa_r+0x6c6>
 8009d1e:	9901      	ldr	r1, [sp, #4]
 8009d20:	2230      	movs	r2, #48	; 0x30
 8009d22:	3701      	adds	r7, #1
 8009d24:	700a      	strb	r2, [r1, #0]
 8009d26:	781a      	ldrb	r2, [r3, #0]
 8009d28:	3201      	adds	r2, #1
 8009d2a:	701a      	strb	r2, [r3, #0]
 8009d2c:	e790      	b.n	8009c50 <_dtoa_r+0x608>
 8009d2e:	4ba6      	ldr	r3, [pc, #664]	; (8009fc8 <_dtoa_r+0x980>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	f7f6 fc61 	bl	80005f8 <__aeabi_dmul>
 8009d36:	2200      	movs	r2, #0
 8009d38:	2300      	movs	r3, #0
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	460f      	mov	r7, r1
 8009d3e:	f7f6 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d09d      	beq.n	8009c82 <_dtoa_r+0x63a>
 8009d46:	e7cf      	b.n	8009ce8 <_dtoa_r+0x6a0>
 8009d48:	9a08      	ldr	r2, [sp, #32]
 8009d4a:	2a00      	cmp	r2, #0
 8009d4c:	f000 80d7 	beq.w	8009efe <_dtoa_r+0x8b6>
 8009d50:	9a06      	ldr	r2, [sp, #24]
 8009d52:	2a01      	cmp	r2, #1
 8009d54:	f300 80ba 	bgt.w	8009ecc <_dtoa_r+0x884>
 8009d58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d5a:	2a00      	cmp	r2, #0
 8009d5c:	f000 80b2 	beq.w	8009ec4 <_dtoa_r+0x87c>
 8009d60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d64:	9e07      	ldr	r6, [sp, #28]
 8009d66:	9d04      	ldr	r5, [sp, #16]
 8009d68:	9a04      	ldr	r2, [sp, #16]
 8009d6a:	441a      	add	r2, r3
 8009d6c:	9204      	str	r2, [sp, #16]
 8009d6e:	9a05      	ldr	r2, [sp, #20]
 8009d70:	2101      	movs	r1, #1
 8009d72:	441a      	add	r2, r3
 8009d74:	4620      	mov	r0, r4
 8009d76:	9205      	str	r2, [sp, #20]
 8009d78:	f000 fb58 	bl	800a42c <__i2b>
 8009d7c:	4607      	mov	r7, r0
 8009d7e:	2d00      	cmp	r5, #0
 8009d80:	dd0c      	ble.n	8009d9c <_dtoa_r+0x754>
 8009d82:	9b05      	ldr	r3, [sp, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	dd09      	ble.n	8009d9c <_dtoa_r+0x754>
 8009d88:	42ab      	cmp	r3, r5
 8009d8a:	9a04      	ldr	r2, [sp, #16]
 8009d8c:	bfa8      	it	ge
 8009d8e:	462b      	movge	r3, r5
 8009d90:	1ad2      	subs	r2, r2, r3
 8009d92:	9204      	str	r2, [sp, #16]
 8009d94:	9a05      	ldr	r2, [sp, #20]
 8009d96:	1aed      	subs	r5, r5, r3
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	9305      	str	r3, [sp, #20]
 8009d9c:	9b07      	ldr	r3, [sp, #28]
 8009d9e:	b31b      	cbz	r3, 8009de8 <_dtoa_r+0x7a0>
 8009da0:	9b08      	ldr	r3, [sp, #32]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 80af 	beq.w	8009f06 <_dtoa_r+0x8be>
 8009da8:	2e00      	cmp	r6, #0
 8009daa:	dd13      	ble.n	8009dd4 <_dtoa_r+0x78c>
 8009dac:	4639      	mov	r1, r7
 8009dae:	4632      	mov	r2, r6
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 fbfb 	bl	800a5ac <__pow5mult>
 8009db6:	ee18 2a10 	vmov	r2, s16
 8009dba:	4601      	mov	r1, r0
 8009dbc:	4607      	mov	r7, r0
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f000 fb4a 	bl	800a458 <__multiply>
 8009dc4:	ee18 1a10 	vmov	r1, s16
 8009dc8:	4680      	mov	r8, r0
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f000 fa76 	bl	800a2bc <_Bfree>
 8009dd0:	ee08 8a10 	vmov	s16, r8
 8009dd4:	9b07      	ldr	r3, [sp, #28]
 8009dd6:	1b9a      	subs	r2, r3, r6
 8009dd8:	d006      	beq.n	8009de8 <_dtoa_r+0x7a0>
 8009dda:	ee18 1a10 	vmov	r1, s16
 8009dde:	4620      	mov	r0, r4
 8009de0:	f000 fbe4 	bl	800a5ac <__pow5mult>
 8009de4:	ee08 0a10 	vmov	s16, r0
 8009de8:	2101      	movs	r1, #1
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fb1e 	bl	800a42c <__i2b>
 8009df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	4606      	mov	r6, r0
 8009df6:	f340 8088 	ble.w	8009f0a <_dtoa_r+0x8c2>
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	4601      	mov	r1, r0
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f000 fbd4 	bl	800a5ac <__pow5mult>
 8009e04:	9b06      	ldr	r3, [sp, #24]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	4606      	mov	r6, r0
 8009e0a:	f340 8081 	ble.w	8009f10 <_dtoa_r+0x8c8>
 8009e0e:	f04f 0800 	mov.w	r8, #0
 8009e12:	6933      	ldr	r3, [r6, #16]
 8009e14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e18:	6918      	ldr	r0, [r3, #16]
 8009e1a:	f000 fab7 	bl	800a38c <__hi0bits>
 8009e1e:	f1c0 0020 	rsb	r0, r0, #32
 8009e22:	9b05      	ldr	r3, [sp, #20]
 8009e24:	4418      	add	r0, r3
 8009e26:	f010 001f 	ands.w	r0, r0, #31
 8009e2a:	f000 8092 	beq.w	8009f52 <_dtoa_r+0x90a>
 8009e2e:	f1c0 0320 	rsb	r3, r0, #32
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	f340 808a 	ble.w	8009f4c <_dtoa_r+0x904>
 8009e38:	f1c0 001c 	rsb	r0, r0, #28
 8009e3c:	9b04      	ldr	r3, [sp, #16]
 8009e3e:	4403      	add	r3, r0
 8009e40:	9304      	str	r3, [sp, #16]
 8009e42:	9b05      	ldr	r3, [sp, #20]
 8009e44:	4403      	add	r3, r0
 8009e46:	4405      	add	r5, r0
 8009e48:	9305      	str	r3, [sp, #20]
 8009e4a:	9b04      	ldr	r3, [sp, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	dd07      	ble.n	8009e60 <_dtoa_r+0x818>
 8009e50:	ee18 1a10 	vmov	r1, s16
 8009e54:	461a      	mov	r2, r3
 8009e56:	4620      	mov	r0, r4
 8009e58:	f000 fc02 	bl	800a660 <__lshift>
 8009e5c:	ee08 0a10 	vmov	s16, r0
 8009e60:	9b05      	ldr	r3, [sp, #20]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	dd05      	ble.n	8009e72 <_dtoa_r+0x82a>
 8009e66:	4631      	mov	r1, r6
 8009e68:	461a      	mov	r2, r3
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 fbf8 	bl	800a660 <__lshift>
 8009e70:	4606      	mov	r6, r0
 8009e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d06e      	beq.n	8009f56 <_dtoa_r+0x90e>
 8009e78:	ee18 0a10 	vmov	r0, s16
 8009e7c:	4631      	mov	r1, r6
 8009e7e:	f000 fc5f 	bl	800a740 <__mcmp>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	da67      	bge.n	8009f56 <_dtoa_r+0x90e>
 8009e86:	9b00      	ldr	r3, [sp, #0]
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	ee18 1a10 	vmov	r1, s16
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	220a      	movs	r2, #10
 8009e92:	2300      	movs	r3, #0
 8009e94:	4620      	mov	r0, r4
 8009e96:	f000 fa33 	bl	800a300 <__multadd>
 8009e9a:	9b08      	ldr	r3, [sp, #32]
 8009e9c:	ee08 0a10 	vmov	s16, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 81b1 	beq.w	800a208 <_dtoa_r+0xbc0>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	220a      	movs	r2, #10
 8009eac:	4620      	mov	r0, r4
 8009eae:	f000 fa27 	bl	800a300 <__multadd>
 8009eb2:	9b02      	ldr	r3, [sp, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	4607      	mov	r7, r0
 8009eb8:	f300 808e 	bgt.w	8009fd8 <_dtoa_r+0x990>
 8009ebc:	9b06      	ldr	r3, [sp, #24]
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	dc51      	bgt.n	8009f66 <_dtoa_r+0x91e>
 8009ec2:	e089      	b.n	8009fd8 <_dtoa_r+0x990>
 8009ec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009eca:	e74b      	b.n	8009d64 <_dtoa_r+0x71c>
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	1e5e      	subs	r6, r3, #1
 8009ed0:	9b07      	ldr	r3, [sp, #28]
 8009ed2:	42b3      	cmp	r3, r6
 8009ed4:	bfbf      	itttt	lt
 8009ed6:	9b07      	ldrlt	r3, [sp, #28]
 8009ed8:	9607      	strlt	r6, [sp, #28]
 8009eda:	1af2      	sublt	r2, r6, r3
 8009edc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009ede:	bfb6      	itet	lt
 8009ee0:	189b      	addlt	r3, r3, r2
 8009ee2:	1b9e      	subge	r6, r3, r6
 8009ee4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	bfb8      	it	lt
 8009eea:	2600      	movlt	r6, #0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	bfb7      	itett	lt
 8009ef0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009ef4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009ef8:	1a9d      	sublt	r5, r3, r2
 8009efa:	2300      	movlt	r3, #0
 8009efc:	e734      	b.n	8009d68 <_dtoa_r+0x720>
 8009efe:	9e07      	ldr	r6, [sp, #28]
 8009f00:	9d04      	ldr	r5, [sp, #16]
 8009f02:	9f08      	ldr	r7, [sp, #32]
 8009f04:	e73b      	b.n	8009d7e <_dtoa_r+0x736>
 8009f06:	9a07      	ldr	r2, [sp, #28]
 8009f08:	e767      	b.n	8009dda <_dtoa_r+0x792>
 8009f0a:	9b06      	ldr	r3, [sp, #24]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	dc18      	bgt.n	8009f42 <_dtoa_r+0x8fa>
 8009f10:	f1ba 0f00 	cmp.w	sl, #0
 8009f14:	d115      	bne.n	8009f42 <_dtoa_r+0x8fa>
 8009f16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f1a:	b993      	cbnz	r3, 8009f42 <_dtoa_r+0x8fa>
 8009f1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f20:	0d1b      	lsrs	r3, r3, #20
 8009f22:	051b      	lsls	r3, r3, #20
 8009f24:	b183      	cbz	r3, 8009f48 <_dtoa_r+0x900>
 8009f26:	9b04      	ldr	r3, [sp, #16]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	9b05      	ldr	r3, [sp, #20]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	9305      	str	r3, [sp, #20]
 8009f32:	f04f 0801 	mov.w	r8, #1
 8009f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f47f af6a 	bne.w	8009e12 <_dtoa_r+0x7ca>
 8009f3e:	2001      	movs	r0, #1
 8009f40:	e76f      	b.n	8009e22 <_dtoa_r+0x7da>
 8009f42:	f04f 0800 	mov.w	r8, #0
 8009f46:	e7f6      	b.n	8009f36 <_dtoa_r+0x8ee>
 8009f48:	4698      	mov	r8, r3
 8009f4a:	e7f4      	b.n	8009f36 <_dtoa_r+0x8ee>
 8009f4c:	f43f af7d 	beq.w	8009e4a <_dtoa_r+0x802>
 8009f50:	4618      	mov	r0, r3
 8009f52:	301c      	adds	r0, #28
 8009f54:	e772      	b.n	8009e3c <_dtoa_r+0x7f4>
 8009f56:	9b03      	ldr	r3, [sp, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	dc37      	bgt.n	8009fcc <_dtoa_r+0x984>
 8009f5c:	9b06      	ldr	r3, [sp, #24]
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	dd34      	ble.n	8009fcc <_dtoa_r+0x984>
 8009f62:	9b03      	ldr	r3, [sp, #12]
 8009f64:	9302      	str	r3, [sp, #8]
 8009f66:	9b02      	ldr	r3, [sp, #8]
 8009f68:	b96b      	cbnz	r3, 8009f86 <_dtoa_r+0x93e>
 8009f6a:	4631      	mov	r1, r6
 8009f6c:	2205      	movs	r2, #5
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 f9c6 	bl	800a300 <__multadd>
 8009f74:	4601      	mov	r1, r0
 8009f76:	4606      	mov	r6, r0
 8009f78:	ee18 0a10 	vmov	r0, s16
 8009f7c:	f000 fbe0 	bl	800a740 <__mcmp>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	f73f adbb 	bgt.w	8009afc <_dtoa_r+0x4b4>
 8009f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f88:	9d01      	ldr	r5, [sp, #4]
 8009f8a:	43db      	mvns	r3, r3
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	f04f 0800 	mov.w	r8, #0
 8009f92:	4631      	mov	r1, r6
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 f991 	bl	800a2bc <_Bfree>
 8009f9a:	2f00      	cmp	r7, #0
 8009f9c:	f43f aea4 	beq.w	8009ce8 <_dtoa_r+0x6a0>
 8009fa0:	f1b8 0f00 	cmp.w	r8, #0
 8009fa4:	d005      	beq.n	8009fb2 <_dtoa_r+0x96a>
 8009fa6:	45b8      	cmp	r8, r7
 8009fa8:	d003      	beq.n	8009fb2 <_dtoa_r+0x96a>
 8009faa:	4641      	mov	r1, r8
 8009fac:	4620      	mov	r0, r4
 8009fae:	f000 f985 	bl	800a2bc <_Bfree>
 8009fb2:	4639      	mov	r1, r7
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f000 f981 	bl	800a2bc <_Bfree>
 8009fba:	e695      	b.n	8009ce8 <_dtoa_r+0x6a0>
 8009fbc:	2600      	movs	r6, #0
 8009fbe:	4637      	mov	r7, r6
 8009fc0:	e7e1      	b.n	8009f86 <_dtoa_r+0x93e>
 8009fc2:	9700      	str	r7, [sp, #0]
 8009fc4:	4637      	mov	r7, r6
 8009fc6:	e599      	b.n	8009afc <_dtoa_r+0x4b4>
 8009fc8:	40240000 	.word	0x40240000
 8009fcc:	9b08      	ldr	r3, [sp, #32]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 80ca 	beq.w	800a168 <_dtoa_r+0xb20>
 8009fd4:	9b03      	ldr	r3, [sp, #12]
 8009fd6:	9302      	str	r3, [sp, #8]
 8009fd8:	2d00      	cmp	r5, #0
 8009fda:	dd05      	ble.n	8009fe8 <_dtoa_r+0x9a0>
 8009fdc:	4639      	mov	r1, r7
 8009fde:	462a      	mov	r2, r5
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f000 fb3d 	bl	800a660 <__lshift>
 8009fe6:	4607      	mov	r7, r0
 8009fe8:	f1b8 0f00 	cmp.w	r8, #0
 8009fec:	d05b      	beq.n	800a0a6 <_dtoa_r+0xa5e>
 8009fee:	6879      	ldr	r1, [r7, #4]
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 f923 	bl	800a23c <_Balloc>
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	b928      	cbnz	r0, 800a006 <_dtoa_r+0x9be>
 8009ffa:	4b87      	ldr	r3, [pc, #540]	; (800a218 <_dtoa_r+0xbd0>)
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a002:	f7ff bb3b 	b.w	800967c <_dtoa_r+0x34>
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	3202      	adds	r2, #2
 800a00a:	0092      	lsls	r2, r2, #2
 800a00c:	f107 010c 	add.w	r1, r7, #12
 800a010:	300c      	adds	r0, #12
 800a012:	f7fe fdeb 	bl	8008bec <memcpy>
 800a016:	2201      	movs	r2, #1
 800a018:	4629      	mov	r1, r5
 800a01a:	4620      	mov	r0, r4
 800a01c:	f000 fb20 	bl	800a660 <__lshift>
 800a020:	9b01      	ldr	r3, [sp, #4]
 800a022:	f103 0901 	add.w	r9, r3, #1
 800a026:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a02a:	4413      	add	r3, r2
 800a02c:	9305      	str	r3, [sp, #20]
 800a02e:	f00a 0301 	and.w	r3, sl, #1
 800a032:	46b8      	mov	r8, r7
 800a034:	9304      	str	r3, [sp, #16]
 800a036:	4607      	mov	r7, r0
 800a038:	4631      	mov	r1, r6
 800a03a:	ee18 0a10 	vmov	r0, s16
 800a03e:	f7ff fa75 	bl	800952c <quorem>
 800a042:	4641      	mov	r1, r8
 800a044:	9002      	str	r0, [sp, #8]
 800a046:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a04a:	ee18 0a10 	vmov	r0, s16
 800a04e:	f000 fb77 	bl	800a740 <__mcmp>
 800a052:	463a      	mov	r2, r7
 800a054:	9003      	str	r0, [sp, #12]
 800a056:	4631      	mov	r1, r6
 800a058:	4620      	mov	r0, r4
 800a05a:	f000 fb8d 	bl	800a778 <__mdiff>
 800a05e:	68c2      	ldr	r2, [r0, #12]
 800a060:	f109 3bff 	add.w	fp, r9, #4294967295
 800a064:	4605      	mov	r5, r0
 800a066:	bb02      	cbnz	r2, 800a0aa <_dtoa_r+0xa62>
 800a068:	4601      	mov	r1, r0
 800a06a:	ee18 0a10 	vmov	r0, s16
 800a06e:	f000 fb67 	bl	800a740 <__mcmp>
 800a072:	4602      	mov	r2, r0
 800a074:	4629      	mov	r1, r5
 800a076:	4620      	mov	r0, r4
 800a078:	9207      	str	r2, [sp, #28]
 800a07a:	f000 f91f 	bl	800a2bc <_Bfree>
 800a07e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a082:	ea43 0102 	orr.w	r1, r3, r2
 800a086:	9b04      	ldr	r3, [sp, #16]
 800a088:	430b      	orrs	r3, r1
 800a08a:	464d      	mov	r5, r9
 800a08c:	d10f      	bne.n	800a0ae <_dtoa_r+0xa66>
 800a08e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a092:	d02a      	beq.n	800a0ea <_dtoa_r+0xaa2>
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	2b00      	cmp	r3, #0
 800a098:	dd02      	ble.n	800a0a0 <_dtoa_r+0xa58>
 800a09a:	9b02      	ldr	r3, [sp, #8]
 800a09c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a0a0:	f88b a000 	strb.w	sl, [fp]
 800a0a4:	e775      	b.n	8009f92 <_dtoa_r+0x94a>
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	e7ba      	b.n	800a020 <_dtoa_r+0x9d8>
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	e7e2      	b.n	800a074 <_dtoa_r+0xa2c>
 800a0ae:	9b03      	ldr	r3, [sp, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	db04      	blt.n	800a0be <_dtoa_r+0xa76>
 800a0b4:	9906      	ldr	r1, [sp, #24]
 800a0b6:	430b      	orrs	r3, r1
 800a0b8:	9904      	ldr	r1, [sp, #16]
 800a0ba:	430b      	orrs	r3, r1
 800a0bc:	d122      	bne.n	800a104 <_dtoa_r+0xabc>
 800a0be:	2a00      	cmp	r2, #0
 800a0c0:	ddee      	ble.n	800a0a0 <_dtoa_r+0xa58>
 800a0c2:	ee18 1a10 	vmov	r1, s16
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 fac9 	bl	800a660 <__lshift>
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	ee08 0a10 	vmov	s16, r0
 800a0d4:	f000 fb34 	bl	800a740 <__mcmp>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	dc03      	bgt.n	800a0e4 <_dtoa_r+0xa9c>
 800a0dc:	d1e0      	bne.n	800a0a0 <_dtoa_r+0xa58>
 800a0de:	f01a 0f01 	tst.w	sl, #1
 800a0e2:	d0dd      	beq.n	800a0a0 <_dtoa_r+0xa58>
 800a0e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a0e8:	d1d7      	bne.n	800a09a <_dtoa_r+0xa52>
 800a0ea:	2339      	movs	r3, #57	; 0x39
 800a0ec:	f88b 3000 	strb.w	r3, [fp]
 800a0f0:	462b      	mov	r3, r5
 800a0f2:	461d      	mov	r5, r3
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a0fa:	2a39      	cmp	r2, #57	; 0x39
 800a0fc:	d071      	beq.n	800a1e2 <_dtoa_r+0xb9a>
 800a0fe:	3201      	adds	r2, #1
 800a100:	701a      	strb	r2, [r3, #0]
 800a102:	e746      	b.n	8009f92 <_dtoa_r+0x94a>
 800a104:	2a00      	cmp	r2, #0
 800a106:	dd07      	ble.n	800a118 <_dtoa_r+0xad0>
 800a108:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a10c:	d0ed      	beq.n	800a0ea <_dtoa_r+0xaa2>
 800a10e:	f10a 0301 	add.w	r3, sl, #1
 800a112:	f88b 3000 	strb.w	r3, [fp]
 800a116:	e73c      	b.n	8009f92 <_dtoa_r+0x94a>
 800a118:	9b05      	ldr	r3, [sp, #20]
 800a11a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a11e:	4599      	cmp	r9, r3
 800a120:	d047      	beq.n	800a1b2 <_dtoa_r+0xb6a>
 800a122:	ee18 1a10 	vmov	r1, s16
 800a126:	2300      	movs	r3, #0
 800a128:	220a      	movs	r2, #10
 800a12a:	4620      	mov	r0, r4
 800a12c:	f000 f8e8 	bl	800a300 <__multadd>
 800a130:	45b8      	cmp	r8, r7
 800a132:	ee08 0a10 	vmov	s16, r0
 800a136:	f04f 0300 	mov.w	r3, #0
 800a13a:	f04f 020a 	mov.w	r2, #10
 800a13e:	4641      	mov	r1, r8
 800a140:	4620      	mov	r0, r4
 800a142:	d106      	bne.n	800a152 <_dtoa_r+0xb0a>
 800a144:	f000 f8dc 	bl	800a300 <__multadd>
 800a148:	4680      	mov	r8, r0
 800a14a:	4607      	mov	r7, r0
 800a14c:	f109 0901 	add.w	r9, r9, #1
 800a150:	e772      	b.n	800a038 <_dtoa_r+0x9f0>
 800a152:	f000 f8d5 	bl	800a300 <__multadd>
 800a156:	4639      	mov	r1, r7
 800a158:	4680      	mov	r8, r0
 800a15a:	2300      	movs	r3, #0
 800a15c:	220a      	movs	r2, #10
 800a15e:	4620      	mov	r0, r4
 800a160:	f000 f8ce 	bl	800a300 <__multadd>
 800a164:	4607      	mov	r7, r0
 800a166:	e7f1      	b.n	800a14c <_dtoa_r+0xb04>
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	9302      	str	r3, [sp, #8]
 800a16c:	9d01      	ldr	r5, [sp, #4]
 800a16e:	ee18 0a10 	vmov	r0, s16
 800a172:	4631      	mov	r1, r6
 800a174:	f7ff f9da 	bl	800952c <quorem>
 800a178:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a17c:	9b01      	ldr	r3, [sp, #4]
 800a17e:	f805 ab01 	strb.w	sl, [r5], #1
 800a182:	1aea      	subs	r2, r5, r3
 800a184:	9b02      	ldr	r3, [sp, #8]
 800a186:	4293      	cmp	r3, r2
 800a188:	dd09      	ble.n	800a19e <_dtoa_r+0xb56>
 800a18a:	ee18 1a10 	vmov	r1, s16
 800a18e:	2300      	movs	r3, #0
 800a190:	220a      	movs	r2, #10
 800a192:	4620      	mov	r0, r4
 800a194:	f000 f8b4 	bl	800a300 <__multadd>
 800a198:	ee08 0a10 	vmov	s16, r0
 800a19c:	e7e7      	b.n	800a16e <_dtoa_r+0xb26>
 800a19e:	9b02      	ldr	r3, [sp, #8]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	bfc8      	it	gt
 800a1a4:	461d      	movgt	r5, r3
 800a1a6:	9b01      	ldr	r3, [sp, #4]
 800a1a8:	bfd8      	it	le
 800a1aa:	2501      	movle	r5, #1
 800a1ac:	441d      	add	r5, r3
 800a1ae:	f04f 0800 	mov.w	r8, #0
 800a1b2:	ee18 1a10 	vmov	r1, s16
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f000 fa51 	bl	800a660 <__lshift>
 800a1be:	4631      	mov	r1, r6
 800a1c0:	ee08 0a10 	vmov	s16, r0
 800a1c4:	f000 fabc 	bl	800a740 <__mcmp>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	dc91      	bgt.n	800a0f0 <_dtoa_r+0xaa8>
 800a1cc:	d102      	bne.n	800a1d4 <_dtoa_r+0xb8c>
 800a1ce:	f01a 0f01 	tst.w	sl, #1
 800a1d2:	d18d      	bne.n	800a0f0 <_dtoa_r+0xaa8>
 800a1d4:	462b      	mov	r3, r5
 800a1d6:	461d      	mov	r5, r3
 800a1d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1dc:	2a30      	cmp	r2, #48	; 0x30
 800a1de:	d0fa      	beq.n	800a1d6 <_dtoa_r+0xb8e>
 800a1e0:	e6d7      	b.n	8009f92 <_dtoa_r+0x94a>
 800a1e2:	9a01      	ldr	r2, [sp, #4]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d184      	bne.n	800a0f2 <_dtoa_r+0xaaa>
 800a1e8:	9b00      	ldr	r3, [sp, #0]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	2331      	movs	r3, #49	; 0x31
 800a1f0:	7013      	strb	r3, [r2, #0]
 800a1f2:	e6ce      	b.n	8009f92 <_dtoa_r+0x94a>
 800a1f4:	4b09      	ldr	r3, [pc, #36]	; (800a21c <_dtoa_r+0xbd4>)
 800a1f6:	f7ff ba95 	b.w	8009724 <_dtoa_r+0xdc>
 800a1fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f47f aa6e 	bne.w	80096de <_dtoa_r+0x96>
 800a202:	4b07      	ldr	r3, [pc, #28]	; (800a220 <_dtoa_r+0xbd8>)
 800a204:	f7ff ba8e 	b.w	8009724 <_dtoa_r+0xdc>
 800a208:	9b02      	ldr	r3, [sp, #8]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	dcae      	bgt.n	800a16c <_dtoa_r+0xb24>
 800a20e:	9b06      	ldr	r3, [sp, #24]
 800a210:	2b02      	cmp	r3, #2
 800a212:	f73f aea8 	bgt.w	8009f66 <_dtoa_r+0x91e>
 800a216:	e7a9      	b.n	800a16c <_dtoa_r+0xb24>
 800a218:	0800d9a3 	.word	0x0800d9a3
 800a21c:	0800d900 	.word	0x0800d900
 800a220:	0800d924 	.word	0x0800d924

0800a224 <_localeconv_r>:
 800a224:	4800      	ldr	r0, [pc, #0]	; (800a228 <_localeconv_r+0x4>)
 800a226:	4770      	bx	lr
 800a228:	20000170 	.word	0x20000170

0800a22c <malloc>:
 800a22c:	4b02      	ldr	r3, [pc, #8]	; (800a238 <malloc+0xc>)
 800a22e:	4601      	mov	r1, r0
 800a230:	6818      	ldr	r0, [r3, #0]
 800a232:	f000 bc09 	b.w	800aa48 <_malloc_r>
 800a236:	bf00      	nop
 800a238:	2000001c 	.word	0x2000001c

0800a23c <_Balloc>:
 800a23c:	b570      	push	{r4, r5, r6, lr}
 800a23e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a240:	4604      	mov	r4, r0
 800a242:	460d      	mov	r5, r1
 800a244:	b976      	cbnz	r6, 800a264 <_Balloc+0x28>
 800a246:	2010      	movs	r0, #16
 800a248:	f7ff fff0 	bl	800a22c <malloc>
 800a24c:	4602      	mov	r2, r0
 800a24e:	6260      	str	r0, [r4, #36]	; 0x24
 800a250:	b920      	cbnz	r0, 800a25c <_Balloc+0x20>
 800a252:	4b18      	ldr	r3, [pc, #96]	; (800a2b4 <_Balloc+0x78>)
 800a254:	4818      	ldr	r0, [pc, #96]	; (800a2b8 <_Balloc+0x7c>)
 800a256:	2166      	movs	r1, #102	; 0x66
 800a258:	f000 fdd6 	bl	800ae08 <__assert_func>
 800a25c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a260:	6006      	str	r6, [r0, #0]
 800a262:	60c6      	str	r6, [r0, #12]
 800a264:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a266:	68f3      	ldr	r3, [r6, #12]
 800a268:	b183      	cbz	r3, 800a28c <_Balloc+0x50>
 800a26a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a272:	b9b8      	cbnz	r0, 800a2a4 <_Balloc+0x68>
 800a274:	2101      	movs	r1, #1
 800a276:	fa01 f605 	lsl.w	r6, r1, r5
 800a27a:	1d72      	adds	r2, r6, #5
 800a27c:	0092      	lsls	r2, r2, #2
 800a27e:	4620      	mov	r0, r4
 800a280:	f000 fb60 	bl	800a944 <_calloc_r>
 800a284:	b160      	cbz	r0, 800a2a0 <_Balloc+0x64>
 800a286:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a28a:	e00e      	b.n	800a2aa <_Balloc+0x6e>
 800a28c:	2221      	movs	r2, #33	; 0x21
 800a28e:	2104      	movs	r1, #4
 800a290:	4620      	mov	r0, r4
 800a292:	f000 fb57 	bl	800a944 <_calloc_r>
 800a296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a298:	60f0      	str	r0, [r6, #12]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1e4      	bne.n	800a26a <_Balloc+0x2e>
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}
 800a2a4:	6802      	ldr	r2, [r0, #0]
 800a2a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2b0:	e7f7      	b.n	800a2a2 <_Balloc+0x66>
 800a2b2:	bf00      	nop
 800a2b4:	0800d931 	.word	0x0800d931
 800a2b8:	0800d9b4 	.word	0x0800d9b4

0800a2bc <_Bfree>:
 800a2bc:	b570      	push	{r4, r5, r6, lr}
 800a2be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	b976      	cbnz	r6, 800a2e4 <_Bfree+0x28>
 800a2c6:	2010      	movs	r0, #16
 800a2c8:	f7ff ffb0 	bl	800a22c <malloc>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	6268      	str	r0, [r5, #36]	; 0x24
 800a2d0:	b920      	cbnz	r0, 800a2dc <_Bfree+0x20>
 800a2d2:	4b09      	ldr	r3, [pc, #36]	; (800a2f8 <_Bfree+0x3c>)
 800a2d4:	4809      	ldr	r0, [pc, #36]	; (800a2fc <_Bfree+0x40>)
 800a2d6:	218a      	movs	r1, #138	; 0x8a
 800a2d8:	f000 fd96 	bl	800ae08 <__assert_func>
 800a2dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2e0:	6006      	str	r6, [r0, #0]
 800a2e2:	60c6      	str	r6, [r0, #12]
 800a2e4:	b13c      	cbz	r4, 800a2f6 <_Bfree+0x3a>
 800a2e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2e8:	6862      	ldr	r2, [r4, #4]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2f0:	6021      	str	r1, [r4, #0]
 800a2f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2f6:	bd70      	pop	{r4, r5, r6, pc}
 800a2f8:	0800d931 	.word	0x0800d931
 800a2fc:	0800d9b4 	.word	0x0800d9b4

0800a300 <__multadd>:
 800a300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a304:	690d      	ldr	r5, [r1, #16]
 800a306:	4607      	mov	r7, r0
 800a308:	460c      	mov	r4, r1
 800a30a:	461e      	mov	r6, r3
 800a30c:	f101 0c14 	add.w	ip, r1, #20
 800a310:	2000      	movs	r0, #0
 800a312:	f8dc 3000 	ldr.w	r3, [ip]
 800a316:	b299      	uxth	r1, r3
 800a318:	fb02 6101 	mla	r1, r2, r1, r6
 800a31c:	0c1e      	lsrs	r6, r3, #16
 800a31e:	0c0b      	lsrs	r3, r1, #16
 800a320:	fb02 3306 	mla	r3, r2, r6, r3
 800a324:	b289      	uxth	r1, r1
 800a326:	3001      	adds	r0, #1
 800a328:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a32c:	4285      	cmp	r5, r0
 800a32e:	f84c 1b04 	str.w	r1, [ip], #4
 800a332:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a336:	dcec      	bgt.n	800a312 <__multadd+0x12>
 800a338:	b30e      	cbz	r6, 800a37e <__multadd+0x7e>
 800a33a:	68a3      	ldr	r3, [r4, #8]
 800a33c:	42ab      	cmp	r3, r5
 800a33e:	dc19      	bgt.n	800a374 <__multadd+0x74>
 800a340:	6861      	ldr	r1, [r4, #4]
 800a342:	4638      	mov	r0, r7
 800a344:	3101      	adds	r1, #1
 800a346:	f7ff ff79 	bl	800a23c <_Balloc>
 800a34a:	4680      	mov	r8, r0
 800a34c:	b928      	cbnz	r0, 800a35a <__multadd+0x5a>
 800a34e:	4602      	mov	r2, r0
 800a350:	4b0c      	ldr	r3, [pc, #48]	; (800a384 <__multadd+0x84>)
 800a352:	480d      	ldr	r0, [pc, #52]	; (800a388 <__multadd+0x88>)
 800a354:	21b5      	movs	r1, #181	; 0xb5
 800a356:	f000 fd57 	bl	800ae08 <__assert_func>
 800a35a:	6922      	ldr	r2, [r4, #16]
 800a35c:	3202      	adds	r2, #2
 800a35e:	f104 010c 	add.w	r1, r4, #12
 800a362:	0092      	lsls	r2, r2, #2
 800a364:	300c      	adds	r0, #12
 800a366:	f7fe fc41 	bl	8008bec <memcpy>
 800a36a:	4621      	mov	r1, r4
 800a36c:	4638      	mov	r0, r7
 800a36e:	f7ff ffa5 	bl	800a2bc <_Bfree>
 800a372:	4644      	mov	r4, r8
 800a374:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a378:	3501      	adds	r5, #1
 800a37a:	615e      	str	r6, [r3, #20]
 800a37c:	6125      	str	r5, [r4, #16]
 800a37e:	4620      	mov	r0, r4
 800a380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a384:	0800d9a3 	.word	0x0800d9a3
 800a388:	0800d9b4 	.word	0x0800d9b4

0800a38c <__hi0bits>:
 800a38c:	0c03      	lsrs	r3, r0, #16
 800a38e:	041b      	lsls	r3, r3, #16
 800a390:	b9d3      	cbnz	r3, 800a3c8 <__hi0bits+0x3c>
 800a392:	0400      	lsls	r0, r0, #16
 800a394:	2310      	movs	r3, #16
 800a396:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a39a:	bf04      	itt	eq
 800a39c:	0200      	lsleq	r0, r0, #8
 800a39e:	3308      	addeq	r3, #8
 800a3a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3a4:	bf04      	itt	eq
 800a3a6:	0100      	lsleq	r0, r0, #4
 800a3a8:	3304      	addeq	r3, #4
 800a3aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3ae:	bf04      	itt	eq
 800a3b0:	0080      	lsleq	r0, r0, #2
 800a3b2:	3302      	addeq	r3, #2
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	db05      	blt.n	800a3c4 <__hi0bits+0x38>
 800a3b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a3bc:	f103 0301 	add.w	r3, r3, #1
 800a3c0:	bf08      	it	eq
 800a3c2:	2320      	moveq	r3, #32
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	4770      	bx	lr
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	e7e4      	b.n	800a396 <__hi0bits+0xa>

0800a3cc <__lo0bits>:
 800a3cc:	6803      	ldr	r3, [r0, #0]
 800a3ce:	f013 0207 	ands.w	r2, r3, #7
 800a3d2:	4601      	mov	r1, r0
 800a3d4:	d00b      	beq.n	800a3ee <__lo0bits+0x22>
 800a3d6:	07da      	lsls	r2, r3, #31
 800a3d8:	d423      	bmi.n	800a422 <__lo0bits+0x56>
 800a3da:	0798      	lsls	r0, r3, #30
 800a3dc:	bf49      	itett	mi
 800a3de:	085b      	lsrmi	r3, r3, #1
 800a3e0:	089b      	lsrpl	r3, r3, #2
 800a3e2:	2001      	movmi	r0, #1
 800a3e4:	600b      	strmi	r3, [r1, #0]
 800a3e6:	bf5c      	itt	pl
 800a3e8:	600b      	strpl	r3, [r1, #0]
 800a3ea:	2002      	movpl	r0, #2
 800a3ec:	4770      	bx	lr
 800a3ee:	b298      	uxth	r0, r3
 800a3f0:	b9a8      	cbnz	r0, 800a41e <__lo0bits+0x52>
 800a3f2:	0c1b      	lsrs	r3, r3, #16
 800a3f4:	2010      	movs	r0, #16
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	b90a      	cbnz	r2, 800a3fe <__lo0bits+0x32>
 800a3fa:	3008      	adds	r0, #8
 800a3fc:	0a1b      	lsrs	r3, r3, #8
 800a3fe:	071a      	lsls	r2, r3, #28
 800a400:	bf04      	itt	eq
 800a402:	091b      	lsreq	r3, r3, #4
 800a404:	3004      	addeq	r0, #4
 800a406:	079a      	lsls	r2, r3, #30
 800a408:	bf04      	itt	eq
 800a40a:	089b      	lsreq	r3, r3, #2
 800a40c:	3002      	addeq	r0, #2
 800a40e:	07da      	lsls	r2, r3, #31
 800a410:	d403      	bmi.n	800a41a <__lo0bits+0x4e>
 800a412:	085b      	lsrs	r3, r3, #1
 800a414:	f100 0001 	add.w	r0, r0, #1
 800a418:	d005      	beq.n	800a426 <__lo0bits+0x5a>
 800a41a:	600b      	str	r3, [r1, #0]
 800a41c:	4770      	bx	lr
 800a41e:	4610      	mov	r0, r2
 800a420:	e7e9      	b.n	800a3f6 <__lo0bits+0x2a>
 800a422:	2000      	movs	r0, #0
 800a424:	4770      	bx	lr
 800a426:	2020      	movs	r0, #32
 800a428:	4770      	bx	lr
	...

0800a42c <__i2b>:
 800a42c:	b510      	push	{r4, lr}
 800a42e:	460c      	mov	r4, r1
 800a430:	2101      	movs	r1, #1
 800a432:	f7ff ff03 	bl	800a23c <_Balloc>
 800a436:	4602      	mov	r2, r0
 800a438:	b928      	cbnz	r0, 800a446 <__i2b+0x1a>
 800a43a:	4b05      	ldr	r3, [pc, #20]	; (800a450 <__i2b+0x24>)
 800a43c:	4805      	ldr	r0, [pc, #20]	; (800a454 <__i2b+0x28>)
 800a43e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a442:	f000 fce1 	bl	800ae08 <__assert_func>
 800a446:	2301      	movs	r3, #1
 800a448:	6144      	str	r4, [r0, #20]
 800a44a:	6103      	str	r3, [r0, #16]
 800a44c:	bd10      	pop	{r4, pc}
 800a44e:	bf00      	nop
 800a450:	0800d9a3 	.word	0x0800d9a3
 800a454:	0800d9b4 	.word	0x0800d9b4

0800a458 <__multiply>:
 800a458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45c:	4691      	mov	r9, r2
 800a45e:	690a      	ldr	r2, [r1, #16]
 800a460:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a464:	429a      	cmp	r2, r3
 800a466:	bfb8      	it	lt
 800a468:	460b      	movlt	r3, r1
 800a46a:	460c      	mov	r4, r1
 800a46c:	bfbc      	itt	lt
 800a46e:	464c      	movlt	r4, r9
 800a470:	4699      	movlt	r9, r3
 800a472:	6927      	ldr	r7, [r4, #16]
 800a474:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a478:	68a3      	ldr	r3, [r4, #8]
 800a47a:	6861      	ldr	r1, [r4, #4]
 800a47c:	eb07 060a 	add.w	r6, r7, sl
 800a480:	42b3      	cmp	r3, r6
 800a482:	b085      	sub	sp, #20
 800a484:	bfb8      	it	lt
 800a486:	3101      	addlt	r1, #1
 800a488:	f7ff fed8 	bl	800a23c <_Balloc>
 800a48c:	b930      	cbnz	r0, 800a49c <__multiply+0x44>
 800a48e:	4602      	mov	r2, r0
 800a490:	4b44      	ldr	r3, [pc, #272]	; (800a5a4 <__multiply+0x14c>)
 800a492:	4845      	ldr	r0, [pc, #276]	; (800a5a8 <__multiply+0x150>)
 800a494:	f240 115d 	movw	r1, #349	; 0x15d
 800a498:	f000 fcb6 	bl	800ae08 <__assert_func>
 800a49c:	f100 0514 	add.w	r5, r0, #20
 800a4a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4a4:	462b      	mov	r3, r5
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	4543      	cmp	r3, r8
 800a4aa:	d321      	bcc.n	800a4f0 <__multiply+0x98>
 800a4ac:	f104 0314 	add.w	r3, r4, #20
 800a4b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a4b4:	f109 0314 	add.w	r3, r9, #20
 800a4b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a4bc:	9202      	str	r2, [sp, #8]
 800a4be:	1b3a      	subs	r2, r7, r4
 800a4c0:	3a15      	subs	r2, #21
 800a4c2:	f022 0203 	bic.w	r2, r2, #3
 800a4c6:	3204      	adds	r2, #4
 800a4c8:	f104 0115 	add.w	r1, r4, #21
 800a4cc:	428f      	cmp	r7, r1
 800a4ce:	bf38      	it	cc
 800a4d0:	2204      	movcc	r2, #4
 800a4d2:	9201      	str	r2, [sp, #4]
 800a4d4:	9a02      	ldr	r2, [sp, #8]
 800a4d6:	9303      	str	r3, [sp, #12]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d80c      	bhi.n	800a4f6 <__multiply+0x9e>
 800a4dc:	2e00      	cmp	r6, #0
 800a4de:	dd03      	ble.n	800a4e8 <__multiply+0x90>
 800a4e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d05a      	beq.n	800a59e <__multiply+0x146>
 800a4e8:	6106      	str	r6, [r0, #16]
 800a4ea:	b005      	add	sp, #20
 800a4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f0:	f843 2b04 	str.w	r2, [r3], #4
 800a4f4:	e7d8      	b.n	800a4a8 <__multiply+0x50>
 800a4f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4fa:	f1ba 0f00 	cmp.w	sl, #0
 800a4fe:	d024      	beq.n	800a54a <__multiply+0xf2>
 800a500:	f104 0e14 	add.w	lr, r4, #20
 800a504:	46a9      	mov	r9, r5
 800a506:	f04f 0c00 	mov.w	ip, #0
 800a50a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a50e:	f8d9 1000 	ldr.w	r1, [r9]
 800a512:	fa1f fb82 	uxth.w	fp, r2
 800a516:	b289      	uxth	r1, r1
 800a518:	fb0a 110b 	mla	r1, sl, fp, r1
 800a51c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a520:	f8d9 2000 	ldr.w	r2, [r9]
 800a524:	4461      	add	r1, ip
 800a526:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a52a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a52e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a532:	b289      	uxth	r1, r1
 800a534:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a538:	4577      	cmp	r7, lr
 800a53a:	f849 1b04 	str.w	r1, [r9], #4
 800a53e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a542:	d8e2      	bhi.n	800a50a <__multiply+0xb2>
 800a544:	9a01      	ldr	r2, [sp, #4]
 800a546:	f845 c002 	str.w	ip, [r5, r2]
 800a54a:	9a03      	ldr	r2, [sp, #12]
 800a54c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a550:	3304      	adds	r3, #4
 800a552:	f1b9 0f00 	cmp.w	r9, #0
 800a556:	d020      	beq.n	800a59a <__multiply+0x142>
 800a558:	6829      	ldr	r1, [r5, #0]
 800a55a:	f104 0c14 	add.w	ip, r4, #20
 800a55e:	46ae      	mov	lr, r5
 800a560:	f04f 0a00 	mov.w	sl, #0
 800a564:	f8bc b000 	ldrh.w	fp, [ip]
 800a568:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a56c:	fb09 220b 	mla	r2, r9, fp, r2
 800a570:	4492      	add	sl, r2
 800a572:	b289      	uxth	r1, r1
 800a574:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a578:	f84e 1b04 	str.w	r1, [lr], #4
 800a57c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a580:	f8be 1000 	ldrh.w	r1, [lr]
 800a584:	0c12      	lsrs	r2, r2, #16
 800a586:	fb09 1102 	mla	r1, r9, r2, r1
 800a58a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a58e:	4567      	cmp	r7, ip
 800a590:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a594:	d8e6      	bhi.n	800a564 <__multiply+0x10c>
 800a596:	9a01      	ldr	r2, [sp, #4]
 800a598:	50a9      	str	r1, [r5, r2]
 800a59a:	3504      	adds	r5, #4
 800a59c:	e79a      	b.n	800a4d4 <__multiply+0x7c>
 800a59e:	3e01      	subs	r6, #1
 800a5a0:	e79c      	b.n	800a4dc <__multiply+0x84>
 800a5a2:	bf00      	nop
 800a5a4:	0800d9a3 	.word	0x0800d9a3
 800a5a8:	0800d9b4 	.word	0x0800d9b4

0800a5ac <__pow5mult>:
 800a5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b0:	4615      	mov	r5, r2
 800a5b2:	f012 0203 	ands.w	r2, r2, #3
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	460f      	mov	r7, r1
 800a5ba:	d007      	beq.n	800a5cc <__pow5mult+0x20>
 800a5bc:	4c25      	ldr	r4, [pc, #148]	; (800a654 <__pow5mult+0xa8>)
 800a5be:	3a01      	subs	r2, #1
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5c6:	f7ff fe9b 	bl	800a300 <__multadd>
 800a5ca:	4607      	mov	r7, r0
 800a5cc:	10ad      	asrs	r5, r5, #2
 800a5ce:	d03d      	beq.n	800a64c <__pow5mult+0xa0>
 800a5d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a5d2:	b97c      	cbnz	r4, 800a5f4 <__pow5mult+0x48>
 800a5d4:	2010      	movs	r0, #16
 800a5d6:	f7ff fe29 	bl	800a22c <malloc>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	6270      	str	r0, [r6, #36]	; 0x24
 800a5de:	b928      	cbnz	r0, 800a5ec <__pow5mult+0x40>
 800a5e0:	4b1d      	ldr	r3, [pc, #116]	; (800a658 <__pow5mult+0xac>)
 800a5e2:	481e      	ldr	r0, [pc, #120]	; (800a65c <__pow5mult+0xb0>)
 800a5e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a5e8:	f000 fc0e 	bl	800ae08 <__assert_func>
 800a5ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5f0:	6004      	str	r4, [r0, #0]
 800a5f2:	60c4      	str	r4, [r0, #12]
 800a5f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5fc:	b94c      	cbnz	r4, 800a612 <__pow5mult+0x66>
 800a5fe:	f240 2171 	movw	r1, #625	; 0x271
 800a602:	4630      	mov	r0, r6
 800a604:	f7ff ff12 	bl	800a42c <__i2b>
 800a608:	2300      	movs	r3, #0
 800a60a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a60e:	4604      	mov	r4, r0
 800a610:	6003      	str	r3, [r0, #0]
 800a612:	f04f 0900 	mov.w	r9, #0
 800a616:	07eb      	lsls	r3, r5, #31
 800a618:	d50a      	bpl.n	800a630 <__pow5mult+0x84>
 800a61a:	4639      	mov	r1, r7
 800a61c:	4622      	mov	r2, r4
 800a61e:	4630      	mov	r0, r6
 800a620:	f7ff ff1a 	bl	800a458 <__multiply>
 800a624:	4639      	mov	r1, r7
 800a626:	4680      	mov	r8, r0
 800a628:	4630      	mov	r0, r6
 800a62a:	f7ff fe47 	bl	800a2bc <_Bfree>
 800a62e:	4647      	mov	r7, r8
 800a630:	106d      	asrs	r5, r5, #1
 800a632:	d00b      	beq.n	800a64c <__pow5mult+0xa0>
 800a634:	6820      	ldr	r0, [r4, #0]
 800a636:	b938      	cbnz	r0, 800a648 <__pow5mult+0x9c>
 800a638:	4622      	mov	r2, r4
 800a63a:	4621      	mov	r1, r4
 800a63c:	4630      	mov	r0, r6
 800a63e:	f7ff ff0b 	bl	800a458 <__multiply>
 800a642:	6020      	str	r0, [r4, #0]
 800a644:	f8c0 9000 	str.w	r9, [r0]
 800a648:	4604      	mov	r4, r0
 800a64a:	e7e4      	b.n	800a616 <__pow5mult+0x6a>
 800a64c:	4638      	mov	r0, r7
 800a64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a652:	bf00      	nop
 800a654:	0800db00 	.word	0x0800db00
 800a658:	0800d931 	.word	0x0800d931
 800a65c:	0800d9b4 	.word	0x0800d9b4

0800a660 <__lshift>:
 800a660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a664:	460c      	mov	r4, r1
 800a666:	6849      	ldr	r1, [r1, #4]
 800a668:	6923      	ldr	r3, [r4, #16]
 800a66a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a66e:	68a3      	ldr	r3, [r4, #8]
 800a670:	4607      	mov	r7, r0
 800a672:	4691      	mov	r9, r2
 800a674:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a678:	f108 0601 	add.w	r6, r8, #1
 800a67c:	42b3      	cmp	r3, r6
 800a67e:	db0b      	blt.n	800a698 <__lshift+0x38>
 800a680:	4638      	mov	r0, r7
 800a682:	f7ff fddb 	bl	800a23c <_Balloc>
 800a686:	4605      	mov	r5, r0
 800a688:	b948      	cbnz	r0, 800a69e <__lshift+0x3e>
 800a68a:	4602      	mov	r2, r0
 800a68c:	4b2a      	ldr	r3, [pc, #168]	; (800a738 <__lshift+0xd8>)
 800a68e:	482b      	ldr	r0, [pc, #172]	; (800a73c <__lshift+0xdc>)
 800a690:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a694:	f000 fbb8 	bl	800ae08 <__assert_func>
 800a698:	3101      	adds	r1, #1
 800a69a:	005b      	lsls	r3, r3, #1
 800a69c:	e7ee      	b.n	800a67c <__lshift+0x1c>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f100 0114 	add.w	r1, r0, #20
 800a6a4:	f100 0210 	add.w	r2, r0, #16
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	4553      	cmp	r3, sl
 800a6ac:	db37      	blt.n	800a71e <__lshift+0xbe>
 800a6ae:	6920      	ldr	r0, [r4, #16]
 800a6b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6b4:	f104 0314 	add.w	r3, r4, #20
 800a6b8:	f019 091f 	ands.w	r9, r9, #31
 800a6bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a6c4:	d02f      	beq.n	800a726 <__lshift+0xc6>
 800a6c6:	f1c9 0e20 	rsb	lr, r9, #32
 800a6ca:	468a      	mov	sl, r1
 800a6cc:	f04f 0c00 	mov.w	ip, #0
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	fa02 f209 	lsl.w	r2, r2, r9
 800a6d6:	ea42 020c 	orr.w	r2, r2, ip
 800a6da:	f84a 2b04 	str.w	r2, [sl], #4
 800a6de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e2:	4298      	cmp	r0, r3
 800a6e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a6e8:	d8f2      	bhi.n	800a6d0 <__lshift+0x70>
 800a6ea:	1b03      	subs	r3, r0, r4
 800a6ec:	3b15      	subs	r3, #21
 800a6ee:	f023 0303 	bic.w	r3, r3, #3
 800a6f2:	3304      	adds	r3, #4
 800a6f4:	f104 0215 	add.w	r2, r4, #21
 800a6f8:	4290      	cmp	r0, r2
 800a6fa:	bf38      	it	cc
 800a6fc:	2304      	movcc	r3, #4
 800a6fe:	f841 c003 	str.w	ip, [r1, r3]
 800a702:	f1bc 0f00 	cmp.w	ip, #0
 800a706:	d001      	beq.n	800a70c <__lshift+0xac>
 800a708:	f108 0602 	add.w	r6, r8, #2
 800a70c:	3e01      	subs	r6, #1
 800a70e:	4638      	mov	r0, r7
 800a710:	612e      	str	r6, [r5, #16]
 800a712:	4621      	mov	r1, r4
 800a714:	f7ff fdd2 	bl	800a2bc <_Bfree>
 800a718:	4628      	mov	r0, r5
 800a71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a71e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a722:	3301      	adds	r3, #1
 800a724:	e7c1      	b.n	800a6aa <__lshift+0x4a>
 800a726:	3904      	subs	r1, #4
 800a728:	f853 2b04 	ldr.w	r2, [r3], #4
 800a72c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a730:	4298      	cmp	r0, r3
 800a732:	d8f9      	bhi.n	800a728 <__lshift+0xc8>
 800a734:	e7ea      	b.n	800a70c <__lshift+0xac>
 800a736:	bf00      	nop
 800a738:	0800d9a3 	.word	0x0800d9a3
 800a73c:	0800d9b4 	.word	0x0800d9b4

0800a740 <__mcmp>:
 800a740:	b530      	push	{r4, r5, lr}
 800a742:	6902      	ldr	r2, [r0, #16]
 800a744:	690c      	ldr	r4, [r1, #16]
 800a746:	1b12      	subs	r2, r2, r4
 800a748:	d10e      	bne.n	800a768 <__mcmp+0x28>
 800a74a:	f100 0314 	add.w	r3, r0, #20
 800a74e:	3114      	adds	r1, #20
 800a750:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a754:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a758:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a75c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a760:	42a5      	cmp	r5, r4
 800a762:	d003      	beq.n	800a76c <__mcmp+0x2c>
 800a764:	d305      	bcc.n	800a772 <__mcmp+0x32>
 800a766:	2201      	movs	r2, #1
 800a768:	4610      	mov	r0, r2
 800a76a:	bd30      	pop	{r4, r5, pc}
 800a76c:	4283      	cmp	r3, r0
 800a76e:	d3f3      	bcc.n	800a758 <__mcmp+0x18>
 800a770:	e7fa      	b.n	800a768 <__mcmp+0x28>
 800a772:	f04f 32ff 	mov.w	r2, #4294967295
 800a776:	e7f7      	b.n	800a768 <__mcmp+0x28>

0800a778 <__mdiff>:
 800a778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	460c      	mov	r4, r1
 800a77e:	4606      	mov	r6, r0
 800a780:	4611      	mov	r1, r2
 800a782:	4620      	mov	r0, r4
 800a784:	4690      	mov	r8, r2
 800a786:	f7ff ffdb 	bl	800a740 <__mcmp>
 800a78a:	1e05      	subs	r5, r0, #0
 800a78c:	d110      	bne.n	800a7b0 <__mdiff+0x38>
 800a78e:	4629      	mov	r1, r5
 800a790:	4630      	mov	r0, r6
 800a792:	f7ff fd53 	bl	800a23c <_Balloc>
 800a796:	b930      	cbnz	r0, 800a7a6 <__mdiff+0x2e>
 800a798:	4b3a      	ldr	r3, [pc, #232]	; (800a884 <__mdiff+0x10c>)
 800a79a:	4602      	mov	r2, r0
 800a79c:	f240 2132 	movw	r1, #562	; 0x232
 800a7a0:	4839      	ldr	r0, [pc, #228]	; (800a888 <__mdiff+0x110>)
 800a7a2:	f000 fb31 	bl	800ae08 <__assert_func>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b0:	bfa4      	itt	ge
 800a7b2:	4643      	movge	r3, r8
 800a7b4:	46a0      	movge	r8, r4
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a7bc:	bfa6      	itte	ge
 800a7be:	461c      	movge	r4, r3
 800a7c0:	2500      	movge	r5, #0
 800a7c2:	2501      	movlt	r5, #1
 800a7c4:	f7ff fd3a 	bl	800a23c <_Balloc>
 800a7c8:	b920      	cbnz	r0, 800a7d4 <__mdiff+0x5c>
 800a7ca:	4b2e      	ldr	r3, [pc, #184]	; (800a884 <__mdiff+0x10c>)
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a7d2:	e7e5      	b.n	800a7a0 <__mdiff+0x28>
 800a7d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7d8:	6926      	ldr	r6, [r4, #16]
 800a7da:	60c5      	str	r5, [r0, #12]
 800a7dc:	f104 0914 	add.w	r9, r4, #20
 800a7e0:	f108 0514 	add.w	r5, r8, #20
 800a7e4:	f100 0e14 	add.w	lr, r0, #20
 800a7e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a7ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a7f0:	f108 0210 	add.w	r2, r8, #16
 800a7f4:	46f2      	mov	sl, lr
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a800:	fa1f f883 	uxth.w	r8, r3
 800a804:	fa11 f18b 	uxtah	r1, r1, fp
 800a808:	0c1b      	lsrs	r3, r3, #16
 800a80a:	eba1 0808 	sub.w	r8, r1, r8
 800a80e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a812:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a816:	fa1f f888 	uxth.w	r8, r8
 800a81a:	1419      	asrs	r1, r3, #16
 800a81c:	454e      	cmp	r6, r9
 800a81e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a822:	f84a 3b04 	str.w	r3, [sl], #4
 800a826:	d8e7      	bhi.n	800a7f8 <__mdiff+0x80>
 800a828:	1b33      	subs	r3, r6, r4
 800a82a:	3b15      	subs	r3, #21
 800a82c:	f023 0303 	bic.w	r3, r3, #3
 800a830:	3304      	adds	r3, #4
 800a832:	3415      	adds	r4, #21
 800a834:	42a6      	cmp	r6, r4
 800a836:	bf38      	it	cc
 800a838:	2304      	movcc	r3, #4
 800a83a:	441d      	add	r5, r3
 800a83c:	4473      	add	r3, lr
 800a83e:	469e      	mov	lr, r3
 800a840:	462e      	mov	r6, r5
 800a842:	4566      	cmp	r6, ip
 800a844:	d30e      	bcc.n	800a864 <__mdiff+0xec>
 800a846:	f10c 0203 	add.w	r2, ip, #3
 800a84a:	1b52      	subs	r2, r2, r5
 800a84c:	f022 0203 	bic.w	r2, r2, #3
 800a850:	3d03      	subs	r5, #3
 800a852:	45ac      	cmp	ip, r5
 800a854:	bf38      	it	cc
 800a856:	2200      	movcc	r2, #0
 800a858:	441a      	add	r2, r3
 800a85a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a85e:	b17b      	cbz	r3, 800a880 <__mdiff+0x108>
 800a860:	6107      	str	r7, [r0, #16]
 800a862:	e7a3      	b.n	800a7ac <__mdiff+0x34>
 800a864:	f856 8b04 	ldr.w	r8, [r6], #4
 800a868:	fa11 f288 	uxtah	r2, r1, r8
 800a86c:	1414      	asrs	r4, r2, #16
 800a86e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a872:	b292      	uxth	r2, r2
 800a874:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a878:	f84e 2b04 	str.w	r2, [lr], #4
 800a87c:	1421      	asrs	r1, r4, #16
 800a87e:	e7e0      	b.n	800a842 <__mdiff+0xca>
 800a880:	3f01      	subs	r7, #1
 800a882:	e7ea      	b.n	800a85a <__mdiff+0xe2>
 800a884:	0800d9a3 	.word	0x0800d9a3
 800a888:	0800d9b4 	.word	0x0800d9b4

0800a88c <__d2b>:
 800a88c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a890:	4689      	mov	r9, r1
 800a892:	2101      	movs	r1, #1
 800a894:	ec57 6b10 	vmov	r6, r7, d0
 800a898:	4690      	mov	r8, r2
 800a89a:	f7ff fccf 	bl	800a23c <_Balloc>
 800a89e:	4604      	mov	r4, r0
 800a8a0:	b930      	cbnz	r0, 800a8b0 <__d2b+0x24>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	4b25      	ldr	r3, [pc, #148]	; (800a93c <__d2b+0xb0>)
 800a8a6:	4826      	ldr	r0, [pc, #152]	; (800a940 <__d2b+0xb4>)
 800a8a8:	f240 310a 	movw	r1, #778	; 0x30a
 800a8ac:	f000 faac 	bl	800ae08 <__assert_func>
 800a8b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a8b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8b8:	bb35      	cbnz	r5, 800a908 <__d2b+0x7c>
 800a8ba:	2e00      	cmp	r6, #0
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	d028      	beq.n	800a912 <__d2b+0x86>
 800a8c0:	4668      	mov	r0, sp
 800a8c2:	9600      	str	r6, [sp, #0]
 800a8c4:	f7ff fd82 	bl	800a3cc <__lo0bits>
 800a8c8:	9900      	ldr	r1, [sp, #0]
 800a8ca:	b300      	cbz	r0, 800a90e <__d2b+0x82>
 800a8cc:	9a01      	ldr	r2, [sp, #4]
 800a8ce:	f1c0 0320 	rsb	r3, r0, #32
 800a8d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d6:	430b      	orrs	r3, r1
 800a8d8:	40c2      	lsrs	r2, r0
 800a8da:	6163      	str	r3, [r4, #20]
 800a8dc:	9201      	str	r2, [sp, #4]
 800a8de:	9b01      	ldr	r3, [sp, #4]
 800a8e0:	61a3      	str	r3, [r4, #24]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	bf14      	ite	ne
 800a8e6:	2202      	movne	r2, #2
 800a8e8:	2201      	moveq	r2, #1
 800a8ea:	6122      	str	r2, [r4, #16]
 800a8ec:	b1d5      	cbz	r5, 800a924 <__d2b+0x98>
 800a8ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a8f2:	4405      	add	r5, r0
 800a8f4:	f8c9 5000 	str.w	r5, [r9]
 800a8f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8fc:	f8c8 0000 	str.w	r0, [r8]
 800a900:	4620      	mov	r0, r4
 800a902:	b003      	add	sp, #12
 800a904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a90c:	e7d5      	b.n	800a8ba <__d2b+0x2e>
 800a90e:	6161      	str	r1, [r4, #20]
 800a910:	e7e5      	b.n	800a8de <__d2b+0x52>
 800a912:	a801      	add	r0, sp, #4
 800a914:	f7ff fd5a 	bl	800a3cc <__lo0bits>
 800a918:	9b01      	ldr	r3, [sp, #4]
 800a91a:	6163      	str	r3, [r4, #20]
 800a91c:	2201      	movs	r2, #1
 800a91e:	6122      	str	r2, [r4, #16]
 800a920:	3020      	adds	r0, #32
 800a922:	e7e3      	b.n	800a8ec <__d2b+0x60>
 800a924:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a928:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a92c:	f8c9 0000 	str.w	r0, [r9]
 800a930:	6918      	ldr	r0, [r3, #16]
 800a932:	f7ff fd2b 	bl	800a38c <__hi0bits>
 800a936:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a93a:	e7df      	b.n	800a8fc <__d2b+0x70>
 800a93c:	0800d9a3 	.word	0x0800d9a3
 800a940:	0800d9b4 	.word	0x0800d9b4

0800a944 <_calloc_r>:
 800a944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a946:	fba1 2402 	umull	r2, r4, r1, r2
 800a94a:	b94c      	cbnz	r4, 800a960 <_calloc_r+0x1c>
 800a94c:	4611      	mov	r1, r2
 800a94e:	9201      	str	r2, [sp, #4]
 800a950:	f000 f87a 	bl	800aa48 <_malloc_r>
 800a954:	9a01      	ldr	r2, [sp, #4]
 800a956:	4605      	mov	r5, r0
 800a958:	b930      	cbnz	r0, 800a968 <_calloc_r+0x24>
 800a95a:	4628      	mov	r0, r5
 800a95c:	b003      	add	sp, #12
 800a95e:	bd30      	pop	{r4, r5, pc}
 800a960:	220c      	movs	r2, #12
 800a962:	6002      	str	r2, [r0, #0]
 800a964:	2500      	movs	r5, #0
 800a966:	e7f8      	b.n	800a95a <_calloc_r+0x16>
 800a968:	4621      	mov	r1, r4
 800a96a:	f7fe f94d 	bl	8008c08 <memset>
 800a96e:	e7f4      	b.n	800a95a <_calloc_r+0x16>

0800a970 <_free_r>:
 800a970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a972:	2900      	cmp	r1, #0
 800a974:	d044      	beq.n	800aa00 <_free_r+0x90>
 800a976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a97a:	9001      	str	r0, [sp, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f1a1 0404 	sub.w	r4, r1, #4
 800a982:	bfb8      	it	lt
 800a984:	18e4      	addlt	r4, r4, r3
 800a986:	f000 fa9b 	bl	800aec0 <__malloc_lock>
 800a98a:	4a1e      	ldr	r2, [pc, #120]	; (800aa04 <_free_r+0x94>)
 800a98c:	9801      	ldr	r0, [sp, #4]
 800a98e:	6813      	ldr	r3, [r2, #0]
 800a990:	b933      	cbnz	r3, 800a9a0 <_free_r+0x30>
 800a992:	6063      	str	r3, [r4, #4]
 800a994:	6014      	str	r4, [r2, #0]
 800a996:	b003      	add	sp, #12
 800a998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a99c:	f000 ba96 	b.w	800aecc <__malloc_unlock>
 800a9a0:	42a3      	cmp	r3, r4
 800a9a2:	d908      	bls.n	800a9b6 <_free_r+0x46>
 800a9a4:	6825      	ldr	r5, [r4, #0]
 800a9a6:	1961      	adds	r1, r4, r5
 800a9a8:	428b      	cmp	r3, r1
 800a9aa:	bf01      	itttt	eq
 800a9ac:	6819      	ldreq	r1, [r3, #0]
 800a9ae:	685b      	ldreq	r3, [r3, #4]
 800a9b0:	1949      	addeq	r1, r1, r5
 800a9b2:	6021      	streq	r1, [r4, #0]
 800a9b4:	e7ed      	b.n	800a992 <_free_r+0x22>
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	b10b      	cbz	r3, 800a9c0 <_free_r+0x50>
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	d9fa      	bls.n	800a9b6 <_free_r+0x46>
 800a9c0:	6811      	ldr	r1, [r2, #0]
 800a9c2:	1855      	adds	r5, r2, r1
 800a9c4:	42a5      	cmp	r5, r4
 800a9c6:	d10b      	bne.n	800a9e0 <_free_r+0x70>
 800a9c8:	6824      	ldr	r4, [r4, #0]
 800a9ca:	4421      	add	r1, r4
 800a9cc:	1854      	adds	r4, r2, r1
 800a9ce:	42a3      	cmp	r3, r4
 800a9d0:	6011      	str	r1, [r2, #0]
 800a9d2:	d1e0      	bne.n	800a996 <_free_r+0x26>
 800a9d4:	681c      	ldr	r4, [r3, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	6053      	str	r3, [r2, #4]
 800a9da:	4421      	add	r1, r4
 800a9dc:	6011      	str	r1, [r2, #0]
 800a9de:	e7da      	b.n	800a996 <_free_r+0x26>
 800a9e0:	d902      	bls.n	800a9e8 <_free_r+0x78>
 800a9e2:	230c      	movs	r3, #12
 800a9e4:	6003      	str	r3, [r0, #0]
 800a9e6:	e7d6      	b.n	800a996 <_free_r+0x26>
 800a9e8:	6825      	ldr	r5, [r4, #0]
 800a9ea:	1961      	adds	r1, r4, r5
 800a9ec:	428b      	cmp	r3, r1
 800a9ee:	bf04      	itt	eq
 800a9f0:	6819      	ldreq	r1, [r3, #0]
 800a9f2:	685b      	ldreq	r3, [r3, #4]
 800a9f4:	6063      	str	r3, [r4, #4]
 800a9f6:	bf04      	itt	eq
 800a9f8:	1949      	addeq	r1, r1, r5
 800a9fa:	6021      	streq	r1, [r4, #0]
 800a9fc:	6054      	str	r4, [r2, #4]
 800a9fe:	e7ca      	b.n	800a996 <_free_r+0x26>
 800aa00:	b003      	add	sp, #12
 800aa02:	bd30      	pop	{r4, r5, pc}
 800aa04:	20000e6c 	.word	0x20000e6c

0800aa08 <sbrk_aligned>:
 800aa08:	b570      	push	{r4, r5, r6, lr}
 800aa0a:	4e0e      	ldr	r6, [pc, #56]	; (800aa44 <sbrk_aligned+0x3c>)
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	6831      	ldr	r1, [r6, #0]
 800aa10:	4605      	mov	r5, r0
 800aa12:	b911      	cbnz	r1, 800aa1a <sbrk_aligned+0x12>
 800aa14:	f000 f9e8 	bl	800ade8 <_sbrk_r>
 800aa18:	6030      	str	r0, [r6, #0]
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	f000 f9e3 	bl	800ade8 <_sbrk_r>
 800aa22:	1c43      	adds	r3, r0, #1
 800aa24:	d00a      	beq.n	800aa3c <sbrk_aligned+0x34>
 800aa26:	1cc4      	adds	r4, r0, #3
 800aa28:	f024 0403 	bic.w	r4, r4, #3
 800aa2c:	42a0      	cmp	r0, r4
 800aa2e:	d007      	beq.n	800aa40 <sbrk_aligned+0x38>
 800aa30:	1a21      	subs	r1, r4, r0
 800aa32:	4628      	mov	r0, r5
 800aa34:	f000 f9d8 	bl	800ade8 <_sbrk_r>
 800aa38:	3001      	adds	r0, #1
 800aa3a:	d101      	bne.n	800aa40 <sbrk_aligned+0x38>
 800aa3c:	f04f 34ff 	mov.w	r4, #4294967295
 800aa40:	4620      	mov	r0, r4
 800aa42:	bd70      	pop	{r4, r5, r6, pc}
 800aa44:	20000e70 	.word	0x20000e70

0800aa48 <_malloc_r>:
 800aa48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4c:	1ccd      	adds	r5, r1, #3
 800aa4e:	f025 0503 	bic.w	r5, r5, #3
 800aa52:	3508      	adds	r5, #8
 800aa54:	2d0c      	cmp	r5, #12
 800aa56:	bf38      	it	cc
 800aa58:	250c      	movcc	r5, #12
 800aa5a:	2d00      	cmp	r5, #0
 800aa5c:	4607      	mov	r7, r0
 800aa5e:	db01      	blt.n	800aa64 <_malloc_r+0x1c>
 800aa60:	42a9      	cmp	r1, r5
 800aa62:	d905      	bls.n	800aa70 <_malloc_r+0x28>
 800aa64:	230c      	movs	r3, #12
 800aa66:	603b      	str	r3, [r7, #0]
 800aa68:	2600      	movs	r6, #0
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa70:	4e2e      	ldr	r6, [pc, #184]	; (800ab2c <_malloc_r+0xe4>)
 800aa72:	f000 fa25 	bl	800aec0 <__malloc_lock>
 800aa76:	6833      	ldr	r3, [r6, #0]
 800aa78:	461c      	mov	r4, r3
 800aa7a:	bb34      	cbnz	r4, 800aaca <_malloc_r+0x82>
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	4638      	mov	r0, r7
 800aa80:	f7ff ffc2 	bl	800aa08 <sbrk_aligned>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	4604      	mov	r4, r0
 800aa88:	d14d      	bne.n	800ab26 <_malloc_r+0xde>
 800aa8a:	6834      	ldr	r4, [r6, #0]
 800aa8c:	4626      	mov	r6, r4
 800aa8e:	2e00      	cmp	r6, #0
 800aa90:	d140      	bne.n	800ab14 <_malloc_r+0xcc>
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	4631      	mov	r1, r6
 800aa96:	4638      	mov	r0, r7
 800aa98:	eb04 0803 	add.w	r8, r4, r3
 800aa9c:	f000 f9a4 	bl	800ade8 <_sbrk_r>
 800aaa0:	4580      	cmp	r8, r0
 800aaa2:	d13a      	bne.n	800ab1a <_malloc_r+0xd2>
 800aaa4:	6821      	ldr	r1, [r4, #0]
 800aaa6:	3503      	adds	r5, #3
 800aaa8:	1a6d      	subs	r5, r5, r1
 800aaaa:	f025 0503 	bic.w	r5, r5, #3
 800aaae:	3508      	adds	r5, #8
 800aab0:	2d0c      	cmp	r5, #12
 800aab2:	bf38      	it	cc
 800aab4:	250c      	movcc	r5, #12
 800aab6:	4629      	mov	r1, r5
 800aab8:	4638      	mov	r0, r7
 800aaba:	f7ff ffa5 	bl	800aa08 <sbrk_aligned>
 800aabe:	3001      	adds	r0, #1
 800aac0:	d02b      	beq.n	800ab1a <_malloc_r+0xd2>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	442b      	add	r3, r5
 800aac6:	6023      	str	r3, [r4, #0]
 800aac8:	e00e      	b.n	800aae8 <_malloc_r+0xa0>
 800aaca:	6822      	ldr	r2, [r4, #0]
 800aacc:	1b52      	subs	r2, r2, r5
 800aace:	d41e      	bmi.n	800ab0e <_malloc_r+0xc6>
 800aad0:	2a0b      	cmp	r2, #11
 800aad2:	d916      	bls.n	800ab02 <_malloc_r+0xba>
 800aad4:	1961      	adds	r1, r4, r5
 800aad6:	42a3      	cmp	r3, r4
 800aad8:	6025      	str	r5, [r4, #0]
 800aada:	bf18      	it	ne
 800aadc:	6059      	strne	r1, [r3, #4]
 800aade:	6863      	ldr	r3, [r4, #4]
 800aae0:	bf08      	it	eq
 800aae2:	6031      	streq	r1, [r6, #0]
 800aae4:	5162      	str	r2, [r4, r5]
 800aae6:	604b      	str	r3, [r1, #4]
 800aae8:	4638      	mov	r0, r7
 800aaea:	f104 060b 	add.w	r6, r4, #11
 800aaee:	f000 f9ed 	bl	800aecc <__malloc_unlock>
 800aaf2:	f026 0607 	bic.w	r6, r6, #7
 800aaf6:	1d23      	adds	r3, r4, #4
 800aaf8:	1af2      	subs	r2, r6, r3
 800aafa:	d0b6      	beq.n	800aa6a <_malloc_r+0x22>
 800aafc:	1b9b      	subs	r3, r3, r6
 800aafe:	50a3      	str	r3, [r4, r2]
 800ab00:	e7b3      	b.n	800aa6a <_malloc_r+0x22>
 800ab02:	6862      	ldr	r2, [r4, #4]
 800ab04:	42a3      	cmp	r3, r4
 800ab06:	bf0c      	ite	eq
 800ab08:	6032      	streq	r2, [r6, #0]
 800ab0a:	605a      	strne	r2, [r3, #4]
 800ab0c:	e7ec      	b.n	800aae8 <_malloc_r+0xa0>
 800ab0e:	4623      	mov	r3, r4
 800ab10:	6864      	ldr	r4, [r4, #4]
 800ab12:	e7b2      	b.n	800aa7a <_malloc_r+0x32>
 800ab14:	4634      	mov	r4, r6
 800ab16:	6876      	ldr	r6, [r6, #4]
 800ab18:	e7b9      	b.n	800aa8e <_malloc_r+0x46>
 800ab1a:	230c      	movs	r3, #12
 800ab1c:	603b      	str	r3, [r7, #0]
 800ab1e:	4638      	mov	r0, r7
 800ab20:	f000 f9d4 	bl	800aecc <__malloc_unlock>
 800ab24:	e7a1      	b.n	800aa6a <_malloc_r+0x22>
 800ab26:	6025      	str	r5, [r4, #0]
 800ab28:	e7de      	b.n	800aae8 <_malloc_r+0xa0>
 800ab2a:	bf00      	nop
 800ab2c:	20000e6c 	.word	0x20000e6c

0800ab30 <__ssputs_r>:
 800ab30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab34:	688e      	ldr	r6, [r1, #8]
 800ab36:	429e      	cmp	r6, r3
 800ab38:	4682      	mov	sl, r0
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	4690      	mov	r8, r2
 800ab3e:	461f      	mov	r7, r3
 800ab40:	d838      	bhi.n	800abb4 <__ssputs_r+0x84>
 800ab42:	898a      	ldrh	r2, [r1, #12]
 800ab44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab48:	d032      	beq.n	800abb0 <__ssputs_r+0x80>
 800ab4a:	6825      	ldr	r5, [r4, #0]
 800ab4c:	6909      	ldr	r1, [r1, #16]
 800ab4e:	eba5 0901 	sub.w	r9, r5, r1
 800ab52:	6965      	ldr	r5, [r4, #20]
 800ab54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	444b      	add	r3, r9
 800ab60:	106d      	asrs	r5, r5, #1
 800ab62:	429d      	cmp	r5, r3
 800ab64:	bf38      	it	cc
 800ab66:	461d      	movcc	r5, r3
 800ab68:	0553      	lsls	r3, r2, #21
 800ab6a:	d531      	bpl.n	800abd0 <__ssputs_r+0xa0>
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	f7ff ff6b 	bl	800aa48 <_malloc_r>
 800ab72:	4606      	mov	r6, r0
 800ab74:	b950      	cbnz	r0, 800ab8c <__ssputs_r+0x5c>
 800ab76:	230c      	movs	r3, #12
 800ab78:	f8ca 3000 	str.w	r3, [sl]
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab82:	81a3      	strh	r3, [r4, #12]
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295
 800ab88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab8c:	6921      	ldr	r1, [r4, #16]
 800ab8e:	464a      	mov	r2, r9
 800ab90:	f7fe f82c 	bl	8008bec <memcpy>
 800ab94:	89a3      	ldrh	r3, [r4, #12]
 800ab96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab9e:	81a3      	strh	r3, [r4, #12]
 800aba0:	6126      	str	r6, [r4, #16]
 800aba2:	6165      	str	r5, [r4, #20]
 800aba4:	444e      	add	r6, r9
 800aba6:	eba5 0509 	sub.w	r5, r5, r9
 800abaa:	6026      	str	r6, [r4, #0]
 800abac:	60a5      	str	r5, [r4, #8]
 800abae:	463e      	mov	r6, r7
 800abb0:	42be      	cmp	r6, r7
 800abb2:	d900      	bls.n	800abb6 <__ssputs_r+0x86>
 800abb4:	463e      	mov	r6, r7
 800abb6:	6820      	ldr	r0, [r4, #0]
 800abb8:	4632      	mov	r2, r6
 800abba:	4641      	mov	r1, r8
 800abbc:	f000 f966 	bl	800ae8c <memmove>
 800abc0:	68a3      	ldr	r3, [r4, #8]
 800abc2:	1b9b      	subs	r3, r3, r6
 800abc4:	60a3      	str	r3, [r4, #8]
 800abc6:	6823      	ldr	r3, [r4, #0]
 800abc8:	4433      	add	r3, r6
 800abca:	6023      	str	r3, [r4, #0]
 800abcc:	2000      	movs	r0, #0
 800abce:	e7db      	b.n	800ab88 <__ssputs_r+0x58>
 800abd0:	462a      	mov	r2, r5
 800abd2:	f000 f981 	bl	800aed8 <_realloc_r>
 800abd6:	4606      	mov	r6, r0
 800abd8:	2800      	cmp	r0, #0
 800abda:	d1e1      	bne.n	800aba0 <__ssputs_r+0x70>
 800abdc:	6921      	ldr	r1, [r4, #16]
 800abde:	4650      	mov	r0, sl
 800abe0:	f7ff fec6 	bl	800a970 <_free_r>
 800abe4:	e7c7      	b.n	800ab76 <__ssputs_r+0x46>
	...

0800abe8 <_svfiprintf_r>:
 800abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	4698      	mov	r8, r3
 800abee:	898b      	ldrh	r3, [r1, #12]
 800abf0:	061b      	lsls	r3, r3, #24
 800abf2:	b09d      	sub	sp, #116	; 0x74
 800abf4:	4607      	mov	r7, r0
 800abf6:	460d      	mov	r5, r1
 800abf8:	4614      	mov	r4, r2
 800abfa:	d50e      	bpl.n	800ac1a <_svfiprintf_r+0x32>
 800abfc:	690b      	ldr	r3, [r1, #16]
 800abfe:	b963      	cbnz	r3, 800ac1a <_svfiprintf_r+0x32>
 800ac00:	2140      	movs	r1, #64	; 0x40
 800ac02:	f7ff ff21 	bl	800aa48 <_malloc_r>
 800ac06:	6028      	str	r0, [r5, #0]
 800ac08:	6128      	str	r0, [r5, #16]
 800ac0a:	b920      	cbnz	r0, 800ac16 <_svfiprintf_r+0x2e>
 800ac0c:	230c      	movs	r3, #12
 800ac0e:	603b      	str	r3, [r7, #0]
 800ac10:	f04f 30ff 	mov.w	r0, #4294967295
 800ac14:	e0d1      	b.n	800adba <_svfiprintf_r+0x1d2>
 800ac16:	2340      	movs	r3, #64	; 0x40
 800ac18:	616b      	str	r3, [r5, #20]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac1e:	2320      	movs	r3, #32
 800ac20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac28:	2330      	movs	r3, #48	; 0x30
 800ac2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800add4 <_svfiprintf_r+0x1ec>
 800ac2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac32:	f04f 0901 	mov.w	r9, #1
 800ac36:	4623      	mov	r3, r4
 800ac38:	469a      	mov	sl, r3
 800ac3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac3e:	b10a      	cbz	r2, 800ac44 <_svfiprintf_r+0x5c>
 800ac40:	2a25      	cmp	r2, #37	; 0x25
 800ac42:	d1f9      	bne.n	800ac38 <_svfiprintf_r+0x50>
 800ac44:	ebba 0b04 	subs.w	fp, sl, r4
 800ac48:	d00b      	beq.n	800ac62 <_svfiprintf_r+0x7a>
 800ac4a:	465b      	mov	r3, fp
 800ac4c:	4622      	mov	r2, r4
 800ac4e:	4629      	mov	r1, r5
 800ac50:	4638      	mov	r0, r7
 800ac52:	f7ff ff6d 	bl	800ab30 <__ssputs_r>
 800ac56:	3001      	adds	r0, #1
 800ac58:	f000 80aa 	beq.w	800adb0 <_svfiprintf_r+0x1c8>
 800ac5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac5e:	445a      	add	r2, fp
 800ac60:	9209      	str	r2, [sp, #36]	; 0x24
 800ac62:	f89a 3000 	ldrb.w	r3, [sl]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f000 80a2 	beq.w	800adb0 <_svfiprintf_r+0x1c8>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac76:	f10a 0a01 	add.w	sl, sl, #1
 800ac7a:	9304      	str	r3, [sp, #16]
 800ac7c:	9307      	str	r3, [sp, #28]
 800ac7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac82:	931a      	str	r3, [sp, #104]	; 0x68
 800ac84:	4654      	mov	r4, sl
 800ac86:	2205      	movs	r2, #5
 800ac88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac8c:	4851      	ldr	r0, [pc, #324]	; (800add4 <_svfiprintf_r+0x1ec>)
 800ac8e:	f7f5 faa7 	bl	80001e0 <memchr>
 800ac92:	9a04      	ldr	r2, [sp, #16]
 800ac94:	b9d8      	cbnz	r0, 800acce <_svfiprintf_r+0xe6>
 800ac96:	06d0      	lsls	r0, r2, #27
 800ac98:	bf44      	itt	mi
 800ac9a:	2320      	movmi	r3, #32
 800ac9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aca0:	0711      	lsls	r1, r2, #28
 800aca2:	bf44      	itt	mi
 800aca4:	232b      	movmi	r3, #43	; 0x2b
 800aca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acaa:	f89a 3000 	ldrb.w	r3, [sl]
 800acae:	2b2a      	cmp	r3, #42	; 0x2a
 800acb0:	d015      	beq.n	800acde <_svfiprintf_r+0xf6>
 800acb2:	9a07      	ldr	r2, [sp, #28]
 800acb4:	4654      	mov	r4, sl
 800acb6:	2000      	movs	r0, #0
 800acb8:	f04f 0c0a 	mov.w	ip, #10
 800acbc:	4621      	mov	r1, r4
 800acbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acc2:	3b30      	subs	r3, #48	; 0x30
 800acc4:	2b09      	cmp	r3, #9
 800acc6:	d94e      	bls.n	800ad66 <_svfiprintf_r+0x17e>
 800acc8:	b1b0      	cbz	r0, 800acf8 <_svfiprintf_r+0x110>
 800acca:	9207      	str	r2, [sp, #28]
 800accc:	e014      	b.n	800acf8 <_svfiprintf_r+0x110>
 800acce:	eba0 0308 	sub.w	r3, r0, r8
 800acd2:	fa09 f303 	lsl.w	r3, r9, r3
 800acd6:	4313      	orrs	r3, r2
 800acd8:	9304      	str	r3, [sp, #16]
 800acda:	46a2      	mov	sl, r4
 800acdc:	e7d2      	b.n	800ac84 <_svfiprintf_r+0x9c>
 800acde:	9b03      	ldr	r3, [sp, #12]
 800ace0:	1d19      	adds	r1, r3, #4
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	9103      	str	r1, [sp, #12]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	bfbb      	ittet	lt
 800acea:	425b      	neglt	r3, r3
 800acec:	f042 0202 	orrlt.w	r2, r2, #2
 800acf0:	9307      	strge	r3, [sp, #28]
 800acf2:	9307      	strlt	r3, [sp, #28]
 800acf4:	bfb8      	it	lt
 800acf6:	9204      	strlt	r2, [sp, #16]
 800acf8:	7823      	ldrb	r3, [r4, #0]
 800acfa:	2b2e      	cmp	r3, #46	; 0x2e
 800acfc:	d10c      	bne.n	800ad18 <_svfiprintf_r+0x130>
 800acfe:	7863      	ldrb	r3, [r4, #1]
 800ad00:	2b2a      	cmp	r3, #42	; 0x2a
 800ad02:	d135      	bne.n	800ad70 <_svfiprintf_r+0x188>
 800ad04:	9b03      	ldr	r3, [sp, #12]
 800ad06:	1d1a      	adds	r2, r3, #4
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	9203      	str	r2, [sp, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	bfb8      	it	lt
 800ad10:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad14:	3402      	adds	r4, #2
 800ad16:	9305      	str	r3, [sp, #20]
 800ad18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ade4 <_svfiprintf_r+0x1fc>
 800ad1c:	7821      	ldrb	r1, [r4, #0]
 800ad1e:	2203      	movs	r2, #3
 800ad20:	4650      	mov	r0, sl
 800ad22:	f7f5 fa5d 	bl	80001e0 <memchr>
 800ad26:	b140      	cbz	r0, 800ad3a <_svfiprintf_r+0x152>
 800ad28:	2340      	movs	r3, #64	; 0x40
 800ad2a:	eba0 000a 	sub.w	r0, r0, sl
 800ad2e:	fa03 f000 	lsl.w	r0, r3, r0
 800ad32:	9b04      	ldr	r3, [sp, #16]
 800ad34:	4303      	orrs	r3, r0
 800ad36:	3401      	adds	r4, #1
 800ad38:	9304      	str	r3, [sp, #16]
 800ad3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad3e:	4826      	ldr	r0, [pc, #152]	; (800add8 <_svfiprintf_r+0x1f0>)
 800ad40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad44:	2206      	movs	r2, #6
 800ad46:	f7f5 fa4b 	bl	80001e0 <memchr>
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	d038      	beq.n	800adc0 <_svfiprintf_r+0x1d8>
 800ad4e:	4b23      	ldr	r3, [pc, #140]	; (800addc <_svfiprintf_r+0x1f4>)
 800ad50:	bb1b      	cbnz	r3, 800ad9a <_svfiprintf_r+0x1b2>
 800ad52:	9b03      	ldr	r3, [sp, #12]
 800ad54:	3307      	adds	r3, #7
 800ad56:	f023 0307 	bic.w	r3, r3, #7
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	9303      	str	r3, [sp, #12]
 800ad5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad60:	4433      	add	r3, r6
 800ad62:	9309      	str	r3, [sp, #36]	; 0x24
 800ad64:	e767      	b.n	800ac36 <_svfiprintf_r+0x4e>
 800ad66:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	2001      	movs	r0, #1
 800ad6e:	e7a5      	b.n	800acbc <_svfiprintf_r+0xd4>
 800ad70:	2300      	movs	r3, #0
 800ad72:	3401      	adds	r4, #1
 800ad74:	9305      	str	r3, [sp, #20]
 800ad76:	4619      	mov	r1, r3
 800ad78:	f04f 0c0a 	mov.w	ip, #10
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad82:	3a30      	subs	r2, #48	; 0x30
 800ad84:	2a09      	cmp	r2, #9
 800ad86:	d903      	bls.n	800ad90 <_svfiprintf_r+0x1a8>
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d0c5      	beq.n	800ad18 <_svfiprintf_r+0x130>
 800ad8c:	9105      	str	r1, [sp, #20]
 800ad8e:	e7c3      	b.n	800ad18 <_svfiprintf_r+0x130>
 800ad90:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad94:	4604      	mov	r4, r0
 800ad96:	2301      	movs	r3, #1
 800ad98:	e7f0      	b.n	800ad7c <_svfiprintf_r+0x194>
 800ad9a:	ab03      	add	r3, sp, #12
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	462a      	mov	r2, r5
 800ada0:	4b0f      	ldr	r3, [pc, #60]	; (800ade0 <_svfiprintf_r+0x1f8>)
 800ada2:	a904      	add	r1, sp, #16
 800ada4:	4638      	mov	r0, r7
 800ada6:	f7fd ffd7 	bl	8008d58 <_printf_float>
 800adaa:	1c42      	adds	r2, r0, #1
 800adac:	4606      	mov	r6, r0
 800adae:	d1d6      	bne.n	800ad5e <_svfiprintf_r+0x176>
 800adb0:	89ab      	ldrh	r3, [r5, #12]
 800adb2:	065b      	lsls	r3, r3, #25
 800adb4:	f53f af2c 	bmi.w	800ac10 <_svfiprintf_r+0x28>
 800adb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adba:	b01d      	add	sp, #116	; 0x74
 800adbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc0:	ab03      	add	r3, sp, #12
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	462a      	mov	r2, r5
 800adc6:	4b06      	ldr	r3, [pc, #24]	; (800ade0 <_svfiprintf_r+0x1f8>)
 800adc8:	a904      	add	r1, sp, #16
 800adca:	4638      	mov	r0, r7
 800adcc:	f7fe fa68 	bl	80092a0 <_printf_i>
 800add0:	e7eb      	b.n	800adaa <_svfiprintf_r+0x1c2>
 800add2:	bf00      	nop
 800add4:	0800db0c 	.word	0x0800db0c
 800add8:	0800db16 	.word	0x0800db16
 800addc:	08008d59 	.word	0x08008d59
 800ade0:	0800ab31 	.word	0x0800ab31
 800ade4:	0800db12 	.word	0x0800db12

0800ade8 <_sbrk_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4d06      	ldr	r5, [pc, #24]	; (800ae04 <_sbrk_r+0x1c>)
 800adec:	2300      	movs	r3, #0
 800adee:	4604      	mov	r4, r0
 800adf0:	4608      	mov	r0, r1
 800adf2:	602b      	str	r3, [r5, #0]
 800adf4:	f7f7 ffa8 	bl	8002d48 <_sbrk>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d102      	bne.n	800ae02 <_sbrk_r+0x1a>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	b103      	cbz	r3, 800ae02 <_sbrk_r+0x1a>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	20000e74 	.word	0x20000e74

0800ae08 <__assert_func>:
 800ae08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae0a:	4614      	mov	r4, r2
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	4b09      	ldr	r3, [pc, #36]	; (800ae34 <__assert_func+0x2c>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4605      	mov	r5, r0
 800ae14:	68d8      	ldr	r0, [r3, #12]
 800ae16:	b14c      	cbz	r4, 800ae2c <__assert_func+0x24>
 800ae18:	4b07      	ldr	r3, [pc, #28]	; (800ae38 <__assert_func+0x30>)
 800ae1a:	9100      	str	r1, [sp, #0]
 800ae1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae20:	4906      	ldr	r1, [pc, #24]	; (800ae3c <__assert_func+0x34>)
 800ae22:	462b      	mov	r3, r5
 800ae24:	f000 f80e 	bl	800ae44 <fiprintf>
 800ae28:	f000 faac 	bl	800b384 <abort>
 800ae2c:	4b04      	ldr	r3, [pc, #16]	; (800ae40 <__assert_func+0x38>)
 800ae2e:	461c      	mov	r4, r3
 800ae30:	e7f3      	b.n	800ae1a <__assert_func+0x12>
 800ae32:	bf00      	nop
 800ae34:	2000001c 	.word	0x2000001c
 800ae38:	0800db1d 	.word	0x0800db1d
 800ae3c:	0800db2a 	.word	0x0800db2a
 800ae40:	0800db58 	.word	0x0800db58

0800ae44 <fiprintf>:
 800ae44:	b40e      	push	{r1, r2, r3}
 800ae46:	b503      	push	{r0, r1, lr}
 800ae48:	4601      	mov	r1, r0
 800ae4a:	ab03      	add	r3, sp, #12
 800ae4c:	4805      	ldr	r0, [pc, #20]	; (800ae64 <fiprintf+0x20>)
 800ae4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae52:	6800      	ldr	r0, [r0, #0]
 800ae54:	9301      	str	r3, [sp, #4]
 800ae56:	f000 f897 	bl	800af88 <_vfiprintf_r>
 800ae5a:	b002      	add	sp, #8
 800ae5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae60:	b003      	add	sp, #12
 800ae62:	4770      	bx	lr
 800ae64:	2000001c 	.word	0x2000001c

0800ae68 <__ascii_mbtowc>:
 800ae68:	b082      	sub	sp, #8
 800ae6a:	b901      	cbnz	r1, 800ae6e <__ascii_mbtowc+0x6>
 800ae6c:	a901      	add	r1, sp, #4
 800ae6e:	b142      	cbz	r2, 800ae82 <__ascii_mbtowc+0x1a>
 800ae70:	b14b      	cbz	r3, 800ae86 <__ascii_mbtowc+0x1e>
 800ae72:	7813      	ldrb	r3, [r2, #0]
 800ae74:	600b      	str	r3, [r1, #0]
 800ae76:	7812      	ldrb	r2, [r2, #0]
 800ae78:	1e10      	subs	r0, r2, #0
 800ae7a:	bf18      	it	ne
 800ae7c:	2001      	movne	r0, #1
 800ae7e:	b002      	add	sp, #8
 800ae80:	4770      	bx	lr
 800ae82:	4610      	mov	r0, r2
 800ae84:	e7fb      	b.n	800ae7e <__ascii_mbtowc+0x16>
 800ae86:	f06f 0001 	mvn.w	r0, #1
 800ae8a:	e7f8      	b.n	800ae7e <__ascii_mbtowc+0x16>

0800ae8c <memmove>:
 800ae8c:	4288      	cmp	r0, r1
 800ae8e:	b510      	push	{r4, lr}
 800ae90:	eb01 0402 	add.w	r4, r1, r2
 800ae94:	d902      	bls.n	800ae9c <memmove+0x10>
 800ae96:	4284      	cmp	r4, r0
 800ae98:	4623      	mov	r3, r4
 800ae9a:	d807      	bhi.n	800aeac <memmove+0x20>
 800ae9c:	1e43      	subs	r3, r0, #1
 800ae9e:	42a1      	cmp	r1, r4
 800aea0:	d008      	beq.n	800aeb4 <memmove+0x28>
 800aea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeaa:	e7f8      	b.n	800ae9e <memmove+0x12>
 800aeac:	4402      	add	r2, r0
 800aeae:	4601      	mov	r1, r0
 800aeb0:	428a      	cmp	r2, r1
 800aeb2:	d100      	bne.n	800aeb6 <memmove+0x2a>
 800aeb4:	bd10      	pop	{r4, pc}
 800aeb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aeba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aebe:	e7f7      	b.n	800aeb0 <memmove+0x24>

0800aec0 <__malloc_lock>:
 800aec0:	4801      	ldr	r0, [pc, #4]	; (800aec8 <__malloc_lock+0x8>)
 800aec2:	f000 bc1f 	b.w	800b704 <__retarget_lock_acquire_recursive>
 800aec6:	bf00      	nop
 800aec8:	20000e78 	.word	0x20000e78

0800aecc <__malloc_unlock>:
 800aecc:	4801      	ldr	r0, [pc, #4]	; (800aed4 <__malloc_unlock+0x8>)
 800aece:	f000 bc1a 	b.w	800b706 <__retarget_lock_release_recursive>
 800aed2:	bf00      	nop
 800aed4:	20000e78 	.word	0x20000e78

0800aed8 <_realloc_r>:
 800aed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aedc:	4680      	mov	r8, r0
 800aede:	4614      	mov	r4, r2
 800aee0:	460e      	mov	r6, r1
 800aee2:	b921      	cbnz	r1, 800aeee <_realloc_r+0x16>
 800aee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aee8:	4611      	mov	r1, r2
 800aeea:	f7ff bdad 	b.w	800aa48 <_malloc_r>
 800aeee:	b92a      	cbnz	r2, 800aefc <_realloc_r+0x24>
 800aef0:	f7ff fd3e 	bl	800a970 <_free_r>
 800aef4:	4625      	mov	r5, r4
 800aef6:	4628      	mov	r0, r5
 800aef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aefc:	f000 fc6a 	bl	800b7d4 <_malloc_usable_size_r>
 800af00:	4284      	cmp	r4, r0
 800af02:	4607      	mov	r7, r0
 800af04:	d802      	bhi.n	800af0c <_realloc_r+0x34>
 800af06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af0a:	d812      	bhi.n	800af32 <_realloc_r+0x5a>
 800af0c:	4621      	mov	r1, r4
 800af0e:	4640      	mov	r0, r8
 800af10:	f7ff fd9a 	bl	800aa48 <_malloc_r>
 800af14:	4605      	mov	r5, r0
 800af16:	2800      	cmp	r0, #0
 800af18:	d0ed      	beq.n	800aef6 <_realloc_r+0x1e>
 800af1a:	42bc      	cmp	r4, r7
 800af1c:	4622      	mov	r2, r4
 800af1e:	4631      	mov	r1, r6
 800af20:	bf28      	it	cs
 800af22:	463a      	movcs	r2, r7
 800af24:	f7fd fe62 	bl	8008bec <memcpy>
 800af28:	4631      	mov	r1, r6
 800af2a:	4640      	mov	r0, r8
 800af2c:	f7ff fd20 	bl	800a970 <_free_r>
 800af30:	e7e1      	b.n	800aef6 <_realloc_r+0x1e>
 800af32:	4635      	mov	r5, r6
 800af34:	e7df      	b.n	800aef6 <_realloc_r+0x1e>

0800af36 <__sfputc_r>:
 800af36:	6893      	ldr	r3, [r2, #8]
 800af38:	3b01      	subs	r3, #1
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	b410      	push	{r4}
 800af3e:	6093      	str	r3, [r2, #8]
 800af40:	da08      	bge.n	800af54 <__sfputc_r+0x1e>
 800af42:	6994      	ldr	r4, [r2, #24]
 800af44:	42a3      	cmp	r3, r4
 800af46:	db01      	blt.n	800af4c <__sfputc_r+0x16>
 800af48:	290a      	cmp	r1, #10
 800af4a:	d103      	bne.n	800af54 <__sfputc_r+0x1e>
 800af4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af50:	f000 b94a 	b.w	800b1e8 <__swbuf_r>
 800af54:	6813      	ldr	r3, [r2, #0]
 800af56:	1c58      	adds	r0, r3, #1
 800af58:	6010      	str	r0, [r2, #0]
 800af5a:	7019      	strb	r1, [r3, #0]
 800af5c:	4608      	mov	r0, r1
 800af5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <__sfputs_r>:
 800af64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af66:	4606      	mov	r6, r0
 800af68:	460f      	mov	r7, r1
 800af6a:	4614      	mov	r4, r2
 800af6c:	18d5      	adds	r5, r2, r3
 800af6e:	42ac      	cmp	r4, r5
 800af70:	d101      	bne.n	800af76 <__sfputs_r+0x12>
 800af72:	2000      	movs	r0, #0
 800af74:	e007      	b.n	800af86 <__sfputs_r+0x22>
 800af76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af7a:	463a      	mov	r2, r7
 800af7c:	4630      	mov	r0, r6
 800af7e:	f7ff ffda 	bl	800af36 <__sfputc_r>
 800af82:	1c43      	adds	r3, r0, #1
 800af84:	d1f3      	bne.n	800af6e <__sfputs_r+0xa>
 800af86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af88 <_vfiprintf_r>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	460d      	mov	r5, r1
 800af8e:	b09d      	sub	sp, #116	; 0x74
 800af90:	4614      	mov	r4, r2
 800af92:	4698      	mov	r8, r3
 800af94:	4606      	mov	r6, r0
 800af96:	b118      	cbz	r0, 800afa0 <_vfiprintf_r+0x18>
 800af98:	6983      	ldr	r3, [r0, #24]
 800af9a:	b90b      	cbnz	r3, 800afa0 <_vfiprintf_r+0x18>
 800af9c:	f000 fb14 	bl	800b5c8 <__sinit>
 800afa0:	4b89      	ldr	r3, [pc, #548]	; (800b1c8 <_vfiprintf_r+0x240>)
 800afa2:	429d      	cmp	r5, r3
 800afa4:	d11b      	bne.n	800afde <_vfiprintf_r+0x56>
 800afa6:	6875      	ldr	r5, [r6, #4]
 800afa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afaa:	07d9      	lsls	r1, r3, #31
 800afac:	d405      	bmi.n	800afba <_vfiprintf_r+0x32>
 800afae:	89ab      	ldrh	r3, [r5, #12]
 800afb0:	059a      	lsls	r2, r3, #22
 800afb2:	d402      	bmi.n	800afba <_vfiprintf_r+0x32>
 800afb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afb6:	f000 fba5 	bl	800b704 <__retarget_lock_acquire_recursive>
 800afba:	89ab      	ldrh	r3, [r5, #12]
 800afbc:	071b      	lsls	r3, r3, #28
 800afbe:	d501      	bpl.n	800afc4 <_vfiprintf_r+0x3c>
 800afc0:	692b      	ldr	r3, [r5, #16]
 800afc2:	b9eb      	cbnz	r3, 800b000 <_vfiprintf_r+0x78>
 800afc4:	4629      	mov	r1, r5
 800afc6:	4630      	mov	r0, r6
 800afc8:	f000 f96e 	bl	800b2a8 <__swsetup_r>
 800afcc:	b1c0      	cbz	r0, 800b000 <_vfiprintf_r+0x78>
 800afce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afd0:	07dc      	lsls	r4, r3, #31
 800afd2:	d50e      	bpl.n	800aff2 <_vfiprintf_r+0x6a>
 800afd4:	f04f 30ff 	mov.w	r0, #4294967295
 800afd8:	b01d      	add	sp, #116	; 0x74
 800afda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afde:	4b7b      	ldr	r3, [pc, #492]	; (800b1cc <_vfiprintf_r+0x244>)
 800afe0:	429d      	cmp	r5, r3
 800afe2:	d101      	bne.n	800afe8 <_vfiprintf_r+0x60>
 800afe4:	68b5      	ldr	r5, [r6, #8]
 800afe6:	e7df      	b.n	800afa8 <_vfiprintf_r+0x20>
 800afe8:	4b79      	ldr	r3, [pc, #484]	; (800b1d0 <_vfiprintf_r+0x248>)
 800afea:	429d      	cmp	r5, r3
 800afec:	bf08      	it	eq
 800afee:	68f5      	ldreq	r5, [r6, #12]
 800aff0:	e7da      	b.n	800afa8 <_vfiprintf_r+0x20>
 800aff2:	89ab      	ldrh	r3, [r5, #12]
 800aff4:	0598      	lsls	r0, r3, #22
 800aff6:	d4ed      	bmi.n	800afd4 <_vfiprintf_r+0x4c>
 800aff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800affa:	f000 fb84 	bl	800b706 <__retarget_lock_release_recursive>
 800affe:	e7e9      	b.n	800afd4 <_vfiprintf_r+0x4c>
 800b000:	2300      	movs	r3, #0
 800b002:	9309      	str	r3, [sp, #36]	; 0x24
 800b004:	2320      	movs	r3, #32
 800b006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b00a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b00e:	2330      	movs	r3, #48	; 0x30
 800b010:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1d4 <_vfiprintf_r+0x24c>
 800b014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b018:	f04f 0901 	mov.w	r9, #1
 800b01c:	4623      	mov	r3, r4
 800b01e:	469a      	mov	sl, r3
 800b020:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b024:	b10a      	cbz	r2, 800b02a <_vfiprintf_r+0xa2>
 800b026:	2a25      	cmp	r2, #37	; 0x25
 800b028:	d1f9      	bne.n	800b01e <_vfiprintf_r+0x96>
 800b02a:	ebba 0b04 	subs.w	fp, sl, r4
 800b02e:	d00b      	beq.n	800b048 <_vfiprintf_r+0xc0>
 800b030:	465b      	mov	r3, fp
 800b032:	4622      	mov	r2, r4
 800b034:	4629      	mov	r1, r5
 800b036:	4630      	mov	r0, r6
 800b038:	f7ff ff94 	bl	800af64 <__sfputs_r>
 800b03c:	3001      	adds	r0, #1
 800b03e:	f000 80aa 	beq.w	800b196 <_vfiprintf_r+0x20e>
 800b042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b044:	445a      	add	r2, fp
 800b046:	9209      	str	r2, [sp, #36]	; 0x24
 800b048:	f89a 3000 	ldrb.w	r3, [sl]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f000 80a2 	beq.w	800b196 <_vfiprintf_r+0x20e>
 800b052:	2300      	movs	r3, #0
 800b054:	f04f 32ff 	mov.w	r2, #4294967295
 800b058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b05c:	f10a 0a01 	add.w	sl, sl, #1
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	9307      	str	r3, [sp, #28]
 800b064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b068:	931a      	str	r3, [sp, #104]	; 0x68
 800b06a:	4654      	mov	r4, sl
 800b06c:	2205      	movs	r2, #5
 800b06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b072:	4858      	ldr	r0, [pc, #352]	; (800b1d4 <_vfiprintf_r+0x24c>)
 800b074:	f7f5 f8b4 	bl	80001e0 <memchr>
 800b078:	9a04      	ldr	r2, [sp, #16]
 800b07a:	b9d8      	cbnz	r0, 800b0b4 <_vfiprintf_r+0x12c>
 800b07c:	06d1      	lsls	r1, r2, #27
 800b07e:	bf44      	itt	mi
 800b080:	2320      	movmi	r3, #32
 800b082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b086:	0713      	lsls	r3, r2, #28
 800b088:	bf44      	itt	mi
 800b08a:	232b      	movmi	r3, #43	; 0x2b
 800b08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b090:	f89a 3000 	ldrb.w	r3, [sl]
 800b094:	2b2a      	cmp	r3, #42	; 0x2a
 800b096:	d015      	beq.n	800b0c4 <_vfiprintf_r+0x13c>
 800b098:	9a07      	ldr	r2, [sp, #28]
 800b09a:	4654      	mov	r4, sl
 800b09c:	2000      	movs	r0, #0
 800b09e:	f04f 0c0a 	mov.w	ip, #10
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0a8:	3b30      	subs	r3, #48	; 0x30
 800b0aa:	2b09      	cmp	r3, #9
 800b0ac:	d94e      	bls.n	800b14c <_vfiprintf_r+0x1c4>
 800b0ae:	b1b0      	cbz	r0, 800b0de <_vfiprintf_r+0x156>
 800b0b0:	9207      	str	r2, [sp, #28]
 800b0b2:	e014      	b.n	800b0de <_vfiprintf_r+0x156>
 800b0b4:	eba0 0308 	sub.w	r3, r0, r8
 800b0b8:	fa09 f303 	lsl.w	r3, r9, r3
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	9304      	str	r3, [sp, #16]
 800b0c0:	46a2      	mov	sl, r4
 800b0c2:	e7d2      	b.n	800b06a <_vfiprintf_r+0xe2>
 800b0c4:	9b03      	ldr	r3, [sp, #12]
 800b0c6:	1d19      	adds	r1, r3, #4
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	9103      	str	r1, [sp, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	bfbb      	ittet	lt
 800b0d0:	425b      	neglt	r3, r3
 800b0d2:	f042 0202 	orrlt.w	r2, r2, #2
 800b0d6:	9307      	strge	r3, [sp, #28]
 800b0d8:	9307      	strlt	r3, [sp, #28]
 800b0da:	bfb8      	it	lt
 800b0dc:	9204      	strlt	r2, [sp, #16]
 800b0de:	7823      	ldrb	r3, [r4, #0]
 800b0e0:	2b2e      	cmp	r3, #46	; 0x2e
 800b0e2:	d10c      	bne.n	800b0fe <_vfiprintf_r+0x176>
 800b0e4:	7863      	ldrb	r3, [r4, #1]
 800b0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0e8:	d135      	bne.n	800b156 <_vfiprintf_r+0x1ce>
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	1d1a      	adds	r2, r3, #4
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	9203      	str	r2, [sp, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	bfb8      	it	lt
 800b0f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0fa:	3402      	adds	r4, #2
 800b0fc:	9305      	str	r3, [sp, #20]
 800b0fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1e4 <_vfiprintf_r+0x25c>
 800b102:	7821      	ldrb	r1, [r4, #0]
 800b104:	2203      	movs	r2, #3
 800b106:	4650      	mov	r0, sl
 800b108:	f7f5 f86a 	bl	80001e0 <memchr>
 800b10c:	b140      	cbz	r0, 800b120 <_vfiprintf_r+0x198>
 800b10e:	2340      	movs	r3, #64	; 0x40
 800b110:	eba0 000a 	sub.w	r0, r0, sl
 800b114:	fa03 f000 	lsl.w	r0, r3, r0
 800b118:	9b04      	ldr	r3, [sp, #16]
 800b11a:	4303      	orrs	r3, r0
 800b11c:	3401      	adds	r4, #1
 800b11e:	9304      	str	r3, [sp, #16]
 800b120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b124:	482c      	ldr	r0, [pc, #176]	; (800b1d8 <_vfiprintf_r+0x250>)
 800b126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b12a:	2206      	movs	r2, #6
 800b12c:	f7f5 f858 	bl	80001e0 <memchr>
 800b130:	2800      	cmp	r0, #0
 800b132:	d03f      	beq.n	800b1b4 <_vfiprintf_r+0x22c>
 800b134:	4b29      	ldr	r3, [pc, #164]	; (800b1dc <_vfiprintf_r+0x254>)
 800b136:	bb1b      	cbnz	r3, 800b180 <_vfiprintf_r+0x1f8>
 800b138:	9b03      	ldr	r3, [sp, #12]
 800b13a:	3307      	adds	r3, #7
 800b13c:	f023 0307 	bic.w	r3, r3, #7
 800b140:	3308      	adds	r3, #8
 800b142:	9303      	str	r3, [sp, #12]
 800b144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b146:	443b      	add	r3, r7
 800b148:	9309      	str	r3, [sp, #36]	; 0x24
 800b14a:	e767      	b.n	800b01c <_vfiprintf_r+0x94>
 800b14c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b150:	460c      	mov	r4, r1
 800b152:	2001      	movs	r0, #1
 800b154:	e7a5      	b.n	800b0a2 <_vfiprintf_r+0x11a>
 800b156:	2300      	movs	r3, #0
 800b158:	3401      	adds	r4, #1
 800b15a:	9305      	str	r3, [sp, #20]
 800b15c:	4619      	mov	r1, r3
 800b15e:	f04f 0c0a 	mov.w	ip, #10
 800b162:	4620      	mov	r0, r4
 800b164:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b168:	3a30      	subs	r2, #48	; 0x30
 800b16a:	2a09      	cmp	r2, #9
 800b16c:	d903      	bls.n	800b176 <_vfiprintf_r+0x1ee>
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0c5      	beq.n	800b0fe <_vfiprintf_r+0x176>
 800b172:	9105      	str	r1, [sp, #20]
 800b174:	e7c3      	b.n	800b0fe <_vfiprintf_r+0x176>
 800b176:	fb0c 2101 	mla	r1, ip, r1, r2
 800b17a:	4604      	mov	r4, r0
 800b17c:	2301      	movs	r3, #1
 800b17e:	e7f0      	b.n	800b162 <_vfiprintf_r+0x1da>
 800b180:	ab03      	add	r3, sp, #12
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	462a      	mov	r2, r5
 800b186:	4b16      	ldr	r3, [pc, #88]	; (800b1e0 <_vfiprintf_r+0x258>)
 800b188:	a904      	add	r1, sp, #16
 800b18a:	4630      	mov	r0, r6
 800b18c:	f7fd fde4 	bl	8008d58 <_printf_float>
 800b190:	4607      	mov	r7, r0
 800b192:	1c78      	adds	r0, r7, #1
 800b194:	d1d6      	bne.n	800b144 <_vfiprintf_r+0x1bc>
 800b196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b198:	07d9      	lsls	r1, r3, #31
 800b19a:	d405      	bmi.n	800b1a8 <_vfiprintf_r+0x220>
 800b19c:	89ab      	ldrh	r3, [r5, #12]
 800b19e:	059a      	lsls	r2, r3, #22
 800b1a0:	d402      	bmi.n	800b1a8 <_vfiprintf_r+0x220>
 800b1a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1a4:	f000 faaf 	bl	800b706 <__retarget_lock_release_recursive>
 800b1a8:	89ab      	ldrh	r3, [r5, #12]
 800b1aa:	065b      	lsls	r3, r3, #25
 800b1ac:	f53f af12 	bmi.w	800afd4 <_vfiprintf_r+0x4c>
 800b1b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1b2:	e711      	b.n	800afd8 <_vfiprintf_r+0x50>
 800b1b4:	ab03      	add	r3, sp, #12
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	462a      	mov	r2, r5
 800b1ba:	4b09      	ldr	r3, [pc, #36]	; (800b1e0 <_vfiprintf_r+0x258>)
 800b1bc:	a904      	add	r1, sp, #16
 800b1be:	4630      	mov	r0, r6
 800b1c0:	f7fe f86e 	bl	80092a0 <_printf_i>
 800b1c4:	e7e4      	b.n	800b190 <_vfiprintf_r+0x208>
 800b1c6:	bf00      	nop
 800b1c8:	0800dc84 	.word	0x0800dc84
 800b1cc:	0800dca4 	.word	0x0800dca4
 800b1d0:	0800dc64 	.word	0x0800dc64
 800b1d4:	0800db0c 	.word	0x0800db0c
 800b1d8:	0800db16 	.word	0x0800db16
 800b1dc:	08008d59 	.word	0x08008d59
 800b1e0:	0800af65 	.word	0x0800af65
 800b1e4:	0800db12 	.word	0x0800db12

0800b1e8 <__swbuf_r>:
 800b1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ea:	460e      	mov	r6, r1
 800b1ec:	4614      	mov	r4, r2
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	b118      	cbz	r0, 800b1fa <__swbuf_r+0x12>
 800b1f2:	6983      	ldr	r3, [r0, #24]
 800b1f4:	b90b      	cbnz	r3, 800b1fa <__swbuf_r+0x12>
 800b1f6:	f000 f9e7 	bl	800b5c8 <__sinit>
 800b1fa:	4b21      	ldr	r3, [pc, #132]	; (800b280 <__swbuf_r+0x98>)
 800b1fc:	429c      	cmp	r4, r3
 800b1fe:	d12b      	bne.n	800b258 <__swbuf_r+0x70>
 800b200:	686c      	ldr	r4, [r5, #4]
 800b202:	69a3      	ldr	r3, [r4, #24]
 800b204:	60a3      	str	r3, [r4, #8]
 800b206:	89a3      	ldrh	r3, [r4, #12]
 800b208:	071a      	lsls	r2, r3, #28
 800b20a:	d52f      	bpl.n	800b26c <__swbuf_r+0x84>
 800b20c:	6923      	ldr	r3, [r4, #16]
 800b20e:	b36b      	cbz	r3, 800b26c <__swbuf_r+0x84>
 800b210:	6923      	ldr	r3, [r4, #16]
 800b212:	6820      	ldr	r0, [r4, #0]
 800b214:	1ac0      	subs	r0, r0, r3
 800b216:	6963      	ldr	r3, [r4, #20]
 800b218:	b2f6      	uxtb	r6, r6
 800b21a:	4283      	cmp	r3, r0
 800b21c:	4637      	mov	r7, r6
 800b21e:	dc04      	bgt.n	800b22a <__swbuf_r+0x42>
 800b220:	4621      	mov	r1, r4
 800b222:	4628      	mov	r0, r5
 800b224:	f000 f93c 	bl	800b4a0 <_fflush_r>
 800b228:	bb30      	cbnz	r0, 800b278 <__swbuf_r+0x90>
 800b22a:	68a3      	ldr	r3, [r4, #8]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	60a3      	str	r3, [r4, #8]
 800b230:	6823      	ldr	r3, [r4, #0]
 800b232:	1c5a      	adds	r2, r3, #1
 800b234:	6022      	str	r2, [r4, #0]
 800b236:	701e      	strb	r6, [r3, #0]
 800b238:	6963      	ldr	r3, [r4, #20]
 800b23a:	3001      	adds	r0, #1
 800b23c:	4283      	cmp	r3, r0
 800b23e:	d004      	beq.n	800b24a <__swbuf_r+0x62>
 800b240:	89a3      	ldrh	r3, [r4, #12]
 800b242:	07db      	lsls	r3, r3, #31
 800b244:	d506      	bpl.n	800b254 <__swbuf_r+0x6c>
 800b246:	2e0a      	cmp	r6, #10
 800b248:	d104      	bne.n	800b254 <__swbuf_r+0x6c>
 800b24a:	4621      	mov	r1, r4
 800b24c:	4628      	mov	r0, r5
 800b24e:	f000 f927 	bl	800b4a0 <_fflush_r>
 800b252:	b988      	cbnz	r0, 800b278 <__swbuf_r+0x90>
 800b254:	4638      	mov	r0, r7
 800b256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b258:	4b0a      	ldr	r3, [pc, #40]	; (800b284 <__swbuf_r+0x9c>)
 800b25a:	429c      	cmp	r4, r3
 800b25c:	d101      	bne.n	800b262 <__swbuf_r+0x7a>
 800b25e:	68ac      	ldr	r4, [r5, #8]
 800b260:	e7cf      	b.n	800b202 <__swbuf_r+0x1a>
 800b262:	4b09      	ldr	r3, [pc, #36]	; (800b288 <__swbuf_r+0xa0>)
 800b264:	429c      	cmp	r4, r3
 800b266:	bf08      	it	eq
 800b268:	68ec      	ldreq	r4, [r5, #12]
 800b26a:	e7ca      	b.n	800b202 <__swbuf_r+0x1a>
 800b26c:	4621      	mov	r1, r4
 800b26e:	4628      	mov	r0, r5
 800b270:	f000 f81a 	bl	800b2a8 <__swsetup_r>
 800b274:	2800      	cmp	r0, #0
 800b276:	d0cb      	beq.n	800b210 <__swbuf_r+0x28>
 800b278:	f04f 37ff 	mov.w	r7, #4294967295
 800b27c:	e7ea      	b.n	800b254 <__swbuf_r+0x6c>
 800b27e:	bf00      	nop
 800b280:	0800dc84 	.word	0x0800dc84
 800b284:	0800dca4 	.word	0x0800dca4
 800b288:	0800dc64 	.word	0x0800dc64

0800b28c <__ascii_wctomb>:
 800b28c:	b149      	cbz	r1, 800b2a2 <__ascii_wctomb+0x16>
 800b28e:	2aff      	cmp	r2, #255	; 0xff
 800b290:	bf85      	ittet	hi
 800b292:	238a      	movhi	r3, #138	; 0x8a
 800b294:	6003      	strhi	r3, [r0, #0]
 800b296:	700a      	strbls	r2, [r1, #0]
 800b298:	f04f 30ff 	movhi.w	r0, #4294967295
 800b29c:	bf98      	it	ls
 800b29e:	2001      	movls	r0, #1
 800b2a0:	4770      	bx	lr
 800b2a2:	4608      	mov	r0, r1
 800b2a4:	4770      	bx	lr
	...

0800b2a8 <__swsetup_r>:
 800b2a8:	4b32      	ldr	r3, [pc, #200]	; (800b374 <__swsetup_r+0xcc>)
 800b2aa:	b570      	push	{r4, r5, r6, lr}
 800b2ac:	681d      	ldr	r5, [r3, #0]
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	460c      	mov	r4, r1
 800b2b2:	b125      	cbz	r5, 800b2be <__swsetup_r+0x16>
 800b2b4:	69ab      	ldr	r3, [r5, #24]
 800b2b6:	b913      	cbnz	r3, 800b2be <__swsetup_r+0x16>
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	f000 f985 	bl	800b5c8 <__sinit>
 800b2be:	4b2e      	ldr	r3, [pc, #184]	; (800b378 <__swsetup_r+0xd0>)
 800b2c0:	429c      	cmp	r4, r3
 800b2c2:	d10f      	bne.n	800b2e4 <__swsetup_r+0x3c>
 800b2c4:	686c      	ldr	r4, [r5, #4]
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2cc:	0719      	lsls	r1, r3, #28
 800b2ce:	d42c      	bmi.n	800b32a <__swsetup_r+0x82>
 800b2d0:	06dd      	lsls	r5, r3, #27
 800b2d2:	d411      	bmi.n	800b2f8 <__swsetup_r+0x50>
 800b2d4:	2309      	movs	r3, #9
 800b2d6:	6033      	str	r3, [r6, #0]
 800b2d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2dc:	81a3      	strh	r3, [r4, #12]
 800b2de:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e2:	e03e      	b.n	800b362 <__swsetup_r+0xba>
 800b2e4:	4b25      	ldr	r3, [pc, #148]	; (800b37c <__swsetup_r+0xd4>)
 800b2e6:	429c      	cmp	r4, r3
 800b2e8:	d101      	bne.n	800b2ee <__swsetup_r+0x46>
 800b2ea:	68ac      	ldr	r4, [r5, #8]
 800b2ec:	e7eb      	b.n	800b2c6 <__swsetup_r+0x1e>
 800b2ee:	4b24      	ldr	r3, [pc, #144]	; (800b380 <__swsetup_r+0xd8>)
 800b2f0:	429c      	cmp	r4, r3
 800b2f2:	bf08      	it	eq
 800b2f4:	68ec      	ldreq	r4, [r5, #12]
 800b2f6:	e7e6      	b.n	800b2c6 <__swsetup_r+0x1e>
 800b2f8:	0758      	lsls	r0, r3, #29
 800b2fa:	d512      	bpl.n	800b322 <__swsetup_r+0x7a>
 800b2fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2fe:	b141      	cbz	r1, 800b312 <__swsetup_r+0x6a>
 800b300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b304:	4299      	cmp	r1, r3
 800b306:	d002      	beq.n	800b30e <__swsetup_r+0x66>
 800b308:	4630      	mov	r0, r6
 800b30a:	f7ff fb31 	bl	800a970 <_free_r>
 800b30e:	2300      	movs	r3, #0
 800b310:	6363      	str	r3, [r4, #52]	; 0x34
 800b312:	89a3      	ldrh	r3, [r4, #12]
 800b314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b318:	81a3      	strh	r3, [r4, #12]
 800b31a:	2300      	movs	r3, #0
 800b31c:	6063      	str	r3, [r4, #4]
 800b31e:	6923      	ldr	r3, [r4, #16]
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	89a3      	ldrh	r3, [r4, #12]
 800b324:	f043 0308 	orr.w	r3, r3, #8
 800b328:	81a3      	strh	r3, [r4, #12]
 800b32a:	6923      	ldr	r3, [r4, #16]
 800b32c:	b94b      	cbnz	r3, 800b342 <__swsetup_r+0x9a>
 800b32e:	89a3      	ldrh	r3, [r4, #12]
 800b330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b338:	d003      	beq.n	800b342 <__swsetup_r+0x9a>
 800b33a:	4621      	mov	r1, r4
 800b33c:	4630      	mov	r0, r6
 800b33e:	f000 fa09 	bl	800b754 <__smakebuf_r>
 800b342:	89a0      	ldrh	r0, [r4, #12]
 800b344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b348:	f010 0301 	ands.w	r3, r0, #1
 800b34c:	d00a      	beq.n	800b364 <__swsetup_r+0xbc>
 800b34e:	2300      	movs	r3, #0
 800b350:	60a3      	str	r3, [r4, #8]
 800b352:	6963      	ldr	r3, [r4, #20]
 800b354:	425b      	negs	r3, r3
 800b356:	61a3      	str	r3, [r4, #24]
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	b943      	cbnz	r3, 800b36e <__swsetup_r+0xc6>
 800b35c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b360:	d1ba      	bne.n	800b2d8 <__swsetup_r+0x30>
 800b362:	bd70      	pop	{r4, r5, r6, pc}
 800b364:	0781      	lsls	r1, r0, #30
 800b366:	bf58      	it	pl
 800b368:	6963      	ldrpl	r3, [r4, #20]
 800b36a:	60a3      	str	r3, [r4, #8]
 800b36c:	e7f4      	b.n	800b358 <__swsetup_r+0xb0>
 800b36e:	2000      	movs	r0, #0
 800b370:	e7f7      	b.n	800b362 <__swsetup_r+0xba>
 800b372:	bf00      	nop
 800b374:	2000001c 	.word	0x2000001c
 800b378:	0800dc84 	.word	0x0800dc84
 800b37c:	0800dca4 	.word	0x0800dca4
 800b380:	0800dc64 	.word	0x0800dc64

0800b384 <abort>:
 800b384:	b508      	push	{r3, lr}
 800b386:	2006      	movs	r0, #6
 800b388:	f000 fa54 	bl	800b834 <raise>
 800b38c:	2001      	movs	r0, #1
 800b38e:	f7f7 fc63 	bl	8002c58 <_exit>
	...

0800b394 <__sflush_r>:
 800b394:	898a      	ldrh	r2, [r1, #12]
 800b396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b39a:	4605      	mov	r5, r0
 800b39c:	0710      	lsls	r0, r2, #28
 800b39e:	460c      	mov	r4, r1
 800b3a0:	d458      	bmi.n	800b454 <__sflush_r+0xc0>
 800b3a2:	684b      	ldr	r3, [r1, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	dc05      	bgt.n	800b3b4 <__sflush_r+0x20>
 800b3a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	dc02      	bgt.n	800b3b4 <__sflush_r+0x20>
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3b6:	2e00      	cmp	r6, #0
 800b3b8:	d0f9      	beq.n	800b3ae <__sflush_r+0x1a>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3c0:	682f      	ldr	r7, [r5, #0]
 800b3c2:	602b      	str	r3, [r5, #0]
 800b3c4:	d032      	beq.n	800b42c <__sflush_r+0x98>
 800b3c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	075a      	lsls	r2, r3, #29
 800b3cc:	d505      	bpl.n	800b3da <__sflush_r+0x46>
 800b3ce:	6863      	ldr	r3, [r4, #4]
 800b3d0:	1ac0      	subs	r0, r0, r3
 800b3d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3d4:	b10b      	cbz	r3, 800b3da <__sflush_r+0x46>
 800b3d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3d8:	1ac0      	subs	r0, r0, r3
 800b3da:	2300      	movs	r3, #0
 800b3dc:	4602      	mov	r2, r0
 800b3de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3e0:	6a21      	ldr	r1, [r4, #32]
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	47b0      	blx	r6
 800b3e6:	1c43      	adds	r3, r0, #1
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	d106      	bne.n	800b3fa <__sflush_r+0x66>
 800b3ec:	6829      	ldr	r1, [r5, #0]
 800b3ee:	291d      	cmp	r1, #29
 800b3f0:	d82c      	bhi.n	800b44c <__sflush_r+0xb8>
 800b3f2:	4a2a      	ldr	r2, [pc, #168]	; (800b49c <__sflush_r+0x108>)
 800b3f4:	40ca      	lsrs	r2, r1
 800b3f6:	07d6      	lsls	r6, r2, #31
 800b3f8:	d528      	bpl.n	800b44c <__sflush_r+0xb8>
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	6062      	str	r2, [r4, #4]
 800b3fe:	04d9      	lsls	r1, r3, #19
 800b400:	6922      	ldr	r2, [r4, #16]
 800b402:	6022      	str	r2, [r4, #0]
 800b404:	d504      	bpl.n	800b410 <__sflush_r+0x7c>
 800b406:	1c42      	adds	r2, r0, #1
 800b408:	d101      	bne.n	800b40e <__sflush_r+0x7a>
 800b40a:	682b      	ldr	r3, [r5, #0]
 800b40c:	b903      	cbnz	r3, 800b410 <__sflush_r+0x7c>
 800b40e:	6560      	str	r0, [r4, #84]	; 0x54
 800b410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b412:	602f      	str	r7, [r5, #0]
 800b414:	2900      	cmp	r1, #0
 800b416:	d0ca      	beq.n	800b3ae <__sflush_r+0x1a>
 800b418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b41c:	4299      	cmp	r1, r3
 800b41e:	d002      	beq.n	800b426 <__sflush_r+0x92>
 800b420:	4628      	mov	r0, r5
 800b422:	f7ff faa5 	bl	800a970 <_free_r>
 800b426:	2000      	movs	r0, #0
 800b428:	6360      	str	r0, [r4, #52]	; 0x34
 800b42a:	e7c1      	b.n	800b3b0 <__sflush_r+0x1c>
 800b42c:	6a21      	ldr	r1, [r4, #32]
 800b42e:	2301      	movs	r3, #1
 800b430:	4628      	mov	r0, r5
 800b432:	47b0      	blx	r6
 800b434:	1c41      	adds	r1, r0, #1
 800b436:	d1c7      	bne.n	800b3c8 <__sflush_r+0x34>
 800b438:	682b      	ldr	r3, [r5, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0c4      	beq.n	800b3c8 <__sflush_r+0x34>
 800b43e:	2b1d      	cmp	r3, #29
 800b440:	d001      	beq.n	800b446 <__sflush_r+0xb2>
 800b442:	2b16      	cmp	r3, #22
 800b444:	d101      	bne.n	800b44a <__sflush_r+0xb6>
 800b446:	602f      	str	r7, [r5, #0]
 800b448:	e7b1      	b.n	800b3ae <__sflush_r+0x1a>
 800b44a:	89a3      	ldrh	r3, [r4, #12]
 800b44c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b450:	81a3      	strh	r3, [r4, #12]
 800b452:	e7ad      	b.n	800b3b0 <__sflush_r+0x1c>
 800b454:	690f      	ldr	r7, [r1, #16]
 800b456:	2f00      	cmp	r7, #0
 800b458:	d0a9      	beq.n	800b3ae <__sflush_r+0x1a>
 800b45a:	0793      	lsls	r3, r2, #30
 800b45c:	680e      	ldr	r6, [r1, #0]
 800b45e:	bf08      	it	eq
 800b460:	694b      	ldreq	r3, [r1, #20]
 800b462:	600f      	str	r7, [r1, #0]
 800b464:	bf18      	it	ne
 800b466:	2300      	movne	r3, #0
 800b468:	eba6 0807 	sub.w	r8, r6, r7
 800b46c:	608b      	str	r3, [r1, #8]
 800b46e:	f1b8 0f00 	cmp.w	r8, #0
 800b472:	dd9c      	ble.n	800b3ae <__sflush_r+0x1a>
 800b474:	6a21      	ldr	r1, [r4, #32]
 800b476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b478:	4643      	mov	r3, r8
 800b47a:	463a      	mov	r2, r7
 800b47c:	4628      	mov	r0, r5
 800b47e:	47b0      	blx	r6
 800b480:	2800      	cmp	r0, #0
 800b482:	dc06      	bgt.n	800b492 <__sflush_r+0xfe>
 800b484:	89a3      	ldrh	r3, [r4, #12]
 800b486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b48a:	81a3      	strh	r3, [r4, #12]
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	e78e      	b.n	800b3b0 <__sflush_r+0x1c>
 800b492:	4407      	add	r7, r0
 800b494:	eba8 0800 	sub.w	r8, r8, r0
 800b498:	e7e9      	b.n	800b46e <__sflush_r+0xda>
 800b49a:	bf00      	nop
 800b49c:	20400001 	.word	0x20400001

0800b4a0 <_fflush_r>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	690b      	ldr	r3, [r1, #16]
 800b4a4:	4605      	mov	r5, r0
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	b913      	cbnz	r3, 800b4b0 <_fflush_r+0x10>
 800b4aa:	2500      	movs	r5, #0
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	bd38      	pop	{r3, r4, r5, pc}
 800b4b0:	b118      	cbz	r0, 800b4ba <_fflush_r+0x1a>
 800b4b2:	6983      	ldr	r3, [r0, #24]
 800b4b4:	b90b      	cbnz	r3, 800b4ba <_fflush_r+0x1a>
 800b4b6:	f000 f887 	bl	800b5c8 <__sinit>
 800b4ba:	4b14      	ldr	r3, [pc, #80]	; (800b50c <_fflush_r+0x6c>)
 800b4bc:	429c      	cmp	r4, r3
 800b4be:	d11b      	bne.n	800b4f8 <_fflush_r+0x58>
 800b4c0:	686c      	ldr	r4, [r5, #4]
 800b4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d0ef      	beq.n	800b4aa <_fflush_r+0xa>
 800b4ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4cc:	07d0      	lsls	r0, r2, #31
 800b4ce:	d404      	bmi.n	800b4da <_fflush_r+0x3a>
 800b4d0:	0599      	lsls	r1, r3, #22
 800b4d2:	d402      	bmi.n	800b4da <_fflush_r+0x3a>
 800b4d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4d6:	f000 f915 	bl	800b704 <__retarget_lock_acquire_recursive>
 800b4da:	4628      	mov	r0, r5
 800b4dc:	4621      	mov	r1, r4
 800b4de:	f7ff ff59 	bl	800b394 <__sflush_r>
 800b4e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4e4:	07da      	lsls	r2, r3, #31
 800b4e6:	4605      	mov	r5, r0
 800b4e8:	d4e0      	bmi.n	800b4ac <_fflush_r+0xc>
 800b4ea:	89a3      	ldrh	r3, [r4, #12]
 800b4ec:	059b      	lsls	r3, r3, #22
 800b4ee:	d4dd      	bmi.n	800b4ac <_fflush_r+0xc>
 800b4f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4f2:	f000 f908 	bl	800b706 <__retarget_lock_release_recursive>
 800b4f6:	e7d9      	b.n	800b4ac <_fflush_r+0xc>
 800b4f8:	4b05      	ldr	r3, [pc, #20]	; (800b510 <_fflush_r+0x70>)
 800b4fa:	429c      	cmp	r4, r3
 800b4fc:	d101      	bne.n	800b502 <_fflush_r+0x62>
 800b4fe:	68ac      	ldr	r4, [r5, #8]
 800b500:	e7df      	b.n	800b4c2 <_fflush_r+0x22>
 800b502:	4b04      	ldr	r3, [pc, #16]	; (800b514 <_fflush_r+0x74>)
 800b504:	429c      	cmp	r4, r3
 800b506:	bf08      	it	eq
 800b508:	68ec      	ldreq	r4, [r5, #12]
 800b50a:	e7da      	b.n	800b4c2 <_fflush_r+0x22>
 800b50c:	0800dc84 	.word	0x0800dc84
 800b510:	0800dca4 	.word	0x0800dca4
 800b514:	0800dc64 	.word	0x0800dc64

0800b518 <std>:
 800b518:	2300      	movs	r3, #0
 800b51a:	b510      	push	{r4, lr}
 800b51c:	4604      	mov	r4, r0
 800b51e:	e9c0 3300 	strd	r3, r3, [r0]
 800b522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b526:	6083      	str	r3, [r0, #8]
 800b528:	8181      	strh	r1, [r0, #12]
 800b52a:	6643      	str	r3, [r0, #100]	; 0x64
 800b52c:	81c2      	strh	r2, [r0, #14]
 800b52e:	6183      	str	r3, [r0, #24]
 800b530:	4619      	mov	r1, r3
 800b532:	2208      	movs	r2, #8
 800b534:	305c      	adds	r0, #92	; 0x5c
 800b536:	f7fd fb67 	bl	8008c08 <memset>
 800b53a:	4b05      	ldr	r3, [pc, #20]	; (800b550 <std+0x38>)
 800b53c:	6263      	str	r3, [r4, #36]	; 0x24
 800b53e:	4b05      	ldr	r3, [pc, #20]	; (800b554 <std+0x3c>)
 800b540:	62a3      	str	r3, [r4, #40]	; 0x28
 800b542:	4b05      	ldr	r3, [pc, #20]	; (800b558 <std+0x40>)
 800b544:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b546:	4b05      	ldr	r3, [pc, #20]	; (800b55c <std+0x44>)
 800b548:	6224      	str	r4, [r4, #32]
 800b54a:	6323      	str	r3, [r4, #48]	; 0x30
 800b54c:	bd10      	pop	{r4, pc}
 800b54e:	bf00      	nop
 800b550:	0800b86d 	.word	0x0800b86d
 800b554:	0800b88f 	.word	0x0800b88f
 800b558:	0800b8c7 	.word	0x0800b8c7
 800b55c:	0800b8eb 	.word	0x0800b8eb

0800b560 <_cleanup_r>:
 800b560:	4901      	ldr	r1, [pc, #4]	; (800b568 <_cleanup_r+0x8>)
 800b562:	f000 b8af 	b.w	800b6c4 <_fwalk_reent>
 800b566:	bf00      	nop
 800b568:	0800b4a1 	.word	0x0800b4a1

0800b56c <__sfmoreglue>:
 800b56c:	b570      	push	{r4, r5, r6, lr}
 800b56e:	2268      	movs	r2, #104	; 0x68
 800b570:	1e4d      	subs	r5, r1, #1
 800b572:	4355      	muls	r5, r2
 800b574:	460e      	mov	r6, r1
 800b576:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b57a:	f7ff fa65 	bl	800aa48 <_malloc_r>
 800b57e:	4604      	mov	r4, r0
 800b580:	b140      	cbz	r0, 800b594 <__sfmoreglue+0x28>
 800b582:	2100      	movs	r1, #0
 800b584:	e9c0 1600 	strd	r1, r6, [r0]
 800b588:	300c      	adds	r0, #12
 800b58a:	60a0      	str	r0, [r4, #8]
 800b58c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b590:	f7fd fb3a 	bl	8008c08 <memset>
 800b594:	4620      	mov	r0, r4
 800b596:	bd70      	pop	{r4, r5, r6, pc}

0800b598 <__sfp_lock_acquire>:
 800b598:	4801      	ldr	r0, [pc, #4]	; (800b5a0 <__sfp_lock_acquire+0x8>)
 800b59a:	f000 b8b3 	b.w	800b704 <__retarget_lock_acquire_recursive>
 800b59e:	bf00      	nop
 800b5a0:	20000e79 	.word	0x20000e79

0800b5a4 <__sfp_lock_release>:
 800b5a4:	4801      	ldr	r0, [pc, #4]	; (800b5ac <__sfp_lock_release+0x8>)
 800b5a6:	f000 b8ae 	b.w	800b706 <__retarget_lock_release_recursive>
 800b5aa:	bf00      	nop
 800b5ac:	20000e79 	.word	0x20000e79

0800b5b0 <__sinit_lock_acquire>:
 800b5b0:	4801      	ldr	r0, [pc, #4]	; (800b5b8 <__sinit_lock_acquire+0x8>)
 800b5b2:	f000 b8a7 	b.w	800b704 <__retarget_lock_acquire_recursive>
 800b5b6:	bf00      	nop
 800b5b8:	20000e7a 	.word	0x20000e7a

0800b5bc <__sinit_lock_release>:
 800b5bc:	4801      	ldr	r0, [pc, #4]	; (800b5c4 <__sinit_lock_release+0x8>)
 800b5be:	f000 b8a2 	b.w	800b706 <__retarget_lock_release_recursive>
 800b5c2:	bf00      	nop
 800b5c4:	20000e7a 	.word	0x20000e7a

0800b5c8 <__sinit>:
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	f7ff fff0 	bl	800b5b0 <__sinit_lock_acquire>
 800b5d0:	69a3      	ldr	r3, [r4, #24]
 800b5d2:	b11b      	cbz	r3, 800b5dc <__sinit+0x14>
 800b5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5d8:	f7ff bff0 	b.w	800b5bc <__sinit_lock_release>
 800b5dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b5e0:	6523      	str	r3, [r4, #80]	; 0x50
 800b5e2:	4b13      	ldr	r3, [pc, #76]	; (800b630 <__sinit+0x68>)
 800b5e4:	4a13      	ldr	r2, [pc, #76]	; (800b634 <__sinit+0x6c>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b5ea:	42a3      	cmp	r3, r4
 800b5ec:	bf04      	itt	eq
 800b5ee:	2301      	moveq	r3, #1
 800b5f0:	61a3      	streq	r3, [r4, #24]
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f000 f820 	bl	800b638 <__sfp>
 800b5f8:	6060      	str	r0, [r4, #4]
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f000 f81c 	bl	800b638 <__sfp>
 800b600:	60a0      	str	r0, [r4, #8]
 800b602:	4620      	mov	r0, r4
 800b604:	f000 f818 	bl	800b638 <__sfp>
 800b608:	2200      	movs	r2, #0
 800b60a:	60e0      	str	r0, [r4, #12]
 800b60c:	2104      	movs	r1, #4
 800b60e:	6860      	ldr	r0, [r4, #4]
 800b610:	f7ff ff82 	bl	800b518 <std>
 800b614:	68a0      	ldr	r0, [r4, #8]
 800b616:	2201      	movs	r2, #1
 800b618:	2109      	movs	r1, #9
 800b61a:	f7ff ff7d 	bl	800b518 <std>
 800b61e:	68e0      	ldr	r0, [r4, #12]
 800b620:	2202      	movs	r2, #2
 800b622:	2112      	movs	r1, #18
 800b624:	f7ff ff78 	bl	800b518 <std>
 800b628:	2301      	movs	r3, #1
 800b62a:	61a3      	str	r3, [r4, #24]
 800b62c:	e7d2      	b.n	800b5d4 <__sinit+0xc>
 800b62e:	bf00      	nop
 800b630:	0800d8ec 	.word	0x0800d8ec
 800b634:	0800b561 	.word	0x0800b561

0800b638 <__sfp>:
 800b638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63a:	4607      	mov	r7, r0
 800b63c:	f7ff ffac 	bl	800b598 <__sfp_lock_acquire>
 800b640:	4b1e      	ldr	r3, [pc, #120]	; (800b6bc <__sfp+0x84>)
 800b642:	681e      	ldr	r6, [r3, #0]
 800b644:	69b3      	ldr	r3, [r6, #24]
 800b646:	b913      	cbnz	r3, 800b64e <__sfp+0x16>
 800b648:	4630      	mov	r0, r6
 800b64a:	f7ff ffbd 	bl	800b5c8 <__sinit>
 800b64e:	3648      	adds	r6, #72	; 0x48
 800b650:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b654:	3b01      	subs	r3, #1
 800b656:	d503      	bpl.n	800b660 <__sfp+0x28>
 800b658:	6833      	ldr	r3, [r6, #0]
 800b65a:	b30b      	cbz	r3, 800b6a0 <__sfp+0x68>
 800b65c:	6836      	ldr	r6, [r6, #0]
 800b65e:	e7f7      	b.n	800b650 <__sfp+0x18>
 800b660:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b664:	b9d5      	cbnz	r5, 800b69c <__sfp+0x64>
 800b666:	4b16      	ldr	r3, [pc, #88]	; (800b6c0 <__sfp+0x88>)
 800b668:	60e3      	str	r3, [r4, #12]
 800b66a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b66e:	6665      	str	r5, [r4, #100]	; 0x64
 800b670:	f000 f847 	bl	800b702 <__retarget_lock_init_recursive>
 800b674:	f7ff ff96 	bl	800b5a4 <__sfp_lock_release>
 800b678:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b67c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b680:	6025      	str	r5, [r4, #0]
 800b682:	61a5      	str	r5, [r4, #24]
 800b684:	2208      	movs	r2, #8
 800b686:	4629      	mov	r1, r5
 800b688:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b68c:	f7fd fabc 	bl	8008c08 <memset>
 800b690:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b694:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b698:	4620      	mov	r0, r4
 800b69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b69c:	3468      	adds	r4, #104	; 0x68
 800b69e:	e7d9      	b.n	800b654 <__sfp+0x1c>
 800b6a0:	2104      	movs	r1, #4
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	f7ff ff62 	bl	800b56c <__sfmoreglue>
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	6030      	str	r0, [r6, #0]
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d1d5      	bne.n	800b65c <__sfp+0x24>
 800b6b0:	f7ff ff78 	bl	800b5a4 <__sfp_lock_release>
 800b6b4:	230c      	movs	r3, #12
 800b6b6:	603b      	str	r3, [r7, #0]
 800b6b8:	e7ee      	b.n	800b698 <__sfp+0x60>
 800b6ba:	bf00      	nop
 800b6bc:	0800d8ec 	.word	0x0800d8ec
 800b6c0:	ffff0001 	.word	0xffff0001

0800b6c4 <_fwalk_reent>:
 800b6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6c8:	4606      	mov	r6, r0
 800b6ca:	4688      	mov	r8, r1
 800b6cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b6d0:	2700      	movs	r7, #0
 800b6d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6d6:	f1b9 0901 	subs.w	r9, r9, #1
 800b6da:	d505      	bpl.n	800b6e8 <_fwalk_reent+0x24>
 800b6dc:	6824      	ldr	r4, [r4, #0]
 800b6de:	2c00      	cmp	r4, #0
 800b6e0:	d1f7      	bne.n	800b6d2 <_fwalk_reent+0xe>
 800b6e2:	4638      	mov	r0, r7
 800b6e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6e8:	89ab      	ldrh	r3, [r5, #12]
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d907      	bls.n	800b6fe <_fwalk_reent+0x3a>
 800b6ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	d003      	beq.n	800b6fe <_fwalk_reent+0x3a>
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	47c0      	blx	r8
 800b6fc:	4307      	orrs	r7, r0
 800b6fe:	3568      	adds	r5, #104	; 0x68
 800b700:	e7e9      	b.n	800b6d6 <_fwalk_reent+0x12>

0800b702 <__retarget_lock_init_recursive>:
 800b702:	4770      	bx	lr

0800b704 <__retarget_lock_acquire_recursive>:
 800b704:	4770      	bx	lr

0800b706 <__retarget_lock_release_recursive>:
 800b706:	4770      	bx	lr

0800b708 <__swhatbuf_r>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	460e      	mov	r6, r1
 800b70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b710:	2900      	cmp	r1, #0
 800b712:	b096      	sub	sp, #88	; 0x58
 800b714:	4614      	mov	r4, r2
 800b716:	461d      	mov	r5, r3
 800b718:	da08      	bge.n	800b72c <__swhatbuf_r+0x24>
 800b71a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	602a      	str	r2, [r5, #0]
 800b722:	061a      	lsls	r2, r3, #24
 800b724:	d410      	bmi.n	800b748 <__swhatbuf_r+0x40>
 800b726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b72a:	e00e      	b.n	800b74a <__swhatbuf_r+0x42>
 800b72c:	466a      	mov	r2, sp
 800b72e:	f000 f903 	bl	800b938 <_fstat_r>
 800b732:	2800      	cmp	r0, #0
 800b734:	dbf1      	blt.n	800b71a <__swhatbuf_r+0x12>
 800b736:	9a01      	ldr	r2, [sp, #4]
 800b738:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b73c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b740:	425a      	negs	r2, r3
 800b742:	415a      	adcs	r2, r3
 800b744:	602a      	str	r2, [r5, #0]
 800b746:	e7ee      	b.n	800b726 <__swhatbuf_r+0x1e>
 800b748:	2340      	movs	r3, #64	; 0x40
 800b74a:	2000      	movs	r0, #0
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	b016      	add	sp, #88	; 0x58
 800b750:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b754 <__smakebuf_r>:
 800b754:	898b      	ldrh	r3, [r1, #12]
 800b756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b758:	079d      	lsls	r5, r3, #30
 800b75a:	4606      	mov	r6, r0
 800b75c:	460c      	mov	r4, r1
 800b75e:	d507      	bpl.n	800b770 <__smakebuf_r+0x1c>
 800b760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	6123      	str	r3, [r4, #16]
 800b768:	2301      	movs	r3, #1
 800b76a:	6163      	str	r3, [r4, #20]
 800b76c:	b002      	add	sp, #8
 800b76e:	bd70      	pop	{r4, r5, r6, pc}
 800b770:	ab01      	add	r3, sp, #4
 800b772:	466a      	mov	r2, sp
 800b774:	f7ff ffc8 	bl	800b708 <__swhatbuf_r>
 800b778:	9900      	ldr	r1, [sp, #0]
 800b77a:	4605      	mov	r5, r0
 800b77c:	4630      	mov	r0, r6
 800b77e:	f7ff f963 	bl	800aa48 <_malloc_r>
 800b782:	b948      	cbnz	r0, 800b798 <__smakebuf_r+0x44>
 800b784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b788:	059a      	lsls	r2, r3, #22
 800b78a:	d4ef      	bmi.n	800b76c <__smakebuf_r+0x18>
 800b78c:	f023 0303 	bic.w	r3, r3, #3
 800b790:	f043 0302 	orr.w	r3, r3, #2
 800b794:	81a3      	strh	r3, [r4, #12]
 800b796:	e7e3      	b.n	800b760 <__smakebuf_r+0xc>
 800b798:	4b0d      	ldr	r3, [pc, #52]	; (800b7d0 <__smakebuf_r+0x7c>)
 800b79a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	6020      	str	r0, [r4, #0]
 800b7a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7a4:	81a3      	strh	r3, [r4, #12]
 800b7a6:	9b00      	ldr	r3, [sp, #0]
 800b7a8:	6163      	str	r3, [r4, #20]
 800b7aa:	9b01      	ldr	r3, [sp, #4]
 800b7ac:	6120      	str	r0, [r4, #16]
 800b7ae:	b15b      	cbz	r3, 800b7c8 <__smakebuf_r+0x74>
 800b7b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	f000 f8d1 	bl	800b95c <_isatty_r>
 800b7ba:	b128      	cbz	r0, 800b7c8 <__smakebuf_r+0x74>
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	f023 0303 	bic.w	r3, r3, #3
 800b7c2:	f043 0301 	orr.w	r3, r3, #1
 800b7c6:	81a3      	strh	r3, [r4, #12]
 800b7c8:	89a0      	ldrh	r0, [r4, #12]
 800b7ca:	4305      	orrs	r5, r0
 800b7cc:	81a5      	strh	r5, [r4, #12]
 800b7ce:	e7cd      	b.n	800b76c <__smakebuf_r+0x18>
 800b7d0:	0800b561 	.word	0x0800b561

0800b7d4 <_malloc_usable_size_r>:
 800b7d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7d8:	1f18      	subs	r0, r3, #4
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	bfbc      	itt	lt
 800b7de:	580b      	ldrlt	r3, [r1, r0]
 800b7e0:	18c0      	addlt	r0, r0, r3
 800b7e2:	4770      	bx	lr

0800b7e4 <_raise_r>:
 800b7e4:	291f      	cmp	r1, #31
 800b7e6:	b538      	push	{r3, r4, r5, lr}
 800b7e8:	4604      	mov	r4, r0
 800b7ea:	460d      	mov	r5, r1
 800b7ec:	d904      	bls.n	800b7f8 <_raise_r+0x14>
 800b7ee:	2316      	movs	r3, #22
 800b7f0:	6003      	str	r3, [r0, #0]
 800b7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f6:	bd38      	pop	{r3, r4, r5, pc}
 800b7f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b7fa:	b112      	cbz	r2, 800b802 <_raise_r+0x1e>
 800b7fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b800:	b94b      	cbnz	r3, 800b816 <_raise_r+0x32>
 800b802:	4620      	mov	r0, r4
 800b804:	f000 f830 	bl	800b868 <_getpid_r>
 800b808:	462a      	mov	r2, r5
 800b80a:	4601      	mov	r1, r0
 800b80c:	4620      	mov	r0, r4
 800b80e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b812:	f000 b817 	b.w	800b844 <_kill_r>
 800b816:	2b01      	cmp	r3, #1
 800b818:	d00a      	beq.n	800b830 <_raise_r+0x4c>
 800b81a:	1c59      	adds	r1, r3, #1
 800b81c:	d103      	bne.n	800b826 <_raise_r+0x42>
 800b81e:	2316      	movs	r3, #22
 800b820:	6003      	str	r3, [r0, #0]
 800b822:	2001      	movs	r0, #1
 800b824:	e7e7      	b.n	800b7f6 <_raise_r+0x12>
 800b826:	2400      	movs	r4, #0
 800b828:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b82c:	4628      	mov	r0, r5
 800b82e:	4798      	blx	r3
 800b830:	2000      	movs	r0, #0
 800b832:	e7e0      	b.n	800b7f6 <_raise_r+0x12>

0800b834 <raise>:
 800b834:	4b02      	ldr	r3, [pc, #8]	; (800b840 <raise+0xc>)
 800b836:	4601      	mov	r1, r0
 800b838:	6818      	ldr	r0, [r3, #0]
 800b83a:	f7ff bfd3 	b.w	800b7e4 <_raise_r>
 800b83e:	bf00      	nop
 800b840:	2000001c 	.word	0x2000001c

0800b844 <_kill_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	4d07      	ldr	r5, [pc, #28]	; (800b864 <_kill_r+0x20>)
 800b848:	2300      	movs	r3, #0
 800b84a:	4604      	mov	r4, r0
 800b84c:	4608      	mov	r0, r1
 800b84e:	4611      	mov	r1, r2
 800b850:	602b      	str	r3, [r5, #0]
 800b852:	f7f7 f9f1 	bl	8002c38 <_kill>
 800b856:	1c43      	adds	r3, r0, #1
 800b858:	d102      	bne.n	800b860 <_kill_r+0x1c>
 800b85a:	682b      	ldr	r3, [r5, #0]
 800b85c:	b103      	cbz	r3, 800b860 <_kill_r+0x1c>
 800b85e:	6023      	str	r3, [r4, #0]
 800b860:	bd38      	pop	{r3, r4, r5, pc}
 800b862:	bf00      	nop
 800b864:	20000e74 	.word	0x20000e74

0800b868 <_getpid_r>:
 800b868:	f7f7 b9de 	b.w	8002c28 <_getpid>

0800b86c <__sread>:
 800b86c:	b510      	push	{r4, lr}
 800b86e:	460c      	mov	r4, r1
 800b870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b874:	f000 f894 	bl	800b9a0 <_read_r>
 800b878:	2800      	cmp	r0, #0
 800b87a:	bfab      	itete	ge
 800b87c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b87e:	89a3      	ldrhlt	r3, [r4, #12]
 800b880:	181b      	addge	r3, r3, r0
 800b882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b886:	bfac      	ite	ge
 800b888:	6563      	strge	r3, [r4, #84]	; 0x54
 800b88a:	81a3      	strhlt	r3, [r4, #12]
 800b88c:	bd10      	pop	{r4, pc}

0800b88e <__swrite>:
 800b88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b892:	461f      	mov	r7, r3
 800b894:	898b      	ldrh	r3, [r1, #12]
 800b896:	05db      	lsls	r3, r3, #23
 800b898:	4605      	mov	r5, r0
 800b89a:	460c      	mov	r4, r1
 800b89c:	4616      	mov	r6, r2
 800b89e:	d505      	bpl.n	800b8ac <__swrite+0x1e>
 800b8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f000 f868 	bl	800b97c <_lseek_r>
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	4632      	mov	r2, r6
 800b8ba:	463b      	mov	r3, r7
 800b8bc:	4628      	mov	r0, r5
 800b8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c2:	f000 b817 	b.w	800b8f4 <_write_r>

0800b8c6 <__sseek>:
 800b8c6:	b510      	push	{r4, lr}
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ce:	f000 f855 	bl	800b97c <_lseek_r>
 800b8d2:	1c43      	adds	r3, r0, #1
 800b8d4:	89a3      	ldrh	r3, [r4, #12]
 800b8d6:	bf15      	itete	ne
 800b8d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8e2:	81a3      	strheq	r3, [r4, #12]
 800b8e4:	bf18      	it	ne
 800b8e6:	81a3      	strhne	r3, [r4, #12]
 800b8e8:	bd10      	pop	{r4, pc}

0800b8ea <__sclose>:
 800b8ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ee:	f000 b813 	b.w	800b918 <_close_r>
	...

0800b8f4 <_write_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4d07      	ldr	r5, [pc, #28]	; (800b914 <_write_r+0x20>)
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	4608      	mov	r0, r1
 800b8fc:	4611      	mov	r1, r2
 800b8fe:	2200      	movs	r2, #0
 800b900:	602a      	str	r2, [r5, #0]
 800b902:	461a      	mov	r2, r3
 800b904:	f7f7 f9cf 	bl	8002ca6 <_write>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	d102      	bne.n	800b912 <_write_r+0x1e>
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	b103      	cbz	r3, 800b912 <_write_r+0x1e>
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	20000e74 	.word	0x20000e74

0800b918 <_close_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4d06      	ldr	r5, [pc, #24]	; (800b934 <_close_r+0x1c>)
 800b91c:	2300      	movs	r3, #0
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	602b      	str	r3, [r5, #0]
 800b924:	f7f7 f9db 	bl	8002cde <_close>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d102      	bne.n	800b932 <_close_r+0x1a>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	b103      	cbz	r3, 800b932 <_close_r+0x1a>
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	bd38      	pop	{r3, r4, r5, pc}
 800b934:	20000e74 	.word	0x20000e74

0800b938 <_fstat_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4d07      	ldr	r5, [pc, #28]	; (800b958 <_fstat_r+0x20>)
 800b93c:	2300      	movs	r3, #0
 800b93e:	4604      	mov	r4, r0
 800b940:	4608      	mov	r0, r1
 800b942:	4611      	mov	r1, r2
 800b944:	602b      	str	r3, [r5, #0]
 800b946:	f7f7 f9d6 	bl	8002cf6 <_fstat>
 800b94a:	1c43      	adds	r3, r0, #1
 800b94c:	d102      	bne.n	800b954 <_fstat_r+0x1c>
 800b94e:	682b      	ldr	r3, [r5, #0]
 800b950:	b103      	cbz	r3, 800b954 <_fstat_r+0x1c>
 800b952:	6023      	str	r3, [r4, #0]
 800b954:	bd38      	pop	{r3, r4, r5, pc}
 800b956:	bf00      	nop
 800b958:	20000e74 	.word	0x20000e74

0800b95c <_isatty_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4d06      	ldr	r5, [pc, #24]	; (800b978 <_isatty_r+0x1c>)
 800b960:	2300      	movs	r3, #0
 800b962:	4604      	mov	r4, r0
 800b964:	4608      	mov	r0, r1
 800b966:	602b      	str	r3, [r5, #0]
 800b968:	f7f7 f9d5 	bl	8002d16 <_isatty>
 800b96c:	1c43      	adds	r3, r0, #1
 800b96e:	d102      	bne.n	800b976 <_isatty_r+0x1a>
 800b970:	682b      	ldr	r3, [r5, #0]
 800b972:	b103      	cbz	r3, 800b976 <_isatty_r+0x1a>
 800b974:	6023      	str	r3, [r4, #0]
 800b976:	bd38      	pop	{r3, r4, r5, pc}
 800b978:	20000e74 	.word	0x20000e74

0800b97c <_lseek_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	4d07      	ldr	r5, [pc, #28]	; (800b99c <_lseek_r+0x20>)
 800b980:	4604      	mov	r4, r0
 800b982:	4608      	mov	r0, r1
 800b984:	4611      	mov	r1, r2
 800b986:	2200      	movs	r2, #0
 800b988:	602a      	str	r2, [r5, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	f7f7 f9ce 	bl	8002d2c <_lseek>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_lseek_r+0x1e>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_lseek_r+0x1e>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	20000e74 	.word	0x20000e74

0800b9a0 <_read_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	4d07      	ldr	r5, [pc, #28]	; (800b9c0 <_read_r+0x20>)
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	4608      	mov	r0, r1
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	602a      	str	r2, [r5, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	f7f7 f95c 	bl	8002c6c <_read>
 800b9b4:	1c43      	adds	r3, r0, #1
 800b9b6:	d102      	bne.n	800b9be <_read_r+0x1e>
 800b9b8:	682b      	ldr	r3, [r5, #0]
 800b9ba:	b103      	cbz	r3, 800b9be <_read_r+0x1e>
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	bd38      	pop	{r3, r4, r5, pc}
 800b9c0:	20000e74 	.word	0x20000e74

0800b9c4 <_init>:
 800b9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c6:	bf00      	nop
 800b9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ca:	bc08      	pop	{r3}
 800b9cc:	469e      	mov	lr, r3
 800b9ce:	4770      	bx	lr

0800b9d0 <_fini>:
 800b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d2:	bf00      	nop
 800b9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9d6:	bc08      	pop	{r3}
 800b9d8:	469e      	mov	lr, r3
 800b9da:	4770      	bx	lr
